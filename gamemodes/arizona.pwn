/*
	* (1) - Переписанный инвентарь
	* (2) - Номера
	* (3) - Батлпасс
	* (4) - Адекватный цеф, (оптимизация под пк/мобайл)
	* (5) - Бафы от аксов/нашивок FC
	* (6) - Система кастомных NPC [RakNet FC Arizona]
	* (7) - Красное нитро
	* (8) - Кенгурятники
	* (9) - Тюнинг на авто + синхронизация + салон
	* (10) - Экран у ЦБ, [RakNet FC Arizona]
	* (11) - Портальная пушка
	* (12) - Ледяной меч
	* (13) - Система технического тюнинга авто
	* (14) - Расставлены подсказки на всякие ареи (Нажмите для взаимодействия и подобные)
	* (15) - Обновленный донат CEF PC (Показывает куплена ли випка)
	* (16) - Перевод мода на новые плагины один из них MySQL R41-R4
	* (17) - Редактор акссесуаров FC
	* (18) - Family Cars FC
	* (19) - Очень много всего, перечислять заебусь.
	* (20) - Crash Damage [FC Arizona]
	* (21) - Фикс сохранения в: UnInvite, /fwarn, /giverank. / Cохранение /key, ранее не сохранялось.
	* (22) - Переписан /leaders, ранее данная команда была не оптимизирована, к этому показывало не того лидера.
	* (23) - Фикс Центр-Гетто, теперь не будет спамить, то-что, если вы убьёте человека, то получите полноценный розыск гетто.
	* (24) - Киоски
	* (25) - Цеф инвентарь
	* (26) - улучшение випки


	// Мод стоял на картоне, было 90 онлайна, багов 0 это проверено игроками картона.
*/
new global_str[4097], mysql_string[800], SQL_STRING[4097], SQL_GET_ROW_STR[181][128], Global_Time, day_of_week, bool:ANTI_RAK_BOT = false, bool:ANTI_SPAM_RAKNET = true, bool:gameModeCheking[2];

#include 																<a_samp>
#undef MAX_PLAYERS
#define MAX_PLAYERS 50
#include 																<pawnbots>
#include 																<streamer>
#include 																<Pawn.CMD>
#include 																<YSF>
#include 																<a_mysql>
#include 																<sscanf2>
#include 																<foreach>
#include 																<interception>
#include 																<mxINI>
#include 																<mailer>
#include 																<zvehcomp>
#include 																<TOTP>
#include 																<md5>
#include 																<Pawn_RakNet>
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#include ../library/anticheat
#include 																<nex-uf>
#include 																<mapandreas>
#include 																<UnixConvertor>

new MySQL:mysql, MySQL:logs_handle;

#if !defined isnul
	#define isnull(%0)  ((!(%0[0])) || (((%0[0]) == '\1') && (!(%0[1]))))
#endif

#define or ||
#define and &&
#define f format
#define SCM	SendClientMessage
#define SCMALL	SendClientMessageToAll
#define SCMF(%0,%1,%2,%3) format(global_str, 144, %2,%3), SCM(%0, %1, global_str)
#define SAMF(%0,%1,%2) format(global_str, 256, %1,%2), SendAdminsMessage(%0, global_str)
#define SCMALLF(%0,%1,%2) format(global_str, 1024, %1,%2), SendClientMessageToAll(%0, global_str)
#define log(%0,%1) format(global_str, 1024, %0, %1), logwrite(global_str)
#define SQL(%0,%1) format(SQL_STRING, sizeof(SQL_STRING), %0, %1), mysql_tquery(mysql, SQL_STRING)
#define str_f(%0,%1) format(SQL_STRING, sizeof(SQL_STRING), %0, %1), SQL_STRING
#define abs(%0) (%0 < 0) ? (-(%0)) : (%0)
#define randomF(%0,%1) (%0 + random(%1 - %0))

stock TextFind(const text[],const findtext[])
	return strfind(text, findtext) != -1;

stock GetString(const param1[], const param2[]) 
	return !strcmp(param1, param2, false);

stock SetString(const param_1[], const param_2[], size = 300) 
	return strmid(param_1, param_2, 0, strlen(param_2), size);

#include 																<massivehelper>
stock SPD_prev(playerid, caseId, response, list) return CallLocalFunction("OnDialogResponse", "dddds[24]", playerid, caseId, response, list, "NoData");
#define SPD(%0,%1,%2,%3,%4,%5,%6) ShowPlayerDialogEx(%0, %1, %2, %3, %4, %5, %6)
#define SPDF(%0,%1,%2,%3,%4,%5,%6,%7) format(global_str, 1024, %4,%7), ShowPlayerDialogEx(%0, %1, %2, %3, global_str, %5, %6)
#define amlf(%0,%1,%2,%3,%4) format(global_str, 512, %0, %4), aml(global_str, %1, %2, %3)
#define UpdateFamilyData(%0,%1,%2) format(mysql_string, 512, %1, %2), UpdateFamily_Data(%0, mysql_string)
#define GetBizData(%0,%1) BizData[%0][%1]
#define SetBizData(%0,%1,%2) BizData[%0][%1] = %2
#define ShowPlayerTD(%0,%1) PlayerTextDrawShow(%0,%1)
#define GetPlayerLauncher(%0) LauncherState[%0]
#define NoCloseTD(%0) SetPVarInt(%0, "NOclose", true)
#define IsPlayerOnline(%0) (!(%0 == INVALID_PLAYER_ID) && pTemp[%0][tAuthorized] && IsPlayerConnected(%0))
#define public:%0(%1) forward%0(%1); public%0(%1)
#define PlayerTextDrawSetStringf(%0,%1,%2,%3) format(SQL_STRING, sizeof(SQL_STRING), %2, %3), PlayerTextDrawSetString(%0, %1, SQL_STRING)
#define float_GetPlayerData(%0,%1) GetPVarFloat(%0, %1)
#define float_SetPlayerData(%0,%1,%2) SetPVarFloat(%0, %1, %2)
#define Int_GetPlayerData(%0,%1) GetPVarInt(%0, %1)
#define Int_SetPlayerData(%0,%1,%2) SetPVarInt(%0, %1, %2)

new String_PlayerData[128];
#define String_GetPlayerData(%0,%1,%2) (format(String_PlayerData, 32, "%s%d", %1, %2), GetPVarString(%0, String_PlayerData, String_PlayerData, 128), String_PlayerData)
#define String_SetPlayerData(%0,%1,%2,%3) format(String_PlayerData, 32, "%s%d", %1, %2), SetPVarString(%0, String_PlayerData, %3)
new String_GetItemStory[2048];

#define GetItemStory(%0,%1) (CallRemoteFunction("@GetItemStory", "id", %0,%1), GetPVarString(%0, "GetItemStory", String_GetItemStory, 2048), String_GetItemStory)
#define GetItemInfoEx(%0,%1,%2,%3) (GetItemInfo(%0,%1,%2,true,%3), GetPVarString(%0, "GetItemInfo_func", String_GetItemStory, 2048), String_GetItemStory)

#define DPlayerData(%0,%1) DeletePVar(%0, %1)

#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define holding(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define MAX_STRIPS          50
#define FOREVER				2000000000
#define INVALID_DATA_ID		-1

#define COLOR_OLDRED 		0xBE2D2DFF
#define COLOR_VALIK 		0x73B461FF
#define COLOR_RED 			0xFF6347FF
#define COLOR_ORANGE 		0xFAAC58FF
#define COLOR_BROWN 		0xA52A2AFF
#define COLOR_GREEN 		0x42B02CFF
#define COLOR_GOLD          0xFFD700FF
#define COLOR_LIGHTBLUE 	0x6495EDFF
#define COLOR_LIGHTGREEN 	0x9ACD32FF
#define COLOR_YELLOW 		0xFFFF00FF
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_BLUENEW 		0xB8CEF6FF
#define COLOR_BLUE 			0x94B0C1FF
#define COLOR_PURPLE 		0xC2A2DAFF
#define COLOR_LIME 			0x10F441FF
#define COLOR_GREY 			0xAFAFAFFF
#define COLOR_CHAT			0xCECECEFF
#define COLOR_SCHAT			0xF0E68CFF
#define COLOR_DOCHAT		0x4682B4FF
#define COLOR_RACIO			0x2DB043FF
#define COLOR_DEPAR			0x3399ffFF
#define COLOR_ACHAT   		0x99CC00FF
#define COLOR_ME            0xFF99FFFF
#define COLOR_GOV           0x045FB4FF

#define MAX_MUSORS 330
#define CallTimeOutFunction SetTimerEx
#define SetPlayerTimer(%0,%1,%2,%3) CallTimeOutFunction(%1, %2, %3, "i", %0)
#define VEHICLE_STATE_CAR   0
#define VEHICLE_STATE_BIKE  1
#define VEHICLE_STATE_VELIK 2
#define VEHICLE_STATE_PLANE 3
#define VEHICLE_STATE_BOAT  4
#define VEHICLE_STATE_MOPED 5
#define VEHICLE_STATE_TRAIN 6
#define JOB_NONE        (0)
#define JOB_GUNDEALER 	(1)
#define JOB_DETECTIVE 	(2)
#define JOB_CARJACKER 	(3)
#define JOB_MECHANIC 	(4)
#define JOB_TAXI 		(5)
#define JOB_ADVOKAT 	(6)
#define JOB_MINER 		(7)
#define JOB_GUIDE 		(8)
#define JOB_COLLECTOR 	(9)
#define JOB_DRUGDEALER  (10)
#define JOB_TRUCKER  	(11)
#define JOB_PIZZA  		(12)
#define JOB_SCRAPER  	(13)
#define JOB_MUSOR  		(14)
#define JOB_PORTER 		(15)
#define JOB_NALOG 		(16)

#define STATUS_NONE     (0)
#define STATUS_VIP      (1)
#define STATUS_GOLD     (2)
#define STATUS_PLATIN   (3)
#define PUT_STATE_MONEY (0)
#define PUT_STATE_DRUGS (1)
#define PUT_STATE_MATS 	(2)
#define INVALID_BIZ     (-1)
#define BIZ_GS_LS       (0)
#define BIZ_GS_SF       (1)
#define BIZ_GS_LV       (2)
#define BIZ_ELECTRO_LS 	(15)
#define BIZ_ELECTRO_SF 	(16)
#define BIZ_ELECTRO_LV 	(17)
#define BIZ_CU      	(18)
#define BIZ_GAS_LS_1 	(19)
#define BIZ_GAS_LS_2 	(20)
#define BIZ_GAS_SF_1 	(21)
#define BIZ_GAS_SF_2 	(22)
#define BIZ_GAS_SF_3 	(23)
#define BIZ_GAS_SF_4 	(24)
#define BIZ_GAS_SF_5 	(25)
#define BIZ_GAS_SF_6 	(26)
#define BIZ_GAS_LV_1 	(27)
#define BIZ_GAS_LV_2 	(28)
#define BIZ_GAS_LV_3 	(29)
#define BIZ_GAS_LV_4 	(30)
#define BIZ_GAS_LV_5 	(31)
#define BIZ_GAS_LV_6 	(32)
#define BIZ_RENT_LS     (39)
#define BIZ_RENT_SF     (40)
#define BIZ_RENT_LV     (41)
#define BIZ_AERO_LS     (42)
#define BIZ_RENTLV2 (53)
#define BIZ_RENTLV3 (54)
#define BIZ_RENTLV4 (55)
#define BIZ_RENTLV5 (56)
#define BIZ_RENTLV6 (57)
#define BIZ_RENTLV7 (58)

#define BIZ_SFRENT1 (122)
#define BIZ_SFRENT2 (123)
#define BIZ_SFRENT3 (124)
#define BIZ_SFRENT4 (125)
#define AutoMarket (126)
#define BIZ_AZS1 (59)
#define BIZ_AZS2 (60)
#define BIZ_AZS3 (61)
#define BIZ_AZS4 (62)
#define BIZ_AZS5 (63)
#define BIZ_AZS6 (64)
#define LV_AMYN1 (65)
#define LV_AMYN2 (66)
#define LV_AMYN3 (67)
#define LV_AMYN4 (68)
#define NONE_3D_TEXT (Text3D:-1)
#define D_BUY_VIP       (0)
#define D_BUY_GOLD 		(1)
#define D_BUY_MONEY 	(2)
#define D_BUY_PHONE 	(3)
#define D_BUY_WARN 		(4)
#define D_BUY_SKILL 	(5)
#define D_BUY_NAME 		(6)
#define D_BUY_EXP 		(7)
#define D_BUY_UNBL 		(8)
#define D_BUY_ZKP 		(9)
#define D_BUY_PLATIN 	(10)
#define D_BUY_NARKO 	(11)

#define TEAM_NONE       (0)
#define TEAM_LSPD 		(1)
#define TEAM_RCPD 		(2)
#define TEAM_FBI 		(3)
#define TEAM_SFPD		(4)
#define TEAM_M4C 		(5)
#define TEAM_MERIALS 	(6)
#define TEAM_ARMYLV 	(7)
#define TEAM_MEDICSF 	(8)
#define TEAM_LICENSERS 	(9)
#define TEAM_RADIO 		(10)
#define TEAM_GROOVE 	(11)
#define TEAM_VAGOS 		(12)
#define TEAM_BALLAS 	(13)
#define TEAM_CORONOS 	(14)
#define TEAM_RIFA 		(15)
#define TEAM_RM 		(16)
#define TEAM_YAKUZA 	(17)
#define TEAM_LCN 		(18)
#define TEAM_BIKERS 	(19)
#define TEAM_ARMY		(20)
#define TEAM_BANK		(21)
#define TEAM_MEDICLV	(22)
#define TEAM_LVPD 		(23)
#define TEAM_RADIOLV 	(24)
#define TEAM_WOLFS 		(25)
#define TEAM_RADIOSF 	(26)
#define TEAM_ARMYSF 	(27)
#define GetDynamicObjectModel(%0) Streamer_GetIntData(STREAMER_TYPE_OBJECT, %0, E_STREAMER_MODEL_ID)
#define RES_CAR_TIME    (600)
#define CLICK_STATE_NONE 	 (-1)
#define CLICK_STATE_PAY      (0)
#define CLICK_STATE_MATS   	 (1)
#define CLICK_STATE_DRUGS  	 (2)
#define CLICK_STATE_SIGS  	 (3)
#define CLICK_STATE_CHEEPS 	 (4)
#define CLICK_STATE_SPRUNK 	 (5)
#define CLICK_STATE_BEER 	 (6)
#define CLICK_STATE_GOLD 	 (7)
#define CLICK_STATE_SYRINGE  (8)
#define CLICK_STATE_POISON 	 (9)
#define CLICK_STATE_CLIP     (10)
#define CLICK_STATE_WORMS    (11)
#define CLICK_STATE_WHISPER  (12)
#define CLICK_STATE_AUDIOMSG (13)
#define CLICK_STATE_BRON (14)
#define CLICK_STATE_NARKOZ (15)
#define B_GUNSHOP 	(0)
#define B_BAR 		(1)
#define B_BUY 		(2)
#define B_BINKO 	(3)
#define B_ELECTRO 	(4)
#define B_CARUPGR 	(5)
#define B_GAS 		(6)
#define B_CL_BELL 	(7)
#define B_RENTCAR 	(8)
#define MAX_BARSs 	(8)
#define MAX_AFK_TIME 	(300)
#define BARRIER_SPEED 	0.025
#define INC_CPs 22
#define Pizza_CPs 14
#define MAX_GUNS (sizeof(BuyGunInfo)-1)
#define PN(%0) PlayerName[%0]

public: PlayKick(playerid)
	return Kick(playerid);

#define Kick(%0) CallTimeOutFunction("PlayKick", 1000, false, "d", %0)

//~=~=~=~=~=~=~=~=~=~=~=~= [ Глобальные настройки сервера ] =~=~=~=~=~=~=~=~=~=~=~=~
new Setting_Server[][72] = 
{
	"Arizona",
	"webmaster",
	"Arizona-rp Russian",
	"arizona-rp.com",
	"forum.arizona-rp.com",
	"vk.com/arizonastaterp",
	"t.me/arizonastaterp",
	"RolePlay",
	"logs"
}, VipNames[][50] = {"Не имеется", "Bronze", "Gold", "Платина", "Diamond", "Titan", "Premium", "", ""}, mysql_data[4][50], connection_data[2][250];

//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
const MAX_OGRAD = 500, MAX_ORGS = 32, GasMax = 100, MAX_HOUSES = 1250, MAX_BIZ = 430, InventoryMaxSlot = 181, MAX_CUSTOM_NPC = 128, MAX_SKLADS = 501;
new LauncherState[MAX_PLAYERS], Iterator:Vehicle<MAX_VEHICLES>, Iterator:TrainList<MAX_PLAYERS>, Iterator:Admin<MAX_PLAYERS>, Iterator:Klad<100>, Iterator:CustomNPC<MAX_CUSTOM_NPC>;
//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
#define MAX_DMATS 																150
#define MAX_DGUNS 																150
#define MAX_NARKO																45
#define MAX_BOMBS   															50
#define MIN_Bet 																10
#define MAX_Bet 																500
#define MAX_RADARS  															100
#define PRESS_ALT 																1024
#define KEY_NUM4 																8192
#define KEY_NUM6 																16384
#define PRESS_CTRL 																4
#define PRESS_SHIFT 															32
#define MAX_MESSAGES 															47
#define MAX_SNOW 																200
#define MAX_WOODS   															50
#define GUN_POS GunPos[gunid][0], GunPos[gunid][1], GunPos[gunid][2]
#define GUN_ROT 90.0, 0.0, 90.0
#define RABOTABUS																280
#define SHOWDATA																400
#define SHOWSKILLS																500
#define SHOWACTION																600
#define MAX_BUILDS																50
#define MAX_TRAILERS															1500
#define MAX_REWARD																25
#define MAX_DOWNT																11
#define KEY_ACCELERATE															8
#define MAX_CRAFTS																191
#define MAX_ZONESg																365
#define MAX_ZONE    															11
#define MAX_EGGS    															20
//==================== [ AntiCheat ]====================
#define AC_TABLE_SETTINGS               "anticheat_settings" // Название таблицы в базе данных с настройками анти-чита
#define AC_TABLE_FIELD_CODE             "ac_code" // Название поля с кодом анти-чита в таблице
#define AC_TABLE_FIELD_TRIGGER          "ac_code_trigger_type" // Название поля со значением срабатывания кода анти-чита в таблице
#define AC_MAX_TRIGGERS                 53 // Количество кодов анти-чита (на данный момент их 53)
#define AC_MAX_CODE_LENGTH         		4 // Максимальное количество символов в "коде" анти-чита (001/002/003, etc.)
#define AC_MAX_CODE_NAME_LENGTH         34 // Максимальное количество символов в полном названии чита, за который отвечает какой-либо код
#define AC_MAX_TRIGGER_TYPES            3 // Количество типов срабатываний (наказаний) анти-чита. По мере добавления типов срабатываний (наказаний), увеличивайте данное значение.
#define AC_MAX_TRIGGER_TYPE_NAME_LENGTH	9 // Максимальное количество символов в названии типа срабатывания (наказания) анти-чита
#define AC_GLOBAL_TRIGGER_TYPE_PLAYER   0
#define AC_GLOBAL_TRIGGER_TYPE_IP       1
#define AC_CODE_TRIGGER_TYPE_DISABLED   0 // AC_CODE_TRIGGER_TYPE_DISABLED - Тип наказания: Отключён
#define AC_CODE_TRIGGER_TYPE_WARNING    1 // AC_CODE_TRIGGER_TYPE_WARNING - Тип наказания: Warning
#define AC_CODE_TRIGGER_TYPE_KICK       2 // AC_CODE_TRIGGER_TYPE_KICK - Тип наказания: Kick
#define AC_TRIGGER_ANTIFLOOD_TIME       20 // Время для анти-флуда срабатываниями (в секундах)
#define AC_MAX_TRIGGERS_ON_PAGE         15 // Максимальное количество элементов на странице настроек анти-чита
#define AC_DIALOG_NEXT_PAGE_TEXT        ">>> Следующая страница" // Текст кнопки, которая будет отображать следующую страницу списка
#define AC_DIALOG_PREVIOUS_PAGE_TEXT    "<<< Предыдущая страница" // Текст кнопки, которая будет отображать предыдущую страницу списка
#define DIALOG_ANTICHEAT_SETTINGS       8788
#define DIALOG_ANTICHEAT_EDIT_CODE      8789
//============== Global Players params ================
new GlobalMassive[MAX_PLAYERS][InventoryMaxSlot],
	DialogListID[MAX_PLAYERS],
	PlayerDialogList[MAX_PLAYERS][64];

#define spdList(%0,%1,%2) PlayerDialogList[%0][%1] = %2
#define gpdList(%0,%1) PlayerDialogList[%0][%1]

new transit_data_player_int[MAX_PLAYERS];
#define int_TRANSIT_PLAYER_DATA transit_data_player_int[playerid]

//============== Player Define Function ================
#define SaveLauncherSettings(%0) SQL("UPDATE accounts SET CustomInterface = '%s' WHERE ID = '%d'", Int_PackMassive(0, PI[%0][pCustomInterface]), PI[%0][pID])
//=====================================================

enum accesorybuffs_options
{
	accesoryItemId,
	accesoryBuffs[9]
}
/*
0 — Защита
1 — Урон
2 — HP в мин.
3 — Удача: шанс крит.урона
4 — Макс. ХП
5 — Макс. Брони
6 — Шанс оглушения
7 — Шанс избежать оглушения
8 — Шанс опьянения
*/
static const accesory_BuffData[][accesorybuffs_options] =
{
	{3998, {2, 0, 0, 0, 0, 0, 0, 0}},
	{4001, {0, 0, 4, 0, 0, 0, 0, 0}},
	{4003, {0, 0, 4, 0, 0, 0, 0, 0}},
	{4009, {2, 0, 0, 0, 0, 0, 0, 0}},
	{5650, {1, 0, 2, 2, 0, 0, 0, 0}},
	{5670, {1, 0, 2, 2, 0, 0, 0, 0}},
	{5671, {1, 0, 2, 2, 0, 0, 0, 0}},
	{5674, {2, 0, 0, 1, 0, 0, 0, 0}},
	{5780, {1, 0, 1, 10, 0, 25, 0, 0}},
	{5781, {1, 0, 1, 10, 0, 25, 0, 0}},
	{5782, {1, 0, 1, 10, 0, 25, 0, 0}},
	{5783, {1, 0, 1, 10, 0, 25, 0, 0}},
	{5784, {1, 0, 1, 10, 0, 25, 0, 0}},
	{5785, {1, 0, 1, 10, 0, 25, 0, 0}},
	{5786, {1, 0, 1, 10, 0, 25, 0, 0}},
	{5871, {2, 0, 0, 0, 0, 0, 0, 0, 0}},
	{5925, {1, 0, 0, 25, 0, 0, 0, 0}},
	{5931, {2, 0, 0, 0, 0, 0, 0, 0}},
	{6264, {0, 0, 0, 3, 0, 0, 0, 0}},
	{6266, {0, 0, 0, 0, 0, 0, 6, 0}},
	{6267, {0, 0, 0, 0, 0, 0, 6, 0}},
	{6268, {0, 0, 0, 0, 0, 0, 6, 0}},
	{6269, {0, 0, 0, 0, 0, 0, 6, 0}},
	{6270, {0, 0, 0, 0, 0, 0, 6, 0}},
	{6271, {0, 0, 0, 0, 0, 0, 6, 0}},
	{6313, {1, 0, 1, 10, 0, 25, 0, 0}},
	{6324, {1, 0, 2, 2, 0, 0, 0, 0}},
	{6330, {0, 0, 0, 2, 0, 0, 0, 0}},
	{6331, {0, 0, 0, 2, 0, 0, 0, 0}},
	{6332, {0, 0, 0, 2, 0, 0, 0, 0}},
	{6333, {0, 0, 0, 2, 0, 0, 0, 0}},
	{6334, {0, 0, 0, 2, 0, 0, 0, 0}},
	{6335, {0, 0, 0, 2, 0, 0, 0, 0}},
	{6520, {1, 0, 1, 10, 0, 25, 0, 0}},
	{6526, {1, 0, 1, 10, 0, 25, 0, 0}},
	{6532, {2, 0, 0, 0, 0, 0, 0, 0}},
	{6543, {2, 0, 0, 0, 0, 0, 0, 0}},
	{6551, {2, 0, 0, 0, 0, 0, 0, 0}},	
	{6556, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6557, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6558, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6559, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6560, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6561, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6562, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6563, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6564, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6565, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6566, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6567, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6568, {1, 0, 0, 1, 0, 0, 0, 0}},
	{6578, {0, 0, 0, 2, 0, 0, 0, 0}},
	{6585, {0, 0, 0, 2, 0, 0, 0, 0}},
	{6605, {0, 0, 4, 0, 0, 0, 0, 0}},
	{6644, {2, 0, 0, 0, 0, 0, 0, 0}},
	{6926, {0, 0, 0, 10, 0, 20, 4, 0}},
	{6931, {0, 0, 0, 10, 0, 20, 4, 0}},
	{7237, {0, 0, 0, 2, 0, 0, 0, 0}},
	{7253, {2, 0, 0, 0, 10, 0, 0, 0, 2}},
	{7258, {2, 0, 0, 0, 0, 0, 0, 0}},
	{7361, {1, 0, 2, 2, 0, 0, 0, 0}},
	{7406, {0, 0, 3, 0, 0, 0, 13, 4}},
	{7410, {2, 0, 4, 24, 5, 27, 0, 10}},
	{7728, {0, 0, 1, 10, 0, 0, 1, 0}}
};

enum detailhandling_options
{
	data_ItemID,
	data_Type,
	Float:data_Parametrs[24]
}
new HandlingDetail_data[][detailhandling_options] =
{
	{2324, 0, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.8999939, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Коленвал (improv) - 0
	{2325, 0, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.5, 0.65520172119141, 2.6000061035156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Коленвал (sport) - 1
	{2326, 0, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 54.3399963, 3.59999847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Коленвал (sport+) - 2
	{2327, 1, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Распредвал (improv) - 3
	{2328, 1, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Распредвал (sport) - 4
	{2329, 1, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Распредвал (sport+) - 5
	{2330, 2, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.456001282, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Турбокомпрессор (improv) - 6
	{2331, 2, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.65520172119141, -2.5999984741211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Турбокомпрессор (sport) - 7
	{2332, 2, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.59999847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Турбокомпрессор (sport+) - 8
	{2333, 3, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.456001282, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Нагнетатель (improv) - 9
	{2334, 3, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.15999985, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Нагнетатель (sport) - 10
	{2335, 3, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0919998168945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Нагнетатель (sport+) - 11
	{2336, 4, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.95001221, 0.456001282, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //STAGE-1 - 12
	{2337, 4, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5, 0.43680076599121, 20.799987792969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //STAGE-2 - 13
	{2338, 4, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 41.7999878, 2.15999985, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //STAGE-3 - 14
	{2339, 5, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.911998749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Сцепление (improv) - 15
	{2340, 5, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.15999984741, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Сцепление (sport) - 16
	{2341, 5, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0919998168945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Сцепление (sport+) - 17
	{2342, 6, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21840171813965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //КПП (improv) - 18
	{2343, 6, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0399971, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //КПП(sport) - 19
	{2344, 6, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0919998168945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //КПП (sport+) - 20
	{2345, 7, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0319999456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Дифференциал (improv) - 21
	{2346, 7, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0959999561, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Дифференциал (sport) - 22
	{2347, 7, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.159999967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Дифференциал (sport+) - 23
	{2348, 8, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.40000153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Подвеска (improv) - 24
	{2349, 8, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.79999923706, 0.0959999561, 0.0, -1.0, -0.0290000141, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Подвеска (sport) - 25
	{2350, 8, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0999984741211, 0.14999997615814, 0.0, 0.0, -0.090000015497208, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Подвеска (sport+) - 26
	{2351, 9, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029999995231628, 0.0, 0.0, 0.0, 0.0, -0.90000009536743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Тормоза(improv) - 27
	{2352, 9, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.160000038, 0.0, 0.0, 0.0, 0.0, 6.79999924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Тормоза(sport) - 28
	{2353, 9, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18999996185303, 0.0, 0.0, 0.0, 0.0, 1.3000001907349, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //Тормоза(sport+) - 29
	{554, 10, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.5, 0.54600028991699, 3.8999938964844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}}, //TT1
	{5797, 10, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42, 1.0919998168945, 5.1999969482422, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}} //TT2
};

enum hotkey_options
{
	data_ID,
	data_KeyID,
	data_KeyName[5]
}
new HotKey_data[][hotkey_options] = 
{
	{INVALID_DATA_ID, 13, ""},
	{INVALID_DATA_ID, 73, ""},
	{INVALID_DATA_ID, 51, ""},
	{INVALID_DATA_ID, 67, ""},
	{INVALID_DATA_ID, 37, ""},
	{INVALID_DATA_ID, 39, ""},
	{INVALID_DATA_ID, 48, ""},
	{INVALID_DATA_ID, 57, ""},
	{INVALID_DATA_ID, 66, ""},
	{2, 88, "X"},
	{3, 79, "O"},
	{0, 74, "J"},
	{1, 75, "K"},
	{4, 76, "L"},
	{INVALID_DATA_ID, 86, "V"},
	{5, 85, "U"},
	{6, 82, "R"},
	{7, 80, "P"},
	{8, 77, "M"},
	{INVALID_DATA_ID, 112, "F1"},
	{INVALID_DATA_ID, 113, "F2"},
	{INVALID_DATA_ID, 114, "F3"},
	{INVALID_DATA_ID, 115, "F4"},
	{INVALID_DATA_ID, 116, "F5"},
	{INVALID_DATA_ID, 219, "["},
	{INVALID_DATA_ID, 221, "]"},
	{9, 162, "CTRL"},
	{INVALID_DATA_ID, 27, ""},
	{INVALID_DATA_ID, 2, ""}
};

enum screen_options
{
	data_Name[50],
	data_LastEditName[24],
	data_LastEditTime,
	data_Status,
	data_VideoTime[2],
	data_VideoLink[248]
}
new ScreenInfo_data[][screen_options] = { {"Банк г.Лос Сантос", "None"} }, ScreenAreaId[8];

enum adonateinfo
{
	adonateName[80],
	adonatePrice,
	adonateItem_type, // 0 - item | 1 - vip | 2 - admin | 3 - convert az | 4 - other 
	adonateItem,
	adonateItem_amount,
	adonateItem_enchant // if item_type == 4 => ( 0 - mute | 1 - 5 list inventory )
}
new ADonateInfo[][adonateinfo] =
{
	{"Приобрести админ-права {FF0000}(СКИДКИ)", 150, 2},
	{"Приобрести лидер-права", 150, 4, 0, 0, 6},
	{"Покупка уникальных VIP-Статусов", 250, 1},
    {"Покупка \"Уникальных наборы аксессуаров\"", 400, 4, 0, 0, 7},
    {"Покупка \"Уникальных авто\" {FF0000}(АВТОФЛИП + 5К HP)", 300, 4, 1, 0, 7},
    {"Покупка \"Уникальных предметов\"", 300, 4, 2, 0, 7},
	{"Снять мут с своего аккаунта", 150, 4, 0, 0, 0},
	{"4-й лист инвентаря", 500, 4, 0, 0, 1},
	{"Покупка случайного 'личного охранника'", 500, 4, 0, 0, 4},
	{"Приобрести 'переливающийся' никнейм", 750, 4, 0, 0, 5},
	{"Обмен 100 рублей на 1000 AZ", 100, 3, 1000}
};

enum chat_options
{
	data_CMD[5],
	data_Color,
	data_Info[72],
	data_Name[10]
}
new ChatRoom_data[][chat_options] = 
{
	{"vr", 4292804863, "Ваше сообщение будет отправлено в вип-чат", "Вип-чат"},
	{"f", 766526463, "Ваше сообщение будет отправлено в чат организации", "Орг. чат"},
	{"fb", 766526463, "Ваше сообщение будет отправлено в нонРП-чат организации", "Орг. нрп"},
	{"fam", 2243651071, "Ваше сообщение будет отправлено в cемейный чат", "Сем. чат"},
	{"b", 3081744383, "Ваше сообщение будет отправлено в нонРП чат", "нонРП чат"},
	{"s", 4041641215, "Вы прокричите Ваше сообщение", "Кричать"},
	{"c", 2494611967, "Вы прошепчете Ваше сообщение", "Шептать"}
};

enum bonusInfo
{
	bonusType,
	bonusName[50],
	bonusTime,
	bonusPrize_type, // 0 - item | 1 - vip | 2 - admin | 3 - rubles
	bonusPrize,
	bonusPrize_amount,
	bonusPrize_enchant
}
new BonusInfo[][bonusInfo] =
{
	{0, "25 AZ RUB", 1, 3, 25, 0, 0},
	{0, "50 AZ RUB", 2, 3, 50, 0, 0},
	{0, "75 AZ RUB", 3, 3, 75, 0, 0},
	{0, "100 AZ RUB", 4, 3, 100, 0, 0},
	{0, "100.000 BTC", 6, 0, 1811, 100000, 0},
	{0, "150.000 BTC", 8, 0, 1811, 150000, 0},
	{0, "200.000 BTC", 10, 0, 1811, 200000, 0},
	{0, "Неоновая подстветка", 15, 0, 6518, 1, 0},
	{0, "Бронежилет «Гравити Фолз»", 20, 0, 6560, 1, 0},
	{0, "Mercedes GT63", 25, 0, 1417, 1, 0},
	{0, "400 AZ RUB", 30, 0, 3, 400, 0},
	{0, "2 запечатанных сертификата на т/с", 35, 0, 4581, 2, 0},
	{0, "500 AZ RUB", 50, 3, 500, 0, 0},
	{0, "Грузовой автомобиль \"Volvo 460\"", 60, 0, 4813, 1, 0},
	{0, "Уникальный транспорт \"BUGATTI Bolide\"", 70, 0, 3972, 1, 0},
	{0, "Уникальный транспорт \"Mercedes Vision AVTR\"", 80, 0, 3984, 1, 0},
	{0, "4.000.000 BTC", 90, 0, 1811, 4000000, 0},
	{0, "10 Разрешений на номера", 100, 0, 7035, 10, 0},

	{1, "Ларец Водителя Автобуса [30шт.]", 3, 0, 3992, 30, 0},
	{1, "Ларец дальнобойщика [30шт.]", 5, 0, 3623, 30, 0},
	{1, "Ларец Олигарха [30шт.]", 7, 0, 2149, 30, 0},
	{1, "Ларец кастомных аксессуаров [30шт.]", 10, 0, 2187, 30, 0},
	{1, "Ларец пилота [75шт.]", 20, 0, 4792, 75, 0},
	{1, "Ларец организации [150шт.]", 25, 0, 3559, 150, 0},
	{1, "Дрон Рабочий [+10]", 30, 0, 5443, 1, 10},
	{1, "Дрон 320 [+12]", 40, 0, 5445, 1, 12},
	{1, "Дрон Диджей [+10]", 50, 0, 5444, 1, 10},
	{1, "Бронежилет [1] [+10]", 60, 0, 3518, 1, 10},
	{1, "Бронежилет [2] [+10]", 70, 0, 3519, 1, 10},
	{1, "Бронежилет [3] [+10]", 80, 0, 3520, 1, 10},

	{2, "50 AZ RUB", 5, 3, 50, 0, 0},
	{2, "100 AZ RUB", 10, 3, 100, 0, 0},
	{2, "150 AZ RUB", 15, 3, 150, 0, 0},
	{2, "200 AZ RUB", 20, 3, 200, 0, 0},
	{2, "250 AZ RUB", 25, 3, 250, 0, 0},
	{2, "300 AZ RUB", 30, 3, 300, 0, 0},
	{2, "350 AZ RUB", 35, 3, 350, 0, 0},
	{2, "400 AZ RUB", 40, 3, 400, 0, 0},
	{2, "450 AZ RUB", 45, 3, 450, 0, 0},
	{2, "500 AZ RUB", 50, 3, 500, 0, 0}
}, BonusTake[MAX_PLAYERS][3][sizeof(BonusInfo)], BonusTime[MAX_PLAYERS][3];

enum detail_info
{
	componentItemID,
	categoryID, 
	headerText[30], 
	componentColor, 
	nameText[30], 
	iconText[24], 
	componentID, 
	priceMoney,
	componentAmount
}
new tuningComponents[][detail_info] = 
{
	{2324, 4, "improv", -16711681, "Коленвал", "kolenval.png", 0, 135000, 0},
	{2325, 4, "sport", -16776961, "Коленвал", "kolenval.png", 1, 225000, 0},
	{2326, 4, "sport+", -6029057, "Коленвал", "kolenval.png", 2, 450000, 0},
	{2327, 5, "improv", -16711681, "Распредвал", "raspredval.png", 3, 90000, 0},
	{2328, 5, "sport", -16776961, "Распредвал", "raspredval.png", 4, 180000, 0},
	{2329, 5, "sport+", -6029057, "Распредвал", "raspredval.png", 5, 240000, 0},
	{2330, 6, "improv", -16711681, "Турбокомпрессор", "turbokompressor.png", 6, 450000, 0},
	{2333, 6, "improv", -16711681, "Нагнетатель", "nagnetatel.png", 7, 450000, 0},
	{2331, 6, "sport", -16776961, "Турбокомпрессор", "turbokompressor.png", 8, 900000, 0},
	{2334, 6, "sport", -16776961, "Нагнетатель", "nagnetatel.png", 9, 900000, 0},
	{2332, 6, "sport+", -6029057, "Турбокомпрессор", "turbokompressor.png", 10, 1350000, 0},
	{2335, 6, "sport+", -6029057, "Нагнетатель", "nagnetatel.png", 11, 1350000, 0},
	{2336, 7, "STAGE-1", -16711681, "Чип-тюнинг", "proshitvka.png", 12, 450000, 0},
	{2337, 7, "STAGE-2", -16776961, "Чип-тюнинг", "proshitvka.png", 13, 675000, 0},
	{2338, 7, "STAGE-3", -6029057, "Чип-тюнинг", "proshitvka.png", 14, 900000, 0},
	{2339, 8, "improv", -16711681, "Сцепление", "stseplenie.png", 15, 90000, 0},
	{2340, 8, "sport", -16776961, "Сцепление", "stseplenie.png", 16, 225000, 0},
	{2341, 8, "sport+", -6029057, "Сцепление", "stseplenie.png", 17, 450000, 0},
	{2342, 9, "improv", -16711681, "КПП", "kpp.png", 18, 450000, 0},
	{2343, 9, "sport", -16776961, "КПП", "kpp.png", 19, 675000, 0},
	{2344, 9, "sport+", -6029057, "КПП", "kpp.png", 20, 900000, 0},
	{2345, 10, "improv", -16711681, "Дифференциал", "differentsial.png", 21, 90000, 0},
	{2346, 10, "sport", -16776961, "Дифференциал", "differentsial.png", 22, 225000, 0},
	{2347, 10, "sport+", -6029057, "Дифференциал", "differentsial.png", 23, 450000, 0},
	{2348, 11, "improv", -16711681, "Подвеска", "podveska.png", 24, 450000, 0},
	{2349, 11, "sport", -16776961, "Подвеска", "podveska.png", 25, 900000, 0},
	{2350, 11, "sport+", -6029057, "Подвеска", "podveska.png", 26, 1350000, 0},
	{2351, 12, "improv", -16711681, "Тормоза", "tormoza.png", 27, 90000, 0},
	{2352, 12, "sport", -16776961, "Тормоза", "tormoza.png", 28, 270000, 0},
	{2353, 12, "sport+", -6029057, "Тормоза", "tormoza.png", 29, 900000, 0},
	{0, 17, "", -1, "Без винила", "wad0.png", 30, 4500000, 1},
	{2354, 17, "", -16776961, "Винил-1", "wad1.png", 31, 4500000, 1},
	{2355, 17, "", -16776961, "Винил-2", "wad2.png", 32, 4500000, 1},
	{2356, 17, "", -16776961, "Винил-3", "wad3.png", 33, 4500000, 1},
	{2357, 17, "", -16776961, "Винил-4", "wad4.png", 34, 4500000, 1},
	{2358, 17, "", -16776961, "Винил-5", "wad5.png", 35, 4500000, 1},
	{2359, 17, "", -16776961, "Винил-6", "wad6.png", 36, 4500000, 1},
	{2360, 17, "", -16776961, "Винил-7", "wad7.png", 37, 4500000, 1},
	{2361, 17, "", -16776961, "Винил-8", "wad8.png", 38, 4500000, 1},
	{2362, 17, "", -16776961, "Винил-9", "wad9.png", 39, 4500000, 1},
	{2363, 17, "", -16776961, "Винил-10", "wad10.png", 40, 4500000, 1},
	{2364, 17, "", -16776961, "Винил-11", "wad11.png", 41, 4500000, 1},
	{2365, 17, "", -16776961, "Винил-12", "wad12.png", 42, 4500000, 1},
	{2366, 17, "", -16776961, "Винил-13", "wad13.png", 43, 4500000, 1},
	{2367, 17, "", -16776961, "Винил-14", "wad14.png", 44, 4500000, 1},
	{2368, 17, "", -16776961, "Винил-15", "wad15.png", 45, 4500000, 1},
	{2369, 17, "", -16776961, "Винил-16", "wad16.png", 46, 4500000, 1},
	{2370, 17, "", -16776961, "Винил-17", "wad17.png", 47, 4500000, 1},
	{-1, 19, "", -1, "Передняя подвеска", "podveska.png", 48, 2250000, 1},
	{-1, 19, "", -1, "Задняя подвеска", "podveska.png", 49, 2250000, 1},
	{2563, 13, "", -1, "Диски-1", "7171.png", 50, 450000, 1},
	{2564, 13, "", -1, "Диски-2", "7172.png", 51, 900000, 1},
	{2565, 13, "", -1, "Диски-3", "7173.png", 52, 1350000, 1},
	{2566, 13, "", -1, "Диски-4", "7174.png", 53, 1800000, 1},
	{2567, 13, "", -1, "Диски-5", "7175.png", 54, 2250000, 1},
	{2568, 13, "", -1, "Диски-6", "7176.png", 55, 2700000, 1},
	{2569, 13, "", -1, "Диски-7", "7177.png", 56, 3150000, 1},
	{2570, 13, "", -1, "Диски-8", "7178.png", 57, 3600000, 1},
	{2571, 13, "", -1, "Диски-9", "7179.png", 58, 4050000, 1},
	{2572, 13, "", -1, "Диски-10", "7180.png", 59, 4500000, 1},
	{2573, 13, "", -1, "Диски-11", "7181.png", 60, 4950000, 1},
	{2574, 13, "", -1, "Диски-12", "7182.png", 61, 5400000, 1},
	{2575, 13, "", -1, "Диски-13", "7183.png", 62, 5850000, 1},
	{2576, 13, "", -1, "Диски-14", "7184.png", 63, 6300000, 1},
	{2577, 13, "", -1, "Диски-15", "7185.png", 64, 6750000, 1},
	{2578, 13, "", -1, "Диски-16", "7186.png", 65, 7200000, 1},
	{2579, 13, "", -1, "Диски-17", "7187.png", 66, 7650000, 1},
	{-1, 18, "", -1, "Лобовое стекло", "windshield.png", 67, 225000, 1},
	{-1, 18, "", -1, "Боковые стёкла", "front-right-window.png", 68, 180000, 1},
	{-1, 18, "", -1, "Боковые стёкла", "front-left-window.png", 69, 180000, 1},
	{-1, 18, "", -1, "Заднее стекло", "windscreen.png", 70, 225000, 1},
	{-1, 18, "", -1, "Передние фары", "front-right-light.png", 71, 135000, 1},
	{-1, 18, "", -1, "Задние фары", "rear-right-light.png", 72, 135000, 1},
	{-1, 14, "FOUR-SLOT", -1, "Капот", "FOUR-SLOT.png", 73, 2250000, 1},
	{-1, 14, "SPEEDLINE", -1, "Капот", "SPEEDLINE.png", 74, 2700000, 1},
	{-1, 14, "TREMOR", -1, "Капот", "TREMOR.png", 75, 3150000, 1},
	{-1, 14, "DOUBLE-V", -1, "Капот", "DOUBLE-V.png", 76, 3600000, 1},
	{-1, 15, "STOCK", -1, "Спойлер", "STOCK1.png", 77, 1575000, 1},
	{-1, 15, "DUCKTAIL", -1, "Спойлер", "DUCKTAIL.png", 78, 2250000, 1},
	{-1, 15, "REAPER", -1, "Спойлер", "REAPER.png", 79, 2925000, 1},
	{-1, 15, "DAYTONA", -1, "Спойлер", "DAYTONA.png", 80, 3600000, 1},
	{-1, 15, "CURSE", -1, "Спойлер", "CURSE.png", 81, 4275000, 1},
	{-1, 16, "GRADIENT STOCK", -1, "Выхлоп", "GRADIENT_STOCK.png", 82, 675000, 1},
	{-1, 16, "CARBON RING", -1, "Выхлоп", "CARBON_RING.png", 83, 900000, 1},
	{-1, 16, "CARBON TWO", -1, "Выхлоп", "CARBON_TWO.png", 84, 1125000, 1},
	{-1, 16, "GRADIENT TWO", -1, "Выхлоп", "GRADIENT_TWO.png", 85, 1350000, 1},
	{-1, 16, "GRID", -1, "Выхлоп", "GRID.png", 86, 1575000, 1},
	{-1, 18, "", -1, "Крыша", "roof.png", 87, 180000, 1},
	{-1, 20, "", -1, "Передние фары", "front-left-light.png", 88, 2500000, 1},
	{-1, 19, "", -1, "Диаметр колес", "podveska.png", 89, 2000000, 1},
	{-1, 21, "", -1, "Цвет дыма", "exhaust_color_2.png", 90, 2500000, 1}
}, Float:tuningStation_boxInfo[][][] =
{
	{{2575.5728, 994.5321, 11.0367}, {1534.1035, 957.0027, 10.7267, 0.0895}},
	{{2575.5728, 989.6702, 11.0367}, {1534.0872, 957.0008, 10.7308, 0.0071}},
	{{2575.5728, 984.6556, 11.0367}, {1534.0906, 956.9984, 10.7340, 0.0165}}
}, tuningBox_player[3] = {INVALID_PLAYER_ID, ...},
	Text3D:tuningCenter3DText[3] = {Text3D:INVALID_3DTEXT_ID, ...},
	customTuning_color[][] = 
	{
		{0, 0, 0},{245, 245, 245},{161, 119, 42},{16, 4, 132},{57, 55, 38},{110, 68, 134},{16, 142, 215},{183, 117, 76},{198, 190, 189},{114, 112, 94},{122, 89, 70},{121, 106, 101},{141, 126, 93},{90, 89, 88},{214, 218, 214},
		{163, 161, 156},{63, 95, 51},{26, 14, 115},{42, 10, 123},{148, 157, 159},{120, 78, 59},{62, 46, 115},{59, 30, 105},{140, 145, 150},{89, 84, 81},{69, 62, 63},{167, 169, 165},{90, 92, 99},{104, 74, 61},{146, 149, 151},
		{33, 31, 66},{43, 39, 95},{171, 148, 132},{124, 123, 118},{100, 100, 100},{82, 87, 90},{39, 37, 37},{53, 58, 45},{150, 163, 147},{136, 122, 109},{24, 25, 34},{95, 103, 111},{42, 28, 124},{21, 10, 95},{38, 56, 25},
		{32, 27, 93},{114, 152, 157},{96, 117, 122},{134, 149, 152},{176, 176, 173},{136, 137, 132},{69, 79, 48},{104, 98, 77},{72, 34, 22},{75, 47, 39},{86, 98, 125},{171, 164, 158},{113, 141, 156},{34, 24, 109},{129, 104, 78},
		{152, 156, 156},{71, 115, 145},{38, 28, 102},{159, 157, 148},{165, 167, 164},{70, 140, 142},{30, 26, 52},{140, 122, 106},{142, 173, 170},{143, 152, 171},{46, 31, 133},{151, 130, 111},{83, 88, 88},{144, 167, 154},{35, 26, 96},
		{44, 32, 32},{150, 160, 164},{132, 157, 170},{43, 34, 120},{109, 49, 14},{63, 42, 114},{94, 113, 123},{40, 29, 116},{50, 46, 30},{47, 50, 77},{68, 27, 124},{32, 91, 46},{131, 90, 57},{55, 40, 109},{143, 162, 167},{177, 177, 175},
		{85, 65, 54},{110, 108, 109},{137, 106, 15},{107, 75, 32},{87, 62, 43},{157, 159, 155},{149, 132, 108},{149, 132, 77},{127, 155, 174},{143, 108, 64},{59, 37, 31},{118, 146, 171},{115, 69, 19},{108, 129, 150},{106, 104, 100},{130, 80, 16},
		{131, 153, 161},{148, 86, 56},{97, 86, 82},{86, 105, 127},{154, 146, 140},{135, 110, 89},{50, 53, 71},{79, 98, 68},{39, 10, 115},{87, 52, 34},{27, 13, 100},{198, 173, 163},{83, 88, 105},{128, 139, 155},{28, 11, 98},{94, 93, 91},{40, 68, 98},{39, 24, 115},
		{109, 55, 27},{174, 106, 236},{0, 0, 0},{23, 117, 23},{6, 6, 33},{120, 84, 18},{13, 42, 69},{30, 30, 87},{1, 7, 1},{90, 34, 37},{170, 137, 44},{189, 77, 138},{58, 150, 53},{183, 183, 183},{141, 76, 70},{140, 136, 132},{103, 120, 129},{38, 122, 129},{111, 80, 106},{111, 62, 88},
		{114, 185, 140},{120, 79, 130},{106, 39, 109},{19, 29, 30},{6, 19, 30},{24, 37, 31},{49, 69, 44},{153, 76, 30},{67, 95, 46},{72, 153, 30},{153, 153, 30},{118, 153, 153},{153, 132, 124},{30, 46, 153},{8, 30, 44},{7, 36, 20},{77, 62, 153},{153, 76, 30},
		{129, 129, 25},{42, 41, 26},{111, 97, 22},{135, 102, 27},{153, 63, 108},{14, 26, 72},{153, 115, 122},{153, 109, 116},{126, 56, 83},{7, 36, 34},{12, 25, 62},{14, 33, 70},{30, 30, 153},{141, 76, 141},{128, 91, 128},{126, 62, 123},{55, 23, 60},{23, 53, 115},
		{24, 24, 120},{26, 52, 131},{28, 47, 142},{83, 62, 126},{124, 109, 124},{2, 12, 2},{7, 36, 7},{18, 48, 22},{27, 48, 22},{79, 43, 100},{82, 132, 54},{144, 149, 153},{150, 141, 129},{30, 153, 153},{76, 153, 127},{146, 146, 131},{34, 130, 120},{153, 60, 43},
		{11, 58, 58},{78, 121, 138},{73, 31, 14},{28, 55, 21},{58, 39, 21},{117, 87, 55},{32, 8, 6},{38, 19, 7},{75, 57, 32},{137, 80, 44},{108, 66, 21},{80, 50, 16},{99, 22, 36},{21, 32, 105},{148, 141, 140},{19, 96, 81},{2, 15, 9},{58, 87, 140},{142, 136, 82},
		{82, 92, 153},{30, 88, 153},{99, 58, 153},{78, 143, 153},{30, 49, 153},{66, 24, 13},{30, 30, 82},{13, 66, 66},{30, 153, 76},{29, 42, 8},{29, 130, 150},{25, 127, 25},{31, 20, 59},{23, 82, 116},{141, 63, 137},{108, 26, 126},{11, 55, 11},{13, 69, 39},{36, 31, 7},
		{115, 69, 120},{58, 101, 138},{23, 38, 115},{144, 148, 49},{29, 148, 86},{61, 22, 89},{47, 138, 27},{11, 22, 56},{4, 24, 4},{142, 93, 53},{91, 63, 46},{40, 26, 86},{39, 14, 78},{103, 108, 112},{66, 62, 59},{51, 45, 46},{125, 126, 123},{66, 68, 74},{78, 52, 40}
	}, WheelDisks[][][] = { {6752, 2563, "cir_diff"}, {6753, 2564, "ccr_diff"}, {6754, 2565, "rsclassic_diff"}, {6755, 2566, "xt006_diff"}, {6756, 2567, "57c_diff"}, {6757, 2568, "305m_diff"}, {6758, 2569, "505_diff"}, {6759, 2570, "lmgt4_diff"}, {6760, 2571, "fhurt_diff"}, {6761, 2572, "tech7_diff"}, {6762, 2573, "techmesh_diff"}, {6763, 2574, "vishunu_diff"}, {6764, 2575, "vfs2_diff"}, {6765, 2576, "cv5_diff"}, {6766, 2577, "vsmpog_diff"}, {6767, 2578, "wire_diff"}, {6768, 2579, "d9r_diff"}, {6258, 7123, "wheel_vip1"}, {6259, 7124, "wheel_vip2"}, {6260, 7125, "wheel_vip3"}, {6261, 7126, "wheel_vip4"}, {6262, 7127, "wheel_vip5"}, {6264, 7128, "wheel_vip6"}, {6266, 7129, "wheel_vip7"}, {6272, 7130, "wheel_vip8"}, {6276, 7131, "wheel_vip9"}, {6278, 7132, "wheel_vip10"}, {15574, 7133, "wheel_scooby"} };

//autoselection
static const 
	autoSelectionItems[] = { 6677, 6674, 6681 },
	autoSelectionName[][] = {"грузовик", "автобус", "самолет"},
	Float:autoSelectionPosition_Pickup[][] = { {2218.1665, -2524.8525, 13.5469}, {-1724.2156, 37.1988, 3.5489}, {400.1535, 2463.0920, 16.5000 } },
	Float:autoSelectionPosition_Vehicle[][] = { {2208.4690, -2524.7151, 14.2461, 271.2600}, {-1723.6884, 48.2123, 3.8318, 177.9704}, {405.0876, 2446.4033, 17.4519, 359.9384} };

new 
	Text3D:autoSelectionText,
	autoSelectionData[2], /*0 - Тип выигрыша авто / 1 - Время выиграша*/
	autoSelectionWinnerName[MAX_PLAYER_NAME],
	Text3D:autoSelectionWinners_TextData[3],
	autoSelectionWinners_Data[3][2];

//donate
new DonatePlayerCat[MAX_PLAYERS], bool:donateOpen[MAX_PLAYERS], DonatePlayerPage[MAX_PLAYERS] = 1;

enum donate_options
{
	data_ID,
	data_dName[72],
	data_ImageID,
	data_tName[24],
	data_Type,
	data_Cost,
	data_SpecialOffer,
	data_Discount,
	data_LimitedCount,
	data_Give,
	bool:data_Rub,
	bool:data_Exlusive
};

static const DonateInfo_data[][donate_options] = {
	/*0*/{0, "Вечный навык вождения", 50011, "skill", 1, 3000, 0, 0, 0, 0},
	/*1*/{1, "Полный мед.осмотр", 50075, "skill", 1, 4000, 0, 0, 0, 0},
	/*2*/{2, "Макс.навык автоугонщика", 50073, "skill", 1, 4000, 0, 0, 0, 0},
	/*3*/{3, "Макс.навык фермера", 50004, "skill", 1, 2100, 0, 0, 0, 0},
	/*4*/{4, "Макс.навык таксиста", 50022, "skill", 1, 3500, 0, 0, 0, 0},
	/*5*/{5, "Макс.навык развозчика", 50023, "skill", 1, 950, 0, 0, 0, 0},
	/*6*/{6, "Макс.навык дальнобойщика", 50030, "skill", 1, 1500, 0, 0, 0, 0},
	/*7*/{7, "Макс.навык адвоката", 50026, "skill", 1, 8000, 0, 0, 0, 0},
	/*8*/{8, "Макс.навык пилота", 50060, "skill", 1, 7000, 0, 0, 0, 0},
	/*9*/{9, "Макс.навык мотоциклиста", 50024, "skill", 1, 800, 0, 0, 0, 0},
	/*10*/{10, "Макс.навык велосипедиста", 50025, "skill", 1, 2000, 0, 0, 0, 0},
	/*11*/{11, "Максимальная сила", 50029, "skill", 1, 5500, 0, 0, 0, 0},
	/*12*/{12, "Все навыки боя", 50027, "skill", 1, 300, 0, 0, 0, 0},
	/*13*/{13, "10.000 в скилл крафтера", 50061, "skill", 1, 5000, 0, 0, 0, 0},
	/*14*/{14, "Навык стрельбы", 50003, "skill", 1, 800, 0, 0, 0, 0},
	/*15*/{0, "Вечный ADD VIP", 50050, "vip", 0, 30000, 0, 0, 0, 0},
	/*16*/{1, "Premium VIP", 50051, "vip", 0, 10000, 0, 12, 0, 5},
	/*17*/{2, "Titan VIP", 50052, "vip", 0, 4000, 0, 0, 0, 4},
	/*18*/{3, "ADD VIP", 50050, "vip", 0, 5999, 0, 13, 0, 0},
	/*19*/{0, "Ларец Fortnite", 107480, "rareBoxes", 2, 55, 0, 14, 0, 7480},
	/*20*/{1, "Ящик рыболова", 107418, "rareBoxes", 2, 4800, 0, 0, 0, 7418},
	/*21*/{2, "Тайник Vice City", 50219, "rareBoxes", 2, 55000, 0, 9, 0, 5823},
	/*22*/{3, "Ларец пилота", 50215, "rareBoxes", 2, 70, 0, 0, 0, 4792},
	/*23*/{4, "Ларец развозчика продуктов", 50212, "rareBoxes", 2, 70, 0, 0, 0, 4793},
	/*24*/{5, "Ларец дальнобойщика", 50222, "rareBoxes", 2, 70, 0, 0, 0, 3623},
	/*25*/{6, "Ларец Водителя Автобуса", 50213, "rareBoxes", 2, 70, 0, 0, 0, 3992},
	/*26*/{7, "Тайник Лос Сантоса", 50207, "rareBoxes", 2, 20000, 0, 0, 0, 3926},
	/*27*/{8, "Тайник Илона Маска", 50206, "rareBoxes", 2, 5000, 0, 0, 0, 1854},
	/*28*/{9, "Ностальгический ящик", 50216, "rareBoxes", 2, 85, 0, 0, 0, 1939},
	/*29*/{10, "Super Car Box", 50211, "rareBoxes", 2, 130, 0, 0, 0, 1852},
	/*30*/{11, "Ларец с премией", 50210, "rareBoxes", 2, 100, 0, 0, 0, 1853},
	/*31*/{12, "Супер авто-ящик", 50204, "rareBoxes", 2, 85, 0, 0, 0, 1770},
	/*32*/{13, "Супер мото-ящик", 50205, "rareBoxes", 2, 85, 0, 0, 0, 1769},
	/*33*/{14, "Rare Box Yellow", 50045, "rareBoxes", 2, 75, 0, 0, 0, 1637},
	/*34*/{15, "Rare Box Red", 50047, "rareBoxes", 2, 75, 0, 0, 0, 1638},
	/*35*/{16, "Rare Box Blue", 50044, "rareBoxes", 2, 75, 0, 0, 0, 1639},
	/*36*/{17, "Ларец кастомных аксессуаров", 50208, "rareBoxes", 2, 75, 0, 0, 0, 2187},
	/*37*/{18, "Concept Car Luxury", 50228, "rareBoxes", 2, 120, 0, 0, 0, 3920},
	/*38*/{0, "Сертификат на призыв 2-ух охранников", 107139, "rareSecurity", 7, 28000, 0, 0, 0, 7139},
	/*39*/{1, "Сертификат охранника \"Элли\"", 107036, "rareSecurity", 7, 60000, 0, 0, 0, 7036},
	/*40*/{2, "Сертификат охранника \"Скуби-Ду Хэллоуин\"", 107138, "rareSecurity", 7, 60000, 0, 0, 0, 7138},
	/*41*/{3, "Сертификат охранника \"Джо Байден\"", 107134, "rareSecurity", 7, 8000, 0, 0, 0, 7134},
	/*42*/{4, "Сертификат охранника \"Коннор\"", 106668, "rareSecurity", 7, 40000, 0, 0, 0, 6668},
	/*43*/{5, "Сертификат охранника \"Билли Айлиш\"", 106669, "rareSecurity", 7, 40000, 0, 0, 0, 6669},
	/*44*/{6, "Сертификат охранника \"Рик Граймс\"", 106670, "rareSecurity", 7, 40000, 0, 0, 0, 6670},
	/*45*/{7, "Сертификат охранника \"Трисс Меригольд\"", 106671, "rareSecurity", 7, 40000, 0, 0, 0, 6671},
	/*46*/{8, "Сертификат охранника \"Слава Дворецков\"", 106505, "rareSecurity", 7, 40000, 0, 0, 0, 6505},
	/*47*/{9, "Сертификат охранника \"Умпа-лумп\"", 106447, "rareSecurity", 7, 8000, 0, 0, 0, 6447},
	/*48*/{10, "Сертификат охранника \"Йеннифэр\"", 106448, "rareSecurity", 7, 40000, 0, 0, 0, 6448},
	/*49*/{11, "Сертификат охранника \"Левая\"", 106449, "rareSecurity", 7, 40000, 0, 0, 0, 6449},
	/*50*/{12, "Сертификат охранника \"Правая\"", 106450, "rareSecurity", 7, 40000, 0, 0, 0, 6450},
	/*51*/{13, "Сертификат охранника \"Арагорн\"", 80018, "rareSecurity", 7, 8000, 0, 0, 0, 6205},
	/*52*/{14, "Сертификат охранника \"Гэндальф\"", 80017, "rareSecurity", 7, 8000, 0, 0, 0, 6206},
	/*53*/{15, "Сертификат охранника \"Леголас\"", 80016, "rareSecurity", 7, 8000, 0, 0, 0, 6207},
	/*54*/{16, "Сертификат охранника \"Тайлер Дёрден\"", 80019, "rareSecurity", 7, 40000, 0, 0, 0, 6208},
	/*55*/{17, "Сертификат охранника \"Скала\"", 80014, "rareSecurity", 7, 40000, 0, 0, 0, 6209},
	/*56*/{18, "Сертификат охранника \"Геральт\"", 80013, "rareSecurity", 7, 40000, 0, 0, 0, 6067},
	/*57*/{19, "Сертификат охранника \"Хагрид\"", 80011, "rareSecurity", 7, 40000, 0, 0, 0, 6068},
	/*58*/{20, "Сертификат охранника \"Уэенсдей Аддамс\"", 80012, "rareSecurity", 7, 40000, 0, 0, 0, 6069},
	/*59*/{0, "Игровая валюта", 50049, "currency", 4, 1, 0, 0, 0, 0},
	/*60*/{1, "Стартовый капитал №1", 50101, "currency", 4, 500, 0, 0, 0, 9450000},
	/*61*/{2, "Стартовый капитал №2", 50102, "currency", 4, 1000, 0, 0, 0, 19260000},
	/*62*/{3, "Стартовый капитал №3", 50103, "currency", 4, 2000, 0, 0, 0, 39240000},
	/*63*/{4, "Стартовый капитал №4", 50104, "currency", 4, 4000, 0, 0, 0, 80640000},
	/*64*/{5, "Стартовый капитал №5", 50105, "currency", 4, 8000, 0, 0, 0, 165600000},
	/*65*/{6, "Набор начинающий ловец", 50106, "currency", 4, 9100, 0, 0, 0, 14000000},
	/*66*/{7, "Набор начинающий магнат", 50107, "currency", 4, 11100, 0, 0, 0, 30000000},
	/*67*/{0, "Сертификат AT-99 «Scorpion»", 105802, "vehicle", 5, 7500, 0, 0, 0, 5802},
	/*68*/{1, "Сертификат Naran Hyper Coupe", 107684, "vehicle", 5, 75000, 0, 0, 5, 7684},
	/*69*/{2, "Сертификат Vanda Electrics Dendrobium", 107688, "vehicle", 5, 75000, 0, 0, 5, 7688},
	/*70*/{3, "Сертификат Porsche 911 GT3RS 2024", 107692, "vehicle", 5, 16000, 0, 0, 0, 7692},
	/*71*/{4, "Сертификат Mazda Rx-7FD-3S", 107686, "vehicle", 5, 15500, 0, 0, 0, 7686},
	/*72*/{5, "Сертификат BMW NINE ", 107677, "vehicle", 5, 20000, 0, 0, 0, 7677},
	/*73*/{6, "Сертификат Nissan Silvia 15", 107685, "vehicle", 5, 15000, 0, 0, 0, 7685},
	/*74*/{7, "Сертификат Corvette C1 (Barbie)", 107044, "vehicle", 5, 6000, 0, 0, 0, 7044},
	/*75*/{8, "Сертификат Corvette C1", 107043, "vehicle", 5, 6000, 0, 0, 0, 7043},
	/*76*/{9, "Сертификат Jaguar F-pace", 50058, "vehicle", 5, 8400, 0, 0, 0, 1655},
	/*77*/{10, "Сертификат Porsche Taycan", 50054, "vehicle", 5, 10800, 0, 0, 0, 2135},
	/*78*/{11, "Сертификат BMW i8", 50056, "vehicle", 5, 16800, 0, 0, 0, 2125},
	/*79*/{12, "Сертификат Maverick", 100777, "vehicle", 5, 5500, 0, 0, 0, 777},
	/*80*/{13, "Сертификат Luxor Deluxe", 104807, "vehicle", 5, 35000, 0, 0, 0, 4807},
	/*81*/{14, "Сертификат Nimbus", 104808, "vehicle", 5, 35000, 0, 0, 0, 4808},
	/*82*/{15, "Сертификат Vestra", 104809, "vehicle", 5, 35000, 0, 0, 0, 4809},
	/*83*/{16, "Сертификат Dodge Challenger SRT", 50057, "vehicle", 5, 6000, 0, 0, 0, 1647},
	/*84*/{17, "Сертификат Acura NSX", 50055, "vehicle", 5, 6000, 0, 0, 0, 1648},
	/*85*/{18, "Сертификат Lexus Sport-S", 50059, "vehicle", 5, 3600, 0, 0, 0, 1652},
	/*86*/{19, "Сертификат Toyota Land Cruiser Prado", 102318, "vehicle", 5, 12000, 0, 0, 0, 2318},
	/*87*/{20, "Сертификат Toyota Land Cruiser VXR V8 4", 102308, "vehicle", 5, 14400, 0, 0, 0, 2308},
	/*88*/{21, "Сертификат Mercedes E-63 AMG", 102313, "vehicle", 5, 13200, 0, 0, 0, 2313},
	/*89*/{22, "Сертификат Audi Q7", 102302, "vehicle", 5, 13800, 0, 0, 0, 2302},
	/*90*/{23, "Сертификат Toyota Supra A90", 102320, "vehicle", 5, 19200, 0, 0, 0, 2320},
	/*91*/{24, "Сертификат BMW M6 2020", 102303, "vehicle", 5, 16800, 0, 0, 0, 2303},
	/*92*/{0, "Гибридная установка", 106789, "tuning", 8, 5000, 0, 0, 0, 6789},
	/*93*/{1, "Багажник", 103915, "tuning", 8, 2000, 0, 0, 0, 3915},
	/*94*/{2, "Неоновая подсветка (настраиваемая)", 106518, "tuning", 8, 2000, 0, 0, 0, 6518},
	/*95*/{3, "Twin Turbo (2 уровня)", 105797, "tuning", 8, 10000, 0, 0, 0, 5797},
	/*96*/{4, "Twin Turbo", 100554, "tuning", 8, 700, 0, 0, 0, 554},
	/*97*/{5, "Коленвал (sport+)", 2326, "tuning", 8, 650, 0, 0, 0, 2326},
	/*98*/{6, "Распредвал (sport+)", 2329, "tuning", 8, 650, 0, 0, 0, 2329},
	/*99*/{7, "Турбокомпрессор (sport+)", 2332, "tuning", 8, 650, 0, 0, 0, 2332},
	/*100*/{8, "Нагнетатель (sport+)", 2335, "tuning", 8, 650, 0, 0, 0, 2335},
	/*101*/{9, "Чип-тюнинг (STAGE 3)", 2338, "tuning", 8, 650, 0, 0, 0, 2338},
	/*102*/{10, "Сцепление (sport+)", 2341, "tuning", 8, 650, 0, 0, 0, 2341},
	/*103*/{11, "КПП (sport+)", 2344, "tuning", 8, 650, 0, 0, 0, 2344},
	/*104*/{12, "Дифференциал (sport+)", 2347, "tuning", 8, 650, 0, 0, 0, 2347},
	/*105*/{13, "Подвеска (sport+)", 2350, "tuning", 8, 650, 0, 0, 0, 2350},
	/*106*/{14, "Тормоза (sport+)", 2353, "tuning", 8, 650, 0, 0, 0, 2353},
	/*107*/{15, "Гидравлика (управляемая)", 50209, "tuning", 8, 3000, 0, 0, 0, 5647},
	/*108*/{16, "Увеличенный бак (160 литров)", 50039, "tuning", 8, 9000, 0, 0, 0, 4817},
	/*109*/{17, "Улучшенный ремень безопасности", 50013, "tuning", 8, 5000, 0, 0, 0, 4125},
	/*110*/{18, "Запакованный спойлер (STOCK)", 3461, "tuning", 8, 650, 0, 0, 0, 3461},
	/*111*/{19, "Запакованный спойлер (DUCKTAIL)", 3462, "tuning", 8, 650, 0, 0, 0, 3462},
	/*112*/{20, "Запакованный спойлер (REAPER)", 3463, "tuning", 8, 650, 0, 0, 0, 3463},
	/*113*/{21, "Запакованный спойлер (DAYTONA)", 3464, "tuning", 8, 650, 0, 0, 0, 3464},
	/*114*/{22, "Запакованный спойлер (CURSE)", 3465, "tuning", 8, 650, 0, 0, 0, 3465},
	/*115*/{23, "Запакованный капот (FOUR-SLOT)", 3471, "tuning", 8, 650, 0, 0, 0, 3471},
	/*116*/{24, "Запакованный капот (SPEEDLINE)", 3472, "tuning", 8, 650, 0, 0, 0, 3472},
	/*117*/{25, "Запакованный капот (TREMOR)", 3473, "tuning", 8, 650, 0, 0, 0, 3473},
	/*118*/{26, "Запакованный капот (DOUBLE-V)", 3474, "tuning", 8, 650, 0, 0, 0, 3474},
	/*119*/{27, "Запакованный выхлоп (GRADIENT STOCK)", 3466, "tuning", 8, 650, 0, 0, 0, 3466},
	/*120*/{28, "Запакованный выхлоп (CARBON RING)", 3467, "tuning", 8, 650, 0, 0, 0, 3467},
	/*121*/{29, "Запакованный выхлоп (CARBON TWO)", 3468, "tuning", 8, 650, 0, 0, 0, 3468},
	/*122*/{30, "Запакованный выхлоп (GRADIENT TWO)", 3469, "tuning", 8, 650, 0, 0, 0, 3469},
	/*123*/{31, "Запакованный выхлоп (GRID)", 3470, "tuning", 8, 650, 0, 0, 0, 3470},
	/*124*/{32, "Винил-1", 2354, "tuning", 8, 650, 0, 0, 0, 2354},
	/*125*/{33, "Винил-2", 2355, "tuning", 8, 650, 0, 0, 0, 2355},
	/*126*/{34, "Винил-3", 2356, "tuning", 8, 650, 0, 0, 0, 2356},
	/*127*/{35, "Винил-4", 2357, "tuning", 8, 650, 0, 0, 0, 2357},
	/*128*/{36, "Винил-5", 2358, "tuning", 8, 650, 0, 0, 0, 2358},
	/*129*/{37, "Винил-6", 2359, "tuning", 8, 650, 0, 0, 0, 2359},
	/*130*/{38, "Винил-7", 2360, "tuning", 8, 650, 0, 0, 0, 2360},
	/*131*/{39, "Винил-8", 2361, "tuning", 8, 650, 0, 0, 0, 2361},
	/*132*/{40, "Винил-9", 2362, "tuning", 8, 650, 0, 0, 0, 2362},
	/*133*/{41, "Винил-10", 2363, "tuning", 8, 650, 0, 0, 0, 2363},
	/*134*/{42, "Винил-11", 2364, "tuning", 8, 650, 0, 0, 0, 2364},
	/*135*/{43, "Винил-12", 2365, "tuning", 8, 650, 0, 0, 0, 2365},
	/*136*/{44, "Винил-13", 2366, "tuning", 8, 650, 0, 0, 0, 2366},
	/*137*/{45, "Винил-14", 2367, "tuning", 8, 650, 0, 0, 0, 2367},
	/*138*/{46, "Винил-15", 2368, "tuning", 8, 650, 0, 0, 0, 2368},
	/*139*/{47, "Винил-16", 2369, "tuning", 8, 650, 0, 0, 0, 2369},
	/*140*/{48, "Винил-17", 2370, "tuning", 8, 650, 0, 0, 0, 2370},
	/*141*/{49, "Выхлоп для Tornado (Slamin)", 2562, "tuning", 8, 650, 0, 0, 0, 2562},
	/*142*/{50, "Диски (Type-1)", 2563, "tuning", 8, 650, 0, 0, 0, 2563},
	/*143*/{51, "Диски (Type-2)", 2564, "tuning", 8, 650, 0, 0, 0, 2564},
	/*144*/{52, "Диски (Type-3)", 2565, "tuning", 8, 650, 0, 0, 0, 2565},
	/*145*/{53, "Диски (Type-4)", 2566, "tuning", 8, 650, 0, 0, 0, 2566},
	/*146*/{54, "Диски (Type-5)", 2567, "tuning", 8, 650, 0, 0, 0, 2567},
	/*147*/{55, "Диски (Type-6)", 2568, "tuning", 8, 650, 0, 0, 0, 2568},
	/*148*/{56, "Диски (Type-7)", 2569, "tuning", 8, 650, 0, 0, 0, 2569},
	/*149*/{57, "Диски (Type-8)", 2570, "tuning", 8, 650, 0, 0, 0, 2570},
	/*150*/{58, "Диски (Type-9)", 2571, "tuning", 8, 650, 0, 0, 0, 2571},
	/*151*/{59, "Диски (Type-10)", 2572, "tuning", 8, 650, 0, 0, 0, 2572},
	/*152*/{60, "Диски (Type-11)", 2573, "tuning", 8, 650, 0, 0, 0, 2573},
	/*153*/{61, "Диски (Type-12)", 2574, "tuning", 8, 650, 0, 0, 0, 2574},
	/*154*/{62, "Диски (Type-13)", 2575, "tuning", 8, 650, 0, 0, 0, 2575},
	/*155*/{63, "Диски (Type-14)", 2576, "tuning", 8, 650, 0, 0, 0, 2576},
	/*156*/{64, "Диски (Type-15)", 2577, "tuning", 8, 650, 0, 0, 0, 2577},
	/*157*/{65, "Диски (Type-16)", 2578, "tuning", 8, 650, 0, 0, 0, 2578},
	/*158*/{0, "Глушилка для дронов", 107360, "accessories", 3, 15000, 0, 0, 0, 7360},
	/*159*/{1, "Дрон-убийца", 107258, "accessories", 3, 35000, 0, 0, 0, 7258},
	/*160*/{2, "Голова Робосанты", 107237, "accessories", 3, 25000, 0, 0, 0, 7237},
	/*161*/{3, "Planet Express", 106926, "accessories", 3, 24000, 0, 0, 0, 6926},
	/*162*/{4, "Игрушечный Delorean", 106931, "accessories", 3, 24000, 0, 0, 0, 6931},
	/*163*/{5, "Шлем бензопила", 106578, "accessories", 3, 25000, 0, 0, 0, 6578},
	/*164*/{6, "Пугало-репка", 106585, "accessories", 3, 25000, 0, 0, 0, 6585},
	/*165*/{7, "Случайный культовый бронежилет", 106685, "accessories", 3, 19000, 0, 10, 0, 6685},
	/*166*/{8, "Молот «Duff»", 106605, "accessories", 3, 25000, 0, 0, 0, 6605},
	/*167*/{9, "Цепь «Bitcoin»", 106526, "accessories", 3, 25000, 0, 0, 0, 6526},
	/*168*/{10, "Анимированые Щупальца", 106644, "accessories", 3, 25000, 0, 0, 0, 6644},
	/*169*/{11, "Рюкзак «Маски падших»", 106532, "accessories", 3, 25000, 0, 0, 0, 6532},
	/*170*/{12, "Булава «Крылья бабочки»", 106551, "accessories", 3, 25000, 0, 0, 0, 6551},
	/*171*/{13, "Топор «Магма»", 106543, "accessories", 3, 25000, 0, 0, 0, 6543},
	/*172*/{14, "Анимированный Билл Шифр", 106643, "accessories", 3, 25000, 0, 0, 0, 6643},
	/*173*/{15, "Анимированный Пончиковый нимб", 106641, "accessories", 3, 9000, 0, 0, 0, 6641},
	/*174*/{16, "Золотой длинный Desert Eagle", 106520, "accessories", 3, 45000, 0, 0, 0, 6520},
	/*175*/{17, "Колонка", 100578, "accessories", 3, 650, 0, 0, 0, 578},
	/*176*/{18, "Бумбокс (красный)", 100181, "accessories", 3, 700, 0, 0, 0, 181},
	/*177*/{19, "Бензопила на спину", 100779, "accessories", 3, 3200, 0, 0, 0, 779},
	/*178*/{20, "Цепь «Махинатор»", 106313, "accessories", 3, 25000, 0, 0, 0, 6313},
	/*179*/{21, "Шлем «Гермес»", 106330, "accessories", 3, 28000, 0, 0, 0, 6330},
	/*180*/{22, "Шлем «Шипы»", 106331, "accessories", 3, 28000, 0, 0, 0, 6331},
	/*181*/{23, "Шлем «Джокер»", 106332, "accessories", 3, 28000, 0, 0, 0, 6332},
	/*182*/{24, "Шлем «Собачка»", 106333, "accessories", 3, 28000, 0, 0, 0, 6333},
	/*183*/{25, "Шлем «Лич»", 106334, "accessories", 3, 28000, 0, 0, 0, 6334},
	/*184*/{26, "Шлем «Морозный»", 106335, "accessories", 3, 28000, 0, 0, 0, 6335},
	/*185*/{27, "Случайный чемодан Весны", 50074, "accessories", 3, 40000, 0, 8, 0, 6451},
	/*186*/{28, "Маска-невидимка", 106264, "accessories", 3, 50000, 0, 0, 0, 6264},
	/*187*/{29, "Табличка «Фрапс пишется»", 6324, "accessories", 3, 25000, 0, 0, 0, 6324},
	/*188*/{30, "Эффект «Рыбки в пруду»", 5931, "accessories", 3, 30000, 0, 0, 0, 5931},
	/*189*/{31, "Именное поместье", 50218, "accessories", 3, 30000, 0, 0, 0, 5821},
	/*190*/{32, "Голова Тыква", 5670, "accessories", 3, 30000, 0, 0, 0, 5670},
	/*191*/{33, "Сфера над головой", 5671, "accessories", 3, 30000, 0, 0, 0, 5671},
	/*192*/{34, "Обрез (активный аксессуар)", 50217, "accessories", 3, 18000, 0, 0, 0, 5822},
	/*193*/{35, "Воздушный шар #1", 1134, "accessories", 3, 10000, 0, 0, 0, 1134},
	/*194*/{36, "Воздушный шар #2", 1135, "accessories", 3, 10000, 0, 0, 0, 1135},
	/*195*/{37, "Воздушный шар #3", 1136, "accessories", 3, 10000, 0, 0, 0, 1136},
	/*196*/{38, "Воздушный шар #4", 1137, "accessories", 3, 10000, 0, 0, 0, 1137},
	/*197*/{39, "Воздушный шар #5", 1138, "accessories", 3, 10000, 0, 0, 0, 1138},
	/*198*/{40, "Воздушный шар #6", 1139, "accessories", 3, 10000, 0, 0, 0, 1139},
	/*199*/{41, "Воздушный шар #7", 1140, "accessories", 3, 10000, 0, 0, 0, 1140},
	/*200*/{42, "Сфера Terra", 5446, "accessories", 3, 12000, 0, 0, 0, 5446},
	/*201*/{43, "Сфера Aqua", 5447, "accessories", 3, 12000, 0, 0, 0, 5447},
	/*202*/{44, "Сфера Fire", 5448, "accessories", 3, 12000, 0, 0, 0, 5448},
	/*203*/{45, "Сфера Air", 5449, "accessories", 3, 12000, 0, 0, 0, 5449},
	/*204*/{46, "Удилище", 4128, "accessories", 3, 9000, 0, 0, 0, 4128},
	/*205*/{47, "Кошелёк", 50202, "accessories", 3, 1500, 0, 0, 0, 3622},
	/*206*/{48, "Samsung Galaxy S10 (Белый)", 50201, "accessories", 3, 600, 0, 0, 0, 709},
	/*207*/{49, "IPhone X (Белый)", 50200, "accessories", 3, 600, 0, 0, 0, 720},
	/*208*/{50, "Велосипед на спину", 2181, "accessories", 3, 11000, 0, 0, 0, 2181},
	/*209*/{51, "Дельтаплан на спину", 2182, "accessories", 3, 11000, 0, 0, 0, 2182},
	/*210*/{52, "Лопата", 184, "accessories", 3, 4500, 0, 0, 0, 184},
	/*211*/{53, "Современная карта кладов", 3589, "accessories", 3, 13000, 0, 0, 0, 3589},
	/*212*/{54, "Молоток на спину", 1159, "accessories", 3, 1950, 0, 0, 0, 1159},
	/*213*/{55, "Канистра на правое бедро", 1163, "accessories", 3, 1950, 0, 0, 0, 1163},
	/*214*/{56, "Фотоаппарат на грудь", 1164, "accessories", 3, 1950, 0, 0, 0, 1164},
	/*215*/{57, "Миниган на спину", 1130, "accessories", 3, 1800, 0, 0, 0, 1130},
	/*216*/{58, "Огнемёт на спину", 1131, "accessories", 3, 1800, 0, 0, 0, 1131},
	/*217*/{59, "Коса на спину", 1132, "accessories", 3, 1800, 0, 0, 0, 1132},
	/*218*/{60, "Улучшение для автомобиля", 1129, "accessories", 3, 4000, 0, 0, 0, 1129},
	/*219*/{61, "Петух на плечо", 1071, "accessories", 3, 800, 0, 0, 0, 1071},
	/*220*/{62, "Амулет", 740, "accessories", 3, 1000, 0, 0, 0, 740},
	/*221*/{63, "Попугай на плечо", 751, "accessories", 3, 700, 0, 0, 0, 751},
	/*222*/{64, "Скейт", 168, "accessories", 3, 9000, 0, 0, 0, 168},
	/*223*/{65, "Доска для сёрфа 1", 188, "accessories", 3, 7000, 0, 0, 0, 188},
	/*224*/{66, "Доска для сёрфа 2", 189, "accessories", 3, 7000, 0, 0, 0, 189},
	/*225*/{67, "Доска для сёрфа 3", 190, "accessories", 3, 7000, 0, 0, 0, 190},
	/*226*/{68, "Гитара (Красная)", 114, "accessories", 3, 4000, 0, 0, 0, 114},
	/*227*/{69, "Гитара (Белая)", 115, "accessories", 3, 4000, 0, 0, 0, 115},
	/*228*/{70, "Гитара (Черная)", 116, "accessories", 3, 4000, 0, 0, 0, 116},
	/*229*/{71, "Нашивка на аксессуар(защита)", 2183, "accessories", 3, 8000, 0, 0, 0, 2183},
	/*230*/{72, "Нашивка на аксессуар(регенерация)", 2184, "accessories", 3, 8000, 0, 0, 0, 2184},
	/*231*/{73, "Нашивка на аксессуар(урон)", 2185, "accessories", 3, 8000, 0, 0, 0, 2185},
	/*232*/{74, "Нашивка на аксессуар(удача)", 2186, "accessories", 3, 8000, 0, 0, 0, 2186},
	/*233*/{75, "Нашивка на аксессуар(макс. хп)", 3621, "accessories", 3, 8000, 0, 0, 0, 3621},
	/*234*/{76, "Шляпа (Цилиндр)", 105, "accessories", 3, 100, 0, 0, 0, 105},
	/*235*/{77, "Шляпа", 106, "accessories", 3, 100, 0, 0, 0, 106},
	/*236*/{78, "Чемодан (коричневый)", 127, "accessories", 3, 350, 0, 0, 0, 127},
	/*237*/{79, "Красный чемодан", 584, "accessories", 3, 450, 0, 0, 0, 584},
	/*238*/{80, "Модификация Афроамериканец", 1191, "accessories", 3, 8000, 0, 0, 0, 1191},
	/*239*/{81, "Модификация Палач", 1196, "accessories", 3, 8000, 0, 0, 0, 1196},
	/*240*/{82, "Модификация Дарт-вейдер", 1199, "accessories", 3, 8000, 0, 0, 0, 1199},
	/*241*/{83, "Модификация Спарта", 1206, "accessories", 3, 8000, 0, 0, 0, 1206},
	/*242*/{84, "Модификация PUBG", 1208, "accessories", 3, 8000, 0, 0, 0, 1208},
	/*243*/{85, "Машинка на радиоуправлении", 743, "accessories", 3, 2000, 0, 0, 0, 743},
	/*244*/{86, "Самолёт на радиоуправлении", 744, "accessories", 3, 2000, 0, 0, 0, 744},
	/*245*/{87, "Вертолёт на радиоуправлении (1)", 745, "accessories", 3, 2000, 0, 0, 0, 745},
	/*246*/{88, "Вертолёт на радиоуправлении (2)", 746, "accessories", 3, 2000, 0, 0, 0, 746},
	/*247*/{89, "Танк на радиоуправлении", 747, "accessories", 3, 2000, 0, 0, 0, 747},
	/*248*/{90, "Переносной ларек (1)", 748, "accessories", 3, 1500, 0, 0, 0, 748},
	/*249*/{91, "Переносной ларек (2)", 749, "accessories", 3, 1500, 0, 0, 0, 749},
	/*250*/{92, "Переносной ларек (3)", 750, "accessories", 3, 1500, 0, 0, 0, 750},
	/*251*/{93, "Шашка такси (желтая) [деталь тюнинга]", 1030, "accessories", 3, 4500, 0, 0, 0, 1030},
	/*252*/{94, "Шашка такси (черный-1) [деталь тюнинга]", 1031, "accessories", 3, 4500, 0, 0, 0, 1031},
	/*253*/{95, "Шашка такси (белый) [деталь тюнинга]", 1032, "accessories", 3, 4500, 0, 0, 0, 1032},
	/*254*/{96, "Шашка такси (черный-2) [деталь тюнинга]", 1033, "accessories", 3, 4500, 0, 0, 0, 1033},
	/*255*/{97, "Супер-кирка", 3528, "accessories", 3, 12000, 0, 0, 0, 3528},
	/*256*/{98, "Супер-грабли", 3529, "accessories", 3, 8500, 0, 0, 0, 3529},
	/*257*/{99, "Флешка майнера", 3917, "accessories", 3, 4500, 0, 0, 0, 3917},
	/*258*/{100, "Грядка хлопка", 3918, "accessories", 3, 24000, 0, 0, 0, 3918},
	/*259*/{101, "Грядка льна", 3919, "accessories", 3, 24000, 0, 0, 0, 3919},
	/*260*/{102, "Грядка с наркотиками", 4243, "accessories", 3, 15000, 0, 0, 0, 4243},
	/*261*/{0, "Скин: Mellstroy (ID: 823)", 107600, "skins", 6, 40000, 0, 0, 5, 7600},
	/*262*/{1, "Скин: Fallen Love Ranger (ID: 829)", 107606, "skins", 6, 10000, 0, 0, 5, 7606},
	/*263*/{2, "Скин: CRZ-8 (ID: 827)", 107604, "skins", 6, 10000, 0, 0, 5, 7604},
	/*264*/{3, "Скин: Аркейн Ви (ID: 825)", 107602, "skins", 6, 10000, 0, 0, 5, 7602},
	/*265*/{4, "Скин: Anti-Cuddle Sarah (ID: 824)", 107601, "skins", 6, 10000, 0, 0, 5, 7601},
	/*266*/{5, "Скин: Крэкшот (ID: 803)", 107462, "skins", 6, 5500, 0, 0, 0, 7462},
	/*267*/{6, "Скин: Карась (ID: 804)", 107463, "skins", 6, 5500, 0, 15, 0, 7463},
	/*268*/{7, "Скин: Адидас (ID: 793)", 107307, "skins", 6, 6500, 0, 0, 0, 7307},
	/*269*/{8, "Скин: Артур Морган (ID: 719)", 106651, "skins", 6, 5500, 0, 0, 0, 6651},
	/*270*/{9, "Скин: Билли Айлиш (ID: 725)", 106657, "skins", 6, 5500, 0, 0, 0, 6657},
	/*271*/{10, "Скин: Рик Граймс (ID: 726)", 106658, "skins", 6, 5500, 0, 0, 0, 6658},
	/*272*/{11, "Скин: Рэйзор (ID: 732)", 106664, "skins", 6, 5500, 0, 0, 0, 6664},
	/*273*/{12, "Скин: Трисс Меригольд (ID: 735)", 106667, "skins", 6, 7000, 0, 0, 0, 6667},
	/*274*/{13, "Скин: Слава Дворецков (ID: 712)", 106498, "skins", 6, 5500, 0, 0, 0, 6498},
	/*275*/{14, "Скин: Йеннифэр (ID: 696)", 106377, "skins", 6, 5500, 0, 0, 0, 6377},
	/*276*/{15, "Скин: Джон Сина (ID: 705)", 106386, "skins", 6, 5500, 0, 0, 0, 6386},
	/*277*/{16, "Скин: Доктор Браун (ID: 707)", 106388, "skins", 6, 5500, 0, 0, 0, 6388},
	/*278*/{17, "Скин: Хикка (ID: 708)", 106389, "skins", 6, 5500, 0, 0, 0, 6389},
	/*279*/{18, "Скин: Sam Mason (ID: 331)", 101540, "skins", 6, 500, 0, 0, 0, 1540},
	/*280*/{19, "Скин: Farmer (ID: 333)", 101542, "skins", 6, 500, 0, 0, 0, 1542},
	/*281*/{20, "Скин: Аль Пачино (ID: 389)", 101940, "skins", 6, 5500, 0, 0, 0, 1940},
	/*282*/{21, "Скин: Тайлер Дёрден (ID: 684)", 80015, "skins", 6, 5500, 0, 0, 0, 6188},
	/*283*/{22, "Скин: Иосиф Сталин (ID: 682)", 80020, "skins", 6, 5500, 0, 0, 0, 6186},
	/*284*/{23, "Скин: Геральт (ID: 643)", 80004, "skins", 6, 5500, 0, 0, 0, 5953},
	/*285*/{24, "Скин: Хагрид (ID: 669)", 80005, "skins", 6, 5500, 0, 0, 0, 6057},
	/*286*/{25, "Скин: Уэенсдей Аддамс [2022] (ID: 649)", 80006, "skins", 6, 5500, 0, 0, 0, 5959},
	/*287*/{26, "Скин: Люцифер (ID: 666)", 80007, "skins", 6, 5500, 0, 0, 0, 6054},
	/*288*/{27, "Скин: Джинкс (ID: 648)", 80008, "skins", 6, 5500, 0, 0, 0, 5958},
	/*289*/{28, "Скин: Цири (ID: 644)", 80009, "skins", 6, 5500, 0, 0, 0, 5954},
	/*290*/{29, "Скин: Пили (ID: 810)", 107469, "skins", 6, 2000, 0, 0, 0, 7469},
	/*291*/{30, "Скин: MORGENSHTERN (ID: 325)", 1534, "skins", 6, 1400, 0, 0, 0, 1534},
	/*292*/{31, "Скин: Oxxxymiron (ID: 327)", 1536, "skins", 6, 1400, 0, 0, 0, 1536},
	/*293*/{32, "Скин: Баста (ID: 334)", 1612, "skins", 6, 1400, 0, 0, 0, 1612},
	/*294*/{33, "Скин: Паша Техник (ID: 342)", 1620, "skins", 6, 1400, 0, 0, 0, 1620},
	/*295*/{34, "Скин: Леонардо Ди Каприо (ID: 391)", 1942, "skins", 6, 1400, 0, 0, 0, 1942},
	/*296*/{35, "Скин: Киану Ривз (ID: 393)", 1944, "skins", 6, 1400, 0, 0, 0, 1944},
	/*297*/{36, "Скин: Илон Маск (ID: 394)", 1945, "skins", 6, 1400, 0, 0, 0, 1945},
	/*298*/{37, "Скин: Арнольд Шварценеггер (ID: 396)", 1947, "skins", 6, 1400, 0, 0, 0, 1947},
	/*299*/{38, "Скин: Джейсон Стейтем (ID: 397)", 1948, "skins", 6, 1400, 0, 0, 0, 1948},
	/*300*/{39, "Скин: Квентин Тарантино (ID: 398)", 1949, "skins", 6, 1400, 0, 0, 0, 1949},
	/*301*/{0, "Рулеточный компас", 103925, "roulette", 9, 3500, 0, 0, 0, 3925},
	/*302*/{1, "Рулеточный бустер", 105294, "roulette", 9, 4200, 0, 0, 0, 5294},
	/*303*/{2, "Сундук рулетки (донат)", 100799, "roulette", 9, 6000, 0, 0, 0, 799},
	/*304*/{3, "Сундук платиновой рулетки", 101424, "roulette", 9, 10000, 0, 0, 0, 1424},
	/*305*/{4, "Бронзовая рулетка", 100555, "roulette", 9, 15, 0, 0, 0, 555},
	/*306*/{5, "Серебряная рулетка", 100556, "roulette", 9, 50, 0, 0, 0, 556},
	/*307*/{6, "Золотая рулетка", 100557, "roulette", 9, 90, 0, 0, 0, 557},
	/*308*/{7, "Платиновая рулетка", 101425, "roulette", 9, 250, 0, 0, 0, 1425},
	/*309*/{0, "Танец: Брейк (1)", 50062, "dance", 10, 750, 0, 0, 0, 4753},
	/*310*/{1, "Танец: Утят", 50062, "dance", 10, 750, 0, 0, 0, 4756},
	/*311*/{2, "Танец: Хип-Хоп (5)", 50062, "dance", 10, 750, 0, 0, 0, 4762},
	/*312*/{0, "Алмазный камень", 107425, "other", 11, 300, 0, 13, 0, 0},
	/*313*/{1, "Дополнительная комната", 107414, "other", 11, 25000, 0, 11, 0, 0},
	/*314*/{2, "Уровень BattlePass \"Королевская Битва\" (5 EXP)", 107364, "other", 11, 70, 0, 0, 0, 0},
	/*315*/{3, "Наёмный фермер", 107344, "other", 11, 50000, 0, 0, 0, 0},
	/*316*/{4, "Талон на Х4 PayDay (Передаваемый)", 107351, "other", 11, 2000, 0, 0, 0, 0},
	/*317*/{5, "Нашивка на скин (Бег Си Джея)", 107345, "other", 11, 30000, 0, 0, 0, 0},
	/*318*/{6, "Нашивка на скин (Бесконечный бег)", 107346, "other", 11, 25000, 0, 0, 0, 0},
	/*319*/{7, "Нашивка на скин (Защитная пластина)", 107347, "other", 11, 19000, 0, 0, 0, 0},
	/*320*/{8, "Нашивка на скин (Огненные пули)", 107348, "other", 11, 19000, 0, 0, 0, 0},
	/*321*/{9, "Нашивка на скин (Опыт Battle Pass)", 107349, "other", 11, 19000, 0, 0, 0, 0},
	/*322*/{10, "Темная материя", 107281, "other", 11, 200, 0, 10, 0, 0},
	/*323*/{11, "Разрешение на получение номера (10 шт)", 107035, "other", 11, 350, 0, 0, 0, 0},
	/*324*/{12, "Безлимитная доставка нефтебочек", 106756, "other", 11, 12000, 0, 0, 0, 0},
	/*325*/{13, "Сумка рыболова", 106649, "other", 11, 5000, 0, 0, 0, 0},
	/*326*/{14, "Улучшение Большие карманы", 106650, "other", 11, 7000, 0, 0, 0, 0},
	/*327*/{15, "Заточка +13", 6098, "other", 11, 10000, 0, 0, 0, 0},
	/*328*/{16, "Рандомный прицел", 700053, "other", 11, 2300, 0, 0, 0, 0},
	/*329*/{17, "Супер-заточка", 700052, "other", 11, 150, 0, 0, 0, 0},
	/*330*/{18, "2 складских помещения", 50070, "other", 11, 2000, 0, 0, 0, 0},
	/*331*/{19, "Заточка для бронежилета", 931, "other", 11, 80, 0, 0, 0, 0},
	/*332*/{20, "Железная карта нац.банка", 50043, "other", 11, 18000, 0, 0, 0, 0},
	/*333*/{21, "Игровой опыт", 50006, "other", 11, 3, 0, 0, 0, 0},
	/*334*/{22, "Пакет лицензий", 50002, "other", 11, 1900, 0, 0, 0, 0},
	/*335*/{23, "Семейная репутация", 50007, "other", 11, 300, 0, 0, 0, 0},
	/*336*/{24, "Номер телефона", 50005, "other", 11, 2500, 0, 0, 0, 0},
	/*337*/{25, "Дополнительные 6 ячеек инвентаря", 50038, "other", 11, 500, 0, 0, 0, 0},
	/*338*/{26, "Точильный амулет", 50014, "other", 11, 60, 0, 0, 0, 0},
	/*339*/{27, "Выйти из ЧС", 50015, "other", 11, 275, 0, 0, 0, 0},
	/*340*/{28, "Возможность иметь две фермы", 50016, "other", 11, 5000, 0, 0, 0, 0},
	/*341*/{29, "Военный билет", 50017, "other", 11, 1800, 0, 0, 0, 0},
	/*342*/{30, "Смена пола", 50009, "other", 11, 150, 0, 0, 0, 0},
	/*343*/{31, "Пополнить навык вождения", 50012, "other", 11, 50, 0, 0, 0, 0},
	/*344*/{32, "Смена никнейма", 50053, "other", 11, 150, 0, 0, 0, 0},
	/*345*/{33, "Снять варн", 50013, "other", 11, 1000, 0, 0, 0, 0},
	/*346*/{34, "+1 Законопослушность", 50018, "other", 11, 3, 0, 0, 0, 0},
	/*347*/{35, "Избавиться от наркозависимости", 50019, "other", 11, 900, 0, 0, 0, 0},
	/*348*/{36, "Сбросить пробег с автомобиля", 50111, "other", 11, 500, 0, 0, 0, 0},
	/*349*/{37, "Выйти из тюрьмы", 50020, "other", 11, 1000, 0, 0, 0, 0}
};

stock GetDonateCostAppliedDiscount(donateID)
	return DonateInfo_data[donateID][data_Cost] - (DonateInfo_data[donateID][data_Cost] * DonateInfo_data[donateID][data_Discount] / 100);

enum box_options
{
	data_BPID,
	data_ItemID,
	data_Items[75],
	data_Type,
	data_AmountRareFalls,
	data_CountPrize
};

new BoxInfo_data[][box_options] = {
	{39, 1637, {1645, 1641, 1417}, 1, 15, 3}, // Rare Yellow
	{40, 1638, {1640, 1419, 1642}, 1, 15, 3}, // Rare Red
	{41, 1639, {1643, 1418, 1644}, 1, 15, 3}, // Rare Blue
	{38, 1766, {1712, 1713, 1714, 1715, 1716}, 2, 0, 5}, // Marvel
	{37, 1767, {1694, 1695, 1696, 1697, 1698, 1699}, 2, 0, 6}, // Джентельмены
	{36, 1767, {1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709}, 2, 0, 10}, // Minecraft
	{42, 1769, {1771, 1772, 1773, 1774, 1775}, 1, 15, 5}, // Moto
	{44, 1770, {1717, 1718, 1719, 1871, 1785, 2306, 1653, 3598, 3613, 3618}, 1, 15, 10}, // Auto
	{35, 1853, {7284, 7286, 7287, 7288, 7289, 7292, 7297, 7298, 7302, 7304, 7303}, 1, 15, 11}, // Премия
	{45, 1939, {2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 1720, 6682, 6683, 6684}, 1, 15, 12}, // Ностальгический
	{0, 2002, {1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118}, 2, 0, 44}, // Секондхенд
	{43, 2149, {2120, 2121, 2122, 2123, 2129, 2132, 2131, 2136, 3615}, 1, 15, 9}, // Олигарха
	{50, 2187, {7387, 7389, 7390, 7391, 7392, 7393, 7395, 7397, 3999, 7399, 7400, 7401, 7409, 7404, 7388, 3553, 6050, 6790, 6797, 6801, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 3528, 3529}, 2, 0, 30}, // Кастом акссесуаров
	{34, 3559, {3590, 3592, 3593, 3594, 3595, 3603, 3605, 3606, 3608, 3609, 3610, 3618, 3615, 3613, 3604, 5071, 5072, 5073, 6004, 6005, 6006}, 1, 15, 21}, // Организации
	{33, 3565, {2318, 2308, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031}, 1, 0, 10}, // Крафтера
	{51, 3623, {3617, 3602, 4810, 4811, 4812, 4813}, 1, 0, 6}, // Дальнобойщика
	{47, 3991, {3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948}, 1, 0, 8}, // Mortal Kombat
	{46, 3992, {3989, 3990}, 1, 0, 2}, // Водитель Автобуса
	{-1, 4242, {4357, 4360, 5500, 4365, 4367, 4368, 4369}, 1, 0, 7}, // Рыболова (Ларец)
	{-1, 4584, {1}, 1, 0}, // Рандомный ларец
	{53, 4792, {4807, 4809, 4808}, 1, 0, 3}, // Пилота
	{52, 4793, {4804, 4805, 4806}, 1, 0, 3}, // Развозчика Продуктов
//	{4794, {}, 1, 0}, // Кладоискателя
	{-1, 5323, {5558, 4673, 5546, 4667, 4676, 4677, 4682, 4683, 5487, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694}, 1, 0, 17}, // Vice City
	{-1, 5479, {5469, 5471, 5472, 1418, 1641, 5476, 1640, 1644, 1645, 1417}, 1, 0, 10}, // Tidex
	{-1, 6199, {6210, 6211, 6212, 6213}, 1, 0, 4}, // Семейных Охранников
	{-1, 6234, {6235, 3611, 3612}, 1, 0, 3}, // Ларец Петуха
	{-1, 6759, {6973, 6974, 6976, 6980, 4356, 6983, 6975, 6789}, 1, 0, 8}, // Лидера
	{-1, 6994, {1}, 1, 0}, // Испытателя Mobile 2.1
	{-1, 7350, {7052, 7046}, 1, 0, 2}, // Инкассатора
//	{7426, {}, 1, 0}, // AZ Монеты
	{-1, 7480, {7469, 7460, 7461, 7464, 7471, 7462, 7463, 7465, 7468}, 1, 0, 9}, // Fortnite
	{-1, 7698, {7681, 7593}, 1, 0, 2} // Пасхальный 2024
//	{7418, {}, 1, 0} // Рыболова (Ящик)*/
}, ServerBoxOpen_count[sizeof(BoxInfo_data)];

enum chest_options
{
	data_ItemID,
	data_Items[75],
	data_Random,
	data_Timer
};

new ChestInfo_data[][chest_options] = {
	{1854, {1852, 1853}, 2, 7200}, // Тайник Илона Маска
	{3926, {1}, 2, 7200}, // Тайник Лос-Сантоса
	{5823, {5697, 5698, 5699, 5700}, 2, 7200}, // Тайник Vice City
	{1424, {555, 556, 557, 1425}, 4, 7200}, // Сундук Платиновой рулетки
	{799, {556, 557}, 4, 7200} // Сундук рулетки(донат)
	
	//{7434, {}, 2, 7200}, // Тайник Собирателя
};

enum anims_info
{
	anim_CategoryID,
	anim_SelectID,
	anim_Library[18],
	anim_Name[24],
	anim_ExpireTime,
	anim_Named[50]
}
new const AnimInfo[][anims_info] = 
{
	{1, 1, "GANGS", "INVITE_YES", 264192, "Согласится"},
	{1, 2, "GANGS", "INVITE_NO", 264192, "Отказаться"},
	{1, 3, "DEALER", "DEALER_IDLE_02", 264192, "Позвать к себе (1)"},
	{1, 4, "CAMERA", "CAMSTND_CMON", 264192, "Позвать к себе (2)"},
	{1, 5, "KISSING", "GFWAVE2", 264192, "Помахать рукой (1)"},
	{1, 6, "ON_LOOKERS", "WAVE_LOOP", 264192, "Помахать рукой (2)"},
	{1, 7, "GANGS", "HNDSHKCB", 264192, "Стиль приветствия (1)"},
	{1, 8, "GANGS", "HNDSHKFA", 264192, "Стиль приветствия (2)"},
	{1, 9, "GANGS", "HNDSHKFA_SWT", 264192, "Стиль приветствия (3)"},
	{1, 10, "GANGS", "HNDSHKDA", 264192, "Стиль приветствия (4)"},
	{1, 11, "GANGS", "HNDSHKEA", 264192, "Стиль приветствия (5)"},
	{1, 12, "GANGS", "HNDSHKAA", 264192, "Стиль приветствия (6)"},
	{1, 13, "GANGS", "HNDSHKBA", 264192, "Стиль приветствия (7)"},
	{1, 14, "GANGS", "HNDSHKCA", 264192, "Стиль приветствия (8)"},
	{1, 15, "GANGS", "PRTIAL_GNGTLKC", 264192, "Стиль общения (1)"},
	{1, 16, "GANGS", "PRTIAL_GNGTLKD", 264192, "Стиль общения (2)"},
	{1, 17, "GANGS", "PRTIAL_GNGTLKE", 264192, "Стиль общения (3)"},
	{1, 18, "GANGS", "PRTIAL_GNGTLKF", 264192, "Стиль общения (4)"},
	{1, 19, "GANGS", "PRTIAL_GNGTLKA", 264192, "Стиль общения (5)"},
	{1, 20, "GANGS", "PRTIAL_GNGTLKB", 264192, "Стиль общения (6)"},
	{1, 21, "GANGS", "PRTIAL_GNGTLKH", 264192, "Стиль общения (7)"},
	{1, 22, "MISC", "IDLE_CHAT_02", 264192, "Стиль общения (8)"},
	{1, 23, "CASINO", "CARDS_PICK_02", 264192, "Стиль общения (9)"},
	{1, 24, "GANGS", "PRTIAL_GNGTLKA", 264192, "Стиль общения (10)"},
	{1, 25, "GANGS", "PRTIAL_GNGTLKB", 264192, "Стиль общения (11)"},
	{1, 26, "GANGS", "PRTIAL_GNGTLKG", 264192, "Стиль общения (12)"},
	{1, 27, "KISSING", "GF_STREETARGUE_01", 264192, "Спорить"},
	{1, 28, "PED", "ENDCHAT_01", 264192, "Прервать разговор"},
	{1, 29, "PED", "ENDCHAT_03", 264192, "Попрощаться"},
	{2, 30, "KISSING", "GIFT_GIVE", 264192, "Сделать подарок"},
	{2, 31, "GANGS", "SHAKE_CARSH", 264192, "Толкнуть плечами"},
	{2, 32, "PED", "IDLE_TAXI", 17041408, "Автостопить"},
	{2, 33, "CAR", "FLAG_DROP", 264192, "Дать старт"},
	{2, 34, "INT_HOUSE", "WASH_UP", 264192, "Работать руками"},
	{2, 35, "GANGS", "SMKCIG_PRTL", 151259136, "Курить"},
	{2, 36, "DEALER", "SHOP_PAY", 264192, "Передать деньги"},
	{2, 37, "SHOP", "ROB_LOOP_THREAT", 151259136, "Угрожать оружием"},
	{2, 38, "SHOP", "SHP_ROB_HANDSUP", 151259136, "Поднять руки вверх"},
	{2, 39, "DEALER", "DEALER_DEAL", 264192, "Провести сделку"},
	{2, 40, "CASINO", "CARDS_LOOP", 151259136, "Осмотреть на столе"},
	{2, 41, "CLOTHES", "CLO_POSE_LOOP", 151259136, "Осмотреться"},
	{2, 42, "DEALER", "DEALER_IDLE", 17041408, "Осмотреться украдкой"},
	{2, 43, "PED", "ROADCROSS", 264192, "Осмотреться по сторонам"},
	{2, 44, "DEALER", "DEALER_IDLE_01", 17041408, "Осмотреться и дать сигнал"},
	{2, 45, "PAULNMAC", "PISS_OUT", 264192, "Прогресс мочииспускания"},
	{2, 46, "PAULNMAC", "PISS_IN", 264192, "Показать непристойное"},
	{2, 47, "MISC", "SCRATCHBALLS_01", 264192, "Почесаться"},
	{2, 48, "LOWRIDER", "PRTIAL_GNGTLKE", 264192, "Наехать"},
	{2, 49, "GANGS", "SHAKE_CARK", 264192, "Пнуть ногой (1)"},
	{2, 50, "POLICE", "DOOR_KICK", 264192, "Пнуть ногой (2)"},
	{2, 51, "PLAYIDLES", "STRETCH", 264192, "Размяться"},
	{2, 52, "BENCHPRESS", "GYM_BP_CELEBRATE", 264192, "Похвастаться банками"},
	{2, 53, "BOMBER", "BOM_PLANT", 264192, "Положить предмет (1)"},
	{2, 54, "CARRY", "PUTDWN", 264192, "Положить предмет (2)"},
	{2, 55, "CARRY", "LIFTUP", 264192, "Поднять предмет"},
	{2, 56, "CASINO", "CARDS_RAISE", 264192, "Положить на стол"},
	{2, 57, "CASINO", "CARDS_WIN", 264192, "Забрать со стола"},
	{2, 58, "BAR", "BARSERVE_BOTTLE", 264192, "Достать из под стола"},
	{2, 59, "BSKTBALL", "BBALL_JUMP_SHOT", 264192, "Подкинуть"},
	{2, 60, "COP_AMBIENT", "COPBROWSE_NOD", 264192, "Осмотреть сидя (1)"},
	{2, 61, "COP_AMBIENT", "COPBROWSE_SHAKE", 264192, "Осмотреть сидя (2)"},
	{3, 62, "PED", "FUCKU", 264192, "Показать средний палец"},
	{3, 63, "GHANDS", "GSIGN2LH", 264192, "Показать распальцовку (1)"},
	{3, 64, "GHANDS", "GSIGN3", 264192, "Показать распальцовку (2)"},
	{3, 65, "GHANDS", "GSIGN5", 264192, "Показать распальцовку (3)"},
	{3, 66, "GHANDS", "GSIGN3LH", 264192, "Показать распальцовку (4)"},
	{3, 67, "GHANDS", "GSIGN1", 264192, "Показать распальцовку (5)"},
	{3, 68, "GHANDS", "GSIGN4LH", 264192, "Показать распальцовку (6)"},
	{3, 69, "GHANDS", "GSIGN1LH", 264192, "Показать распальцовку (7)"},
	{3, 70, "GHANDS", "GSIGN2", 264192, "Показать распальцовку (8)"},
    {3, 71, "GHANDS", "GSIGN5LH", 264192, "Показать распальцовку (9)"},
	{3, 72, "GHANDS", "GSIGN4", 264192, "Показать распальцовку (10)"},
	{4, 73, "COP_AMBIENT", "COPLOOK_LOOP", 17041408, "Руки на животе"},
	{4, 74, "COP_AMBIENT", "COPLOOK_SHAKE", 17041408, "Руки на талии"},
	{4, 75, "PLAYIDLES", "TIME", 17041408, "Руки на груди"},
	{4, 76, "GANGS", "LEANIDLE", 17041408, "Облокатится спиной"},
	{4, 77, "MISC", "PLYRLEAN_LOOP", 17041408, "Облокатится боком"},
	{4, 78, "COP_AMBIENT", "COPLOOK_THINK", 17041408, "Задумчивая"},
	{4, 79, "CAMERA", "CAMSTND_IDLELOOP", 17041408, "Предмет в руках"},
	{4, 80, "BD_FIRE", "M_SMKLEAN_LOOP", 151259136, "Курить облокатившись боком"},
	{4, 81, "LOWRIDER", "M_SMKLEAN_LOOP", 151259136, "Курить облокатившись спиной"},
	{4, 82, "CRACK", "BBALBAT_IDLE_01", 17041408, "Угрожающая стойка (1)"},
	{4, 83, "CRACK", "BBALBAT_IDLE_02", 17041408, "Угрожающая стойка (2)"},
	{4, 84, "GRAVEYARD", "MRNM_LOOP", 17041408, "Скорбящая (1)"},
	{4, 85, "GRAVEYARD", "PRST_LOOPA", 17041408, "Скорбящая (2)"},
	{4, 86, "OTB", "WTCHRACE_LOOP", 17041408, "Высоко задрав голову"},
	{4, 87, "PLAYIDLES", "SHIFT", 17041408, "Сомневаться"},
	{4, 88, "BAR", "BARMAN_IDLE", 17041408, "Облокатится на стойку"},
	{4, 89, "HEIST9", "SWT_WLLPK_L", 17041408, "Выглядывать из за правого угла"},
	{4, 90, "HEIST9", "SWT_WLLPK_R", 17041408, "Выглядывать из за левого угла"},
	{5, 91, "CRIB", "PED_CONSOLE_WIN", 264192, "Радоваться (1)"},
	{5, 92, "CASINO", "MANWIND", 151259136, "Радоваться (2)"},
	{5, 93, "OTB", "WTCHRACE_CMON", 264192, "Расстроится"},
	{5, 94, "FOOD", "EAT_VOMIT_P", 264192, "Испытывать отвращение"},
	{5, 95, "FOOD", "EAT_VOMIT_SK", 264192, "Испугаться"},
	{5, 96, "ON_LOOKERS", "PANIC_POINT", 264192, "Удивиться"},
	{5, 97, "MISC", "PLYR_SHKHEAD", 264192, "Пробить фейспалм"},
	{5, 98, "ON_LOOKERS", "PANIC_HIDE", 151259136, "Паниковать"},
	{6, 99, "PED", "SEAT_IDLE", 151259136, "Сесть (1)"},
	{6, 100, "JST_BUISNESS", "GIRL_02", 151259136, "Сесть (2)"},
	{6, 101, "INT_HOUSE", "LOU_LOOP", 151259136, "Сесть (3)"},
	{6, 102, "ATTRACTORS", "STEPSIT_LOOP", 151259136, "Сесть (4)"},
	{6, 103, "CAMERA", "CAMCRCH_IDLELOOP", 151259136, "Сесть (5)"},
	{6, 104, "PED", "SEAT_down", 17041408, "Сесть (6)"},
	{6, 105, "BEACH", "PARKSIT_M_LOOP", 151259136, "Сесть (7)"},
	{6, 106, "INT_OFFICE", "OFF_SIT_BORED_LOOP", 151259136, "Сесть (8)"},
	{6, 107, "BEACH", "LAY_BAC_LOOP", 151259136, "Расслабится (1)"},
	{6, 108, "BEACH", "PARKSIT_W_LOOP", 151259136, "Расслабится (2)"},
	{6, 109, "CRACK", "CRCKIDLE1", 151259136, "Расслабится (3)"},
	{6, 110, "CRACK", "CRCKIDLE2", 151259136, "Спать (1)"},
	{6, 111, "CRACK", "CRCKIDLE4", 151259136, "Спать (2)"},
	{7, 112, "DANCING", "DANCE_LOOP", 134481920, "Танец (1)"},
	{7, 113, "DANCING", "DAN_DOWN_A", 134481920, "Танец (2)"},
	{7, 114, "DANCING", "DAN_LEFT_A", 134481920, "Танец (3)"},
	{7, 115, "DANCING", "DAN_LOOP_A", 134481920, "Танец (4)"},
	{7, 116, "DANCING", "DAN_RIGHT_A", 134481920, "Танец (5)"},
	{7, 117, "DANCING", "DAN_UP_A", 134481920, "Танец (6)"},
	{7, 118, "DANCING", "DNCE_M_A", 134481920, "Танец (7)"},
	{7, 119, "DANCING", "DNCE_M_B", 134481920, "Танец (8)"},
	{7, 120, "DANCING", "DNCE_M_C", 134481920, "Танец (9)"},
	{7, 121, "DANCING", "DNCE_M_D", 134481920, "Танец (10)"},
	{7, 122, "DANCING", "DNCE_M_E", 134481920, "Танец (11)"},
	{8, 123, "SWEET", "SWEET_INJUREDLOOP", 151259136, "Ранен"},
	{8, 124, "CRACK", "CRCKDETH2", 151259136, "Судороги"},
	{8, 125, "CRACK", "CRCKDETH1", 151259136, "Ломка"},
	{8, 126, "MEDIC", "CPR", 264192, "Оказать первую помощь"},
	{9, 127, "custom_dance", "D6", 0},
	{9, 128, "custom_dance", "D5", 0},
	{9, 129, "custom_dance", "D4", 0},
	{9, 130, "custom_dance", "D3", 0},
	{9, 131, "custom_dance", "D2", 0},
	{9, 132, "custom_dance", "D1", 0},
	{9, 133, "custom_dance", "1", 0},
	{9, 134, "custom_dance", "2", 0},
	{9, 135, "custom_dance", "3", 0},
	{9, 136, "custom_dance", "4", 0},
	{9, 137, "custom_dance", "5", 0},
	{9, 138, "custom_dance", "8", 0},
	{9, 139, "custom_dance", "13", 0},
	{9, 140, "custom_dance", "brake_dance_1", 0},
	{9, 141, "custom_dance", "brake_dance_2", 0},
	{9, 142, "custom_dance", "hip_hop_dance_1", 0},
	{9, 143, "custom_dance", "hip_hop_dance_2", 0},
	{9, 144, "custom_dance", "hip_hop_robot", 0},
	{9, 145, "custom_dance", "samba_dance_1", 0},
	{9, 146, "custom_dance", "samba_dance_2", 0},
	{9, 147, "custom_dance_2", "samba_1", 0},
	{9, 148, "custom_dance_2", "samba_2", 0},
	{9, 149, "custom_dance_2", "samba_3", 0},
	{9, 150, "custom_dance_2", "samba_4", 0},
	{9, 151, "custom_dance_2", "samba_5", 0},
	{9, 152, "custom_dance_2", "swing_1", 0},
	{9, 153, "custom_dance_2", "swing_2", 0},
	{9, 154, "custom_dance_2", "swing_3", 0},
	{9, 155, "custom_dance_2", "swing_4", 0}
};

enum bodyguard_npcdata
{
	bgnpc_NPC,
	bgnpc_SlotId,
}

enum bodyguard_playerdata
{
	bg_Id,
	bg_Owner[MAX_PLAYER_NAME],
   	bg_Name[MAX_PLAYER_NAME],
  	bg_ItemId,
	bg_Level,
	bg_Exp,
	bg_Spawn,
	bg_Timer,
	Float:bg_Health,
	Float:bg_Armour,
	bg_Died,
	bg_Satiety,
	bg_WeaponID,
	bg_WeaponRounds,
	bg_BuffID[6]
}

enum custom_npc_options
{
	data_ID,
	data_AttackedID,
	data_AttachedID,
	data_SkinID,
	bool:data_EnteredVehicle,
	data_SeatID[2], // 0 -carid | 1 - seatid
	Float:data_Float[7], // 0..2 pos | 3 - hp | 4 - arm | 5 - max hp
	data_Timer,
	data_Weapons[2], // 0 - id, 1 - rounds
	data_ColorTexts[2], 
	data_LabelOne[64],
	data_LabelTwo[64],
	bool:data_UsedSlotAttach[13]
}

new 
	Custom_npcOptions[MAX_CUSTOM_NPC][custom_npc_options],
	Bodyguard_playerData[MAX_PLAYERS][4][bodyguard_playerdata],
	Bodyguard_npcData[MAX_PLAYERS][4][bodyguard_npcdata],
	Bodyguard_phrasesData[MAX_PLAYERS][4][16][128],
	Bodyguard_animationFavorite[MAX_PLAYERS][4][sizeof(AnimInfo)],
	Bodyguard_phrasesCondition[][] = {"Когда его ударили для предупреждения говорит", "Когда его ударили нападает и говорит", "Когда вас ударили для предупреждения говорит", "Когда вас ударили нападает и говорит", "Когда вы напали на него говорит", "Когда вы призвали его, говорит", "Когда надевает бронежилет, говорит", "Когда получает оружие, говорит", "Когда получает еду, говорит", "Когда получает газировку, говорит", "Когда получает алкоголь, говорит", "Когда получает наркотики, говорит", "Когда он голоден, раз в минуту говорит", "Когда у него мало здоровья, говорит", "Когда воспроизводит анимацию, говорит", "Когда на него нет места в машине, говорит"},
	BodyGuardType_Name[][] = {"{AAAAAA}Стандартный", "{82FA58}Необычный", "{25CAFF}Редкий", "{D239CC}Уникальный", "{F6AB2F}Легендарный"},
	BodyguardRarity_Colors[] = {0xAAAAAAFF, 0x68FE40FF, 0x25CAFFFF, 0xD239CCFF, 0xF6AB2FFF},
	BodyguardRarity_Names[][] = {"Standart", "Unusual", "Rare", "Unique", "Legend"},
	BodyGuardInfo[][] = { {5792, 3, 3, 3, 1200, 3}, {5793, 3, 3, 3, 1200, 3}, {5794, 3, 3, 3, 1200, 3}, {5795, 3, 3, 3, 1200, 3}, {5993, 3, 3, 3, 1200, 3}, {5994, 3, 3, 3, 1200, 3}, {6067, 4, 10, 6, 1500, 10}, {6068, 4, 10, 6, 1500, 10}, {6069, 4, 10, 6, 1500, 10}, {6202, 2, 2, 2, 1100, 2}, {6203, 2, 2, 2, 1100, 2}, {6204, 2, 2, 2, 1100, 2}, {6205, 4, 10, 6, 1500, 10}, {6206, 4, 10, 6, 1500, 10}, {6207, 4, 10, 6, 1500, 10}, {6208, 4, 10, 6, 1500, 10}, {6209, 4, 10, 6, 1500, 10}, {6210, 4, 10, 6, 1500, 10}, {6211, 4, 10, 6, 1500, 10}, {6212, 4, 10, 6, 1500, 10}, {6213, 4, 10, 6, 1500, 10}, {6235, 1, 1, 1, 1000, 1}, {6265, 2, 2, 2, 1100, 2}, {6272, 2, 2, 2, 1100, 2}, {6360, 4, 10, 6, 1500, 10}, {6361, 4, 10, 6, 1500, 10}, {6362, 4, 10, 6, 1500, 10}, {6363, 4, 10, 6, 1500, 10}, {6364, 4, 10, 6, 1500, 10}, {6365, 4, 10, 6, 1500, 10}, {6391, 3, 3, 3, 1200, 3}, {6395, 2, 2, 2, 1100, 2}, {6447, 3, 3, 3, 1200, 3}, {6448, 4, 10, 6, 1500, 10}, {6449, 4, 10, 6, 1500, 10}, {6450, 4, 10, 6, 1500, 10}, {6505, 4, 10, 6, 1500, 10}, {6668, 4, 10, 6, 1500, 10}, {6669, 4, 10, 6, 1500, 10}, {6670, 4, 10, 6, 1500, 10}, {6671, 4, 10, 6, 1500, 10}, {6742, 3, 3, 3, 1200, 3}, {6743, 3, 3, 3, 1200, 3}, {6744, 3, 3, 3, 1200, 3}, {6745, 3, 3, 3, 1200, 3}, {6746, 3, 3, 3, 1200, 3}, {6747, 3, 3, 3, 1200, 3}, {6748, 3, 3, 3, 1200, 3}, {6749, 3, 3, 3, 1200, 3}, {6750, 3, 3, 3, 1200, 3}, {6751, 3, 3, 3, 1200, 3}, {6752, 3, 3, 3, 1200, 3}, {6753, 3, 3, 3, 1200, 3}, {6754, 3, 3, 3, 1200, 3}, {6755, 3, 3, 3, 1200, 3}, {6995, 3, 3, 3, 1200, 3}, {6996, 3, 3, 3, 1200, 3}, {6997, 3, 3, 3, 1200, 3}, {6998, 4, 10, 6, 1500, 10}, {6999, 1, 1, 1, 1000, 1}, {7021, 3, 3, 3, 1200, 3}, {7036, 5, 12, 7, 1700, 10}, {7038, 4, 10, 6, 1500, 10}, {7134, 3, 3, 3, 1200, 3}, {7135, 3, 3, 3, 1200, 3}, {7136, 3, 3, 3, 1200, 3}, {7137, 3, 3, 3, 1200, 3}, {7138, 5, 12, 7, 1700, 10}, {7278, 3, 3, 3, 1200, 3}, {7279, 4, 10, 6, 1500, 10}, {7280, 3, 3, 3, 1200, 3}, {7370, 3, 3, 3, 1200, 3}, {7428, 3, 3, 3, 1200, 3} };

enum vipdata
{
	vipmenu_Text[72],
	vipmenu_Vip
}
new VipMenu_Data[][vipdata] =
{
	{"Пополнить здоровье [100 HP] (1 раз в 5 минут)", 7},
	{"Изменить префикс в VIP чате", 7},
	{"Заправить транспорт, в котором я нахожусь", 7},
	{"Флипнуть транспорт, в котором я нахожусь", 7},
	{"Выдать себе NRG-500", 7},
	{"Телепортироваться в любую точку карты (раз в 10 минут)", 8},
	{"Получить рандомный предмет (раз в 3 часа)", 8},
	{"Заспавнить себя", 8},
	{"Очистить себе инвентарь", 8}
};

enum addhouse_options
{
	Float:data_HousePos[4],
	data_Price,
	data_HouseType,
	data_GarageType,
	Float:data_GaragePos[4]
}
new AddHouseMenu_data[addhouse_options];

enum accessoryKiosk
{
	acsKioskBussinesID,
	acsKioskAccessory[15],
	acsKioskAccessoryPrice[15],
	acsKioskAccessoryIdentificator[15],
	acsKioskAccessoryEnchant[15],
	acsKioskAccessoryColor[15],
	acsKioskAccessoryMending[15],
	acsKioskAccessoryTime[15],
	acsKioskAccessoryRentID[15]
}
new AccessoryKioskData[][accessoryKiosk];

new
	PlayerText:DriveAutoTD[MAX_PLAYERS][23] = {{PlayerText:-1, ...}, ...},
	PlayerText:DriveAutoTD_Click[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},
	PlayerText:DriveAutoTD_Veh[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},
	PlayerText:DriveAutoTD_Name[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},
	auto_drive_select[MAX_PLAYERS];
	
new 
	PlayerText:SecondHandTD[MAX_PLAYERS][10] = {{PlayerText:-1, ...}, ...},
	PlayerText:SecondHandTD_Click[MAX_PLAYERS][10] = {{PlayerText:-1, ...}, ...},
	bool:SecondHand_Open[MAX_PLAYERS char];

new 
	PlayerText:KladTD[MAX_PLAYERS][6] = {{PlayerText:-1, ...}, ...},
	PlayerText:PrizeKladTD[MAX_PLAYERS][3][5];

new
	OrgBattlesArea[2],
    OrgBattlesWinner,
	OrgBattlesCountMember[MAX_ORGS],
	Text3D:OrgBattlesLabel[2],
    PlayerText:OrgBattlesTD[MAX_PLAYERS][41],
	OrgBattlesTDOpen[MAX_PLAYERS char],
	OrgBattlesTimeKick,
	bool:CheckNeactiveOrgBattles,
	OrgBattlesTimer[3],
	OrgBattlesState,
	bool:OrgBattlesGangKicked[MAX_ORGS],
	OrgBattlesKills[MAX_ORGS],
	gangs_Id[] = {11, 12, 13, 14, 15, 25, 16, 17, 18, 19};

new
	PlayerText:familyCaptureTD[MAX_PLAYERS][17] = {{PlayerText:-1, ...}, ...},
	PlayerText:familyZoneTD[MAX_PLAYERS][156] = {{PlayerText:-1, ...}, ...},
	bool:familyCaptureTDOpen[MAX_PLAYERS char];

static bannerNamed[3][17][] = {
	{"Красный", "Чёрный", "Жёлтый", "Фиолетовый", "", "", "", "", "", "", "", "", "", "", "", "", ""},
	{"В другой раз ты обязательно победишь", "Чау персик, дозревай", "Передавай привет своим дружкам", "Стрелять научись", "Загляни на тренировку в тир", "Это было не сложно", "Не твой уровень брат", "Пора заглянуть в больничку", "У тебя нет шансов против меня", "Ты полный ноль в PvP", "Я мог тебя убить закрытыми глазами", "Ты мне не соперник", "В другой раз братишка, в другой раз", "Просто без шансов", "Тебе никогда меня не победить", "Шо ты лысый? Плаки-плаки?", "Собственная фраза"},
	{"To Be Continued...", "Надо тренироваться", "Грустная музыка", "Поражение", "Шок", "Смерть GTA V", "Ералаш", "Это Фиаско", "Серьёзно? А ты не верил", "За ваше здоровье", "Шо ты лысый", "", "", "", "", "", ""}
};

enum battlepass_options
{
	data_ID,
	data_Name[50],
	data_Description[150],
	data_ImageID,
	data_Type,
	data_Progress,
	data_GiveExp
}

enum battlepassprize_options
{
	data_ItemID,
	data_Amount
}
new battlePassQuestInfo_data[][battlepass_options] = 
{
	{0, "Комфортное жилье", "Арендуйте номер в отеле на 2-е суток", 1, 0, 2, 5},
	{1, "Азартные игры", "Сыграйте в однорукого бандита 10 раз", 1, 0, 10, 5},
	{2, "На случай важных переговоров", "Пополните счет своего телефона через банкомат на любую сумму", 1, 0, 1, 5},
	{3, "Необходимое топливо", "Используйте канистру с бензином 5 раз", 1, 0, 5, 5},
	{4, "Горная прогулка", "Купите билет на фуникулер", 1, 0, 1, 5},
	{5, "Быстрый перекус", "Купите еду в Клакин Драйв", 1, 0, 1, 5},
	{6, "В поисках выгодного предложения", "Найдите дом или бизнес 5 раз (/findihouse и /findibiz)", 1, 0, 5, 5},
	{7, "Выгодная сделка", "Сдайте любой аксессуар в ломбард", 1, 0, 1, 5},
	{8, "Необходимый ремонт", "Почините состояние личного авто в СТО", 1, 0, 1, 5},
	{9, "Горячий бизнес", "Продайте 10 хот-догов на работе продавца хот-догов", 1, 0, 10, 5},
	{10, "Рекламная кампания", "Отправьте 5 объявлений в любую радиостанцию", 1, 0, 5, 5},
	{11, "С надеждой на победу", "Поиграйте в конных ставках 5 раз", 1, 0, 5, 5},
	{12, "Удачный день", "Сделайте 5 ставок в букмекерской конторе", 1, 0, 5, 5},
	{13, "Необчная реклама", "Арендуйте билборд в любой точке штата 3 раза на любое время", 1, 0, 3, 5},
	{14, "Новый цвет", "Покрасьте личный автомобиль в любой цвет", 1, 0, 1, 5},
	{15, "Встать на ноги", "Воспользуйтесь домкратом, чтобы перевернуть авто", 1, 0, 1, 5},
	{16, "Солидный апгрейд", "Заточите любой аксессуар или одежду в мастерской одежды", 1, 0, 1, 5},
	{17, "Восстановление образа", "Проведите ремонт аксессуара или одежды в мастерской одежды", 1, 0, 1, 5},
	{18, "Удача на нашей стороне", "Успешно скрафтите любой аксессуар", 1, 0, 1, 5},
	{19, "Нашествие мертвецов", "Убейте одного зомби на мероприятии Зловещий Дворец", 1, 0, 1, 5},
	{20, "Забрать свое по праву", "Перенесите 2 ящика на мероприятии Зловещий Дворец", 1, 0, 2, 5},
	{21, "Опасный гангстер", "Купите любое оружие в АММО 5 раз", 1, 0, 5, 5},
	{22, "Проделки майнера", "Скрафтите охлаждающую жидкость", 1, 0, 1, 5},
	{23, "Необходимый компонент", "Скрафтите смазку для разгона видеокарты", 1, 0, 1, 5},
	{24, "Проверка перед покупкой", "Возьмите любой автомобиль в тест-драйве 3 раза", 1, 0, 3, 5},
	{25, "Большое путешествие", "Совершите перелет на остров Vice-City", 1, 0, 1, 5},
	{26, "Выгодный обмен", "Обменяйте 1000000$ SA на Vice-City Coins", 1, 0, 1000000, 5},
	{27, "Что-то на богатом", "Арендуйте яхту возле маяка на пляже Санта Мария", 1, 0, 1, 5},
	{28, "Новое место", "Припаркуйте личный автомобиль", 1, 0, 1, 5},
	{29, "Невидимка", "Используйте команду /mask 3 раза", 1, 0, 3, 5},
	{30, "Большая сделка", "Обменяйте вирты на 100 AZ Coins у бота на центральном рынке", 1, 0, 100, 5},
	{31, "Рисковый полет", "Купите билет на прыжок с парашютом", 1, 0, 1, 5},
	{32, "В ожидании чуда", "Откройте любой ларец 10 раз", 1, 0, 10, 5},
	{33, "Подарок для крафтера", "Откройте ларец крафтера 10 раз", 1, 0, 10, 5},
	{34, "За работу в организации", "Откройте ларец организации 10 раз", 1, 0, 10, 5},
	{35, "Заслуженная премия", "Откройте ларец с премией 10 раз", 1, 0, 10, 5},
	{36, "Приз уже в кармане", "Откройте ящик Minecraft 10 раз", 1, 0, 10, 5},
	{37, "Нужна стильная одежда", "Откройте ящик Джентльменов 10 раз", 1, 0, 10, 5},
	{38, "Ваканда навеки", "Откройте ящик Marvel 10 раз", 1, 0, 10, 5},
	{39, "Большой приз будет получен", "Используйте Rare Box Yellow 10 раз", 1, 0, 10, 5},
	{40, "Пора сорвать куш", "Используйте Rare Box Red 10 раз", 1, 0, 10, 5},
	{41, "Что-то точно выпадет", "Используйте Rare Box Blue 10 раз", 1, 0, 10, 5},
	{42, "Два колеса лучше чем четыре", "Используйте Супермото-ящик 10 раз", 1, 0, 10, 5},
	{43, "Надежда стать богатым", "Откройте ларец Олигарха 10 раз", 1, 0, 10, 5},
	{44, "Четыре колеса лучше чем два", "Используйте Супер авто-ящик 10 раз", 1, 0, 10, 5},
	{45, "С воспоминанем о прошлом", "Используйте Ностальгический ящик 10 раз", 1, 0, 10, 5},
	{46, "Для знатоков города", "Откройте ларец Водителя Автобуса 10 раз", 1, 0, 10, 5},
	{47, "Волк волку волк", "Откройте ларец Mortal Combat 10 раз", 1, 0, 10, 5},
	{48, "Понты, одни понты", "Откройте ларец Concept Car Luxury 10 раз", 1, 0, 10, 5},
	{49, "Для обгона мопедов", "Откройте ларец Super Car Box 10 раз", 1, 0, 10, 5},
	{50, "В ожидании обновки", "Откройте ларец кастомных аксессуаров 10 раз", 1, 0, 10, 5},
	{51, "Долгая дорога", "Откройте ларец дальнобойщика 10 раз", 1, 0, 10, 5},
	{52, "Доставим вовремя", "Откройте ларец развозчика продуктов 10 раз", 1, 0, 10, 5},
	{53, "Престижная награда", "Откройте ларец пилота 10 раз", 1, 0, 10, 5},
	{54, "Ищи себя на Аризоне", "Сделайте 20 любых снимков на фотоаппарат", 1, 0, 20, 5},
	{55, "Джон Уик отдыхает", "Постреляйте в тире любого АММО по мишеням", 1, 0, 1, 5},
	{56, "Большие траты", "Потратьте 1000 AZ Coins", 1, 0, 1000, 5},
	{57, "Межгородские поездки", "Сделайте 4 рейса работая машинистом электропоезда", 1, 0, 4, 5},
	{58, "Для хорошей работы двигателя", "Замените масло в личном автомобиле", 1, 0, 1, 5},
	{59, "Укрепляем здоровье", "Позанимайтесь в спортзале 10 раз", 1, 0, 10, 5},
	{60, "Ненужный хлам", "Выкиньте любой предмет из инвентаря в мусорку", 1, 0, 1, 5},
	{61, "Городской транспорт", "Сделайте 4 рейса, работая машинистом трамвая", 1, 0, 4, 5},
	{62, "Развлечения от админов", "Посетите любое мероприятие от администрации", 1, 0, 1, 5},
	{63, "Необходимый ресурс", "Соберите лён 40 раз", 1, 0, 40, 5},
	{64, "Кропотливая сборка", "Соберите хлопок 40 раз", 1, 0, 40, 5},
	{65, "Нужное лекарство", "Скрафтите антибиотик", 1, 0, 1, 5},
	{66, "Счастье из земли растет", "Соберите счастливую травку 40 раз", 1, 0, 40, 5},
	{67, "Европейская валюта", "Обменяйте 100 евро на вирты в банке", 1, 0, 100, 5},
	{68, "Хайповая монета", "Купите 50 биткоинов в любом отделении банка", 1, 0, 50, 5},
	{69, "Пора починить свою тачку", "Используйте ремкомплект", 1, 0, 1, 5},
	{70, "Ловля по воздуху", "Арендуйте вертолет на крыше риэлторского агенства", 1, 0, 1, 5},
	{71, "Пора тусовок", "Выпейте виски в баре", 1, 0, 1, 5},
	{72, "Новый номер", "Купите сим-карту", 1, 0, 1, 5},
	{73, "Это любовь", "Подарите цветы игроку", 1, 0, 1, 5},
	{74, "Большой улов", "Поймайте любую рыбу 20 раз", 1, 0, 20, 5},
	{75, "Пора перебинтоваться", "Используйте аптечку для пополнения здоровья", 1, 0, 1, 5},
	{76, "Запрещенные вещества", "Пополните здоровье с помощью наркотиков", 1, 0, 1, 5},
	{77, "Быстрое такси", "Вызовите такси через телефонную будку", 1, 0, 1, 5},
	{78, "Большие связи", "Купите телефонную книжку", 1, 0, 1, 5},
	{79, "В ожидании большого куша", "Прокрутите бронзовую рулетку 10 раз", 1, 0, 10, 5},
	{80, "Удача сегодня с нами", "Используйте сундук рулетки 2 раза", 1, 0, 2, 5},
	{81, "Миссия на каждый день", "Выполните любое ежедневное задание в REWARDS", 1, 0, 1, 5},
	{82, "Пора зеркальных номеров", "Получите новый номер на свою машину", 1, 0, 1, 5},
	{83, "Подарок для полиции", "Установите новый номер на свою машину", 1, 0, 1, 5},
	{84, "Спилберг одобряет", "Купите билет на просмотр любого фильма в кино", 1, 0, 1, 5},
	{85, "Новый образ", "Купите любой скин в магазине одежды", 1, 0, 1, 5},
	{86, "Торговец оружием", "Продайте патроны на черном рынке у Гурама", 1, 0, 1, 5},
	{87, "Черный бизнес", "Продайте наркотики на черном рынке у Гурама", 1, 0, 1, 5},
	{88, "Контрабанда", "Продайте ингредиенты на черном рынке у Гурама", 1, 0, 1, 5},
	{89, "Начало большого дела", "Купите у Гурама ключи от армейских ворот и машин", 1, 0, 1, 5},
	{90, "Большой риск", "Купите у Гурама ключи от дверей банка", 1, 0, 1, 5},
	{91, "Селебрити на сцене", "Арендуйте концертный зал", 1, 0, 1, 5},
	{92, "Семейное дело", "Заплатите Гураму за 500 ед. репутации для семьи", 1, 0, 500, 5},
	{93, "Нужна достойная награда", "Обменяйте 80 подарков у Эдварда", 1, 0, 80, 5},
	{94, "Обмен на товар", "Обменяйте гражданские талоны у Эдварда", 1, 0, 1, 5},
	{95, "Джеймс Бонд под прикрытием", "Купите у Гурама армейскую форму", 1, 0, 1, 5},
	{96, "На зачистку территории", "Купите у Гурама 100 патронов", 1, 0, 100, 5},
	{97, "Неизвестное содержимое", "Купите у Гурама секретную сумку", 1, 0, 1, 5},
	{98, "Беззаботная поездка", "Арендуйте любую машину", 1, 0, 1, 5},
	{99, "Дальняя дорога", "Проедьте на любой машине 100 км", 1, 0, 100, 5},
	{100, "Технологии будущего", "Используйте активный аксессуар", 1, 0, 1, 5},
	{101, "Как брат с братом", "Пожмите руку любому игроку 10 раз", 1, 0, 10, 5},
	{102, "Выражаем чувства", "Поцелуйте любого игрока 5 раз", 1, 0, 5, 5},
	{103, "Проделки трейдера", "Используйте команду /trade 10 раз", 1, 0, 10, 5},
	{104, "Помощь нуждающимся", "Используйте команду /pay 10 раз", 1, 0, 10, 5},
	{105, "Знаток киберспорта", "Выйграйте любую ставку в букмекерской конторе", 1, 0, 1, 5},
	{106, "Кастомное дополнение", "Купите любую деталь для тюнинга личного авто", 1, 0, 1, 5},
	{107, "Благодарность за работу", "Оставьте положительный отзыв на ответ администратора в репорт", 1, 0, 1, 5},
	{108, "Уважаемая работа", "Соберите мусор из 15 мусорных баков работая мусорщиком", 1, 0, 15, 5},
	{109, "Планы на огород", "Купите любой саженец в сельскохозяйственном магазине", 1, 0, 1, 5},
	{110, "Услуги настоящих мастеров", "Отремонтируйте личный автомобиль в автосервисе", 1, 0, 1, 5},
	{111, "Торговля по крупному", "Продайте любой предмет на центральном рынке через лавку", 1, 0, 1, 5},
	{112, "Нужен профессионал", "Почините авто с помощью механика 3 раза", 1, 0, 3, 5},
	{113, "Мобильная заправка", "Заправьте авто с помощью механика 3 раза", 1, 0, 3, 5},
	{114, "Большой ассортимент", "Купите любой аксессуар в магазине аксессуаров", 1, 0, 1, 5},
	{115, "Доктор вылечит", "Восстановите здоровье с помощью врача в больнице 3 раза", 1, 0, 1, 5},
	{116, "Водный бизнес", "Продайте 40 бочек с нефтью с водных нефтевышек", 1, 0, 40, 5},
	{117, "Дальняя поездка", "Прокатитесь в межгородском поезде", 1, 0, 1, 5},
	{118, "Жажда скорости", "Разогнаться на авто до 340 км/ч", 1, 0, 340, 5},
	{119, "Темные делишки", "Купите наркотики в наркопритоне", 1, 0, 1, 5},
	{120, "Нелегальный бизнес", "Продайте наркотики в наркопритоне", 1, 0, 1, 5},
	{121, "Крупный клиент", "Положите деньги на депозит 2 раза", 1, 0, 2, 5},
	{122, "Другу нужно погонять", "Передайте ключи от автомобиля любому игроку", 1, 0, 1, 5},
	{123, "Пустите меня на танцпол", "Потанцуйте вместе с игроком (/takedance)", 1, 0, 1, 5},
	{124, "Озеленяем планету", "Посадите дерево на ферме 10 раз", 1, 0, 10, 5},
	{125, "Пора сбора ресурсов", "Спилите дерево на ферме 10 раз", 1, 0, 10, 5},
	{126, "Напейтесь в дрова", "Потратьте в баре на алкоголь $100 000", 1, 0, 100000, 5},
	{127, "Дом на колесах", "Купите трейлер в магазине или у игрока", 1, 0, 1, 5},
	{128, "Не надо стесняться", "Потанцуйте в школе танцев", 1, 0, 1, 5},
	{129, "Клиент с деньгами", "Подайте VIP объявление 5 раз", 1, 0, 5, 5},
	{130, "Пора расслабиться", "Используйте команду /smoke", 1, 0, 1, 5},
	{131, "Будни лесника", "Соберите гриб Мухомор 5 раз", 1, 0, 5, 5},
	{132, "Пора развлечений", "Купите билет на мероприятие Собиратели", 1, 0, 1, 5},
	{133, "Наркотики - зло", "Получите 2 единицы наркозависимости", 1, 0, 2, 5},
	{134, "Сейчас станет жарко", "Разведите костер", 1, 0, 1, 5},
	{135, "Совет да любовь", "Купите обручальные кольца", 1, 0, 1, 5},
	{136, "Тройная защита", "Наденьте бронежилет 3 раза", 1, 0, 3, 5},
	{137, "Благодарная работа", "Поблагодарите администратора за работу (/thanks)", 1, 0, 1, 5},
	{138, "Братская помощь", "Передайте оружие другому игроку (/giveweapon)", 1, 0, 1, 5},
	{139, "Сегодня праздник", "Запустите фейерверк 3 раза", 1, 0, 3, 5},
	{140, "Удостоверение личности", "Покажите паспорт 5 раз", 1, 0, 5, 5},
	{141, "Профессиональный шахтер", "Добудьте 12 ед. железа на шахте", 1, 0, 12, 5},
	{143, "Необходимая защита", "Оформите страховку на авто в страховой компании", 1, 0, 1, 5},
	{144, "Жажда путешествий", "Получите визу для полетов Vice-City", 1, 0, 1, 5},
	{145, "Рассказ о себе", "Установите новое описание персонажа", 1, 0, 1, 5},
	{146, "Пусть все знают", "Поставите или обновите АФК описание", 1, 0, 1, 5},
	{147, "Черное золото", "Продайте 10 бочек с наземных нефтевышек", 1, 0, 10, 5},
	{148, "Поступок великих людей", "Пожертвуйте 5 000 000$ в благотворительном центре", 1, 0, 5000000, 5},
	{149, "Бизнес идея", "Сдайте в аренду любой личный транспорт", 1, 0, 1, 5},
	{150, "Пора ответственности", "Оплатите штраф за превышение скорости", 1, 0, 1, 5},
	{151, "Уверенный бизнесмен", "Купите контейнер на аукционе контейнеров в Сан Фиерро", 1, 0, 1, 5},
	{152, "Рекордсмен мероприятия", "Соберите 5 яиц на мероприятии Собиратели", 1, 0, 5, 5},
	{153, "Настоящий кладмен", "Выкопайте клад 3 раза", 1, 0, 3, 5},
	{154, "Топливо высшего качества", "Заправьте авто на АЗС 5 раз", 1, 0, 5, 5},
	{155, "Братишка выручит", "Снимите розыск у Гурама", 1, 0, 1, 5},
	{156, "Пора замарать руки", "Совершите 20 любых действий, работая на частной ферме", 1, 0, 20, 5},
	{157, "Суровое дело", "Разбейте 30 залежей ресурсов на шахте", 1, 0, 30, 5},
	{158, "Выгодный процент", "Пополните депозит в частном банке на Vice City", 1, 0, 1, 5},
	{159, "Уличная потасовка", "Вызовите полицию через телефон", 1, 0, 1, 5},
	{160, "Грядут перемены", "Улучшите интерьер своего дома", 1, 0, 1, 7},
	{161, "Жаренная рыбка", "Пожарьте рыбу 5 раз", 1, 0, 5, 7},
	{162, "Пора на настоящую работу", "Сделайте 20 материалов на заводе", 1, 0, 20, 7},
	{163, "Сделка по бизнесу", "Продайте Лари ресурс Камень", 1, 0, 1, 5},
	{164, "Необходимый инструмент", "Купите у Лари инструмент для добычи", 1, 0, 1, 5},
	{165, "Пополняем запасы", "Закупите продукты в дом", 1, 0, 1, 5},
	{166, "Демонстрация опыта", "Покажите свои навыки игроку", 1, 0, 1, 5},
	{167, "Преданный игрок", "Отыграйте 15 часов", 1, 0, 15, 5},
	{168, "Будни перекупа", "Продайте транспорт другому игроку", 1, 0, 1, 5},
	{169, "Гетто ящер", "Примите участие в мероприятии DM Arena", 1, 0, 1, 5},
	{170, "Стрелок", "Убейте 5 игроков на мероприятии DM Arena", 1, 0, 5, 5},
	{171, "Место для нарушителей", "Посетите психбольницу", 1, 0, 1, 5},
	{172, "Фортуна подфортит", "Прокрутите колесо фортуны в казино", 1, 0, 1, 5},
	{173, "Охота по крупному", "Убейте 5 оленей в лесу", 1, 0, 5, 5},
	{174, "Хитрый обмен", "Обменяйте 300 подарков у Эдварда", 1, 0, 300, 5},
	{175, "На развитие штата", "Пожертвуйте 5 000 000$ в реконструкцию любого здания", 1, 0, 5000000, 5},
	{176, "Равные шансы", "Выиграйте 5 раз в игру Орел и решка", 1, 0, 5, 5},
	{177, "Шуллер поблизости", "Победите в игре Покер", 1, 0, 1, 5},
	{178, "Утолить голод", "Купите пиццу в ларьке уличной еды", 1, 0, 1, 5},
	{179, "Топливо для плавания", "Заправьте лодку на водной АЗС 3 раза", 1, 0, 3, 5},
	{180, "Игра в удовольствие", "Отыграйте 4 часа без афк", 1, 0, 4, 5},
	{181, "Большая распродажа", "Купите 10 комплектов одежды в Секонд Хэнде", 1, 0, 10, 5},
	{182, "Настоящая барахолка", "Подберите 5 ящиков на мероприятии Заброшенные контейнеры", 1, 0, 5, 5},
	{183, "Хороший урожай", "Соберите 5 плодов с любого фруктового дерева", 1, 0, 5, 5},
	{184, "Дела по бизнесу", "Совершите звонок по телефону", 1, 0, 1, 5},
	{185, "Отдых по взрослому", "Посетите стрип клуб", 1, 0, 1, 5},
	{186, "Торговля процветает", "Арендуйте лавку на центральном рынке 5 раз", 1, 0, 5, 5},
	{187, "Криптоинвестор", "Купите видеокарту в магазине видеокарт", 1, 0, 1, 5},
	{188, "Пополнение автопарка", "Купите любой автомобиль на автобазаре", 1, 0, 1, 5},
	{189, "Работа для серьезных людей", "Развезите деньги в 10 банкоматов, работая инкассатором", 1, 0, 10, 5},
	{190, "Екарный бабай, жми", "Сделайте 6 рейсов на работе дальнобойщика", 1, 0, 6, 5},
	{191, "Общественный транспорт", "Соберите 250 чекпоинтов, работая водителем автобуса", 1, 0, 250, 5},
	{192, "Работа для души", "Развезите 8 человек, работая водителем такси", 1, 0, 8, 5},
	{193, "Мобильный автосервис", "Почините 8 разных игроков работая механиком", 1, 0, 8, 5},
	{194, "Необходимая дозаправка", "Заправьте 8 разных игроков работая механиком", 1, 0, 8, 5},
	{195, "Охотник на охотника", "Примите участие в мероприятии Безумная охота 3 раза", 1, 0, 3, 5},
	{196, "Живучий дабстеп", "Включите музыку на телефоне", 1, 0, 1, 5},
	{197, "Дискотека начинается", "Включите музыку в музыкальном центре на центральном рынке", 1, 0, 1, 5},
	{198, "Дискотека заканчивается", "Выключите музыку в музыкальном центре на центральном рынке", 1, 0, 1, 5},
	{199, "Тачка для семейных разборок", "Возьмите семейное авто из гаража семьи", 1, 0, 1, 5},
	{200, "Примерка нового образа", "Арендуйте любой скин в бизнесе Test Drive 3 раза", 1, 0, 3, 5},
	{201, "Планы на застройку", "Посмотрите любой объект в бизнесе Test Drive 3 раза", 1, 0, 3, 5},
	{202, "Можно договориться", "Оплатите взятку полицейскому", 1, 0, 1, 5},
	{203, "Настоящий химик", "Скрафтите любой предмет в бизнесе Эликсир мастер", 1, 0, 1, 5},
	{204, "Дополнение к стилю", "Установите любую деталь тюнинга в тюнинг центре кастомных авто в ЛВ", 1, 0, 1, 5},
	{205, "Лучший танцор", "Используйте любую кастомную анимацию танца", 1, 0, 1, 5},
	{206, "Настоящий ловец", "Примите участие в ловле дома (Купите разрешение на покупку)", 1, 0, 1, 5},
	{207, "Ловля по крупному", "Примите участие в ловле бизнеса (Купите разрешение на покупку)", 1, 0, 1, 5},
	{208, "Альтернативная рыбалка", "Используйте сети для рыбалки", 1, 0, 1, 5},
	{209, "Новый ракурс", "Измените положение аксессуара на персонаже в бизнесе Магазин аксессуаров", 1, 0, 1, 5},
	{210, "Непослушный заключенный", "Осуществите побег из тюрьмы", 1, 0, 1, 5},
	{211, "Умелец с топором", "Срубите 5 ед. дерева на лесопилке", 1, 0, 5, 5},
	{212, "Поставка за бугор", "Доставьте бочки с нефтью в город Vice City", 1, 0, 1, 7},
	{213, "Запишу как друга", "Переименуйте любой контакт в телефоне", 1, 0, 1, 5},
	{214, "Гражданская позиция", "Примите участие в митинге (возьмите табличку)", 1, 0, 1, 5},
	{215, "Новый образ для охранника", "Наденьте на охранника любой аксессуар", 1, 0, 1, 5},
	{216, "С заботой о компаньоне", "Покормите личного охранника", 1, 0, 1, 7},
	{217, "Самая новая тачка", "Купите любой автомобиль с автосалона", 1, 0, 1, 7},
	{218, "Голливудский шедевр", "Посмотрите любой фильм в кинотеатре более 10 минут", 1, 0, 10, 7},
	{219, "Уличные правила", "Протестируйте оружие в тире гетто", 1, 0, 1, 7},
	{220, "Удар халка", "Проверьте урон на грушах в ДМ зоне гетто", 1, 0, 1, 5},
	{221, "Задача для мастера", "Разберите любой аксессуар в мастерской одежды", 1, 0, 1, 5},
	{222, "Игра с боссом", "Сыграйте с основателем в баре Farmers на Vice City", 1, 0, 1, 5},
	{223, "Почти автодиллер", "Выставите 2 и более авто на продажу на автобазаре", 1, 0, 1, 5},
	{224, "Удобная услуга", "Эвакуируйте свое авто в автосервис при падении в воду", 1, 0, 1, 5},
	{225, "Опытный таксист", "Заработайте более 100 000$ на перевозке пассажиров в такси", 1, 0, 100000, 5},
	{226, "Комфортная поездка", "Выполните 3 заказа от ботов работая таксистом", 1, 0, 3, 5},
	{227, "Срочная эвакуация", "Эвакуируйте 3-х ботов по вызову, работая механником", 1, 0, 3, 5},
	{228, "Требуется топливо", "Заправьте 3-х ботов по вызову, работая механником", 1, 0, 3, 5},
	{231, "Вместе веселее", "Заработайте 100000$, работая водителем мусоровоза в паре", 1, 0, 100000, 5},
	{233, "Всегда звоните адвокату", "Обслужите 8 клиентов, работая адвокатом", 1, 0, 8, 5},
	{234, "Огонь не страшен", "Потушите 15 огней, работая пожарником", 1, 0, 15, 5},
	{235, "Опасная работа менее опасна вдвоем", "Потушите 10 огней из пожарного авто работая пожарным в паре", 1, 0, 10, 5},
	{236, "Гражданская авиация", "Совершите 12 рейсов, работая пилотом", 1, 0, 12, 5},
	{237, "Главный на ферме", "Наймите 10 рабочих, работая главным фермером", 1, 0, 10, 5},
	{238, "Главный на предприятии", "Наймите 10 рабочих, работая руководителем грузчиков", 1, 0, 10, 5},
	{239, "Главный на заводе", "Наймите 10 рабочих, работая руководителем завода", 1, 0, 10, 5},
	{240, "Качественная дорога", "Отремонтируйте 20 пикапов на участке, работая ремонтником дорог", 1, 0, 20, 5},
	{241, "Поставка с моря", "Разгрузите 12 ящиков, работая на погрузчике в Vice City", 1, 0, 12, 5},
	{242, "Благородная работа", "Спасите 10 утопающих, работая спасателем на острове Vice City", 1, 0, 10, 5},
	{243, "Утренняя почта", "Доставьте 20 посылок, работая почтальоном на острове Vice City", 1, 0, 20, 5},
	{244, "Авто для заработков", "Арендуйте авто у игрока или на стоянке аренды рабочего тс", 1, 0, 1, 10},
	{245, "Медицинская помощь", "Вызовите врача во время стадии смерти и дождитесь его", 1, 0, 1, 5},
	{246, "Контрольная закупка", "Купите товаров в магазине 24/7 на 50 000$", 1, 0, 50000, 5},
	{247, "Необычный подарок", "Активируйте любой промокод", 1, 0, 1, 5},
	{248, "Семейные дела", "Выполните 3 ежедневных семейных квеста", 1, 0, 3, 5},
	{249, "Траты на транспорт", "Заправьте личный авто суммарно на 100 000$ в АЗС", 1, 0, 100000, 5},
	{250, "Самый быстрый пилот", "Победите игрока в драг рейсинге", 1, 0, 1, 5},
	{251, "Жилье по соседству", "Пропишитесь у другого игрока в доме", 1, 0, 1, 5},
	{252, "Честный преступник", "Добровольно сдайтесь в полицейском участке, имея звезды розыска", 1, 0, 1, 5},
	{253, "Хороший приз", "Выйграйте любой автомобиль, открывая обычные рулетки", 1, 0, 1, 5},
	{254, "Городской обманщик", "Попытайте удачу у Милтона на центральном рынке 5 раз", 1, 0, 5, 7},
	{255, "Плата за стоянку", "Оплатите платную парковку более чем на 1000$", 1, 0, 1000, 7},
	{256, "Деньги нуждающимся", "Начните раздачу для малоимущих", 1, 0, 1, 7},
	{257, "Топливо будущего", "Воспользуйтесь станцией зарядки электромобилей", 1, 0, 1, 7},
	{258, "Машина как новая", "Скрутите пробег на личном автомобиле в СТО", 1, 0, 1, 7},
	{259, "Бесполезный хлам", "Выкиньте в мусорку 10 любых предметов", 1, 0, 10, 7},
	{260, "Настоящий умелец", "Продлить или купите любую лицензию в центре лицензирования", 1, 0, 1, 7},
	{261, "Зажиточный гражданин", "Оплатите налоги суммарно на 500 000$", 1, 0, 500000, 7},
	{262, "Ставка на победу", "Сделайте ставку на аукционе дома или бизнеса", 1, 0, 1, 7},
	{263, "На благо гос. структуры", "Пожертвуйте 5 000 000 на развитие любой гос фракции во время сбора", 1, 0, 5000000, 7},
	{264, "Интересная вещичка", "Купите любой предмет на распродаже в ломбарде", 1, 0, 1, 7},
	{265, "Приятный бонус", "Получите 10 любых ларцов во время работы на системных работах", 1, 0, 10, 7},
	{266, "Скоростной болид", "Установите любую деталь на авто, для увеличения его скоростных характеристик", 1, 0, 1, 7},
	{267, "Удобный транспорт", "Потратьте 500 000$ катаясь на такси", 1, 0, 500000, 7},
	{268, "Пора домой", "Купите билет в аэропорте, находясь на Vice City", 1, 0, 1, 7},
	{269, "Покупка у иностранцев", "Купите любой автомобиль в частном автосалоне Vice City", 1, 0, 1, 7},
	{270, "Большие планы", "Возьмите в аренду транспорт с паркоместа в городе Vice City", 1, 0, 1, 7},
	{271, "С видом на море", "Снимите номер в отеле Vice City на 5 дней", 1, 0, 5, 7},
	{272, "Любитель хорошего загара", "Пробудьте на острове Vice City суммарно 10 часов (можно не подряд)", 1, 0, 10, 7},
	{273, "Торговля на международном рынке", "Арендуйте лавку на центральном рынке Vice City", 1, 0, 1, 7},
	{274, "Любитель уличной еды", "Потратьте 200 000$, покупая уличную еду в ларьках", 1, 0, 200000, 7},
	{275, "Суровая победа", "Победите другого игрока на ринге в спортзале", 1, 0, 1, 7},
	{276, "Для выращивания урожая", "Привезите на частную ферму 800 литров воды", 1, 0, 800, 7},
	{277, "Вкусная еда", "Потратьте 100 000$, покупая еду в закусочных", 1, 0, 100000, 7},
	{278, "В поисках улова", "Воспользуйтесь эхолотом для рыбалки", 1, 0, 1, 7},
	{279, "Карточная забава", "Сыграйте в игру Дурак", 1, 0, 1, 7},
	{280, "Урожай высшего качества", "Посадите наркотики в наркопритоне 5 раз (Для банд)", 1, 0, 5, 7},
	{281, "Плоды нелегального бизнеса", "Соберите наркотики в наркопритоне 5 раз (Для банд)", 1, 0, 5, 7},
	{282, "Уличная культура", "Нарисуйте 3 граффити на улицах гетто (Для банд)", 1, 0, 3, 7},
	{283, "Воздушная поставка", "Соберите любой предмет с аирдропа (Для банд)", 1, 0, 1, 7},
	{284, "Кровавая битва", "Убейте 3 противников на капте (Для банд)", 1, 0, 3, 7},
	{285, "Товар где-то рядом", "Найдите 3 закладки с наркотиками на улицах гетто (Для банд)", 1, 0, 3, 7},
	{286, "Угнать за 60 секунд", "Угоните любую машину и сдайте её в продажу угнанного транспорта (Для банд)", 1, 0, 1, 7},
	{287, "С заботой о банде", "Выполните 3 ежедневных фракционных квеста (Для банд)", 1, 0, 3, 7},
	{288, "Масштабное сражение", "Принимите участие в мероприятии Битва за притон (Для банд)", 1, 0, 1, 7},
	{289, "Пора подлатать раны", "Пополните здоровье у подпольного врача в интерьере своей банды (Для банд)", 1, 0, 1, 7},
	{290, "Нелегальная помощь", "Перетащите 3 ящика от медика на склад фракции (Для банд)", 1, 0, 3, 7},
	{291, "Признанный мастер", "Сделайте 3 килла в ДМ зоне (Для банд)", 1, 0, 3, 7},
	{292, "По заслугам", "Убейте игрока с желтым или красным розыском гетто (Для банд)", 1, 0, 1, 7},
	{293, "Кровная месть", "Убейте 3-х противников из враждующей фракции (Для банд)", 1, 0, 3, 7},
	{294, "Новая пушка", "Скрафтите оружие используя редкие материалы (Для банд)", 1, 0, 1, 7},
	{295, "Мафиозный улов", "Соберите 3 ящика на корабле (Для мафий)", 1, 0, 3, 7},
	{296, "Новый арсенал", "Скрафтите любое оружие 3 раза (Для мафий)", 1, 0, 3, 7},
	{297, "Плата за охрану", "Доставьте деньги на базу мафии с любого крышуемого бизнеса (Для мафий)", 1, 0, 1, 7},
	{298, "Финансовая выгода", "Соберите деньги с аирдропа (Для мафий)", 1, 0, 1, 7},
	{299, "Стеллс миссия", "Украдите любое колчество материалов с военной базы (Для мафий)", 1, 0, 1, 7},
	{300, "Кто кого", "Победите в дуэли против другого игрока (Для мафий)", 1, 0, 1, 7},
	{301, "На благо мафии", "Выполните 3 ежедневных фракционных квеста (Для мафий)", 1, 0, 3, 7},
	{302, "Операция X", "Совершите ограбление армейской фуры с патронами (Для мафий)", 1, 0, 1, 7},
	{303, "Новые владения", "Победите в сражении за новый бизнес (Для мафий)", 1, 0, 1, 7},
	{304, "Серьезный заказ", "Совершите заказное убийство (Для мафий)", 1, 0, 1, 7},
	{305, "Задача для профи", "Примите участие в мероприятии Битва за контроль нефтевышек (Для мафий)", 1, 0, 1, 7},
	{306, "Месть за брата", "Убейте 3-х противников из враждующей фракции (Для мафий)", 1, 0, 3, 7},
	{307, "Новые клиенты", "Выдайте 3 мед-карты пациентам (Больницы)", 1, 0, 3, 7},
	{308, "Прямая обязанность", "Вылечите 10 больных пациентов в интерьере больницы", 1, 0, 10, 7},
	{309, "Задача для профи", "Проведите сеанс лечения от наркозависимости (Больницы)", 1, 0, 1, 7},
	{311, "Время идет на секунды", "Поднимите раненного игрока из стадии (Больницы)", 1, 0, 1, 7},
	{312, "Новый документ", "Выдайте медицинскую страховку пациенту (Больницы)", 1, 0, 1, 7},
	{313, "Курс лечения", "Выдайте комплект антибиотиков пациенту (Больницы)", 1, 0, 1, 7},
	{314, "Необходимые лекарства", "Доставьте медикаменты на склад больницы 3 раза (Больницы)", 1, 0, 3, 7},
	{315, "Время серьезной работы", "Выполните 3 любых фракционных квеста (Больницы)", 1, 0, 3, 7},
	{316, "Правильное лечение", "Продайте 3 рецепта на лекарства (Больницы)", 1, 0, 3, 7},
	{317, "Необходимая помощь", "Вылечите 3-х больных ботов на улицах штата (Больницы)", 1, 0, 3, 7},
	{318, "Осмотр у специалиста", "Проведите 3 медосмотра (Больницы)", 1, 0, 3, 7},
	{319, "На страже порядка", "Завершить патруль 3 разных территорий (Армии)", 1, 0, 3, 7},
	{320, "Требуются материалы", "Изготовьте на складе армии 10 ящиков с патронами (Армии)", 1, 0, 10, 7},
	{321, "Военные поставки", "Доставьте 3 фуры с патронами на склад МО (Армии)", 1, 0, 3, 7},
	{322, "Развитие фракции (Армия)", "Выполните 3 любых ежедневных фракционных квеста (Армии)", 1, 0, 3, 7},
	{323, "Водный контроль", "Выполните патруль базы на лодке (Армии)", 1, 0, 1, 7},
	{324, "Современные технологии", "Выполните патруль базы используя дрон (Армии)", 1, 0, 1, 7},
	{325, "Монотонная работа", "Отредактируйте 10 обычных объявлений (СМИ)", 1, 0, 10, 7},
	{326, "Особые клиенты", "Отредактируйте 5 VIP объявлений (СМИ)", 1, 0, 5, 7},
	{327, "Новости штата", "Проведите радиоэфир (СМИ)", 1, 0, 1, 7},
	{328, "На благо фракции", "Выполните 3 любых ежедневных фракционных квестов (СМИ)", 1, 0, 3, 7},
	{329, "Забугорные новости", "Отредактируйте 3 любых объявления в городе Vice City (СМИ)", 1, 0, 3, 7},
	{330, "Условия закона", "Объявите в розыск 3-х преступников (Полиция)", 1, 0, 3, 7},
	{331, "Фиксация нарушений", "Выпишите 5 штрафов нарушителям (Полиция)", 1, 0, 5, 7},
	{332, "Неизвестный исход", "Начните погоню за подозреваемым (Полиция)", 1, 0, 1, 7},
	{333, "Нарушитель не скроется", "Пометьте 3-х преступников (/z) чтобы они не могли выйти безнаказанными (Полиция)", 1, 0, 3, 7},
	{334, "Незаконное ношение", "Отберите наркотики у преступника (Полиция)", 1, 0, 1, 7},
	{335, "Подозрительные граждане", "Проведите обыск 5-и подозреваемым (Полиция)", 1, 0, 5, 7},
	{336, "Необходимые ограждения", "Установите 3 ограждения на улицах города (Полиция)", 1, 0, 3, 7},
	{337, "Слово закона", "Проведите арест 3-х приступников (Полиция)", 1, 0, 3, 7},
	{338, "Контроль за транспортом", "Поставьте 3 машины на штраф-стоянку (Полиция)", 1, 0, 3, 7},
	{339, "На благо порядка", "Выполните 3 любых ежедневных фракционных квестов (Полиция)", 1, 0, 3, 7},
	{340, "Пора договориться", "Запросите взятку у нарушителя (Полиция)", 1, 0, 1, 7},
	{341, "Любыми способами", "Используйте личный транспорт для ареста нарушителя (Полиция)", 1, 0, 1, 7},
	{343, "На страже порядка", "Постойте на посту 30 минут (Правительство)", 1, 0, 30, 7},
	{344, "Новые путешественники", "Выдайте 3 рабочие визы (Правительство)", 1, 0, 3, 7},
	{345, "Развите фракции", "Выполните 3 ежедневных фракционных квеста (Правительство)", 1, 0, 3, 7},
	{346, "Юридические проволочки", "Переведите автомобиль гражданина в сертификат (Правительство)", 1, 0, 1, 7},
	{347, "Новые водители", "Выдайте 5 лицензий на авто на любой срок (Лицензеры)", 1, 0, 5, 7},
	{348, "Новые мотоциклисты", "Выдайте 5 лицензий на мото транспорт на любой срок (Лицензеры)", 1, 0, 5, 7},
	{349, "Начало водной навигации", "Выдайте 5 лицензий на водный транспорт на любой срок (Лицензеры)", 1, 0, 5, 7},
	{350, "Новые стрелки", "Выдайте 5 лицензий на оружие на любой срок (Лицензеры)", 1, 0, 5, 7},
	{351, "Новые кладоискатели", "Выдайте 5 лицензий на клады на любой срок (Лицензеры)", 1, 0, 5, 7},
	{352, "Новые охотники", "Выдайте 5 лицензий на охоту на любой срок (Лицензеры)", 1, 0, 5, 7},
	{353, "Новые пилоты", "Выдайте 5 лицензий на авиатранспорт (Лицензеры)", 1, 0, 5, 7},
	{354, "Развите фракции", "Выполните 3 любых фракционных квеста (Лицензеры)", 1, 0, 3, 7},
	{355, "На страже порядка", "Постойте на посту 30 минут (Лицензеры)", 1, 0, 30, 7},
	{356, "Победа-победа вместо обеда", "Примите участие в мероприятии PUBG", 1, 0, 1, 5},
	{357, "Подземный шахтер", "Добудьте в подземной шахте 5 любых ресурсов", 1, 0, 5, 5},
	{358, "Враги не помеха добыче", "Убейте каменного человека в подземной шахте", 1, 0, 1, 5},
	{359, "Уличный сыщик", "Соберите 10 подарков на улицах штата", 1, 0, 10, 5},
	{360, "Настоящий утилизатор", "Разберите любой личный автомобиль в СТО", 1, 0, 1, 5},
	{361, "Большой куш рядом", "Купите 5 быстрых лотерейных билетов и используйте их", 1, 0, 5, 5},
	{362, "Удачный день", "Купите 5 быстрых лотерейных билетов х10 и используйте их", 1, 0, 5, 5},
	{363, "С надеждой на победу", "Купите 3 лотерейных билета", 1, 0, 3, 5},
	{364, "Американские торги", "Примите участие в аукционе конфискованного имущества (сделайте ставку)", 1, 0, 1, 5},
	{365, "Маркетинговый ход", "Арендуйте билборд с видеорекламой", 1, 0, 1, 5},
	{366, "Поездка перед покупкой", "Возьмите автомобиль на автобазаре в тест драйв", 1, 0, 1, 5},
	{367, "Городской санитар", "Эвакуируйте 5 сломанных автомобилей на свалку, работая металловозчиком", 1, 0, 5, 5},
	{368, "День везения", "Откройте ларец Fortnite 10 раз", 1, 0, 10, 5},
	{369, "Двойной приз", "Подберите на мероприятии \"Собиратели\" буст \"Удвоитель подарков\"", 1, 0, 1, 5},
	{370, "Скорость флеша", "Подберите на мероприятии \"Собиратели\" буст \"Ускоритель персонажа\"", 1, 0, 1, 5},
	{371, "Тотальная заморозка", "Используйте на мероприятии \"Собиратели\" буст \"Фриз попугаев\"", 1, 0, 1, 5},
	{372, "Мгновенная слепота", "Используйте на мероприятии \"Собиратели\" буст \"Птичья слепота\"", 1, 0, 1, 5},
	{373, "Притягивая призы", "Используйте на мероприятии \"Собиратели\" буст \"Магнитный сбор\"", 1, 0, 1, 5},
	{374, "Приятный бонус", "Соберите 3 случайных ларца во время мероприятия \"Собиратели\"", 1, 0, 3, 5},
	{375, "На страже порядка улиц", "Завершите 5 маршрутов в патрулировании (Полиция)", 1, 0, 5, 7},
	{376, "Загадочные обстоятельства", "Полностью завершите расследования 5-и убийств (Полиция)", 1, 0, 5, 7},
	{377, "Помогая пострадавшим", "Разберите 10 завалов во время большой аварии на шоссе (Полиция)", 1, 0, 10, 7},
	{378, "Обломки самолета", "Разберите 10 завалов во время крушения самолета (Полиция)", 1, 0, 10, 7},
	{379, "Покореженный металл", "Эвакуируйте 2 автомобиля во время большой аварии на шоссе (Полиция)", 1, 0, 2, 7},
	{380, "Охрана ценного груза", "Полностью завершите 2 маршрута патрулирования во время крушения самолета (Полиция)", 1, 0, 2, 7},
	{381, "Первая помощь", "Реанимируйте 5 пострадавших во время большой аварии на шоссе (Больницы)", 1, 0, 5, 7},
	{382, "На грани жизни и смерти", "Проведите операцию 3-м тяжело больным пострадавшим во время большой аварии на шоссе (Больницы)", 1, 0, 3, 7},
	{383, "Последствия катастрофы", "Реанимируйте 5 пострадавших во время крушения самолета (Больницы)", 1, 0, 5, 7},
	{384, "Спасение жизни", "Проведите операцию 5-и тяжело больным пострадавшим во время крушения самолета (Больницы)", 1, 0, 5, 7},
	{385, "Место происшествия", "Сделайте 30 фотографий с места происшествия во время большой аварии на шоссе (СМИ)", 1, 0, 30, 7},
	{385, "Большая катастрофа", "Сделайте 30 фотографий с места происшествия во время крушения самолета (СМИ)", 1, 0, 30, 7},
	{385, "Прямой репортаж", "Проведите прямой эфир и напишите в чат 20 сообщений во время большой аварии на шоссе (СМИ)", 1, 0, 20, 7},
	{385, "Новости с места происшествия", "Проведите прямой эфир и напишите в чат 20 сообщений во время крушения самолета (СМИ)", 1, 0, 20, 7},
	{385, "Воздушная съемка", "Полностью завершите 2 маршрута на съемочном вертолете во время большой аварии на шоссе (СМИ)", 1, 0, 2, 7},
	{385, "Эфир с воздуха", "Полностью завершите 2 маршрута на съемочном вертолете во время крушения самолета (СМИ)", 1, 0, 2, 7},
	{386, "Ценный товар", "Украдите и доставьте на базу своей фракции 5 ящиков во время крушения самолета (Мафии)", 1, 0, 5, 7},
	{387, "Пасхальная традиция", "Победите 3 раза в битве пасхальными яйцами", 1, 0, 3, 5}
}, battlePassPrizeInfo_data[2][100][battlepassprize_options] = 
{
	{ // free
		{1420, 2}, {7543, 1}, {7548, 1}, {3563, 1}, {2149, 5}, {1853, 3}, {7532, 1}, {3920, 3}, {731, 50}, {4777, 1}, {4124, 1}, {7535, 1}, {1853, 4}, {7616, 1}, {731, 50}, {1639, 6}, {4794, 1}, {731, 60}, {556, 1}, {7534, 1}, {1639, 6}, {4237, 1}, {1637, 4}, {0, 0},
		{1767, 3}, {1939, 5}, {7529, 1}, {3562, 1}, {1767, 5}, {7621, 1}, {731, 40}, {3565, 3}, {1769, 4}, {4794, 6}, {4777, 1}, {3565, 3}, {0, 0}, {1770, 5}, {1080, 200}, {7528, 1}, {7351, 1}, {1853, 5}, {4124, 1}, {7530, 1}, {731, 400}, {1766, 3}, {0, 0}, {552, 1}, 
		{1639, 3}, {7594, 1}, {731, 50}, {1420, 1}, {1769, 5}, {7281, 1}, {6823, 1}, {2149, 6}, {1939, 3}, {557, 10}, {4237, 1}, {7617, 1}, {731, 40}, {731, 50}, {1770, 6}, {1770, 2}, {7554, 1}, {3920, 11}, {1187, 1}, {1187, 1}, {1638, 4}, {7520, 1}, {3565, 2}, {1852, 4}, 
		{3559, 7}, {1853, 2}, {7544, 1}, {4124, 1}, {731, 50}, {3562, 1}, {4777, 1}, {7605, 1}, {731, 50}, {5323, 5}, {7662, 1}, {2149, 6}, {7614, 1}, {552, 1}, {7281, 1}, {7680, 1}, {3991, 5}, {7622, 1}, {1852, 7}, {5299, 1}, {1768, 3}, {7523, 1}, {554, 1}, {7690, 1}, 
		{5307, 1}, {5323, 6}, {731, 500}, {7592, 1}
	},

	{ // premium
		{7536, 1},  {4124, 1}, {3562, 1}, {731, 250}, {7620, 1}, {4794, 5}, {1637, 3}, {556, 9}, {7553, 1}, {7596, 1}, {731, 200}, {7524, 1}, {3563, 1}, {557, 7}, {7599, 1}, {1939, 4}, {5323, 8}, {5299, 1}, {1769, 3}, {731, 210}, {3920, 4}, {1853, 3}, {5323, 6}, {731, 300},
		{7537, 1}, {1852, 3}, {1637, 4}, {3565, 7}, {4237, 1}, {731, 300}, {1768, 4}, {1769, 4}, {3920, 6}, {731, 180}, {7615, 1}, {1853, 4}, {731, 300}, {6823, 1}, {556, 6}, {1638, 9}, {1187, 4}, {5323, 4}, {731, 300}, {1852, 8}, {7549, 1}, {3559, 10}, {1770, 6}, {557, 15}, 
		{552, 47}, {5323, 5}, {731, 300}, {7522, 1}, {1769, 4}, {731, 200}, {7595, 1}, {3562, 1}, {731, 150}, {4124, 1}, {1639, 7}, {7533, 1}, {2149, 5}, {5323, 3}, {1767, 7}, {731, 300}, {7525, 1}, {1080, 200}, {731, 140}, {7619, 1}, {3991, 7}, {5299, 1}, {731, 200}, {6823, 1},
		{7597, 1}, {731, 350}, {7613, 1}, {1637, 5}, {731, 500}, {1768, 3}, {3920, 7}, {7521, 1}, {1766, 4}, {1939, 2}, {3991, 7}, {7414, 1}, {7618, 1}, {731, 280}, {7657, 1}, {4777, 1}, {731, 200}, {7552, 1}, {6518, 1}, {7623, 1}, {4778, 1}, {731, 420}, {7689, 1}, {4125, 1}, 
		{7693, 1}, {7624, 1}, {7591, 1}, {7585, 1}
	}
}, battlepassReward[MAX_PLAYERS][2][100];

new
	PayDayXBonus,
	BikeAreaID[6],
	Float:RentBikePosition[6][3] =
	{
		{1773.3730, -1921.1472, 13.7707}, // ЖДЛС
		{1509.5292, -1744.2732, 13.5469}, // Банк LS
		{1117.1675, -1750.8904, 13.6081}, // Новый спавн
		{1183.2484, -1333.7577, 13.5804}, // Больница LS
		{1506.6895, -1282.8817, 14.5532}, // Мерия LS
		{706.0491, -492.7103, 16.3359} // RC
	},
	countryNumber[][] = {"Казахстан", "Россия", "Украина", "Беларусь", "Соединенные Штаты Америки"},
	mtext[12][2][20] = { {"January", "январь"}, {"February", "февраль"}, {"March", "март"}, {"April", "апрель"}, {"May", "май"}, {"June", "июнь"}, {"July", "июль"}, {"August", "август"}, {"September", "сентябрь"}, {"October", "октябрь"}, {"November", "ноябрь"}, {"December", "декабрь"}},
	selectgun[MAX_PLAYERS],
	centreGhettoPlayer_data[MAX_PLAYERS][2],
	bool:battlePassOpen[MAX_PLAYERS char],
	battlePassPlayer_data[MAX_PLAYERS][6],
	battlePassQuests_data[MAX_PLAYERS][sizeof(battlePassQuestInfo_data)],
	battlePassQuestsDay_data[2],
	battlePassFact_data[][] = {"В отличие от остальных Battle Royale, Fortnite постоянно меняется — игра разменяла 24-й сезон. Каждый длится примерно 10—12 недель", "ПК, смартфоны на Android, Xbox, PlayStation и Nintendo Switch — на всех этих устройствах можно сыграть в Fortnite.", "Идея о битве всех против всех на одном большом острове, где останется только один выживший, возникла у Брендана Грина после просмотра двух фильмов — «Голодные игры» и японской экранизации книги «Королевская битва»", "Оригинальная карта в PUBG названа в честь дочери Брендана Грина", "В PUBG вас могут забанить на 100 лет! В 2019 году один из читеров получил блокировку на одно столетие."},
	Text:GetGunTD[18],
	TrailerTime[MAX_PLAYERS char],
	TrailerVeh[MAX_PLAYERS],
	ObjectDepo[4],
	captp[MAX_PLAYERS],
	TrailerEnter[MAX_PLAYERS],
	PlayerText:FillUp[MAX_PLAYERS][34],
	PlayerText:DepoPoezdTD[MAX_PLAYERS][18],
	iluxatime[MAX_PLAYERS],
	Float:AVEditPos[MAX_PLAYERS][3],
	Float:DeathPos[MAX_PLAYERS][3],
	Text3D:DeathText[MAX_PLAYERS],
	DeathTimer[MAX_PLAYERS],
	DanceTimer[MAX_PLAYERS],
	CheckDanceTimer[MAX_PLAYERS],
	Float:DanceFloat[MAX_PLAYERS][4],
	DanceKey[MAX_PLAYERS][4],
	DanceCount[MAX_PLAYERS][4],
	UseDanceKey[MAX_PLAYERS],
	musorka[MAX_PLAYERS],
	OtherInventoryDataId[MAX_PLAYERS],
	trunk[MAX_PLAYERS],
	PlayerJob[MAX_PLAYERS],
	palatki[41],
	deercp[7],
	objBT[7] = 2,
	Text:IntroLogo[11],
	weaponhack = 1,
	PlayerText:DanceTD[MAX_PLAYERS][7],
	SaveServer = 1800,
	PlayerText:fstd_p[MAX_PLAYERS][7],
	PlayerText:td_damage[MAX_PLAYERS][2],
	besttime[MAX_PLAYERS],
	boombox[MAX_PLAYERS],
	bool:pSvon[MAX_PLAYERS char],
	shafta[5],
	fermalen[2],
	SetPlayerAccessoryID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},
	MPName[100] = "Чтобы попасть на Мероприятие, нужно написать /gotp в чат.",
	MPHealth,
	MPArmour,
	MPPlayerLimit = 100,
	MPPlayersLimit,
	MPTime = 60,
	MPTimeStatic = 60,
	MPWeapon,
	MPTeleport,
	bool:MPTeleportPlayer[MAX_PLAYERS char],
	Float:TeleportFloat[3],
	TeleportInfoq[2],
	Teleport,
	Text:TeleportEvent[14],
	bool:ReportON[MAX_PLAYERS char],
	ReportID[MAX_PLAYERS],
	TotalReport = 0,
	ACTIVEpanel[6] = {0,0,1,1,1,0},
	bool:ReportSend[MAX_PLAYERS char],
	bool:ReportSlot[MAX_PLAYERS char],
	Jetpackanticheat,
	bool:AcceptAdm[MAX_PLAYERS char],
	idiotad[MAX_PLAYERS],
	Adrenaline[MAX_PLAYERS],
	PlayerDMZZ[MAX_PLAYERS],
	bool:InNZone[MAX_PLAYERS char],
	questman[MAX_PLAYERS],
	RCzone[MAX_PLAYERS] = -1,
	RCzoneTimer[MAX_PLAYERS],
	VoenikTimer[MAX_PLAYERS],
	PlayerTimerItem[MAX_PLAYERS][10],
	timerferma[MAX_PLAYERS],
	bool:AcceptFam[MAX_PLAYERS char],
	Float:position_unjail[3],
	OrgMoney[MAX_ORGS],
	x2don,
	Text:Logotype[26],
	PlayerText:speedometr[MAX_PLAYERS][42] = {{PlayerText:-1, ...}, ...},
	suspect = 0,
	RadioID[MAX_PLAYERS],
	VehID[MAX_PLAYERS],
	Rainbow[MAX_PLAYERS],
	Text:noparkzone[3],
	Text:nopark[4],
	bool:Proviziya[MAX_PLAYERS char],
	IDDialog[MAX_PLAYERS],
	Text3D:PlayerOpisanie[MAX_PLAYERS] = {Text3D:-1, ...},
	RewardProgress[MAX_PLAYERS][MAX_REWARD],
	RewardDone[MAX_PLAYERS][MAX_REWARD],
	addboard[MAX_PLAYERS],
	prost,
	PlayerText:recon_p[MAX_PLAYERS][56] = {{PlayerText:-1, ...}, ...},
	healthpd[8],
	UseDrugsTime[MAX_PLAYERS],
	Float:agm[MAX_PLAYERS],
	portpick[5],
	supreme[MAX_VEHICLES],
	TwinTubroStick[MAX_VEHICLES][2],
	tuningcar[MAX_VEHICLES][14],
	
	TunInvCar[MAX_VEHICLES][2][10],
	
	MatsDel_CP = -1,
	EnableWorkShop = 1,
	addskate[MAX_PLAYERS],
	Text:kbox[2],
	Text:HungerFon[2],
	PlayerText:HungerProgres[MAX_PLAYERS] = {PlayerText:-1, ...},
	Float:CenaRaboti[MAX_PLAYERS],
	BotStep[MAX_PLAYERS],
	CanUse[MAX_PLAYERS],
	dBiz[MAX_PLAYERS],
	pMusicOn[MAX_PLAYERS],
	addchet[MAX_PLAYERS],
	GroveCar[7], BallasCar[10], CoronosCar[7], VagosCar[7], RifaCar[7], CarWolfs[12],
	Float:portalGun[MAX_PLAYERS][2][5],
	RMCars[13], YakuzaCars[10], LCNCars[19],
	ZallFunction[3]=0,
	PlayerText:pokazmenu[MAX_PLAYERS][9],
	PlayerText:notificationTD[MAX_PLAYERS][17],
	bool:ShowMap[MAX_PLAYERS],
	bool:NeedDell[MAX_PLAYERS],
	Text:Map[4], Text:PlayerDraw[MAX_PLAYERS], Text:StatsDraw[MAX_PLAYERS],
	PAYDAY_LAST_TIME = 25,
	AUTO_NALOG_LAT_TIME = 25,
	LAST_RAZDACHA_TIME = 25,
	timeaks[MAX_PLAYERS],
	buygunid[MAX_PLAYERS],
	deer[7],
	Text3D:deerlabel[7],
	Text:clothChois[10],
	StatusMoneta[MAX_PLAYERS][6],
	ZapretOrel[MAX_PLAYERS],
	OrelName[MAX_PLAYERS],
	OrelMoney[MAX_PLAYERS],
	InventSlotUse[MAX_PLAYERS][InventoryMaxSlot + 1],
	crselect[MAX_PLAYERS],
	crselect2[MAX_PLAYERS],
	SobesStatus[MAX_ORGS],
	SobesTime[MAX_ORGS][16],
	SobesTime1[MAX_ORGS],
	SobesTime2[MAX_ORGS],
	SobesMesto[MAX_ORGS][16],
	TimerShaxta[MAX_PLAYERS],
	XPayDay = 0,
	XDonate = 5,
	timeskin[MAX_PLAYERS],
	PlayerText:debug2[MAX_PLAYERS][1],
	PlayerText:pilotMessageTextdraw[MAX_PLAYERS][3],
	pilotMessageTimer[MAX_PLAYERS],
	donttake[7],
	zakrito[MAX_PLAYERS],
	AksVid[MAX_PLAYERS][8],
	selectInventoryAccesBoost[MAX_PLAYERS][2] = {{-1}, ...},
	selectInventoryAccesType[MAX_PLAYERS][2],
	selectInventoryAccesSlot[MAX_PLAYERS][2] = {{-1}, ...},
	bool:selectInventoryAccesUsed[MAX_PLAYERS][2],
	serverInterfaceSettings[1];

new numberUSA_Data[][][] =
{
	{"california", "CAL"}, {"alabama", "ALB"}, {"alaska", "ALS"}, {"arizona", "ARZ"}, {"arkansas", "ARK"}, {"colorado", "COL"}, {"connecticut", "CON"}, {"delaware", "DEL"}, {"florida", "FLO"}, {"georgia", "GEO"}, {"hawaii", "HAW"}, {"idaho", "IDA"}, {"illinois", "ILL"}, 
	{"indiana", "IND"}, {"iowa", "IOW"}, {"kansas", "KAN"}, {"louisiane", "LOU"}, {"maine", "MAI"}, {"maryland", "MRLD"}, {"massachusetts", "MAS"}, {"michigan", "MICH"}, {"minnesota", "MIN"}, {"mississippi", "MISS"}, {"missouri", "MIS"}, {"montana", "MON"}, {"nebraska", "NEB"}, 
	{"nevada", "NEV"}, {"new-hampshire", "N-HAM"}, {"new-jersey", "N-JER"}, {"new-mexico", "N-MEX"}, {"new-york", "N-YRK"}, {"north-carolina", "N-CAR"}, {"north-dakota", "N-DAK"}, {"ohio", "OHI"}, {"oklahoma", "OKL"}, {"oregon", "ORE"}, {"pennsylvania", "PENN"}, {"rhode-island", "R-ISL"}, 
	{"south-carolina", "S-CAR"}, {"south-dakota", "S-DAK"}, {"tennessee", "TENNE"}, {"texas", "TEX"}, {"utah", "UTA"}, {"vermont", "VER"}, {"virginia", "VIR"}, {"washington", "WASH"}, {"west-virginia", "W-VIR"}, {"wisconsin", "WISC"}, {"wyoming", "WYOM"}
};

new 
	OilOwner[MAX_VEHICLES][24],
	OilObjects[MAX_VEHICLES][18],
	OilObjectStatus[MAX_VEHICLES][18],
	Text3D:OilTextObj[MAX_VEHICLES][18],
	OilFocusObject[MAX_VEHICLES];

enum custominterface { customId, customType, customName[32] }
new const customPoint_name[][custominterface] = {
	{0, 0, "Классические"},
	{0, 1, "Новые (CEF)"},

	{1, 0, "Обычный"},
	{1, 1, "Клиентский №1 (Мобильный)"},
	{1, 2, "Клиентский №2 (Мобильный)"},
	{1, 3, "Клиентский CEF (Для мощных ПК)"},
	{1, 4, "Клиентский CEF (Для слабых ПК)"},
	{1, 5, "Обычный (Старый)"},

	{2, 0, "Обычный"},
	{2, 1, "Клиентский №1 (Мобильный)"},
	{2, 2, "Клиентский №2 (Мобильный)"},
	{2, 3, "PUBG"},
	{2, 4, "Vice City"},
	{2, 5, "San Andreas CEF"},
	{2, 6, "(NEW) Unity (Мобильный)"},

	{3, 0, "Обычный"},
	{3, 1, "Клиентский №1"},
	{3, 2, "Клиентский №2"},
	{3, 3, "Vice City"},

	{4, 0, "Классический"},
	{4, 1, "Новый (CEF)"},

	{5, 0, "полный"},
	{5, 1, "упрощенный"},
	{5, 2, "простой"}
};

new Text3D:Bitcoin3DText, bankbuybitcoin, banksellbitcoin, bankbitcoin;

#define BTC_Dialog_Sell(%0) SPDF(%0, 15277, DIALOG_STYLE_INPUT, !"Продать BTC", "{cccccc}В банке доступно: %d BTC\n{cccccc}У вас есть: %d BTC\n\n{ffffff}Банк покупает BTC по курсу {ffff00}1 BTC = €%d\n\n{ffffff}Укажите, сколько BTC вы хотите продать в банк?\n{cccccc}(от 1 до 1000 BTC)", !"Далее", !"Назад", bankbitcoin, GetCount(%0, 1811), banksellbitcoin)
#define BTC_Dialog_Buy(%0) SPDF(%0, 15279, DIALOG_STYLE_INPUT, !"Купить BTC", "{cccccc}В банке доступно: %d BTC\n{cccccc}У вас есть: %d BTC\n\n{ffffff}Банк продаёт BTC по курсу {ffff00}1 BTC = €%d\n\n{ffffff}Укажите, сколько BTC вы хотите купить?\n{cccccc}(от 1 до 1000 BTC)", !"Далее", !"Назад", bankbitcoin, GetCount(%0, 1811), bankbuybitcoin)

enum porinfo
{
	Float:porPos[3],
	porCreat
}
new Float:PodarokInfo[85][porinfo] =
{
	{{1866.2776,-1604.3927,13.5391},-1},
	{{1814.5684,-1787.9949,13.4401},-1},
	{{1899.3964,-1976.2174,13.4399},-1},
	{{2065.4348,-1899.6436,13.4442},-1},
	{{2197.3042,-1855.2643,13.3267},-1},
	{{2313.6838,-1795.1702,13.4699},-1},
	{{2407.0701,-1954.1401,13.4406},-1},
	{{2274.1104,-2103.2578,13.4973},-1},
	{{2177.1252,-2160.6355,13.4378},-1},
	{{1941.1720,-2140.8835,13.4478},-1},
	{{1482.3195,-2325.6230,13.4409},-1},
	{{1661.6312,-1978.0310,23.7100},-1},
	{{1512.1938,-1658.8248,13.4357},-1},
	{{1222.8649,-1697.8893,13.4395},-1},
	{{1063.3287,-1564.4937,13.4395},-1},
	{{967.8336,-1808.8470,14.0392},-1},
	{{670.1074,-1421.6511,14.6103},-1},
	{{583.8209,-1309.3801,13.7937},-1},
	{{300.5122,-1360.0142,14.0718},-1},
	{{194.8382,-1644.4232,14.0252},-1},
	{{220.7997,-1775.0699,3.8997},-1},
	{{654.8619,-1857.2825,5.2646},-1},
	{{363.6814,-2043.7883,7.6767},-1},
	{{832.4582,-2058.2939,12.7593},-1},
	{{333.6727,-1520.2332,35.7631},-1},
	{{459.7726,-1522.1858,30.2806},-1},
	{{775.7328,-1412.9839,13.4245},-1},
	{{1183.7593,-1287.9641,13.4399},-1},
	{{990.7426,-1133.5524,23.7192},-1},
	{{757.9119,-1146.1381,22.6154},-1},
	{{690.0941,-1128.2615,16.7324},-1},
	{{1025.8206,-974.4745,42.3914},-1},
	{{1439.4906,-963.5345,36.1676},-1},
	{{1483.8202,-1011.8369,26.7372},-1},
	{{1971.6509,-1177.9795,19.9193},-1},
	{{2409.0242,-1391.9742,24.1428},-1},
	{{2683.8762,-1414.5601,30.3843},-1},
	{{2586.3250,-1249.4274,46.4436},-1},
	{{2802.6338,-1899.1608,10.9829},-1},
	{{2933.0454,-1322.6327,10.6862},-1},
	{{2494.3455,-2177.5037,13.4812},-1},
	{{1974.2274,-1674.5240,15.8614},-1},
	{{822.2839,-1353.1713,13.4293},-1},
	{{65.8857,-1533.7729,5.0430},-1},
	{{452.4081,-1233.7101,49.0372},-1},
	{{1001.4413,-791.0386,100.4963},-1},
	{{1300.8093,-1240.1006,13.4411},-1},
	{{1023.7307,-1369.5272,13.4544},-1},
	{{744.0558,-880.7582,42.8126},-1},
	{{714.4377,-571.5151,16.2290},-1},
	{{261.8877,-365.6202,8.9916},-1},
	{{143.8467,-131.9939,1.4706},-1},
	{{495.1965,209.4183,12.4406},-1},
	{{1343.1210,292.7504,19.4472},-1},
	{{1554.8766,29.5960,24.0460},-1},
	{{2275.3826,31.5334,26.3556},-1},
	{{2536.9907,-17.8911,26.5074},-1},
	{{1574.1636,816.5991,8.7627},-1},
	{{1186.2969,1178.7659,8.5832},-1},
	{{1071.7129,1382.2140,10.8203},-1},
	{{1302.0533,1650.0642,19.8637},-1},
	{{1394.0889,1957.2930,10.8203},-1},
	{{1551.3290,2290.4065,10.8203},-1},
	{{1519.1072,2376.7710,10.8203},-1},
	{{1371.4966,2611.3972,10.8203},-1},
	{{1685.7153,2825.1113,10.8203},-1},
	{{2235.4685,2780.5583,10.8203},-1},
	{{2628.2214,2083.9587,10.8176},-1},
	{{2778.1863,1732.5300,11.3926},-1},
	{{2817.2224,1308.1560,10.9609},-1},
	{{2563.7805,1064.5363,10.8203},-1},
	{{2095.9702,1186.2184,10.8203},-1},
	{{1874.4264,978.4785,10.8203},-1},
	{{1816.7653,1521.9406,6.8753},-1},
	{{2034.7957,1701.6351,10.8203},-1},
	{{2160.2742,2007.1144,10.8203},-1},
	{{2078.5476,2299.5012,10.7913},-1},
	{{2019.9073,2493.1055,10.8203},-1},
	{{2273.3745,2520.7566,10.8203},-1},
	{{2419.2251,2346.9021,10.8203},-1},
	{{2616.3193,2328.4590,10.8203},-1},
	{{2615.3694,1972.9207,10.8203},-1},
	{{2558.0049,1765.8701,11.0312},-1},
	{{2419.6987,1705.2953,10.8203},-1},
	{{2122.1624,1522.2683,10.8203},-1}
};

enum kangarooVehicle
{
	kVehModel,
	kItemId,
	Float:kVehAttach[3]
}
new kangarooVehicleInfo[][kangarooVehicle] =
{
	{14132, 6452, {0.000000, 3.200000, 0.500000}},
	{14133, 6453, {0.000000, 2.400000, 0.200000}},
	{14133, 6454, {0.000000, -2.850000, 0.200000}},
	{6650, 6455, {0.000000, 2.300000, -0.350000}},
	{14138, 6512, {0.000000, 3.000000, -0.650000}},
	{14140, 6513, {0.000000, 4.050000, -1.050000}},
	{14141, 6514, {0.000000, 4.560000, -0.700000}},
	{14137, 6515, {0.000000, 6.100000, -1.000000}},
	{6835, 7488, {0.000000, 2.931000, -0.320000}},
	{6842, 7489, {0.000000, 3.000000, -0.150000}},
	{6860, 7490, {0.000000, 2.500000, -0.300000}},
	{15563, 7624, {0.000000, 6.019000, -0.920000}},
	{15555, 7625, {0.000000, 2.849000, -0.309000}},
	{14242, 7746, {0.000000, 3.789000, -0.340000}},
	{14255, 7804, {0.000000, 2.610000, -0.359000}},
	{14249, 7805, {0.000000, 1.539000, -0.100000}},
	{14247, 7806, {-0.020000, 2.239000, -0.230000}},
	{14251, 7807, {0.000000, 2.380000, -0.300000}},
	{14250, 7808, {0.000000, 3.050000, 0.020000}},
	{14253, 7809, {0.000000, 2.350000, 0.040000}}
};

enum aksmassive
{
	AksColorDefault,
	AksColorAttach,
	AksColorName[24]
};
new AksMassive[][aksmassive] =
{
	{0xFFFFFFFF, 0xFFFAFAFF, "{FFFFFF}Белый"},
	{0xCC2426FF, 0xFFCC2420, "{CC2426}Красный"},
	{0xCC7824FF, 0xFFCC7824, "{CC7824}Темно-Оранжевый"},
	{0xE6BC1EFF, 0xFFE6BC1E, "{E6BC1E}Темно-Желтый"},
	{0xD5D73CFF, 0xFFD5D73C, "{D5D73C}Желтый"},
	{0x3CD740FF, 0xFF3CD740, "{3CD740}Зеленый"},
	{0x3CD7D7FF, 0xFF3CD7D7, "{3CD7D7}Бирюзовый"},
	{0x3C3ED7FF, 0xFF3C3ED7, "{3C3ED7}Синий"},
	{0xD73C7EFF, 0xFFD73C7E, "{D73C7E}Розовый"},
	{-1, -1, "-1"}
};

// AutoService
enum auto_service
{
	bool:asStatus,
	Float:asPosX,
	Float:asPosY,
	Float:asPosZ,
	asBizId,
	asActorIds[4]
}
new AutoService[][auto_service] = {

	{true, 162.013946, 1133.869018, 15.126993, 287},
	{true, -837.513122, 1629.921752, 27.397581, 288},
	{true, 1839.339965, 812.160278, 11.070167, 289},
	{true, 2846.542724, 1402.211303, 11.414293, 290},
	{true, 2054.894531, 2625.225585, 11.282127, 291},
	{true, -1988.182739, -39.565025, 35.617027, 292},
	{true, -1985.413818, 587.135375, 35.502178, 293},
	{true, -1537.716308, 604.050231, 7.394967, 294},
	{true, -1781.044677, -603.695373, 16.831890, 295},
	{true, -9.399281, -1544.546386, 3.522433, 296},
	{true, 645.800354, -499.432769, 16.552505, 297},
	{true, 1394.937988, -1164.035156, 24.015747, 298},
	{true, 1010.027038, -1357.594238, 13.583801, 299},
	{true, 1372.723144, -1771.433837, 14.038410, 300}
};

// conts last
enum zabitCont
{
	Float:contPos[6],
	bool:contStatus,
	contObject
}
new ContInfo[15][zabitCont] =
{
	{{128.000000, -257.000000, 1.100000, 0.000000, 0.000000, -44.999992}, false},
	{{128.000000, -252.619995, 1.040000, 0.000000, 0.000000, 0.000000}, false},
	{{123.250022, -257.000000, 1.080000, 0.000000, 0.000000, 24.099998}, false},
	{{125.096572, -263.853759, 0.990022, 0.000000, 0.499998, 48.399997}, false},
	{{130.150039, -271.929962, 1.140000, 0.000000, 0.000000, 31.600002}, false},
	{{129.909973, -266.049957, 1.130000, 0.000000, 0.000000, 52.599987}, false},
	{{122.150016, -251.079940, 1.100000, 0.000000, 0.000000, 33.100009}, false},
	{{124.149971, -245.069931, 1.070000, 0.000000, 0.000000, 0.000000}, false},
	{{118.734725, -246.410781, 1.090751, 1.000000, 0.000000, -137.699996}, false},
	{{134.900436, -250.824172, 1.070000, 0.000000, 0.000000, -40.499996}, false},
	{{139.219955, -257.000000, 1.050000, 0.000000, 0.000000, -27.000001}, false},
	{{139.172790, -264.556091, 1.100000, 0.000000, 0.000000, -34.200000}, false},
	{{136.118698, -268.755554, 1.070000, 0.000000, 0.000000, -40.000000}, false},
	{{136.289947, -265.349914, 1.020000, 0.000000, 0.000000, -43.099994}, false},
	{{135.728668, -257.955993, 1.050000, 0.000000, 0.000000, -46.500003}, false}
};

new const Float:position_klad[][3] =
{
	{1227.58, -869.813, 41.5483},
	{-767.179, -634.492, 65.9385},
	{1238.46, -1640.37, 12.3171},
	{-2179.91, 1057.27, 86.8861},
	{-2468.72, 1050.01, 54.1813},
	{2420.66, 1789.21, 9.63241},
	{2813.89, 2931.56, 28.4195},
	{-1849.25, -2419.64, 42.7941},
	{1751.78, 1477.56, 9.5184},
	{1793.26, 2151.07, 10.4446},
	{-497.869, -1952.25, 35.7327},
	{-1128.93, -150.148, 12.9581},
	{2343.88, -2156.19, 12.2206},
	{633.826, -1172.81, 37.8084},
	{-2846.84, -1157.79, 11.9614},
	{1477.63, -1934.67, 22.4749},
	{1531.85, 925.756, 9.49611},
	{-1146.9, 2343.85, 96.9653},
	{1201.77, -2303.01, 13.4563},
	{-814.898, -1297.54, 78.7468},
	{1010.8, -2083.37, 11.8847},
	{-2218.75, 964.7, 78.9423},
	{-2011.55, -1077.52, 46.089},
	{-2802.02, 1194.18, 19.5709},
	{2801.42, 695.427, 8.79808},
	{-494.904, -1881.4, 6.33976},
	{-2633.57, -309.622, 6.99836},
	{2094.34, -1429.77, 22.5141},
	{1596.04, -2709.87, 12.2522},
	{-2877.0, 519.103, -0.65761},
	{2388.21, -1123.87, 29.2587},
	{2381.45, -1555.94, 22.7727},
	{2066.91, 2251.35, 8.58222},
	{2745.5, 2762.33, 9.48828},
	{-1809.82, 1406.42, 5.86155},
	{-1513.6, 1971.61, 47.1603},
	{-2499.86, -1142.27, 141.239},
	{-2504.13, 1006.41, 77.1407},
	{757.196, -1818.2, 11.7374},
	{-928.631, -2547.54, 113.71},
	{-2229.37, 138.467, 34.0155},
	{-1313.77, 2541.4, 86.5095},
	{824.38, -1699.62, 12.2481},
	{-2499.87, 2231.65, 3.68482},
	{-1111.71, -748.102, 30.7602},
	{-1398.13, 678.462, 1.78513},
	{-2665.44, 144.834, 3.15551},
	{952.452, -1695.47, 12.2532},
	{2625.18, 2744.13, 22.5901},
	{1562.12, -337.72, 13.889},
	{1693.3, 1953.77, 9.78182},
	{1990.29, 1377.12, 7.99589},
	{2468.07, 675.906, 9.54242},
	{1539.71, -985.462, 35.9553},
	{514.597, -1807.24, 5.24816},
	{-1158.2, 2215.32, 93.2691},
	{-2058.43, 779.402, 59.8757},
	{2539.67, -1590.54, 20.7093},
	{1738.66, 2288.33, 9.60005},
	{2002.44, 1668.0, 11.0618},
	{1224.62, -2131.43, 57.6836},
	{-1955.38, 764.659, 54.4665},
	{-2545.18, 936.006, 63.7139},
	{1163.99, 699.453, 9.45416},
	{2635.59, 2829.15, 22.8277},
	{2664.56, 2317.49, 9.53179},
	{-1954.73, -750.819, 34.8931},
	{-1182.04, 2199.37, 86.7124},
	{-2455.34, -139.799, 24.8976},
	{-1987.3, -1560.27, 86.2437},
	{230.846, -1391.44, 51.8677},
	{270.067, -308.069, 0.43718},
	{-412.773, -2167.82, 80.8633},
	{1586.0, -2016.62, 34.7464},
	{-2661.93, 2193.42, 51.6087},
	{-1641.1, -2305.57, 59.3222},
	{2485.35, -1071.16, 65.5284},
	{-1868.64, 100.819, 15.7728},
	{2383.02, 2012.41, 9.88537},
	{-2086.47, 2312.7, 22.7556},
	{2500.97, 2143.3, 9.68857},
	{-1337.45, 2095.89, 40.2034},
	{2815.3, -1212.59, 23.9245},
	{-2606.56, 2245.97, 4.60404},
	{-1131.43, -1759.32, 114.55},
	{1891.05, 2012.86, 6.36527},
	{-2753.8, -180.006, 5.76931},
	{-2538.33, -301.498, 26.1641},
	{-1558.18, -2725.15, 47.5206},
	{274.551, 2930.09, -0.04081},
	{-1895.22, 1264.94, 20.4278},
	{693.551, -1634.7, 2.15345},
	{-1710.74, 2110.3, 24.9909},
	{-2644.73, 205.761, 3.09554},
	{-1771.28, 1978.39, 14.4526},
	{-1740.16, 1234.39, 6.3459},
	{-1708.63, 2548.91, 102.403},
	{1279.51, 1179.57, 9.54895},
	{1018.62, 164.008, 30.7292},
	{2227.56, 2537.82, 9.8843},
	{-2499.41, 361.598, 26.4497},
	{-1507.72, -905.577, 183.845},
	{-2754.33, -416.241, 5.64813},
	{-209.757, -1576.14, 5.19303},
	{164.188, -1260.61, 71.9953},
	{-606.568, 1832.35, 5.85018},
	{2549.77, -1332.7, 32.8686},
	{1430.14, 2268.79, 10.0122},
	{285.178, -30.1081, 1.00885},
	{1179.43, -346.887, 55.1543},
	{-1441.44, 2798.72, 85.2168},
	{-2378.54, 2490.19, 7.11762},
	{1096.69, 2123.14, 9.52043},
	{1536.57, 2862.74, 9.61266},
	{2369.33, 2796.52, 9.54315},
	{-2718.2, 76.0714, 3.09266},
	{1338.95, -1792.42, 12.2595},
	{-1643.61, 1323.49, 1.71206},
	{-183.337, 1888.64, 114.395},
	{1564.12, 2862.23, 9.50327},
	{-2616.94, 187.194, 3.09781},
	{497.676, -217.144, 14.2953},
	{756.428, -1477.2, 11.4415},
	{1652.77, 1383.91, 9.52284},
	{-2452.23, 1005.49, 45.7741},
	{-525.639, -2702.27, 142.87},
	{-2513.93, 132.038, 21.0134},
	{1023.7, -1526.53, 12.7448},
	{1253.09, 365.005, 18.2851},
	{2579.77, 2082.27, 9.54141},
	{-488.254, -171.718, 76.9443},
	{1102.14, -2236.12, 48.1534},
	{856.703, -1476.42, 13.097},
	{2190.83, -2700.78, 12.2385},
	{1083.74, -2028.46, 55.3729},
	{412.494, -1812.73, 4.23272},
	{2774.85, 317.622, 2.40274},
	{-2133.4, -1413.64, 198.723},
	{-2500.29, 940.168, 61.3867},
	{2785.58, -1087.69, 29.4599},
	{153.063, -1498.31, 11.0706},
	{680.106, -1608.93, 12.7581},
	{-339.396, -296.534, 10.317},
	{872.256, -1545.17, 12.3196},
	{2177.89, 1482.8, 9.566},
	{-1591.98, -1345.45, 48.1512},
	{-2969.78, -1716.95, -0.3379},
	{-2638.24, 2327.49, 7.06923},
	{-1365.29, -1374.25, 143.094},
	{1691.2, 890.222, 9.54726},
	{1774.98, -375.948, 85.722},
	{-1416.51, -2419.95, 31.8473},
	{1386.82, -992.381, 29.4842},
	{1925.3, 2782.01, 9.51348},
	{1085.22, -1903.57, 20.5189},
	{1266.89, -1724.46, 12.7872},
	{-1657.3, 2244.11, 15.722},
	{-2183.66, -435.824, 34.7828},
	{761.799, 2078.89, 5.40633},
	{1786.79, 2077.36, 9.54741},
	{-5.05411, -2490.4, 35.933},
	{-2886.91, 957.838, 43.0216},
	{-2667.37, 1598.76, 2.01039},
	{-2228.89, -2567.32, 30.599},
	{1618.02, 2212.91, 9.55198},
	{1952.56, 2728.77, 9.58187},
	{652.963, -1891.11, 2.56912},
	{-2194.34, -2332.13, 29.3995},
	{-2515.89, -1034.21, 102.696},
	{-2665.78, -716.145, 62.3053},
	{1951.73, 1938.41, 9.97822},
	{-2586.41, 867.345, 57.2109},
	{-531.054, 1807.34, 137.521},
	{-2681.24, 1262.4, 15.7395},
	{1368.92, 1916.1, 9.59057},
	{2675.73, 1661.19, 9.73563},
	{245.312, -43.9376, 0.28448},
	{102.492, 1019.75, 12.3152},
	{2032.57, 1728.36, 9.51405},
	{679.151, -1497.66, 13.6363},
	{-2878.6, 2566.78, 261.623},
	{-1381.56, 89.1305, 1.67274},
	{-599.154, 2606.75, 64.6538},
	{1495.65, -2091.51, 27.655},
	{2626.4, 2185.34, 9.71282},
	{780.385, -1684.96, 2.86449},
	{-2070.73, 1030.85, 58.9517},
	{-2618.54, 417.879, 3.01013},
	{-2910.57, 1210.99, 0.89121},
	{2758.67, 1460.39, 9.5592},
	{-592.001, 162.934, 19.8715},
	{962.894, -1251.63, 15.72},
	{-2298.91, 1095.45, 69.9223},
	{-2796.82, 234.577, 5.93525},
	{-2172.23, 833.454, 68.4769},
	{2831.67, 2245.74, 9.73089},
	{-904.665, -113.447, 55.3798},
	{-2757.89, 90.7707, 5.70753},
	{-2321.08, 534.314, 43.4735},
	{-2547.49, 1229.62, 36.1455},
	{2647.71, 2729.59, 9.56223},
	{-801.438, 2776.11, 44.7718},
	{-2263.01, -2835.84, -0.42964},
	{-2942.91, -679.805, -0.36174},
	{-720.957, 687.53, 5.43983},
	{2235.27, 2812.27, 9.63092},
	{1830.59, -1145.55, 22.5787},
	{1407.77, 2164.23, 10.7817},
	{-521.42, 1649.1, -0.22815},
	{-1651.32, -2436.89, 97.209},
	{-220.102, 1401.69, 68.6655},
	{-2540.48, 204.961, 9.85806},
	{386.02, 79.9867, 3.67252},
	{2518.3, -1978.54, 12.1689},
	{387.734, 2613.13, 15.1859},
	{-2312.84, -2014.39, 243.125},
	{1089.67, -1183.53, 17.0725},
	{-2184.88, 2754.51, 164.46},
	{-1970.75, 993.301, 57.388},
	{-328.627, -2131.01, 29.3583},
	{1708.23, 2841.0, 9.56706},
	{2788.85, 2536.9, 9.58631},
	{-1522.81, 2707.73, 54.5414},
	{1413.37, 904.689, 9.6673},
	{2592.02, 2391.65, 15.8071},
	{-91.0179, -1419.08, 4.32593},
	{1434.82, 2517.38, 9.60862},
	{-1316.61, -1341.72, 144.622},
	{1416.73, 2209.09, 22.8743},
	{848.089, -1359.79, 12.3194},
	{-2500.56, 2274.85, 3.69014},
	{2874.95, 2522.33, 9.78442},
	{-490.455, 2381.6, 82.4634},
	{-2013.78, -1605.43, 141.858},
	{2150.42, 1599.02, 19.165},
	{-2207.17, 1138.03, 91.1997},
	{2569.68, -2187.01, 12.281},
	{-2380.35, -1698.97, 467.388},
	{-1494.14, -1164.2, 122.846},
	{-1315.13, -1500.85, 21.2534},
	{-301.169, 1914.38, 48.4876},
	{1196.45, 2858.76, 9.8235},
	{-206.244, -1018.09, 16.3022},
	{2597.81, -1886.89, 2.56757},
	{-2479.26, -33.4793, 32.3406},
	{-2613.35, -988.187, 13.4587},
	{2299.23, -375.989, 54.8201},
	{-2188.22, -2419.4, 29.3557},
	{2016.49, 903.902, 9.56787},
	{-44.4519, -2871.43, 28.2789},
	{2572.7, -634.422, 134.543},
	{1293.32, -1210.96, 12.4432},
	{-2778.02, 782.707, 58.1557},
	{675.342, -1554.81, 14.1413},
	{-2438.95, -294.56, 39.1314},
	{1486.42, 1107.67, 9.56224},
	{-1043.35, -2418.78, 60.4559},
	{-2687.66, 771.777, 42.3904},
	{578.14, 391.6, 9.51556},
	{2892.12, 814.24, 11.4223},
	{-1463.39, -2643.12, 40.6103},
	{-2516.62, 267.806, 21.4084},
	{-1664.48, 979.585, 48.0926},
	{328.489, -1758.82, 3.18533},
	{813.007, -1267.99, 12.2605},
	{2057.14, 2148.84, 9.62282},
	{2752.41, -1284.17, 55.3181},
	{784.031, -1743.94, 12.2306},
	{1236.43, -1937.9, 37.9958},
	{2395.3, -2495.22, 12.3993},
	{-897.523, 1864.84, 114.033},
	{2011.03, 2224.25, 9.56758},
	{2320.64, 1106.43, 78.2465},
	{-1656.55, 2909.02, 51.0157},
	{-2294.97, 640.211, 40.6966},
	{-2228.83, -302.824, 34.2431},
	{-1190.65, -2577.58, -0.59518},
	{-2183.52, 636.085, 48.1307},
	{-2595.03, -1542.54, 419.854},
	{-2563.24, -1975.73, 152.493},
	{866.261, -1751.56, 12.2734},
	{2655.36, 799.005, 4.05878},
	{-2492.04, -1199.63, 256.493},
	{-1784.15, 1311.98, 6.00742},
	{2745.08, -1421.14, 15.0272},
	{2192.97, 2062.92, 9.55523},
	{-2555.91, 453.033, 13.3983},
	{-1775.16, 1409.31, 5.7949},
	{2262.33, 2563.36, 9.56324},
	{-2689.38, 2168.51, 19.6369},
	{1976.57, 1577.6, 17.3819},
	{2099.67, 2009.09, 9.55288},
	{1159.72, -2347.26, 11.6215},
	{-1806.58, 529.387, 233.62},
	{2071.55, 1910.66, 16.4573},
	{135.33, -1106.27, 39.96},
	{2239.14, -1109.7, 47.4675},
	{-2561.69, -288.907, 24.6615},
	{-2702.02, -1460.06, 238.036},
	{-1245.53, -1013.54, 158.127},
	{1461.54, -1900.45, 20.9454},
	{2257.37, 2008.14, 10.0325},
	{681.997, -1659.26, 1.90153},
	{1207.68, 176.239, 19.1521},
	{-1753.78, -1316.91, 35.8199},
	{2814.87, 2189.32, 9.71356},
	{1430.56, 276.572, 18.2547},
	{1805.48, -518.254, 75.863},
	{1402.64, 717.599, 9.73261},
	{1551.01, 4.22932, 22.1058},
	{-2821.2, 1115.95, 26.6448},
	{1691.12, 1886.95, 9.72515},
	{2567.63, -1497.12, 22.5405},
	{-1314.12, 2308.72, 128.241},
	{1754.55, 1402.78, 9.52738},
	{-1724.39, 2191.47, 2.10124},
	{2453.39, 1556.12, 9.55449},
	{872.995, -1493.49, 13.0219},
	{2274.22, -55.9841, 25.2109},
	{-441.296, -1715.34, 7.56975},
	{-764.736, -162.579, 65.3842},
	{1674.74, 2031.49, 9.71002},
	{2455.52, 1288.91, 9.49416},
	{2952.47, -765.246, -0.11761},
	{356.823, -341.561, 11.7663},
	{2693.39, 201.268, 56.8885},
	{1588.55, -2232.2, 12.2527},
	{495.648, -764.522, 63.2095},
	{2057.7, 1311.47, 9.59467},
	{2071.0, 790.421, 10.0226},
	{946.512, -1639.31, 12.2728},
	{2186.24, -2583.68, 12.2275},
	{1081.07, 2101.73, 9.53764},
	{1337.6, 204.074, 18.2373},
	{2160.17, 2827.38, 9.55969},
	{810.238, 375.894, 18.0032},
	{530.585, -1372.34, 14.8098},
	{-2773.22, -344.643, 6.47785},
	{-1709.78, 1386.85, 5.73816},
	{-382.917, 16.8944, 35.2675},
	{2802.02, -1166.13, 24.3248},
	{1596.08, 20.7384, 22.8978},
	{-2560.18, 1213.64, 39.9242},
	{2781.99, -353.694, 22.9996},
	{2417.29, -1320.96, 24.0396},
	{-967.065, 976.117, 15.1767},
	{-1487.97, -2573.96, 70.63},
	{-2301.49, -25.3325, 34.0979},
	{-2186.15, -2244.4, 29.417},
	{777.493, -1607.22, 12.0571},
	{-1188.25, -1693.95, 86.9245},
	{-2437.77, 165.247, 33.8361},
	{1491.83, 906.85, 9.64334},
	{1205.17, 255.567, 18.2797},
	{1400.16, 2380.4, 9.72168},
	{1387.78, 403.508, 27.4476},
	{2078.39, 2407.4, 59.5215},
	{1375.7, 2319.26, 9.52603},
	{2918.45, 2657.3, 8.46144},
	{990.625, -1093.45, 23.0219},
	{2557.83, -1105.39, 62.6594},
	{-1730.02, 1372.03, 5.73558},
	{-2023.89, 2949.08, 54.5887},
	{-2323.78, -1931.98, 295.144},
	{1959.39, 1353.33, 7.97135},
	{-2187.08, -368.57, 34.7335},
	{2387.04, 671.142, 10.0773},
	{1304.17, 2733.03, 9.5013},
	{-1299.18, 2315.05, 130.168},
	{654.055, -821.831, 84.9696},
	{1183.4, 230.65, 18.2635},
	{-1054.83, 1166.39, 34.3413},
	{-42.5675, -523.443, 3.24694},
	{-2047.25, 973.235, 53.6661},
	{-90.8749, 1124.98, 18.4289},
	{-670.221, 917.76, 10.7905},
	{1485.83, -2260.12, 12.2745},
	{1358.77, 2090.65, 12.1047},
	{563.776, -1821.88, 4.75631},
	{-1710.34, 1031.08, 16.5863},
	{1928.36, 2455.62, 19.5101},
	{-2808.74, 2743.78, 231.812},
	{323.23, 2699.71, 18.2157},
	{1968.91, -1359.96, 19.4087},
	{-1090.73, 1795.98, 48.0248},
	{2234.88, 69.6936, 25.1554},
	{1985.85, -990.007, 29.5343},
	{934.766, -893.216, 44.2492},
	{248.456, -1163.65, 78.1473},
	{-2461.6, 2407.67, 15.2721},
	{-307.193, 1041.12, 18.4105},
	{2383.06, 359.63, 26.5851},
	{1275.99, -862.791, 41.5658},
	{1312.83, 2733.91, 9.49154},
	{1541.51, 2380.67, 9.72747},
	{2292.04, -143.843, 26.1525},
	{2814.59, 801.339, 9.65082},
	{190.842, 1183.8, 13.441},
	{2521.39, 2026.55, 9.88273},
	{-663.691, 2588.45, 104.885},
	{1751.97, 981.988, 9.36028},
	{-327.525, 1954.71, 83.336},
	{1318.23, 2793.0, 9.57935},
	{1930.85, -1391.2, 12.939},
	{1115.24, -1086.73, 24.714},
	{679.852, -1852.08, 4.46431},
	{-2398.69, -1987.08, 253.529},
	{210.533, -1765.53, 3.20976},
	{-2891.52, 2130.08, 85.6221},
	{976.48, 2054.42, 9.52119},
	{-414.568, -404.477, 14.9046},
	{2157.15, -122.576, -0.26463},
	{-2420.44, -2257.87, 15.1085},
	{2798.08, -1813.76, 8.98618},
	{360.171, -1902.08, -0.37878},
	{267.829, -132.509, 0.26052},
	{-1403.04, -2032.22, -0.31767},
	{1477.98, 964.795, 9.53574},
	{-2038.63, -738.013, 30.8704},
	{-886.809, 2678.24, 45.1127},
	{2199.92, -1352.82, 24.3342},
	{-651.233, -579.164, 30.9218},
	{939.048, -1059.9, 23.3141},
	{-751.613, 1117.97, 43.0283},
	{587.871, -1807.01, 4.74394},
	{1092.76, -1879.54, 12.2281},
	{2564.05, 759.193, 9.7606},
	{1259.15, 2843.07, 9.52887},
	{1684.18, -2006.93, 12.8312},
	{2431.75, 2115.34, 19.2901},
	{2328.94, 1986.74, 10.3437},
	{487.414, -1451.03, 17.0489},
	{2663.22, -1197.11, 65.8992},
	{1674.23, 2222.53, 9.50916},
	{-1128.38, -1693.4, 75.294},
	{-2469.68, -166.78, 24.669},
	{-2228.36, -109.469, 34.0275},
	{2075.14, 271.223, 23.8349},
	{1983.12, -1854.17, 2.73275},
	{1915.65, 2881.02, 9.51225},
	{-1663.25, -1230.54, 58.0099},
	{-2460.24, -1356.33, 309.205},
	{1060.75, 1393.84, 4.53817},
	{-2556.23, -15.1801, 11.3539},
	{2539.27, -1698.12, 12.075},
	{-2645.16, 2871.59, 65.6842},
	{1162.14, 1988.33, 9.49271},
	{1228.08, -1776.46, 32.3516},
	{1336.82, 1155.55, 9.51998},
	{-1724.55, -2437.04, 36.9332},
	{2676.29, -50.8664, 44.2015},
	{2909.27, -1873.92, -0.29364},
	{1844.41, -1119.36, 40.3441},
	{-2532.38, 39.127, 7.29541},
	{-1921.58, 881.702, 33.9964},
	{1116.07, -2263.44, 40.3023},
	{1423.88, 212.995, 18.2428},
	{1656.66, -1749.37, 12.8779},
	{-2298.7, 999.991, 69.8979},
	{-1910.14, -1508.37, 22.0717},
	{1075.65, -268.696, 73.0526},
	{2001.77, 981.195, 9.49149},
	{-707.704, -2365.16, 43.1924},
	{-1677.71, -2479.24, 33.7437},
	{2783.83, -1691.7, 9.02327},
	{1193.54, 2771.35, 9.53275},
	{1148.2, -998.075, 35.7624},
	{774.827, -1712.03, 3.73987},
	{2560.08, -1585.3, 3.51784},
	{345.548, -257.735, 5.64659},
	{2046.09, 2360.66, 9.91943},
	{2835.03, 64.1614, 19.1986},
	{1081.79, 2096.63, 9.53764},
	{-2632.85, -2333.07, 9.89617},
	{848.019, -1700.55, 12.2411},
	{2571.21, -239.003, 32.9734},
	{-2329.6, 1016.72, 49.6176},
	{-1673.36, 2768.12, 100.582},
	{2476.47, 1291.14, 9.5285},
	{1659.03, -1842.59, 12.251},
	{244.522, -163.773, 0.29786},
	{-2174.11, -1658.21, 305.932},
	{-2952.87, 1184.24, 7.1106},
	{2650.9, 2385.19, 9.48596},
	{774.95, -1442.69, 12.3405},
	{1445.28, 1902.75, 9.52814},
	{2346.7, 1543.7, 9.53037},
	{2819.79, 814.28, 9.61447},
	{1273.97, 393.12, 18.3014},
	{2270.22, 64.9376, 25.1826},
	{-2338.41, -283.484, 47.0864},
	{-1751.92, 2548.4, 102.855},
	{2192.16, -2429.31, 12.223},
	{767.36, -1644.08, 3.45491},
	{-2616.54, 2242.2, 3.70487},
	{485.153, -899.984, 34.9774},
	{2671.81, 2756.91, 9.52143},
	{-2797.68, -416.576, 6.10838},
	{2739.27, -287.731, 16.0447},
	{-771.038, -2195.52, 17.4943},
	{950.522, -1422.44, 12.5319},
	{1421.73, -1357.24, 12.2703},
	{-12.7624, 1136.46, 18.4533},
	{1206.73, 940.209, 7.50469},
	{-1931.43, 2629.67, 81.1541},
	{-502.785, 77.8687, 35.1988},
	{-659.424, 2311.1, 136.563},
	{2489.94, -940.99, 80.9025},
	{-2743.03, 132.018, 3.21984},
	{1398.14, -282.395, -0.29889},
	{-367.33, 1203.56, 18.4575},
	{147.012, -6.01037, 0.29283},
	{-2364.57, -352.732, 66.4963},
	{-101.196, 248.966, -0.24343},
	{2420.74, -1351.52, 22.9439},
	{562.003, -185.695, 33.7549},
	{-1176.44, -2349.55, 18.3845},
	{2042.85, -543.697, 78.5251},
	{698.345, -1661.06, 2.05229},
	{247.864, 2921.0, -0.37704},
	{1246.86, 245.006, 18.2366},
	{2847.58, 1634.17, 9.54284},
	{-585.885, -1036.59, 22.0979},
	{-1728.18, -1400.24, 67.6173},
	{1575.52, -1884.13, 12.2572},
	{2609.37, 84.7517, 25.6915},
	{2324.16, 2007.15, 10.2133},
	{-435.578, -61.9906, 57.5874},
	{1277.21, 2174.67, 11.7612},
	{-1609.25, 1343.08, 0.76613},
	{-2066.62, 1112.42, 50.842},
	{2324.93, 59.2058, 25.1916},
	{1665.0, 1055.98, 9.88257},
	{-565.119, -1105.5, 21.7118},
	{911.128, -1863.77, 7.39513},
	{291.263, -560.842, 15.6489},
	{1276.86, 285.564, 18.2412},
	{1131.38, 2786.06, 9.54712},
	{2756.08, 308.985, 6.16004},
	{1275.2, 307.146, 18.2408},
	{-1663.52, 879.407, 134.803},
	{396.08, -1560.71, 27.8393},
	{-808.419, 2426.92, 155.751},
	{-2177.7, 1211.87, 36.941},
	{-1993.37, -438.245, 37.4423},
	{1901.96, 1592.19, 9.41784},
	{1843.65, -1067.93, 23.5056},
	{1970.86, 1803.44, 11.4251},
	{2257.83, -1443.53, 22.7705},
	{215.029, -543.926, 51.8777},
	{1357.69, 2324.39, 9.57585},
	{-395.542, -1153.27, 68.3248},
	{155.632, -1957.38, 2.43847},
	{2098.41, 108.379, 26.9871},
	{803.923, 657.042, -0.22279},
	{2412.87, 2359.31, 9.5083},
	{-1395.89, 2874.03, 97.1715},
	{2639.29, 2040.23, 9.61501},
	{-1695.54, 587.411, 23.5795},
	{1741.59, 631.637, 9.53237},
	{1153.56, 1607.62, 6.00579},
	{1356.15, 486.658, 18.9252},
	{729.588, 364.501, 20.5986},
	{-1592.13, 1726.92, -0.26405},
	{1209.31, -2011.45, 67.6764},
	{-2858.91, 2221.42, 169.963},
	{-463.148, -1905.24, 6.38751},
	{1219.68, -2271.17, 12.2378},
	{2521.01, 1805.31, 9.70218},
	{1292.42, 1579.46, 18.5598},
	{-1158.75, -97.9352, 12.8376},
	{-2753.03, -119.957, 5.74698},
	{-1755.42, 529.467, 27.1089},
	{2830.29, 2154.44, 9.69186},
	{2886.12, -128.124, -0.24916},
	{1157.28, 978.143, 9.50518},
	{-864.757, -291.034, 62.0794},
	{919.252, -1020.65, 106.278},
	{2667.92, -399.62, 52.743},
	{1656.96, 1340.19, 9.47857},
	{-1368.97, 1775.31, 32.7009},
	{-783.694, 769.067, 16.3368},
	{-2375.22, -575.759, 128.277},
	{-2109.15, 923.892, 75.9419},
	{-1475.74, -353.219, 13.5849},
	{-254.42, 1847.89, 53.3149},
	{-1730.6, 1851.57, 23.2958},
	{-1209.26, -2509.33, 4.71355},
	{568.052, -1458.67, 22.2295},
	{-2115.62, 2765.97, 174.42},
	{2126.9, -1845.71, 2.66611},
	{-1826.29, 1409.18, 5.76275},
	{703.725, -916.391, 77.2718},
	{2596.34, 715.66, 9.75202},
	{2675.28, 1790.9, 9.68439},
	{800.55, -1517.37, 12.3301},
	{985.947, -2163.48, 11.7621},
	{1315.92, -987.74, 147.403},
	{1348.78, 1923.07, 9.76063},
	{-2308.37, 2511.24, -0.29047},
	{-2819.18, 332.585, 3.24477},
	{688.207, -1718.25, 4.23736},
	{-2439.06, 538.025, 28.9335},
	{1360.41, 2078.23, 11.9421},
	{-1457.97, -1568.14, 100.484},
	{2353.2, -658.296, 126.783},
	{2401.48, -1195.69, 35.6215},
	{-8.8865, -1387.47, -0.25351},
	{1973.66, -1037.23, 23.2337},
	{1989.63, -2013.56, 12.2894},
	{-2074.57, -2246.75, 30.4276},
	{687.76, -1714.19, 1.83125},
	{1253.47, -1478.49, 12.2742},
	{1597.22, 1046.07, 16.1155},
	{-168.906, 1073.39, 18.4407},
	{2637.36, 1979.15, 9.66249},
	{1583.44, 2296.14, 13.521},
	{-2517.5, 2490.9, 18.0296},
	{2801.92, -1198.08, 24.1793},
	{859.514, -615.649, 17.0949},
	{-261.912, -2106.82, 29.9671},
	{2322.46, -75.675, 25.178},
	{1463.52, 1994.64, 9.68615},
	{2840.98, -2409.46, 10.7138},
	{2588.58, -974.561, 80.0938},
	{-405.767, 2379.68, 51.9882},
	{-1752.96, 1150.15, 55.4509},
	{2539.8, 1937.78, 9.72086},
	{1849.08, 2192.1, 9.84618},
	{1647.16, -2302.78, -2.51373},
	{-816.127, -2418.23, 77.449},
	{2874.85, -2124.98, 2.72981},
	{1603.46, 2662.89, 9.52955},
	{2537.11, 1538.11, 9.50378},
	{820.117, -1171.2, 15.6992},
	{1407.52, 2598.13, 9.76351},
	{292.848, 167.86, -0.27939},
	{-908.625, -659.087, 30.1162},
	{-1832.34, 2019.49, 9.64515},
	{-782.192, -1178.44, 63.4967},
	{-1951.86, 2377.6, 48.2061},
	{727.537, 1987.76, 3.6739},
	{601.254, 1254.35, 10.4178},
	{-672.892, 2402.77, 133.969},
	{-2797.41, 169.554, 5.88913},
	{1112.99, -1981.68, 62.7962},
	{-2441.24, 2883.54, 43.3826},
	{-627.536, -141.986, 66.741},
	{-248.946, -2200.89, 27.7212},
	{385.599, -1321.13, 13.4091},
	{2582.19, 1584.19, 9.51097},
	{-2489.99, -720.421, 137.856},
	{2719.5, -2196.85, 12.2744},
	{1848.25, 2617.95, 9.75696},
	{973.962, 1018.49, 9.55827},
	{-2402.83, -213.537, 38.6514},
	{-2110.09, 948.154, 74.9447},
	{-1900.24, -322.852, 25.7245},
	{2611.4, -1834.68, 1.29681},
	{-2270.64, 2812.82, 168.962},
	{682.766, 1982.57, 3.63796},
	{-778.257, 1088.71, 43.2678},
	{1830.85, -1112.18, 22.5945},
	{-1472.31, 924.173, 25.3404},
	{2285.43, 2557.71, 9.53461},
	{-1685.26, 1000.48, 73.4936},
	{308.129, -1569.58, 33.3171},
	{1124.91, -2054.64, 67.7252},
	{-1725.92, 1934.36, 17.8911},
	{-1789.77, -2461.42, 18.1787},
	{1631.1, -1508.58, 12.2878},
	{1442.9, -615.426, 91.6852},
	{-1567.17, 2772.0, 82.722},
	{8.98762, -1102.29, -0.22589},
	{1839.35, 2261.1, 9.49102},
	{771.229, -1083.7, 22.8354},
	{-1511.54, 2799.75, 90.8247},
	{-1667.1, 1121.37, 22.415},
	{1693.87, -1960.77, 6.92945},
	{-943.725, 1431.47, 28.7519},
	{-1776.09, 868.888, 23.5677},
	{-2342.87, -2849.77, 0.5},
	{2010.28, -40.5026, -0.30923},
	{-2619.9, -2133.96, 78.7356},
	{2527.7, -2559.67, 12.4418},
	{-2672.56, 1409.06, 22.5838},
	{-1836.02, 2486.11, 76.468},
	{2888.21, -408.044, -0.12042},
	{2616.05, -1391.28, 33.4294},
	{-35.6525, -1125.57, -0.23085},
	{387.298, -1749.23, 7.84315},
	{2183.76, 2557.11, 9.52374},
	{1311.6, 216.106, 23.7023},
	{2053.02, 2656.52, 9.49632},
	{1363.43, -2286.14, 12.2567},
	{2444.78, 2443.71, 25.3158},
	{2430.47, -2033.4, 12.2695},
	{2417.97, 2468.99, 68.1438},
	{-18.5026, 2799.58, 70.3976},
	{1877.49, -2119.93, 13.9387},
	{2358.87, 548.121, 0.49116},
	{1839.56, -2516.94, 12.2586},
	{-2241.01, 108.582, 34.0167},
	{-1038.17, 454.467, 13.2294},
	{2321.72, -3.8213, 25.2052},
	{-2058.16, 165.504, 27.5666},
	{2112.66, -1990.29, 12.4746},
	{2696.41, -2133.77, 12.2958},
	{-2740.28, -619.598, 33.1576},
	{2117.07, -1591.92, 12.2407},
	{967.555, 1800.52, 7.55447},
	{-1534.34, -2531.49, 66.1969},
	{2022.08, 1076.89, 9.70498},
	{1666.95, -1247.5, 232.081},
	{-746.473, 83.789, 20.2176},
	{1848.26, -357.53, 44.7369},
	{-332.174, -1736.75, 13.6034},
	{2764.41, -2564.87, 1.74338},
	{1722.75, -2014.63, 16.5078},
	{1758.79, -1560.64, 8.26934}
};

stock FindAnimIDForUID(animation_selectID)
{
	for(new i; i < sizeof(AnimInfo); i++) 
		if(AnimInfo[i][anim_SelectID] == animation_selectID) return i;

	return -1;
}

stock Float:floatrandom(Float:min, Float:max) return float(random(0)) / (float(cellmax) / (max - min)) + min;

enum RandomPrize_enum
{
	Float:E_CHANCE_WIN,
	E_DOSTUP
};

new const prize_klad[][3] = 
{
	{1130, 10, 100},
	{538, 1000, 5000},		
	{615, 1000000, 2000000},
	{618, 1, 1},
	{149, 1, 1},
	{155, 1, 1},
	{163, 1, 1},
	{169, 1, 1},
	{181, 1, 1},
	{189, 1, 1},
	{260, 1, 1},
	{264, 1, 1},
	{265, 1, 1},
	{538, 1000, 5000},
	{358,  1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{311, 1, 1},
	{308, 1, 1},
	{307, 1, 1},
	{306, 1, 1},
	{299, 1, 1},
	{292, 1, 1},
	{538, 1000, 5000},
	{285, 1, 1},
	{286, 1, 1},
	{278, 1, 1},
	{277, 1, 1},
	{954, 1, 1},
	{1244, 25, 50},
	{1245, 25, 50},
	{1246, 25, 50},
	{1247, 25, 50},
	{1248, 25, 50},
	{1249, 25, 50},
	{1250, 25, 50},
	{81, 1, 1},
	{52, 1, 1},
	{62, 1, 1},
	{80, 1, 1},
	{82, 1, 1},
	{83, 1, 1},
	{87, 1, 1},
	{96, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{113, 1, 1},
	{415, 1, 1},
	{1259, 1, 1},
	{1260, 1, 1},
	{1261, 1, 1},
	{1262, 1, 1},
	{1263, 1, 1},
	{1264, 1, 1},
	{1265, 1, 1},
	{1266, 1, 1},
	{1267, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1268, 1, 1},
	{1269, 1, 1},
	{1270, 1, 1},
	{1271, 1, 1},
	{1272, 1, 1},
	{1273, 1, 1},
	{1274, 1, 1},
	{1275, 1, 1},
	{1276, 1, 1},
	{1277, 1, 1},
	{1278, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1279, 1, 1},
	{1280, 1, 1},
	{1281, 1, 1},
	{1282, 1, 1},
	{1283, 1, 1},
	{1284, 1, 1},
	{1285, 1, 1},
	{1286, 1, 1},
	{1287, 1, 1},
	{1288, 1, 1},
	{1289, 1, 1},
	{1290, 1, 1},
	{1291, 1, 1},
	{1292, 1, 1},
	{1293, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1294, 1, 1},
	{1295, 1, 1},
	{1296, 1, 1},
	{1297, 1, 1},
	{1298, 1, 1},
	{1299, 1, 1},
	{1300, 1, 1},
	{1301, 1, 1},
	{1302, 1, 1},
	{1303, 1, 1},
	{1304, 1, 1},
	{1305, 1, 1},
	{1306, 1, 1},
	{1307, 1, 1},
	{1308, 1, 1},
	{1309, 1, 1},
	{1310, 1, 1},
	{1311, 1, 1},
	{1312, 1, 1},
	{1313, 1, 1},
	{1314, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1315, 1, 1},
	{1316, 1, 1},
	{1317, 1, 1},
	{1318, 1, 1},
	{1319, 1, 1},
	{1320, 1, 1},
	{1321, 1, 1},
	{1322, 1, 1},
	{1323, 1, 1},
	{1324, 1, 1},
	{1325, 1, 1},
	{1326, 1, 1},
	{1327, 1, 1},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{538, 1000, 5000},
	{1328, 1, 1},
	{1329, 1, 1},
	{1330, 1, 1},
	{1442, 1, 1}
	
};
				
new const captcha_klad[][2][] = 
{
	{"В честь какаго разработчика стоит статуя на ЖД ЛС?", "Калькор"},
	{"Максимальная сумма пожертвования в благотворительность ?", "100000000"},
	{"Ник первого Тех.Администратора проекта ?", "Big_Smoke"},
	{"Сколько нелегальных автомобилей доступно к покупке в автосалоне ?", "15"},
	{"Сколько стоит вызвать такси через телефонную будку ?", "400"},
	{"Укажите количество ячеек у фермы №5", "61"},
	{"Сколько стоит строительство подвала с вентиляцией в доме ?", "10000000"},
	{"Кто трудится над модом на протяжении двух лет?", "Илья"},
	{"Укажите дату открытия 7 сервера Mesa в формате xx.xx.xx", "06.01.18"},
	{"Укажите дату открытия 8 сервера Red-Rock в формате xx.xx.xx", "26.07.18"},
	{"Укажите дату открытия 9 сервера Yuma в формате xx.xx.xx", "06.01.19"},
	{"Укажите дату открытия 10 сервера Surprise в формате xx.xx.xx", "25.07.19"},
	{"Укажите дату открытия 12 сервера Glendale в формате xx.xx.xx", "01.04.20"},
	{"Укажите дату открытия 13 сервера Kingman в формате xx.xx.xx", "28.04.20"},
	{"Укажите дату открытия 15 сервера Payson в формате xx.xx.xx", "04.01.21"},
	{"Укажите дату открытия 16 сервера Gilbert в формате xx.xx.xx", "09.05.21"},
	{"Как зовут менеджера стоящего на аукционе контейнеров", "Магнус"},
	{"Как зовут квест персонажа стоящего у тренировочного полигона автошколы", "Маргарита"},
	{"Как зовут скупщика нелегала в гетто", "Гурам"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу адвоката", "7"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу инкассатора", "6"},
	{"Какой порядковый номер у бизнеса \"Информационный центр\"", "212"},
	{"Какой порядковый номер у бизнеса отель-пирамида", "144"},
	{"Какой порядковый номер у бизнеса \"Автобазар\"", "126"},
	{"Укажите количество ячеек у фермы №2", "42"},
	{"Укажите количество ячеек у фермы №3", "46"},
	{"Укажите количество ячеек у фермы №5", "61"},
	{"Укажите сколько семейных монет стоит предмет \"Маска робота\" в семейном магазине", "2900"},
	{"Какова гос. стоимость самой дорогой яхты", "25600000"},
	{"Сколько стоит вызвать такси через телефонную будку", "400"},
	{"Сколько всего доступно семейных территорий на сервере", "156"},
	{"Максимальный этаж в ЖК Los Santos Tower", "13"},
	{"Сколько стоит билет на мероприятие \"Собиратели\"", "30000"},
	{"Укажите количество нефтевышек доступных на сервере", "8"},
	{"Сколько стоит кирка для добычи ископаемых которую продает Лари", "5000"},
	{"В каком году была добавлена \"Лихорадка\" на проект", "2017"},
	{"Какая максимальная сумма штрафа может быть наложена на личный автомобиль", "80000"},
	{"Укажите сколько семейных монет стоит предмет \"Реактивный ранец\" в семейном магазине", "2400"},
	{"Какова гос. цена бизнеса - сельскохозяйственный магазин", "45000000"},
	{"Сколько авто стоит в пожарной части Лос Сантоса", "5"},
	{"Ник первого Спец. Администратора проекта", "Sweеt_Jonson"},
	{"Сколько стоит стоит улучшение \"Бренд\" для семьи", "80000000"},
	{"Сколько стоят обручальные кольца для проведения свадьбы", "5000"},
	{"Сколько всего нелегальных автомобилей доступно к покупке в автосалоне", "14"},
	{"Начальная ставка в контейнерах", "4000000"},
	{"Какая фамилия у разработчика Евгения", "Косовский"},
	{"Как зовут квест персонажа стоящего в Больнице ЛС", "Керри"},
	{"Сколько всего автобусов припарковано на ЖД ЛВ", "7"},
	{"Какова начальная ставка на контейнер класса премиум", "15000000"},
	{"Какова гос. цена бизнеса - нефтевышка", "60000000"},
	{"В честь какого разработчика стоит статуя на ЖД ЛС", "Калькор"},
	{"Сколько стоит лотерейный VIP-билет", "2500000"},
	{"Какое количество авто можно иметь купив PREMIUM VIP", "20"},
	{"Сколько стоит покупка прав на полеты", "200000"},
	{"Какова гос. стоимость самой дешевой фермы", "50000000"},
	{"На каком мероприятии можно в костюме попугая собирать яйца", "Собиратели"},
	{"Укажите номер справочной центрального банка", "8828"},
	{"Сколько стоит совершить прыжок с парашютом", "900"},
	{"Как назывался город, который когда то был построен, а затем снесен", "NewIsland"},
	{"Сколько всего личных ферм на сервере", "5"},
	{"Укажите количество ячеек у фермы №1", "24"},
	{"Укажите точное количество магазинов видеокарт", "3"},
	{"Какова гос. стоимость трейлера среднего класса", "3500000"},
	{"Укажите сколько дрифт монет стоит предмет \"Крылья зеленые\" в сувенирной лавке", "1300"},
	{"Укажите сколько семейных монет стоит предмет \"Рюкзак будущего\" в семейном магазине", "2800"},
	{"На какой номер нужно позвонить чтобы вызвать такси", "913"},
	{"Какова начальная ставка на контейнер класса ультра", "20000000"},
	{"Сколько стоит проход в VIP зал казино", "50000"},
	{"Максимальная сумма пожертвования в благотворительность", "100000000"},
	{"Как зовут персонажа который всегда встречает новых игроков на вокзале", "Джереми"},
	{"Какой игровой уровень нужно достигнуть чтобы создать свою семью", "20"},
	{"На какой номер нужно позвонить чтобы вызвать механика", "914"},
	{"Имя первого владельца проекта Arizona RP", "Денис"},
	{"Какой порядковый номер у бизнеса \"Аренда велосипедов\"", "215"},
	{"На какой номер нужно позвонить чтобы вызвать скорую помощь", "912"},
	{"Сколько стоит создание новой семьи", "20000000"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу водителя трамвая", "9"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу крупье", "5"},
	{"Сколько всего авто доступно у станции дорожной службы", "5"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу дальнобойщика", "5"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу ремонтника дорог", "10"},
	{"Какое количество прицепов доступно для работы дальнобойщиком на станции около Форт Карсона", "6"},
	{"Какая нужна сумма для того чтобы отреставрировать здание на улице", "1500000000"},
	{"Как зовут персонажа который проводит мгновенную лотерею на центральном рынке", "Милтон"},
	{"Укажите сколько дрифт монет стоит предмет \"Паук\" в сувенирной лавке", "600"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу механика", "3"},
	{"Укажите сколько дрифт монет стоит предмет \"Корона\" в сувенирной лавке", "1000"},
	{"Сколько семейных монет начисляется на баланс фам. территории каждый PayDay", "8"},
	{"Укажите минимальную сумму для раздачи в центре занятости", "100000"},
	{"Как зовут ту, которая постоянно готова сыграть с вами в кости", "Оливия"},
	{"Стоимость аренды лавки №8 на центральном рынке", "100000"},
	{"Как зовут персонажа который стоит под мостом рядом с базой банды Ballas", "Иван Гай"},
	{"Укажите дату открытия 6 сервера Saint Rose в формате xx.xx.xx", "27.08.17"},
	{"Укажите количество ячеек у фермы №4", "35"},
	{"Сколько человек работают над обновлениями на проекте", "1"},
	{"Какова стоимость 1 фишки в казино", "90"},
	{"Сколько стоит улучшение \"Галочка\" для семьи", "50000000"},
	{"На какое количество репутации можно обменять 1 семейный талон", "5"},
	{"Какую максимальную сумму денег можно перевозить в грузовиках мафии", "1800000"},
	{"Какова начальная ставка на контейнер обычного класса", "4000000"},
	{"Укажите дату открытия 14 сервера Winslow в формате xx.xx.xx", "04.11.20"},
	{"Какой игровой уровень требуется для того чтобы устроить на работу пилота", "6"},
	{"Укажите количество звезд у отеля Sundet Marquis Hotel", "4"},
	{"Укажите стоимость улучшения \"бар\" В личном доме", "50000"},
	{"Сколько нужно заплатить чтобы открыть шлагбаум на автобазаре", "300"},
	{"Укажите дату открытия 11 сервера Prescott в формате xx.xx.xx", "05.01.20"},
	{"Сколько подарков нужно принести Эдварду чтобы он обменял их на шкатулку", "20"},
	{"Сколько стоит 1 AZ-Coins у Абрахама", "50000"},
	{"Сколько стоит строительство подвала с вентиляцией в доме", "1000000"},
	{"Сколько стоит 1 час аренды уличного баннера", "10000"},
	{"Как называется мероприятие на котором нужно собирать яйца", "Собиратели"}
};

enum prize_infoData
{
	data_UseItemID,
	data_ID,
	data_Amount[2],
	data_Named[64],
	data_Give,
	data_Rarity
}

new PrizeInfo_Data[][prize_infoData] = 
{
	{555, 0, {10, 5000}, "Деньги", -1, 0},
	{555, 1, {1, 2}, "Талон: +1 EXP", 730, 0},
	{555, 2, {1, 4}, "Подарок", 552, 0},
	{555, 3, {50, 100}, "Материалы", 511, 0},
	{555, 4, {1, -1}, "Семейный талон", 522, 0},
	{555, 5, {1, 3}, "Наркотик: таблетка адреналина", 670, 0},
	{555, 6, {1, -1}, "Серебро", 599, 0},
	{555, 7, {1, -1}, "Золото", 600, 0},
	{555, 8, {1, -1}, "Сертификат Sentinel", 1110, 1},
	{555, 9, {1, -1}, "Сертификат Perennial", 1111, 1},
	{555, 10, {1, -1}, "Сертификат Manana", 1112, 1},
	{555, 11, {1, -1}, "Сертификат Voodoo", 1113, 1},
	{555, 12, {1, -1}, "Сертификат Bobcat", 1115, 1},
	{555, 13, {1, -1}, "Сертификат Previon", 1116, 1},

	{556, 0, {10, 7000}, "Деньги", -1, 0},
	{556, 1, {1, 4}, "Талон: +1 EXP", 730, 0},
	{556, 2, {1, 4}, "Подарок", 552, 0},
	{556, 3, {5, 10}, "Наркотики", 510, 0},
	{556, 4, {100, 250}, "Материалы", 511, 0},
	{556, 5, {2, 4}, "Семейный талон", 522, 0},
	{556, 6, {5, 10}, "Наркотик: таблетка адреналина", 670, 0},
	{556, 7, {1, 3}, "Серебро", 599, 0},
	{556, 8, {1, 3}, "Золото", 600, 1},
	{556, 9, {1, 40}, "Талон: +1 AZ Coins", 731, 1},
	{556, 10, {1, -1}, "IPhone X (Белый)", 720, 1},
	{556, 11, {1, -1}, "Samsung Galaxy S10 (Белый)", 709, 1},
	{556, 12, {10, 7000}, "Деньги", -1, 1},
	{556, 13, {1, -1}, "Продажа фишек без комиссии", 4776, 1},
	{556, 14, {1, -1}, "Сертификат Freeway", 1117, 2},
	{556, 15, {1, -1}, "Сертификат Feltzer", 1118, 2},
	{556, 16, {1, -1}, "Сертификат Uranus", 1119, 2},
	{556, 17, {1, -1}, "Сертификат Mower", 5608, 2},

	{557, 0, {10, 10000}, "Деньги", -1, 0},
	{557, 1, {2, 8}, "Талон: +1 EXP", 730, 0},
	{557, 2, {1, 4}, "Талон: +1 EXP", 730, 0},
	{557, 3, {3, 10}, "Подарок", 552, 0},
	{557, 4, {10, 30}, "Наркотики", 510, 0},
	{557, 5, {250, 300}, "Материалы", 511, 0},
	{557, 6, {2, 8}, "Семейный талон", 522, 0},
	{557, 7, {5, 10}, "Наркотик: таблетка адреналина", 670, 0},
	{557, 8, {2, 4}, "Серебро", 599, 0},
	{557, 9, {2, 4}, "Золото", 600, 1},
	{557, 10, {10, 10000}, "Деньги", -1, 1},
	{557, 11, {10, 10000}, "Деньги", -1, 1},
	{557, 12, {10, 10000}, "Деньги", -1, 1},
	{557, 13, {1, -1}, "IPhone X (Серебряный)", 724, 1},
	{557, 14, {1, -1}, "Samsung Galaxy S10 (Серебряный)", 713, 1},
	{557, 15, {10, 50}, "Талон: +1 AZ Coins", 731, 2},
	{557, 16, {75, 100}, "Талон: +1 AZ Coins", 731, 2},
	{557, 17, {200, -1}, "Талон: +1 AZ Coins", 731, 2},
	{557, 18, {1, -1}, "Сертификат Дюна", 534, 2},
	{557, 19, {1, -1}, "Сертификат Infernus", 533, 2},
	{557, 20, {1, -1}, "Сертификат Туризмо", 535, 2},
	{557, 21, {1, -1}, "Сертификат Sultan", 536, 2},
	{557, 22, {1, -1}, "Сертификат Sandking", 537, 2},
	{557, 23, {1, -1}, "Сертификат Bullet", 538, 2},
	{557, 24, {1, -1}, "Сертификат Cheetah", 539, 2},
	{557, 25, {1, -1}, "Сертификат Securicar", 540, 2},
	{557, 26, {1, -1}, "Сертификат Romero", 541, 2},
	{557, 27, {1, -1}, "Сертификат Hotring Racer", 542, 2},
	{557, 28, {1, -1}, "Сертификат Super GT", 543, 2},
	{557, 29, {1, -1}, "Сертификат Elegy", 544, 2},
	{557, 30, {1, -1}, "Сертификат Bandito", 545, 2},
	{557, 31, {1, -1}, "Сертификат Huntley", 546, 2},
	{557, 32, {1, -1}, "Twin Turbo", 554, 2},
	{557, 33, {1, -1}, "Сертификат Tropic", 1120, 2},
	{557, 34, {1, -1}, "Сертификат Speeder", 1121, 2},
	{557, 35, {1, -1}, "Сертификат Mountain Bike", 1122, 2},
	{557, 36, {1, -1}, "Сертификат Uranus", 1119, 2},
	{557, 37, {1, -1}, "Сертификат Club", 1123, 2},
	{557, 38, {1, -1}, "Сертификат Alpha", 1124, 2},
	{557, 39, {1, -1}, "Скин: The LCN Mafia (ID: 113)", 304, 2},
	{557, 40, {1, -1}, "Скин: Varios Los Aztecas (ID: 114)", 305, 2},
	{557, 41, {1, -1}, "Шапка (новогодняя)", 117, 2},
	{557, 42, {1, -1}, "Шапка (новогодняя)", 118, 2},
	{557, 43, {1, -1}, "Шапка (новогодняя)", 119, 2},
	{557, 44, {1, -1}, "Голова дьявола", 161, 2},
	{557, 45, {1, -1}, "Гитара (Черная)", 116, 2},
	{557, 46, {1, -1}, "Гитара (Красная)", 114, 2},
	{557, 47, {1, -1}, "Рога", 163, 2},
	{557, 48, {1, -1}, "Метла", 162, 2},
	{557, 49, {1, -1}, "Крест на грудь", 169, 2},
	{557, 50, {1, -1}, "Мотошлем (фиолетовый)", 509, 2},
	{557, 51, {1, -1}, "IPhone X (Золотой)", 726, 2},
	{557, 52, {1, -1}, "Samsung Galaxy S10 (Золотой)", 715, 2},
	{557, 53, {1, -1}, "Танец: Хип-Хоп (1)", 4746, 2},
	{557, 54, {1, -1}, "Танец: Хлопки руками", 4747, 2},
	{557, 55, {1, -1}, "Танец: Машет руками", 4748, 2},
	{557, 56, {1, -1}, "Танец: Брейк (2)", 4755, 2},
	{557, 57, {1, -1}, "Танец: Утят", 4756, 2},
	{557, 58, {1, -1}, "Танец: Gangnam Style", 4757, 2},
	{557, 59, {1, -1}, "Танец: Хип-Хоп (3)", 4758, 2},
	{557, 60, {1, -1}, "Танец: Брейк (3)", 4759, 2},
	{557, 61, {1, -1}, "Скин: Хабиб Нурмагомедов (ID: 326)", 1535, 3},
	{557, 62, {1, -1}, "Скин: Oxxxymiron (ID: 327)", 1536, 3},
	{557, 63, {1, -1}, "Скин: DANTE (ID: 328)", 1537, 3},
	{557, 64, {1, -1}, "Скин: ravyazan (ID: 329)", 1538, 3},
	{557, 65, {1, -1}, "Скин: romeru (ID: 330)", 1539, 3},
	{557, 66, {1, -1}, "Скин: Sam Mason (ID: 331)", 1540, 3},
	{557, 67, {1, -1}, "Скин: Диана Шурыгина (ID: 332)", 1541, 3},
	{557, 68, {1, -1}, "Скин: Farmer (ID: 333)", 1542, 3},
	{557, 69, {1, -1}, "Обнуление ежедневных достижений", 4777, 3},
	{557, 70, {1, -1}, "Сертификат Mower", 5608, 3},
	{557, 71, {1, -1}, "Талон на x4 PayDay (передаваемый)", 7351, 3},

	{1425, 0, {15, 15000}, "Деньги", -1, 0},
	{1425, 1, {3, 12}, "Талон: +1 EXP", 730, 0},
	{1425, 2, {1, 4}, "Талон: +1 EXP", 730, 0},
	{1425, 3, {2, 10}, "Подарок", 552, 0},
	{1425, 4, {15, 45}, "Наркотики", 510, 0},
	{1425, 5, {375, 450}, "Материалы", 511, 0},
	{1425, 6, {3, 12}, "Семейный талон", 522, 0},
	{1425, 7, {7, 15}, "Наркотик: таблетка адреналина", 670, 0},
	{1425, 8, {3, 6}, "Серебро", 599, 0},
	{1425, 9, {3, 6}, "Золото", 600, 0},
	{1425, 10, {10, 7000}, "Деньги", -1, 0},
	{1425, 11, {15, 15000}, "Деньги", -1, 0},
	{1425, 12, {15, 15000}, "Деньги", -1, 0},
	{1425, 13, {15, 15000}, "Деньги", -1, 0},
	{1425, 14, {15, 15000}, "Деньги", -1, 0},
	{1425, 15, {15, 15000}, "Деньги", -1, 0},
	{1425, 16, {10, 7000}, "Деньги", -1, 0},
	{1425, 17, {30, 105}, "Талон: +1 AZ Coins", 731, 1},
	{1425, 18, {100, 150}, "Талон: +1 AZ Coins", 731, 1},
	{1425, 19, {1, -1}, "IPhone X (Серебряный)", 724, 1},
	{1425, 20, {1, -1}, "Samsung Galaxy S10 (Серебряный)", 713, 1},
	{1425, 21, {300, 301}, "Талон: +1 AZ Coins", 731, 1},
	{1425, 22, {1, -1}, "Сертификат Дюна", 534, 1},
	{1425, 23, {1, -1}, "Сертификат Infernus", 533, 1},
	{1425, 24, {1, -1}, "Сертификат Туризмо", 535, 1},
	{1425, 25, {1, -1}, "Сертификат Sultan", 536, 1},
	{1425, 26, {1, -1}, "Сертификат Sandking", 537, 1},
	{1425, 27, {1, -1}, "Сертификат Bullet", 538, 1},
	{1425, 28, {1, -1}, "Сертификат Cheetah", 539, 1},
	{1425, 29, {1, -1}, "Сертификат Securicar", 540, 1},
	{1425, 30, {1, -1}, "Сертификат Romero", 541, 1},
	{1425, 31, {1, -1}, "Сертификат Hotring Racer", 542, 1},
	{1425, 32, {1, -1}, "Сертификат Super GT", 543, 1},
	{1425, 33, {1, -1}, "Сертификат Elegy", 544, 1},
	{1425, 34, {1, -1}, "Сертификат Bandito", 545, 1},
	{1425, 35, {1, -1}, "Сертификат Huntley", 546, 1},
	{1425, 36, {1, -1}, "Twin Turbo", 554, 1},
	{1425, 37, {1, -1}, "Сертификат Tropic", 1120, 1},
	{1425, 38, {1, -1}, "Сертификат Speeder", 1121, 1},
	{1425, 39, {1, -1}, "Сертификат Mountain Bike", 1122, 1},
	{1425, 40, {1, -1}, "Сертификат Uranus", 1119, 1},
	{1425, 41, {1, -1}, "Сертификат Club", 1123, 1},
	{1425, 42, {1, -1}, "Сертификат Alpha", 1124, 1},
	{1425, 43, {1, -1}, "Скин: The LCN Mafia (ID: 113)", 304, 2},
	{1425, 44, {1, -1}, "Скин: Varios Los Aztecas (ID: 114)", 305, 2},
	{1425, 45, {1, -1}, "Шапка (новогодняя)", 117, 2},
	{1425, 46, {1, -1}, "Шапка (новогодняя)", 118, 2},
	{1425, 47, {1, -1}, "Шапка (новогодняя)", 119, 2},
	{1425, 48, {1, -1}, "Голова дьявола", 161, 2},
	{1425, 49, {1, -1}, "Гитара (Черная)", 116, 2},
	{1425, 50, {1, -1}, "Гитара (Красная)", 114, 2},
	{1425, 51, {1, -1}, "Рога", 163, 2},
	{1425, 52, {1, -1}, "Метла", 162, 2},
	{1425, 53, {1, -1}, "Крест на грудь", 169, 2},
	{1425, 54, {1, -1}, "Мотошлем (фиолетовый)", 509, 2},
	{1425, 55, {1, -1}, "IPhone X (Золотой)", 726, 2},
	{1425, 56, {1, -1}, "Samsung Galaxy S10 (Золотой)", 715, 2},
	{1425, 57, {1, -1}, "Сертификат Mercedes GT63s AMG", 1417, 3},
	{1425, 58, {1, -1}, "Сертификат Mercedes G63 AMG", 1418, 3},
	{1425, 59, {1, -1}, "Сертификат Audi RS6", 1419, 3},
	{1425, 60, {1, -1}, "Сертификат BMW X5m", 1514, 3},
	{1425, 61, {1, -1}, "Сертификат Chevrolet Corvette", 1515, 3},
	{1425, 62, {1, -1}, "Сертификат Chevrolet Cruze", 1516, 3},
	{1425, 63, {1, -1}, "Сертификат Lexus LX570", 1517, 3},
	{1425, 64, {1, -1}, "Сертификат Porsche 911", 1518, 3},
	{1425, 65, {1, -1}, "Сертификат Porsche Cayenne S", 1519, 3},
	{1425, 66, {1, -1}, "Обнуление ежедневных достижений", 4777, 3},
	{1425, 67, {1, -1}, "Талон на x4 PayDay (передаваемый)", 7351, 3},

	{7778, 0, {1, -1}, "Велосипед на спину", 2181, 1},
	{7778, 1, {1, -1}, "Дельтаплан на спину", 2182, 1},
	{7778, 2, {1, -1}, "Ангельское кольцо на голову", 1167, 1},
	{7778, 3, {1, -1}, "Воздушный шар #1", 1134, 1},
	{7778, 4, {1, -1}, "Воздушный шар #2", 1135, 1},
	{7778, 5, {1, -1}, "Воздушный шар #3", 1136, 1},
	{7778, 6, {1, -1}, "Доска для сёрфа 1", 188, 1},
	{7778, 7, {1, -1}, "Маркер dead inside", 7728, 2},
	{7778, 8, {1, -1}, "Рука бесконечности", 4001, 2},
	{7778, 9, {1, -1}, "Молот Тора", 4003, 2},
	{7778, 10, {1, -1}, "Русский боевой топор", 3998, 2},
	{7778, 11, {1, -1}, "Сфера Terra", 5446, 2},
	{7778, 12, {1, -1}, "Ледяной меч", 7228, 2},
	{7778, 13, {1, -1}, "Planet Express", 6926, 2},
	{7778, 14, {1, -1}, "Игрушечный Delorean", 6931, 2},
	{7778, 15, {1, -1}, "Цепь «Bitcoin»", 6526, 2},
	{7778, 16, {1, -1}, "Скин: Хоумлендер (ID: 841)", 7777, 3},
	{7778, 17, {1, -1}, "Видеокарта RTX 4090", 7729, 3},
	{7778, 18, {1, -1}, "Очки Apple Vision Pro", 7726, 3},
	{7778, 19, {1, -1}, "Магический воздушный шар #1", 5780, 3},
	{7778, 20, {1, -1}, "Анимированные очки Netrunner", 5925, 3},
	{7778, 21, {1, -1}, "Маркер «BAD»", 5928, 3},
	{7778, 22, {1, -1}, "Элитная переносная лавка", 7405, 3},
	{7778, 23, {1, -1}, "Пламя души", 6928, 3},
	{7778, 24, {1, -1}, "Золотой длинный Desert Eagle", 6520, 3},
	{7778, 25, {1, -1}, "Дьявольский чемодан", 6270, 3},
	{7778, 26, {1, -1}, "Маска-невидимка", 6264, 3},
	{7778, 27, {1, -1}, "Случайный культовый бронежилет", 6685, 3}
};

enum klad_info
{
	kladObject[3],
	bool:kladStatus,
	bool:kladOpen,
	Float:kladX,
	Float:kladY,
	Float:kladZ,
	kladCaptcha
};

new KladInfo[100][klad_info];

enum zone_info
{
	zone_id,
	Float:zone_min[2],
	Float:zone_max[2],
	zone_color
}
new ZonesInfo[][zone_info] = 
{
	{0, {-1473.000000, -2292.311523}, {-1197.000000, -2064.311523}, 0x00ffe8aa}, // activity palace
	{3, {1770.000000, -2174.000000}, {1898.000000, -2073.000000}, 0xFFFFFF80},
	{4, {1898.000000, -2174.000000}, {2026.000000, -2073.000000}, 0xFFFFFF80},
	{5, {2026.000000, -2174.000000}, {2154.000000, -2073.000000}, 0xFFFFFF80},
	{6, {2154.000000, -2174.000000}, {2282.000000, -2073.000000}, 0xFFFFFF80},
	{7, {2282.000000, -2174.000000}, {2410.000000, -2073.000000}, 0xFFFFFF80},
	{8, {2410.000000, -2174.000000}, {2538.000000, -2073.000000}, 0xFFFFFF80},
	{9, {2538.000000, -2174.000000}, {2666.000000, -2073.000000}, 0xFFFFFF80},
	{10, {2666.000000, -2174.000000}, {2794.000000, -2073.000000}, 0xFFFFFF80},
	{11, {2794.000000, -2174.000000}, {2922.000000, -2073.000000}, 0xFFFFFF80},
	{12, {1642.000000, -2073.000000}, {1770.000000, -1972.000000}, 0xFFFFFF80},
	{13, {1770.000000, -2073.000000}, {1898.000000, -1972.000000}, 0xFFFFFF80},
	{14, {1898.000000, -2073.000000}, {2026.000000, -1972.000000}, 0xFFFFFF80},
	{15, {2026.000000, -2073.000000}, {2154.000000, -1972.000000}, 0xFFFFFF80},
	{16, {2154.000000, -2073.000000}, {2282.000000, -1972.000000}, 0xFFFFFF80},
	{17, {2282.000000, -2073.000000}, {2410.000000, -1972.000000}, 0xFFFFFF80},
	{18, {2410.000000, -2073.000000}, {2538.000000, -1972.000000}, 0xFFFFFF80},
	{19, {2538.000000, -2073.000000}, {2666.000000, -1972.000000}, 0xFFFFFF80},
	{20, {2666.000000, -2073.000000}, {2794.000000, -1972.000000}, 0xFFFFFF80},
	{21, {2794.000000, -2073.000000}, {2922.000000, -1972.000000}, 0xFFFFFF80},
	{22, {1642.000000, -1972.000000}, {1770.000000, -1871.000000}, 0xFFFFFF80},
	{23, {1770.000000, -1972.000000}, {1898.000000, -1871.000000}, 0xFFFFFF80},
	{24, {1898.000000, -1972.000000}, {2026.000000, -1871.000000}, 0xFFFFFF80},
	{25, {2026.000000, -1972.000000}, {2154.000000, -1871.000000}, 0xFFFFFF80},
	{26, {2154.000000, -1972.000000}, {2282.000000, -1871.000000}, 0xFFFFFF80},
	{27, {2282.000000, -1972.000000}, {2410.000000, -1871.000000}, 0xFFFFFF80},
	{28, {2410.000000, -1972.000000}, {2538.000000, -1871.000000}, 0xFFFFFF80},
	{29, {2538.000000, -1972.000000}, {2666.000000, -1871.000000}, 0xFFFFFF80},
	{30, {2666.000000, -1972.000000}, {2794.000000, -1871.000000}, 0xFFFFFF80},
	{31, {2794.000000, -1972.000000}, {2922.000000, -1871.000000}, 0xFFFFFF80},
	{32, {1642.000000, -1871.000000}, {1770.000000, -1770.000000}, 0xFFFFFF80},
	{33, {1770.000000, -1871.000000}, {1898.000000, -1770.000000}, 0xFFFFFF80},
	{34, {1898.000000, -1871.000000}, {2026.000000, -1770.000000}, 0xFFFFFF80},
	{35, {2026.000000, -1871.000000}, {2154.000000, -1770.000000}, 0xFFFFFF80},
	{36, {2154.000000, -1871.000000}, {2282.000000, -1770.000000}, 0xFFFFFF80},
	{37, {2282.000000, -1871.000000}, {2410.000000, -1770.000000}, 0xFFFFFF80},
	{38, {2410.000000, -1871.000000}, {2538.000000, -1770.000000}, 0xFFFFFF80},
	{39, {2538.000000, -1871.000000}, {2666.000000, -1770.000000}, 0xFFFFFF80},
	{40, {2666.000000, -1871.000000}, {2794.000000, -1770.000000}, 0xFFFFFF80},
	{41, {2794.000000, -1871.000000}, {2922.000000, -1770.000000}, 0xFFFFFF80},
	{42, {1642.000000, -1770.000000}, {1770.000000, -1669.000000}, 0xFFFFFF80},
	{43, {1770.000000, -1770.000000}, {1898.000000, -1669.000000}, 0xFFFFFF80},
	{44, {1898.000000, -1770.000000}, {2026.000000, -1669.000000}, 0xFFFFFF80},
	{45, {2026.000000, -1770.000000}, {2154.000000, -1669.000000}, 0xFFFFFF80},
	{46, {2154.000000, -1770.000000}, {2282.000000, -1669.000000}, 0xFFFFFF80},
	{47, {2282.000000, -1770.000000}, {2410.000000, -1669.000000}, 0xFFFFFF80},
	{48, {2410.000000, -1770.000000}, {2538.000000, -1669.000000}, 0xFFFFFF80},
	{49, {2538.000000, -1770.000000}, {2666.000000, -1669.000000}, 0xFFFFFF80},
	{50, {2666.000000, -1770.000000}, {2794.000000, -1669.000000}, 0xFFFFFF80},
	{51, {2794.000000, -1770.000000}, {2922.000000, -1669.000000}, 0xFFFFFF80},
	{52, {1642.000000, -1669.000000}, {1770.000000, -1568.000000}, 0xFFFFFF80},
	{53, {1770.000000, -1669.000000}, {1898.000000, -1568.000000}, 0xFFFFFF80},
	{54, {1898.000000, -1669.000000}, {2026.000000, -1568.000000}, 0xFFFFFF80},
	{55, {2026.000000, -1669.000000}, {2154.000000, -1568.000000}, 0xFFFFFF80},
	{56, {2154.000000, -1669.000000}, {2282.000000, -1568.000000}, 0xFFFFFF80},
	{57, {2282.000000, -1669.000000}, {2410.000000, -1568.000000}, 0xFFFFFF80},
	{58, {2410.000000, -1669.000000}, {2538.000000, -1568.000000}, 0xFFFFFF80},
	{59, {2538.000000, -1669.000000}, {2666.000000, -1568.000000}, 0xFFFFFF80},
	{60, {2666.000000, -1669.000000}, {2794.000000, -1568.000000}, 0xFFFFFF80},
	{61, {2794.000000, -1669.000000}, {2922.000000, -1568.000000}, 0xFFFFFF80},
	{62, {1642.000000, -1568.000000}, {1770.000000, -1467.000000}, 0xFFFFFF80},
	{63, {1770.000000, -1568.000000}, {1898.000000, -1467.000000}, 0xFFFFFF80},
	{64, {1898.000000, -1568.000000}, {2026.000000, -1467.000000}, 0xFFFFFF80},
	{65, {2026.000000, -1568.000000}, {2154.000000, -1467.000000}, 0xFFFFFF80},
	{66, {2154.000000, -1568.000000}, {2282.000000, -1467.000000}, 0xFFFFFF80},
	{67, {2282.000000, -1568.000000}, {2410.000000, -1467.000000}, 0xFFFFFF80},

	{68, {2410.000000, -1568.000000}, {2538.000000, -1467.000000}, 0xFFFFFF80}, // priton gang centre

	{69, {2538.000000, -1568.000000}, {2666.000000, -1467.000000}, 0xFFFFFF80},
	{70, {2666.000000, -1568.000000}, {2794.000000, -1467.000000}, 0xFFFFFF80},
	{71, {2794.000000, -1568.000000}, {2922.000000, -1467.000000}, 0xFFFFFF80},
	{72, {1642.000000, -1467.000000}, {1770.000000, -1366.000000}, 0xFFFFFF80},
	{73, {1770.000000, -1467.000000}, {1898.000000, -1366.000000}, 0xFFFFFF80},
	{74, {1898.000000, -1467.000000}, {2026.000000, -1366.000000}, 0xFFFFFF80},
	{75, {2026.000000, -1467.000000}, {2154.000000, -1366.000000}, 0xFFFFFF80},
	{76, {2154.000000, -1467.000000}, {2282.000000, -1366.000000}, 0xFFFFFF80},
	{77, {2282.000000, -1467.000000}, {2410.000000, -1366.000000}, 0xFFFFFF80},
	{78, {2410.000000, -1467.000000}, {2538.000000, -1366.000000}, 0xFFFFFF80},
	{79, {2538.000000, -1467.000000}, {2666.000000, -1366.000000}, 0xFFFFFF80},
	{80, {2666.000000, -1467.000000}, {2794.000000, -1366.000000}, 0xFFFFFF80},
	{81, {2794.000000, -1467.000000}, {2922.000000, -1366.000000}, 0xFFFFFF80},
	{82, {1642.000000, -1366.000000}, {1770.000000, -1265.000000}, 0xFFFFFF80},
	{83, {1770.000000, -1366.000000}, {1898.000000, -1265.000000}, 0xFFFFFF80},
	{84, {1898.000000, -1366.000000}, {2026.000000, -1265.000000}, 0xFFFFFF80},
	{85, {2026.000000, -1366.000000}, {2154.000000, -1265.000000}, 0xFFFFFF80},
	{86, {2154.000000, -1366.000000}, {2282.000000, -1265.000000}, 0xFFFFFF80},
	{87, {2282.000000, -1366.000000}, {2410.000000, -1265.000000}, 0xFFFFFF80},
	{88, {2410.000000, -1366.000000}, {2538.000000, -1265.000000}, 0xFFFFFF80},
	{89, {2538.000000, -1366.000000}, {2666.000000, -1265.000000}, 0xFFFFFF80},
	{90, {2666.000000, -1366.000000}, {2794.000000, -1265.000000}, 0xFFFFFF80},
	{91, {2794.000000, -1366.000000}, {2922.000000, -1265.000000}, 0xFFFFFF80},
	{92, {1642.000000, -1265.000000}, {1770.000000, -1164.000000}, 0xFFFFFF80},
	{93, {1770.000000, -1265.000000}, {1898.000000, -1164.000000}, 0xFFFFFF80},
	{94, {1898.000000, -1265.000000}, {2026.000000, -1164.000000}, 0xFFFFFF80},
	{95, {2026.000000, -1265.000000}, {2154.000000, -1164.000000}, 0xFFFFFF80},
	{96, {2154.000000, -1265.000000}, {2282.000000, -1164.000000}, 0xFFFFFF80},
	{97, {2282.000000, -1265.000000}, {2410.000000, -1164.000000}, 0xFFFFFF80},
	{98, {2410.000000, -1265.000000}, {2538.000000, -1164.000000}, 0xFFFFFF80},
	{99, {2538.000000, -1265.000000}, {2666.000000, -1164.000000}, 0xFFFFFF80},
	{100, {2666.000000, -1265.000000}, {2794.000000, -1164.000000}, 0xFFFFFF80},
	{101, {2794.000000, -1265.000000}, {2922.000000, -1164.000000}, 0xFFFFFF80},
	{102, {1642.000000, -1164.000000}, {1770.000000, -1063.000000}, 0xFFFFFF80},
	{103, {1770.000000, -1164.000000}, {1898.000000, -1063.000000}, 0xFFFFFF80},
	{104, {1898.000000, -1164.000000}, {2026.000000, -1063.000000}, 0xFFFFFF80},
	{105, {2026.000000, -1164.000000}, {2154.000000, -1063.000000}, 0xFFFFFF80},
	{106, {2154.000000, -1164.000000}, {2282.000000, -1063.000000}, 0xFFFFFF80},
	{107, {2282.000000, -1164.000000}, {2410.000000, -1063.000000}, 0xFFFFFF80},
	{108, {2410.000000, -1164.000000}, {2538.000000, -1063.000000}, 0xFFFFFF80},
	{109, {2538.000000, -1164.000000}, {2666.000000, -1063.000000}, 0xFFFFFF80},
	{110, {2666.000000, -1164.000000}, {2794.000000, -1063.000000}, 0xFFFFFF80},
	{111, {2794.000000, -1164.000000}, {2922.000000, -1063.000000}, 0xFFFFFF80},
	{112, {1642.000000, -1063.000000}, {1770.000000, -962.000000}, 0xFFFFFF80},
	{113, {1770.000000, -1063.000000}, {1898.000000, -962.000000}, 0xFFFFFF80},
	{114, {1898.000000, -1063.000000}, {2026.000000, -962.000000}, 0xFFFFFF80},
	{115, {2026.000000, -1063.000000}, {2154.000000, -962.000000}, 0xFFFFFF80},
	{116, {2154.000000, -1063.000000}, {2282.000000, -962.000000}, 0xFFFFFF80},
	{117, {2282.000000, -1063.000000}, {2410.000000, -962.000000}, 0xFFFFFF80},
	{118, {2410.000000, -1063.000000}, {2538.000000, -962.000000}, 0xFFFFFF80},
	{119, {2538.000000, -1063.000000}, {2666.000000, -962.000000}, 0xFFFFFF80},
	{120, {2666.000000, -1063.000000}, {2794.000000, -962.000000}, 0xFFFFFF80},
	{121, {2794.000000, -1063.000000}, {2922.000000, -962.000000}, 0xFFFFFF80},
	{122, {1642.000000, -962.000000}, {1770.000000, -861.000000}, 0xFFFFFF80},
	{123, {1770.000000, -962.000000}, {1898.000000, -861.000000}, 0xFFFFFF80},
	{124, {1898.000000, -962.000000}, {2026.000000, -861.000000}, 0xFFFFFF80},
	{125, {2026.000000, -962.000000}, {2154.000000, -861.000000}, 0xFFFFFF80},
	{126, {2154.000000, -962.000000}, {2282.000000, -861.000000}, 0xFFFFFF80},
	{127, {2282.000000, -962.000000}, {2410.000000, -861.000000}, 0xFFFFFF80},
	{128, {2410.000000, -962.000000}, {2538.000000, -861.000000}, 0xFFFFFF80},
	{129, {2538.000000, -962.000000}, {2666.000000, -861.000000}, 0xFFFFFF80},
	{130, {2666.000000, -962.000000}, {2794.000000, -861.000000}, 0xFFFFFF80},
	{131, {2794.000000, -962.000000}, {2922.000000, -861.000000}, 0xFFFFFF80},
	
	{132, {1642.000000, -2174.000000}, {1770.000000, -2073.000000}, 0xFFFFFF80}, // fam gettho start
	{133, {1222.337891, 2459.614990}, {1344.837769, 2595.510010}, 0xFFFFFF80},
	{134, {1344.837769, 2459.614990}, {1467.337646, 2595.510010}, 0xFFFFFF80},
	{135, {1467.337646, 2459.614990}, {1589.837524, 2595.510010}, 0xFFFFFF80},
	{136, {1589.837524, 2459.614990}, {1712.337402, 2595.510010}, 0xFFFFFF80},
	{137, {1712.337402, 2459.614990}, {1834.837280, 2595.510010}, 0xFFFFFF80},
	{138, {1834.837280, 2459.614990}, {1957.337158, 2595.510010}, 0xFFFFFF80},
	{139, {1957.337158, 2459.614990}, {2079.836914, 2595.510010}, 0xFFFFFF80},
	{140, {2079.836914, 2459.614990}, {2202.336670, 2595.510010}, 0xFFFFFF80},
	{141, {2202.336670, 2459.614990}, {2324.836426, 2595.510010}, 0xFFFFFF80},
	{142, {2324.836426, 2459.614990}, {2447.336182, 2595.510010}, 0xFFFFFF80},
	{143, {2447.336182, 2459.614990}, {2569.835938, 2595.510010}, 0xFFFFFF80},
	{144, {2569.835938, 2459.614990}, {2692.335693, 2595.510010}, 0xFFFFFF80},
	{145, {1222.337891, 2323.719971}, {1344.837769, 2459.614990}, 0xFFFFFF80},
	{146, {1344.837769, 2323.719971}, {1467.337646, 2459.614990}, 0xFFFFFF80},
	{147, {1467.337646, 2323.719971}, {1589.837524, 2459.614990}, 0xFFFFFF80},
	{148, {1589.837524, 2323.719971}, {1712.337402, 2459.614990}, 0xFFFFFF80},
	{149, {1712.337402, 2323.719971}, {1834.837280, 2459.614990}, 0xFFFFFF80},
	{150, {1834.837280, 2323.719971}, {1957.337158, 2459.614990}, 0xFFFFFF80},
	{151, {1957.337158, 2323.719971}, {2079.836914, 2459.614990}, 0xFFFFFF80},
	{152, {2079.836914, 2323.719971}, {2202.336670, 2459.614990}, 0xFFFFFF80},
	{153, {2202.336670, 2323.719971}, {2324.836426, 2459.614990}, 0xFFFFFF80},
	{154, {2324.836426, 2323.719971}, {2447.336182, 2459.614990}, 0xFFFFFF80},
	{155, {2447.336182, 2323.719971}, {2569.835938, 2459.614990}, 0xFFFFFF80},
	{156, {2569.835938, 2323.719971}, {2692.335693, 2459.614990}, 0xFFFFFF80},
	{157, {1222.337891, 2187.824951}, {1344.837769, 2323.719971}, 0xFFFFFF80},
	{158, {1344.837769, 2187.824951}, {1467.337646, 2323.719971}, 0xFFFFFF80},
	{159, {1467.337646, 2187.824951}, {1589.837524, 2323.719971}, 0xFFFFFF80},
	{160, {1589.837524, 2187.824951}, {1712.337402, 2323.719971}, 0xFFFFFF80},
	{161, {1712.337402, 2187.824951}, {1834.837280, 2323.719971}, 0xFFFFFF80},
	{162, {1834.837280, 2187.824951}, {1957.337158, 2323.719971}, 0xFFFFFF80},
	{163, {1957.337158, 2187.824951}, {2079.836914, 2323.719971}, 0xFFFFFF80},
	{164, {2079.836914, 2187.824951}, {2202.336670, 2323.719971}, 0xFFFFFF80},
	{165, {2202.336670, 2187.824951}, {2324.836426, 2323.719971}, 0xFFFFFF80},
	{166, {2324.836426, 2187.824951}, {2447.336182, 2323.719971}, 0xFFFFFF80},
	{167, {2447.336182, 2187.824951}, {2569.835938, 2323.719971}, 0xFFFFFF80},
	{168, {2569.835938, 2187.824951}, {2692.335693, 2323.719971}, 0xFFFFFF80},
	{169, {1222.337891, 2051.929932}, {1344.837769, 2187.824951}, 0xFFFFFF80},
	{170, {1344.837769, 2051.929932}, {1467.337646, 2187.824951}, 0xFFFFFF80},
	{171, {1467.337646, 2051.929932}, {1589.837524, 2187.824951}, 0xFFFFFF80},
	{172, {1589.837524, 2051.929932}, {1712.337402, 2187.824951}, 0xFFFFFF80},
	{173, {1712.337402, 2051.929932}, {1834.837280, 2187.824951}, 0xFFFFFF80},
	{174, {1834.837280, 2051.929932}, {1957.337158, 2187.824951}, 0xFFFFFF80},
	{175, {1957.337158, 2051.929932}, {2079.836914, 2187.824951}, 0xFFFFFF80},
	{176, {2079.836914, 2051.929932}, {2202.336670, 2187.824951}, 0xFFFFFF80},
	{177, {2202.336670, 2051.929932}, {2324.836426, 2187.824951}, 0xFFFFFF80},
	{178, {2324.836426, 2051.929932}, {2447.336182, 2187.824951}, 0xFFFFFF80},
	{179, {2447.336182, 2051.929932}, {2569.835938, 2187.824951}, 0xFFFFFF80},
	{180, {2569.835938, 2051.929932}, {2692.335693, 2187.824951}, 0xFFFFFF80},
	{181, {1222.337891, 1916.034912}, {1344.837769, 2051.929932}, 0xFFFFFF80},
	{182, {1344.837769, 1916.034912}, {1467.337646, 2051.929932}, 0xFFFFFF80},
	{183, {1467.337646, 1916.034912}, {1589.837524, 2051.929932}, 0xFFFFFF80},
	{184, {1589.837524, 1916.034912}, {1712.337402, 2051.929932}, 0xFFFFFF80},
	{185, {1712.337402, 1916.034912}, {1834.837280, 2051.929932}, 0xFFFFFF80},
	{186, {1834.837280, 1916.034912}, {1957.337158, 2051.929932}, 0xFFFFFF80},
	{187, {1957.337158, 1916.034912}, {2079.836914, 2051.929932}, 0xFFFFFF80},
	{188, {2079.836914, 1916.034912}, {2202.336670, 2051.929932}, 0xFFFFFF80},
	{189, {2202.336670, 1916.034912}, {2324.836426, 2051.929932}, 0xFFFFFF80},
	{190, {2324.836426, 1916.034912}, {2447.336182, 2051.929932}, 0xFFFFFF80},
	{191, {2447.336182, 1916.034912}, {2569.835938, 2051.929932}, 0xFFFFFF80},
	{192, {2569.835938, 1916.034912}, {2692.335693, 2051.929932}, 0xFFFFFF80},
	{193, {1222.337891, 1780.139893}, {1344.837769, 1916.034912}, 0xFFFFFF80},
	{194, {1344.837769, 1780.139893}, {1467.337646, 1916.034912}, 0xFFFFFF80},
	{195, {1467.337646, 1780.139893}, {1589.837524, 1916.034912}, 0xFFFFFF80},
	{196, {1589.837524, 1780.139893}, {1712.337402, 1916.034912}, 0xFFFFFF80},
	{197, {1712.337402, 1780.139893}, {1834.837280, 1916.034912}, 0xFFFFFF80},
	{198, {1834.837280, 1780.139893}, {1957.337158, 1916.034912}, 0xFFFFFF80},
	{199, {1957.337158, 1780.139893}, {2079.836914, 1916.034912}, 0xFFFFFF80},
	{200, {2079.836914, 1780.139893}, {2202.336670, 1916.034912}, 0xFFFFFF80},
	{201, {2202.336670, 1780.139893}, {2324.836426, 1916.034912}, 0xFFFFFF80},
	{202, {2324.836426, 1780.139893}, {2447.336182, 1916.034912}, 0xFFFFFF80},
	{203, {2447.336182, 1780.139893}, {2569.835938, 1916.034912}, 0xFFFFFF80},
	{204, {2569.835938, 1780.139893}, {2692.335693, 1916.034912}, 0xFFFFFF80},
	{205, {1222.337891, 1644.244873}, {1344.837769, 1780.139893}, 0xFFFFFF80},
	{206, {1344.837769, 1644.244873}, {1467.337646, 1780.139893}, 0xFFFFFF80},
	{207, {1467.337646, 1644.244873}, {1589.837524, 1780.139893}, 0xFFFFFF80},
	{208, {1589.837524, 1644.244873}, {1712.337402, 1780.139893}, 0xFFFFFF80},
	{209, {1712.337402, 1644.244873}, {1834.837280, 1780.139893}, 0xFFFFFF80},
	{210, {1834.837280, 1644.244873}, {1957.337158, 1780.139893}, 0xFFFFFF80},
	{211, {1957.337158, 1644.244873}, {2079.836914, 1780.139893}, 0xFFFFFF80},
	{212, {2079.836914, 1644.244873}, {2202.336670, 1780.139893}, 0xFFFFFF80},
	{213, {2202.336670, 1644.244873}, {2324.836426, 1780.139893}, 0xFFFFFF80},
	{214, {2324.836426, 1644.244873}, {2447.336182, 1780.139893}, 0xFFFFFF80},
	{215, {2447.336182, 1644.244873}, {2569.835938, 1780.139893}, 0xFFFFFF80},
	{216, {2569.835938, 1644.244873}, {2692.335693, 1780.139893}, 0xFFFFFF80},
	{217, {1222.337891, 1508.349854}, {1344.837769, 1644.244873}, 0xFFFFFF80},
	{218, {1344.837769, 1508.349854}, {1467.337646, 1644.244873}, 0xFFFFFF80},
	{219, {1467.337646, 1508.349854}, {1589.837524, 1644.244873}, 0xFFFFFF80},
	{220, {1589.837524, 1508.349854}, {1712.337402, 1644.244873}, 0xFFFFFF80},
	{221, {1712.337402, 1508.349854}, {1834.837280, 1644.244873}, 0xFFFFFF80},
	{222, {1834.837280, 1508.349854}, {1957.337158, 1644.244873}, 0xFFFFFF80},
	{223, {1957.337158, 1508.349854}, {2079.836914, 1644.244873}, 0xFFFFFF80},
	{224, {2079.836914, 1508.349854}, {2202.336670, 1644.244873}, 0xFFFFFF80},
	{225, {2202.336670, 1508.349854}, {2324.836426, 1644.244873}, 0xFFFFFF80},
	{226, {2324.836426, 1508.349854}, {2447.336182, 1644.244873}, 0xFFFFFF80},
	{227, {2447.336182, 1508.349854}, {2569.835938, 1644.244873}, 0xFFFFFF80},
	{228, {2569.835938, 1508.349854}, {2692.335693, 1644.244873}, 0xFFFFFF80},
	{229, {1222.337891, 1372.454834}, {1344.837769, 1508.349854}, 0xFFFFFF80},
	{230, {1344.837769, 1372.454834}, {1467.337646, 1508.349854}, 0xFFFFFF80},
	{231, {1467.337646, 1372.454834}, {1589.837524, 1508.349854}, 0xFFFFFF80},
	{232, {1589.837524, 1372.454834}, {1712.337402, 1508.349854}, 0xFFFFFF80},
	{233, {1712.337402, 1372.454834}, {1834.837280, 1508.349854}, 0xFFFFFF80},
	{234, {1834.837280, 1372.454834}, {1957.337158, 1508.349854}, 0xFFFFFF80},
	{235, {1957.337158, 1372.454834}, {2079.836914, 1508.349854}, 0xFFFFFF80},
	{236, {2079.836914, 1372.454834}, {2202.336670, 1508.349854}, 0xFFFFFF80},
	{237, {2202.336670, 1372.454834}, {2324.836426, 1508.349854}, 0xFFFFFF80},
	{238, {2324.836426, 1372.454834}, {2447.336182, 1508.349854}, 0xFFFFFF80},
	{239, {2447.336182, 1372.454834}, {2569.835938, 1508.349854}, 0xFFFFFF80},
	{240, {2569.835938, 1372.454834}, {2692.335693, 1508.349854}, 0xFFFFFF80},
	{241, {1222.337891, 1236.559814}, {1344.837769, 1372.454834}, 0xFFFFFF80},
	{242, {1344.837769, 1236.559814}, {1467.337646, 1372.454834}, 0xFFFFFF80},
	{243, {1467.337646, 1236.559814}, {1589.837524, 1372.454834}, 0xFFFFFF80},
	{244, {1589.837524, 1236.559814}, {1712.337402, 1372.454834}, 0xFFFFFF80},
	{245, {1712.337402, 1236.559814}, {1834.837280, 1372.454834}, 0xFFFFFF80},
	{246, {1834.837280, 1236.559814}, {1957.337158, 1372.454834}, 0xFFFFFF80},
	{247, {1957.337158, 1236.559814}, {2079.836914, 1372.454834}, 0xFFFFFF80},
	{248, {2079.836914, 1236.559814}, {2202.336670, 1372.454834}, 0xFFFFFF80},
	{249, {2202.336670, 1236.559814}, {2324.836426, 1372.454834}, 0xFFFFFF80},
	{250, {2324.836426, 1236.559814}, {2447.336182, 1372.454834}, 0xFFFFFF80},
	{251, {2447.336182, 1236.559814}, {2569.835938, 1372.454834}, 0xFFFFFF80},
	{252, {2569.835938, 1236.559814}, {2692.335693, 1372.454834}, 0xFFFFFF80},
	{253, {1222.337891, 1100.664917}, {1344.837769, 1236.559814}, 0xFFFFFF80},
	{254, {1344.837769, 1100.664917}, {1467.337646, 1236.559814}, 0xFFFFFF80},
	{255, {1467.337646, 1100.664917}, {1589.837524, 1236.559814}, 0xFFFFFF80},
	{256, {1589.837524, 1100.664917}, {1712.337402, 1236.559814}, 0xFFFFFF80},
	{257, {1712.337402, 1100.664917}, {1834.837280, 1236.559814}, 0xFFFFFF80},
	{258, {1834.837280, 1100.664917}, {1957.337158, 1236.559814}, 0xFFFFFF80},
	{259, {1957.337158, 1100.664917}, {2079.836914, 1236.559814}, 0xFFFFFF80},
	{260, {2079.836914, 1100.664917}, {2202.336670, 1236.559814}, 0xFFFFFF80},
	{261, {2202.336670, 1100.664917}, {2324.836426, 1236.559814}, 0xFFFFFF80},
	{262, {2324.836426, 1100.664917}, {2447.336182, 1236.559814}, 0xFFFFFF80},
	{263, {2447.336182, 1100.664917}, {2569.835938, 1236.559814}, 0xFFFFFF80},
	{264, {2569.835938, 1100.664917}, {2692.335693, 1236.559814}, 0xFFFFFF80},
	{265, {1222.337891, 964.769958}, {1344.837769, 1100.664917}, 0xFFFFFF80},
	{266, {1344.837769, 964.769958}, {1467.337646, 1100.664917}, 0xFFFFFF80},
	{267, {1467.337646, 964.769958}, {1589.837524, 1100.664917}, 0xFFFFFF80},
	{268, {1589.837524, 964.769958}, {1712.337402, 1100.664917}, 0xFFFFFF80},
	{269, {1712.337402, 964.769958}, {1834.837280, 1100.664917}, 0xFFFFFF80},
	{270, {1834.837280, 964.769958}, {1957.337158, 1100.664917}, 0xFFFFFF80},
	{271, {1957.337158, 964.769958}, {2079.836914, 1100.664917}, 0xFFFFFF80},
	{272, {2079.836914, 964.769958}, {2202.336670, 1100.664917}, 0xFFFFFF80},
	{273, {2202.336670, 964.769958}, {2324.836426, 1100.664917}, 0xFFFFFF80},
	{274, {2324.836426, 964.769958}, {2447.336182, 1100.664917}, 0xFFFFFF80},
	{275, {2447.336182, 964.769958}, {2569.835938, 1100.664917}, 0xFFFFFF80},
	{276, {2569.835938, 964.769958}, {2692.335693, 1100.664917}, 0xFFFFFF80},
	{277, {1222.337891, 828.875000}, {1344.837769, 964.769958}, 0xFFFFFF80},
	{278, {1344.837769, 828.875000}, {1467.337646, 964.769958}, 0xFFFFFF80},
	{279, {1467.337646, 828.875000}, {1589.837524, 964.769958}, 0xFFFFFF80},
	{280, {1589.837524, 828.875000}, {1712.337402, 964.769958}, 0xFFFFFF80},
	{281, {1712.337402, 828.875000}, {1834.837280, 964.769958}, 0xFFFFFF80},
	{282, {1834.837280, 828.875000}, {1957.337158, 964.769958}, 0xFFFFFF80},
	{283, {1957.337158, 828.875000}, {2079.836914, 964.769958}, 0xFFFFFF80},
	{284, {2079.836914, 828.875000}, {2202.336670, 964.769958}, 0xFFFFFF80},
	{285, {2202.336670, 828.875000}, {2324.836426, 964.769958}, 0xFFFFFF80},
	{286, {2324.836426, 828.875000}, {2447.336182, 964.769958}, 0xFFFFFF80},
	{287, {2447.336182, 828.875000}, {2569.835938, 964.769958}, 0xFFFFFF80},
	{288, {2569.835938, 828.875000}, {2692.335693, 964.769958}, 0xFFFFFF80}, // fam gettho end

	{289, {2181.000000, -1767.000000}, {2185.000000, -1649.000000}, 0xff6666ff}, // centre gettho gangzone
	{290, {2256.000000, -1767.000000}, {2260.000000, -1649.000000}, 0xff6666ff}, // centre gettho gangzone
	{291, {2181.000000, -1767.000000}, {2260.000000, -1763.000000}, 0xff6666ff}, // centre gettho gangzone
	{292, {2181.000000, -1653.000000}, {2260.000000, -1649.000000}, 0xff6666ff}, // centre gettho gangzone
	{293, {368.081207, 1313.431274}, {684.850525, 1711.882202}, 0xFFFFFF80}, // mafia centre
	{294, {367.000000, 1312.000000}, {372.000000, 1713.000000}, 0x000000ff}, // mafia stroke gangzone
	{295, {681.000000, 1312.000000}, {686.000000, 1713.000000}, 0x000000ff}, // mafia stroke gangzone
	{296, {367.000000, 1312.000000}, {686.000000, 1317.000000}, 0x000000ff}, // mafia stroke gangzone
	{297, {367.000000, 1708.000000}, {686.000000, 1713.000000}, 0x000000ff}, // mafia stroke gangzone
	{298, {2409.000000, -1569.000000}, {2414.000000, -1466.000000}, 0x000000ff}, // priton stroke gangzone
	{299, {2534.000000, -1569.000000}, {2539.000000, -1466.000000}, 0x000000ff}, // priton stroke gangzone
	{300, {2409.000000, -1569.000000}, {2539.000000, -1564.000000}, 0x000000ff}, // priton stroke gangzone
	{301, {2409.000000, -1471.000000}, {2539.000000, -1466.000000}, 0x000000ff} // priton stroke gangzone
};

new
	server_fix_one[MAX_PLAYERS],
 	server_fix_two[MAX_PLAYERS];

enum razdacha_info 
{
	razdacha_itemid,
	razdacha_count
};
new RazdachaData[razdacha_info];

// AIRDROP
enum air_drop 
{
	bool:air_Status,
	Float:air_PosX,
	Float:air_PosY,
	Float:air_PosZ,
	Float:air_PosZmap,
	air_Open,
	air_Object,
	air_Timer,
	Text3D:air_Text,
	air_Inventory[5],
	air_InventoryCount[5],
	air_InventoryReCount[5],
	air_InventoryLastTake[5]
};

new AirDrop[air_drop];
//


enum trInfo
{
	tID,
	tOwner[24],
	tNalog,
	Float:tPos_X,
	Float:tPos_Y,
	Float:tPos_Z,
	Float:tPos_A,
	Float:tPos_rX,
	Float:tPos_rY,
	Float:tPos_rZ,
	Text3D:tLabel,
	tObjPark,
	tPickup,
	tShtraf,
	tParked,
	tPricep,
	tIDcar,
	tLocks,
	tObj,
 	tType
}
new
	TrailerInfo[MAX_TRAILERS][trInfo],
	ctrailers,
	OWNABLETRAILERS,
	PlayerText:TrTD[MAX_PLAYERS],
	TDTimer[MAX_PLAYERS],
	TDColor[MAX_PLAYERS];

enum rewardds
{
	rewOpis[140],
	rewType[24],
	rewPrize,
	rewCount
}
new Reward[MAX_REWARD][rewardds] =
{
	{"{5afad5}Отыграть 5 часов","TempQuest",1000,5},
	{"{5afad5}Выполнить 3 задания","TempQuest",2000,3},
	{"{5afad5}Пригласить 3 друзей и чтобы они достигли 3 уровня","TempQuest",1100,3},
	{"{5afad5}Собрать 40 мешков сена на ферме","TempQuest",1000,40},
	{"{5afad5}Перенести 30 мешков на грузчиках","TempQuest",1000,30},
	{"{5afad5}Собрать 30 деталей на заводе","TempQuest",1000,30},
	{"{5afad5}Развести пиццу 20 раз","TempQuest",2000,20},
	{"{5afad5}Перевести 15 клиентов в такси","TempQuest",2400,15},
	{"{5afad5}Собрать 400 чекпоинтов на автобусе","TempQuest",2200,400},
	{"{5afad5}Починить или заправить 15 игроков на авто механика","TempQuest",2000,15},
	{"{5afad5}Завершить 12 рейсов дальнобойщиком","TempQuest",1600,12},
	{"{5afad5}Продать 7000 груза в бизнесы развозчиком продуктов","TempQuest",1600,7000},
	{"{5afad5}Помочь 20 игрокам работая адвокатом","TempQuest",7000,20},
	{"{5afad5}[Полиция] Арестовать 15 игроков","TempQuest",1500,15},
	{"{5afad5}[Полиция] Проверить паспорта 50 игроков","TempQuest",1200,50},
	{"{5afad5}[Полиция] Обыскать 50 игроков на посту","TempQuest",1200,50},
	{"{5afad5}[Больница] Вылечить 50 игроков","TempQuest",1500,50},
	{"{5afad5}[Больница] Перевести медикаменты 3 раза","TempQuest",3000,3},
	{"{5afad5}[TV Студия] Отредактировать 50 объявлений","TempQuest",2000,50},
	{"{5afad5}[Армия] Простоять на посту 120 минут","TempQuest",1400,120},
	{"{5afad5}[Армия] Развести 3 фуры материалов","TempQuest",1200,3},
	{"{5afad5}[Инструкторы] Выдать 10 лицензий","TempQuest",1100,10},
	{"{5afad5}[Центральный банк] Пополнить депозит 10 раз","TempQuest",800,10},
	{"{5afad5}[Центральный банк] Снять с депозита 10 раз","TempQuest",800,10},
	{"{5afad5}[Центральный банк] Онайлн в здании банка 180 минут","TempQuest",1300,180}
};

//
const MAX_OTELS = 23;

new OtelPickup[MAX_OTELS + 3];

enum ot_inf
{
	otName[30],
	otLevel,
	Float:otEnter_X,
	Float:otEnter_Y,
	Float:otEnter_Z,
	otBusiness
};
new OtelInfo[MAX_OTELS][ot_inf] = 
{
	{"The Cosmopolitan", 5, 487.2613,-1639.1001,23.7031, 188},
	{"Mardan Palace", 5, 325.4023,-1515.0090,36.0325, 189},
	{"Marina Vay Sands", 5, 1498.4705,-1580.5245,13.5508, 190},
	{"The Peninsula Beverly Hills", 3, 1140.3572,-1586.9727,13.5606, 191},
	{"Sundet Marquis", 4, 1286.8000,-1329.2592,13.5549, 192},
	{"Diamonds", 3, 2747.5146,-1638.2764,13.0656, 193},
	{"Curio Collection by Hilton", 5, 1546.1674,-1268.0924,17.4063, 194},
	{"The Kinney Venice", 4, 1789.2275,-1384.2695,15.7578, 218},
	{"Отель Блуббери", 3, 201.4477,-94.9742,1.5550, 219},
	{"Crowne Plaza Los", 4, -2178.6499,-42.1708,35.320, 220},
	{"Four Seasons", 3, -2172.3025,252.1336,35.3391, 221},
	{"Vallay of San-Fierro", 4, -2002.8583,-1020.3034,32.1719, 222},
	{"The London West", 5, -2720.6375,127.6034,7.0391, 223},
	{"Hotel Casa del Mar", 3, -2485.4412,2272.7751,4.9844, 224},
	{"4 Dragons", 5, 1974.6093,1076.0562,10.8203, 225},
	{"InterContinental", 5, 2239.0503,1285.7654,10.8203, 226},
	{"Emerald Isle", 4, 2127.4729,2379.7432,10.8203, 227},
	{"Holiday Inn Express", 4, 2388.9976,2467.2161,10.8203, 228},
	{"Rock Hotel", 4, 2627.9590,2349.2917,10.8203, 229},
	{"Ganton 1", 3, 2232.7925,-1785.7019,13.5600, 230},
	{"Ganton 2", 3, 2275.8550,-1785.6608,13.5469, 231},
	{"Hotel Fort Carson", 3, 13.5599, 1220.0190, 19.3393, 258},
	{"Hotel Angel Pine", 3, -2192.2229, -2255.3555, 30.6937, 259}
};

enum ot_room_inf
{
	otRoomStatus,
	otRoomOwner,
	otRoomOwnerOtel,
	Text3D:otRoomText
};
new RoomOtel[399][ot_room_inf];

enum zInfo
{
    zName[28],
    Float:zPos[6]
};
new gSAZones[MAX_ZONESg][zInfo] =
{
        {"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
        {"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
        {"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
        {"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
        {"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
        {"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
        {"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
        {"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
        {"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
        {"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
        {"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
        {"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
        {"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
        {"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
        {"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
        {"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
        {"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
        {"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
        {"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
        {"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
        {"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
        {"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
        {"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
        {"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
        {"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
        {"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
        {"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
        {"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
        {"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
        {"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
        {"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
        {"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
        {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
        {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
        {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
        {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
        {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
        {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
        {"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
        {"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
        {"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
        {"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
        {"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
        {"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
        {"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
        {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
        {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
        {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
        {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
        {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
        {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
        {"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
        {"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
        {"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
        {"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
        {"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
        {"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
        {"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
        {"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
        {"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
        {"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
        {"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
        {"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
        {"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
        {"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
        {"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
        {"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
        {"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
        {"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
        {"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
        {"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
        {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
        {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
        {"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
        {"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
        {"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
        {"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
        {"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
        {"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
        {"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
        {"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
        {"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
        {"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
        {"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
        {"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
        {"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
        {"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
        {"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
        {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
        {"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
        {"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
        {"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
        {"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
        {"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
        {"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
        {"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
        {"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
        {"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
        {"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
        {"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
        {"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
        {"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
        {"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
        {"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
        {"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
        {"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
        {"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
        {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
        {"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
        {"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
        {"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
        {"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
        {"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
        {"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
        {"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
        {"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
        {"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
        {"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
        {"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
        {"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
        {"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
        {"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
        {"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
        {"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
        {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
        {"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
        {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
        {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
        {"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
        {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
        {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
        {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
        {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
        {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
        {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
        {"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
        {"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
        {"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
        {"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
        {"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
        {"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
        {"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
        {"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
        {"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
        {"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
        {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
        {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
        {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
        {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
        {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
        {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
        {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
        {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
        {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
        {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
        {"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
        {"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
        {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
        {"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
        {"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
        {"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
        {"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
        {"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
        {"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
        {"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
        {"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
        {"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
        {"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
        {"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
        {"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
        {"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
        {"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
        {"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
        {"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
        {"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
        {"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
        {"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
        {"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
        {"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
        {"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
        {"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
        {"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
        {"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
        {"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
        {"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
        {"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
        {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
        {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
        {"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
        {"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
        {"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
        {"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
        {"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
        {"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
        {"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
        {"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
        {"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
        {"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
        {"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
        {"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
        {"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
        {"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
        {"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
        {"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
        {"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
        {"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
        {"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
        {"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
        {"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
        {"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
        {"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
        {"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
        {"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
        {"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
        {"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
        {"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
        {"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
        {"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
        {"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
        {"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
        {"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
        {"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
        {"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
        {"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
        {"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
        {"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
        {"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
        {"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
        {"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
        {"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
        {"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
        {"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
        {"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
        {"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
        {"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
        {"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
        {"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
        {"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
        {"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
        {"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
        {"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
        {"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
        {"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
        {"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
        {"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
        {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
        {"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
        {"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
        {"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
        {"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
        {"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
        {"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
        {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
        {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
        {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
        {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
        {"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
        {"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
        {"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
        {"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
        {"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
        {"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
        {"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
        {"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
        {"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
        {"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
        {"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
        {"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
        {"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
        {"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
        {"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
        {"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
        {"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
        {"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
        {"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
        {"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
        {"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
        {"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
        {"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
        {"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
        {"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
        {"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
        {"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
        {"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
        {"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
        {"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
        {"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
        {"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
        {"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
        {"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
        {"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
        {"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
        {"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
        {"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
        {"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
        {"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
        {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
        {"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
        {"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
        {"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
        {"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
        {"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
        {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
        {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
        {"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
        {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
        {"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
        {"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
        {"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
        {"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
        {"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
        {"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
        {"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
        {"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
        {"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
        {"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
        {"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
        {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
        {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
        {"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
        {"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
        {"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
        {"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
        {"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
        {"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
        {"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
        {"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
        {"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
        {"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
        {"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
        {"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
        {"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
        {"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
        {"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
        {"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
        {"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
        {"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
        {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
        {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
        {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
        {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
        {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
        {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
        {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
        {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
        {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
        {"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
        {"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
        {"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
        {"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
        {"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
        {"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
        {"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
        {"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
        {"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
        {"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
        {"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
        {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
        {"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
        {"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
        {"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
        {"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
        {"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
        {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
        {"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

enum crInfo
{
    craftAksID,
    craftChance,
	craftNeed[5],
	craftNeedKolvo[5],
	craftColor[10],
	craftType[10]
};
new CraftInfo[MAX_CRAFTS][crInfo] =
{
	{114,1,{566,674, 597, 598, 594},{546,27,9,9,36},{1,665,666,667,668,669,670,671,672,673},"Accessory"},
	{115, 1,{566,674, 597, 598, 594},{546,27,9,9,36},{1,665,666,667,668,669,670,671,672,673},"Accessory"},
	{116,1,{566,674, 597, 598, 594},{546,27,9,9,36},{1,665,666,667,668,669,670,671,672,673},"Accessory"},
	{7729,1,{7281,7425, 7424, 7423, 1808},{5,27,5,5,5},{0},"Accessory"},
	{7402,18,{7424, 7423, 3528, 7281, 7425},{73,73,1,10,146},{0},"Accessory"},
	{7405,1,{7281, 600, 7425, 7424, 7423},{4,5,27,4,1},{0},"Accessory"},
	{6926,1,{595, 594, 3561, 674, 4032},{619,619,127,182,670},{0},"Accessory"},
	{6931,1,{595, 594, 3561, 674, 4032},{619,619,127,182,670},{0},"Accessory"},
	{6847,1,{595, 594, 1186, 600, 599},{546,546,27,77,77},{0},"Accessory"},
	{6930,1,{6641, 5928, 1186, 6366, 3561},{1,1,127,5,182},{0},"Accessory"},
	{6874,1,{595, 594, 1692, 599, 600},{218,218,127,33,18},{0},"Accessory"},
	{6875,1,{595, 594, 1692, 599, 600},{218,218,127,33,18},{0},"Accessory"},
	{6876,1,{595, 594, 1692, 599, 600},{218,218,127,33,18},{0},"Accessory"},
	{6877,1,{595, 594, 1692, 599, 600},{218,218,127,33,18},{0},"Accessory"},
	{6921,1,{6641, 5928, 1186, 6366, 3561},{1,1,127,5,182},{0},"Accessory"},
	{6922,1,{6641, 5928, 1186, 6366, 3561},{1,1,127,5,182},{0},"Accessory"},
	{6923,1,{6641, 5928, 1186, 6366, 3561},{1,1,127,5,182},{0},"Accessory"},
	{6928,1,{6641, 5928, 1186, 6366, 3561},{1,1,127,5,182},{0},"Accessory"},
	{6929,1,{6641, 5928, 1186, 6366, 3561},{1,1,127,5,182},{0},"Accessory"},
	{6526,1,{595, 594, 674, 598, 600},{546,546,113,145,74},{0},"Accessory"},
	{6520,1,{6519, 6313, 600, 599, 809},{1,1,182,182,5},{0},"Accessory"},
	{6519,1,{1322, 598, 809},{5,182,5},{0},"Accessory"},
	{6313,1,{595, 594, 674, 598, 600},{546,546,113,145,74},{0},"Accessory"},
	{6266,1,{6369, 1186, 6024, 595, 594},{4, 18, 1,127,127},{0},"Accessory"},
	{6267,1,{6370, 1186, 6024, 595, 594},{4, 18, 1,127,127},{0},"Accessory"},
	{6268,1,{6371, 1186, 6024, 595, 594},{4, 18, 1,127,127},{0},"Accessory"},
	{6372,1,{6372, 1186, 6024, 595, 594},{4, 18, 1,127,127},{0},"Accessory"},
	{6270,1,{6373, 1186, 6024, 595, 594},{4, 18, 1,127,127},{0},"Accessory"},
	{6271,1,{6374, 1186, 6024, 595, 594},{4, 18, 1,127,127},{0},"Accessory"},
	{5903,1,{595, 594, 3561, 674, 4032},{186,186,36,55,210},{0},"Accessory"},
	{6017,1,{595, 594, 1692, 599, 3561},{73,73,55,18,10},{0},"Accessory"},
	{6030,1,{595, 594, 1692, 599, 3561},{73,73,55,18,10},{0},"Accessory"},
	{6031,1,{595, 594, 1692, 599, 3561},{73,73,55,18,10},{0},"Accessory"},
	{6032,1,{595, 594, 1692, 599, 3561},{73,73,55,18,10},{0},"Accessory"},
	{6034,1,{595, 594, 1692, 599, 3561},{73,73,55,18,10},{0},"Accessory"},
	{6019,1,{595, 594, 674, 566, 3561},{91,91,35,1274,10},{0},"Accessory"},
	{6021,1,{595, 594, 674, 566, 3561},{91,91,35,1274,10},{0},"Accessory"},
	{6029,1,{595, 594, 674, 566, 3561},{91,91,35,1274,10},{0},"Accessory"},
	{6022,1,{595, 594, 674, 1186, 3561},{64,64,22,5,14},{0},"Accessory"},
	{6023,1,{595, 594, 674, 1186, 3561},{64,64,22,5,14},{0},"Accessory"},
	{6024,25,{6022, 6023},{1,1},{0},"Accessory"},
	{6025,1,{595, 594, 1692, 674, 1186},{146,146,109,18,9},{0},"Accessory"},
	{6028,1,{595, 594, 674, 598, 599},{46,46,14,18,18},{0},"Accessory"},
	{6033,1,{595, 594, 674, 598, 599},{46,46,14,18,18},{0},"Accessory"},
	{5925,1,{595, 594, 674, 598, 600},{546,546,113,145,73},{0},"Accessory"},
	{5780,10,{1135, 1186, 1692, 594, 595},{1,55,182,364,364},{0},"Accessory"},
	{5781,10,{1134, 1186, 1692, 594, 595},{1,55,182,364,364},{0},"Accessory"},
	{5782,10,{1136, 1186, 1692, 594, 595},{1,55,182,364,364},{0},"Accessory"},
	{5783,10,{1137, 1186, 1692, 594, 595},{1,55,182,364,364},{0},"Accessory"},
	{5784,10,{1138, 1186, 1692, 594, 595},{1,55,182,364,364},{0},"Accessory"},
	{5785,10,{1139, 1186, 1692, 594, 595},{1,55,182,364,364},{0},"Accessory"},
	{5786,10,{1140, 1186, 1692, 594, 595},{1,55,182,364,364},{0},"Accessory"},
	{5119,1,{1692, 598, 674, 595, 594},{55,27,27,55,55},{0},"Accessory"},
	{5090,1,{595, 594, 3561, 674, 1186},{69,69,8,14,4},{0},"Accessory"},
	{5126,1,{595, 594, 3561, 674, 1186},{69,69,8,14,4},{0},"Accessory"},
	{5118,1,{1692, 598, 674, 595, 594},{55,27,27,55,55},{0},"Accessory"},
	{5106,1,{595, 594, 781, 566, 674},{91,91,10,910,36},{0},"Accessory"},
	{1322,1,{595, 594, 674, 566, 781},{91,91,64,910,10},{0},"Accessory"},
	{1326,1,{595, 594, 674, 566, 781},{91,91,64,910,10},{0},"Accessory"},
	{1319,1,{595, 594, 674, 566, 781},{91,91,64,910,10},{0},"Accessory"},
	{1320,1,{595, 594, 674, 566, 781},{91,91,64,910,10},{0},"Accessory"},
	{5822,1,{595, 594, 3561, 674, 1186},{192,192,22,40,10},{0},"Accessory"},
	{2183,1,{595, 594, 1186, 674, 566},{42,42,1,23,364},{0},"Accessory"},
	{2184,1,{595, 594, 1186, 674, 566},{42,42,1,23,364},{0},"Accessory"},
	{2185,1,{595, 594, 1186, 674, 566},{42,42,1,23,364},{0},"Accessory"},
	{2186,1,{595, 594, 1186, 674, 566},{42,42,1,23,364},{0},"Accessory"},

	{7767,1,{595, 594, 1692, 599},{546,27,1,1},{0},"Clothes"},
	{7768,1,{595, 594, 1692, 599},{546,27,1,1},{0},"Clothes"},
	{7769,1,{595, 594, 1692, 599},{546,27,1,1},{0},"Clothes"},
	{7770,1,{595, 594, 1692, 599},{546,27,1,1},{0},"Clothes"},
	{7468,1,{595, 594, 557, 556, 1692},{546,27,1,1,1},{0},"Clothes"},
	{7026,1,{595, 594, 1692, 599, 555},{546,27,1,1,1},{0},"Clothes"},
	{7028,1,{595, 594, 1692, 599, 555},{546,27,1,1,1},{0},"Clothes"},
	{6794,1,{595, 594, 1692, 599, 555},{546,27,1,1,1},{0},"Clothes"},
	{6798,1,{595, 594, 1692, 599, 555},{546,27,1,1,1},{0},"Clothes"},
	{6652,1,{595, 594, 557, 556, 1692},{546,27,9,9,36},{0},"Clothes"},
	{4859,1,{595, 594, 557, 556, 1692},{546,27,9,9,36},{0},"Clothes"},
	{6380,1,{595, 594, 1692, 599, 556},{546,27,9,9,1},{0},"Clothes"},
	{6381,1,{595, 594, 1692, 599, 556},{546,27,9,9,1},{0},"Clothes"},
	{6382,1,{595, 594, 1692, 599, 556},{546,27,9,9,1},{0},"Clothes"},
	{6383,1,{595, 594, 1692, 599, 556},{546,27,9,9,1},{0},"Clothes"},
	{6384,1,{595, 594, 1692, 599, 556},{546,27,9,9,1},{0},"Clothes"},
	{6215,1,{595, 594, 1692, 599, 556},{546,27,9,9,1},{0},"Clothes"},
	{6216,1,{595, 594, 1692, 599, 556},{546,27,9,9,1},{0},"Clothes"},
	{6217,1,{595, 594, 1692, 599, 556},{546,27,9,9,1},{0},"Clothes"},
	{6176,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{6180,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{6187,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{6189,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{6190,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{6191,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{6192,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{6194,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{5943,1,{595, 594, 1692, 599},{546,27,9,9},{0},"Clothes"},
	{5944,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{5945,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{5946,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{5948,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{5949,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{5950,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{5080,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{5081,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{5082,1,{595, 594, 557, 556, 1692},{546,27,9,9,1},{0},"Clothes"},
	{362,1,{595, 594},{546,27},{0},"Clothes"},
	{359,1,{595, 594},{546,27},{0},"Clothes"},
	{350,1,{595, 594},{546,27},{0},"Clothes"},
	{218,1,{595, 594},{546,27},{0},"Clothes"},
	{278,1,{595, 594},{546,27},{0},"Clothes"},
	{293,1,{595, 594},{546,27},{0},"Clothes"},
	{297,1,{595, 594},{546,27},{0},"Clothes"},
	{365,1,{595, 594},{546,27},{0},"Clothes"},
	{299,1,{595, 594},{546,27},{0},"Clothes"},
	{214,1,{595, 594},{546,27},{0},"Clothes"},
	{372,1,{595, 594},{546,27},{0},"Clothes"},
	{315,1,{595, 594},{546,27},{0},"Clothes"},
	{314,1,{595, 594},{546,27},{0},"Clothes"},
	{1521,1,{595, 594, 1692},{546,27,1},{0},"Clothes"},
	{1522,1,{595, 594, 1692},{546,27,1},{0},"Clothes"},
	
	{7432,1,{7425, 7281, 7423, 7424, 600},{27,1,5,8,18},{0},"Chemistry"},
	{7424,1,{595, 594, 3561, 4032},{546,27,1,1},{0},"Chemistry"},
	{7423,1,{595, 594, 3561, 4032},{546,27,1,1},{0},"Chemistry"},
	{7385,50,{595, 594, 7384},{1,1,1},{0},"Chemistry"},
	{6390,40,{597, 3561, 599, 511, 596},{8,1,1,91,18},{0},"Chemistry"},
	{670,100,{510, 528, 1149},{4,4,1},{0},"Chemistry"},
	{518,100,{510},{1},{0},"Chemistry"},
	{1149,100,{510},{4},{0},"Chemistry"},
	{1808,30,{566, 511, 599, 596, 594},{237,18,1,38,18},{0},"Chemistry"},
	{1809,25,{595, 594},{36,36},{0},"Chemistry"},
	{3561,25,{566, 1692},{36,1},{0},"Chemistry"},
	
	{6789,20,{554, 595, 594, 674, 511},{1,546,546,73,1456},{0},"Tuning"}, // Гибрид
	
	{6518,1,{511, 595, 594, 674, 3561},{720,55,55,18,10},{0},"Tuning"},
	{3915,1,{1108, 674, 597, 1186, 511},{4,36,27,1,720},{0},"Tuning"},
	{4125,1,{595, 594, 781, 511, 4032},{46,46,5,91,91},{0},"Tuning"},
	{3461,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3462,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3463,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3464,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3465,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3471,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3472,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3473,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3474,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3466,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3467,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3468,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3469,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{3470,3,{1107, 1108, 674, 511, 566},{1,1,8,728,455},{0},"Tuning"},
	{2326,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2329,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2332,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2335,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2338,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2341,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2344,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2347,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2350,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2353,3,{1107, 1108, 1109, 674, 511},{4,4,4,17,819},{0},"Tuning"},
	{2354,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2355,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2356,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2357,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2358,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2359,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2360,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2361,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2362,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2363,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2364,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2365,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2366,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2367,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2368,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2369,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2370,3,{809, 565, 1692, 594, 595},{146,55,91,46,46},{0},"Tuning"},
	{2563,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2564,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2565,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2566,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2567,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2568,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2569,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2570,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2571,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2572,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2573,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2574,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2575,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2576,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2577,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2578,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"},
	{2579,3,{1107, 1108, 674, 511, 597},{1,1,4,728,27},{0},"Tuning"}
};

new Float:CentralMarketPosition[][] =
{
	{1108.891235, -1456.265747, 15.839882, 90.0}, {1108.891235, -1442.765747, 15.839882, 90.0}, {1108.891235, -1438.265747, 15.839882, 90.0}, {1108.891235, -1433.765747, 15.839882, 90.0}, 
	{1108.891235, -1460.765747, 15.839882, 90.0}, {1108.891235, -1465.265747, 15.839882, 90.0}, {1127.379761, -1438.382690, 15.839882, -90.0},{1127.379761, -1442.882690, 15.839882, -90.0},
	{1127.379761, -1447.382690, 15.839882, -90.0},{1127.379761, -1451.882690, 15.839882, -90.0},{1127.379761, -1456.382690, 15.839882, -90.0},{1127.379761, -1460.882690, 15.839882, -90.0},
	{1130.381714, -1438.265747, 15.839882, 90.0},{1130.381714, -1442.765747, 15.839882, 90.0},{1130.381714, -1447.265747, 15.839882, 90.0},{1130.381714, -1451.765747, 15.839882, 90.0},
	{1130.381714, -1456.265747, 15.839882, 90.0},{1130.381714, -1460.765747, 15.839882, 90.0},{1148.389282, -1433.882690, 15.839882, -90.0},{1148.389282, -1438.382690, 15.839882, -90.0},
	{1148.389282, -1442.882690, 15.839882, -90.0},{1148.389282, -1451.882690, 15.839882, -90.0},{1148.389282, -1456.382690, 15.839882, -90.0},{1148.389282, -1460.882690, 15.839882, -90.0},
	{1148.389282, -1465.38269, 15.839882, -90.0},{1107.108154, -1472.996582, 15.839882, 70.0}, {1105.557983, -1477.374146, 15.839882, 70.0}, {1150.190308, -1473.239014, 15.839882, -70.0},
	{1151.854492, -1477.803223, 15.839882, -70.0},{1118.607178, -1475.552490, 15.839882, -90.0},{1118.607178, -1484.552490, 15.839882, -90.0},{1118.607178, -1489.052490, 15.839882, -90.0},
	{1118.607178, -1493.552490, 15.839882, -90.0},{1118.607178, -1502.552490, 15.839882, -90.0},{1138.081787, -1515.444458, 15.839882, -159.140060},{1134.158325, -1516.867920, 15.839882, -159.140060},
	{1122.245117, -1517.034790, 15.839882, 161.099991},{1118.065796, -1515.548706, 15.839882, 161.099991},{1108.891235, -1449.364990, 15.839882, 90.0},{1096.981201, -1484.738647, 22.894651},
	{1159.981567, -1493.728149, 22.894651, -179.999985},{1154.372314, -1484.676758, 22.894651},{1148.603394, -1484.670532, 22.894651},{1142.839722, -1484.654419, 22.894651},{1137.175415, -1484.646484, 22.894651},
	{1120.357666, -1484.618164, 22.894651},{1114.622314, -1484.608032, 22.894651},{1108.499756, -1484.597290, 22.894651},{1102.840332, -1484.689575, 22.894651},{1096.864258, -1493.736694, 22.894651, -179.999985},
	{1102.723389, -1493.687622, 22.894651, -179.999985},{1108.382813, -1493.595337, 22.894651, -179.999985},{1114.505371, -1493.606079, 22.894651, -179.999985},{1120.240723, -1493.616211, 22.894651, -179.999985},
	{1137.058472, -1493.644531, 22.894651, -179.999985},{1142.722778, -1493.652466, 22.894651, -179.999985},{1148.486450, -1493.668579, 22.894651, -179.999985}, {1154.255371, -1493.674805, 22.894651, -179.999985}, 
	{1160.098511, -1484.730103, 22.894651}
};

enum centralMarketInfo
{
	crObject,
	crOwnedId,
	crStatusId
}
new CentralMarket[sizeof(CentralMarketPosition)][centralMarketInfo],
    CentralMarketItems[sizeof(CentralMarketPosition)][2][4][300];

new AksVidStatus[MAX_PLAYERS][8],
	ferma[MAX_PLAYERS],
	Text:Kapture;

// нефтевышки
new
	NeftPick[2],
	Text3D:NeftText[2][17],
	NeftTimer[2][17],
	NeftBizID[2][17] = { {202,201,203,204,205,206,207,208}, {331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347 } };

new Float:NeftPos[2][17][3] =
{
	{
		{658.8916,3071.4626,12.9791}, {2634.7192, 470.5877, 12.9295}, {1361.7963,-262.0162,14.3253}, {-3044.1843,-248.4787,12.8927}, {-2700.3667,-938.1588,12.8004}, {3106.3762,-293.3203,13.5266}, {183.0540,3243.9963,12.7203}, {-1069.3047,-3131.7344,13.0486}, 
		{0.0,0.0,0.0}, {0.0,0.0,0.0}, {0.0,0.0,0.0}, {0.0,0.0,0.0}, {0.0,0.0,0.0}, {0.0,0.0,0.0}, {0.0,0.0,0.0}, {0.0,0.0,0.0}, {0.0,0.0,0.0}
	},

	{
		{353.6994, 1304.5513, 13.3625}, {374.9533, 1336.2915, 11.5470}, {419.6307, 1414.9570, 8.5656}, {405.8571, 1466.9901, 8.1906}, {423.0797, 1514.5818, 12.0470}, {434.5796, 1568.3940, 12.7844}, {487.1561, 1529.4365, 1.4533}, {435.0577, 1270.9688, 10.0236}, 
		{534.6563, 1473.6636, 5.6047}, {500.5862, 1390.8580, 4.8986}, {490.8221, 1309.6510, 10.0656}, {578.1891, 1427.1838, 12.3313}, {563.0025, 1311.7739, 11.2688}, {587.8487, 1341.9747, 11.1876}, {628.3536, 1357.1216, 13.1828}, {601.2927, 1502.9425, 9.0578}, {648.6194, 1472.5239, 9.6955}
	}
};

new ShopEatPick[2],
	ShopEatObj[2],
	EatInfo[40];

//////////////////////////////////////////
new TimetoReturn[MAX_PLAYERS],
	Vnedren[MAX_PLAYERS],
	setcheck[MAX_PLAYERS],
	ShowHouse[MAX_PLAYERS][151],
	Getemer[MAX_PLAYERS],
	Ingatre[MAX_PLAYERS],
	kasmenu[MAX_PLAYERS],
	mehan[MAX_PLAYERS],
	dilo[MAX_PLAYERS],
	TimeBus[MAX_PLAYERS],
	deal[MAX_PLAYERS],
	gpss[MAX_PLAYERS],
	lomanim[MAX_PLAYERS],
	medlomka[MAX_PLAYERS],
	startlomka[MAX_PLAYERS],
	cuffer[MAX_PLAYERS],
	EngineStalled[MAX_PLAYERS],
	Carskill[MAX_PLAYERS],
	rabden[MAX_PLAYERS],
	PlayerText:contd[MAX_PLAYERS][33];

new
	bool:AnimPlayed[MAX_PLAYERS char],
	bool:selfi[MAX_PLAYERS char];

new caoffer[MAX_PLAYERS],
	cartrade[MAX_PLAYERS],
	cardop[MAX_PLAYERS],
	ferman[MAX_PLAYERS],
	selfrac[MAX_PLAYERS],
	ViborSERIU[MAX_PLAYERS],
	BusTime[MAX_PLAYERS],
	BusMoney[MAX_PLAYERS],
	jlock[MAX_PLAYERS],
	InJobs[MAX_PLAYERS],
	kostiKos[MAX_PLAYERS],
	engines[MAX_PLAYERS],
	Predlog[MAX_PLAYERS],
	onkey[MAX_PLAYERS],
	Healttime[MAX_PLAYERS],
	ReReport[MAX_PLAYERS],
	bool:craftopen[MAX_PLAYERS char],
	TimeMessage[MAX_PLAYERS],
	vipob[MAX_PLAYERS],
	sellcarto[MAX_PLAYERS],
	PlayerAFK[MAX_PLAYERS],
	PlayerAFKTime[MAX_PLAYERS][2],
	bumboxobject[MAX_PLAYERS],
	Float:BumBoxPos[MAX_PLAYERS][3],
	Text3D:bumbox3D[MAX_PLAYERS],
	area_boombox[MAX_PLAYERS],
	CarSletInfo[2];

new PlayerText:FamMenu[MAX_PLAYERS][93] = {{PlayerText:-1, ...}, ...};

enum tInfo
{
	tOpen,
	tItem[30],
	tItemCount[30],
	tItemLevel[30],
	tItemProc[30],
	tItemIdentificator[30],
	tItemColor[30]
};

new TrunkInfo[MAX_VEHICLES][tInfo];

//durak
new PlayerText:DurakTD[MAX_PLAYERS][36];
new PlayerText:BitCard[MAX_PLAYERS][13];
#define MAX_STOLS 6
#define MAX_KARTS 37
enum cartsa
{
	cardTexture[14],
	cardMast[10],
	cardValue,
	cardStatus
};
new CardInfo[MAX_KARTS][cartsa] =
{
	//Шестерка
	{"PUSTO","Пусто",-1,0},
	{"ld_card:cd6c","Крести",6,0},
	{"ld_card:cd6d","Буби",6,0},
	{"ld_card:cd6h","Черви",6,0},
	{"ld_card:cd6s","Пики",6,0},
	//Семёрка
	{"ld_card:cd7c","Крести",7,0},
	{"ld_card:cd7d","Буби",7,0},
	{"ld_card:cd7h","Черви",7,0},
	{"ld_card:cd7s","Пики",7,0},
	//Восьмерка
	{"ld_card:cd8c","Крести",8,0},
	{"ld_card:cd8d","Буби",8,0},
	{"ld_card:cd8h","Черви",8,0},
	{"ld_card:cd8s","Пики",8,0},
	//Девятка
	{"ld_card:cd9c","Крести",9,0},
	{"ld_card:cd9d","Буби",9,0},
	{"ld_card:cd9h","Черви",9,0},
	{"ld_card:cd9s","Пики",9,0},
	//Десятка
	{"ld_card:cd10c","Крести",10,0},
	{"ld_card:cd10d","Буби",10,0},
	{"ld_card:cd10h","Черви",10,0},
	{"ld_card:cd10s","Пики",10,0},
	//Валет
	{"ld_card:cd11c","Крести",11,0},
	{"ld_card:cd11d","Буби",11,0},
	{"ld_card:cd11h","Черви",11,0},
	{"ld_card:cd11s","Пики",11,0},
	//Дама
	{"ld_card:cd12c","Крести",12,0},
	{"ld_card:cd12d","Буби",12,0},
	{"ld_card:cd12h","Черви",12,0},
	{"ld_card:cd12s","Пики",12,0},
	//Король
	{"ld_card:cd13c","Крести",13,0},
	{"ld_card:cd13d","Буби",13,0},
	{"ld_card:cd13h","Черви",13,0},
	{"ld_card:cd13s","Пики",13,0},
	//Туз
	{"ld_card:cd1c","Крести",14,0},
	{"ld_card:cd1d","Буби",14,0},
	{"ld_card:cd1h","Черви",14,0},
	{"ld_card:cd1s","Пики",14,0}
};
enum stolkaz
{
	stolStatus,
	Float:stolPosX,
	Float:stolPosY,
	Float:stolPosZ,
	stolCards,
	stolKoriz,
	stolBet,
	stolPlayers,
	stolTime,
	stolXod,
	stolBit,
	stolAcceptBit[6],
	stolCardBan[36],
	stolPlayer[6],
	stolBitCard[12]
};
new StolInfo[MAX_STOLS][stolkaz] =
{
	{0,2237.1096,1477.6107,1009.8145,36,0,100,0,30,0,0,0,0,0,0},
	{0,2251.5615,1473.3494,1009.8145,36,0,500,0,30,0,0,0,0,0,0},
	{0,2253.6414,1479.4736,1009.8145,36,0,1000,0,30,0,0,0,0,0,0},
	{0,2262.4744,1465.7020,1009.8145,36,0,5000,0,30,0,0,0,0,0,0},
	{0,2251.7061,1449.0052,1009.8145,36,0,10000,0,30,0,0,0,0,0,0},
	{0,2254.1968,1442.9406,1009.8145,36,0,25000,0,30,0,0,0,0,0,0}
};
new Text3D:stolText[MAX_STOLS];
new CardMasive[MAX_PLAYERS][36];
#define MAX_CONTAINERS 9
enum Container //warp4
{
	Float:cX,
	Float:cY,
	Float:cZ,
	Float:cPrizeX,
	Float:cPrizeY,
	Float:cPrizeZ,
	cClass[64],
	cEngClass[64],
	cMinStavka,
	cCash,
	cOwned[256],
	cTime,
	cPrizes[512],
	cPrizeCol[6],
	cStatus,
	cState,
	cPlayerID,
	cPickup
}
new ContainerInfo[MAX_CONTAINERS][Container] =
{
	{-1733.0114,157.0481,3.5692,-1733.1810,154.7838,4.6276,"Премиум","Premium",190000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1722.6156,186.6828,3.5547,-1722.5763,184.4042,4.6131,"Обычный","Usual",60000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1733.1455,189.2476,3.5662,-1733.1227,186.9687,4.6276,"Премиум","Premium",190000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1739.3982,191.8381,3.5547,-1739.4130,189.5647,4.6131,"Обычный","Usual",60000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1722.4713,154.0458,3.5547,-1722.5385,151.7642,4.6131,"Средний","Middle",120000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1722.5424,123.6993,3.5547,-1722.6097,121.4370,4.6131,"Ультра","Ultra",260000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1729.1974,137.4379,3.5692,-1729.1588,135.0106,4.6276,"Средний","Middle",120000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1739.4297,139.3282,3.5547,-1739.4297,137.0479,4.6131,"Премиум","Premium",190000000,0,"-",0,"",0,0,0,INVALID_PLAYER_ID},
	{-1733.1984,121.1674,3.5692,-1733.1869,118.9031,4.6276,"Бизнес","Business",40000, 0,"-",0,"-",0,0,1,INVALID_PLAYER_ID}//1
};
new Text3D:Conteinertext[10],
	Text3D:PrizeCont[10],
	gPremiumContDor[18],
	CashBack[MAX_PLAYERS][10],
	bool:containeropen[MAX_PLAYERS char],
	pagecontainer[MAX_PLAYERS],
	ContMas[MAX_CONTAINERS][6],
	ContMasTake[MAX_CONTAINERS][6],
	PlayerText:ContPrize[MAX_PLAYERS][64];

#define GetDataTrade(%0,%1) TradeInfo[%0][%1]
#define SetDataTrade(%0,%1,%2) TradeInfo[%0][%1] = %2

enum tradeInf
{
	tradeTime,
	tradeAccept,
	tradeTimer,
	tradePlayer,
	tradeLastTime,
	tradeSEND,
	tradeSendId,
	bool:tradeSendTrade,
	tradeItem[10],
	tradeItemCount[10]
};
new TradeInfo[MAX_PLAYERS][tradeInf];

new PlayerText:TradeTD[MAX_PLAYERS][23],
	PlayerText:KletkaTrade[MAX_PLAYERS][20],
	PlayerText:KletkaTradeText[MAX_PLAYERS][40],
	PlayerText:KletkaTradeLevel[MAX_PLAYERS][20];

/// SHAR
enum sharrik
{
	bool:sharStatus,
	Float:sharPos[3],
	Text3D:sharText,
	sharVehicle,
	sharObject[6],
	sharProgress,
	sharKey
};
new SharInfo[MAX_PLAYERS][sharrik];
new PlayerText:SharTD_TD[MAX_PLAYERS][11];

////
enum getgunmas
{
	getModel,
	getID,
	getName[14],
	getNameRu[16],
	getAmmo,
	getMaterials,
	Float:getRot[4]
};
new GetGunMas[6][getgunmas] = 
{
	{1242, -1, "Body Armour", "бронежилет", 0, 0, {0.000000, 0.000000, 0.000000, 1.000000}},
	{347, 23, "Taser", "тазер", 10, 120, {0.000000, -15.000000, 0.000000, 1.400000}},
	{334, 3, "Nightstick", "дубинка", 1, 0, {0.000000, 0.000000, 0.000000, 1.400000}},
	{348, 24, "Desert Eagle", "пистолет Eagle", 50, 50, {0.000000, -15.000000, 0.000000, 1.400000}},
	{356, 31, "M4", "автомат M4", 150, 50, {0.000000, -15.000000, 0.000000, 2.000000}},
	{349, 25, "Shotgun", "дробовик", 30, 50, {0.000000, -15.000000, 0.000000, 2.000000}}
};
enum posGetGun
{
	posGunModel,
	posGunTD,
	Float:posGunPos[2]
};
new PositionGetGun[16][posGetGun] = 
{
	{1242, 3, {273.000000, 171.000000}},
	{347, 2, {349.000000, 179.000000}},
	{1242, 4, {218.000000, 169.000000}},
	{347, 3, {286.500000, 182.000000}},
	{334, 2, {346.500000, 180.000000}},
	{347, 4, {227.500000, 179.000000}},
	{334, 3, {280.000000, 180.000000}},
	{348, 2, {349.000000, 179.000000}},
	{334, 4, {225.000000, 180.000000}},
	{348, 3, {286.500000, 182.000000}},
	{356, 2, {349.000000, 179.000000}},
	{348, 4, {227.500000, 179.000000}},
	{356, 3, {283.500000, 180.000000}},
	{349, 2, {349.000000, 179.000000}},
	{356, 4, {227.500000, 179.000000}},
	{349, 3, {283.500000, 180.000000}}
};
//// lift
enum liftinfo
{
	liftName[32],
	Float:liftPosX,
	Float:liftPosY,
	Float:liftPosZ,
	Float:liftTextPosX,
	Float:liftTextPosY,
	Float:liftTextPosZ,
	liftDoor,
	liftDoorOne,
	liftDoorTwo,
	liftID,
	liftWorld,
	liftInterior
};
new LiftInfo[19][liftinfo] =
{
	{"-1 этаж (паркинг)", 1392.4390,0.0517,1001.1426, 1388.1428,-1.3716,1000.9371, 0, 0, 1, 0, 1, 2},
	{"1 этаж (консъерж)", 1784.8783,-1302.0930,13.3988, 1789.0511, -1301.0000, 13.7961, 0, 2,3, 0, 0, 0},
	{"8 этаж", 1784.5477,-1301.6952,54.7763, 1789.1403,-1300.7369,54.7763, 0, 4,5, 0, 1, 0},
	{"10 этаж", 1784.6011,-1301.8182,65.8160, 1789.1447,-1300.7396,65.8125, 0, 6,7, 0, 1, 0},
	{"12 этаж", 1784.6263,-1301.8021,76.7161, 1789.2466,-1300.7584,76.6719, 0, 8,9, 0, 1, 0},
	{"14 этаж", 1784.7288,-1301.9883,87.0972, 1789.1547,-1300.7263,87.5859, 0, 10,11, 0, 1, 0},
	{"16 этаж", 1784.7213,-1301.6985,98.5661, 1789.1547,-1300.7263,98.5000, 0, 12,13, 0, 1, 0},
	{"18 этаж", 1784.7213,-1301.6985,109.9832, 1789.0784,-1300.7343,109.3594, 0, 14,15, 0, 1, 0},
	{"20 этаж", 1784.6520,-1301.8075,120.3861, 1789.1219,-1300.7351,120.2656, 0, 16,17, 0, 1, 0},
	{"-1 этаж (паркинг)", 1413.4983,-25.6160,1001.0623, 1412.5302,-21.2737,1000.9316, 0, 18, 19, 1, 2, 2},
	{"1 этаж (консъерж)", 289.6451,-1611.4185,33.1792, 285.0898,-1611.5826,33.0933, 0, 20,21, 1, 0, 0},
	{"6 этаж", 289.4380,-1611.2986,65.1412, 285.1188,-1611.5984,65.0058, 0, 22, 23, 1, 6, 0},
	{"7 этаж", 289.3662,-1611.2590,69.8412, 285.1513,-1611.6039,69.5069, 0, 24, 25, 1, 7, 0},
	{"8 этаж", 289.4746,-1611.3070,74.3412, 285.1969,-1611.6177,74.0000, 0, 26, 27, 1, 8, 0},
	{"9 этаж", 289.4559,-1611.3252,78.8412, 285.1136,-1611.5974,78.5000, 0, 28, 29, 1, 9, 0},
	{"10 этаж", 289.5034,-1611.3408,83.0000, 285.1388,-1611.6154,83.0000, 0, 30, 31, 1, 10, 0},
	{"11 этаж", 289.3247,-1611.3419,87.8412, 285.1242,-1611.5992,87.5000, 0, 32, 33, 1, 11, 0},
	{"12 этаж", 289.4249,-1611.3401,92.3412, 285.0924,-1611.5936,92.0000, 0, 34, 35, 1, 12, 0},
	{"13 этаж", 289.5081,-1611.3710,96.8412, 285.0975,-1611.5950,96.5000, 0, 36, 37, 1, 13, 0}
};
new LiftNext[2] = {-1,-1},
	LiftPosition[2],
	LiftMoving[2],
	Text3D:LiftText[sizeof(LiftInfo)],
	Text3D:LiftSelectText[sizeof(LiftInfo)],
	DoorLift[sizeof(LiftInfo)*2];

////////

enum doorLift
{
	doorModel,
	doorWorld,
	doorInterior,
	Float:doorPos[12]
};
new DoorLiftInfo[38][doorLift] =
{
	{18756, 1, 2, {1390.456909, 1.533970, 1001.877625, 0.000014, 0.000007, 89.999924, 1392.256909, 1.533970, 1001.877625, 0.000014, 0.000007, 89.999924}},
	{18757, 1, 2, {1390.456909, 1.533970, 1001.877625, 0.000014, 0.000007, 89.999924, 1388.656909, 1.533970, 1001.877625, 0.000014, 0.000007, 89.999924}},
	{18757, 0, 0, {1786.732910, -1303.334033, 14.602706, 0.000000, 0.000000, -88.700103, 1788.53291, -1303.334033, 14.602706, 0.000000, 0.000000, -88.700103}},
	{18757, 0, 0, {1784.732910, -1303.334033, 14.602706, 0.000000, 0.000000, -88.700103, 1783.13291, -1303.334033, 14.602706, 0.000000, 0.000000, -88.700103}},
	{18756, -1, -1, {1786.672363, -1299.344727, 55.682762, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 55.682762, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 55.682762, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 55.682762, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 66.602760, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 66.602760, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 66.602760, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 66.602760, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 77.502792, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 77.502792, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 77.502792, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 77.502792, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 88.442833, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 88.442833, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 88.442833, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 88.442833, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 99.352806, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 99.352806, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 99.352806, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 99.352806, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 110.272804, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 110.272804, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 110.272804, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 110.272804, 0.000014, 0.000007, 89.999924}},
	{18756, -1, -1, {1786.672363, -1299.344727, 121.172821, 0.000014, 0.000007, 89.999924, 1788.472363, -1299.344727, 121.172821, 0.000014, 0.000007, 89.999924}},
	{18757, -1, -1, {1786.675659, -1299.344360, 121.172821, 0.000014, 0.000007, 89.999924, 1784.875659, -1299.344360, 121.172821, 0.000014, 0.000007, 89.999924}},
	/////
	{18756, 2, 2, {1414.922485, -23.778519, 1001.862488, 0.000000, 0.000007, 0.000000, 1414.922485, -25.428543, 1001.862487, 0.000000, 0.000007, 0.000000}},
	{18757, 2, 2, {1414.925903, -23.778299, 1001.862488, 0.000000, 0.000007, 0.000000, 1414.925903, -22.078268, 1001.862487, 0.000000, 0.000007, 0.000000}},
	{18756, 0, 0, {287.886505, -1609.613892, 33.983269, 0.000029, 0.000004, 80.200027, 289.562103, -1609.904418, 33.983268, 0.000029, 0.000003, 80.200027}},
	{18757, 0, 0, {287.885406, -1609.620483, 33.983269, 0.000029, 0.000004, 80.200027, 286.190216, -1609.326782, 33.983268, 0.000029, 0.000003, 80.200027}},
	{18756, 6, 0, {287.886505, -1609.643921, 65.935272, 0.000029, 0.000004, 80.200027, 289.542419, -1609.931030, 65.935272, 0.000029, 0.000003, 80.200027}},
	{18757, 6, 0, {287.885406, -1609.650513, 65.935272, 0.000029, 0.000004, 80.200027, 286.234344, -1609.333374, 65.935272, 0.000029, 0.000003, 80.200027}},
	{18756, 7, 0, {287.886505, -1609.643921, 70.435272, 0.000029, 0.000004, 80.200027, 289.522796, -1609.927612, 70.435272, 0.000029, 0.000003, 80.200027}},
	{18757, 7, 0, {287.885406, -1609.650513, 70.435272, 0.000029, 0.000004, 80.200027, 286.242767, -1609.345336, 70.435272, 0.000029, 0.000003, 80.200027}},
	{18756, 8, 0, {287.886505, -1609.643921, 74.935272, 0.000029, 0.000004, 80.200027, 289.532409, -1609.929077, 74.935272, 0.000029, 0.000003, 80.200027}},
	{18757, 8, 0, {287.885406, -1609.650513, 74.935272, 0.000029, 0.000004, 80.200027, 286.231231, -1609.353515, 74.935272, 0.000029, 0.000003, 80.200027}},
	{18756, 9, 0, {287.886505, -1609.643921, 79.435272, 0.000029, 0.000004, 80.200027, 289.493011, -1609.922363, 79.435272, 0.000029, 0.000003, 80.200027}},
	{18757, 9, 0, {287.885406, -1609.650513, 79.435272, 0.000029, 0.000004, 80.200027, 286.256317, -1609.327880, 79.435272, 0.000029, 0.000003, 80.200027}},
	{18756, 10, 0, {287.886505, -1609.643921, 83.935272, 0.000029, 0.000004, 80.200027, 289.483215, -1609.920776, 83.935272, 0.000029, 0.000003, 80.200027}},
	{18757, 10, 0, {287.885406, -1609.650513, 83.935272, 0.000029, 0.000004, 80.200027, 286.243133, -1609.345214, 83.935272, 0.000029, 0.000003, 80.200027}},
	{18756, 11, 0, {287.886505, -1609.643921, 88.435272, 0.000029, 0.000004, 80.200027, 289.512756, -1609.925903, 88.435272, 0.000029, 0.000003, 80.200027}},
	{18757, 11, 0, {287.885406, -1609.650513, 88.435272, 0.000029, 0.000004, 80.200027, 286.243225, -1609.345947, 88.435272, 0.000029, 0.000003, 80.200027}},
	{18756, 12, 0, {287.886505, -1609.643921, 92.935272, 0.000029, 0.000004, 80.200027, 289.492889, -1609.921997, 92.935272, 0.000029, 0.000003, 80.200027}},
	{18757, 12, 0, {287.885406, -1609.650513, 92.935272, 0.000029, 0.000004, 80.200027, 286.243194, -1609.345825, 92.935272, 0.000029, 0.000003, 80.200027}},
	{18756, 13, 0, {287.886505, -1609.643921, 97.435272, 0.000029, 0.000004, 80.200027, 289.472961, -1609.918457, 97.435272, 0.000029, 0.000003, 80.200027}},
	{18757, 13, 0, {287.885406, -1609.650513, 97.435272, 0.000029, 0.000004, 80.200027, 286.272613, -1609.350708, 97.435272, 0.000029, 0.000003, 80.200027}}
};

enum IntIntoWarp
{
	worldInt,
	Float:PosInt[4]
};

new InteriorInfo[146][IntIntoWarp] = 
{
	{11,	{2003.1178, 1015.1948,33.008,351.5789}},
	{5,		{770.8033, -0.7033,1000.7267,22.8599}},
	{3,		{974.0177, -9.5937,1001.1484,22.6045}},
	{3,		{961.9308, -51.9071,1001.1172,95.5381}},
	{3,		{830.6016, 5.9404,1004.1797,125.8149}},
	{3,		{1037.8276, 0.397,1001.2845,353.9335}},
	{3,		{1212.1489, -28.5388,1000.9531,170.5692}},
	{18,	{1290.4106, 1.9512,1001.0201,179.9419}},
	{1,		{1412.1472, -2.2836,1000.9241,114.661}},
	{3,		{1527.0468, -12.0236,1002.0971,350.0013}},
	{2,		{1523.5098, -47.8211,1002.2699,262.7038}},
	{3,		{612.2191, -123.9028,997.9922,266.5704}},
	{3,		{512.9291, -11.6929,1001.5653,198.7669}},
	{3,		{418.4666, -80.4595,1001.8047,343.2358}},
	{3,		{386.5259, 173.6381,1008.3828,63.7399}},
	{3,		{288.4723, 170.0647,1007.1794,22.0477}},
	{3,		{206.4627, -137.7076,1003.0938,10.9347}},
	{3,		{-100.2674, -22.9376,1000.7188,17.285}},
	{3,		{-201.2236, -43.2465,1002.2734,45.8613}},
	{17,	{-202.9381, -6.7006,1002.2734,204.2693}},
	{17,	{-25.7220, -187.8216,1003.5469,5.0760}},
	{5,		{454.9853, -107.2548,999.4376,309.0195}},
	{5,		{372.5565, -131.3607,1001.4922,354.2285}},
	{17,	{378.026, -190.5155,1000.6328,141.0245}},
	{7,		{315.244, -140.8858,999.6016,7.4226}},
	{5,		{225.0306, -9.1838,1002.218,85.5322}},
	{2,		{611.3536, -77.5574,997.9995,320.9263}},
	{10,	{246.0688, 108.9703,1003.2188,0.2922}},
	{10,	{6.0856, -28.8966, 1003.5494,5.0365}},
	{7,		{773.7318, -74.6957,1000.6542,5.2304}},
	{1,		{621.4528, -23.7289,1000.9219,15.6789}},
	{1,		{445.6003, -6.9823,1000.7344,172.2105}},
	{1,		{285.8361, -39.0166,1001.5156,0.7529}},
	{1,		{204.1174, -46.8047,1001.8047,357.5777}},
	{1,		{245.2307, 304.7632,999.1484,273.4364}},
	{3,		{290.623, 309.0622,999.1484,89.9164}},
	{5,		{322.5014, 303.6906,999.1484,8.1747}},
	{1,		{-2041.2334, 178.3969,28.8465,156.2153}},
	{1,		{-1402.6613, 106.3897,1032.2734,105.1356}},
	{7,		{-1403.0116, -250.4526,1043.5341,355.8576}},
	{2,		{1204.6689, -13.5429,1000.9219,350.0204}},
	{10,	{2016.1156, 1017.1541,996.875,88.0055}},
	{1,		{-741.8495, 493.0036,1371.9766,71.7782}},
	{2,		{2447.8704, -1704.4509,1013.5078,314.5253}},
	{1,		{2527.0176, -1679.2076,1015.4986,260.9709}},
	{10,	{-1129.8909, 1057.5424,1346.4141,274.5268}},
	{3,		{2496.0549, -1695.1749,1014.7422,179.2174}},
	{10,	{366.0248, -73.3478,1001.5078,292.0084}},
	{1,		{2233.9363, 1711.8038,1011.6312,184.3891}},
	{2,		{269.6405, 305.9512,999.1484,215.6625}},
	{2,		{414.2987, -18.8044,1001.8047,41.4265}},
	{2,		{1.1853, -3.2387,999.4284,87.5718}},
	{18,	{-30.9875, -89.6806, 1003.5469,359.8401}},
	{18,	{161.4048, -94.2416,1001.8047,0.7938}},
	{3,		{-2638.8232, 1407.3395,906.4609,94.6794}},
	{5,		{1267.8407, -776.9587,1091.9063,231.3418}},
	{2,		{2536.5322, -1294.8425,1044.125,254.9548}},
	{5,		{2350.1597, -1181.0658,1027.9766,99.1864}},
	{1,		{-2158.6731, 642.09,1052.375,86.5402}},
	{10,	{419.8936, 2537.1155,10,67.6537}},
	{14,	{256.9047, -41.6537,1002.0234,85.8774}},
	{14,	{204.1658, -165.7678,1000.5234,181.7583}},
	{12,	{1133.35, -7.8462,1000.6797,165.8482}},
	{14,	{-1420.4277, 1616.9221,1052.5313,159.1255}},
	{17,	{493.1443, -24.2607,1000.6797,356.9864}},
	{18,	{1727.2853, -1642.9451,20.2254,172.4193}},
	{16,	{-202.842, -24.0325,1002.2734,252.8154}},
	{5,		{2233.6919, -1112.8107,1050.8828,8.6483}},
	{6,		{1211.2484, 1049.0234,359.941,170.9341}},
	{9,		{2319.1272, -1023.9562,1050.2109,167.3959}},
	{10,	{2261.0977, -1137.8833,1050.6328,266.88}},
	{17,	{-944.2402, 1886.1536,5.0051,179.8548}},
	{16,	{-26.1856, -140.9164, 1003.5469,2.9087}},
	{15,	{2217.281, -1150.5349,1025.7969,273.7328}},
	{1,		{1.5491, 23.3183,1199.5938,359.9054}},
	{1,		{681.6216, -451.8933,-25.6172,166.166}},
	{3,		{234.6087, 1187.8195,1080.2578,349.4844}},
	{2,		{225.5707, 1240.0643,1082.1406,96.2852}},
	{1,		{224.288, 1289.1907,1082.1406,359.868}},
	{5,		{239.2819, 1114.1991,1080.9922,270.2654}},
	{15,	{207.5219, -109.7448,1005.1328,358.62}},
	{15,	{295.1391, 1473.3719,1080.2578,352.9526}},
	{15,	{-1417.8927, 932.4482,1041.5313,0.7013}},
	{12,	{446.3247, 509.9662,1001.4195,330.5671}},
	{0,		{2306.3826, -15.2365,26.7496,274.49}},
	{0,		{2331.8984, 6.7816,26.5032,100.2357}},
	{0,		{663.0588, -573.6274,16.3359,264.9829}},
	{18,	{-227.5703, 1401.5544,27.7656,269.2978}},
	{0,		{-688.1496, 942.0826,13.6328,177.6574}},
	{0,		{-1916.1268, 714.8617,46.5625,152.2839}},
	{0,		{818.7714, -1102.8689,25.794,91.1439}},
	{0,		{255.2083, -59.6753,1.5703,1.4645}},
	{2,		{446.626, 1397.738,1084.3047,343.9647}},
	{5,		{227.3922, 1114.6572,1080.9985,267.459}},
	{5,		{227.7559, 1114.3844,1080.9922,266.2624}},
	{4,		{261.1165, 1287.2197,1080.2578,178.9149}},
	{4,		{291.7626, -80.1306,1001.5156,290.2195}},
	{4,		{449.0172, -88.9894,999.5547,89.6608}},
	{4,		{-27.844, -26.6737, 1003.5573,184.3118}},
	{0,		{2135.2004, -2276.2815,20.6719,318.59}},
	{4,		{306.1966, 307.819,1003.3047,203.1354}},
	{10,	{24.3769, 1341.1829,1084.375,8.3305}},
	{1,		{963.0586, 2159.7563,1011.0303,175.313}},
	{0,		{2548.4807, 2823.7429,10.8203,270.6003}},
	{0,		{215.1515, 1874.0579,13.1406,177.5538}},
	{4,		{221.6766, 1142.4962,1082.6094,184.9618}},
	{12,	{2323.7063, -1147.6509,1050.7101,206.5352}},
	{6,		{344.9984, 307.1824,999.1557,193.643}},
	{12,	{411.9707, -51.9217,1001.8984,173.3449}},
	{4,		{-1421.5618, -663.8262,1059.5569,170.9341}},
	{6,		{773.8887, -47.7698,1000.5859,10.7161}},
	{6,		{246.6695, 65.8039,1003.6406,7.9562}},
	{14,	{-1864.9434, 55.7325,1055.5276,85.8541}},
	{4,		{-262.1759, 1456.6158,1084.3672,82.459}},
	{5,		{22.861, 1404.9165,1084.4297,349.6158}},
	{5,		{140.3679, 1367.8837,1083.8621,349.2372}},
	{3,		{1494.8589, 1306.48,1093.2953,196.065}},
	{14,	{-1813.213, -58.012,1058.9641,335.3199}},
	{16,	{-1401.067, 1265.3706,1039.8672,178.6483}},
	{6,		{234.2826, 1065.229,1084.2101,4.3864}},
	{6,		{-68.5145, 1353.8485,1080.2109,3.5742}},
	{6,		{-2240.1028, 136.973,1035.4141,269.0954}},
	{6,		{297.144, -109.8702,1001.5156,20.2254}},
	{6,		{316.5025, -167.6272,999.5938,10.3031}},
	{15,	{-285.2511, 1471.197,1084.375,85.6547}},
	{6,		{-26.8339, -55.5846, 1003.5469,3.9528}},
	{6,		{442.1295, -52.4782,999.7167,177.9394}},
	{2,		{2182.2017, 1628.5848,1043.8723,224.8601}},
	{6,		{748.4623, 1438.2378,1102.9531,0.6069}},
	{8,		{2807.3604, -1171.7048,1025.5703,193.7117}},
	{9,		{366.0002, -9.4338,1001.8516,160.528}},
	{1,		{2216.1282, -1076.3052,1050.4844,86.428}},
	{1,		{2268.5156, 1647.7682,1084.2344,99.7331}},
	{2,		{2236.6997, -1078.9478,1049.0234,2.5706}},
	{3,		{-2031.1196, -115.8287,1035.1719,190.1877}},
	{8,		{2365.1089, -1133.0795,1050.875,177.3947}},
	{0,		{1168.512, 1360.1145,10.9293,196.5933}},
	{9,		{315.4544, 976.5972,1960.8511,359.6368}},
	{10,	{1893.0731, 1017.8958,31.8828,86.1044}},
	{11,	{501.9578, -70.5648,998.7578,171.5706}},
	{8,		{-42.5267, 1408.23,1084.4297,172.068}},
	{11,	{2283.3118, 1139.307,1050.8984,19.7032}},
	{9,		{84.9244, 1324.2983,1083.8594,159.5582}},
	{9,		{260.7421, 1238.2261,1084.2578,84.3084}},
	{0,		{-1658.1656, 1215.0002, 7.25, 103.9074}},
	{0,		{-1961.6281, 295.2378,35.4688,264.4891}}
};
//new NameInt[146][34] = {"Four Dragons' Managerial Suite", "Ganton Gym", "Brothel", "Brothel2", "Inside Track Betting", "Blastin' Fools Records", "The Big Spread Ranch", "Warehouse 1", "Warehouse 2", "B Dup's Apartment", "B Dup's Crack Palace", "Wheel Arch Angels", "OG Loc's House", "Barber Shop", "Planning Department", "Las Venturas Police Department", "Pro-Laps", "Sex Shop", "Las Venturas Tattoo parlor", "Lost San Fierro Tattoo parlor", "24/7 (version 1)", "Diner 1", "Pizza Stack", "Rusty Brown's Donuts", "Ammu-nation", "Victim", "Loco Low Co", "San Fierro Police Department", "24/7 (version 2 - large)", "Below The Belt Gym (Las Venturas)", "Transfenders", "World of Coq", "Ammu-nation (version 2)", "SubUrban", "Denise's Bedroom", "Helena's Barn", "Barbara's Love nest", "San Fierro Garage", "Oval Stadium", "8-Track Stadium", "The Pig Pen (strip club 2)", "Four Dragons", "Liberty City", "Ryder's house", "Sweet's House", "RC Battlefield", "The Johnson House", "Burger shot", "Caligula's Casino", "Katie's Lovenest", "Barber Shop 2 (Reece's)", "Angel Pine Trailer", "24/7 (version 3)", "Zip", "The Pleasure Domes", "Madd Dogg's Mansion", "Big Smoke's Crack Palace", "Burning Desire Building", "Wu-Zi Mu's", "Abandoned AC tower", "Wardrobe/Changing room", "Didier Sachs", "Casino (Redsands West)", "Kickstart Stadium", "Club", "Atrium", "Los Santos Tattoo Parlor", "Safe House group 1", "Safe House group 2", "Safe House group 3", "Safe House group 4", "Sherman Dam", "24/7 (version 4)", "Jefferson Motel", "Jet Interior", "The Welcome Pump", "Burglary House X1", "Burglary House X2", "Burglary House X3", "Burglary House X4", "Binco", "4 Burglary houses", "Blood Bowl Stadium", "Budget Inn Motel Room", "Palamino Bank", "Palamino Diner", "Dillimore Gas Station", "Lil' Probe Inn", "Torreno's Ranch", "Zombotech - lobby area", "Crypt in LS cemetery (temple)", "Blueberry Liquor Store", "Pair of Burglary Houses", "Crack Den", "Burglary House X11", "Burglary House X12", "Ammu-nation (version 3)", "Jay's Diner", "24/7 (version 5)", "Warehouse 3", "Michelle's Love Nest*", "Burglary House X14", "Sindacco Abatoir", "K.A.C.C. Military Fuels Depot", "Area 69", "Burglary House X13", "Unused Safe House", "Millie's Bedroom", "Barber Shop", "Dirtbike Stadium", "Cobra Gym", "Los Santos Police Department", "Los Santos Airport", "Burglary House X15", "Burglary House X16", "Burglary House X17", "Bike School", "Francis International Airport", "Vice Stadium", "Burglary House X18", "Burglary House X19", "Zero's RC Shop", "Ammu-nation (version 4)", "Ammu-nation (version 5)", "Burglary House X20", "24/7 (version 6)", "Secret Valley Diner", "Rosenberg's Office in Caligulas", "Fanny Batter's Whore House", "Colonel Furhberger's", "Cluckin' Bell", "The Camel's Toe Safehouse", "Caligula's Roof", "Old Venturas Strip Casino", "Driving School", "Verdant Bluffs Safehouse", "Bike School", "Andromada", "Four Dragons' Janitor's Office", "Bar", "Burglary House X21", "Willowfield Safehouse", "Burglary House X22", "Burglary House X23", "Otto's Autos", "Wang Cars"};
//////	
new bool:bumreader[MAX_PLAYERS char];

#define MAX_COMPLAINTS    50

new
    COMPLAINTS,
    zalobi[MAX_COMPLAINTS][95];

enum antidminfo
{
	zID,
    zName[130],
	zStatus,
	Float:zX,
	Float:zY,
	Float:zZ
};

new AntiDm[50][antidminfo],
	ANTIDMLOAD;

new Float:bandos[31][3]=
{
	{1969.6096, 997.5428, 9.9944},
	{1968.6158, 997.4865, 9.9944},
	{1967.9178, 999.7770, 9.9944},
	{1967.2932, 1001.6882, 9.9944},
	{1967.7502, 997.2044, 9.9944},
	{1966.9548, 996.6857, 9.9944},
	{1966.0038, 999.1619, 9.9944},
	{1965.3951, 1001.0662, 9.9944},
	{1966.3513, 996.0018, 9.9944},
	{1962.0671, 1001.0676, 9.9944},
	{1961.9653, 999.0728, 9.9944},
	{1960.2872, 1010.9075, 9.9944},
	{1960.1324, 1008.9031, 9.9944},
	{1960.0714, 1001.1841, 9.9944},
	{1959.9578, 999.1770, 9.9944},
	{1958.9606, 1004.5074, 9.9944},
	{1958.2957, 1011.0595, 9.9944},
	{1958.1289, 1009.0675, 9.9944},
	{1957.6340, 1006.0181, 9.9944},
	{1957.4564, 1003.1910, 9.9944},
	{1957.0471, 998.0496, 9.9944},
	{1956.3903, 1012.7440, 9.9944},
	{1956.7416, 998.9965, 9.9944},
	{1956.1296, 1004.6843, 9.9944},
	{1956.2115, 1011.8494, 9.9944},
	{1956.2501, 999.7631, 9.9944},
	{1955.7845, 1011.0013, 9.9944},
	{1955.5471, 1000.4015, 9.9944},
	{1955.1775, 1010.3227, 9.9944},
	{1954.7332, 1000.8130, 9.9944},
	{1954.3467, 1009.7750, 9.9944}
};

new
	bool:Phonestat[MAX_PLAYERS char],
	PlayerText:callname[MAX_PLAYERS];

new Text:kryg;
enum gtInfo
{
	gtID,
	gtGoID,
	Float:gtX,
	Float:gtY,
	Float:gtZ,
	Float:gtTPX,
	Float:gtTPY,
	Float:gtTPZ,
	gtState,
	gtStayed
}
new PlayerText:CraftSuper[MAX_PLAYERS][37],
	PlayerText:CraftNeedText[MAX_PLAYERS][5],
	PlayerText:CraftNeedTD[MAX_PLAYERS][5],
	PlayerText:CraftMenuBox[MAX_PLAYERS][10],
	PlayerText:CraftMenuText[MAX_PLAYERS][10],
	PlayerText:CraftColor[MAX_PLAYERS][12],
	CraftMassive[MAX_PLAYERS][10],
	besttimer[MAX_PLAYERS],
	PlayerText:TDinv[MAX_PLAYERS][7];
//
new Text:HInfoEnterDraw;
new Text:HInfoBuyDraw;
new Text:HInfoBG;

new PlayerText:OtherInvBox[MAX_PLAYERS][6];

new GotoInfo[MAX_PLAYERS][gtInfo];
new Text:Bandito[10];
new Text:BetText[MAX_PLAYERS];
new Text:BalanceText[MAX_PLAYERS];
new Text:Box;
new Text:Digit1[6];
new Text:Digit2[6];
new Text:Digit3[6];
new Slots[MAX_PLAYERS][3];
new SlotCounter[MAX_PLAYERS];
enum roulInf
{
	PrizeID,
	MaxValue,
	Chance
}
new RoulettePrizes[101][roulInf] =
{
    {114, 1, 1}, // skins
	{108, 1, 1}, // skins
	{107, 1, 1}, // skins
	{105, 1, 1}, //skins
	{309, 1, 2},
	{336, 1, 2},
	{337, 1, 2},
	{338, 1, 2},
	{393, 1, 2},
	{394, 1, 2},
	{396, 1, 2},
	{592, 5000000, 80},
	{365, 40, 120},
	{592, 16, 160},
	{550, 1, 1},
	{551, 1, 1},
	{552, 1, 1},
	{553, 1, 1},
	{593, 1, 1},
	{593, 1, 1},
	{593, 1, 1},
	{594, 1, 1},
	{594, 1, 1},
	{594, 1, 1},
	{595, 1, 1},
	{595, 1, 1},
	{596, 1, 1},
	{596, 1, 1},
	{597, 1, 1},
	{597, 1, 1},
	{598, 1, 1},
	{599, 1, 1},
	{600, 1, 1},
	{601, 1, 1},
	{602, 1, 1},
	{602, 1, 1},
	{335, 30,100},
	{401, 1, 5},
	{402, 1, 5},
	{403, 1, 5},
	{404, 1, 5},
	{405, 1, 5},
	{348, 1, 3},
	{355, 1, 3},
	{352, 1, 3},
	{362, 30, 66},
	{363, 30, 66},
	{364, 30, 66},
	{366, 10, 90},
	{408, 1, 3},
	{415, 1, 20},
	{418, 1, 3},
	{419, 1, 3},
	{420, 1, 3},
	{421, 1, 1},
	{531, 200, 70},
	{532, 200, 70},
	{533, 200, 70},
	{534, 200, 70},
	{535, 200, 70},
	{536, 200, 70},
	{538, 500, 33},
	//62 GOLDA -MAX
	{335, 30,100},
	{401, 1, 5},
	{402, 1, 5},
	{403, 1, 5},
	{348, 1, 3},
	{355, 1, 3},
	{352, 1, 3},
	{362, 15, 66},
	{363, 15, 66},
	{364, 15, 66},
	{366, 7, 90},
	{408, 1, 3},
	{415, 1, 20},
	{418, 1, 3},
	{419, 1, 3},
	{420, 1, 3},
	{421, 1, 1},
	{531, 100, 70},
	{536, 100, 70},
	{538, 200, 33},
	{592, 2500000, 80},
	{303, 1, 5},
	{304, 1, 5},
	{305, 1, 5},
	{578, 1, 3},
	{558, 1, 1},
	{559, 1, 1},
	{560, 1, 1},
	{561, 1, 1},
	{365, 25, 120},
	{592, 2500000, 160},
	//31 SILVER -MAX
	{538, 100, 33},
	{365, 15, 50},
	{592, 8, 160},
	{572, 1, 1},
	{362, 10, 50},
	{592, 500000, 80},
	{364, 7, 50},
	{123, 1, 1}
};


new Gambling[MAX_PLAYERS],
	SlotTimer[MAX_PLAYERS],
	Bet[MAX_PLAYERS],
	Balance[MAX_PLAYERS];

new InventColor[121][3] =
{
	{0xBFAE56FF, 0xBF5656FF, 0x994545FF},
	{0xBFA856FF, 0xBF565BFF, 0x994549FF},
	{0xBFA356FF, 0xBF5661FF, 0x99454EFF},
	{0xBF9E56FF, 0xBF5666FF, 0x994552FF},
	{0xBF9956FF, 0xBF566BFF, 0x994556FF},
	{0xBF9356FF, 0xBF5670FF, 0x99455AFF},
	{0xBF8E56FF, 0xBF5676FF, 0x99455EFF},
	{0xBF8956FF, 0xBF567BFF, 0x994562FF},
	{0xBF8456FF, 0xBF5680FF, 0x994566FF},
	{0xBF7E56FF, 0xBF5685FF, 0x99456AFF},
	{0xBF7956FF, 0xBF568BFF, 0x99456FFF},
	{0xBF7456FF, 0xBF5690FF, 0x994573FF},
	{0xBF6F56FF, 0xBF5695FF, 0x994577FF},
	{0xBF6956FF, 0xBF569AFF, 0x99457BFF},
	{0xBF6456FF, 0xBF56A0FF, 0x994580FF},
	{0xBF5F56FF, 0xBF56A5FF, 0x994584FF},
	{0xBF5A56FF, 0xBF56AAFF, 0x994588FF},
	{0xBF5658FF, 0xBF56AFFF, 0x99458CFF},
	{0xBF565DFF, 0xBF56B5FF, 0x994591FF},
	{0xBF5662FF, 0xBF56BAFF, 0x994595FF},
	{0xBF5668FF, 0xBF56BFFF, 0x994599FF},
	{0xBF566DFF, 0xBA56BFFF, 0x954599FF},
	{0xBF5672FF, 0xB556BFFF, 0x914599FF},
	{0xBF5677FF, 0xAF56BFFF, 0x8C4599FF},
	{0xBF567DFF, 0xAA56BFFF, 0x884599FF},
	{0xBF5682FF, 0xA556BFFF, 0x844599FF},
	{0xBF5687FF, 0xA056BFFF, 0x804599FF},
	{0xBF568CFF, 0x9A56BFFF, 0x7B4599FF},
	{0xBF5692FF, 0x9556BFFF, 0x774599FF},
	{0xBF5697FF, 0x9056BFFF, 0x734599FF},
	{0xBF569CFF, 0x8B56BFFF, 0x6F4599FF},
	{0xBF56A1FF, 0x8556BFFF, 0x6A4599FF},
	{0xBF56A7FF, 0x8056BFFF, 0x664599FF},
	{0xBF56ACFF, 0x7B56BFFF, 0x624599FF},
	{0xBF56B1FF, 0x7656BFFF, 0x5E4599FF},
	{0xBF56B6FF, 0x7056BFFF, 0x5A4599FF},
	{0xBF56BCFF, 0x6B56BFFF, 0x564599FF},
	{0xBD56BFFF, 0x6656BFFF, 0x524599FF},
	{0xB856BFFF, 0x6156BFFF, 0x4E4599FF},
	{0xB356BFFF, 0x5B56BFFF, 0x494599FF},
	{0xAE56BFFF, 0x5656BFFF, 0x454599FF},
	{0xA856BFFF, 0x565BBFFF, 0x454999FF},
	{0xA356BFFF, 0x5661BFFF, 0x454E99FF},
	{0x9E56BFFF, 0x5666BFFF, 0x455299FF},
	{0x9956BFFF, 0x566BBFFF, 0x455699FF},
	{0x9356BFFF, 0x5670BFFF, 0x455A99FF},
	{0x8E56BFFF, 0x5676BFFF, 0x455E99FF},
	{0x8956BFFF, 0x567BBFFF, 0x456299FF},
	{0x8456BFFF, 0x5680BFFF, 0x456699FF},
	{0x7E56BFFF, 0x5685BFFF, 0x456A99FF},
	{0x7956BFFF, 0x568BBFFF, 0x456F99FF},
	{0x7456BFFF, 0x5690BFFF, 0x457399FF},
	{0x6F56BFFF, 0x5695BFFF, 0x457799FF},
	{0x6956BFFF, 0x569ABFFF, 0x457B99FF},
	{0x6456BFFF, 0x56A0BFFF, 0x458099FF},
	{0x5F56BFFF, 0x56A5BFFF, 0x458499FF},
	{0x5A56BFFF, 0x56AABFFF, 0x458899FF},
	{0x5658BFFF, 0x56AFBFFF, 0x458C99FF},
	{0x565DBFFF, 0x56B5BFFF, 0x459199FF},
	{0x5662BFFF, 0x56BABFFF, 0x459599FF},
	{0x5668BFFF, 0x56BFBFFF, 0x459999FF},
	{0x566DBFFF, 0x56BFBAFF, 0x459995FF},
	{0x5672BFFF, 0x56BFB5FF, 0x459991FF},
	{0x5677BFFF, 0x56BFAFFF, 0x45998CFF},
	{0x567DBFFF, 0x56BFAAFF, 0x459988FF},
	{0x5682BFFF, 0x56BFA5FF, 0x459984FF},
	{0x5687BFFF, 0x56BFA0FF, 0x459980FF},
	{0x568CBFFF, 0x56BF9AFF, 0x45997BFF},
	{0x5692BFFF, 0x56BF95FF, 0x459977FF},
	{0x5697BFFF, 0x56BF90FF, 0x459973FF},
	{0x569CBFFF, 0x56BF8BFF, 0x45996FFF},
	{0x56A1BFFF, 0x56BF85FF, 0x45996AFF},
	{0x56A7BFFF, 0x56BF80FF, 0x459966FF},
	{0x56ACBFFF, 0x56BF7BFF, 0x459962FF},
	{0x56B1BFFF, 0x56BF76FF, 0x45995EFF},
	{0x56B6BFFF, 0x56BF70FF, 0x45995AFF},
	{0x56BCBFFF, 0x56BF6BFF, 0x459956FF},
	{0x56BFBDFF, 0x56BF66FF, 0x459952FF},
	{0x56BFB8FF, 0x56BF61FF, 0x45994EFF},
	{0x56BFB3FF, 0x56BF5BFF, 0x459949FF},
	{0x56BFAEFF, 0x56BF56FF, 0x459945FF},
	{0x56BFA8FF, 0x5BBF56FF, 0x499945FF},
	{0x56BFA3FF, 0x61BF56FF, 0x4E9945FF},
	{0x56BF9EFF, 0x66BF56FF, 0x529945FF},
	{0x56BF99FF, 0x6BBF56FF, 0x569945FF},
	{0x56BF93FF, 0x70BF56FF, 0x5A9945FF},
	{0x56BF8EFF, 0x76BF56FF, 0x5E9945FF},
	{0x56BF89FF, 0x7BBF56FF, 0x629945FF},
	{0x56BF84FF, 0x80BF56FF, 0x669945FF},
	{0x56BF7EFF, 0x85BF56FF, 0x6A9945FF},
	{0x56BF79FF, 0x8BBF56FF, 0x6F9945FF},
	{0x56BF74FF, 0x90BF56FF, 0x739945FF},
	{0x56BF6FFF, 0x95BF56FF, 0x779945FF},
	{0x56BF69FF, 0x9ABF56FF, 0x7B9945FF},
	{0x56BF64FF, 0xA0BF56FF, 0x809945FF},
	{0x56BF5FFF, 0xA5BF56FF, 0x849945FF},
	{0x56BF5AFF, 0xAABF56FF, 0x889945FF},
	{0x58BF56FF, 0xAFBF56FF, 0x8C9945FF},
	{0x5DBF56FF, 0xB5BF56FF, 0x919945FF},
	{0x62BF56FF, 0xBABF56FF, 0x959945FF},
	{0x68BF56FF, 0xBFBF56FF, 0x999945FF},
	{0x6DBF56FF, 0xBFBA56FF, 0x999545FF},
	{0x72BF56FF, 0xBFB556FF, 0x999145FF},
	{0x77BF56FF, 0xBFAF56FF, 0x998C45FF},
	{0x7DBF56FF, 0xBFAA56FF, 0x998845FF},
	{0x82BF56FF, 0xBFA556FF, 0x998445FF},
	{0x87BF56FF, 0xBFA056FF, 0x998045FF},
	{0x8CBF56FF, 0xBF9A56FF, 0x997B45FF},
	{0x92BF56FF, 0xBF9556FF, 0x997745FF},
	{0x97BF56FF, 0xBF9056FF, 0x997345FF},
	{0x9CBF56FF, 0xBF8B56FF, 0x996F45FF},
	{0xA1BF56FF, 0xBF8556FF, 0x996A45FF},
	{0xA7BF56FF, 0xBF8056FF, 0x996645FF},
	{0xACBF56FF, 0xBF7B56FF, 0x996245FF},
	{0xB1BF56FF, 0xBF7656FF, 0x995E45FF},
	{0xB6BF56FF, 0xBF7056FF, 0x995A45FF},
	{0xBCBF56FF, 0xBF6B56FF, 0x995645FF},
	{0xBFBD56FF, 0xBF6656FF, 0x995245FF},
	{0xBFB856FF, 0xBF6156FF, 0x994E45FF},
	{0xBFB356FF, 0xBF5B56FF, 0x994945FF},
	{0x1C1F21FF, 0x1C1F21FF, 0x1C1F2199}
};

new const VipMenuColors[][7] = {"FFFF00", "FF00FF", "F0F0F0", "cccccc", "FF0000", "00FF00", "0000FF", "6F48DD", "29C2AE", "E570D5", "E5E57C", "C43F3F", "AD26F0", "55DC92", "6DA473", "6CCAE3", "6C83E3", "E36C6C", "E3856C", "739CD7"};
	
/// МАГАЗИНЫ
enum shop_data
{
	shopItem[119],
	shopCost[119],
	shopType
};

new ShopData[8][shop_data] =
{
	{ {512, 513, 514, 563, 558, 515, 1072, 1073, 561, 562, 521, 560, 518, 564, 1074, 1817, 5292, 7491, 676}, {0}, 0 },

	{ {1077, 520, 516, 565, 1078, 1079, 1421, 5321, 5818, 7356}, {0}, 0 },

	{ {7384, 571, 572, 573, 574, 575, 576, 577, 7492}, {0}, 0 },

	{ {513, 1076, 1075, 575, 573}, {0}, 0 },

	{ {818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 954}, {440000, 560000, 240000, 560000, 300000, 480000, 420000, 260000, 580000, 360000, 480000, 580000, 460000, 520000, 420000, 400000, 480000, 380000, 500000, 300000, 300000, 320000, 200000, 400000, 480000, 440000, 240000, 460000, 380000, 260000, 340000, 520000, 200000, 560000, 580000, 500000, 460000, 460000, 300000, 280000, 240000, 300000, 520000, 520000, 360000, 220000, 280000, 500000, 360000, 220000, 440000, 280000, 460000, 280000, 380000, 260000, 480000, 240000, 260000, 300000, 340000, 220000, 520000, 520000, 440000, 380000, 240000, 260000, 560000, 560000, 380000, 460000, 340000, 360000, 460000, 280000, 420000, 5200000, 380000, 500000, 300000, 500000, 580000, 280000, 220000, 380000, 340000, 400000, 220000}, 1 },

	{ {6337, 5674, 6314, 5087, 5041, 5112, 6305, 5924, 6119, 6757, 6569, 6572, 6573, 6575, 6576, 6581, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6599, 6602, 6615, 6616, 6617, 2187, 1766, 1767, 6199, 3991, 1758, 1752, 1751, 1757, 1747, 1754, 1748, 1746, 1755, 1749, 1756, 1481, 1501, 1502, 1441, 1578, 1562, 1582}, {10000, 15000 ,20000, 5000, 7000, 7000, 6000, 8000, 8000, 8000, 3500, 4000, 4000, 3500, 5000, 6000, 8000, 4500, 4500, 4500, 4500, 4500, 4500, 6500, 7500, 4000, 4000, 4000, 380, 300, 300, 600, 450, 1900, 2300, 2400, 2500, 2600, 2800, 2900, 3000, 3200, 3400, 3500, 2500, 2800, 3400, 3600, 4200, 4600, 5000}, 2 },

	{ {1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403}, {0}, 0 },

	{ {7343, 5902, 6304, 6140, 5920, 5917, 5648, 5935, 5932, 5919, 6114, 6521, 6522, 6523, 6524, 6525, 6527, 6528, 6529, 6530, 6531, 6533, 6534, 6535, 6536, 6538, 6539, 6540, 6541, 6542, 6544, 6545, 6546, 6547, 6548, 6549, 6550, 6552, 6553, 6554, 6555, 6667, 6375, 6091, 1847, 1819, 1824, 1848, 1850, 1823, 1826, 1820, 1829, 1840, 1822, 1836, 1837, 1835, 1832, 1828, 1827, 1841, 1842, 1843, 1844, 1845, 1846, 1838, 1830, 1831, 1849, 1839, 1833, 1834, 1825, 1821, 1851, 1639, 1637, 1638, 2187}, {400, 4000, 17000, 15000, 10000, 10000, 15000, 80000, 20000, 22000, 5000, 1500, 1800, 1500, 1500, 1500, 2200, 1800, 1800, 2000, 1600, 1600, 2200, 2500, 2500, 2800, 2400, 2000, 2000, 2800, 2400, 2600, 2000, 2800, 3000, 2000, 2200, 2600, 2000, 2500, 2500, 40000, 35000, 3500, 1500, 1800, 1900, 2000, 2200, 2400, 2500, 2650, 2700, 2850, 2900, 3000, 3100, 3150, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3850, 3900, 3950, 4000, 4100, 4150, 4200, 4250, 4300, 4400, 4450, 4500, 250, 250, 250, 350}, 3 }
};

stock GetShopItemCount(shop_id)
{
	new count;

	for(new i; i < 119; i++)
		if(ShopData[shop_id][shopItem][i]) count++;

	return count;
}

/// Бонус призы

enum auto_slet {

	bool:as_Status,
	as_Hour,
	as_Min,
	as_Owner[24],
	as_Type,
	as_ID

};

new const AutoSlet[50][auto_slet];

/// Фермы новые

enum farm_data
{
	bool: farmStatus,
	farmOwner[MAX_PLAYER_NAME],
	farmZam[MAX_PLAYER_NAME],
	Float:farmPos[3],
	Float:farmAmbarPos[3],
	farmJobCount,
	farmJobPlayer,
	farmCell,
	farmCost,
	Text3D: farmLabel,
	farmPickup
};

new FarmData[5][farm_data];


enum second_pos_data
{
	Float:secondX,
	Float:secondY,
	Float:secondZ,
	secondCreate,
	secondPickup,
	Text3D: secondTextSkin
};

new SecondHand_Pos[][second_pos_data] =
{
	{1523.343383, 1568.993408, 10.925236},
	{1523.326049, 1564.810180, 10.925236},
	{1521.498901, 1564.756591, 10.925236},
	{1521.481323, 1567.103271, 10.925236},
	{1521.499023, 1569.179565, 10.925236},
	{1521.498901, 1572.864013, 10.925236},
	{1521.489379, 1575.024414, 10.925236},
	{1521.498901, 1577.201782, 10.920236},
	{1521.498901, 1580.848022, 10.920236},
	{1521.489257, 1583.103149, 10.920236},
	{1521.498901, 1585.218261, 10.920236},
	{1519.602172, 1585.203735, 10.920236},
	{1519.584594, 1582.928955, 10.920236},
	{1519.602172, 1580.876220, 10.920236},
	{1519.602172, 1577.119018, 10.920236},
	{1519.584594, 1574.963378, 10.925236},
	{1519.602050, 1572.943481, 10.925236},
	{1519.602172, 1569.094726, 10.925236},
	{1519.584594, 1566.864257, 10.925236},
	{1519.602172, 1564.822509, 10.925236},
	{1523.326049, 1572.887451, 10.925236},
	{1523.343505, 1577.168090, 10.920236},
	{1523.326049, 1580.877319, 10.920236},
	{1523.343627, 1585.143798, 10.920236},
	{1525.240356, 1585.154663, 10.920236},
	{1525.223510, 1580.996948, 10.920236},
	{1525.240478, 1577.081542, 10.920236},
	{1525.222778, 1572.759033, 10.925236},
	{1527.246704, 1581.785278, 10.920236},
	{1527.263793, 1584.089477, 10.920236},
	{1529.161010, 1584.187011, 10.920236},
	{1529.143432, 1581.878417, 10.920236},
	{1530.246704, 1581.957031, 10.920236},
	{1530.264282, 1584.166381, 10.920236},
	{1532.161010, 1584.129150, 10.920236},
	{1532.143432, 1581.883544, 10.920236},
	{1534.155395, 1585.136718, 10.920236},
	{1534.138061, 1580.809570, 10.920236},
	{1536.035766, 1580.856811, 10.920236},
	{1536.052368, 1585.208007, 10.920236},
	{1537.942382, 1585.348144, 10.920236},
	{1537.925903, 1583.034545, 10.920236},
	{1537.943481, 1580.941650, 10.920236},
	{1539.840209, 1580.999633, 10.920236},
	{1539.822998, 1582.965454, 10.920236},
	{1539.840209, 1585.311645, 10.920236},
	{1539.840209, 1577.199951, 10.920236},
	{1537.943481, 1577.177734, 10.920236},
	{1539.822631, 1575.059936, 10.925236},
	{1539.840209, 1572.970581, 10.925236},
	{1537.943481, 1572.872436, 10.925236},
	{1537.925903, 1575.019775, 10.925236},
	{1537.943115, 1577.151000, 10.920236},
	{1536.052368, 1577.025756, 10.920236},
	{1534.155639, 1577.141235, 10.920236},
	{1534.137451, 1573.023437, 10.925236},
	{1536.034790, 1572.756591, 10.925236},
	{1536.052368, 1569.084472, 10.925236},
	{1534.155273, 1569.158203, 10.925236},
	{1534.137329, 1564.774780, 10.925236},
	{1536.034790, 1564.690307, 10.925236},
	{1539.840209, 1564.860229, 10.925236},
	{1539.822631, 1566.914550, 10.925236},
	{1539.840209, 1569.140747, 10.925236},
	{1537.943481, 1569.103637, 10.925236},
	{1537.925903, 1566.894287, 10.925236},
	{1537.943481, 1564.800903, 10.925236},
	{1532.243408, 1565.898437, 10.925236},
	{1532.260986, 1568.150878, 10.925236},
	{1530.364013, 1567.913574, 10.925236},
	{1530.346679, 1565.703491, 10.925236},
	{1529.043457, 1565.672119, 10.925236},
	{1529.061035, 1568.075317, 10.925236},
	{1527.164306, 1568.111694, 10.925236},
	{1527.146728, 1565.760131, 10.925236}
};

enum second_data
{
	Text3D: secondText[2],
	bool: secondStatus,
	secondCount[2],
	secondBID,
	secondTime
};

new SecondHand[4][second_data];

new Text3D:SecondHand_Timer3D, SecondHand_Timer;

// ОБНОВЛЕНИЕ ТЕКСТДРАВОВ
enum 
{
	Data_PositionTD,
	Data_TextSizeTD,
	Data_LetterSizeTD
};
//

///
enum bbInfo
{
	bool:bbCreated,
	Float:bbPos[3],
	bbTime,
	Text3D:bbText,
	bbObject,
	bool:bbBreak
}
new BombInfo[MAX_BOMBS][bbInfo];
new CreteBomb[MAX_PLAYERS];
new BreakBomb[MAX_PLAYERS];

enum rInfo
{
	Float:radX,
	Float:radY,
	Float:radZ,
	rObj,
	Text3D: radText,
	radArea
}
new RadarInfo[MAX_RADARS][rInfo];

new Text:StopAnimation;
new Fullness[MAX_PLAYERS];
new pSportZal[MAX_PLAYERS];
new SellGzone[MAX_PLAYERS];
new SellPGzone[MAX_PLAYERS];
new VehicleState[MAX_VEHICLES];
new Text3D:cretits;
new Text:alcodraw[5];
new PlayerText:alcodraw2[MAX_PLAYERS][5];
new Text:alcodraw1[7];
new GLS[71];

new AddMessages[MAX_PLAYERS][128];
new AddTimeMessages[MAX_PLAYERS];
new AddId[MAX_PLAYERS];
new Weather;
new Text:GrandKapt[5];
new Text:Grand2Kapt[5];

new HealSG[103];

new Text:BoxEat[12],
	PlayerText:BoxEatPlayer[MAX_PLAYERS][6];

static const Admin_Names[9][30] = {"{FFFFFF}None", "{6495ED}Младший Модератор","{FFCC00}Модератор","{FFCC00}Старший Модератор","{060ea1}Администратор","{9a36b3}Куратор","{009900}Заместитель ГА","{009900}Главный Администратор","{FF0000}Основатель"};

static const Admin_Command_Type[3][35] = {"{ae433d}-", "{FFFF00}FullDostup 1", "{FF0000}FullDostup 2"};

enum admin_command_list
{
	adminCommand[30],
	adminLevel,
	adminCommandInfo[100],
	adminCommandAlias[50],
	adminAccess,
	adminAntiSlivTime,
	adminCheckAuthorization,
	adminCheckAccept
};

new const AdminCommandList[][admin_command_list] = {

	//level 1
	{"orgmembers", 1, "Количество людей во фракциях"},
	{"carhp", 1, "Установить здоровье машине"},
	{"checkskills", 1, "Проверить скиллы"},
	{"checklic", 1, "Проверить лицензии"},
	{"getplayerfamid", 1, "Узнать ID семьи игрока"},
	{"reoff", 1, "Выйти из слежки за игроком"},
	{"atune", 1, "Установить тюнинг на авто"},
	{"admins", 1, "Список администрации онлайн"},
	{"freeze", 1, "Заморозить игрока"},
	{"flip", 1, "флипнуть"},
	{"checkinv", 1, "Просмотр предметов игрока"},
	{"check", 1, "Проверить статистику игрока"},
	{"checkpunish", 1, "История наказаний"},
	{"spplayer", 1, "Заспавнить игрока"},
	{"pm", 1, "Сообщение игроку"},
	{"ot", 1, "Ответ на репорт"},
	{"sethp", 1, "Установить здоровье"},
	{"jp", 1, "Джетпак"},
	{"spawn", 1, "Заспавниться"},
	{"goto", 1, "Телепорт к игроку", "|g|"},
	{"gotocar", 1, "Телепорт к машине"},
	{"iwep", 1, "проверить оружие игрока"},
	{"slap", 1, "Слапнуть игрока"},
	{"unfreeze", 1, "Разморозить игрока"},
	{"tp", 1, "Телепорт по фракциям"},
	{"ahelp", 1, "Помощь по админ командам"},
	{"getwarn", 1, "Посмотреть наказания игрока"},
	{"gethere", 1, "Телепортировать игрока к себе"},
	{"gotoint", 1, "Телепорт в стандартный GTA интерьер"},
	{"gotohouse", 1, "Телепорт к дому"},
	{"gotobiz", 1, "Телепорт к бизнесу"},
	{"gototrailer", 1, "Телепорт к трейлеру"},
	{"az", 1, "Телепорт в админ. зону"},
	{"recon", 1, "Следить за игроком", "|spec|re|"},

	//level 2
	{"checkbiz", 2, "Проверить бизнес на деньги"},
	{"checkhouse", 2, "Проверить дом на деньги"},
	{"setarmour", 2, "Установить уровень брони для игрока"},
	{"cc", 2, "Очистить чат"},
	{"kick", 2, "Кикнуть игрока"},
	{"mute", 2, "Выдать мут игроку"},
	{"smp", 2, "Кричать на МП"},
	{"getip", 2, "Получить IP-адрес игрока"},
	{"pgetip", 2, "Проверить совпадения по IP-адресу"},
	{"jail", 2, "Посадить игрока в деморган"},
	{"unjail", 2, "Выпустить игрока из деморгана"},
	{"unmute", 2, "Размутить игрока"},
	{"getherecar", 2, "Телепортировать к себе машину"},
	{"spcar", 2, "Заспавнить машину"},
	
	//level 3
	{"ban", 3, "Выдать блокировку аккаунта"},
	{"removetune", 3, "Удалить тюнинг с транспортного средства"},
	{"givegun", 3, "Выдать оружие"}, 
	{"plveh", 3, "Выдать машину"}, 
	{"unmuteoff", 3, "Снять мут в оффлайне"}, 
	{"unjailoff", 3, "Снять деморган в оффлайне"},
	{"apunish", 3, "Посадить игрока в тюрьму"}, 
	{"unpunish", 3, "Выпустить игрока из тюрьмы"}, 
	{"unwarn", 3, "Снять варн"},
	{"smute", 3, "Тихий мут"}, 
	{"warn", 3, "Выдать варн"}, 
	{"spcars", 3, "Заспавнить авто в радиусе"},
	{"spplayers", 3, "Заспавнить игроков в радиусе"}, 
	{"freezeall", 3, "Заморозить игроков в радиусе"}, 
	{"eatall", 3, "Выдать еду в радиусе"},
	{"unfreezeall", 3, "Разморозить игроков в радиусе"}, 
	{"hpall", 3, "Выдать здоровье в радиусе"}, 
	{"weapall", 3, "Забрать оружие в радиусе"},
	{"gunall", 3, "Выдать оружие в радиусе"},
	{"azakon", 3, "Выдать игнор звезд в радиусе"},
	{"armourall", 3, "Выдать бронежилет в радиусе"},
	{"unarmorall", 3, "Забрать бронежилет в радиусе"},
	{"slapall", 3, "Выдать поджопник в радиусе"},
	{"eventmenu", 3, "Открыть эвент меню"},

	//level 4
	{"checkoff", 4, "Статистика игрока в оффлайне"},
	{"makeleader", 4, "Сделать игрока лидером фракции"},
	{"sban", 4, "Тихий бан"},
	{"unban", 4, "Разбанить аккаунт"},
	{"banip", 4, "Выдать блокировку по IP"},
	{"warnoff", 4, "Выдать варн в оффлайне"},
	{"jailoff", 4, "Выдать деморган в оффлайне"},
	{"muteoff", 4, "Выдать мут в оффлайне"},
	{"swarn", 4, "Тихий варн"},
	{"ao", 4, "Глобальный чат"},
	{"uval", 4, "Уволить игрока"},
	{"bizopen", 4, "Открыть бизнес"},
	{"bizlock", 4, "Закрыть бизнес"},
	{"amember", 4, "Временно вступить в любую организацию"},
	{"setgangzone", 4, "Установить территорию банды"},
	{"setskin", 4, "Установить скин игроку"},
	{"unbanip", 4, "Разбанить IP адрес"},
	{"skick", 4, "Тихо выгнать с сервера"},
	{"skinall", 4, "Выдать временный скин в радиусе"},
	{"aparkcar", 4, "Припарковать личный транспорт игрока"},
	{"delhname", 4, "Удалить название дома"},
	{"delbname", 4, "Удалить название бизнеса"},


	//level 5
	{"banoff", 5, "Выдать блокировку в оффлайне"},
	{"sbanoff", 5, "Выдать тихую блокировку в оффлайне"},
	{"agl", 5, "Выдать все лицензии"},
	{"plgmadmin", 5, "Выдать админ бессмертие"},
	{"restartreport", 5, "Перезапустить репорт"},
	{"notif", 5, "Создать уведомление игроку(получат только при входе на сервер)"},
	{"agiveskin", 5, "Выдать вечный скин в инвентарь игроку"},
	{"removeitem", 5, "Удалить предмет из инвентаря игрока"},
	{"weather", 5, "Изменить погоду"},
	{"houseinv", 5, "Проверить шкаф дома"},
	{"iint", 5, "Установить интерьер для игрока"},
	{"setvw", 5, "Установить виртуальный мир для игрока"},
	{"bizfin", 5, "Посмотреть статистику прибыли бизнеса"},
	{"uvaloff", 5, "Уволить игрока в оффлайне"},
	{"pobjectdel", 5, "Удалить домов/бизнесов игроков в радиусе"},
	{"clearhotel", 5, "Очистить владельца отеля"},
	{"adeldesc", 5, "Удалить описание персонажа"},
	{"givemydonate", 5, "Передать донат игроку"},

	//level 6
	{"settime", 6, "Установить время"},
	{"changeadminint", 6, "Изменить админ-зону"},
	{"setrep", 6, "Установить репутацию админу"},
	{"awarn", 6, "Выдать выговор администратору"},
	{"unawarn", 6, "Снять выговор администратору"},
	{"setadmtag", 6, "Изменить тег администратору"},
	{"clearbiz", 6, "Очистить заместителей бизнеса"},
	{"clearhouse", 6, "Очистить список жильцов дома"},
	{"makefamilyleader", 6, "Сделать игрока лидером семьи"},
	{"trremove", 6, "Удалить трейлер"},
	{"findfam", 6, "Найти название семьи по её ID"},
	{"dellfam", 6, "Удалить семью"},
	{"rasform", 6, "Очистить зоны гетто"},
	{"changeservername", 6, "Изменить название сервера"},
	{"delveh", 6, "Удалить созданный транспорт"},
	{"delvehall", 6, "Удалить весь созданный администраторами транспорт"},
	{"enableworkshop", 6, "Включить/Отключить систему мастерская одежды"},
	{"startpainball", 6, "Начать пейнт-бол"},
	{"fakesms", 6, "Отправить фейковое сообщение игроку"},
	{"banipoff", 6, "Выдать блокировку IP в оффлайне"},
	{"awarnoff", 6, "Выдать админ выговор в оффлайне"},
	{"uvalall", 6, "Сделать расформ фракции"},
	{"itemsinfo", 6, "Информация о предметах"},
	{"CheckOnline", 6, "Проверить онлайн администратора"},

	//level 7
	{"map", 7, "Маппинг меню"},
	{"cheatban", 7, "Настройки античита"},
	{"setfuel", 7, "Установить уровень топлива транспорту"},
	{"veh", 7, "Создать транспортное средство"},
	{"givemoney", 7, "Выдать деньги игроку"},
	{"setstat", 7, "Изменить параметры статистики игроку"},
	{"setname", 7, "Изменить имя игроку"},
	{"giveitem", 7, "Выдать предмет в инвентарь"},
	{"asellbiz", 7, "Продать бизнес государству"},
	{"asellhouse", 7, "Продать дом государству"},
	{"deletecar", 7, "Удалить транспортное средство с сервера"},
	{"sethousegarage", 7, "Установить гараж дому"},

	//level 8
	{"sp", 8, "Написать за игрока"},
	{"spc", 8, "Выполнить команду за игрока"},
	{"makeadmin", 8, "Выдать админ-права"},
	{"makeadminoff", 8, "Выдать админ-права в оффлайне"},
	{"createcustomclad", 8, "Создать клад под собой"},
	{"deletefamily", 8, "удалить семью"},
	{"removeinv", 8, "Очистить инвентарь"},
	{"modellimit", 8, "Меню количества моделей транспорта"},
	{"modellimitadd", 8, "Добавить количество моделей транспорта"},
	{"givedonateall", 7, "Выдать донат всем"},
	{"additemall", 7, "Выдать предметы всем"},
	{"sletmenu", 8, "Меню автоматического слета бизнесов/домов"},
	{"airdropstart", 8, "Организовать падение аирдропа"},
	{"rmute", 3, "Заблокировать возможность писать в репорт"},
	{"rmuteoff", 3, "Заблокировать возможность писать в репорт в оффлайне"},
	{"unrmute", 3, "Снять блокировку возможности писать в репорт"},
	{"unrmuteoff", 3, "Снять блокировку возможности писать в репорт в оффлайне"},
	{"ungivedonate", 5, "Забрать донат у игрока"},

	{"apanel", 1, "Админ. панель"},
	{"a", 1, "Админ. чат"}
};

// Массив AC_TRIGGER_TYPE_NAME хранит в себе названия типов срабатываний (наказаний) анти-чита.
static const AC_TRIGGER_TYPE_NAME[AC_MAX_TRIGGER_TYPES][AC_MAX_TRIGGER_TYPE_NAME_LENGTH] =
{
    {"Отключён"},
    {"Warning"},
    {"Kick"}
};

new
    AC_CODE_TRIGGER_TYPE[AC_MAX_TRIGGERS], // Массив AC_CODE_TRIGGER_TYPE хранит в себе наказания каждого кода анти-чита, которые мы загрузим из базы данных.
    AC_CODE_TRIGGERED_COUNT[AC_MAX_TRIGGERS] = {0, ...}; // Массив, хранящий количество срабатываний того или иного кода анти-чита на протяжении текущей сессии

new
    pAntiCheatLastCodeTriggerTime[MAX_PLAYERS][AC_MAX_TRIGGERS], // Массив, хранящий последнее время срабатывания каждого кода анти-чита на игрока
    pAntiCheatSettingsPage[MAX_PLAYERS char], // Массив, хранящий номер страницы настроек, на которой сейчас находится игрок
    pAntiCheatSettingsMenuListData[MAX_PLAYERS][AC_MAX_TRIGGERS_ON_PAGE], // Массив, хранящий в себе идентификаторы (ID) отображённых анти-читов на текущей странице, при их настройке в диалоге
    pAntiCheatSettingsEditCodeId[MAX_PLAYERS]; // Массив, хранящий номер кода анти-чита, который редактируется игроком
new EnterSklad[6];
new bool: PlayerPlayed[MAX_PLAYERS char];
new bool:PlayerGlass[MAX_PLAYERS];
new nalogoffise[2];
new amybank;
new demorgan[1];

new Text:speedbox[4];
new PlayerText:speeddraw[MAX_PLAYERS][7];

enum _spectator
{
	sID
}
new SERIU[MAX_PLAYERS][_spectator];
new TempBGObject[MAX_PLAYERS] = {-1, ...};
new Float:GunPos[47][3] =
{
	{0.00000, 0.00000, 0.00000},
	{295.20001221, -39.40999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.20001221, -39.35999924, 1001.59997559},
	{295.00001221, -39.35999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{294.90001221, -39.35999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.20001221, -39.33999924, 1001.59997559},
	{295.20001221, -39.33999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.10001221, -39.25999924, 1001.59997559},
	{295.10001221, -39.25999924, 1001.59997559},
	{295.00001221, -39.25999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.10001221, -39.20999924, 1001.59997559},
	{295.00001221, -39.25999924, 1001.59997559},
	{295.00001221, -39.25999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{295.00001221, -39.25999924, 1001.59997559},
	{295.00001221, -39.25999924, 1001.59997559},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{0.00000, 0.00000, 0.00000},
	{295.20001221, -39.40999924, 1001.59997559}
};
//------------------------------------------------------------------------------
main()
{
	print("_______________________________________________________");
	printf(" Arizona %s © 2024 - 202X ", Setting_Server[7]);
	print("_______________________________________________________");
}

new object[MAX_OGRAD] ={-1,...};
new dmats[MAX_DMATS] ={-1,...};
new dguns[MAX_DGUNS] ={-1,...};
new dpatrons[MAX_DGUNS]={-1,...};
new dgunn[MAX_DGUNS]={-1,...};

new ddTimer[MAX_NARKO]={-1,...};
new ddrugs[MAX_NARKO] ={-1,...};
new Text3D:ddText[MAX_NARKO];
new ddrugtime[MAX_NARKO];

new wwTimer[MAX_WOODS]={-1,...};
new wwoods[MAX_WOODS] ={-1,...};
new Text3D:wwText[MAX_WOODS];
new wwoodtime[MAX_WOODS];
new wOwner[24][MAX_WOODS];

new Text3D:cr_spawn, cr_spawn_timer = 30;

new Timerak[MAX_PLAYERS];
new dguntime[MAX_DGUNS];

const max_trains = 6;

new PlayerTrainState[MAX_PLAYERS],
	Float:PlayerTrainMilage[MAX_PLAYERS],
	TrainArea[max_trains];

new Float:TrainLocationPos[max_trains][3] = 
{
	{1774.3916,-1953.8030,14.8756},
    {2864.9756,1307.5331,10.8203},
    {1430.9102,2632.4814,10.8203},
    {-96.1536,1288.7184,18.9891},
	{-1947.7946,152.3711,25.7109},
	{827.9762,-1378.5675,-1.6588}
};
new TrainLocationName[max_trains][24] = 
{
	{"- Zalupa street"},
    {"- Harrison st."},
    {"- Allentown ave"},
    {"- Fort Carson"},
	{"- Oak st"},
	{"- Olimpic ave"}
};
//

enum car_sell_info
{
	data_Models,
	data_ID,
	Float:data_Position[3],
	Float:data_PositionCar[4],
	data_CarID
}
new CarSellMarket[][car_sell_info] = 
{
	{15561, 54, {1112.9219,-1485.2111,15.7969}, {1108.7257080078, -1484.9324951172, 16.008199691772, 322.16259765625}},
	{15555, 53, {1145.0947,-1484.8966,15.7969}, {1149.3720703125, -1485.0671386719, 15.900899887085, 176.94400024414}}
};

static slet_car_models[23] = {612,613,614,662,663,665,666,667,668,909,965,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205};

static const MinePoroda[5][8] =
{
	{"камня"},
	{"металла"},
	{"бронзы"},
	{"серебра"},
	{"золота"}
};

enum musorInfo
{
	//mID,
	mItem[150],
	mItemCount[150],
	mItemLevel[150],
	mItemProc[150],
	mItemIdentificator[150],
	mItemColor[150],
	mItemTimer[150]

};
new MusorInfo[MAX_MUSORS][musorInfo];

enum dataSkin { skinID, skinModel, skinModelSAMP, skinItemID }
new skins_data[][dataSkin] = 
{
	{312, 312, 21, 1521},
	{313, 313, 21, 1522},
	{314, 314, 21, 1523},
	{315, 315, 21, 1524},
	{316, 316, 21, 1525},
	{317, 317, 21, 1526},
	{318, 318, 21, 1527},
	{319, 319, 21, 1528},
	{320, 329, 21, 1529},
	{321, 332, 21, 1530},
	{322, 340, 21, 1531},
	{323, 382, 21, 1532},
	{324, 383, 21, 1533},
	{325, 398, 21, 1534},
	{326, 399, 21, 1535},
	{327, 795, 21, 1536},
	{328, 796, 21, 1537},
	{329, 797, 21, 1538},
	{330, 798, 21, 1539},
	{331, 799, 21, 1540},
	{332, 907, 21, 1541},
	{333, 908, 21, 1542},
	{334, 1206, 21, 1612},
	{335, 1326, 21, 1613},
	{336, 1573, 21, 1614},
	{337, 1699, 21, 1615},
	{338, 2883, 21, 1616},
	{339, 2884, 21, 1617},
	{340, 3136, 21, 1618},
	{341, 3137, 21, 1619},
	{342, 3138, 21, 1620},
	{343, 3139, 21, 1621},
	{344, 3140, 21, 1622},
	{345, 3141, 21, 1623},
	{346, 3142, 21, 1624},
	{347, 3143, 21, 1625},
	{348, 3144, 21, 1626},
	{349, 3145, 21, 1627},
	{350, 3146, 21, 1628},
	{351, 3147, 21, 1629},
	{352, 3148, 21, 1630},
	{353, 3149, 21, 1631},
	{354, 3150, 21, 1632},
	{355, 3151, 21, 1633},
	{356, 3152, 21, 1634},
	{357, 3153, 21, 1635},
	{358, 3154, 21, 1636},
	{359, 3159, 21, 1694},
	{360, 3160, 21, 1695},
	{361, 3161, 21, 1696},
	{362, 3162, 21, 1697},
	{363, 3163, 21, 1698},
	{364, 3164, 21, 1699},
	{365, 3165, 21, 1700},
	{366, 3166, 21, 1701},
	{367, 3176, 21, 1702},
	{368, 3177, 21, 1703},
	{369, 3179, 21, 1704},
	{370, 3180, 21, 1705},
	{371, 3181, 21, 1706},
	{372, 3182, 21, 1707},
	{373, 3183, 21, 1708},
	{374, 3184, 21, 1709},
	{375, 3185, 21, 1710},
	{376, 3186, 21, 1711},
	{377, 3188, 21, 1712},
	{378, 3189, 21, 1713},
	{379, 3190, 21, 1714},
	{380, 3191, 21, 1715},
	{381, 3192, 21, 1716},
	{382, 3225, 21, 1815},
	{383, 3226, 21, 1864},
	{384, 3227, 21, 1865},
	{385, 3228, 21, 1866},
	{386, 3229, 21, 1867},
	{387, 3230, 21, 1868},
	{388, 3231, 21, 1869},
	{389, 3349, 21, 1940},
	{390, 3416, 21, 1941},
	{391, 3429, 21, 1942},
	{392, 3610, 21, 1943},
	{393, 3611, 21, 1944},
	{394, 3784, 21, 1945},
	{395, 3870, 21, 1946},
	{396, 3871, 21, 1947},
	{397, 3883, 21, 1948},
	{398, 3889, 21, 1949},
	{399, 4549, 21, 2011},
	{400, 4763, 21, 2012},
	{401, 4764, 21, 2013},
	{402, 4765, 21, 2014},
	{403, 4766, 21, 2015},
	{404, 4767, 21, 2016},
	{405, 4768, 21, 2017},
	{406, 4769, 21, 2018},
	{407, 4770, 21, 2019},
	{408, 4771, 21, 2020},
	{409, 4772, 21, 2021},
	{410, 4773, 21, 2022},
	{411, 4804, 21, 2097},
	{412, 4805, 21, 2098},
	{413, 5085, 21, 2099},
	{414, 5090, 21, 2100},
	{415, 5091, 21, 2101},
	{416, 5092, 21, 2102},
	{417, 5093, 21, 2103},
	{418, 5094, 21, 2104},
	{419, 5095, 21, 2105},
	{420, 5096, 21, 2106},
	{421, 5097, 21, 2107},
	{422, 5098, 21, 2108},
	{423, 5099, 21, 2109},
	{424, 5100, 21, 2110},
	{425, 5101, 21, 2111},
	{426, 5102, 21, 2112},
	{427, 5103, 21, 2113},
	{428, 5104, 21, 2114},
	{429, 5376, 21, 2115},
	{430, 5377, 21, 2116},
	{431, 5378, 21, 2117},
	{432, 5379, 21, 2118},
	{433, 5380, 21, 2119},
	{434, 6014, 21, 2249},
	{435, 6015, 21, 2250},
	{436, 6016, 21, 2251},
	{437, 6017, 21, 2252},
	{438, 6018, 21, 2253},
	{439, 6019, 21, 2254},
	{440, 6020, 21, 2255},
	{441, 6021, 21, 2256},
	{442, 6022, 21, 2257},
	{443, 6023, 21, 2258},
	{444, 6024, 21, 2259},
	{445, 6025, 21, 2263},
	{446, 6026, 21, 2264},
	{447, 6027, 21, 2265},
	{448, 6028, 21, 2266},
	{449, 6029, 21, 2267},
	{450, 6030, 21, 2268},
	{451, 6031, 21, 2269},
	{452, 6032, 21, 2270},
	{453, 12700, 21, 3546},
	{454, 12701, 21, 3547},
	{455, 12702, 21, 3548},
	{456, 12703, 21, 3549},
	{457, 12704, 21, 3550},
	{458, 12705, 21, 3551},
	{459, 12706, 21, 3552},
	{460, 12707, 21, 3553},
	{461, 12708, 21, 3554},
	{462, 12709, 21, 3555},
	{463, 12710, 21, 3556},
	{464, 12711, 21, 3557},
	{465, 12712, 21, 3558},
	{466, 15010, 21, 3935},
	{467, 15011, 21, 3936},
	{468, 15012, 21, 3937},
	{469, 15013, 21, 3938},
	{470, 15014, 21, 3939},
	{471, 15015, 21, 3940},
	{472, 15016, 21, 3941},
	{473, 15017, 21, 3942},
	{474, 15018, 21, 3943},
	{475, 15019, 21, 3944},
	{476, 15021, 21, 3945},
	{477, 15022, 21, 3946},
	{478, 15023, 21, 3947},
	{479, 15024, 21, 3948},
	{480, 15065, 21, 3949},
	{481, 15066, 21, 3950},
	{482, 15067, 21, 3951},
	{483, 15068, 21, 3952},
	{484, 15069, 21, 3953},
	{485, 15070, 21, 3954},
	{486, 15071, 21, 3955},
	{487, 15072, 21, 3956},
	{488, 15073, 21, 3957},
	{489, 15074, 21, 3958},
	{490, 15075, 21, 3959},
	{491, 15076, 21, 3960},
	{492, 15077, 21, 3961},
	{493, 15078, 21, 3962},
	{494, 15079, 21, 3963},
	{495, 15080, 21, 3964},
	{496, 15081, 21, 3965},
	{497, 15082, 21, 3966},
	{498, 15083, 21, 3967},
	{499, 15084, 21, 3968},
	{500, 15086, 21, 4329},
	{501, 15087, 21, 4330},
	{502, 15088, 21, 4331},
	{503, 15089, 21, 4332},
	{504, 15090, 21, 4333},
	{505, 15091, 21, 4334},
	{506, 15092, 21, 4335},
	{507, 15093, 21, 4336},
	{508, 15094, 21, 4337},
	{509, 15095, 21, 4338},
	{510, 15096, 21, 4339},
	{511, 15097, 21, 4340},
	{512, 15296, 21, 4609},
	{513, 15297, 21, 4610},
	{514, 15298, 21, 4611},
	{515, 15299, 21, 4612},
	{516, 15300, 21, 4613},
	{517, 15301, 21, 4614},
	{518, 15302, 21, 4615},
	{519, 15303, 21, 4616},
	{520, 15304, 21, 4617},
	{521, 15305, 21, 4618},
	{522, 15306, 21, 4619},
	{523, 15307, 21, 4620},
	{524, 15308, 21, 4621},
	{525, 15309, 21, 4622},
	{526, 15310, 21, 4623},
	{527, 15311, 21, 4624},
	{528, 15312, 21, 4625},
	{529, 15313, 21, 4626},
	{530, 15314, 21, 4627},
	{531, 15315, 21, 4628},
	{532, 15316, 21, 4629},
	{533, 15317, 21, 4630},
	{534, 15318, 21, 4631},
	{535, 15319, 21, 4632},
	{536, 15320, 21, 4633},
	{537, 15321, 21, 4634},
	{538, 15322, 21, 4635},
	{539, 15323, 21, 4636},
	{540, 15324, 21, 4637},
	{541, 15325, 21, 4638},
	{542, 15458, 21, 4639},
	{543, 15459, 21, 4640},
	{544, 15460, 21, 4641},
	{545, 15461, 21, 4642},
	{546, 15462, 21, 4643},
	{547, 15463, 21, 4644},
	{548, 15464, 21, 4645},
	{549, 15465, 21, 4646},
	{550, 15466, 21, 4647},
	{551, 15467, 21, 4648},
	{552, 15468, 21, 4649},
	{553, 15469, 21, 4650},
	{554, 15470, 21, 4651},
	{555, 15471, 21, 4652},
	{556, 15472, 21, 4653},
	{557, 15473, 21, 4654},
	{558, 15474, 21, 4655},
	{559, 15475, 21, 4656},
	{560, 15476, 21, 4657},
	{561, 15477, 21, 4658},
	{562, 15478, 21, 4659},
	{563, 15479, 21, 4660},
	{564, 15480, 21, 4661},
	{565, 15481, 21, 4662},
	{566, 15482, 21, 4663},
	{567, 15483, 21, 4664},
	{568, 15484, 21, 4665},
	{569, 15696, 21, 5076},
	{570, 15697, 21, 5077},
	{571, 15698, 21, 5078},
	{572, 15699, 21, 5079},
	{573, 15700, 21, 5080},
	{574, 15701, 21, 5081},
	{575, 15702, 21, 5082},
	{576, 15703, 21, 5083},
	{577, 15704, 21, 5084},
	{578, 15705, 21, 5085},
	{579, 15706, 21, 5086},
	{580, 15890, 21, 5450},
	{581, 15891, 21, 5451},
	{582, 15892, 21, 5452},
	{583, 15893, 21, 5453},
	{584, 15894, 21, 5454},
	{585, 15895, 21, 5455},
	{586, 15896, 21, 5456},
	{587, 15899, 21, 5466},
	{588, 15900, 21, 5467},
	{589, 15901, 21, 5468},
	{590, 15966, 21, 5703},
	{591, 15967, 21, 5704},
	{592, 15968, 21, 5705},
	{593, 15969, 21, 5706},
	{594, 15970, 21, 5707},
	{595, 15971, 21, 5708},
	{596, 15972, 21, 5709},
	{597, 15973, 21, 5710},
	{598, 15974, 21, 5711},
	{599, 15975, 21, 5712},
	{600, 15976, 21, 5713},
	{601, 15977, 21, 5714},
	{602, 15978, 21, 5715},
	{603, 15979, 21, 5716},
	{604, 15980, 21, 5717},
	{605, 15981, 21, 5718},
	{606, 15982, 21, 5719},
	{607, 15983, 21, 5720},
	{608, 15984, 21, 5721},
	{609, 15985, 21, 5722},
	{610, 15986, 21, 5723},
	{611, 15987, 21, 5724},
	{612, 15988, 21, 5725},
	{613, 15989, 21, 5726},
	{614, 15990, 21, 5727},
	{615, 15991, 21, 5728},
	{616, 15992, 21, 5729},
	{617, 15884, 21, 5730},
	{618, 15994, 21, 5731},
	{619, 16815, 21, 5811},
	{620, 16816, 21, 5812},
	{621, 16817, 21, 5813},
	{622, 16818, 21, 5814},
	{623, 16819, 21, 5815},
	{624, 16820, 21, 5816},
	{625, 16843, 21, 5842},
	{626, 16844, 21, 5936},
	{627, 16845, 21, 5937},
	{628, 16846, 21, 5938},
	{629, 16847, 21, 5939},
	{630, 16848, 21, 5940},
	{631, 16849, 21, 5941},
	{632, 16830, 21, 5942},
	{633, 16831, 21, 5943},
	{634, 16832, 21, 5944},
	{635, 16833, 21, 5945},
	{636, 16834, 21, 5946},
	{637, 16835, 21, 5947},
	{638, 16836, 21, 5948},
	{639, 16837, 21, 5949},
	{640, 16838, 21, 5950},
	{641, 16839, 21, 5951},
	{642, 16840, 21, 5952},
	{643, 16841, 21, 5953},
	{644, 16850, 21, 5954},
	{648, 16901, 21, 5958},
	{649, 16902, 21, 5959},
	{650, 16960, 21, 6038},
	{651, 16961, 21, 6039},
	{652, 16962, 21, 6040},
	{653, 16963, 21, 6041},
	{654, 16965, 21, 6042},
	{655, 16966, 21, 6043},
	{656, 16967, 21, 6044},
	{657, 16968, 21, 6045},
	{658, 16997, 21, 6046},
	{659, 16998, 21, 6047},
	{660, 16999, 21, 6048},
	{661, 17475, 21, 6049},
	{662, 17476, 21, 6050},
	{663, 17477, 21, 6051},
	{664, 17478, 21, 6052},
	{665, 17479, 21, 6053},
	{666, 17480, 21, 6054},
	{667, 17481, 21, 6055},
	{668, 17482, 21, 6056},
	{669, 17483, 21, 6057},
	{670, 17484, 21, 6058},
	{671, 18131, 21, 6175},
	{672, 18132, 21, 6176},
	{673, 18133, 21, 6177},
	{674, 18134, 21, 6178},
	{675, 18135, 21, 6179},
	{676, 18136, 21, 6180},
	{677, 18137, 21, 6181},
	{678, 18138, 21, 6182},
	{679, 18139, 21, 6183},
	{680, 18140, 21, 6184},
	{681, 18141, 21, 6185},
	{682, 18142, 21, 6186},
	{683, 18143, 21, 6187},
	{684, 18144, 21, 6188},
	{685, 18145, 21, 7767},
	{686, 18146, 21, 6190},
	{687, 18147, 21, 6191},
	{688, 18148, 21, 6192},
	{689, 18150, 21, 6193},
	{690, 18151, 21, 6194},
	{692, 18162, 21, 6215},
	{693, 18163, 21, 6216},
	{694, 18168, 21, 6217},
	{695, 999, 21, 6376},
	{696, 6585, 21, 6377},
	{697, 6586, 21, 6378},
	{698, 6587, 21, 6379},
	{699, 6588, 21, 6380},
	{700, 6589, 21, 6381},
	{701, 6591, 21, 6382},
	{702, 6592, 21, 6383},
	{703, 6593, 21, 6384},
	{704, 6594, 21, 6385},
	{705, 6595, 21, 6386},
	{706, 6598, 21, 6387},
	{707, 6599, 21, 6388},
	{708, 15448, 21, 6389},
	{709, 6701, 21, 4859},
	{710, 6703, 21, 6496},
	{711, 6704, 21, 6497},
	{712, 6705, 21, 6498},
	{713, 6706, 21, 6499},
	{714, 6707, 21, 6500},
	{715, 6708, 21, 6501},
	{716, 14146, 21, 6502},
	{717, 14147, 21, 6503},
	{718, 14148, 21, 6504},
	{719, 14169, 21, 6651},
	{720, 14192, 21, 6652},
	{721, 14337, 21, 6653},
	{722, 14341, 21, 6654},
	{723, 14342, 21, 6655},
	{724, 14343, 21, 6656},
	{725, 14344, 21, 6657},
	{726, 14345, 21, 6658},
	{727, 14346, 21, 6659},
	{728, 14347, 21, 6660},
	{729, 14348, 21, 6661},
	{730, 14349, 21, 6662},
	{731, 14350, 21, 6663},
	{732, 14351, 21, 6664},
	{733, 14352, 21, 6665},
	{734, 14353, 21, 6666},
	{735, 14354, 21, 6667},
	{736, 6661, 21, 6790},
	{737, 6662, 21, 6791},
	{738, 6663, 21, 6792},
	{739, 6664, 21, 6793},
	{740, 6665, 21, 6794},
	{741, 6666, 21, 6795},
	{742, 6667, 21, 6796},
	{743, 6668, 21, 6797},
	{744, 6669, 21, 6798},
	{745, 6670, 21, 6799},
	{746, 6671, 21, 6800},
	{747, 6672, 21, 6801},
	{748, 14339, 21, 6804},
	{749, 6689, 21, 6805},
	{750, 6690, 21, 6806},
	{751, 6691, 21, 6807},
	{752, 6692, 21, 6808},
	{753, 12629, 21, 6970},
	{754, 14358, 21, 6971},
	{755, 12654, 21, 7022},
	{756, 12655, 21, 7023},
	{757, 12656, 21, 7024},
	{758, 12658, 21, 7025},
	{759, 12667, 21, 7026},
	{760, 12675, 21, 7027},
	{761, 15020, 21, 7028},
	{762, 15440, 21, 7029},
	{763, 15567, 21, 7030},
	{764, 15570, 21, 7059},
	{765, 15571, 21, 7060},
	{766, 15573, 21, 7061},
	{767, 18149, 21, 7062},
	{768, 15945, 21, 7063},
	{769, 15947, 21, 7064},
	{770, 15948, 21, 7065},
	{771, 15949, 21, 7066},
	{772, 16810, 21, 7067},
	{773, 16905, 21, 7068},
	{774, 5381, 21, 7259},
	{775, 5382, 21, 7260},
	{776, 5383, 21, 7261},
	{777, 5384, 21, 7262},
	{778, 5385, 21, 7263},
	{779, 5386, 21, 7264},
	{780, 5387, 21, 7265},
	{781, 5388, 21, 7266},
	{782, 5389, 21, 7267},
	{783, 5683, 21, 7268},
	{784, 5684, 21, 7269},
	{785, 5685, 21, 7270},
	{786, 5686, 21, 7271},
	{787, 5687, 21, 7272},
	{788, 5688, 21, 7273},
	{789, 5689, 21, 7274},
	{790, 5690, 21, 7275},
	{791, 5691, 21, 7276},
	{792, 5692, 21, 7277},
	{793, 6545, 21, 7307},
	{794, 6546, 21, 7308},
	{795, 6547, 21, 7309},
	{796, 6548, 21, 7310},
	{797, 6549, 21, 7311},
	{798, 6550, 21, 7312},
	{799, 6551, 21, 7313},
	{800, 6552, 21, 7314},
	{801, 6557, 21, 7460},
	{802, 6558, 21, 7461},
	{803, 6559, 21, 7462},
	{804, 6560, 21, 7463},
	{805, 6561, 21, 7464},
	{806, 6562, 21, 7465},
	{807, 6563, 21, 7466},
	{808, 6583, 21, 7467},
	{809, 6584, 21, 7468},
	{810, 6590, 21, 7469},
	{811, 6596, 21, 7470},
	{812, 6597, 21, 7471},
	{813, 6627, 21, 7472},
	{814, 12641, 21, 7591},
	{815, 12642, 21, 7592},
	{816, 12643, 21, 7593},
	{817, 12644, 21, 7594},
	{818, 12645, 21, 7595},
	{819, 12646, 21, 7596},
	{820, 12647, 21, 7597},
	{821, 12648, 21, 7598},
	{822, 12649, 21, 7599},
	{823, 12650, 21, 7600},
	{824, 12660, 21, 7601},
	{825, 12661, 21, 7602},
	{826, 12662, 21, 7603},
	{827, 12663, 21, 7604},
	{828, 12664, 21, 7605},
	{829, 12665, 21, 7606},
	{830, 12672, 21, 7607},
	{831, 12673, 21, 7608},
	{832, 12674, 21, 7609},
	{833, 12676, 21, 7610},
	{834, 14266, 21, 7774},
	{835, 14267, 21, 7772},
	{836, 14268, 21, 7773},
	{838, 14270, 21, 7771},
	{839, 14271, 21, 7769},
	{840, 14272, 21, 7775},
	{841, 14273, 21, 7777},
	{842, 14274, 21, 7770},
	{843, 14275, 21, 7765},
	{844, 14276, 21, 7764},
	{845, 14277, 21, 7766},
	{846, 14278, 21, 7768},
	{848, 14280, 21, 7776},
	{849, 15727, 21, 7869},
	{850, 15728, 21, 7870},
	{851, 15729, 21, 7871},
	{852, 15400, 21, 7872},
	{853, 15401, 21, 7873},
	{854, 15402, 21, 7874},
	{855, 15403, 21, 7875},
	{856, 15404, 21, 7876},
	{857, 15405, 21, 7877},
	{858, 15406, 21, 7878},
	{859, 15408, 21, 7879},
	{860, 15409, 21, 7880},
	{861, 15410, 21, 7881},
	{862, 15411, 21, 7882},
	{863, 15412, 21, 7883},
	{864, 15413, 21, 7884},
	{865, 15441, 21, 7885},
	{866, 15450, 21, 7886},
	{867, 15557, 21, 7887},
	{868, 15714, 21, 7888},
	{869, 15715, 21, 7889},
	{870, 15716, 21, 7890},
	{871, 15717, 21, 7891},
	{872, 15718, 21, 7892},
	{873, 15727, 21, 7893},
	{874, 15728, 21, 7894},
	{875, 15729, 21, 7895},
	{876, 15624, 21, 7901}
};

enum vehicle_options
{
	vehicleClientModel,
	vehicleModel,
	vehicleName[60],
	vehicleBonnetData[5],
	vehicleWingData[5],
	vehicleExhaustData[5],
	Float:vehicleHandlingData[24],
	vehicleEnergyFuel,
	vehicleServerCount
}

new const vehicleModelInfo[][vehicle_options] = {
	{-1, 400, "Landstalker", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 5008.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 160.000000, 25.000000, 20.000000, 6.199999, 0.600000, 35.000000, 2.400000, 0.079999, 0.000000, 0.280000, -0.140000, 0.500000, 0.250000, 0.270000, 0.230000}},
	{-1, 401, "Bravura", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1300.000000, 2200.000000, 1.700000, 0.000000, 0.300000, 0.000000, 0.649999, 0.800000, 0.519999, 160.000000, 15.000000, 10.000000, 8.000000, 0.800000, 30.000000, 1.299999, 0.079999, 0.000000, 0.310000, -0.150000, 0.569999, 0.000000, 0.259999, 0.500000}},
	{-1, 402, "Buffalo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 4000.000000, 2.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 200.000000, 28.000000, 5.000000, 11.000000, 0.449999, 30.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.239999, 0.500000, 0.400000, 0.250000, 0.500000}},
	{-1, 403, "Linerunner", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3800.000000, 19953.199218, 5.000000, 0.000000, 0.000000, -0.200000, 0.949999, 0.649999, 0.400000, 120.000000, 25.000000, 30.000000, 8.000000, 0.300000, 25.000000, 1.600000, 0.059999, 0.000000, 0.400000, -0.200000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{-1, 404, "Perenniel", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1200.000000, 3000.000000, 2.500000, 0.000000, 0.100000, 0.000000, 0.699999, 0.899999, 0.479999, 150.000000, 18.000000, 20.000000, 4.000000, 0.800000, 30.000000, 1.399999, 0.100000, 0.000000, 0.370000, -0.170000, 0.500000, 0.000000, 0.200000, 0.600000}},
	{-1, 405, "Sentinel", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4000.000000, 2.200000, 0.000000, 0.000000, -0.200000, 0.649999, 0.750000, 0.500000, 165.000000, 24.000000, 10.000000, 10.000000, 0.500000, 27.000000, 1.000000, 0.079999, 0.000000, 0.300000, -0.200000, 0.500000, 0.300000, 0.200000, 0.560000}},
	{-1, 406, "Dumper", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {20000.000000, 200000.000000, 4.000000, 0.000000, 0.500000, -0.400000, 0.779999, 0.800000, 0.550000, 110.000000, 25.000000, 30.000000, 3.170000, 0.400000, 30.000000, 0.800000, 0.059999, 0.000000, 0.200000, -0.300000, 0.550000, 0.000000, 0.449999, 0.200000}},
	{-1, 407, "Firetruck", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {6500.000000, 36670.800781, 3.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.800000, 0.500000, 170.000000, 27.000000, 10.000000, 10.000000, 0.449999, 27.000000, 1.200000, 0.079999, 0.000000, 0.469999, -0.170000, 0.500000, 0.000000, 0.200000, 0.259999}},
	{-1, 408, "Trashmaster", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33187.898437, 5.000000, 0.000000, 0.000000, -0.200000, 0.600000, 0.899999, 0.500000, 110.000000, 20.000000, 30.000000, 3.500000, 0.400000, 30.000000, 1.000000, 0.059999, 0.000000, 0.449999, -0.250000, 0.550000, 0.300000, 0.449999, 0.200000}},
	{-1, 409, "Stretch", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 10000.000000, 1.799999, 0.000000, 0.000000, 0.000000, 0.600000, 0.800000, 0.500000, 180.000000, 18.000000, 25.000000, 10.000000, 0.400000, 30.000000, 1.100000, 0.070000, 0.000000, 0.349999, -0.200000, 0.500000, 0.000000, 0.200000, 0.720000}},
	{-1, 410, "Manana", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 1400.000000, 2.799999, 0.000000, 0.200000, 0.000000, 0.800000, 0.800000, 0.500000, 160.000000, 19.000000, 15.000000, 8.000000, 0.800000, 30.000000, 1.200000, 0.100000, 5.000000, 0.310000, -0.150000, 0.500000, 0.200000, 0.259999, 0.500000}},
	{-1, 411, "Infernus", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 2725.300048, 1.500000, 0.000000, 0.000000, -0.250000, 0.699999, 0.800000, 0.500000, 240.000000, 30.000000, 10.000000, 11.000000, 0.509999, 30.000000, 1.200000, 0.189999, 0.000000, 0.250000, -0.100000, 0.500000, 0.400000, 0.370000, 0.720000}},
	{-1, 412, "Voodoo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 4411.500000, 2.000000, 0.000000, -0.100000, -0.200000, 0.949999, 0.800000, 0.449999, 160.000000, 23.000000, 5.000000, 6.500000, 0.500000, 30.000000, 1.000000, 0.079999, 0.000000, 0.200000, -0.250000, 0.500000, 0.600000, 0.259999, 0.409999}},
	{-1, 413, "Pony", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2600.000000, 8666.700195, 3.000000, 0.000000, 0.000000, -0.250000, 0.550000, 0.899999, 0.500000, 160.000000, 15.000000, 25.000000, 6.000000, 0.800000, 30.000000, 2.599999, 0.070000, 0.000000, 0.349999, -0.150000, 0.250000, 0.000000, 0.200000, 0.500000}},
	{-1, 414, "Mule", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 14000.000000, 4.000000, 0.000000, 0.000000, 0.100000, 0.550000, 0.850000, 0.460000, 140.000000, 18.000000, 20.000000, 4.500000, 0.600000, 30.000000, 2.000000, 0.070000, 5.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.460000, 0.529999}},
	{-1, 415, "Cheetah", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1200.000000, 3000.000000, 2.000000, 0.000000, -0.200000, -0.200000, 0.800000, 0.899999, 0.500000, 230.000000, 30.000000, 10.000000, 11.100000, 0.479999, 35.000000, 0.800000, 0.200000, 0.000000, 0.100000, -0.150000, 0.500000, 0.600000, 0.400000, 0.540000}},
	{-1, 416, "Ambulance", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2600.000000, 10202.799804, 2.500000, 0.000000, 0.000000, -0.100000, 0.750000, 0.800000, 0.469999, 155.000000, 24.000000, 10.000000, 7.000000, 0.550000, 35.000000, 1.000000, 0.070000, 0.000000, 0.400000, -0.200000, 0.500000, 0.000000, 0.579999, 0.330000}},
	{-1, 417, "Leviathan", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {15000.000000, 200000.000000, 0.100000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 1.000000, 0.050000, 0.000000, 0.500000, -0.200000, 0.899999, 0.000000, 0.300000, 0.500000}},
	{-1, 418, "Moonbeam", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2000.000000, 5848.299804, 2.799999, 0.000000, 0.200000, -0.100000, 0.600000, 0.800000, 0.500000, 150.000000, 15.000000, 15.000000, 5.500000, 0.600000, 30.000000, 1.399999, 0.100000, 0.000000, 0.349999, -0.150000, 0.550000, 0.000000, 0.200000, 0.750000}},
	{-1, 419, "Esperanto", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 4350.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.879999, 0.519999, 160.000000, 18.000000, 5.000000, 4.000000, 0.600000, 28.000000, 1.000000, 0.050000, 1.000000, 0.349999, -0.180000, 0.500000, 0.000000, 0.360000, 0.540000}},
	{-1, 420, "Taxi", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1450.000000, 4056.399902, 2.200000, 0.000000, 0.300000, -0.250000, 0.800000, 0.750000, 0.449999, 180.000000, 19.000000, 10.000000, 9.100000, 0.600000, 35.000000, 1.399999, 0.100000, 0.000000, 0.250000, -0.150000, 0.540000, 0.000000, 0.200000, 0.509999}},
	{-1, 421, "Washington", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1850.000000, 5000.000000, 2.200000, 0.000000, 0.000000, -0.100000, 0.750000, 0.649999, 0.519999, 180.000000, 21.000000, 10.000000, 7.500000, 0.649999, 30.000000, 1.000000, 0.200000, 0.000000, 0.270000, -0.200000, 0.500000, 0.349999, 0.239999, 0.600000}},
	{-1, 422, "Bobcat", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4000.000000, 2.500000, 0.000000, 0.050000, -0.200000, 0.649999, 0.850000, 0.569999, 165.000000, 20.000000, 15.000000, 8.500000, 0.500000, 35.000000, 1.500000, 0.100000, 5.000000, 0.349999, -0.180000, 0.400000, 0.000000, 0.259999, 0.200000}},
	{-1, 423, "Mr Whoopee", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4108.299804, 3.500000, 0.000000, 0.000000, 0.000000, 0.750000, 0.750000, 0.500000, 145.000000, 14.000000, 50.000000, 4.170000, 0.800000, 35.000000, 1.200000, 0.100000, 0.000000, 0.349999, -0.150000, 0.500000, 0.000000, 0.239999, 0.769999}},
	{-1, 424, "BF Injection", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1200.000000, 2000.000000, 4.000000, 0.000000, -0.100000, -0.100000, 0.750000, 0.850000, 0.500000, 170.000000, 30.000000, 10.000000, 6.000000, 0.500000, 35.000000, 1.000000, 0.070000, 5.000000, 0.200000, -0.150000, 0.449999, 0.000000, 0.379999, 0.400000}},
	{-1, 425, "Hunter", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {10000.000000, 150000.000000, 0.200000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 1.000000, 0.050000, 0.000000, 0.200000, -0.150000, 0.850000, 0.000000, 0.400000, 0.500000}},
	{-1, 426, "Premier", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 3921.300048, 1.799999, 0.000000, -0.400000, 0.000000, 0.750000, 0.850000, 0.519999, 200.000000, 22.000000, 10.000000, 10.000000, 0.529999, 35.000000, 1.299999, 0.119999, 0.000000, 0.280000, -0.119999, 0.379999, 0.000000, 0.200000, 0.239999}},
	{-1, 427, "Enforcer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4000.000000, 17333.300781, 1.799999, 0.000000, 0.100000, 0.000000, 0.550000, 0.800000, 0.479999, 170.000000, 20.000000, 20.000000, 5.400000, 0.449999, 27.000000, 1.399999, 0.100000, 0.000000, 0.400000, -0.250000, 0.500000, 0.000000, 0.319999, 0.159999}},
	{-1, 428, "Securicar", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {7000.000000, 30916.699218, 1.500000, 0.000000, 0.000000, 0.000000, 0.500000, 0.699999, 0.460000, 170.000000, 15.000000, 30.000000, 8.399999, 0.449999, 27.000000, 1.000000, 0.059999, 0.000000, 0.349999, -0.150000, 0.500000, 0.000000, 0.270000, 0.349999}},
	{-1, 429, "Banshee", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3000.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.750000, 0.889999, 0.500000, 200.000000, 33.000000, 10.000000, 8.000000, 0.519999, 34.000000, 1.600000, 0.100000, 5.000000, 0.300000, -0.150000, 0.500000, 0.300000, 0.150000, 0.490000}},
	{-1, 430, "Predator", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 29333.300781, 1.000000, 0.000000, 0.000000, 0.000000, 2.299999, 15.000000, 0.579999, 190.000000, 1.700000, 5.000000, 0.050000, 0.009999, 24.000000, 1.000000, 3.000000, 0.000000, 0.100000, 0.100000, 0.000000, 0.000000, 0.200000, 0.330000}},
	{-1, 431, "Bus", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33187.898437, 2.000000, 0.000000, 0.500000, 0.000000, 0.750000, 0.850000, 0.400000, 130.000000, 14.000000, 50.000000, 4.170000, 0.400000, 30.000000, 1.200000, 0.070000, 0.000000, 0.449999, -0.250000, 0.449999, 0.000000, 0.200000, 0.750000}},
	{-1, 432, "Rhino", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {25000.000000, 250000.000000, 5.000000, 0.000000, 0.000000, 0.000000, 2.500000, 0.800000, 0.500000, 80.000000, 40.000000, 150.000000, 5.000000, 0.500000, 35.000000, 0.400000, 0.019999, 0.000000, 0.349999, -0.100000, 0.500000, 0.000000, 0.219999, 0.090000}},
	{-1, 433, "Barracks", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {10500.000000, 61407.500000, 4.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.699999, 0.469999, 180.000000, 20.000000, 25.000000, 4.000000, 0.400000, 27.000000, 1.200000, 0.050000, 0.000000, 0.469999, -0.170000, 0.500000, 0.000000, 0.620000, 0.259999}},
	{-1, 434, "Hotknife", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3400.000000, 2.500000, 0.000000, 0.300000, -0.300000, 0.750000, 0.800000, 0.500000, 200.000000, 28.000000, 5.000000, 11.000000, 0.449999, 30.000000, 0.800000, 0.079999, 0.000000, 0.280000, -0.200000, 0.400000, 0.300000, 0.200000, 0.600000}},
	{-1, 435, "Article Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3800.000000, 30000.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.449999, 0.750000, 0.500000, 120.000000, 18.000000, 5.000000, 8.000000, 0.300000, 25.000000, 1.500000, 0.050000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{-1, 436, "Previon", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3000.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.699999, 0.800000, 0.449999, 160.000000, 18.000000, 7.000000, 8.000000, 0.649999, 35.000000, 1.100000, 0.079999, 2.000000, 0.310000, -0.180000, 0.550000, 0.300000, 0.209999, 0.500000}},
	{-1, 437, "Coach", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {9500.000000, 57324.601562, 1.799999, 0.000000, 0.000000, 0.000000, 0.649999, 0.850000, 0.349999, 160.000000, 18.000000, 10.000000, 5.699999, 0.349999, 30.000000, 1.500000, 0.039999, 0.000000, 0.449999, -0.250000, 0.500000, 0.000000, 0.449999, 0.479999}},
	{-1, 438, "Cabbie", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1750.000000, 4351.700195, 2.900000, 0.000000, 0.100000, -0.150000, 0.750000, 0.850000, 0.509999, 160.000000, 24.000000, 6.000000, 7.000000, 0.439999, 40.000000, 0.699999, 0.059999, 2.000000, 0.250000, -0.300000, 0.500000, 0.500000, 0.200000, 0.400000}},
	{-1, 439, "Stallion", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 3921.300048, 2.000000, 0.000000, 0.000000, -0.150000, 0.800000, 0.750000, 0.550000, 160.000000, 23.000000, 5.000000, 8.170000, 0.519999, 35.000000, 1.200000, 0.100000, 0.000000, 0.300000, -0.200000, 0.500000, 0.000000, 0.300000, 0.639999}},
	{-1, 440, "Rumpo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2000.000000, 4901.700195, 2.400000, 0.000000, 0.400000, -0.100000, 0.600000, 0.750000, 0.519999, 160.000000, 18.000000, 15.000000, 5.500000, 0.449999, 30.000000, 1.399999, 0.050000, 0.000000, 0.430000, -0.109999, 0.500000, 0.000000, 0.200000, 0.600000}},
	{-1, 441, "RC Bandit", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 24.100000, 6.000000, 0.000000, 0.050000, -0.100000, 0.800000, 0.899999, 0.490000, 75.000000, 35.000000, 5.000000, 5.500000, 0.500000, 25.000000, 1.600000, 0.100000, 0.000000, 0.280000, -0.079999, 0.500000, 0.000000, 0.200000, 0.050000}},
	{-1, 442, "Romero", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 5960.399902, 2.000000, 0.000000, -0.800000, 0.200000, 0.750000, 0.800000, 0.500000, 150.000000, 16.000000, 15.000000, 4.000000, 0.800000, 30.000000, 1.000000, 0.100000, 0.000000, 0.349999, -0.150000, 0.400000, 0.000000, 0.200000, 1.250000}},
	{-1, 443, "Packer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {8000.000000, 48273.300781, 2.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.850000, 0.349999, 150.000000, 13.000000, 5.000000, 5.699999, 0.349999, 30.000000, 1.500000, 0.039999, 0.000000, 0.449999, -0.250000, 0.500000, 0.000000, 0.560000, 0.400000}},
	{-1, 444, "Monster", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 20000.000000, 3.000000, 0.000000, 0.000000, -0.349999, 0.649999, 0.850000, 0.550000, 110.000000, 45.000000, 25.000000, 7.000000, 0.449999, 35.000000, 1.500000, 0.070000, 0.000000, 0.449999, -0.300000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{-1, 445, "Admiral", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.100000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{-1, 446, "Squallo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 29333.300781, 1.000000, 0.000000, 0.000000, 0.000000, 3.000000, 15.000000, 0.649999, 190.000000, 3.000000, 5.000000, 0.019999, 0.000000, 24.000000, 0.449999, 5.000000, 0.000000, 0.100000, 0.050000, 0.000000, 0.000000, 0.200000, 0.330000}},
	{-1, 447, "Seasparrow", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3000.000000, 7250.000000, 0.100000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 2.000000, 0.100000, 0.000000, 0.500000, -0.200000, 0.500000, 0.000000, 0.300000, 0.600000}},
	{-1, 448, "Pizzaboy", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 449, "Tram", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 4795.899902, 1.000000, 0.000000, -0.300000, 0.000000, 0.970000, 0.769999, 0.509999, 150.000000, 25.000000, 5.000000, 8.500000, 0.449999, 30.000000, 1.299999, 0.079999, 0.000000, 0.000000, -1.000000, 0.400000, 0.500000, 0.200000, 0.500000}},
	{-1, 450, "Article Trailer 2", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3800.000000, 30000.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.449999, 0.750000, 0.500000, 120.000000, 18.000000, 5.000000, 8.000000, 0.300000, 25.000000, 1.500000, 0.050000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{-1, 451, "Turismo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3000.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.750000, 0.850000, 0.449999, 240.000000, 30.000000, 10.000000, 11.000000, 0.509999, 30.000000, 1.200000, 0.129999, 0.000000, 0.150000, -0.200000, 0.500000, 0.400000, 0.170000, 0.720000}},
	{-1, 452, "Speeder", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 20210.699218, 1.000000, 0.000000, 0.000000, 0.000000, 2.500000, 15.000000, 0.649999, 190.000000, 2.500000, 5.000000, 0.039999, 0.009999, 20.000000, 1.299999, 3.000000, 0.000000, 0.100000, 0.500000, 2.000000, 0.000000, 0.699999, 0.389999}},
	{-1, 453, "Reefer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 25520.800781, 1.000000, 0.000000, 0.000000, 0.000000, -1.500000, 15.000000, 0.449999, 190.000000, 0.699999, 5.000000, 0.019999, 0.019999, 25.000000, 1.000000, 3.000000, 0.000000, 0.100000, 0.100000, 0.000000, 0.000000, 0.200000, 0.379999}},
	{-1, 454, "Tropic", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 29333.300781, 1.000000, 0.000000, 0.000000, 0.000000, 2.200000, 12.000000, 0.449999, 190.000000, 1.399999, 5.000000, 0.050000, 0.009999, 24.000000, 1.799999, 3.000000, 0.000000, 0.100000, 0.100000, 0.000000, 0.000000, 0.200000, 0.330000}},
	{-1, 455, "Flatbed", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {8500.000000, 48804.199218, 2.500000, 0.000000, 0.000000, 0.300000, 0.699999, 0.699999, 0.460000, 140.000000, 25.000000, 80.000000, 10.000000, 0.449999, 27.000000, 1.200000, 0.050000, 0.000000, 0.469999, -0.170000, 0.500000, 0.000000, 0.620000, 0.430000}},
	{-1, 456, "Yankee", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4500.000000, 18003.699218, 3.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.699999, 0.479999, 160.000000, 14.000000, 40.000000, 4.500000, 0.800000, 30.000000, 1.799999, 0.119999, 0.000000, 0.300000, -0.250000, 0.500000, 0.000000, 0.349999, 0.449999}},
	{-1, 457, "Caddy", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 458, "Solair", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2000.000000, 5500.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.750000, 0.800000, 0.519999, 165.000000, 20.000000, 10.000000, 5.000000, 0.600000, 30.000000, 1.200000, 0.100000, 0.000000, 0.270000, -0.170000, 0.500000, 0.200000, 0.239999, 0.479999}},
	{-1, 459, "Berkley's RC Van", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 6333.299804, 2.000000, 0.000000, 0.000000, -0.200000, 0.850000, 0.699999, 0.460000, 160.000000, 15.000000, 25.000000, 6.000000, 0.800000, 30.000000, 1.500000, 0.070000, 2.000000, 0.349999, -0.150000, 0.400000, 0.000000, 0.200000, 0.430000}},
	{-1, 460, "Skimmer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 461, "PCJ-600", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 462, "Faggio", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 463, "Freeway", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 403.299987, 4.000000, 0.000000, 0.100000, 0.000000, 1.200000, 0.819999, 0.509999, 190.000000, 40.000000, 5.000000, 10.000000, 0.550000, 35.000000, 0.649999, 0.200000, 0.000000, 0.090000, -0.109999, 0.550000, 0.000000, 0.000000, 0.239999}},
	{-1, 464, "RC Baron", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 50.000000, 120.000000, 0.000000, 0.000000, 0.000000, 0.200000, 0.899999, 0.500000, 75.000000, 1.000000, 5.000000, 0.500000, 0.500000, 45.000000, 0.600000, 0.100000, 0.000000, 0.250000, 0.000000, 0.800000, 0.000000, 0.200000, 0.079999}},
	{-1, 465, "RC Raider", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 24.100000, 0.200000, 0.000000, 0.000000, -0.100000, 1.100000, 0.750000, 0.500000, 75.000000, 35.000000, 5.000000, 5.500000, 0.500000, 25.000000, 1.600000, 0.100000, 0.000000, 0.280000, -0.079999, 0.500000, 0.000000, 0.200000, 0.100000}},
	{-1, 466, "Glendale", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4000.000000, 2.500000, 0.000000, 0.000000, 0.050000, 0.600000, 0.839999, 0.519999, 160.000000, 22.000000, 15.000000, 6.199999, 0.550000, 30.000000, 0.800000, 0.070000, 0.000000, 0.349999, -0.219999, 0.500000, 0.500000, 0.230000, 0.400000}},
	{-1, 467, "Oceanic", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 4529.899902, 2.000000, 0.000000, 0.000000, 0.000000, 0.670000, 0.750000, 0.519999, 160.000000, 16.000000, 5.000000, 5.000000, 0.550000, 30.000000, 1.000000, 0.100000, 0.000000, 0.349999, -0.170000, 0.500000, 0.500000, 0.230000, 0.449999}},
	{-1, 468, "Sanchez", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 469, "Sparrow", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 6041.700195, 0.200000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 2.000000, 0.100000, 0.000000, 0.500000, -0.200000, 0.500000, 0.000000, 0.300000, 0.500000}},
	{-1, 470, "Patriot", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 7968.700195, 2.500000, 0.000000, 0.000000, 0.000000, 0.699999, 0.850000, 0.500000, 170.000000, 25.000000, 20.000000, 8.000000, 0.500000, 30.000000, 1.500000, 0.079999, 4.000000, 0.349999, -0.349999, 0.500000, 0.000000, 0.280000, 0.250000}},
	{-1, 471, "Quad", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 472, "Coastguard", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 473, "Dinghy", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 1483.300048, 1.000000, 0.000000, 0.000000, 0.000000, 3.500000, 3.500000, 1.000000, 190.000000, 1.200000, 5.000000, 0.070000, 0.009999, 30.000000, 1.000000, 4.500000, 0.000000, 3.500000, 0.100000, 0.699999, 0.000000, 0.200000, 0.119999}},
	{-1, 474, "Hermes", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1950.000000, 4712.500000, 2.000000, 0.000000, 0.300000, 0.000000, 0.699999, 0.750000, 0.509999, 160.000000, 18.000000, 15.000000, 3.500000, 0.600000, 28.000000, 1.000000, 0.050000, 0.000000, 0.349999, -0.200000, 0.579999, 0.000000, 0.250000, 0.419999}},
	{-1, 475, "Sabre", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4000.000000, 2.000000, 0.000000, 0.100000, 0.000000, 0.699999, 0.800000, 0.529999, 160.000000, 24.000000, 10.000000, 8.000000, 0.519999, 35.000000, 1.299999, 0.079999, 5.000000, 0.300000, -0.200000, 0.500000, 0.250000, 0.250000, 0.519999}},
	{-1, 476, "Rustler", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 27083.300781, 10.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 1.500000, 0.449999, 45.000000, 2.000000, 0.150000, 0.000000, 0.500000, -0.200000, 0.500000, 0.000000, 0.300000, 0.750000}},
	{-1, 477, "ZR-350", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 2979.699951, 2.000000, 0.000000, 0.200000, -0.100000, 0.800000, 0.800000, 0.509999, 200.000000, 28.000000, 10.000000, 11.100000, 0.519999, 30.000000, 1.200000, 0.100000, 0.000000, 0.310000, -0.150000, 0.500000, 0.300000, 0.239999, 0.600000}},
	{-1, 478, "Walton", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1850.000000, 3534.000000, 2.500000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.500000, 150.000000, 14.000000, 25.000000, 6.500000, 0.500000, 35.000000, 1.600000, 0.119999, 0.000000, 0.349999, -0.180000, 0.400000, 0.000000, 0.259999, 0.189999}},
	{-1, 479, "Regina", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 3800.000000, 2.000000, 0.000000, 0.200000, 0.000000, 0.649999, 0.850000, 0.519999, 165.000000, 16.000000, 25.000000, 5.000000, 0.600000, 30.000000, 1.000000, 0.100000, 0.000000, 0.270000, -0.170000, 0.500000, 0.200000, 0.239999, 0.479999}},
	{-1, 480, "Comet", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 2200.000000, 2.200000, 0.000000, 0.100000, -0.200000, 0.699999, 0.899999, 0.500000, 200.000000, 30.000000, 10.000000, 11.000000, 0.449999, 30.000000, 1.399999, 0.140000, 3.000000, 0.280000, -0.150000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 481, "BMX", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 39.000000, 7.000000, 0.000000, 0.050000, -0.090000, 1.600000, 0.899999, 0.479999, 120.000000, 18.000000, 5.000000, 19.000000, 0.500000, 35.000000, 0.800000, 0.150000, 0.000000, 0.200000, -0.100000, 0.500000, 0.000000, 0.000000, 0.150000}},
	{-1, 482, "Burrito", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 5000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.600000, 0.870000, 0.509999, 150.000000, 25.000000, 20.000000, 8.500000, 0.449999, 30.000000, 1.299999, 0.070000, 2.000000, 0.400000, -0.250000, 0.400000, 0.500000, 0.200000, 0.500000}},
	{-1, 483, "Camper", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 4000.000000, 2.599999, 0.000000, -0.500000, -0.400000, 0.600000, 0.800000, 0.460000, 120.000000, 16.000000, 20.000000, 8.500000, 0.449999, 30.000000, 1.100000, 0.079999, 0.000000, 0.349999, -0.100000, 0.400000, 0.500000, 0.200000, 0.500000}},
	{-1, 484, "Marquis", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 155520.796875, 1.000000, 0.000000, 0.000000, 0.000000, -3.500000, 25.000000, 0.400000, 190.000000, 0.500000, 5.000000, 0.039999, 0.029999, 38.000000, 1.000000, 3.000000, 0.000000, 0.100000, 0.000000, 1.000000, 0.000000, 0.200000, 0.379999}},
	{-1, 485, "Baggage", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 1354.199951, 5.000000, 0.000000, 0.400000, -0.200000, 1.000000, 0.850000, 0.500000, 160.000000, 20.000000, 30.000000, 5.000000, 0.500000, 30.000000, 2.000000, 0.090000, 0.000000, 0.250000, -0.100000, 0.500000, 0.000000, 0.259999, 0.500000}},
	{-1, 486, "Dozer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {10000.000000, 35000.000000, 20.000000, 0.000000, -0.500000, -0.500000, 0.850000, 0.800000, 0.600000, 100.000000, 35.000000, 150.000000, 5.000000, 0.400000, 45.000000, 1.399999, 0.150000, 0.000000, 0.250000, -0.200000, 0.349999, 0.000000, 0.449999, 0.200000}},
	{-1, 487, "Maverick", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 29270.800781, 0.200000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 2.000000, 0.150000, 0.000000, 0.500000, -0.200000, 0.500000, 0.000000, 0.300000, 0.750000}},
	{-1, 488, "SAN News Maverick", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 489, "Rancher", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 7604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 170.000000, 20.000000, 5.000000, 7.000000, 0.449999, 35.000000, 0.800000, 0.079999, 0.000000, 0.449999, -0.250000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{-1, 490, "FBI Rancher", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 11156.200195, 2.200000, 0.000000, 0.000000, -0.200000, 0.800000, 0.800000, 0.519999, 170.000000, 22.000000, 5.000000, 8.500000, 0.500000, 30.000000, 0.699999, 0.150000, 0.000000, 0.340000, -0.200000, 0.500000, 0.500000, 0.439999, 0.300000}},
	{-1, 491, "Virgo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 3435.399902, 2.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.860000, 0.500000, 160.000000, 18.000000, 15.000000, 7.000000, 0.500000, 32.000000, 0.800000, 0.100000, 0.000000, 0.310000, -0.150000, 0.500000, 0.500000, 0.259999, 0.850000}},
	{-1, 492, "Greenwood", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4000.000000, 2.500000, 0.000000, 0.000000, 0.000000, 0.699999, 0.800000, 0.519999, 160.000000, 20.000000, 20.000000, 5.400000, 0.600000, 30.000000, 1.100000, 0.119999, 5.000000, 0.319999, -0.200000, 0.500000, 0.000000, 0.219999, 0.540000}},
	{-1, 493, "Jetmax", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 494, "Hotring Racer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 220.000000, 26.000000, 5.000000, 10.000000, 0.519999, 30.000000, 1.500000, 0.100000, 10.000000, 0.289999, -0.159999, 0.600000, 0.400000, 0.200000, 0.560000}},
	{-1, 495, "Sandking", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2000.000000, 4000.000000, 2.200000, 0.000000, 0.000000, -0.600000, 0.750000, 0.850000, 0.500000, 170.000000, 28.000000, 10.000000, 8.000000, 0.500000, 30.000000, 0.800000, 0.079999, 0.000000, 0.349999, -0.310000, 0.500000, 0.000000, 0.379999, 0.349999}},
	{-1, 496, "Blista Compact", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 2141.699951, 2.400000, 0.000000, 0.000000, -0.100000, 0.850000, 0.850000, 0.500000, 200.000000, 26.000000, 5.000000, 11.000000, 0.449999, 30.000000, 1.399999, 0.100000, 0.000000, 0.280000, -0.119999, 0.500000, 0.000000, 0.250000, 0.500000}},
	{-1, 497, "Police Maverick", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4500.000000, 26343.699218, 0.200000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 2.000000, 0.100000, 0.000000, 0.500000, -0.200000, 0.500000, 0.000000, 0.300000, 0.649999}},
	{-1, 498, "Boxville", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 23489.599609, 3.000000, 0.000000, 0.000000, 0.000000, 0.819999, 0.699999, 0.460000, 140.000000, 14.000000, 25.000000, 4.500000, 0.600000, 30.000000, 0.899999, 0.079999, 0.000000, 0.250000, -0.250000, 0.349999, 0.600000, 0.259999, 0.400000}},
	{-1, 499, "Benson", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 13865.799804, 2.299999, 0.000000, 0.000000, -0.200000, 0.750000, 0.699999, 0.460000, 140.000000, 14.000000, 20.000000, 4.500000, 0.600000, 30.000000, 1.200000, 0.200000, 0.000000, 0.349999, -0.150000, 0.449999, 0.000000, 0.460000, 0.529999}},
	{-1, 500, "Mesa", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1300.000000, 1900.000000, 3.000000, 0.000000, 0.200000, -0.300000, 0.699999, 0.800000, 0.500000, 160.000000, 24.000000, 15.000000, 8.000000, 0.500000, 35.000000, 1.200000, 0.079999, 0.000000, 0.319999, -0.200000, 0.349999, 0.400000, 0.180000, 0.300000}},
	{-1, 501, "RC Goblin", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 24.100000, 0.200000, 0.000000, 0.000000, -0.100000, 1.100000, 0.750000, 0.500000, 75.000000, 35.000000, 5.000000, 5.500000, 0.500000, 25.000000, 1.600000, 0.100000, 0.000000, 0.280000, -0.079999, 0.500000, 0.000000, 0.200000, 0.050000}},
	{-1, 502, "Hotring Racer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 503, "Hotring Racer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 504, "Bloodring Banger", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2100.000000, 5146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.750000, 0.699999, 0.519999, 160.000000, 24.000000, 5.000000, 6.199999, 0.550000, 35.000000, 1.000000, 0.059999, 3.000000, 0.349999, -0.239999, 0.500000, 0.000000, 0.280000, 0.300000}},
	{-1, 505, "Rancher", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 506, "Super GT", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 2800.000000, 2.000000, 0.000000, -0.200000, -0.239999, 0.750000, 0.860000, 0.479999, 230.000000, 26.000000, 5.000000, 8.000000, 0.519999, 30.000000, 1.000000, 0.200000, 0.000000, 0.250000, -0.100000, 0.500000, 0.300000, 0.400000, 0.540000}},
	{-1, 507, "Elegant", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 5000.000000, 1.799999, 0.000000, 0.100000, -0.100000, 0.699999, 0.800000, 0.460000, 165.000000, 20.000000, 10.000000, 6.000000, 0.550000, 30.000000, 1.000000, 0.100000, 0.000000, 0.349999, -0.150000, 0.500000, 0.300000, 0.200000, 0.300000}},
	{-1, 508, "Journey", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 13865.799804, 3.000000, 0.000000, 0.000000, 0.000000, 0.620000, 0.699999, 0.460000, 140.000000, 14.000000, 25.000000, 4.500000, 0.600000, 30.000000, 1.500000, 0.109999, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.460000, 0.529999}},
	{-1, 509, "Bike", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {500.000000, 161.699996, 4.000000, 0.000000, 0.050000, -0.090000, 1.600000, 0.899999, 0.479999, 190.000000, 50.000000, 5.000000, 15.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.150000}},
	{-1, 510, "Mountain Bike", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 511, "Beagle", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {10000.000000, 80000.000000, 14.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 1.500000, 0.449999, 45.000000, 2.000000, 0.150000, 0.000000, 1.000000, -0.100000, 0.349999, 0.000000, 0.300000, 0.750000}},
	{-1, 512, "Cropduster", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 27083.300781, 15.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 1.500000, 0.449999, 45.000000, 2.000000, 0.150000, 0.000000, 0.550000, -0.050000, 0.500000, 0.000000, 0.300000, 0.750000}},
	{-1, 513, "Stuntplane", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 20000.000000, 14.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 1.500000, 0.449999, 45.000000, 2.000000, 0.150000, 0.000000, 0.500000, -0.100000, 0.899999, 0.000000, 0.300000, 0.750000}},
	{-1, 514, "Tanker", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 515, "Roadtrain", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 28000.000000, 2.000000, 0.000000, 0.500000, -0.400000, 0.949999, 0.649999, 0.400000, 120.000000, 25.000000, 20.000000, 8.000000, 0.300000, 25.000000, 0.699999, 0.100000, 0.000000, 0.200000, -0.170000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{-1, 516, "Nebula", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 4000.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.649999, 0.800000, 0.500000, 165.000000, 20.000000, 10.000000, 8.000000, 0.550000, 30.000000, 1.399999, 0.100000, 0.000000, 0.270000, -0.100000, 0.579999, 0.300000, 0.200000, 0.560000}},
	{-1, 517, "Majestic", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3267.800048, 2.200000, 0.000000, 0.100000, -0.100000, 0.750000, 0.800000, 0.519999, 165.000000, 22.000000, 10.000000, 7.000000, 0.550000, 30.000000, 1.299999, 0.129999, 0.000000, 0.270000, -0.150000, 0.500000, 0.300000, 0.200000, 0.560000}},
	{-1, 518, "Buccaneer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4500.000000, 2.200000, 0.000000, 0.300000, 0.000000, 0.600000, 0.860000, 0.540000, 160.000000, 24.000000, 15.000000, 5.000000, 0.519999, 35.000000, 0.800000, 0.079999, 0.000000, 0.200000, -0.200000, 0.540000, 0.400000, 0.300000, 0.519999}},
	{-1, 519, "Shamal", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {15000.000000, 81250.000000, 8.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.800000, 0.699999, 200.000000, 16.000000, 5.000000, 1.500000, 0.150000, 45.000000, 4.000000, 0.150000, 0.000000, 1.000000, 0.000000, 0.300000, 0.000000, 0.300000, 0.750000}},
	{-1, 520, "Hydra", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {9000.000000, 48750.000000, 20.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 1.500000, 0.449999, 45.000000, 1.000000, 0.150000, 0.000000, 0.500000, -0.200000, 0.800000, 0.000000, 0.600000, 0.750000}},
	{-1, 521, "FCR-900", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {500.000000, 200.000000, 4.000000, 0.000000, 0.050000, -0.090000, 1.500000, 0.899999, 0.479999, 190.000000, 50.000000, 5.000000, 15.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.109999}},
	{-1, 522, "NRG-500", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {400.000000, 200.000000, 4.000000, 0.000000, 0.079999, -0.090000, 1.799999, 0.899999, 0.479999, 190.000000, 60.000000, 5.000000, 15.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.150000}},
	{-1, 523, "HPV1000", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {500.000000, 240.000000, 4.500000, 0.000000, 0.050000, -0.090000, 1.500000, 0.899999, 0.460000, 190.000000, 50.000000, 5.000000, 15.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.150000}},
	{-1, 524, "Cement Truck", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33187.898437, 2.000000, 0.000000, 0.000000, 0.000000, 0.579999, 0.800000, 0.500000, 110.000000, 20.000000, 20.000000, 3.170000, 0.400000, 30.000000, 1.399999, 0.059999, 0.000000, 0.449999, -0.250000, 0.550000, 0.000000, 0.449999, 0.200000}},
	{-1, 525, "Towtruck", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 12000.000000, 2.500000, 0.000000, 0.300000, -0.250000, 0.850000, 0.699999, 0.460000, 160.000000, 25.000000, 30.000000, 6.000000, 0.800000, 45.000000, 1.600000, 0.070000, 0.000000, 0.349999, -0.150000, 0.250000, 0.000000, 0.200000, 0.500000}},
	{-1, 526, "Fortune", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4166.399902, 2.000000, 0.000000, 0.000000, -0.200000, 0.699999, 0.839999, 0.529999, 160.000000, 20.000000, 10.000000, 8.170000, 0.519999, 35.000000, 1.200000, 0.150000, 0.000000, 0.300000, -0.100000, 0.500000, 0.250000, 0.300000, 0.519999}},
	{-1, 527, "Cadrona", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1200.000000, 2000.000000, 2.200000, 0.000000, 0.150000, -0.100000, 0.699999, 0.860000, 0.500000, 160.000000, 20.000000, 5.000000, 8.000000, 0.600000, 30.000000, 1.399999, 0.119999, 0.000000, 0.300000, -0.079999, 0.500000, 0.000000, 0.259999, 0.500000}},
	{-1, 528, "FBI Truck", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4000.000000, 10000.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.649999, 0.850000, 0.540000, 170.000000, 25.000000, 25.000000, 6.000000, 0.400000, 30.000000, 0.800000, 0.100000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.319999, 0.159999}},
	{-1, 529, "Willard", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 4350.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.800000, 0.519999, 160.000000, 18.000000, 15.000000, 5.400000, 0.600000, 30.000000, 1.100000, 0.150000, 0.000000, 0.319999, -0.140000, 0.500000, 0.000000, 0.259999, 0.540000}},
	{-1, 530, "Forklift", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 1354.199951, 2.000000, 0.000000, -0.200000, -0.349999, 0.800000, 0.850000, 0.500000, 60.000000, 20.000000, 15.000000, 6.000000, 0.500000, 30.000000, 2.000000, 0.140000, 0.000000, 0.250000, -0.200000, 0.500000, 0.000000, 0.259999, 0.500000}},
	{-1, 531, "Tractor", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2000.000000, 5000.000000, 3.000000, 0.000000, 0.000000, -0.200000, 0.899999, 0.850000, 0.500000, 70.000000, 20.000000, 90.000000, 15.000000, 0.200000, 50.000000, 2.000000, 0.119999, 0.000000, 0.250000, -0.050000, 0.500000, 0.000000, 0.259999, 0.500000}},
	{-1, 532, "Combine Harvester", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {8500.000000, 48804.199218, 5.000000, 0.000000, 0.300000, -0.200000, 0.879999, 0.699999, 0.460000, 140.000000, 25.000000, 80.000000, 10.000000, 0.449999, 27.000000, 1.200000, 0.100000, 0.000000, 0.469999, -0.109999, 0.500000, 0.000000, 1.200000, 0.430000}},
	{-1, 533, "Feltzer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4500.000000, 2.500000, 0.000000, 0.000000, -0.150000, 0.649999, 0.899999, 0.500000, 200.000000, 28.000000, 25.000000, 7.000000, 0.519999, 30.000000, 1.100000, 0.090000, 0.000000, 0.300000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 534, "Remington", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 4000.000000, 2.000000, 0.000000, -0.400000, -0.200000, 0.750000, 0.800000, 0.560000, 160.000000, 23.000000, 5.000000, 6.500000, 0.500000, 30.000000, 0.500000, 0.100000, 0.000000, 0.000000, -0.200000, 0.400000, 0.600000, 0.209999, 0.409999}},
	{-1, 535, "Slamvan", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1950.000000, 4712.500000, 4.000000, 0.000000, 0.100000, 0.000000, 0.649999, 0.899999, 0.500000, 160.000000, 40.000000, 10.000000, 10.000000, 0.500000, 28.000000, 1.600000, 0.119999, 0.000000, 0.349999, -0.140000, 0.500000, 0.300000, 0.360000, 0.419999}},
	{-1, 536, "Blade", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 2500.000000, 2.000000, 0.000000, -0.200000, 0.100000, 0.750000, 0.839999, 0.529999, 160.000000, 24.000000, 5.000000, 8.170000, 0.519999, 35.000000, 1.000000, 0.100000, 0.000000, 0.300000, -0.150000, 0.439999, 0.250000, 0.300000, 0.519999}},
	{-1, 537, "Freight", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 65000.000000, 3.000000, 0.000000, 0.000000, 0.000000, 0.579999, 0.800000, 0.500000, 110.000000, 20.000000, 20.000000, 3.170000, 0.400000, 30.000000, 1.399999, 0.059999, 0.000000, 0.449999, 0.000000, 0.550000, 0.000000, 0.449999, 0.200000}},
	{-1, 538, "Brownstreak", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 65000.000000, 3.000000, 0.000000, 0.000000, 0.000000, 0.579999, 0.800000, 0.500000, 110.000000, 20.000000, 20.000000, 3.170000, 0.400000, 30.000000, 1.399999, 0.059999, 0.000000, 0.449999, -0.100000, 0.550000, 0.000000, 0.649999, 0.200000}},
	{-1, 539, "Vortex", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 4795.899902, 20.000000, 0.000000, 0.000000, 0.200000, 0.050000, 1.000000, 0.500000, 150.000000, 2.000000, 5.000000, 1.000000, 0.500000, 30.000000, 0.500000, 0.050000, 0.000000, 0.330000, -0.250000, 0.500000, 0.019999, 0.649999, 0.500000}},
	{-1, 540, "Vincent", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 3000.000000, 2.000000, 0.000000, 0.300000, 0.000000, 0.699999, 0.800000, 0.500000, 160.000000, 18.000000, 20.000000, 5.400000, 0.600000, 30.000000, 1.000000, 0.090000, 0.000000, 0.319999, -0.159999, 0.560000, 0.000000, 0.259999, 0.540000}},
	{-1, 541, "Bullet", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1200.000000, 2500.000000, 1.799999, 0.000000, -0.150000, -0.200000, 0.750000, 0.899999, 0.479999, 230.000000, 30.000000, 10.000000, 8.000000, 0.579999, 30.000000, 1.000000, 0.129999, 5.000000, 0.250000, -0.100000, 0.449999, 0.300000, 0.150000, 0.540000}},
	{-1, 542, "Clover", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 3000.000000, 2.200000, 0.000000, 0.000000, 0.000000, 0.649999, 0.800000, 0.519999, 160.000000, 24.000000, 10.000000, 8.000000, 0.500000, 35.000000, 1.000000, 0.100000, 0.000000, 0.300000, -0.100000, 0.500000, 0.250000, 0.250000, 0.519999}},
	{-1, 543, "Sadler", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4500.000000, 2.700000, 0.000000, 0.000000, -0.050000, 0.649999, 0.699999, 0.500000, 165.000000, 25.000000, 20.000000, 8.500000, 0.500000, 35.000000, 0.800000, 0.079999, 3.000000, 0.250000, -0.150000, 0.400000, 0.400000, 0.259999, 0.200000}},
	{-1, 544, "Firetruck LA", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 545, "Hustler", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4000.000000, 2.500000, 0.000000, 0.000000, -0.050000, 0.750000, 0.750000, 0.519999, 160.000000, 22.000000, 10.000000, 8.000000, 0.500000, 30.000000, 0.449999, 0.100000, 0.000000, 0.100000, -0.150000, 0.500000, 0.500000, 0.180000, 0.449999}},
	{-1, 546, "Intruder", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 4350.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.800000, 0.490000, 160.000000, 18.000000, 25.000000, 5.400000, 0.600000, 30.000000, 1.000000, 0.090000, 0.000000, 0.319999, -0.150000, 0.540000, 0.000000, 0.259999, 0.540000}},
	{-1, 547, "Primo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 3300.000000, 2.200000, 0.000000, 0.000000, 0.000000, 0.699999, 0.800000, 0.540000, 160.000000, 18.000000, 7.000000, 5.400000, 0.600000, 30.000000, 1.100000, 0.140000, 0.000000, 0.319999, -0.140000, 0.500000, 0.000000, 0.259999, 0.540000}},
	{-1, 548, "Cargobob", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {20000.000000, 48333.300781, 0.200000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 0.600000, 0.050000, 0.000000, 0.500000, -0.100000, 0.300000, 0.000000, 0.300000, 0.500000}},
	{-1, 549, "Tampa", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4166.399902, 2.500000, 0.000000, 0.150000, 0.000000, 0.600000, 0.850000, 0.519999, 160.000000, 24.000000, 10.000000, 8.170000, 0.519999, 35.000000, 0.699999, 0.079999, 3.000000, 0.300000, -0.159999, 0.500000, 0.500000, 0.300000, 0.519999}},
	{-1, 550, "Sunrise", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 3550.000000, 2.000000, 0.000000, 0.300000, 0.000000, 0.699999, 0.800000, 0.519999, 160.000000, 17.000000, 5.000000, 5.400000, 0.600000, 30.000000, 1.000000, 0.090000, 0.000000, 0.300000, -0.119999, 0.550000, 0.000000, 0.259999, 0.540000}},
	{-1, 551, "Merit", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 4500.000000, 2.200000, 0.000000, 0.200000, -0.100000, 0.649999, 0.800000, 0.490000, 165.000000, 22.000000, 10.000000, 9.000000, 0.550000, 30.000000, 1.100000, 0.150000, 0.000000, 0.270000, -0.079999, 0.540000, 0.300000, 0.200000, 0.560000}},
	{-1, 552, "Utility Van", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2600.000000, 8666.700195, 3.000000, 0.000000, 0.000000, 0.000000, 0.850000, 0.699999, 0.460000, 160.000000, 18.000000, 10.000000, 6.000000, 0.800000, 30.000000, 1.799999, 0.070000, 0.000000, 0.349999, -0.180000, 0.250000, 0.000000, 0.200000, 0.500000}},
	{-1, 553, "Nevada", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {25000.000000, 438750.000000, 10.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 1.000000, 0.449999, 45.000000, 1.000000, 0.100000, 0.000000, 0.400000, -0.300000, 0.500000, 0.000000, 0.300000, 0.750000}},
	{-1, 554, "Yosemite", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3000.000000, 6000.000000, 3.000000, 0.000000, 0.349999, 0.000000, 0.600000, 0.800000, 0.400000, 170.000000, 25.000000, 15.000000, 8.500000, 0.300000, 30.000000, 1.000000, 0.119999, 0.000000, 0.239999, -0.200000, 0.500000, 0.500000, 0.439999, 0.300000}},
	{-1, 555, "Windsor", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 3500.000000, 3.000000, 0.000000, 0.050000, -0.200000, 0.550000, 0.850000, 0.500000, 180.000000, 30.000000, 10.000000, 8.000000, 0.449999, 30.000000, 0.649999, 0.070000, 0.000000, 0.150000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 556, "Monster A", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 557, "Monster B", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 558, "Uranus", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 2998.300048, 2.000000, 0.000000, 0.100000, -0.300000, 0.800000, 0.850000, 0.469999, 200.000000, 20.000000, 5.000000, 8.000000, 0.449999, 30.000000, 1.299999, 0.150000, 0.000000, 0.280000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 559, "Jester", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 3600.000000, 2.200000, 0.000000, 0.000000, -0.050000, 0.850000, 0.800000, 0.500000, 200.000000, 28.000000, 10.000000, 10.000000, 0.449999, 30.000000, 1.100000, 0.100000, 0.000000, 0.280000, -0.150000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 560, "Sultan", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3400.000000, 2.400000, 0.000000, 0.100000, -0.100000, 0.800000, 0.800000, 0.500000, 200.000000, 28.000000, 5.000000, 10.000000, 0.500000, 30.000000, 1.200000, 0.150000, 0.000000, 0.280000, -0.200000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 561, "Stratum", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 4500.000000, 2.099999, 0.000000, 0.100000, -0.100000, 0.600000, 0.850000, 0.500000, 200.000000, 20.000000, 10.000000, 7.000000, 0.500000, 30.000000, 1.000000, 0.150000, 0.000000, 0.280000, -0.159999, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 562, "Elegy", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 3500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.649999, 0.899999, 0.500000, 200.000000, 28.000000, 5.000000, 8.000000, 0.500000, 35.000000, 1.000000, 0.200000, 0.000000, 0.280000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 563, "Raindance", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {10000.000000, 96666.703125, 0.050000, 0.000000, 0.000000, -1.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 1.500000, 0.100000, 0.000000, 0.200000, -0.150000, 0.500000, 0.000000, 0.699999, 0.500000}},
	{-1, 564, "RC Tiger", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 24.100000, 5.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.490000, 75.000000, 35.000000, 15.000000, 5.000000, 0.500000, 45.000000, 1.600000, 0.100000, 0.000000, 0.280000, -0.140000, 0.500000, 0.000000, 0.200000, 0.050000}},
	{-1, 565, "Flash", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 2998.300048, 2.200000, 0.000000, 0.200000, -0.100000, 0.750000, 0.899999, 0.500000, 200.000000, 24.000000, 10.000000, 8.000000, 0.550000, 30.000000, 1.399999, 0.150000, 0.000000, 0.280000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 566, "Tahoma", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 4000.000000, 2.299999, 0.000000, -0.300000, 0.000000, 0.750000, 0.850000, 0.519999, 160.000000, 24.000000, 10.000000, 7.000000, 0.500000, 35.000000, 1.000000, 0.079999, 0.000000, 0.280000, -0.200000, 0.449999, 0.300000, 0.250000, 0.600000}},
	{-1, 567, "Savanna", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 2500.000000, 2.000000, 0.000000, -0.600000, 0.100000, 0.699999, 0.839999, 0.550000, 160.000000, 24.000000, 5.000000, 8.170000, 0.519999, 35.000000, 1.000000, 0.100000, 0.000000, 0.300000, -0.150000, 0.300000, 0.250000, 0.300000, 0.519999}},
	{-1, 568, "Bandito", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 2500.300048, 4.000000, 0.000000, 0.000000, -0.300000, 0.699999, 0.879999, 0.550000, 170.000000, 35.000000, 5.000000, 6.099999, 0.550000, 35.000000, 1.000000, 0.100000, 5.000000, 0.250000, -0.200000, 0.349999, 0.000000, 0.600000, 0.400000}},
	{-1, 569, "Freight Flat Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33187.898437, 1.000000, 0.000000, 0.000000, 0.000000, 0.579999, 0.800000, 0.500000, 110.000000, 20.000000, 20.000000, 3.170000, 0.400000, 30.000000, 1.399999, 0.059999, 0.000000, 0.449999, 0.000000, 0.550000, 0.000000, 0.449999, 0.200000}},
	{-1, 570, "Streak Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 571, "Kart", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {300.000000, 150.000000, 5.000000, 0.000000, 0.000000, -0.150000, 0.899999, 0.850000, 0.479999, 90.000000, 18.000000, 5.000000, 15.000000, 0.200000, 35.000000, 1.500000, 0.200000, 0.000000, 0.250000, -0.039999, 0.500000, 0.000000, 0.379999, 0.400000}},
	{-1, 572, "Mower", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 500.000000, 5.000000, 0.000000, 0.000000, -0.300000, 0.699999, 0.800000, 0.479999, 60.000000, 12.000000, 30.000000, 6.099999, 0.550000, 35.000000, 1.000000, 0.150000, 0.000000, 0.150000, -0.050000, 0.500000, 0.000000, 0.379999, 0.400000}},
	{-1, 573, "Dune", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 574, "Sweeper", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 632.700012, 5.000000, 0.000000, 0.000000, -0.300000, 0.699999, 0.800000, 0.460000, 60.000000, 12.000000, 30.000000, 6.099999, 0.550000, 35.000000, 1.600000, 0.150000, 0.000000, 0.340000, -0.100000, 0.500000, 0.000000, 0.300000, 0.400000}},
	{-1, 575, "Broadway", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4166.399902, 2.000000, 0.000000, 0.100000, 0.100000, 0.649999, 0.750000, 0.460000, 160.000000, 20.000000, 10.000000, 6.000000, 0.550000, 25.000000, 0.800000, 0.070000, 0.000000, 0.300000, -0.140000, 0.500000, 0.250000, 0.300000, 0.519999}},
	{-1, 576, "Tornado", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4166.399902, 2.000000, 0.000000, -0.100000, 0.100000, 0.750000, 0.750000, 0.519999, 160.000000, 20.000000, 10.000000, 6.000000, 0.550000, 35.000000, 0.800000, 0.079999, 0.000000, 0.300000, -0.150000, 0.500000, 0.250000, 0.300000, 0.519999}},
	{-1, 577, "AT400", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {60000.000000, 9000000.000000, 4.000000, 0.000000, 0.000000, 0.000000, 1.500000, 0.899999, 0.850000, 200.000000, 16.000000, 5.000000, 1.000000, 0.449999, 45.000000, 1.500000, 0.150000, 0.000000, 0.500000, -0.200000, 0.300000, 0.000000, 0.699999, 0.750000}},
	{-1, 578, "DFT-30", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33187.898437, 2.000000, 0.000000, 0.000000, -0.200000, 0.649999, 0.800000, 0.400000, 110.000000, 20.000000, 20.000000, 3.500000, 0.400000, 30.000000, 1.399999, 0.059999, 0.000000, 0.449999, -0.250000, 0.550000, 0.000000, 0.449999, 0.200000}},
	{-1, 579, "Huntley", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 6000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 160.000000, 25.000000, 25.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.050000, 0.000000, 0.449999, -0.209999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{-1, 580, "Stafford", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 6000.000000, 2.500000, 0.000000, 0.000000, 0.000000, 0.649999, 0.920000, 0.500000, 165.000000, 24.000000, 15.000000, 5.000000, 0.550000, 30.000000, 1.100000, 0.100000, 0.000000, 0.270000, -0.219999, 0.500000, 0.300000, 0.200000, 0.560000}},
	{-1, 581, "BF-400", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {500.000000, 200.000000, 4.500000, 0.000000, 0.050000, -0.090000, 1.399999, 0.899999, 0.479999, 190.000000, 50.000000, 5.000000, 15.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.150000, -0.200000, 0.500000, 0.000000, 0.000000, 0.150000}},
	{-1, 582, "Newsvan", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 6333.299804, 2.000000, 0.000000, 0.000000, -0.150000, 0.850000, 0.699999, 0.460000, 160.000000, 15.000000, 15.000000, 6.000000, 0.800000, 30.000000, 1.299999, 0.070000, 0.000000, 0.349999, -0.150000, 0.449999, 0.000000, 0.200000, 0.430000}},
	{-1, 583, "Tug", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 632.700012, 5.000000, 0.000000, 0.000000, -0.100000, 0.850000, 0.800000, 0.460000, 170.000000, 15.000000, 30.000000, 6.099999, 0.550000, 35.000000, 1.200000, 0.150000, 0.000000, 0.340000, -0.100000, 0.500000, 0.000000, 0.379999, 0.400000}},
	{-1, 584, "Petrol Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3800.000000, 30000.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.449999, 0.750000, 0.500000, 120.000000, 18.000000, 5.000000, 8.000000, 0.300000, 25.000000, 1.500000, 0.050000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{-1, 585, "Emperor", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 586, "Wayfarer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 587, "Euros", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 2998.300048, 2.200000, 0.000000, 0.100000, -0.100000, 0.699999, 0.800000, 0.500000, 200.000000, 24.000000, 5.000000, 8.000000, 0.550000, 30.000000, 1.200000, 0.150000, 0.000000, 0.300000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{-1, 588, "Hotdog", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 23489.599609, 3.000000, 0.000000, 0.000000, 0.300000, 0.720000, 0.699999, 0.460000, 140.000000, 14.000000, 25.000000, 4.500000, 0.600000, 30.000000, 0.600000, 0.079999, 0.000000, 0.300000, -0.239999, 0.400000, 0.600000, 0.360000, 0.400000}},
	{-1, 589, "Club", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3000.000000, 2.799999, 0.000000, 0.000000, 0.000000, 0.750000, 0.899999, 0.490000, 200.000000, 30.000000, 10.000000, 11.000000, 0.449999, 30.000000, 1.700000, 0.100000, 0.000000, 0.280000, -0.119999, 0.500000, 0.000000, 0.250000, 0.500000}},
	{-1, 590, "Freight Box Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 591, "Article Trailer 3", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3800.000000, 30000.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.449999, 0.750000, 0.500000, 120.000000, 18.000000, 5.000000, 8.000000, 0.300000, 25.000000, 1.500000, 0.050000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{-1, 592, "Andromada", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {40000.000000, 3000000.000000, 4.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 1.000000, 0.449999, 45.000000, 2.000000, 0.150000, 0.000000, 0.500000, -0.200000, 0.500000, 0.000000, 0.300000, 0.750000}},
	{-1, 593, "Dodo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 594, "RC Cam", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 50.000000, 20.000000, 0.000000, 0.050000, -0.200000, 0.600000, 0.899999, 0.490000, 60.000000, 50.000000, 10.000000, 5.500000, 0.500000, 25.000000, 3.000000, 0.300000, 0.000000, 0.150000, -0.150000, 0.500000, 0.000000, 0.200000, 0.050000}},
	{-1, 595, "Launch", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 20210.699218, 1.000000, 0.000000, -1.000000, 0.000000, 1.500000, 15.000000, 0.649999, 190.000000, 1.500000, 5.000000, 0.029999, 0.009999, 24.000000, 1.000000, 3.000000, 0.000000, 0.100000, 0.500000, 2.000000, 0.000000, 0.699999, 0.389999}},
	{-1, 596, "Police Car (LSPD)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 597, "Police Car (SFPD)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 598, "Police Car (LVPD)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 599, "Police Ranger", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 600, "Picador", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 3800.000000, 2.700000, 0.000000, 0.200000, 0.000000, 0.649999, 0.699999, 0.519999, 165.000000, 25.000000, 20.000000, 8.500000, 0.500000, 35.000000, 0.800000, 0.079999, 2.000000, 0.250000, -0.150000, 0.400000, 0.400000, 0.259999, 0.200000}},
	{-1, 601, "Police SF.", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 10000.000000, 2.500000, 0.000000, 0.000000, -0.100000, 0.649999, 0.699999, 0.460000, 110.000000, 24.000000, 25.000000, 6.400000, 0.449999, 27.000000, 0.699999, 0.079999, 1.000000, 0.300000, -0.180000, 0.500000, 0.000000, 0.319999, 0.059999}},
	{-1, 602, "Alpha", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 3400.000000, 2.000000, 0.000000, 0.100000, -0.200000, 0.699999, 0.800000, 0.500000, 200.000000, 23.000000, 5.000000, 7.000000, 0.550000, 30.000000, 1.200000, 0.119999, 0.000000, 0.300000, -0.150000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{-1, 603, "Phoenix", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 4000.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.699999, 0.899999, 0.519999, 200.000000, 26.000000, 5.000000, 6.000000, 0.550000, 30.000000, 0.800000, 0.079999, 0.000000, 0.280000, -0.239999, 0.589999, 0.400000, 0.250000, 0.500000}},
	{-1, 604, "Glendale Shit", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 605, "Sadler Shit", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 606, "Baggage Trailer A", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 1354.199951, 5.000000, 0.000000, 0.400000, -0.200000, 1.000000, 0.850000, 0.500000, 160.000000, 20.000000, 30.000000, 5.000000, 0.500000, 30.000000, 2.000000, 0.090000, 0.000000, 0.250000, -0.100000, 0.500000, 0.000000, 0.259999, 0.500000}},
	{-1, 607, "Baggage Trailer B", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 1354.199951, 5.000000, 0.000000, 0.400000, -0.200000, 1.000000, 0.850000, 0.500000, 160.000000, 20.000000, 30.000000, 5.000000, 0.500000, 30.000000, 2.000000, 0.090000, 0.000000, 0.250000, -0.100000, 0.500000, 0.000000, 0.259999, 0.500000}},
	{-1, 608, "Tug Stairs Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 609, "Boxville", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 23489.599609, 3.000000, 0.000000, 0.000000, 0.000000, 0.819999, 0.699999, 0.460000, 140.000000, 14.000000, 25.000000, 4.500000, 0.600000, 30.000000, 0.899999, 0.079999, 0.000000, 0.250000, -0.250000, 0.349999, 0.600000, 0.360000, 0.400000}},
	{-1, 610, "Farm Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{-1, 611, "Utility Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{560, 612, "Mercedes GT63s AMG", {7412, 7413, 7414, 7974, 7975}, {12343, 12344, 12345, 12346, 12347}, {12067, 12068, 12069, 12070, 12071}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.070000, 0.550000, 0.400000, 0.250000, 0.500000}},
	{579, 613, "Mercedes G63 AMG", {7397, 7398, 7399, 7400, 7401}, {12331, 12332, 12333, 12334, 12335}, {12052, 12053, 12054, 12055, 12056}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.000000, 0.050000, 0.000000, 0.449999, -0.209999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{436, 614, "Audi RS6", {11879, 11880, 11881, 11882, 11883}, {12463, 12464, 12465, 12466, 12467}, {12186, 12187, 12188, 12189, 12190}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.100000, 0.400000, 0.400000, 0.250000, 0.500000}},
	{400, 662, "BMW X5m", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5350.000000, 7008.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.699999, 0.800000, 0.500000, 258.000000, 43.000000, 70.000000, 12.199999, 0.600000, 35.000000, 1.399999, 0.180000, 0.000000, 0.280000, -0.129999, 0.439999, 0.250000, 0.270000, 0.230000}},
	{451, 663, "Chevrolet Corvette", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.150000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{507, 665, "Chevrolet Cruze", {6825, 6826, 6827, 6828, 6829}, {12301, 12302, 12303, 12304, 12305}, {12017, 12018, 12019, 12020, 12021}, {3240.000000, 6200.000000, 1.700000, 0.000000, 0.300000, 0.000000, 0.649999, 0.800000, 0.519999, 198.000000, 20.000000, 50.000000, 8.000000, 0.800000, 30.000000, 1.299999, 0.079999, 0.000000, 0.310000, -0.150000, 0.569999, 0.000000, 0.259999, 0.500000}},
	{490, 666, "Lexus LX570", {11759, 11760, 11761, 11762, 11763}, {12373, 12374, 12375, 12376, 12377}, {12097, 12098, 12099, 12100, 12101}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.000000, 0.050000, 0.000000, 0.449999, -0.209999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{411, 667, "Porsche 911", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.050000, 0.400000, 0.400000, 0.250000, 0.500000}},
	{490, 668, "Porsche Cayenne S", {11849, 11850, 11851, 11852, 11853}, {12443, 12444, 12445, 12446, 12447}, {12161, 12162, 12163, 12164, 12165}, {3350.000000, 6712.500000, 0.000000, 0.000000, 0.200000, 0.000000, 0.649999, 0.850000, 0.519999, 0.000000, 0.000000, 0.000000, 12.699999, 0.600000, 0.000000, 0.000000, 0.100000, 0.000000, 0.270000, -0.170000, 0.500000, 0.200000, 0.239999, 0.479999}},
	{541, 699, "Bentley", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.200000, 0.000000, 0.280000, -0.100000, 0.500000, 0.100000, 0.250000, 0.500000}},
	{494, 793, "BMW M8", {6795, 6796, 6797, 6798, 6799}, {12281, 12282, 12283, 12284, 12285}, {11992, 11993, 11994, 11995, 11996}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.070000, 0.449999, 0.400000, 0.250000, 0.500000}},
	{580, 794, "Mercedes E63s AMG", {12744, 12745, 12746, 12747, 12748}, {12750, 12751, 12752, 12753, 12754}, {12755, 12756, 12757, 12758, 12759}, {2100.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.800000, 0.800000, 0.519999, 269.000000, 52.000000, 125.000000, 7.000000, 0.500000, 40.000000, 1.600000, 0.180000, 0.000000, 0.200000, -0.050000, 0.500000, 0.600000, 0.500000, 0.540000}},
	{559, 909, "Mercedes S63 Coupe AMG", {11810, 11811, 11812, 11813, 11814}, {12413, 12414, 12415, 12416, 12417}, {12137, 12138, 12139, 12140, 12141}},
	{442, 965, "Volkswagen Touareg", {11924, 11925, 11926, 11927, 11928}, {12498, 12499, 12500, 12501, 12502}, {12216, 12217, 12218, 12219, 12220}, {4547.000000, 8564.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 238.000000, 37.000000, 55.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.100000, 0.000000, 0.449999, -0.170000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{400, 1194, "Lamborghini Urus", {11942, 11943, 11944, 11945, 11946}, {12508, 12509, 12510, 12511, 12512}, {12231, 12232, 12233, 12234, 12235}, {2400.000000, 5200.000000, 2.400000, 0.000000, 0.000000, -0.500000, 0.800000, 0.800000, 0.500000, 274.000000, 47.400001, 110.000000, 6.500000, 0.579999, 40.000000, 0.800000, 0.150000, 0.000000, 0.200000, -0.079999, 0.500000, 0.300000, 0.150000, 0.540000}},
	{400, 1195, "Audi Q8", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4645.000000, 7228.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 238.000000, 37.000000, 50.000000, 11.199999, 0.600000, 35.000000, 1.100000, 0.079999, 0.000000, 0.280000, -0.090000, 0.519999, 0.250000, 0.270000, 0.230000}},
	{535, 1196, "Dodge Challenger SRT", {6849, 6850, 6851, 6852, 6853}, {12316, 12317, 12318, 12319, 12320}, {12037, 12038, 12039, 12040, 12041}, {3675.000000, 7146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 273.000000, 38.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.500000, 0.059999, 3.000000, 0.349999, -0.129999, 0.500000, 0.000000, 0.280000, 0.300000}},
	{494, 1197, "Acura NSX", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4000.000000, 6225.299804, 1.799999, 0.000000, -0.150000, -0.200000, 0.750000, 0.899999, 0.479999, 288.000000, 42.599998, 70.000000, 14.319999, 0.509999, 34.000000, 1.299999, 0.119999, 5.000000, 0.250000, -0.079999, 0.500000, 0.250000, 0.370000, 0.699999}},
	{400, 1198, "Volvo V60", {11954, 11955, 11956, 11957, 11958}, {12518, 12519, 12520, 12521, 12522}, {12241, 12242, 12243, 12244, 12245}, {3240.000000, 6200.000000, 1.700000, 0.000000, 0.300000, 0.000000, 0.649999, 0.800000, 0.519999, 208.000000, 20.000000, 50.000000, 8.000000, 0.800000, 30.000000, 1.299999, 0.079999, 0.000000, 0.310000, -0.100000, 0.569999, 0.000000, 0.259999, 0.500000}},
	{490, 1199, "Range Rover Evoque", {11861, 11862, 11863, 11864, 11865}, {12453, 12454, 12455, 12456, 12457}, {12171, 12172, 12173, 12174, 12175}, {3300.000000, 5015.000000, 2.000000, 0.000000, 0.000000, -0.100000, 0.750000, 0.800000, 0.500000, 227.000000, 30.000000, 120.000000, 5.000000, 0.519999, 40.000000, 1.000000, 0.150000, 0.000000, 0.200000, -0.019999, 0.500000, 0.300000, 0.100000, 0.239999}},
	{411, 1200, "Honda Civic Type-R", {6837, 6838, 6839, 6840, 6841}, {12306, 12307, 12308, 12309, 12310}, {12027, 12028, 12029, 12030, 12031}, {3240.000000, 6200.000000, 1.700000, 0.000000, 0.300000, 0.000000, 0.649999, 0.800000, 0.519999, 268.000000, 35.000000, 50.000000, 8.000000, 0.800000, 30.000000, 1.299999, 0.079999, 0.000000, 0.310000, -0.150000, 0.569999, 0.000000, 0.259999, 0.500000}},
	{566, 1201, "Lexus Sport-S", {11419, 11754, 11755, 11756, 11757}, {12368, 12369, 12370, 12371, 12372}, {12092, 12093, 12094, 12095, 12096}, {3690.000000, 7000.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.850000, 0.850000, 0.500000, 248.000000, 33.000000, 50.000000, 10.170000, 0.519999, 27.000000, 1.700000, 0.119999, 0.000000, 0.360000, -0.119999, 0.540000, 0.000000, 0.200000, 0.519999}},
	{475, 1202, "Ford Mustang GT", {11817, 11818, 11819, 11820, 11821}, {12418, 12419, 12420, 12421, 12422}, {12142, 12143, 12144, 12145, 12146}, {3675.000000, 7146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 268.000000, 40.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.500000, 0.059999, 3.000000, 0.349999, -0.119999, 0.529999, 0.000000, 0.280000, 0.300000}},
	{411, 1203, "Volvo XC90", {11960, 11961, 11962, 11963, -1}, {12523, 12524, 12525, 12526, 12527}, {12246, 12247, 12248, 12249, 12250}, {4649.000000, 8604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 228.000000, 32.000000, 55.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.090000, 0.000000, 0.449999, -0.270000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{411, 1204, "Jaguar F-pace", {9479, 9480, 9481, 10311, 10312}, {12358, 12359, 12360, 12361, 12362}, {12082, 12083, 12084, 12085, 12086}, {3500.000000, 6500.000000, 2.099999, 0.000000, 0.000000, -0.600000, 0.800000, 0.800000, 0.465000, 204.000000, 37.000000, 110.000000, 5.000000, 0.500000, 31.000000, 0.899999, 0.180000, 0.000000, 0.300000, -0.119999, 0.400000, 0.500000, 0.439999, 0.300000}},
	{516, 1205, "Kia Optima", {11831, 11832, 11833, 11834, 11835}, {12428, 12429, 12430, 12431, 12432}, {12147, 12148, 12149, 12150, 12151}, {2690.000000, 5000.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.850000, 0.850000, 0.500000, 238.000000, 33.000000, 50.000000, 10.170000, 0.519999, 27.000000, 1.700000, 0.119999, 0.000000, 0.360000, -0.079999, 0.540000, 0.000000, 0.200000, 0.519999}},
	{546, 3155, "BMW Z4 40i", {6807, 6808, 6809, 6810, 6811}, {12291, 12292, 12293, 12294, 12295}, {12002, 12003, 12004, 12005, 12006}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.070000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{547, 3156, "Mercedes-Benz S600 W124", {10314, 10745, 10746, 10747, 10748}, {12363, 12364, 12365, 12366, 12367}, {12087, 12088, 12089, 12090, 12091}, {2500.000000, 4500.000000, 2.000000, 0.000000, 0.300000, -0.150000, 0.850000, 0.850000, 0.500000, 258.000000, 40.000000, 50.000000, 10.000000, 0.500000, 45.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.159999, 0.500000, 0.500000, 0.250000, 0.500000}},
	{400, 3157, "BMW X5 E53", {6801, 6802, 6803, 6804, 6805}, {12286, 12287, 12288, 12289, 12290}, {11997, 11998, 11999, 12000, 12001}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.000000, 0.050000, 0.000000, 0.449999, -0.250000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{411, 3158, "Nissan Skyline R34", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2552.000000, 5500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.850000, 0.850000, 0.500000, 270.000000, 44.000000, 50.000000, 17.000000, 0.500000, 35.000000, 1.200000, 0.200000, 0.000000, 0.360000, -0.150000, 0.600000, 0.000000, 0.259999, 0.500000}},
	{522, 3194, "Ducati Diavel", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {680.000000, 455.700012, 4.000000, 0.000000, 0.079999, -0.090000, 1.799999, 1.200000, 0.400000, 299.000000, 70.000000, 5.000000, 13.000000, 0.500000, 35.000000, 0.970000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.150000}},
	{522, 3195, "Ducati Panigale", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {480.000000, 300.700012, 4.000000, 0.000000, 0.079999, -0.090000, 1.799999, 0.899999, 0.479999, 299.000000, 54.000000, 5.000000, 13.000000, 0.500000, 35.000000, 0.970000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.150000}},
	{522, 3196, "Ducati Ducnaked", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {490.000000, 300.700012, 4.000000, 0.000000, 0.079999, -0.090000, 1.799999, 0.899999, 0.479999, 299.000000, 50.000000, 5.000000, 13.000000, 0.500000, 35.000000, 0.970000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.150000}},
	{522, 3197, "Kawasaki Ninja ZX-10RR", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {380.000000, 240.699996, 3.000000, 0.000000, 0.079999, -0.090000, 1.799999, 0.899999, 0.479999, 259.000000, 70.000000, 5.000000, 13.000000, 0.500000, 35.000000, 0.970000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.150000}},
	{522, 3198, "Western", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 600.000000, 4.000000, 0.000000, 0.100000, 0.000000, 1.399999, 0.850000, 0.479999, 180.000000, 42.000000, 5.000000, 5.000000, 0.550000, 35.000000, 0.649999, 0.200000, 0.000000, 0.090000, -0.109999, 0.550000, 0.000000, 0.000000, 0.239999}},
	{560, 3199, "Rolls-Royce Cullinan", {11873, 11874, 11875, 11876, 11877}, {12458, 12459, 12460, 12461, 12462}, {12181, 12182, 12183, 12184, 12185}, {2660.000000, 6000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.000000, 0.050000, 0.000000, 0.449999, -0.150000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{545, 3200, "Volkswagen Beetle", {6781, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, 0.000000, 0.649999, 0.920000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.000000, 1.100000, 0.100000, 0.000000, 0.270000, -0.100000, 0.550000, 0.300000, 0.200000, 0.560000}},
	{411, 3201, "Bugatti Divo Sport", {6813, 6814, 6815, 6816, 6817}, {-1, -1, -1, -1, -1}, {12007, 12008, 12009, 12010, 12011}, {2996.000000, 5500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 418.000000, 60.000000, 75.000000, 17.000000, 0.519999, 30.000000, 1.600000, 0.200000, 10.000000, 0.289999, -0.050000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{411, 3202, "Bugatti Chiron", {6831, 6832, 6833, 6834, 6836}, {-1, -1, -1, -1, -1}, {12022, 12023, 12024, 12025, 12026}, {2996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 408.000000, 58.000000, 75.000000, 17.000000, 0.519999, 30.000000, 1.600000, 0.200000, 10.000000, 0.289999, -0.050000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{545, 3203, "Fiat 500", {6855, 6856, 6857, 6858, 6859}, {12321, 12322, 12323, 12324, 12325}, {12042, 12043, 12044, 12045, 12046}, {0.000000, 0.000000, 1.700000, 0.000000, 0.000000, 0.000000, 0.750000, 0.750000, 0.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.000000, 1.500000, 0.200000, 0.000000, 0.270000, -0.119999, 0.550000, 0.300000, 0.200000, 0.540000}},
	{400, 3204, "Mercedes-Benz GLS 2020", {7409, 7410, 7411, -1, -1}, {12341, 12342, -1, -1, -1}, {12062, 12063, 12064, 12065, 12066}, {3350.000000, 6712.500000, 0.000000, 0.000000, 0.200000, 0.000000, 0.649999, 0.850000, 0.519999, 0.000000, 35.400001, 0.000000, 0.000000, 0.600000, 0.000000, 0.000000, 0.100000, 0.000000, 0.270000, -0.100000, 0.500000, 0.200000, 0.239999, 0.600000}},
	{579, 3205, "Mercedes G65 AMG", {7977, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3700.000000, 9500.000000, 2.200000, 0.000000, 0.000000, -0.400000, 0.750000, 0.750000, 0.469999, 207.000000, 37.500000, 97.000000, 5.000000, 0.500000, 30.000000, 0.800000, 0.180000, 0.000000, 0.280000, -0.119999, 0.500000, 0.500000, 0.439999, 0.400000}},
	{411, 3206, "Lamborghini Aventador SVJ", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.750000, 1.100000, 0.449999, 400.000000, 60.000000, 60.000000, 0.000000, 0.600000, 0.000000, 1.350000, 0.289999, 1.299999, 0.200000, -0.050000, 0.699999, 0.500000, 0.400000, 0.500000}},
	{490, 3207, "Range Rover SVA", {11418, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3049.000000, 6604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 238.000000, 36.000000, 55.000000, 7.000000, 0.449999, 35.000000, 0.800000, 0.079999, 0.000000, 0.449999, -0.280000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{585, 3208, "BMW 530i E39", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2855.000000, 4350.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.600000, 0.519999, 258.000000, 33.000000, 35.000000, 14.399999, 0.600000, 40.000000, 1.100000, 0.150000, 0.000000, 0.389999, -0.100000, 0.449999, 0.000000, 0.259999, 0.540000}},
	{566, 3209, "Mercedes-Benz S600", {11809, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 4800.000000, 1.799999, 0.000000, 0.000000, -0.400000, 0.699999, 0.800000, 0.479999, 258.000000, 36.000000, 50.000000, 12.000000, 0.529999, 38.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.090000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{560, 3210, "Tesla Model X", {11816, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 5500.000000, 2.000000, 0.000000, 0.000000, -0.600000, 0.750000, 0.850000, 0.500000, 258.000000, 43.000000, 50.000000, 15.000000, 0.500000, 30.000000, 1.200000, 0.200000, 0.000000, 0.349999, -0.259999, 0.469999, 0.000000, 0.379999, 0.349999}},
	{551, 3211, "Nissan LEAF", {11823, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, 0.000000, 0.649999, 0.920000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.000000, 1.100000, 0.100000, 0.000000, 0.270000, -0.100000, 0.550000, 0.300000, 0.200000, 0.560000}},
	{562, 3212, "Nissan Silvia S15", {11824, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.349999, 0.779999, 0.699999, 0.500000, 240.000000, 40.000000, 186.000000, 5.000000, 0.500000, 42.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.079999, 0.500000, 0.300000, 0.649999, 0.600000}},
	{560, 3213, "Subaru Forester XT", {11891, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3665.000000, 6700.000000, 1.500000, 0.000000, 0.300000, -0.400000, 0.699999, 0.750000, 0.500000, 226.000000, 30.000000, 40.000000, 9.000000, 0.800000, 30.000000, 1.000000, 0.079999, 0.000000, 0.300000, -0.140000, 0.699999, 0.000000, 0.500000, 0.400000}},
	{580, 3215, "Subaru Legacy 1989", {11892, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3665.000000, 6700.000000, 1.500000, 0.000000, 0.300000, -0.400000, 0.699999, 0.750000, 0.500000, 218.000000, 19.000000, 40.000000, 9.000000, 0.800000, 30.000000, 1.000000, 0.079999, 0.000000, 0.300000, -0.140000, 0.649999, 0.000000, 0.500000, 0.400000}},
	{560, 3216, "Hyundai Sonata", {11899, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 5200.200195, 2.000000, 0.000000, 0.000000, -0.400000, 0.779999, 0.759999, 0.519999, 190.000000, 39.000000, 100.000000, 5.000000, 0.500000, 32.000000, 0.800000, 0.150000, 0.000000, 0.200000, -0.200000, 0.479999, 0.300000, 0.289999, 0.349999}},
	{547, 3217, "BMW 750i E38", {6788, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2845.000000, 4008.300048, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 258.000000, 41.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.079999, 0.439999, 0.250000, 0.270000, 0.230000}},
	{492, 3218, "Mercedes-Benz E 55 AMG", {11808, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3115.000000, 5028.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 258.000000, 42.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.109999, 0.439999, 0.250000, 0.270000, 0.230000}},
	{466, 3219, "Mercedes-Benz E500", {11807, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3121.000000, 5132.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 259.000000, 42.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.109999, 0.439999, 0.250000, 0.270000, 0.230000}},
	{451, 3220, "Jackson Storm", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2515.000000, 4528.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 302.000000, 34.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.079999, 0.500000, 0.250000, 0.270000, 0.230000}},
	{451, 3222, "Lightning McQueen", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2415.000000, 4428.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 306.000000, 35.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.079999, 0.500000, 0.250000, 0.270000, 0.230000}},
	{525, 3223, "Sir Tow Mater", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3415.000000, 5428.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 150.000000, 18.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.079999, 0.500000, 0.250000, 0.270000, 0.230000}},
	{563, 3224, "Buckingham", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 29270.800781, 0.200000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 2.000000, 0.150000, 0.000000, 0.500000, -0.200000, 0.500000, 0.000000, 0.300000, 0.750000}},
	{579, 3232, "Infiniti FX 50", {9194, 9195, 9196, 9197, 9198}, {12348, 12349, 12350, 12351, 12352}, {12072, 12073, 12074, 12075, 12076}, {3645.000000, 6808.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 228.000000, 30.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.090000, 0.500000, 0.250000, 0.270000, 0.230000}},
	{490, 3233, "Lexus RX 450h", {11765, 11766, 11767, 11768, 11769}, {12378, 12379, 12380, 12381, 12382}, {12102, 12103, 12104, 12105, 12106}, {4649.000000, 8604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 235.000000, 32.000000, 55.000000, 7.000000, 0.449999, 35.000000, 0.800000, 0.079999, 0.000000, 0.449999, -0.200000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{400, 3234, "Kia Sportage", {11900, 11901, 11902, 11903, 11904}, {12478, 12479, 12480, 12481, 12482}, {12201, 12202, 12203, 12204, 12205}, {3300.000000, 5015.000000, 2.200000, 0.000000, 0.000000, -0.200000, 0.750000, 0.750000, 0.460000, 176.000000, 37.500000, 90.000000, 5.000000, 0.500000, 37.000000, 0.800000, 0.177000, 0.000000, 0.200000, -0.140000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{419, 3235, "Volkswagen Golf R", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3240.000000, 6200.000000, 1.700000, 0.000000, 0.300000, 0.000000, 0.800000, 0.800000, 0.479999, 248.000000, 36.000000, 50.000000, 8.000000, 0.800000, 30.000000, 1.600000, 0.079999, 0.000000, 0.310000, -0.150000, 0.569999, 0.000000, 0.259999, 0.500000}},
	{541, 3236, "Audi R8", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.819999, 0.819999, 0.460000, 255.000000, 55.000000, 120.000000, 7.000000, 0.500000, 45.000000, 1.000000, 0.180000, 0.000000, 0.200000, -0.070000, 0.529999, 0.600000, 0.400000, 0.540000}},
	{445, 3237, "Toyota Camry XV40", {6819, 6820, 6821, 6822, 6823}, {12296, 12297, 12298, 12299, 12300}, {12012, 12013, 12014, 12015, 12016}, {2690.000000, 5000.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.850000, 0.850000, 0.500000, 238.000000, 30.000000, 50.000000, 10.170000, 0.519999, 27.000000, 1.700000, 0.119999, 0.000000, 0.360000, -0.140000, 0.540000, 0.000000, 0.200000, 0.519999}},
	{560, 3238, "Toyota Camry XV70", {6843, 6844, 6845, 6846, 6847}, {12311, 12312, 12313, 12314, 12315}, {12032, 12033, 12034, 12035, 12036}, {3690.000000, 7000.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.850000, 0.850000, 0.500000, 248.000000, 32.000000, 50.000000, 10.170000, 0.519999, 27.000000, 1.700000, 0.119999, 0.000000, 0.360000, -0.039999, 0.419999, 0.000000, 0.200000, 0.519999}},
	{566, 3239, "BMW M5 E60", {11783, 11784, 11785, 11786, 11787}, {12393, 12394, 12395, 12396, 12397}, {12117, 12118, 12119, 12120, 12121}, {3855.000000, 6350.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.600000, 0.519999, 268.000000, 39.000000, 35.000000, 14.399999, 0.600000, 40.000000, 1.100000, 0.150000, 0.000000, 0.389999, -0.100000, 0.449999, 0.000000, 0.259999, 0.540000}},
	{540, 3240, "BMW M5 F90", {11789, 11790, 11791, 11792, 11793}, {12398, 12399, 12400, 12401, 12402}, {12122, 12123, 12124, 12125, 12126}, {2570.000000, 4300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.750000, 0.850000, 0.500000, 278.000000, 38.000000, 50.000000, 10.000000, 0.529999, 35.000000, 1.600000, 0.200000, 0.000000, 0.280000, -0.180000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{560, 3245, "Mercedes Maybach S 650", {11795, 11796, 11797, 11798, 11799}, {12403, 12404, 12405, 12406, 12407}, {12127, 12128, 12129, 12130, 12131}, {3390.000000, 6000.000000, 2.200000, 0.000000, 0.200000, 0.150000, 0.649999, 0.800000, 0.519999, 258.000000, 38.000000, 50.000000, 13.000000, 0.449999, 30.000000, 1.200000, 0.129999, 3.000000, 0.300000, -0.050000, 0.500000, 0.300000, 0.200000, 0.560000}},
	{480, 3247, "Mercedes-Benz AMG GT", {11801, 11802, 11803, 11804, 11805}, {12408, 12409, 12410, 12411, 12412}, {12132, 12133, 12134, 12135, 12136}, {4195.000000, 6500.000000, 1.799999, 0.000000, -0.150000, -0.200000, 0.850000, 0.850000, 0.479999, 278.000000, 43.000000, 70.000000, 16.000000, 0.579999, 30.000000, 1.299999, 0.129999, 5.000000, 0.250000, -0.050000, 0.449999, 0.300000, 0.150000, 0.540000}},
	{579, 3248, "Porsche Panamera Turbo", {11837, 11838, 11839, 11840, 11841}, {12433, 12434, 12435, 12436, 12437}, {12152, 12153, 12154, 12155, 12156}, {4400.000000, 5500.000000, 2.000000, 0.000000, 0.050000, -0.100000, 0.850000, 0.850000, 0.500000, 268.000000, 41.000000, 50.000000, 11.000000, 0.600000, 30.000000, 1.600000, 0.200000, 3.000000, 0.300000, -0.100000, 0.500000, 0.200000, 0.259999, 0.500000}},
	{551, 3251, "Volkswagen Passat", {11843, 11844, 11845, 11846, 11847}, {12438, 12439, 12440, 12441, 12442}, {12157, 12158, 12159, 12160, -1}, {3705.000000, 7300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.850000, 0.850000, 0.500000, 250.619995, 30.000000, 40.000000, 10.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.150000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{477, 3254, "Chevrolet Corvette", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{470, 3266, "Dodge Ram", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{475, 3348, "Ford Mustang Shelby GT500", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3525.000000, 6146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 258.000000, 46.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.500000, 0.059999, 3.000000, 0.349999, -0.100000, 0.500000, 0.000000, 0.280000, 0.300000}},
	{496, 3974, "Aston Martin DB5", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3291.000000, 6300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.750000, 0.850000, 0.500000, 218.000000, 38.000000, 40.000000, 11.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.100000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{502, 4542, "BMW M3 GTR", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2552.000000, 5700.000000, 1.799999, 0.000000, 0.300000, -0.300000, 0.850000, 0.850000, 0.500000, 298.000000, 47.000000, 50.000000, 17.000000, 0.500000, 35.000000, 1.200000, 0.200000, 0.000000, 0.360000, -0.140000, 0.649999, 0.500000, 0.250000, 0.600000}},
	{541, 4543, "Chevrolet Camaro", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2675.000000, 5446.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.850000, 0.850000, 0.449999, 258.000000, 42.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.200000, 0.200000, 3.000000, 0.349999, -0.070000, 0.529999, 0.000000, 0.280000, 0.300000}},
	{506, 4544, "Mazda RX7 Veilside FD", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.200000, 0.819999, 0.779999, 0.500000, 254.000000, 55.000000, 70.000000, 5.500000, 0.500000, 42.000000, 0.800000, 0.180000, 0.000000, 0.330000, -0.150000, 0.500000, 0.300000, 0.500000, 0.300000}},
	{558, 4545, "Mazda RX8", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.500000, 0.800000, 0.750000, 0.500000, 209.000000, 45.000000, 70.000000, 5.000000, 0.500000, 42.000000, 1.200000, 0.180000, 0.000000, 0.200000, -0.079999, 0.500000, 0.300000, 0.300000, 0.300000}},
	{559, 4546, "Mitsubishi Eclipse", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2250.000000, 4300.000000, 2.400000, 0.000000, 0.000000, -0.500000, 0.779999, 0.759999, 0.479999, 215.000000, 47.000000, 85.000000, 6.000000, 0.500000, 35.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.100000, 0.500000, 0.300000, 0.300000, 0.300000}},
	{542, 4547, "Ford Mustang 289", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3675.000000, 7146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 238.000000, 35.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.500000, 0.059999, 3.000000, 0.349999, -0.100000, 0.529999, 0.000000, 0.280000, 0.300000}},
	{562, 4548, "Nissan 350Z", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2552.000000, 5500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.649999, 0.899999, 0.500000, 275.000000, 40.000000, 50.000000, 17.000000, 0.500000, 35.000000, 1.200000, 0.200000, 0.000000, 0.360000, -0.150000, 0.600000, 0.000000, 0.259999, 0.500000}},
	{560, 4774, "BMW 760li", {6769, 6770, 6771, 6772, 6773}, {12261, 12262, 12263, 12264, 12265}, {11977, 11978, 11979, 11980, 11981}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.899999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.119999, 0.550000, 0.400000, 0.250000, 0.500000}},
	{429, 4775, "Aston Martin One-77", {11825, 11826, 11827, 11828, 11829}, {12423, 12424, 12425, 12426, 12427}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.119999, 0.550000, 0.400000, 0.250000, 0.500000}},
	{541, 4776, "Bentley Bacalar", {6775, 6776, 6777, 6778, 6779}, {12266, 12267, 12268, 12269, 12270}, {11982, 11983, 11984, 11985, 11986}},
	{579, 4777, "Bentley Bentayga", {6782, 6783, 6784, 6785, 6786}, {12271, 12272, 12273, 12274, 12275}, {11987, 11988, 11989, 11990, 11991}, {3500.000000, 10500.000000, 2.200000, 0.000000, 0.000000, -0.400000, 0.769999, 0.769999, 0.479999, 264.000000, 33.500000, 165.000000, 5.000000, 0.500000, 30.000000, 0.899999, 0.180000, 0.000000, 0.280000, -0.119999, 0.500000, 0.500000, 0.439999, 0.400000}},
	{415, 4778, "BMW M4 G82", {11777, 11778, 11779, 11780, 11781}, {12388, 12389, 12390, 12391, 12392}, {12112, 12113, 12114, 12115, 12116}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.119999, 0.500000, 0.400000, 0.250000, 0.500000}},
	{415, 4779, "BMW i8", {6789, 6790, 6791, 6792, 6793}, {12276, 12277, 12278, 12279, 12280}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.119999, 0.500000, 0.400000, 0.250000, 0.500000}},
	{426, 4780, "Genesis G90", {7403, 7404, 7405, 7406, 7407}, {12336, 12337, 12338, 12339, 12340}, {12057, 12058, 12059, 12060, 12061}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.119999, 0.500000, 0.400000, 0.250000, 0.500000}},
	{496, 4781, "Honda Integra Type-R", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{560, 4782, "BMW M3 G20", {11771, 11772, 11773, 11774, 11775}, {12383, 12384, 12385, 12386, 12387}, {12107, 12108, 12109, 12110, 12111}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.200000, 0.000000, 0.280000, -0.250000, 0.449999, 0.449999, 0.250000, 0.500000}},
	{421, 4783, "Mercedes-Benz S500 4Matic", {11885, 11886, 11887, 11888, 11889}, {12468, 12469, 12470, 12471, 12472}, {12191, 12192, 12193, 12194, 12195}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.200000, 0.000000, 0.280000, -0.119999, 0.449999, 0.449999, 0.250000, 0.500000}},
	{554, 4784, "Ford Raptor F150", {11867, 11868, 11869, 11870, 11871}, {-1, -1, -1, -1, -1}, {12176, 12177, 12178, 12179, 12180}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.899999, 0.100000, 0.000000, 0.280000, -0.119999, 0.449999, 0.449999, 0.250000, 0.500000}},
	{415, 4785, "Ferrari J50", {6861, 6862, 7393, 7394, 7395}, {12326, 12327, 12328, 12329, 12330}, {12047, 12048, 12049, 12050, 12051}, {0.000000, 0.000000, 0.000000, 0.000000, -0.300000, -0.200000, 0.750000, 0.800000, 0.449999, 0.000000, 0.000000, 0.000000, 15.000000, 0.509999, 30.000000, 1.600000, 0.200000, 0.000000, 0.119999, -0.100000, 0.449999, 0.449999, 0.250000, 0.500000}},
	{477, 4786, "Mercedes-Benz SLR McLaren", {11893, 11894, 11895, 11896, 11897}, {12473, 12474, 12475, 12476, 12477}, {12196, 12197, 12198, 12199, 12200}, {0.000000, 0.000000, 1.799999, 0.000000, 0.000000, -0.100000, 0.899999, 0.899999, 0.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.299999, 0.250000, 0.000000, 0.280000, -0.100000, 0.500000, 0.449999, 0.250000, 0.500000}},
	{559, 4787, "Subaru BRZ", {11906, 11907, 11908, 11909, 11910}, {12483, 12484, 12485, 12486, 12487}, {12206, 12207, 12208, 12209, 12210}},
	{400, 4788, "Lada Vesta SW Cross", {11912, 11913, 11914, 11915, 11916}, {12488, 12489, 12490, 12491, 12492}, {12211, 12212, 12213, 12214, 12215}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.299999, 0.250000, 0.000000, 0.280000, -0.100000, 0.500000, 0.449999, 0.250000, 0.500000}},
	{560, 4789, "Porsche Taycan", {11918, 11919, 11920, 11921, 11922}, {12493, 12494, 12495, 12496, 12497}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.299999, 0.250000, 0.000000, 0.280000, -0.100000, 0.500000, 0.449999, 0.250000, 0.500000}},
	{451, 4790, "Ferrari Enzo", {11930, 11931, 11932, 11933, 11934}, {-1, -1, -1, -1, -1}, {12221, 12222, 12223, 12224, 12225}},
	{470, 4791, "UAZ Patriot", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{438, 4792, "Volga", {11948, 11949, 11950, 11951, 11952}, {12513, 12514, 12515, 12516, 12517}, {12236, 12237, 12238, 12239, 12240}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.899999, 0.100000, 0.000000, 0.280000, -0.119999, 0.449999, 0.449999, 0.250000, 0.500000}},
	{554, 4793, "Mercedes-Benz X Class", {11965, 11966, 11967, 11968, 11969}, {-1, -1, -1, -1, -1}, {12251, 12252, 12253, 12254, 12255}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.899999, 0.100000, 0.000000, 0.280000, -0.119999, 0.449999, 0.449999, 0.250000, 0.500000}},
	{560, 4794, "Jaguar XF", {11971, 11972, 11973, 11974, 11975}, {12528, 12529, 12530, 12531, 12532}, {12256, 12257, 12258, 12259, 12260}},
	{539, 4795, "RC Shutle", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{416, 4796, "Dodge Grand Caravan", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.300000, -0.100000, 0.750000, 0.850000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.529999, 0.000000, 0.000000, 0.119999, 0.000000, 0.280000, -0.200000, 0.500000, 0.000000, 0.200000, 0.239999}},
	{596, 4797, "Dodge Charger", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.300000, -0.100000, 0.850000, 0.850000, 0.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.529999, 0.000000, 0.000000, 0.119999, 0.000000, 0.280000, -0.200000, 0.500000, 0.000000, 0.200000, 0.239999}},
	{599, 4798, "Ford Explorer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.300000, -0.100000, 0.750000, 0.850000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.529999, 0.000000, 0.000000, 0.119999, 0.000000, 0.280000, -0.200000, 0.500000, 0.000000, 0.200000, 0.239999}},
	{470, 4799, "Ford F150", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.300000, -0.100000, 0.750000, 0.850000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.529999, 0.000000, 0.000000, 0.119999, 0.000000, 0.280000, -0.200000, 0.500000, 0.000000, 0.200000, 0.239999}},
	{512, 4800, "Deltaplane", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3000.000000, 10050.000000, 20.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 180.000000, 48.000000, 5.000000, 1.500000, 0.449999, 45.000000, 1.000000, 0.150000, 0.000000, 0.500000, -0.200000, 0.800000, 0.000000, 0.600000, 0.750000}},
	{512, 4801, "Sea Shark", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 1483.300048, 1.000000, 0.000000, -0.200000, 0.000000, 1.500000, 2.500000, 0.400000, 170.000000, 1.200000, 5.000000, 0.070000, 0.050000, 30.000000, 1.899999, 4.500000, 0.000000, 3.500000, 0.100000, 0.699999, 0.000000, 0.200000, 0.119999}},
	{596, 4802, "Lamborghini Aventador LP700", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 1.700000, 0.000000, 0.000000, -0.100000, 0.899999, 0.899999, 0.479999, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.100000, 0.500000, 0.500000, 0.250000, 0.500000}},
	{598, 4803, "Ferrari 812 Superfast", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 1.200000, 1.200000, 0.479999, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.119999, 0.400000, 0.400000, 0.250000, 0.449999}},
	{551, 6604, "Audi A6", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.129999, 0.500000, 0.400000, 0.250000, 0.500000}},
	{400, 6605, "Audi Q7", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.899999, 0.119999, 0.000000, 0.280000, -0.230000, 0.500000, 0.500000, 0.250000, 0.500000}},
	{460, 6606, "BMW M6 2020", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2100.000000, 4200.000000, 2.200000, 0.000000, 0.000000, -0.600000, 0.819999, 0.800000, 0.479999, 219.000000, 45.000000, 127.000000, 7.000000, 0.500000, 40.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.100000, 0.500000, 0.300000, 0.439999, 0.300000}},
	{460, 6607, "BMW M6 1990", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.100000, 0.500000, 0.500000, 0.250000, 0.500000}},
	{460, 6608, "Mercedes CLA 45 AMG", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.850000, 0.850000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.100000, 0.500000, 0.500000, 0.250000, 0.500000}},
	{551, 6609, "Mercedes CLS 63 AMG", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.850000, 0.800000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.100000, 0.500000, 0.500000, 0.250000, 0.500000}},
	{579, 6610, "Haval H6 2.0 GDIT", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.899999, 0.119999, 0.000000, 0.280000, -0.150000, 0.500000, 0.500000, 0.250000, 0.500000}},
	{590, 6611, "Toyota Land Cruiser VXR V8 4", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{540, 6612, "Lincoln Continental", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{580, 6613, "Porsche Macan Turbo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.000000, 0.150000, 0.000000, 0.280000, -0.180000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{457, 6614, "Daewoo Matiz", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.000000, 0.200000, 0.000000, 0.280000, -0.180000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{470, 6615, "Mercedes-AMG G63 6x6", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3000.000000, 7500.000000, 3.000000, 0.000000, 0.000000, -0.600000, 0.850000, 0.850000, 0.400000, 258.000000, 46.000000, 150.000000, 4.500000, 0.500000, 30.000000, 1.200000, 0.200000, 0.000000, 0.349999, -0.200000, 0.500000, 0.000000, 0.379999, 0.349999}},
	{560, 6616, "Mercedes E-63 AMG", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 2.400000, 0.000000, 0.000000, -0.550000, 0.800000, 0.800000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.500000, 0.000000, 0.899999, 0.200000, 0.000000, 0.250000, -0.150000, 0.449999, 0.500000, 0.439999, 0.300000}},
	{556, 6617, "Monster Mutt", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 15000.000000, 3.000000, 0.000000, 0.000000, -0.349999, 0.649999, 0.850000, 0.550000, 170.000000, 45.000000, 25.000000, 7.000000, 0.449999, 35.000000, 1.500000, 0.070000, 0.000000, 0.449999, -0.300000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{556, 6618, "Monster Indonesia", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 15000.000000, 3.000000, 0.000000, 0.000000, -0.349999, 0.649999, 0.850000, 0.550000, 170.000000, 45.000000, 25.000000, 7.000000, 0.449999, 35.000000, 1.500000, 0.070000, 0.000000, 0.449999, -0.300000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{557, 6619, "Monster El Toro", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 15000.000000, 3.000000, 0.000000, 0.000000, -0.349999, 0.649999, 0.850000, 0.550000, 170.000000, 45.000000, 25.000000, 7.000000, 0.449999, 35.000000, 1.500000, 0.070000, 0.000000, 0.449999, -0.300000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{-1, 6620, "Monster Grave Digger", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 15000.000000, 3.000000, 0.000000, 0.000000, -0.349999, 0.649999, 0.850000, 0.550000, 170.000000, 45.000000, 25.000000, 7.000000, 0.449999, 35.000000, 1.500000, 0.070000, 0.000000, 0.449999, -0.300000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{579, 6621, "Toyota Land Cruiser Prado", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2800.000000, 4900.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 228.000000, 33.000000, 55.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.119999, 0.000000, 0.449999, -0.280000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{400, 6622, "Toyota RAV4", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 0.000000, 0.000000, 55.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.119999, 0.000000, 0.449999, -0.230000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{477, 6623, "Toyota Supra A90", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{400, 6624, "UAZ", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 3600.199951, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 178.000000, 20.000000, 55.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.119999, 0.000000, 0.449999, -0.300000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{400, 6625, "Volvo XC90 2012", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 198.000000, 24.000000, 55.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.119999, 0.000000, 0.449999, -0.250000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{579, 12713, "Mercedes-Benz GLE 63", {13899, 13900, 13901, 13902, 13903}, {14089, 14090, 14091, 14092, 14093}, {-1, -1, -1, -1, -1}, {4445.000000, 7008.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 238.000000, 35.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.140000, 0.500000, 0.250000, 0.270000, 0.230000}},
	{602, 12714, "Renault Laguna", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3720.000000, 6725.299804, 1.500000, 0.000000, 0.000000, -0.250000, 0.699999, 0.800000, 0.500000, 218.000000, 26.000000, 40.000000, 7.000000, 0.509999, 30.000000, 1.200000, 0.189999, 0.000000, 0.250000, -0.070000, 0.500000, 0.400000, 0.370000, 0.720000}},
	{560, 12715, "Mercedes-Benz CLS 53", {13893, 13894, 13895, 13896, 13897}, {14084, 14085, 14086, 14087, 14088}, {13994, 13995, 13996, 13997, 13998}, {0.000000, 0.000000, 1.799999, 0.000000, -0.150000, -0.200000, 0.850000, 0.850000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.500000, 0.129999, 0.000000, 0.449999, -0.070000, 0.479999, 0.300000, 0.439999, 0.349999}},
	{560, 12716, "Audi RS5", {12760, 12761, 12762, 12763, 12764}, {14019, 14020, 14021, 14022, 14023}, {13935, 13936, 13937, 13938, 13939}, {2296.000000, 4300.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.949999, 0.750000, 0.400000, 258.000000, 30.000000, 75.000000, 12.000000, 0.519999, 30.000000, 1.200000, 0.200000, 10.000000, 0.050000, -0.119999, 0.600000, 0.400000, 0.200000, 0.560000}},
	{560, 12717, "Cadillac Escalade 2020", {12778, 12779, 12780, 12781, 12782}, {14034, 14035, 14036, 14037, 14038}, {13950, 13951, 13952, 13953, 14125}, {4649.000000, 8604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 228.000000, 35.000000, 55.000000, 7.000000, 0.449999, 35.000000, 0.800000, 0.079999, 0.000000, 0.449999, -0.250000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{560, 12718, "Cyber Truck", {-1, -1, -1, -1, -1}, {14044, 14045, 14046, 14047, 14048}, {-1, -1, -1, -1, -1}, {4000.000000, 8000.000000, 2.200000, 0.000000, 0.000000, -0.600000, 0.750000, 0.850000, 0.500000, 248.000000, 35.000000, 50.000000, 15.000000, 0.500000, 30.000000, 0.800000, 0.079999, 0.000000, 0.349999, -0.239999, 0.500000, 0.000000, 0.379999, 0.349999}},
	{560, 12719, "Tesla Model S", {13905, 13906, 13907, 13908, 13909}, {14094, 14095, 14096, 14097, 14098}, {-1, -1, -1, -1, -1}, {3996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 258.000000, 37.000000, 75.000000, 12.000000, 0.519999, 30.000000, 1.200000, 0.200000, 10.000000, 0.289999, -0.050000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{560, 12720, "Ford GT", {13572, 13573, 13574, 13575, 13576}, {14064, 14065, 14066, 14067, 14068}, {13974, 13975, 13976, 13977, 13978}, {2675.000000, 6146.700195, 1.799999, 0.000000, 0.000000, 0.000000, 0.899999, 0.899999, 0.300000, 338.000000, 51.000000, 75.000000, 12.000000, 0.519999, 30.000000, 1.500000, 0.100000, 10.000000, 0.289999, -0.090000, 0.500000, 0.500000, 0.200000, 0.500000}},
	{560, 12721, "Dodge Viper", {12790, 12791, 12792, 12793, 12794}, {14049, 14050, 14051, 14052, 14053}, {13959, 13960, 13961, 13962, 13963}, {3675.000000, 7146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 308.000000, 44.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.500000, 0.059999, 3.000000, 0.349999, -0.100000, 0.500000, 0.000000, 0.280000, 0.300000}},
	{560, 12722, "Volkswagen Polo", {13923, 13924, 13925, 13926, 13927}, {14109, 14110, 14111, 14112, 14113}, {14009, 14010, 14011, 14012, 14013}, {3163.000000, 6000.000000, 2.000000, 0.000000, -0.400000, -0.200000, 0.750000, 0.800000, 0.560000, 208.000000, 26.000000, 45.000000, 6.500000, 0.500000, 30.000000, 1.200000, 0.300000, 0.000000, 0.280000, -0.150000, 0.300000, 0.600000, 0.209999, 0.409999}},
	{560, 12723, "Mitsubishi Lancer Old", {12796, 12797, 12798, 12799, 13564}, {14054, 14055, 14056, 14057, 14058}, {13964, 13965, 13966, 13967, 13968}, {3170.000000, 6650.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.750000, 0.850000, 0.500000, 238.000000, 30.000000, 60.000000, 10.000000, 0.529999, 35.000000, 1.500000, 0.119999, 0.000000, 0.250000, -0.100000, 0.500000, 0.000000, 0.200000, 0.239999}},
	{560, 12724, "Audi TT RS", {13917, 13918, 13919, 13920, 13921}, {14104, 14105, 14106, 14107, 14108}, {14004, 14005, 14006, 14007, 14008}, {3610.000000, 6400.000000, 2.400000, 0.000000, 0.100000, -0.100000, 0.800000, 0.800000, 0.500000, 258.000000, 37.000000, 5.000000, 10.000000, 0.500000, 30.000000, 1.200000, 0.150000, 0.000000, 0.280000, -0.150000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{560, 12725, "Mercedes-Benz Actros", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5800.000000, 19953.199218, 5.000000, 0.000000, 0.000000, -0.200000, 0.949999, 0.649999, 0.400000, 110.500000, 25.500000, 150.000000, 12.000000, 0.300000, 42.000000, 1.399999, 0.079999, 0.000000, 0.400000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{560, 12726, "Audi S4", {12766, 12767, 12768, 12769, 12770}, {14024, 14025, 14026, 14027, 14028}, {13940, 13941, 13942, 13943, 13944}},
	{560, 12727, "BMW 4-Series", {12772, 12773, 12774, 12775, 12776}, {14029, 14030, 14031, 14032, 14033}, {13945, 13946, 13947, 13948, 13949}, {0.000000, 0.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.219999, 0.500000, 0.400000, 0.250000, 0.500000}},
	{560, 12728, "Cadillac Escalade 2007", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{560, 12729, "Toyota Chaser", {12784, 12785, 12786, 12787, 12788}, {14039, 14040, 14041, 14042, 14043}, {13954, 13955, 13956, 13957, 13958}, {3500.000000, 6500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.600000, 0.699999, 0.500000, 180.000000, 58.000000, 50.000000, 8.000000, 0.500000, 45.000000, 1.000000, 0.200000, 0.000000, 0.300000, -0.050000, 0.500000, 0.300000, 0.200000, 0.560000}},
	{560, 12730, "Dacia 1300", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 4000.000000, 2.500000, 0.000000, 0.000000, 0.000000, 0.649999, 0.920000, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.000000, 1.100000, 0.100000, 0.000000, 0.270000, -0.140000, 0.550000, 0.300000, 0.200000, 0.560000}},
	{560, 12731, "Mitsubishi Lancer", {13566, 13567, 13568, 13569, 13570}, {14059, 14060, 14061, 14062, 14063}, {13969, 13970, 13971, 13972, 13973}, {3170.000000, 6650.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.750000, 0.850000, 0.500000, 228.000000, 28.000000, 60.000000, 10.000000, 0.529999, 35.000000, 1.500000, 0.119999, 0.000000, 0.250000, -0.070000, 0.500000, 0.000000, 0.200000, 0.239999}},
	{560, 12732, "Impala 64", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3675.000000, 7146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 220.000000, 20.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.500000, 0.059999, 3.000000, 0.349999, -0.100000, 0.529999, 0.000000, 0.280000, 0.300000}},
	{560, 12733, "Impala 67", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {13984, 13985, 13986, 13987, 13988}, {3500.000000, 7000.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 228.000000, 30.000000, 75.000000, 4.500000, 0.550000, 35.000000, 1.000000, 0.059999, 3.000000, 0.349999, -0.150000, 0.469999, 0.000000, 0.280000, 0.300000}},
	{560, 12734, "Coca-Cola Truck", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{560, 12735, "Coca-Cola Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4800.000000, 30000.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.449999, 0.750000, 0.500000, 120.000000, 18.000000, 5.000000, 8.000000, 0.300000, 25.000000, 1.500000, 0.050000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{560, 12736, "McLaren MP4", {13668, 13669, 13670, 13671, 13672}, {14079, 14080, 14081, 14082, 14083}, {13989, 13990, 13991, 13992, 13993}, {3042.000000, 5500.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.750000, 0.850000, 0.449999, 308.000000, 43.000000, 60.000000, 15.000000, 0.509999, 30.000000, 1.600000, 0.200000, 0.000000, 0.119999, -0.029999, 0.500000, 0.400000, 0.170000, 0.720000}},
	{560, 12737, "Ford Mustang Mach 1", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3675.000000, 7146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 238.000000, 30.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.000000, 0.059999, 3.000000, 0.349999, -0.100000, 0.529999, 0.000000, 0.280000, 0.300000}},
	{560, 12738, "Rolls-Royce Phantom", {13911, 13912, 13913, 13914, 13915}, {14099, 14100, 14101, 14102, 14103}, {13999, 14000, 14001, 14002, 14003}, {4435.000000, 7600.000000, 1.700000, 0.000000, 0.000000, -0.050000, 0.850000, 0.800000, 0.500000, 258.000000, 35.000000, 60.000000, 12.500000, 0.500000, 30.000000, 1.100000, 0.100000, 0.000000, 0.259999, -0.159999, 0.500000, 0.300000, 0.250000, 0.600000}},
	{560, 12739, "Pickup truck", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3975.000000, 7241.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 198.000000, 25.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.500000, 0.059999, 3.000000, 0.349999, -0.100000, 0.500000, 0.000000, 0.280000, 0.300000}},
	{560, 12740, "Volvo Truck", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5800.000000, 19953.199218, 5.000000, 0.000000, 0.000000, -0.200000, 0.949999, 0.649999, 0.400000, 110.500000, 25.500000, 150.000000, 12.000000, 0.300000, 42.000000, 1.399999, 0.079999, 0.000000, 0.400000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{560, 12741, "Subaru WRX", {13929, 13930, 13931, 13932, 13933}, {14114, 14115, 14116, 14117, 14118}, {14014, 14015, 14016, 14017, 14018}, {3610.000000, 6400.000000, 2.400000, 0.000000, 0.100000, -0.100000, 0.800000, 0.800000, 0.500000, 228.000000, 20.000000, 5.000000, 10.000000, 0.500000, 30.000000, 1.000000, 0.150000, 0.000000, 0.280000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{560, 12742, "Sherp", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {400.000000, 300.000000, 5.000000, 0.000000, 0.050000, -0.200000, 0.699999, 0.899999, 0.490000, 160.000000, 19.000000, 5.000000, 8.000000, 0.500000, 35.000000, 0.800000, 0.100000, 0.000000, 0.150000, -0.150000, 0.500000, 0.000000, 0.200000, 0.500000}},
	{560, 12743, "Christma", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{451, 14119, "Audi A6 (delimobil)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{451, 14120, "Toyota Camry (delimobil)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{451, 14121, "Kia Sportage (delimobil)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{451, 14122, "Tesla Model X (delimobil)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{400, 14123, "Toyota RAV4 (delimobil)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{415, 14124, "Nissan GTR 2017", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14767, "Mercedes-AMG Project One R50", {-1, -1, -1, -1, -1}, {14975, 14976, 14977, 14978, 14979}, {14950, 14951, 14952, 14953, 14954}, {2996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 358.000000, 52.000000, 75.000000, 17.000000, 0.519999, 30.000000, 1.600000, 0.300000, 10.000000, 0.289999, -0.109999, 0.600000, 0.400000, 0.200000, 0.560000}},
	{451, 14768, "Aston Martin Valhalla", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{451, 14769, "Chevrolet Aveo", {14920, 14921, 14922, 14923, 14924}, {14980, 14981, 14982, 14983, 14984}, {14955, 14956, 14957, 14958, 14959}, {3720.000000, 6725.299804, 1.500000, 0.000000, 0.000000, -0.250000, 0.699999, 0.800000, 0.500000, 188.000000, 26.000000, 40.000000, 7.000000, 0.509999, 30.000000, 1.200000, 0.189999, 0.000000, 0.250000, -0.150000, 0.500000, 0.400000, 0.370000, 0.720000}},
	{411, 14857, "BUGATTI Bolide", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 458.000000, 75.000000, 75.000000, 17.000000, 0.519999, 30.000000, 1.600000, 0.500000, 10.000000, 0.289999, -0.129999, 0.600000, 0.400000, 0.200000, 0.560000}},
	{451, 14884, "Yacota K5", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.299999, 0.250000, 0.000000, 0.280000, -0.140000, 0.500000, 0.449999, 0.250000, 0.500000}},
	{451, 14899, "Renault DUSTER", {14925, 14926, 14927, 14928, 14929}, {14985, 14986, 14987, 14988, 14989}, {14960, 14961, 14962, 14963, 14964}, {3500.000000, 6500.000000, 2.200000, 0.000000, 0.000000, -0.500000, 0.730000, 0.730000, 0.460000, 165.000000, 45.000000, 120.000000, 5.000000, 0.500000, 30.000000, 0.800000, 0.170000, 0.000000, 0.180000, -0.119999, 0.449999, 0.500000, 0.439999, 0.400000}},
	{451, 14904, "Ferrari Monza SP2", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 310.000000, 48.000000, 75.000000, 17.000000, 0.519999, 30.000000, 1.600000, 0.500000, 10.000000, 0.289999, -0.079999, 0.600000, 0.400000, 0.200000, 0.560000}},
	{411, 14905, "Mercedes-AMG G63", {14930, 14931, 14932, 14933, 14934}, {14990, 14991, 14992, 14993, 14994}, {-1, -1, -1, -1, -1}, {3500.000000, 7000.000000, 2.200000, 0.000000, 0.200000, -0.400000, 0.779999, 0.779999, 0.500000, 210.000000, 45.000000, 113.000000, 5.000000, 0.500000, 30.000000, 0.800000, 0.180000, 0.000000, 0.250000, -0.129999, 0.479999, 0.500000, 0.439999, 0.349999}},
	{411, 14906, "Hotwheels", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{400, 14907, "Hummer HX", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.899999, 0.100000, 0.000000, 0.280000, -0.119999, 0.449999, 0.449999, 0.250000, 0.500000}},
	{415, 14908, "Ferrari F70", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4525.299804, 1.799999, 0.000000, -0.150000, -0.200000, 0.930000, 0.930000, 0.300000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.600000, 0.500000, 0.000000, 0.280000, -0.180000, 0.500000, 0.500000, 0.250000, 0.500000}},
	{415, 14909, "BMW M5 CS", {14935, 14936, 14937, 14938, 14939}, {14995, 14996, 14997, 14998, 14999}, {14965, 14966, 14967, 14968, 14969}, {2570.000000, 4300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.750000, 0.850000, 0.500000, 318.000000, 48.000000, 50.000000, 10.000000, 0.529999, 35.000000, 1.600000, 0.200000, 0.000000, 0.280000, -0.200000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{451, 14910, "LADA Priora", {14940, 14941, 14942, 14943, 14944}, {15000, 15001, 15002, 15003, 15004}, {14970, 14971, 14972, 14973, 14974}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.200000, 0.000000, 0.280000, -0.150000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{415, 14911, "Quadra Turbo-R V-Tech", {14945, 14946, 14947, 14948, 14949}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 298.000000, 50.000000, 75.000000, 17.000000, 0.519999, 30.000000, 1.600000, 0.200000, 10.000000, 0.289999, -0.050000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{411, 14912, "Mercedes-Benz GLE", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14913, "Mercedes-Benz VISION AVTR", {-1, -1, -1, -1, -1}, {15005, 15006, 15007, 15008, 15009}, {-1, -1, -1, -1, -1}, {2996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 328.000000, 56.000000, 75.000000, 17.000000, 0.519999, 30.000000, 1.600000, 0.500000, 10.000000, 0.289999, -0.140000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{510, 14914, "Specialized Stumpjumper", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{510, 14915, "Santa Cruz Tallboy", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{451, 14916, "Spooky Metalhead", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{510, 14917, "Turner Burner", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{431, 14918, "Holding Bus Company", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{431, 14919, "Los-Santos Inter Bus C.", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15085, "Dodge Charger", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 1.799999, 0.000000, 0.300000, -0.100000, 0.899999, 0.899999, 0.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.500000, 0.000000, 0.000000, 0.119999, 0.000000, 0.280000, -0.180000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{411, 15098, "BMW M1", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15099, "Lamborghini Countach", {15125, 15126, 15127, 15128, 15129}, {15240, 15241, 15242, 15243, 15244}, {15190, 15191, 15192, 15193, 15194}, {2996.000000, 6500.000000, 0.000000, 0.000000, -0.100000, -0.300000, 0.800000, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.109999, 0.000000, 0.250000, -0.100000, 0.500000, 0.500000, 0.250000, 0.500000}},
	{411, 15100, "Nagasaki", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 1483.300048, 1.000000, 0.000000, 0.000000, 0.000000, 3.500000, 3.500000, 1.000000, 190.000000, 0.500000, 5.000000, 0.070000, 0.009999, 30.000000, 1.000000, 4.500000, 0.000000, 3.500000, 0.100000, 0.699999, 0.000000, 0.200000, 0.119999}},
	{411, 15101, "Koenigsegg Gemera", {15135, 15136, 15137, 15138, 15139}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2496.000000, 5100.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 408.000000, 60.000000, 75.000000, 17.000000, 0.519999, 30.000000, 1.600000, 0.200000, 10.000000, 0.289999, -0.050000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{411, 15102, "KIA K7", {15140, 15141, 15142, 15143, 15144}, {15250, 15251, 15252, 15253, 15254}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.119999, 0.349999, 0.400000, 0.400000, 0.400000}},
	{411, 15103, "Lampadati Toro", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 20210.699218, 1.000000, 0.000000, 0.000000, 0.000000, 2.799999, 15.000000, 0.649999, 190.000000, 2.500000, 5.000000, 0.039999, 0.009999, 20.000000, 1.299999, 3.000000, 0.000000, 0.100000, 0.500000, 2.000000, 0.000000, 0.699999, 0.389999}},
	{411, 15104, "Lexus LX600", {15145, 15146, 15147, 15148, 15149}, {15255, 15256, 15257, 15258, 15259}, {15200, 15201, 15202, 15203, 15204}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.000000, 0.100000, 0.000000, 0.449999, -0.300000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{411, 15105, "Nissan Qashqai", {15160, 15161, 15162, 15163, 15164}, {15270, 15271, 15272, 15273, 15274}, {15210, 15211, 15212, 15213, 15214}},
	{411, 15106, "Predator", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 29333.300781, 1.000000, 0.000000, 0.000000, 0.000000, 2.299999, 15.000000, 0.579999, 190.000000, 2.700000, 5.000000, 0.050000, 0.009999, 24.000000, 1.000000, 3.000000, 0.000000, 0.100000, 0.400000, 0.000000, 0.000000, 0.200000, 0.330000}},
	{411, 15107, "Volkswagen Scirocco", {15170, 15171, 15172, 15173, 15174}, {15280, 15281, 15282, 15283, 15284}, {15220, 15221, 15222, 15223, 15224}},
	{411, 15108, "Longfin", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 20210.699218, 1.000000, 0.000000, 0.000000, 0.000000, 2.799999, 15.000000, 0.649999, 190.000000, 2.500000, 5.000000, 0.039999, 0.009999, 20.000000, 1.299999, 3.000000, 0.000000, 0.100000, 0.500000, 2.000000, 0.000000, 0.699999, 0.389999}},
	{411, 15109, "Toyota GR", {15175, 15176, 15177, 15178, 15179}, {15285, 15286, 15287, 15288, 15289}, {15225, 15226, 15227, 15228, 15229}},
	{411, 15110, "Wellcraft", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15111, "Yacht", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 105520.796875, 1.000000, 0.000000, 0.000000, 0.000000, -3.500000, 25.000000, 0.400000, 190.000000, 4.500000, 3.000000, 0.039999, 0.029999, 38.000000, 1.000000, 3.000000, 0.000000, 0.100000, 0.000000, 1.000000, 0.000000, 0.200000, 0.379999}},
	{411, 15112, "Boates", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 25520.800781, 1.000000, 0.000000, 0.000000, 0.000000, -1.500000, 15.000000, 0.449999, 190.000000, 2.000000, 5.000000, 0.019999, 0.019999, 25.000000, 1.000000, 3.000000, 0.000000, 0.100000, 0.100000, 0.000000, 0.000000, 0.200000, 0.379999}},
	{429, 15113, "Mercedes-AMG A-45", {15120, 15121, 15122, 15123, 15124}, {15235, 15236, 15237, 15238, 15239}, {15185, 15186, 15187, 15188, 15189}, {2335.000000, 5000.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.750000, 0.889999, 0.500000, 258.000000, 39.000000, 50.000000, 8.000000, 0.519999, 34.000000, 1.600000, 0.100000, 5.000000, 0.300000, -0.100000, 0.500000, 0.300000, 0.150000, 0.490000}},
	{562, 15114, "Toyota AE86", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 3500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.649999, 0.899999, 0.500000, 200.000000, 38.000000, 5.000000, 8.000000, 0.500000, 35.000000, 1.000000, 0.200000, 0.000000, 0.280000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{400, 15115, "Land Rover Defender", {15130, 15131, 15132, 15133, 15134}, {15245, 15246, 15247, 15248, 15249}, {15195, 15196, 15197, 15198, 15199}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.000000, 0.050000, 0.000000, 0.449999, -0.209999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{411, 15116, "Ford Mustang Mach", {15150, 15151, 15152, 15153, 15154}, {15260, 15261, 15262, 15263, 15264}, {-1, -1, -1, -1, -1}, {2500.000000, 5500.000000, 2.000000, 0.000000, 0.000000, -0.600000, 0.750000, 0.850000, 0.500000, 258.000000, 43.000000, 50.000000, 15.000000, 0.500000, 30.000000, 1.200000, 0.200000, 0.000000, 0.349999, -0.170000, 0.469999, 0.000000, 0.379999, 0.349999}},
	{560, 15117, "Mazda 6", {15155, 15156, 15157, 15158, 15159}, {15265, 15266, 15267, 15268, 15269}, {15205, 15206, 15207, 15208, 15209}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.109999, 0.500000, 0.500000, 0.250000, 0.500000}},
	{429, 15118, "Audi R8", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3820.000000, 7640.000000, 2.000000, 0.000000, -0.200000, -0.239999, 0.850000, 0.850000, 0.479999, 323.000000, 46.000000, 75.000000, 16.000000, 0.519999, 30.000000, 1.399999, 0.200000, 0.000000, 0.250000, -0.050000, 0.500000, 0.500000, 0.500000, 0.500000}},
	{560, 15119, "Hyundai Santa Fe", {15165, 15166, 15167, 15168, 15169}, {15275, 15276, 15277, 15278, 15279}, {15215, 15216, 15217, 15218, 15219}, {4649.000000, 8604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.699999, 0.850000, 0.540000, 218.000000, 29.000000, 55.000000, 7.000000, 0.449999, 35.000000, 0.800000, 0.079999, 0.000000, 0.449999, -0.250000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{411, 15295, "Range Rover Velar", {15180, 15181, 15182, 15183, 15184}, {15290, 15291, 15292, 15293, 15294}, {15230, 15231, 15232, 15233, 15234}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.000000, 0.050000, 0.000000, 0.449999, -0.209999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{411, 15326, "Mercedes-Benz 1620", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5310.000000, 31217.199218, 2.000000, 0.000000, 0.000000, -0.200000, 0.649999, 0.800000, 0.400000, 130.000000, 26.000000, 20.000000, 3.500000, 0.400000, 30.000000, 1.399999, 0.059999, 0.000000, 0.449999, -0.250000, 0.550000, 0.000000, 0.449999, 0.200000}},
	{411, 15327, "Mercedes-Benz 1113", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15328, "Volkswagen Constellation", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15329, "Luxor Deluxe", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15330, "Nimbus", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {12000.000000, 67250.000000, 8.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.800000, 0.699999, 200.000000, 21.000000, 5.000000, 1.500000, 0.150000, 45.000000, 4.000000, 0.150000, 0.000000, 1.000000, 0.000000, 0.300000, 0.000000, 0.300000, 0.750000}},
	{411, 15331, "Vestra", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15332, "Mercedes-Benz Arocs 4163", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15333, "Iveco Stralis", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5900.000000, 18922.199218, 5.000000, 0.000000, 0.000000, -0.200000, 0.949999, 0.649999, 0.400000, 127.000000, 32.000000, 150.000000, 12.000000, 0.300000, 42.000000, 1.399999, 0.079999, 0.000000, 0.400000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{411, 15334, "MAN TGS", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5600.000000, 19953.199218, 5.000000, 0.000000, 0.000000, -0.200000, 0.949999, 0.649999, 0.400000, 132.000000, 34.000000, 130.000000, 10.000000, 0.300000, 25.000000, 1.600000, 0.059999, 0.000000, 0.400000, -0.200000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{411, 15335, "Volvo 460", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {6310.000000, 18851.300781, 5.000000, 0.000000, 0.000000, -0.200000, 0.949999, 0.649999, 0.400000, 131.000000, 33.000000, 150.000000, 12.000000, 0.300000, 42.000000, 1.399999, 0.079999, 0.000000, 0.400000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{416, 15416, "VC - Ambulance", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2600.000000, 10202.799804, 2.500000, 0.000000, 0.000000, -0.100000, 0.750000, 0.800000, 0.469999, 155.000000, 24.000000, 10.000000, 7.000000, 0.550000, 35.000000, 1.000000, 0.070000, 0.000000, 0.400000, -0.200000, 0.500000, 0.000000, 0.579999, 0.330000}},
	{429, 15417, "VC - Banshee", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3000.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.750000, 0.889999, 0.500000, 200.000000, 33.000000, 10.000000, 8.000000, 0.519999, 34.000000, 1.600000, 0.100000, 5.000000, 0.300000, -0.150000, 0.500000, 0.300000, 0.150000, 0.490000}},
	{499, 15418, "VC - Benson", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 13865.799804, 2.299999, 0.000000, 0.000000, -0.200000, 0.750000, 0.699999, 0.460000, 140.000000, 14.000000, 20.000000, 4.500000, 0.600000, 30.000000, 1.200000, 0.200000, 0.000000, 0.349999, -0.150000, 0.449999, 0.000000, 0.460000, 0.529999}},
	{504, 15419, "VC - Bloodring", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2100.000000, 5146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.750000, 0.699999, 0.519999, 160.000000, 24.000000, 5.000000, 6.199999, 0.550000, 35.000000, 1.000000, 0.059999, 3.000000, 0.349999, -0.239999, 0.500000, 0.000000, 0.280000, 0.300000}},
	{431, 15420, "VC - Bus", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33187.898437, 2.000000, 0.000000, 0.500000, 0.000000, 0.750000, 0.850000, 0.400000, 130.000000, 14.000000, 50.000000, 4.170000, 0.400000, 30.000000, 1.200000, 0.070000, 0.000000, 0.449999, -0.250000, 0.449999, 0.000000, 0.200000, 0.750000}},
	{438, 15421, "VC - Cabbie", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1750.000000, 4351.700195, 2.900000, 0.000000, 0.100000, -0.150000, 0.750000, 0.850000, 0.509999, 160.000000, 24.000000, 6.000000, 7.000000, 0.439999, 40.000000, 0.699999, 0.059999, 2.000000, 0.250000, -0.300000, 0.500000, 0.500000, 0.200000, 0.400000}},
	{411, 15422, "VC - Police", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4500.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.750000, 0.850000, 0.500000, 200.000000, 25.000000, 10.000000, 10.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.119999, 0.550000, 0.000000, 0.200000, 0.239999}},
	{411, 15423, "VC - Deluxo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 2141.699951, 2.400000, 0.000000, 0.000000, -0.100000, 0.850000, 0.850000, 0.500000, 200.000000, 26.000000, 5.000000, 11.000000, 0.449999, 30.000000, 1.399999, 0.100000, 0.000000, 0.280000, -0.119999, 0.500000, 0.000000, 0.250000, 0.500000}},
	{490, 15424, "VC - FBI Rancher", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 11156.200195, 2.200000, 0.000000, 0.000000, -0.200000, 0.800000, 0.800000, 0.519999, 170.000000, 22.000000, 5.000000, 8.500000, 0.500000, 30.000000, 0.699999, 0.150000, 0.000000, 0.340000, -0.200000, 0.500000, 0.500000, 0.439999, 0.300000}},
	{455, 15425, "VC - Flatbed", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {8500.000000, 48804.199218, 2.500000, 0.000000, 0.000000, 0.300000, 0.699999, 0.699999, 0.460000, 140.000000, 25.000000, 80.000000, 10.000000, 0.449999, 27.000000, 1.200000, 0.050000, 0.000000, 0.469999, -0.170000, 0.500000, 0.000000, 0.620000, 0.430000}},
	{560, 15426, "VC - Idaho", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4166.399902, 2.500000, 0.000000, 0.150000, 0.000000, 0.600000, 0.850000, 0.519999, 160.000000, 24.000000, 10.000000, 8.170000, 0.519999, 35.000000, 0.699999, 0.079999, 3.000000, 0.300000, -0.159999, 0.500000, 0.500000, 0.300000, 0.519999}},
	{411, 15427, "VC - Infernus", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 2725.300048, 1.500000, 0.000000, 0.000000, -0.250000, 0.699999, 0.800000, 0.500000, 240.000000, 30.000000, 10.000000, 11.000000, 0.509999, 30.000000, 1.200000, 0.189999, 0.000000, 0.250000, -0.100000, 0.500000, 0.400000, 0.370000, 0.720000}},
	{438, 15428, "VC - Love Fist", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{470, 15429, "VC - Patriot", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 7968.700195, 2.500000, 0.000000, 0.000000, 0.000000, 0.699999, 0.850000, 0.500000, 170.000000, 25.000000, 20.000000, 8.000000, 0.500000, 30.000000, 1.500000, 0.079999, 4.000000, 0.349999, -0.349999, 0.500000, 0.000000, 0.280000, 0.250000}},
	{448, 15430, "VC - Pizzaboy", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{428, 15431, "VC - Securica", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {7000.000000, 30916.699218, 1.500000, 0.000000, 0.000000, 0.000000, 0.500000, 0.699999, 0.460000, 170.000000, 15.000000, 30.000000, 8.399999, 0.449999, 27.000000, 1.000000, 0.059999, 0.000000, 0.349999, -0.150000, 0.500000, 0.000000, 0.270000, 0.349999}},
	{405, 15432, "VC - Sentinel", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4000.000000, 2.200000, 0.000000, 0.000000, -0.200000, 0.649999, 0.750000, 0.500000, 165.000000, 24.000000, 10.000000, 10.000000, 0.500000, 27.000000, 1.000000, 0.079999, 0.000000, 0.300000, -0.200000, 0.500000, 0.300000, 0.200000, 0.560000}},
	{411, 15433, "VC - Stinger", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4500.000000, 2.500000, 0.000000, 0.000000, -0.150000, 0.649999, 0.899999, 0.500000, 200.000000, 28.000000, 25.000000, 7.000000, 0.519999, 30.000000, 1.100000, 0.090000, 0.000000, 0.300000, -0.100000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{409, 15434, "VC - Stretch", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 10000.000000, 1.799999, 0.000000, 0.000000, 0.000000, 0.600000, 0.800000, 0.500000, 180.000000, 18.000000, 25.000000, 10.000000, 0.400000, 30.000000, 1.100000, 0.070000, 0.000000, 0.349999, -0.200000, 0.500000, 0.000000, 0.200000, 0.720000}},
	{420, 15435, "VC - Taxi", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1450.000000, 4056.399902, 2.200000, 0.000000, 0.300000, -0.250000, 0.800000, 0.750000, 0.449999, 180.000000, 19.000000, 10.000000, 9.100000, 0.600000, 35.000000, 1.399999, 0.100000, 0.000000, 0.250000, -0.150000, 0.540000, 0.000000, 0.200000, 0.509999}},
	{408, 15436, "VC - Trashmaster", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33187.898437, 5.000000, 0.000000, 0.000000, -0.200000, 0.600000, 0.899999, 0.500000, 110.000000, 20.000000, 30.000000, 3.500000, 0.400000, 30.000000, 1.000000, 0.059999, 0.000000, 0.449999, -0.250000, 0.550000, 0.300000, 0.449999, 0.200000}},
	{560, 15485, "VC - Angel", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 403.299987, 4.000000, 0.000000, 0.100000, 0.000000, 1.200000, 0.819999, 0.509999, 190.000000, 40.000000, 5.000000, 10.000000, 0.550000, 35.000000, 0.649999, 0.200000, 0.000000, 0.090000, -0.109999, 0.550000, 0.000000, 0.000000, 0.239999}},
	{424, 15486, "VC - BF Injection", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1200.000000, 2000.000000, 4.000000, 0.000000, -0.100000, -0.100000, 0.750000, 0.850000, 0.500000, 170.000000, 30.000000, 10.000000, 6.000000, 0.500000, 35.000000, 1.000000, 0.070000, 5.000000, 0.200000, -0.150000, 0.449999, 0.000000, 0.379999, 0.400000}},
	{496, 15487, "VC - Blista", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1000.000000, 2141.699951, 2.400000, 0.000000, 0.000000, -0.100000, 0.850000, 0.850000, 0.500000, 200.000000, 26.000000, 5.000000, 11.000000, 0.449999, 30.000000, 1.399999, 0.100000, 0.000000, 0.280000, -0.119999, 0.500000, 0.000000, 0.250000, 0.500000}},
	{482, 15488, "VC - Burrito", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 5000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.600000, 0.870000, 0.509999, 150.000000, 25.000000, 20.000000, 8.500000, 0.449999, 30.000000, 1.299999, 0.070000, 2.000000, 0.400000, -0.250000, 0.400000, 0.500000, 0.200000, 0.500000}},
	{560, 15489, "VC - FBI Car", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1850.000000, 5000.000000, 2.200000, 0.000000, 0.000000, -0.100000, 0.750000, 0.649999, 0.519999, 180.000000, 25.000000, 10.000000, 7.500000, 0.649999, 30.000000, 1.000000, 0.200000, 0.000000, 0.270000, -0.200000, 0.500000, 0.349999, 0.239999, 0.600000}},
	{502, 15490, "VC - Hotring B", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 4500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 220.000000, 26.000000, 5.000000, 10.000000, 0.519999, 30.000000, 1.500000, 0.100000, 10.000000, 0.289999, -0.159999, 0.600000, 0.400000, 0.200000, 0.560000}},
	{475, 15491, "VC - Sabre Turbo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 4000.000000, 2.000000, 0.000000, 0.100000, 0.000000, 0.699999, 0.800000, 0.529999, 160.000000, 24.000000, 10.000000, 8.000000, 0.519999, 35.000000, 1.299999, 0.079999, 5.000000, 0.300000, -0.200000, 0.500000, 0.250000, 0.250000, 0.519999}},
	{468, 15492, "VC - Sanchez", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{502, 15493, "Tesla S - ambulance", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 258.000000, 37.000000, 75.000000, 12.000000, 0.519999, 30.000000, 1.200000, 0.200000, 10.000000, 0.289999, -0.050000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{502, 15494, "Tesla X - ambulance", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 5500.000000, 2.000000, 0.000000, 0.000000, -0.600000, 0.750000, 0.850000, 0.500000, 258.000000, 43.000000, 50.000000, 15.000000, 0.500000, 30.000000, 1.200000, 0.200000, 0.000000, 0.349999, -0.259999, 0.469999, 0.000000, 0.379999, 0.349999}},
	{400, 15495, "BMW IX", {15503, 15504, 15505, 15506, 15507}, {15528, 15529, 15530, 15531, 15532}, {-1, -1, -1, -1, -1}, {2500.000000, 5500.000000, 2.000000, 0.000000, 0.000000, -0.600000, 0.750000, 0.850000, 0.500000, 258.000000, 41.000000, 50.000000, 15.000000, 0.500000, 30.000000, 1.200000, 0.079999, 0.000000, 0.349999, -0.239999, 0.500000, 0.000000, 0.379999, 0.349999}},
	{502, 15496, "Mercedes-Benz EQC 400", {15508, 15509, 15510, 15511, 15512}, {15533, 15534, 15535, 15536, 15537}, {-1, -1, -1, -1, -1}, {2596.000000, 5500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 238.000000, 42.000000, 75.000000, 12.000000, 0.519999, 30.000000, 1.200000, 0.200000, 10.000000, 0.289999, -0.140000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{400, 15497, "Audi E-tron", {15513, 15514, 15515, 15516, 15517}, {15538, 15539, 15540, 15541, 15542}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 258.000000, 38.000000, 50.000000, 15.000000, 0.500000, 30.000000, 1.200000, 0.079999, 0.000000, 0.349999, -0.239999, 0.500000, 0.000000, 0.379999, 0.349999}},
	{400, 15498, "Jaguar I-PACE", {15518, 15519, 15520, 15521, 15522}, {15543, 15544, 15545, 15546, 15547}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.620000, 0.889999, 0.500000, 222.000000, 27.000000, 50.000000, 15.000000, 0.500000, 30.000000, 0.800000, 0.079999, 0.000000, 0.349999, -0.239999, 0.500000, 0.000000, 0.379999, 0.349999}},
	{400, 15499, "Tesla S - police", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3996.000000, 6500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 298.000000, 57.000000, 75.000000, 12.000000, 0.519999, 30.000000, 1.200000, 0.200000, 10.000000, 0.289999, -0.050000, 0.600000, 0.400000, 0.200000, 0.560000}},
	{400, 15500, "Tesla X - police", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 5500.000000, 2.000000, 0.000000, 0.000000, -0.600000, 0.750000, 0.850000, 0.500000, 258.000000, 43.000000, 50.000000, 15.000000, 0.500000, 30.000000, 1.200000, 0.200000, 0.000000, 0.349999, -0.259999, 0.469999, 0.000000, 0.379999, 0.349999}},
	{502, 15501, "Renault Twizy", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2940.000000, 4000.000000, 4.000000, 0.000000, -0.100000, -0.100000, 0.750000, 0.850000, 0.500000, 155.000000, 20.000000, 30.000000, 8.000000, 0.500000, 35.000000, 1.600000, 0.070000, 5.000000, 0.200000, -0.070000, 0.449999, 0.000000, 0.379999, 0.400000}},
	{411, 15502, "Polestar 2", {15523, 15524, 15525, 15526, 15527}, {15548, 15549, 15550, 15551, 15552}, {-1, -1, -1, -1, -1}, {2596.000000, 5500.000000, 1.399999, 0.000000, 0.200000, -0.400000, 0.850000, 0.800000, 0.479999, 248.000000, 42.000000, 75.000000, 12.000000, 0.519999, 30.000000, 1.200000, 0.200000, 10.000000, 0.289999, -0.079999, 0.600000, 0.400000, 0.200000, 0.560000}},
	{435, 15720, "Arctics Trailer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4800.000000, 30000.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.449999, 0.750000, 0.500000, 120.000000, 18.000000, 5.000000, 8.000000, 0.300000, 25.000000, 1.500000, 0.050000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{400, 15721, "Mersedes-Benz GLE 63S", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3350.000000, 6712.500000, 0.000000, 0.000000, 0.200000, 0.000000, 0.649999, 0.850000, 0.519999, 0.000000, 28.399999, 0.000000, 0.000000, 0.600000, 0.000000, 0.000000, 0.100000, 0.000000, 0.270000, -0.150000, 0.500000, 0.200000, 0.239999, 0.479999}},
	{560, 15722, "Tesla Model 3", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15723, "Lamborghini Murcielago", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{400, 15724, "Xoomer Petrol", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4800.000000, 30000.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.449999, 0.750000, 0.500000, 120.000000, 18.000000, 5.000000, 8.000000, 0.300000, 25.000000, 1.500000, 0.050000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{535, 15725, "Delorean", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{579, 15626, "Mercedes-Benz Gl63", {15632, 15636, 15637, 15633, 15634}, {15638, 15639, 15640, 15641, 15642}, {15643, 15644, 15645, 15646, 15647}, {4445.000000, 7008.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.750000, 0.850000, 0.500000, 238.000000, 25.000000, 50.000000, 8.199999, 0.600000, 35.000000, 1.299999, 0.079999, 0.000000, 0.280000, -0.140000, 0.500000, 0.250000, 0.270000, 0.230000}},
	{579, 15627, "BMW 7", {15648, 15649, 15650, 15651, 15652}, {15654, 15655, 15656, 15657, 15658}, {15659, 15660, 15661, 15662, 15663}, {3295.000000, 6921.299804, 1.799999, 0.000000, -0.400000, 0.000000, 0.750000, 0.850000, 0.519999, 241.000000, 24.000000, 50.000000, 10.000000, 0.529999, 35.000000, 1.299999, 0.119999, 0.000000, 0.280000, -0.019999, 0.379999, 0.000000, 0.200000, 0.239999}},
	{560, 15628, "MB v250", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4900.000000, 7000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.600000, 0.870000, 0.509999, 160.000000, 25.000000, 40.000000, 8.500000, 0.449999, 30.000000, 1.299999, 0.070000, 2.000000, 0.400000, -0.250000, 0.400000, 0.500000, 0.200000, 0.500000}},
	{560, 15629, "Mercedes-Benz C63", {15664, 15665, 15666, 15667, 15668}, {15670, 15671, 15672, 15673, 15674}, {15675, 15676, 15677, 15678, 15679}, {3730.000000, 7000.000000, 3.000000, 0.000000, 0.050000, -0.100000, 0.600000, 0.860000, 0.500000, 250.000000, 29.000000, 54.000000, 12.000000, 0.600000, 30.000000, 1.299999, 0.100000, 3.000000, 0.349999, -0.039999, 0.500000, 0.200000, 0.259999, 0.500000}},
	{560, 15630, "MB C63s Coupe", {15680, 15681, 15682, 15683, 15684}, {15686, 15687, 15688, 15689, 15690}, {15691, 15692, 15693, 15694, 15695}, {3500.000000, 7000.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.699999, 0.899999, 0.519999, 237.000000, 25.000000, 5.000000, 6.000000, 0.550000, 30.000000, 0.800000, 0.079999, 0.000000, 0.280000, -0.239999, 0.589999, 0.400000, 0.250000, 0.500000}},
	{560, 15631, "Audi RS7", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4010.000000, 2.200000, 0.000000, 0.000000, -0.400000, 0.819999, 0.819999, 0.479999, 251.000000, 48.000000, 170.000000, 5.800000, 0.519999, 40.000000, 0.800000, 0.170000, 0.000000, 0.250000, -0.119999, 0.500000, 0.250000, 0.250000, 0.600000}},
	{475, 15746, "BMW X7", {15753, 15754, 15755, 15756, 15757}, {15758, 15759, 15760, 15761, 15762}, {15763, 15764, 15765, 15766, 15767}, {5350.000000, 7008.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.699999, 0.800000, 0.500000, 258.000000, 43.000000, 70.000000, 12.199999, 0.600000, 35.000000, 1.399999, 0.180000, 0.000000, 0.280000, -0.079999, 0.439999, 0.250000, 0.270000, 0.230000}},
	{475, 15747, "BMW X6", {15843, 15844, 15845, 15846, 15847}, {15848, 15849, 15850, 15851, 15852}, {15853, 15854, 15855, 15856, 15857}, {5350.000000, 7008.299804, 2.500000, 0.000000, 0.000000, -0.300000, 0.699999, 0.800000, 0.500000, 258.000000, 43.000000, 70.000000, 12.199999, 0.600000, 35.000000, 1.399999, 0.180000, 0.000000, 0.280000, -0.079999, 0.439999, 0.250000, 0.270000, 0.230000}},
	{402, 15748, "Jeep Gladiator", {15768, 15769, 15770, 15771, 15772}, {15773, 15774, 15775, 15776, 15777}, {15778, 15779, 15780, 15781, 15782}},
	{560, 15749, "BMW M8 GRAN COUPE", {15783, 15784, 15785, 15786, 15787}, {15788, 15789, 15790, 15791, 15792}, {15793, 15794, 15795, 15796, 15797}, {3870.000000, 6100.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.850000, 0.850000, 0.500000, 268.000000, 43.000000, 50.000000, 10.000000, 0.529999, 35.000000, 1.600000, 0.200000, 0.000000, 0.280000, -0.079999, 0.439999, 0.000000, 0.200000, 0.239999}},
	{405, 15750, "Volkswagen Tourage", {15828, 15829, 15830, 15831, 15832}, {15833, 15834, 15835, 15836, 15837}, {15838, 15839, 15840, 15841, 15842}, {3350.000000, 6712.500000, 0.000000, 0.000000, 0.200000, 0.000000, 0.649999, 0.850000, 0.519999, 0.000000, 26.399999, 0.000000, 12.699999, 0.600000, 0.000000, 0.000000, 0.100000, 0.000000, 0.270000, -0.140000, 0.500000, 0.200000, 0.239999, 0.479999}},
	{579, 15751, "Range Rover 2022", {15798, 15799, 15800, 15801, 15802}, {15803, 15804, 15805, 15806, 15807}, {15808, 15809, 15810, 15811, 15812}, {5100.000000, 11156.200195, 2.200000, 0.000000, 0.000000, -0.200000, 0.800000, 0.800000, 0.519999, 258.000000, 32.000000, 55.000000, 8.500000, 0.500000, 30.000000, 0.899999, 0.129999, 0.000000, 0.500000, -0.219999, 0.349999, 0.500000, 0.500000, 0.500000}},
	{402, 15752, "Mercedes-Benz S 63", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 1.799999, 0.000000, -0.150000, -0.200000, 0.750000, 0.949999, 0.479999, 0.000000, 38.400001, 0.000000, 0.000000, 0.600000, 0.000000, 1.600000, 0.119999, 0.000000, 0.270000, -0.039999, 0.500000, 0.200000, 0.500000, 0.500000}},
	{402, 15858, "Mercedes-Benz C63S", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 1.799999, 0.000000, -0.150000, -0.200000, 0.750000, 0.949999, 0.479999, 0.000000, 28.399999, 0.000000, 0.000000, 0.600000, 0.000000, 1.600000, 0.119999, 0.000000, 0.270000, -0.070000, 0.400000, 0.200000, 0.239999, 0.479999}},
	{466, 15859, "BMW F10", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4970.000000, 8300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.750000, 0.850000, 0.500000, 258.000000, 27.000000, 50.000000, 10.000000, 0.529999, 35.000000, 1.600000, 0.200000, 0.000000, 0.280000, -0.070000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{560, 15860, "BMW E30", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 3500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.649999, 0.899999, 0.500000, 200.000000, 38.000000, 5.000000, 8.000000, 0.500000, 35.000000, 1.000000, 0.200000, 0.000000, 0.280000, -0.270000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{482, 15861, "Volkswagen Transporter", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{482, 15862, "Mercedes-Benz Vito", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 2.599999, 0.000000, -0.500000, -0.400000, 0.600000, 0.800000, 0.460000, 0.000000, 0.000000, 0.000000, 8.500000, 0.449999, 0.000000, 1.100000, 0.079999, 0.000000, 0.349999, -0.100000, 0.300000, 0.500000, 0.200000, 0.500000}},
	{482, 15863, "Opel Vivaro", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4900.000000, 7000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.600000, 0.870000, 0.509999, 170.000000, 26.000000, 40.000000, 8.500000, 0.449999, 30.000000, 1.299999, 0.070000, 2.000000, 0.400000, -0.100000, 0.400000, 0.500000, 0.200000, 0.500000}},
	{481, 15882, "Skate", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 39.000000, 6.000000, 0.000000, 0.050000, -0.090000, 1.600000, 0.899999, 0.479999, 120.000000, 18.000000, 5.000000, 19.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.200000, -0.100000, 0.500000, 0.000000, 0.000000, 0.150000}},
	{473, 15883, "Surfboard", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 1483.300048, 1.000000, 0.000000, 0.000000, 0.000000, 3.500000, 3.500000, 1.000000, 190.000000, 0.600000, 5.000000, 0.070000, 0.009999, 30.000000, 1.000000, 4.500000, 0.000000, 3.500000, 0.100000, 0.699999, 0.000000, 0.200000, 0.119999}},
	{560, 15902, "Audi 80 Universal", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{560, 15903, "C63 Coupe", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 1.799999, 0.000000, -0.150000, -0.200000, 0.750000, 0.949999, 0.479999, 0.000000, 46.400001, 0.000000, 0.000000, 0.600000, 0.000000, 1.600000, 0.119999, 0.000000, 0.270000, -0.079999, 0.400000, 0.200000, 0.239999, 0.479999}},
	{536, 15904, "BMW E34", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.000000, 0.000000, 0.000000, -0.400000, 0.779999, 0.649999, 0.479999, 200.000000, 25.000000, 100.000000, 5.000000, 0.479999, 38.000000, 1.299999, 0.159999, 0.000000, 0.200000, -0.150000, 0.400000, 0.500000, 0.400000, 0.500000}},
	{560, 15905, "Mercedes-Benz E63 w221", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 1.799999, 0.000000, -0.150000, -0.200000, 0.750000, 0.949999, 0.479999, 0.000000, 31.399999, 0.000000, 0.000000, 0.600000, 0.000000, 1.600000, 0.119999, 0.000000, 0.270000, -0.150000, 0.500000, 0.200000, 0.239999, 0.500000}},
	{560, 15906, "BMW X5 F85", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15907, "Lamborghini Gallardo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3042.000000, 5500.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.949999, 0.850000, 0.449999, 318.000000, 50.000000, 60.000000, 15.000000, 0.509999, 30.000000, 1.000000, 0.200000, 0.000000, 0.119999, -0.039999, 0.500000, 0.400000, 0.170000, 0.720000}},
	{560, 15908, "Mercedes-Benz GLE63 2016", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3350.000000, 6712.500000, 0.000000, 0.000000, 0.200000, 0.000000, 0.649999, 0.850000, 0.519999, 0.000000, 46.400001, 0.000000, 0.000000, 0.600000, 0.000000, 0.000000, 0.100000, 0.000000, 0.270000, -0.319999, 0.500000, 0.200000, 0.239999, 0.479999}},
	{477, 15909, "BMW 850i", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2625.000000, 5179.700195, 2.000000, 0.000000, 0.200000, -0.100000, 0.850000, 0.850000, 0.469999, 258.000000, 40.000000, 40.000000, 11.100000, 0.519999, 30.000000, 1.600000, 0.200000, 0.000000, 0.310000, -0.090000, 0.500000, 0.300000, 0.239999, 0.600000}},
	{536, 15910, "Audi RS6 Quattro", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3840.000000, 7800.000000, 1.600000, 0.000000, -0.200000, 0.100000, 0.850000, 0.740000, 0.430000, 320.000000, 50.000000, 65.000000, 14.170000, 0.519999, 35.000000, 1.600000, 0.129999, 0.000000, 0.300000, -0.150000, 0.500000, 0.500000, 0.500000, 0.500000}},
	{541, 15960, "Mercedes GT63 Brabus", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4195.000000, 6500.000000, 1.799999, 0.000000, 0.000000, 0.000000, 0.949999, 0.899999, 0.500000, 328.000000, 54.000000, 70.000000, 16.000000, 0.579999, 30.000000, 1.299999, 0.129999, 5.000000, 0.250000, -0.070000, 0.449999, 0.300000, 0.150000, 0.540000}},
	{535, 15961, "Mercedes-Benz GLE Brabus", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{434, 15962, "McLaren 720S", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3042.000000, 5500.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.850000, 0.850000, 0.449999, 308.000000, 47.000000, 60.000000, 15.000000, 0.509999, 30.000000, 1.600000, 0.200000, 0.000000, 0.119999, -0.079999, 0.500000, 0.400000, 0.170000, 0.720000}},
	{560, 15963, "Dodge RAM 3500", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 7500.000000, 2.200000, 0.000000, 0.000000, -0.400000, 0.740000, 0.759999, 0.449999, 220.000000, 32.500000, 150.000000, 5.000000, 0.500000, 28.000000, 0.800000, 0.180000, 0.000000, 0.280000, -0.119999, 0.600000, 0.500000, 0.439999, 0.300000}},
	{487, 15964, "AT-99 «Scorpion»", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{447, 15965, "MOP", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4000.000000, 8250.000000, 0.100000, 0.000000, 0.000000, -0.100000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 5.000000, 0.449999, 30.000000, 2.000000, 0.100000, 0.000000, 0.500000, -0.200000, 0.500000, 0.000000, 0.300000, 0.600000}},
	{560, 16793, "Batmobile", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3291.000000, 6300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.899999, 0.850000, 0.500000, 210.000000, 28.000000, 40.000000, 11.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.180000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{434, 16794, "Zombiemobile", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4400.000000, 6400.000000, 2.500000, 0.000000, 0.300000, -0.300000, 0.949999, 0.800000, 0.500000, 208.000000, 28.000000, 45.000000, 11.000000, 0.449999, 30.000000, 1.000000, 0.200000, 0.000000, 0.280000, -0.259999, 0.500000, 0.500000, 0.200000, 0.500000}},
	{560, 16795, "Devil", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.899999, 0.100000, 0.000000, 0.280000, -0.159999, 0.449999, 0.449999, 0.250000, 0.500000}},
	{560, 16796, "Police Apocalypse", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3291.000000, 6300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.750000, 0.850000, 0.500000, 198.000000, 26.000000, 40.000000, 7.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.059999, 0.550000, 0.000000, 0.200000, 0.239999}},
	{560, 16797, "Chum Bucket", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3291.000000, 6300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.750000, 0.850000, 0.500000, 218.000000, 38.000000, 40.000000, 11.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.129999, 0.550000, 0.000000, 0.200000, 0.239999}},
	{463, 16798, "Hellway", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {900.000000, 503.299987, 4.000000, 0.000000, 0.100000, 0.000000, 1.200000, 0.819999, 0.509999, 299.000000, 80.000000, 5.000000, 10.000000, 0.550000, 35.000000, 0.649999, 0.200000, 0.000000, 0.090000, -0.109999, 0.550000, 0.000000, 0.000000, 0.239999}},
	{579, 16892, "Brabus Adventure", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 7000.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.819999, 0.889999, 0.500000, 288.000000, 49.000000, 65.000000, 12.000000, 0.449999, 35.000000, 1.399999, 0.050000, 0.000000, 0.449999, -0.209999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{463, 16893, "Brabus 850", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.500000, 0.800000, 0.800000, 0.519999, 300.000000, 55.000000, 105.000000, 7.000000, 0.500000, 35.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.180000, 0.500000, 0.300000, 0.439999, 0.300000}},
	{400, 16894, "Mansory Stallone", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3042.000000, 5500.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.899999, 0.850000, 0.449999, 328.000000, 51.000000, 60.000000, 15.000000, 0.509999, 30.000000, 1.600000, 0.200000, 0.000000, 0.119999, -0.140000, 0.500000, 0.400000, 0.170000, 0.720000}},
	{463, 16895, "Bentley Bentayga Mansory", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2545.000000, 4590.000000, 2.000000, 0.000000, 0.000000, -0.100000, 0.800000, 0.899999, 0.500000, 298.000000, 49.000000, 5.000000, 11.000000, 0.449999, 30.000000, 1.200000, 0.119999, 0.000000, 0.280000, -0.239999, 0.500000, 0.400000, 0.250000, 0.500000}},
	{579, 16896, "Brabus 700", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 7000.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.850000, 0.889999, 0.500000, 305.000000, 51.000000, 65.000000, 12.000000, 0.449999, 35.000000, 1.399999, 0.050000, 0.000000, 0.449999, -0.209999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{579, 16897, "Mercedes-AMG G63: Mansory", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 11156.200195, 2.200000, 0.000000, 0.000000, -0.600000, 0.750000, 0.750000, 0.469999, 240.000000, 40.000000, 115.000000, 5.000000, 0.500000, 30.000000, 0.800000, 0.180000, 0.000000, 0.280000, -0.119999, 0.500000, 0.500000, 0.439999, 0.349999}},
	{400, 16898, "Brabus GLS 2020", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3350.000000, 6712.500000, 2.000000, 0.000000, 0.200000, 0.000000, 0.850000, 0.850000, 0.519999, 298.000000, 49.400001, 75.000000, 12.000000, 0.600000, 30.000000, 1.100000, 0.200000, 0.000000, 0.270000, -0.100000, 0.500000, 0.200000, 0.239999, 0.600000}},
	{475, 16899, "Rolls-Royce Cullinan Mansory", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2660.000000, 6000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.850000, 0.889999, 0.500000, 308.000000, 50.000000, 25.000000, 11.000000, 0.449999, 35.000000, 1.299999, 0.200000, 0.000000, 0.449999, -0.219999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{505, 16900, "Lamborghini Urus Mansory", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2649.000000, 4604.200195, 1.700000, 0.000000, 0.000000, -0.200000, 0.899999, 0.899999, 0.370000, 328.000000, 52.000000, 55.000000, 16.000000, 0.449999, 35.000000, 1.200000, 0.200000, 0.000000, 0.449999, -0.189999, 0.479999, 0.300000, 0.439999, 0.349999}},
	{505, 16903, "Bobcat [New Year]", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4649.000000, 8604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.800000, 0.850000, 0.540000, 208.000000, 28.000000, 55.000000, 9.000000, 0.449999, 35.000000, 0.800000, 0.079999, 0.000000, 0.449999, -0.250000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{460, 16904, "Hotknife [New Year]", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3291.000000, 6300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.779999, 0.850000, 0.500000, 188.000000, 24.000000, 40.000000, 7.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.180000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{481, 16920, "Snowboard", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 39.000000, 6.000000, 0.000000, 0.050000, -0.090000, 1.600000, 0.899999, 0.479999, 120.000000, 18.000000, 5.000000, 19.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.200000, -0.100000, 0.500000, 0.000000, 0.000000, 0.150000}},
	{402, 16951, "Chevrolet Corvette", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4000.000000, 6225.299804, 2.000000, 0.000000, -0.150000, -0.200000, 0.899999, 0.899999, 0.479999, 311.000000, 48.599998, 70.000000, 14.319999, 0.509999, 34.000000, 1.299999, 0.119999, 5.000000, 0.250000, -0.159999, 0.500000, 0.250000, 0.370000, 0.699999}},
	{402, 16952, "Porche Carrera", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4800.000000, 8200.000000, 2.200000, 0.000000, 0.100000, -0.200000, 0.899999, 0.899999, 0.500000, 320.000000, 50.000000, 40.000000, 13.000000, 0.449999, 30.000000, 1.600000, 0.200000, 3.000000, 0.280000, -0.090000, 0.349999, 0.300000, 0.250000, 0.600000}},
	{402, 16953, "Scramjet", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3291.000000, 6300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.850000, 0.850000, 0.500000, 258.000000, 38.000000, 40.000000, 11.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.180000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{402, 16954, "Dodge Charger SLT", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.400000, 0.800000, 0.800000, 0.479999, 290.000000, 45.000000, 175.000000, 7.000000, 0.500000, 40.000000, 1.000000, 0.170000, 0.000000, 0.200000, -0.079999, 0.500000, 0.300000, 0.439999, 0.300000}},
	{463, 16955, "Ferrari F40", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2045.000000, 4500.000000, 1.600000, 0.000000, 0.000000, -0.100000, 0.899999, 0.899999, 0.500000, 321.000000, 50.000000, 5.000000, 11.000000, 0.449999, 30.000000, 1.299999, 0.200000, 0.000000, 0.280000, -0.090000, 0.449999, 0.449999, 0.250000, 0.500000}},
	{505, 16956, "Canis", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2800.000000, 5500.000000, 2.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 238.000000, 40.000000, 5.000000, 11.000000, 0.449999, 30.000000, 0.899999, 0.100000, 0.000000, 0.280000, -0.119999, 0.449999, 0.449999, 0.250000, 0.500000}},
	{463, 16957, "Chevrolet Tahoe", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4649.000000, 8604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.800000, 0.850000, 0.540000, 238.000000, 42.000000, 55.000000, 9.000000, 0.449999, 35.000000, 0.800000, 0.079999, 0.000000, 0.449999, -0.280000, 0.449999, 0.300000, 0.439999, 0.349999}},
	{463, 16958, "Tampa GT310", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4500.000000, 2.000000, 0.000000, 0.300000, -0.150000, 0.750000, 0.750000, 0.500000, 278.000000, 58.000000, 50.000000, 10.000000, 0.500000, 45.000000, 1.000000, 0.200000, 0.000000, 0.300000, -0.150000, 0.500000, 0.300000, 0.200000, 0.560000}},
	{463, 16959, "Toyota Tundra", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 9500.200195, 2.200000, 0.000000, 0.000000, -0.349999, 0.750000, 0.750000, 0.460000, 197.000000, 32.500000, 155.000000, 5.000000, 0.500000, 30.000000, 0.800000, 0.180000, 0.000000, 0.280000, -0.180000, 0.479999, 0.500000, 0.439999, 0.349999}},
	{462, 16994, "Scooter 1", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 39.000000, 7.000000, 0.000000, 0.050000, -0.090000, 1.600000, 0.899999, 0.479999, 120.000000, 18.000000, 5.000000, 19.000000, 0.500000, 35.000000, 0.800000, 0.150000, 0.000000, 0.200000, -0.100000, 0.500000, 0.000000, 0.000000, 0.150000}},
	{462, 16995, "Scooter 2", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 39.000000, 7.000000, 0.000000, 0.050000, -0.090000, 1.600000, 0.899999, 0.479999, 120.000000, 18.000000, 5.000000, 19.000000, 0.500000, 35.000000, 0.800000, 0.150000, 0.000000, 0.200000, -0.100000, 0.500000, 0.000000, 0.000000, 0.150000}},
	{462, 16996, "Scooter 3", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 39.000000, 7.000000, 0.000000, 0.050000, -0.090000, 1.600000, 0.899999, 0.479999, 120.000000, 18.000000, 5.000000, 19.000000, 0.500000, 35.000000, 0.800000, 0.150000, 0.000000, 0.200000, -0.100000, 0.500000, 0.000000, 0.000000, 0.150000}},
	{411, 18164, "Cheetah [V]", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 2.000000, 0.500000, 0.000000, 0.280000, -0.119999, 0.500000, 0.449999, 0.250000, 0.500000}},
	{400, 18165, "Huntley S [V]", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2660.000000, 6000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.850000, 0.889999, 0.500000, 268.000000, 45.000000, 25.000000, 11.000000, 0.449999, 35.000000, 1.299999, 0.200000, 0.000000, 0.449999, -0.219999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{411, 18166, "Obey [V]", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3820.000000, 7640.000000, 2.000000, 0.000000, -0.200000, -0.239999, 0.860000, 0.860000, 0.479999, 288.000000, 46.000000, 75.000000, 16.000000, 0.519999, 30.000000, 1.399999, 0.200000, 0.000000, 0.250000, -0.059999, 0.500000, 0.300000, 0.400000, 0.540000}},
	{411, 18167, "Infernus Pegassi [V]", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3042.000000, 5500.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.949999, 0.850000, 0.449999, 318.000000, 50.000000, 60.000000, 15.000000, 0.509999, 30.000000, 1.000000, 0.200000, 0.000000, 0.119999, -0.039999, 0.500000, 0.400000, 0.170000, 0.720000}},
	{400, 18152, "BMW I7", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 4800.000000, 2.400000, 0.000000, 0.000000, -0.600000, 0.819999, 0.800000, 0.479999, 240.000000, 45.000000, 125.000000, 7.000000, 0.500000, 40.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.119999, 0.500000, 0.300000, 0.439999, 0.300000}},
	{411, 18153, "Shelby Cobra", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3291.000000, 6300.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.800000, 0.800000, 0.500000, 278.000000, 45.000000, 40.000000, 11.000000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.180000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{411, 18154, "Ford Fusion", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.300000, -0.100000, 0.850000, 0.850000, 0.400000, 0.000000, 0.000000, 0.000000, 0.000000, 0.529999, 0.000000, 0.000000, 0.119999, 0.000000, 0.280000, -0.200000, 0.620000, 0.000000, 0.200000, 0.239999}},
	{411, 18155, "Toyota Mark II", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 18156, "Daewoo Nexia", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.000000, 0.200000, 0.000000, 0.280000, -0.150000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{560, 18157, "Volkswagen Passat B", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3200.000000, 6200.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.800000, 0.800000, 0.500000, 188.000000, 36.000000, 110.000000, 5.500000, 0.529999, 35.000000, 1.000000, 0.119999, 0.000000, 0.280000, -0.129999, 0.600000, 0.000000, 0.200000, 0.239999}},
	{411, 18158, "Infiniti QX80", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3350.000000, 6712.500000, 0.000000, 0.000000, 0.200000, 0.000000, 0.649999, 0.850000, 0.519999, 0.000000, 26.399999, 0.000000, 12.699999, 0.600000, 0.000000, 0.000000, 0.100000, 0.000000, 0.270000, -0.140000, 0.500000, 0.200000, 0.239999, 0.479999}},
	{411, 18159, "Mercedes-Benz SL 65 AMG", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 1.799999, 0.000000, -0.150000, -0.200000, 0.750000, 0.949999, 0.479999, 0.000000, 38.400001, 0.000000, 0.000000, 0.600000, 0.000000, 1.600000, 0.119999, 0.000000, 0.270000, -0.059999, 0.500000, 0.200000, 0.500000, 0.500000}},
	{411, 18160, "Nissan Titan", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4649.000000, 8604.200195, 2.500000, 0.000000, 0.000000, -0.349999, 0.800000, 0.850000, 0.540000, 258.000000, 44.000000, 55.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.119999, 0.000000, 0.449999, -0.280000, 0.449999, 0.449999, 0.449999, 0.449999}},
	{411, 18161, "Ford Victoria", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2950.000000, 5500.000000, 2.500000, 0.000000, 0.000000, -0.150000, 0.699999, 0.600000, 0.500000, 258.000000, 30.000000, 55.000000, 9.000000, 0.519999, 34.000000, 1.100000, 0.090000, 0.000000, 0.300000, -0.170000, 0.469999, 0.300000, 0.250000, 0.500000}},
	{411, 16800, "Renault Arcana", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3720.000000, 6725.299804, 1.500000, 0.000000, 0.000000, -0.250000, 0.699999, 0.800000, 0.500000, 228.000000, 23.000000, 40.000000, 7.000000, 0.509999, 30.000000, 1.200000, 0.189999, 0.000000, 0.250000, -0.170000, 0.500000, 0.400000, 0.370000, 0.720000}},
	{411, 16879, "Daewoo Lanos", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3060.000000, 6500.000000, 2.500000, 0.000000, 0.300000, -0.400000, 0.699999, 0.750000, 0.479999, 200.000000, 21.000000, 30.000000, 5.000000, 0.800000, 30.000000, 1.000000, 0.079999, 0.000000, 0.300000, -0.090000, 0.500000, 0.000000, 0.200000, 0.600000}},
	{411, 16964, "Lada Kalina", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 1.200000, 0.200000, 0.000000, 0.280000, -0.189999, 0.469999, 0.449999, 0.250000, 0.449999}},
	{411, 16969, "Lada 112", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3060.000000, 6500.000000, 2.500000, 0.000000, 0.300000, -0.400000, 0.699999, 0.750000, 0.479999, 200.000000, 21.000000, 30.000000, 5.000000, 0.800000, 30.000000, 1.000000, 0.079999, 0.000000, 0.300000, -0.090000, 0.709999, 0.000000, 0.200000, 0.600000}},
	{411, 16970, "GAZ М-20", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3830.000000, 6000.000000, 3.000000, 0.000000, 0.050000, -0.100000, 0.600000, 0.860000, 0.500000, 140.000000, 18.000000, 90.000000, 8.000000, 0.600000, 30.000000, 1.100000, 0.100000, 3.000000, 0.300000, -0.239999, 0.500000, 0.200000, 0.259999, 0.500000}},
	{411, 16971, "Lada 4x4", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3285.000000, 6700.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.750000, 0.850000, 0.400000, 180.000000, 19.000000, 60.000000, 5.170000, 0.400000, 30.000000, 1.000000, 0.170000, 0.000000, 0.200000, -0.100000, 0.449999, 0.000000, 0.239999, 0.750000}},
	{411, 16972, "Lada 4x4 Urban", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3285.000000, 6700.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.750000, 0.850000, 0.400000, 180.000000, 19.000000, 60.000000, 5.170000, 0.400000, 30.000000, 1.000000, 0.170000, 0.000000, 0.200000, -0.100000, 0.449999, 0.000000, 0.239999, 0.750000}},
	{411, 15438, "UAZ Hunter", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.100000, 0.699999, 0.899999, 0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.449999, 0.000000, 0.899999, 0.100000, 0.000000, 0.280000, -0.170000, 0.449999, 0.449999, 0.250000, 0.500000}},
	{411, 15439, "Banshee 900R", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3675.000000, 7146.700195, 2.000000, 0.000000, 0.000000, 0.000000, 0.899999, 0.899999, 0.519999, 288.000000, 46.000000, 75.000000, 12.199999, 0.550000, 35.000000, 1.200000, 0.079999, 3.000000, 0.349999, -0.050000, 0.500000, 0.000000, 0.280000, 0.300000}},
	{411, 15442, "Schlagen GT", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15443, "Jeep Grand Cherokee", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3531.000000, 6200.000000, 2.500000, 0.000000, 0.000000, 0.000000, 0.800000, 0.800000, 0.500000, 268.000000, 46.000000, 55.000000, 10.000000, 0.500000, 35.000000, 1.200000, 0.079999, 0.000000, 0.319999, -0.170000, 0.500000, 0.400000, 0.180000, 0.300000}},
	{411, 15444, "Patriot Mil-Spec", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {10500.000000, 38968.699218, 2.500000, 0.000000, 0.000000, 0.000000, 0.699999, 0.850000, 0.500000, 130.000000, 28.000000, 60.000000, 8.000000, 0.500000, 30.000000, 1.500000, 0.079999, 4.000000, 0.349999, -0.159999, 0.500000, 0.000000, 0.280000, 0.250000}},
	{411, 15445, "Hennessey Velociraptor 6x6", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15446, "Zentorno", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6710, "Mitsubishi ASX", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2060.000000, 4000.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.750000, 0.750000, 0.500000, 230.000000, 33.000000, 55.000000, 7.000000, 0.449999, 35.000000, 1.000000, 0.119999, 0.000000, 0.500000, -0.150000, 0.360000, 0.360000, 0.360000, 0.360000}},
	{411, 6711, "BMW E34 Alpina", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6712, "BMW X5 E70", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2700.000000, 6200.000000, 2.500000, 0.000000, 0.000000, -0.200000, 0.850000, 0.850000, 0.500000, 258.000000, 44.000000, 55.000000, 9.000000, 0.449999, 35.000000, 1.100000, 0.200000, 0.000000, 0.449999, -0.129999, 0.449999, 0.300000, 0.439999, 0.349999}},
	{411, 6713, "Honda Accord", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3690.000000, 7000.000000, 2.000000, 0.000000, 0.300000, -0.100000, 0.850000, 0.850000, 0.449999, 268.000000, 39.000000, 50.000000, 10.170000, 0.519999, 27.000000, 1.700000, 0.119999, 0.000000, 0.500000, -0.039999, 0.500000, 0.000000, 0.200000, 0.500000}},
	{411, 6714, "Lamborghini Huracan 2022", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2042.000000, 4500.000000, 1.700000, 0.000000, -0.300000, -0.200000, 0.850000, 0.850000, 0.449999, 338.000000, 52.000000, 60.000000, 15.000000, 0.509999, 30.000000, 1.600000, 0.200000, 0.000000, 0.119999, 0.019999, 0.500000, 0.400000, 0.170000, 0.720000}},
	{411, 6715, "Toyota Land Cruiser 100", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6716, "Daewoo Lanox 6x6", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3060.000000, 6500.000000, 2.500000, 0.000000, 0.300000, -0.400000, 0.699999, 0.750000, 0.400000, 200.000000, 23.000000, 30.000000, 5.000000, 0.800000, 30.000000, 1.000000, 0.079999, 0.000000, 0.300000, -0.090000, 0.649999, 0.000000, 0.550000, 0.649999}},
	{411, 6717, "Mercedes-Benz s600 w221", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6718, "Nissan Silvia S14", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2552.000000, 5500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.649999, 0.899999, 0.500000, 248.000000, 42.000000, 50.000000, 10.000000, 0.500000, 35.000000, 1.200000, 0.200000, 0.000000, 0.360000, -0.090000, 0.500000, 0.000000, 0.259999, 0.500000}},
	{411, 6741, "Mitsubishi Outlander 2008", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6742, "Phantom", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {400.000000, 300.000000, 5.000000, 0.000000, 0.050000, -0.200000, 0.800000, 0.800000, 0.449999, 160.000000, 42.000000, 45.000000, 9.000000, 0.500000, 35.000000, 0.800000, 0.100000, 0.000000, 0.150000, -0.150000, 0.500000, 0.000000, 0.200000, 0.500000}},
	{411, 6743, "Nissan Silvia S13", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2552.000000, 5500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.649999, 0.899999, 0.500000, 238.000000, 39.000000, 50.000000, 10.000000, 0.500000, 35.000000, 1.200000, 0.200000, 0.000000, 0.360000, -0.140000, 0.500000, 0.000000, 0.259999, 0.500000}},
	{411, 6744, "Toyota Supra A80", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2552.000000, 5500.000000, 2.200000, 0.000000, 0.300000, -0.150000, 0.850000, 0.850000, 0.469999, 278.000000, 45.000000, 50.000000, 10.000000, 0.500000, 35.000000, 1.200000, 0.200000, 0.000000, 0.360000, -0.129999, 0.579999, 0.000000, 0.259999, 0.479999}},
	{411, 6745, "Tank 300 Wey", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3400.000000, 9500.000000, 2.400000, 0.000000, 0.000000, -0.349999, 0.779999, 0.779999, 0.500000, 170.000000, 39.000000, 130.000000, 5.000000, 0.500000, 30.000000, 0.800000, 0.180000, 0.000000, 0.250000, -0.129999, 0.490000, 0.500000, 0.439999, 0.349999}},
	{411, 6746, "Bentley Ultratank", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14131, "Pagani Codalunga", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14132, "Mercedes-Benz Big Foot", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {8000.000000, 25000.000000, 3.000000, 0.000000, 0.000000, -0.349999, 0.750000, 0.850000, 0.550000, 178.000000, 50.000000, 25.000000, 10.000000, 0.449999, 35.000000, 1.200000, 0.070000, 0.000000, 0.449999, -0.300000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{411, 14133, "BMW Big Foot", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {8000.000000, 25000.000000, 3.000000, 0.000000, 0.000000, -0.349999, 0.750000, 0.850000, 0.550000, 178.000000, 50.000000, 25.000000, 10.000000, 0.449999, 35.000000, 1.200000, 0.070000, 0.000000, 0.449999, -0.300000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{411, 6650, "Audi R8 Big Foot", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4000.000000, 8000.000000, 3.000000, 0.000000, 0.000000, -0.349999, 0.850000, 0.850000, 0.449999, 258.000000, 60.000000, 25.000000, 10.000000, 0.449999, 35.000000, 1.500000, 0.200000, 0.000000, 0.449999, -0.100000, 0.500000, 0.300000, 0.439999, 0.349999}},
	{411, 14134, "Mercedes-Benz Coach", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {10000.000000, 33156.199218, 2.799999, 0.000000, 0.000000, -0.500000, 0.699999, 0.699999, 0.439999, 135.000000, 27.500000, 150.000000, 5.500000, 0.500000, 28.000000, 0.699999, 0.159999, 0.000000, 0.400000, -0.200000, 0.500000, 0.000000, 0.439999, 0.750000}},
	{411, 14135, "Mercedes-Benz Transpen", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33187.898437, 2.000000, 0.000000, 0.500000, -1.399999, 0.750000, 0.850000, 0.400000, 145.000000, 13.000000, 50.000000, 4.800000, 0.400000, 33.000000, 1.200000, 0.070000, 0.000000, 0.449999, -0.250000, 0.449999, 0.000000, 0.200000, 0.750000}},
	{411, 14137, "Mercedes-Benz Tourismo", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14138, "Volvo FH 12", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14139, "Mack Anthem", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14140, "Tesla Semi", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3800.000000, 15000.000000, 2.400000, 0.000000, 0.000000, -1.750000, 0.750000, 0.850000, 0.400000, 150.000000, 20.100000, 75.900001, 9.000000, 0.250000, 40.000000, 1.000000, 0.200000, 0.000000, 0.250000, -0.129999, 0.500000, 0.280000, 0.349999, 0.250000}},
	{411, 14141, "Western Star", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14142, "Business Jet", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14143, "Learjet 60", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {15000.000000, 70250.000000, 6.000000, 0.000000, 0.000000, 0.000000, 0.550000, 0.800000, 0.699999, 800.000000, 16.000000, 5.000000, 1.500000, 0.150000, 45.000000, 4.000000, 0.150000, 0.000000, 1.000000, 0.000000, 0.300000, 0.000000, 0.300000, 0.750000}},
	{411, 14145, "Spaceflight", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14193, "Audi R8 Darius", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14194, "Dodge Charger Angie", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14195, "Ford Mustang Razor", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14355, "RC Mavic", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {100.000000, 24.100000, 0.200000, 0.000000, 0.000000, -0.100000, 1.100000, 0.750000, 0.500000, 75.000000, 35.000000, 5.000000, 5.500000, 0.500000, 25.000000, 1.600000, 0.100000, 0.000000, 0.280000, -0.079999, 0.500000, 0.000000, 0.200000, 0.100000}},
	{411, 6673, "Bugatti Veyron", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.949999, 0.949999, 0.460000, 289.000000, 70.000000, 160.000000, 8.000000, 0.500000, 45.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.079999, 0.500000, 0.600000, 0.400000, 0.540000}},
	{411, 6674, "Lamborghini Centenario", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.250000, 0.800000, 0.899999, 0.460000, 310.000000, 65.000000, 140.000000, 7.000000, 0.500000, 32.000000, 1.500000, 0.180000, 0.000000, 0.180000, -0.059999, 0.469999, 0.600000, 0.400000, 0.540000}},
	{411, 6675, "Ford Bonco", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 11156.200195, 2.400000, 0.000000, 0.000000, -0.300000, 0.740000, 0.740000, 0.460000, 157.000000, 32.500000, 140.000000, 5.000000, 0.500000, 28.000000, 0.800000, 0.180000, 0.000000, 0.280000, -0.200000, 0.649999, 0.500000, 0.439999, 0.300000}},
	{411, 6676, "Jeep Rubicon", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 10500.000000, 2.200000, 0.000000, 0.000000, -0.300000, 0.730000, 0.730000, 0.469999, 170.000000, 33.000000, 195.000000, 5.000000, 0.500000, 30.000000, 0.800000, 0.170000, 0.000000, 0.280000, -0.079999, 0.500000, 0.500000, 0.439999, 0.400000}},
	{411, 6677, "Mitsubishi Pajero 3", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6678, "BMW M3 G80", {6660, 6694, 6695, 6696, 6697}, {6747, 6748, 6749, 6750, 6751}, {6774, 6780, 6787, 6794, -1}, {2200.000000, 4100.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.800000, 0.850000, 0.500000, 225.000000, 55.000000, 160.000000, 7.000000, 0.500000, 45.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.100000, 0.479999, 0.600000, 0.500000, 0.500000}},
	{411, 6679, "BMW X3 E83", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 7156.000000, 2.200000, 0.000000, 0.000000, -0.370000, 0.800000, 0.800000, 0.500000, 194.000000, 47.500000, 240.000000, 7.000000, 0.500000, 35.000000, 0.800000, 0.170000, 0.000000, 0.219999, -0.050000, 0.479999, 0.500000, 0.439999, 0.400000}},
	{411, 6680, "Rolls-Royce Ghost", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.400000, 0.800000, 0.800000, 0.465000, 224.000000, 42.500000, 160.000000, 5.000000, 0.500000, 35.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.100000, 0.500000, 0.300000, 0.439999, 0.300000}},
	{411, 6681, "Avtoros Shaman", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {6000.000000, 12000.000000, 1.500000, 0.000000, 0.000000, -0.400000, 0.550000, 0.699999, 0.460000, 100.000000, 15.000000, 30.000000, 2.299999, 0.250000, 25.000000, 1.000000, 0.119999, 0.000000, 0.349999, -0.119999, 0.500000, 0.000000, 0.270000, 0.349999}},
	{411, 6682, "Lamborghini Countach", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6683, "Mercedes-AMG GT R", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.550000, 1.000000, 0.899999, 0.479999, 291.000000, 65.000000, 150.000000, 7.199999, 0.500000, 35.000000, 0.800000, 0.200000, 0.000000, 0.200000, -0.079999, 0.500000, 0.300000, 0.449999, 0.300000}},
	{411, 6684, "Hummer H2", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 10500.799804, 2.200000, 0.000000, 0.000000, -0.300000, 0.730000, 0.730000, 0.469999, 175.000000, 35.000000, 200.000000, 5.000000, 0.500000, 30.000000, 0.800000, 0.165000, 0.000000, 0.280000, -0.100000, 0.449999, 0.500000, 0.439999, 0.400000}},
	{411, 6685, "Mitsubishi Evo 8", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6686, "Mercedes-AMG GT Black", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.579999, 0.899999, 0.899999, 0.300000, 282.000000, 65.000000, 180.000000, 10.000000, 0.500000, 43.000000, 1.000000, 0.079999, 0.000000, 0.200000, -0.159999, 0.500000, 0.500000, 0.419999, 0.300000}},
	{411, 6687, "Mercedes-Benz CLS55", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 3000.000000, 2.500000, 0.000000, 0.300000, -0.150000, 0.800000, 0.899999, 0.500000, 250.000000, 26.000000, 5.000000, 8.000000, 0.500000, 40.000000, 1.000000, 0.180000, 0.000000, 0.090000, -0.079000, 0.629999, 0.300000, 0.250000, 0.500000}},
	{411, 6693, "JMC", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15605, "Madcar", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {7000.000000, 13000.000000, 2.400000, 0.000000, 0.000000, -1.750000, 0.750000, 0.850000, 0.400000, 120.000000, 18.200000, 90.000000, 7.500000, 0.250000, 40.000000, 1.000000, 0.200000, 0.000000, 0.250000, -0.129999, 0.500000, 0.280000, 0.349999, 0.250000}},
	{411, 15618, "Peterblit Track \"Advance\"", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15619, "Porsche 911 Turbo S", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.400000, 0.800000, 0.899999, 0.460000, 294.000000, 50.000000, 140.000000, 6.800000, 0.500000, 32.000000, 1.299999, 0.180000, 0.000000, 0.180000, -0.059999, 0.500000, 0.600000, 0.400000, 0.540000}},
	{411, 15620, "Madtrain", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {6200.000000, 22000.199218, 2.000000, 0.000000, 0.000000, -0.500000, 0.449999, 0.750000, 0.500000, 120.000000, 18.000000, 5.000000, 8.000000, 0.300000, 25.000000, 1.500000, 0.050000, 0.000000, 0.300000, -0.150000, 0.500000, 0.000000, 0.649999, 0.250000}},
	{411, 15621, "Volvo 460 \"Diamond\"", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {7000.000000, 12500.200195, 2.799999, 0.000000, 0.000000, -0.400000, 0.850000, 0.850000, 0.250000, 150.000000, 18.200000, 130.000000, 7.500000, 0.400000, 31.000000, 1.500000, 0.200000, 0.000000, 0.449999, -0.150000, 0.449999, 0.500000, 0.400000, 0.400000}},
	{411, 15635, "Chevrolet C10", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15653, "Chevrolet C10 Apocalypse", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4200.000000, 9500.000000, 2.400000, 0.000000, 0.000000, -0.300000, 0.800000, 0.800000, 0.500000, 214.000000, 48.000000, 200.000000, 5.000000, 0.500000, 35.000000, 0.800000, 0.174999, 0.000000, 0.300000, -0.150000, 0.469999, 0.300000, 0.649999, 0.250000}},
	{411, 15669, "GAZ 21", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1700.000000, 3400.000000, 2.400000, 0.000000, 0.000000, -0.500000, 0.720000, 0.720000, 0.439999, 150.000000, 37.000000, 120.000000, 4.000000, 0.500000, 35.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.129999, 0.500000, 0.300000, 0.649999, 0.600000}},
	{411, 15708, "Corvette C1", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 3600.000000, 2.400000, 0.000000, 0.000000, -0.200000, 0.899999, 0.899999, 0.449999, 220.000000, 38.500000, 80.000000, 7.500000, 0.600000, 40.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.090000, 0.430000, 0.300000, 0.400000, 0.540000}},
	{411, 15710, "Corvette C1 (Barbie)", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 3600.000000, 2.400000, 0.000000, 0.400000, -0.200000, 0.899999, 0.899999, 0.449999, 175.000000, 38.500000, 120.000000, 7.000000, 0.600000, 40.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.070000, 0.500000, 0.300000, 0.400000, 0.540000}},
	{411, 15711, "Datsun 280z", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.340000, 0.930000, 0.930000, 0.449999, 220.000000, 40.000000, 80.000000, 4.500000, 0.500000, 40.000000, 1.000000, 0.150000, 0.000000, 0.200000, -0.140000, 0.500000, 0.300000, 0.439999, 0.300000}},
	{411, 15713, "GMC Savanna", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5700.000000, 8200.000000, 2.000000, 0.000000, 0.000000, -0.300000, 0.750000, 0.699999, 0.400000, 170.000000, 25.000000, 110.000000, 4.500000, 0.600000, 27.000000, 1.500000, 0.070000, 5.000000, 0.349999, -0.180000, 0.519999, 0.000000, 0.460000, 0.529999}},
	{411, 15733, "Honda NSX 1990", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 4800.000000, 1.799999, 0.000000, 0.000000, -0.400000, 0.860000, 0.860000, 0.479999, 242.000000, 47.000000, 80.000000, 5.000000, 0.529999, 42.000000, 1.200000, 0.079999, 0.000000, 0.280000, -0.090000, 0.550000, 0.000000, 0.200000, 0.239999}},
	{411, 15734, "Mystery", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2250.000000, 4550.000000, 2.400000, 0.000000, 0.000000, -0.400000, 0.730000, 0.860000, 0.509999, 170.000000, 28.799999, 80.000000, 3.500000, 0.519999, 35.000000, 0.920000, 0.150000, 0.000000, 0.310000, -0.100000, 0.500000, 0.300000, 0.100000, 0.560000}},
	{411, 15742, "Nissan 240z", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.449999, 0.930000, 0.930000, 0.479999, 242.000000, 47.000000, 80.000000, 5.000000, 0.500000, 40.000000, 1.500000, 0.159999, 0.000000, 0.200000, -0.129999, 0.500000, 0.300000, 0.439999, 0.300000}},
	{411, 15743, "SkullBike", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 400.000000, 4.000000, 0.000000, 0.000000, 0.000000, 1.399999, 0.850000, 0.479999, 200.000000, 20.000000, 5.000000, 4.500000, 0.550000, 10.000000, 0.649999, 0.200000, 0.000000, 0.090000, -0.109999, 0.550000, 0.000000, 0.000000, 0.239999}},
	{411, 15870, "Vaz 2109", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.400000, 0.790000, 0.790000, 0.500000, 175.000000, 31.799999, 84.500000, 3.500000, 0.500000, 29.000000, 0.600000, 0.100000, 0.000000, 0.250000, -0.250000, 0.550000, 0.300000, 0.649999, 0.400000}},
	{411, 15874, "Dunbar Track", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 6900.299804, 2.299999, 0.000000, 0.000000, -0.200000, 0.779999, 0.680000, 0.460000, 150.000000, 23.000000, 60.000000, 6.000000, 0.800000, 28.000000, 1.500000, 0.070000, 1.799999, 0.349999, -0.119999, 0.400000, 0.000000, 0.200000, 0.430000}},
	{411, 15934, "Kamaz", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {7080.000000, 14000.000000, 2.500000, 0.000000, 0.300000, -0.300000, 0.579999, 0.800000, 0.419999, 140.000000, 23.399999, 70.500000, 4.400000, 0.589999, 29.500000, 0.899999, 0.810000, 2.000000, 0.280000, -0.119999, 0.519999, 0.150000, 0.349999, 0.400000}},
	{411, 15935, "Optimus Prime Track", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {7000.000000, 13000.000000, 2.400000, 0.000000, 0.000000, -1.750000, 0.750000, 0.850000, 0.400000, 120.000000, 18.200000, 90.000000, 5.500000, 0.250000, 40.000000, 1.000000, 0.200000, 0.000000, 0.250000, -0.129999, 0.500000, 0.280000, 0.349999, 0.250000}},
	{411, 15937, "Twisted Metal", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 9500.000000, 2.500000, 0.000000, 0.000000, -0.400000, 0.750000, 0.750000, 0.479999, 170.000000, 20.000000, 80.000000, 6.000000, 0.449999, 32.000000, 1.200000, 0.100000, 0.000000, 0.300000, -0.109999, 0.500000, 0.000000, 0.620000, 0.430000}},
	{411, 15942, "Hell Hot Rod", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.100000, 0.800000, 0.800000, 0.479999, 231.000000, 50.000000, 210.000000, 5.000000, 0.500000, 35.000000, 1.700000, 0.165000, 0.000000, 0.200000, -0.180000, 0.500000, 0.000000, 0.439999, 0.300000}},
	{411, 15943, "Hulk Hot Rod", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.100000, 0.819999, 0.819999, 0.460000, 241.000000, 55.000000, 200.000000, 5.000000, 0.500000, 35.000000, 1.500000, 0.165000, 0.000000, 0.200000, -0.180000, 0.500000, 0.000000, 0.439999, 0.300000}},
	{411, 16909, "Ford Explorer 20", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 6900.200195, 2.200000, 0.000000, 0.000000, -0.349999, 0.800000, 0.800000, 0.500000, 238.000000, 47.500000, 166.000000, 7.000000, 0.500000, 37.000000, 0.800000, 0.170000, 0.000000, 0.219999, -0.050000, 0.479999, 0.500000, 0.439999, 0.400000}},
	{411, 12622, "Aston Martin DBS", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.899999, 0.899999, 0.479999, 270.000000, 55.000000, 140.000000, 8.000000, 0.500000, 45.000000, 1.000000, 0.180000, 0.000000, 0.200000, -0.119999, 0.550000, 0.600000, 0.400000, 0.540000}},
	{411, 12623, "Bentley Flying Spur", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.349999, 0.800000, 0.800000, 0.479999, 273.000000, 45.000000, 165.000000, 5.000000, 0.500000, 38.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.079999, 0.500000, 0.300000, 0.439999, 0.600000}},
	{411, 12624, "Snowmobile Buran", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {400.000000, 300.000000, 5.000000, 0.000000, 0.050000, -0.200000, 0.699999, 0.899999, 0.490000, 100.000000, 18.000000, 30.000000, 4.699999, 0.500000, 35.000000, 0.800000, 0.100000, 0.000000, 0.150000, -0.150000, 0.500000, 0.000000, 0.200000, 0.500000}},
	{411, 12625, "Volkswagen Golf GTI", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4400.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.850000, 0.850000, 0.509999, 240.000000, 40.000000, 135.000000, 5.000000, 0.500000, 40.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.129999, 0.500000, 0.600000, 0.500000, 0.449999}},
	{411, 12626, "Alfa Romeo Gulia", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.400000, 0.850000, 0.819999, 0.479999, 270.000000, 50.000000, 135.000000, 7.000000, 0.500000, 40.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.119999, 0.460000, 0.300000, 0.439999, 0.300000}},
	{411, 12627, "Hyndai Ioniq", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.300000, 0.800000, 0.800000, 0.500000, 185.000000, 50.000000, 120.000000, 7.000000, 0.500000, 45.000000, 1.100000, 0.180000, 0.000000, 0.200000, -0.090000, 0.449999, 0.600000, 0.400000, 0.540000}},
	{411, 12628, "BMW M2", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4400.000000, 2.000000, 0.000000, 0.000000, -0.550000, 0.850000, 0.800000, 0.500000, 250.000000, 45.000000, 125.000000, 7.000000, 0.500000, 42.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.119999, 0.449999, 0.600000, 0.400000, 0.540000}},
	{411, 12630, "Snowmobile Mizu", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {400.000000, 300.000000, 5.000000, 0.000000, 0.050000, -0.200000, 0.699999, 0.899999, 0.490000, 90.000000, 23.000000, 33.000000, 4.699999, 0.500000, 35.000000, 0.800000, 0.100000, 0.000000, 0.150000, -0.150000, 0.500000, 0.000000, 0.200000, 0.500000}},
	{411, 12631, "Snowmobile Retro", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {400.000000, 300.000000, 5.000000, 0.000000, 0.050000, -0.200000, 0.699999, 0.899999, 0.490000, 88.000000, 18.000000, 36.000000, 4.699999, 0.500000, 35.000000, 0.800000, 0.100000, 0.000000, 0.150000, -0.150000, 0.500000, 0.000000, 0.200000, 0.500000}},
	{411, 12633, "Jeep Wrangler 24", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 6900.000000, 2.200000, 0.000000, 0.000000, -0.349999, 0.779999, 0.779999, 0.479999, 180.000000, 35.000000, 145.000000, 5.000000, 0.500000, 0.000000, 0.800000, 0.174999, 0.000000, 0.280000, -0.100000, 0.500000, 0.500000, 0.439999, 0.400000}},
	{411, 12598, "Chevrolet Silverado", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 6900.000000, 2.200000, 0.000000, 0.000000, -0.400000, 0.740000, 0.740000, 0.460000, 213.000000, 37.500000, 145.000000, 5.000000, 0.500000, 0.000000, 0.800000, 0.180000, 0.000000, 0.280000, -0.119999, 0.500000, 0.500000, 0.439999, 0.300000}},
	{411, 12599, "Lamborghini Veneno Roadster", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4400.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.850000, 0.850000, 0.449999, 300.000000, 65.000000, 100.000000, 6.000000, 0.509999, 40.000000, 1.500000, 0.200000, 0.000000, 0.119999, -0.129999, 0.500000, 0.400000, 0.170000, 0.720000}},
	{411, 12600, "Lincoln Navigator", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 6900.000000, 2.200000, 0.000000, 0.000000, -0.349999, 0.750000, 0.750000, 0.500000, 235.000000, 50.500000, 245.000000, 7.000000, 0.500000, 33.000000, 1.700000, 0.170000, 0.000000, 0.219999, -0.200000, 0.479999, 0.500000, 0.439999, 0.400000}},
	{411, 12602, "Pagani Huayra", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.400000, 1.000000, 0.899999, 0.479999, 300.000000, 65.500000, 100.000000, 8.000000, 0.500000, 45.000000, 1.000000, 0.180000, 0.000000, 0.200000, -0.119999, 0.529999, 0.600000, 0.400000, 0.540000}},
	{411, 12603, "Rolls Royce Boat Tail", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3350.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.400000, 0.790000, 0.790000, 0.465000, 250.000000, 42.500000, 155.000000, 5.000000, 0.500000, 35.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.150000, 0.449999, 0.300000, 0.439999, 0.300000}},
	{411, 12604, "Volkswagen Arteon", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1900.000000, 2800.000000, 3.000000, 0.000000, 0.050000, -0.400000, 0.800000, 0.800000, 0.500000, 246.000000, 37.000000, 105.000000, 8.000000, 0.600000, 30.000000, 0.800000, 0.100000, 3.000000, 0.300000, -0.180000, 0.500000, 0.200000, 0.259999, 0.500000}},
	{411, 12605, "Drone-killer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 12606, "Grinch Sleigh", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 633.000000, 5.000000, 0.000000, 0.000000, -0.300000, 0.699999, 0.800000, 0.460000, 90.000000, 15.000000, 20.000000, 6.099999, 0.550000, 35.000000, 1.600000, 0.150000, 0.000000, 0.340000, -0.100000, 0.500000, 0.000000, 0.300000, 0.400000}},
	{411, 12607, "Santas Sleigh", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {800.000000, 633.000000, 5.000000, 0.000000, 0.000000, -0.300000, 0.699999, 0.800000, 0.460000, 90.000000, 15.000000, 20.000000, 6.099999, 0.550000, 35.000000, 1.600000, 0.150000, 0.000000, 0.340000, -0.100000, 0.500000, 0.000000, 0.300000, 0.400000}},
	{411, 12611, "Ferrari F250 GTO", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 12616, "Skoda Kodiaq", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 6900.000000, 2.200000, 0.000000, 0.000000, -0.400000, 0.769999, 0.769999, 0.500000, 210.000000, 42.000000, 200.000000, 5.000000, 0.500000, 32.000000, 0.800000, 0.180000, 0.000000, 0.280000, -0.119999, 0.500000, 0.500000, 0.439999, 0.400000}},
	{411, 12614, "Prius PHV", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.300000, 0.699999, 0.800000, 0.500000, 180.000000, 35.000000, 140.000000, 5.000000, 0.500000, 40.000000, 1.000000, 0.180000, 0.000000, 0.200000, -0.100000, 0.449999, 0.600000, 0.400000, 0.540000}},
	{411, 12615, "Space Cruiser", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6830, "Mack Anthem Packer", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 6835, "Apollo Intensa Emozione", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2100.000000, 4200.000000, 2.200000, 0.000000, 0.000000, -0.400000, 0.870000, 0.860000, 0.479999, 335.000000, 57.000000, 130.000000, 7.000000, 0.500000, 35.000000, 1.000000, 0.180000, 0.000000, 0.200000, -0.079999, 0.500000, 0.400000, 0.500000, 0.300000}},
	{411, 6842, "BMW XM Off-road", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 6500.000000, 2.200000, 0.000000, 0.000000, -0.200000, 0.779999, 0.649999, 0.479999, 250.000000, 25.000000, 130.000000, 5.000000, 0.479999, 38.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.100000, 0.500000, 0.500000, 0.600000, 0.349999}},
	{411, 6848, "BMW XM", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5100.000000, 2.200000, 0.000000, 0.000000, 0.000000, 0.779999, 0.779999, 0.519999, 250.500000, 26.000000, 90.000000, 6.000000, 0.449999, 32.000000, 1.000000, 0.150000, 0.000000, 0.250000, -0.090000, 0.500000, 0.300000, 0.200000, 0.300000}},
	{411, 6860, "Porsche 992 Off-Road", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 6500.000000, 2.200000, 0.000000, 0.000000, -0.200000, 0.779999, 0.649999, 0.479999, 280.000000, 25.000000, 122.000000, 5.000000, 0.479999, 38.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.100000, 0.500000, 0.500000, 0.600000, 0.349999}},
	{411, 7408, "Tanarg 912", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 27083.300781, 12.000000, 0.000000, 0.300000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 10.000000, 1.500000, 0.449999, 45.000000, 1.500000, 0.150000, 0.000000, 0.500000, -0.050000, 0.500000, 0.000000, 0.500000, 0.750000}},
	{411, 7976, "Aerostar 700", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {10000.000000, 80000.000000, 14.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.899999, 0.500000, 200.000000, 16.000000, 5.000000, 1.500000, 0.449999, 45.000000, 2.000000, 0.150000, 0.000000, 1.000000, -0.100000, 0.349999, 0.000000, 0.300000, 0.750000}},
	{411, 11860, "Mini Cooper Countryman", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2400.000000, 4300.000000, 2.200000, 0.000000, 0.000000, -0.100000, 0.850000, 0.850000, 0.500000, 222.000000, 32.500000, 0.000000, 5.000000, 0.200000, 35.000000, 0.800000, 0.200000, 0.000000, 0.250000, -0.100000, 0.500000, 0.000000, 0.379999, 0.400000}},
	{411, 11866, "Dodge Charger Daytona", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2400.000000, 4300.000000, 2.099999, 0.000000, 0.100000, -0.400000, 0.850000, 0.800000, 0.529999, 235.000000, 40.000000, 150.000000, 4.500000, 0.519999, 30.000000, 0.800000, 0.079999, 5.000000, 0.300000, -0.119999, 0.500000, 0.250000, 0.250000, 0.519999}},
	{411, 15449, "Volkswagen Amarok v6", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15451, "BMW M4 F82", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.800000, 0.850000, 0.540000, 250.000000, 48.000000, 110.000000, 6.500000, 0.500000, 45.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.100000, 0.479999, 0.600000, 0.500000, 0.500000}},
	{411, 15452, "BMW NINE", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 1000.000000, 0.699999, 0.000000, 0.079999, -0.090000, 1.799999, 0.899999, 0.479999, 215.000000, 40.000000, 5.000000, 15.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.150000}},
	{411, 15453, "Porsche Cayenne Turbo GT 2022", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.300000, 0.779999, 0.779999, 0.490000, 280.000000, 45.000000, 185.000000, 6.500000, 0.500000, 36.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.079999, 0.500000, 0.300000, 0.439999, 0.300000}},
	{411, 15454, "KIA EV9", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.300000, 0.790000, 0.790000, 0.500000, 200.000000, 30.000000, 200.000000, 6.000000, 0.500000, 30.000000, 1.000000, 0.180000, 0.000000, 0.200000, -0.100000, 0.300000, 0.600000, 0.400000, 0.540000}},
	{411, 15455, "Flying Brick", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1400.000000, 3400.000000, 2.500000, 0.000000, 0.000000, -0.400000, 1.000000, 0.970000, 0.419999, 239.000000, 70.000000, 120.000000, 6.199999, 0.449999, 30.000000, 0.800000, 0.079999, 0.000000, 0.280000, -0.150000, 0.400000, 0.300000, 0.200000, 0.600000}},
	{411, 15456, "LiXiang L9", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.300000, 0.790000, 0.790000, 0.500000, 185.000000, 50.000000, 150.000000, 6.000000, 0.500000, 30.000000, 1.000000, 0.180000, 0.000000, 0.200000, -0.100000, 0.500000, 0.600000, 0.400000, 0.540000}},
	{411, 15457, "Lotus Emira", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3350.000000, 5100.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.930000, 0.949999, 0.430000, 290.000000, 55.000000, 140.000000, 6.000000, 0.500000, 40.000000, 0.800000, 0.159999, 0.000000, 0.180000, -0.100000, 0.500000, 0.300000, 0.439999, 0.300000}},
	{411, 15553, "Lotus Esprit V8", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3350.000000, 5100.000000, 1.799999, 0.000000, 0.000000, -0.500000, 0.850000, 0.870000, 0.509999, 280.000000, 38.000000, 120.000000, 6.000000, 0.500000, 40.000000, 0.800000, 0.159999, 0.000000, 0.180000, -0.100000, 0.579999, 0.300000, 0.439999, 0.300000}},
	{411, 15555, "Naran Hyper Coupe", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2400.000000, 4800.000000, 2.000000, 0.000000, 0.000000, -0.449999, 0.980000, 0.980000, 0.469999, 270.000000, 80.000000, 130.000000, 8.000000, 0.500000, 45.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.119999, 0.529999, 0.600000, 0.400000, 0.540000}},
	{411, 15556, "Nissan Silvia 15", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5050.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.649999, 0.800000, 0.569999, 210.000000, 40.000000, 10.000000, 4.000000, 0.500000, 54.000000, 1.000000, 0.400000, 0.000000, 0.280000, -0.050000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{411, 15558, "Mazda Rx-7FD-3S", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5050.000000, 2.000000, 0.000000, 0.000000, -0.200000, 0.649999, 0.769999, 0.540000, 220.000000, 50.000000, 10.000000, 4.000000, 0.500000, 54.000000, 1.000000, 0.400000, 0.000000, 0.280000, -0.090000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{411, 15559, "Nissan Skyline BNR32", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.300000, 0.800000, 0.779999, 0.569999, 250.000000, 45.000000, 141.000000, 5.000000, 0.500000, 42.000000, 0.699999, 0.180000, 0.000000, 0.200000, -0.070000, 0.500000, 0.300000, 1.000000, 0.300000}},
	{411, 15561, "Vanda Electrics Dendrobium", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2250.000000, 4300.000000, 2.500000, 0.000000, 0.000000, -0.300000, 0.980000, 0.980000, 0.479999, 320.000000, 95.500000, 240.000000, 8.000000, 0.500000, 45.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.090000, 0.529999, 0.600000, 0.400000, 0.540000}},
	{411, 15562, "Whiplash Fortnite", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 4800.000000, 2.400000, 0.000000, 0.000000, -0.340000, 1.000000, 0.949999, 0.479999, 220.000000, 55.000000, 90.000000, 5.000000, 0.500000, 40.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.119999, 0.349999, 0.300000, 0.439999, 0.300000}},
	{411, 15563, "Batlle Bus Fortnite", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5500.000000, 33200.000000, 2.000000, 0.000000, 0.500000, 0.000000, 0.779999, 0.850000, 0.400000, 170.000000, 26.000000, 50.000000, 4.170000, 0.400000, 30.000000, 1.000000, 0.070000, 0.000000, 0.449999, -0.200000, 0.449999, 0.000000, 0.200000, 0.750000}},
	{411, 15566, "Porsche 939 RSR Concept", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2250.000000, 4300.000000, 2.000000, 0.000000, 0.000000, -0.449999, 0.980000, 0.980000, 0.419999, 315.000000, 90.000000, 220.000000, 8.000000, 0.500000, 45.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.119999, 0.529999, 0.600000, 0.400000, 0.540000}},
	{411, 15568, "Porsche 911 GT3RS 2024", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3350.000000, 5050.000000, 2.400000, 0.000000, -0.200000, -0.400000, 0.899999, 0.899999, 0.479999, 290.000000, 45.000000, 160.000000, 6.800000, 0.500000, 32.000000, 0.800000, 0.180000, 0.000000, 0.180000, -0.119999, 0.600000, 0.600000, 0.400000, 0.540000}},
	{411, 14221, "Rezvani Vengeance", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {5000.000000, 9500.000000, 2.500000, 0.000000, 0.000000, -0.400000, 0.649999, 0.699999, 0.449999, 180.000000, 35.000000, 90.000000, 3.500000, 0.449999, 27.000000, 0.699999, 0.079999, 1.000000, 0.300000, -0.180000, 0.699999, 0.000000, 0.319999, 0.059999}},
	{411, 14242, "Peterbilt 359", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14244, "Nissan 240Z S30", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3385.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.340000, 0.800000, 0.899999, 0.479999, 204.000000, 50.000000, 115.000000, 6.500000, 0.500000, 25.000000, 0.800000, 0.180000, 0.000000, 0.180000, -0.100000, 0.500000, 0.600000, 0.400000, 0.540000}},
	{411, 14245, "Bugatti Centodieci", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14246, "Сadillac Escalade", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 9500.000000, 2.200000, 0.000000, 0.000000, -0.259999, 0.720000, 0.720000, 0.460000, 185.000000, 37.000000, 150.000000, 5.000000, 0.500000, 30.000000, 1.000000, 0.180000, 0.000000, 0.280000, -0.150000, 0.500000, 0.500000, 0.439999, 0.400000}},
	{411, 14247, "Ferrari Purosangue", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2500.000000, 4900.000000, 2.400000, 0.000000, 0.000000, -0.500000, 0.800000, 0.800000, 0.500000, 279.000000, 47.400001, 140.000000, 7.000000, 0.579999, 40.000000, 0.800000, 0.150000, 0.000000, 0.200000, -0.119999, 0.649999, 0.300000, 0.150000, 0.540000}},
	{411, 14248, "Lamborghini Huracan", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.949999, 0.949999, 0.460000, 279.000000, 45.000000, 135.000000, 6.500000, 0.500000, 38.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.109999, 0.569999, 0.600000, 0.400000, 0.540000}},
	{411, 14249, "Lamborghini Huracan Sterrato Off-Road", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.850000, 0.850000, 0.479999, 229.000000, 35.000000, 145.000000, 6.000000, 0.500000, 40.000000, 1.000000, 0.180000, 0.000000, 0.200000, -0.150000, 0.550000, 0.600000, 0.400000, 0.540000}},
	{411, 14250, "Lamborghini Urus Off-Road", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2400.000000, 5200.000000, 2.400000, 0.000000, 0.000000, -0.500000, 0.800000, 0.800000, 0.500000, 220.000000, 45.400001, 155.000000, 6.500000, 0.579999, 40.000000, 0.800000, 0.150000, 0.000000, 0.200000, -0.150000, 0.500000, 0.300000, 0.150000, 0.540000}},
	{411, 14251, "Ferrari SF90 Off-Road", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 14252, "Plymouth GTX Custom", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5100.000000, 2.400000, 0.000000, 0.000000, -0.100000, 0.819999, 0.769999, 0.550000, 220.000000, 40.000000, 110.000000, 5.000000, 0.500000, 40.000000, 0.800000, 0.140000, 0.000000, 0.200000, -0.129999, 0.500000, 0.300000, 0.439999, 0.300000}},
	{411, 14253, "Shelby Cobra 427 Custom", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1800.000000, 3600.000000, 2.400000, 0.000000, 0.000000, -0.200000, 0.850000, 0.850000, 0.579999, 260.000000, 55.500000, 120.000000, 6.500000, 0.600000, 38.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.119999, 0.430000, 0.300000, 0.400000, 0.540000}},
	{411, 14254, "Mitsubishi Eclipse 1995", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.200000, 0.850000, 0.800000, 0.460000, 220.000000, 45.000000, 105.000000, 5.000000, 0.500000, 42.000000, 0.800000, 0.180000, 0.000000, 0.200000, -0.100000, 0.449999, 0.300000, 0.449999, 0.300000}},
	{411, 14255, "Cadillac Escalade Larte Design", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 9500.000000, 2.200000, 0.000000, 0.000000, -0.300000, 0.720000, 0.720000, 0.460000, 215.000000, 35.000000, 165.000000, 5.000000, 0.500000, 30.000000, 1.299999, 0.180000, 0.000000, 0.280000, -0.200000, 0.500000, 0.500000, 0.439999, 0.400000}},
	{411, 14281, "Skate Transparent", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 15730, "Hummer H1 Military", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {7500.000000, 15968.700195, 0.800000, 0.000000, 0.000000, -0.050000, 0.899999, 0.850000, 0.500000, 175.000000, 30.000000, 80.000000, 8.000000, 0.500000, 30.000000, 1.200000, 0.079999, 4.000000, 0.250000, -0.150000, 0.500000, 0.000000, 0.280000, 0.250000}},
	{411, 15731, "1967 Chevrolet Impala Autogun", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 7000.000000, 2.000000, 0.000000, 0.000000, 0.000000, 0.699999, 0.699999, 0.519999, 188.000000, 30.000000, 75.000000, 4.500000, 0.550000, 35.000000, 1.000000, 0.059999, 3.000000, 0.349999, -0.150000, 0.469999, 0.000000, 0.280000, 0.300000}},
	{411, 16861, "QuinJet", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}},
	{411, 16862, "ВАЗ 2107", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3500.000000, 7800.000000, 1.000000, 0.000000, 0.300000, 0.000000, 0.649999, 0.600000, 0.519999, 146.000000, 46.000000, 85.000000, 3.000000, 0.600000, 35.000000, 0.800000, 0.100000, 0.000000, 0.270000, -0.170000, 0.500000, 0.200000, 0.239999, 0.479999}},
	{411, 16863, "Clover Bomj Gang", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1600.000000, 3000.000000, 1.299999, 0.000000, 0.000000, 0.000000, 0.850000, 0.800000, 0.519999, 180.000000, 23.000000, 90.000000, 5.000000, 0.500000, 40.000000, 1.000000, 0.100000, 0.000000, 0.300000, -0.100000, 0.500000, 0.250000, 0.250000, 0.519999}},
	{411, 16864, "Ford Crown Victoria Police", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {4870.000000, 8100.000000, 2.000000, 0.000000, 0.300000, -0.300000, 0.949999, 0.949999, 0.500000, 318.000000, 47.000000, 80.000000, 10.000000, 0.529999, 35.000000, 1.600000, 0.200000, 0.000000, 0.280000, -0.109999, 0.439999, 0.000000, 0.200000, 0.239999}},
	{411, 16865, "Diavel Sixteen", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2400.000000, 2725.300048, 1.500000, 0.000000, 0.000000, -0.250000, 1.200000, 0.899999, 0.400000, 450.000000, 60.000000, 50.000000, 5.000000, 0.509999, 40.000000, 1.799999, 0.189999, 0.000000, 0.250000, -0.050000, 0.500000, 0.400000, 0.370000, 0.720000}},
	{411, 16866, "Mercedes e53 AMG 2025", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2100.000000, 3921.300048, 1.799999, 0.000000, -0.400000, -0.050000, 0.800000, 0.879999, 0.449999, 250.000000, 38.000000, 60.000000, 4.000000, 0.529999, 35.000000, 1.299999, 0.119999, 0.000000, 0.280000, -0.050000, 0.379999, 0.000000, 0.200000, 0.239999}},
	{411, 16867, "Nissan R35 HB edition", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 3400.000000, 2.000000, 0.000000, 0.100000, -0.200000, 0.800000, 0.699999, 0.449999, 267.000000, 40.000000, 45.000000, 4.000000, 0.500000, 35.000000, 1.200000, 0.119999, 0.000000, 0.300000, -0.050000, 0.500000, 0.400000, 0.250000, 0.500000}},
	{411, 16868, "Mitsubishi Evo 6 HB edition", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1300.000000, 3400.000000, 1.500000, 0.000000, 0.100000, -0.100000, 0.850000, 0.800000, 0.500000, 240.000000, 32.000000, 52.000000, 5.000000, 0.500000, 38.000000, 1.500000, 0.150000, 0.000000, 0.280000, -0.050000, 0.500000, 0.300000, 0.250000, 0.600000}},
	{411, 16869, "F1 Bolide 23", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1200.000000, 3000.000000, 1.500000, 0.000000, -0.200000, -0.200000, 1.500000, 0.800000, 0.400000, 360.000000, 70.000000, 60.000000, 11.100000, 0.479999, 35.000000, 0.800000, 0.200000, 0.000000, 0.100000, -0.150000, 0.500000, 0.600000, 0.400000, 0.540000}},
	{411, 16870, "Kawasaki NInja xr1000", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {500.000000, 200.000000, 1.200000, 0.000000, 0.050000, -0.090000, 1.500000, 0.899999, 0.479999, 300.000000, 65.000000, 15.000000, 7.000000, 0.500000, 35.000000, 0.850000, 0.150000, 0.000000, 0.150000, -0.159999, 0.500000, 0.000000, 0.000000, 0.109999}},
	{411, 16872, "Nissan Silvia s15 HB edition", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {1500.000000, 5500.000000, 3.200000, 0.000000, -0.100000, -0.150000, 0.649999, 0.649999, 0.500000, 250.000000, 45.000000, 25.000000, 8.000000, 0.500000, 45.000000, 1.000000, 0.200000, 0.000000, 0.280000, -0.019999, 0.529999, 0.300000, 0.250000, 0.600000}},
	{411, 16873, "Honda NSX 1990 HB edition", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2400.000000, 3000.000000, 2.000000, 0.000000, -0.300000, -0.200000, 0.850000, 0.899999, 0.400000, 250.000000, 48.000000, 40.000000, 5.000000, 0.509999, 30.000000, 1.200000, 0.129999, 0.000000, 0.150000, 0.000000, 0.500000, 0.400000, 0.170000, 0.720000}},
	{411, 16874, "Toyota Land Cruiser 200 FBI", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3200.000000, 10008.299804, 1.500000, 0.000000, 0.000000, -0.300000, 0.850000, 0.850000, 0.449999, 250.000000, 55.000000, 50.000000, 3.200000, 0.600000, 35.000000, 1.799999, 0.159999, 0.000000, 0.349999, -0.140000, 0.500000, 0.250000, 0.270000, 0.230000}},
	{411, 12601, "Mercedes-Benz EQS 53", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.300000, 0.800000, 0.800000, 0.500000, 220.000000, 50.000000, 110.000000, 7.000000, 0.500000, 45.000000, 1.299999, 0.180000, 0.000000, 0.200000, -0.180000, 0.449999, 0.600000, 0.400000, 0.540000}},
	{411, 12613, "Maserati 2018", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {2200.000000, 4200.000000, 2.000000, 0.000000, 0.000000, -0.500000, 0.800000, 0.800000, 0.519999, 285.000000, 55.000000, 175.000000, 7.000000, 0.500000, 40.000000, 1.600000, 0.180000, 0.000000, 0.200000, -0.050000, 0.500000, 0.600000, 0.500000, 0.540000}},
	{411, 12632, "Skoda Octavia", {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1}, {3300.000000, 5015.000000, 2.400000, 0.000000, 0.000000, -0.349999, 0.757000, 0.757000, 0.479999, 203.000000, 33.000000, 180.000000, 5.500000, 0.500000, 38.000000, 0.800000, 0.159999, 0.000000, 0.200000, -0.079999, 0.449999, 0.300000, 0.439999, 0.300000}}
};

stock Float:GetAngleToPoint(Float:X, Float:Y, Float:A, Float:x, Float:y)
{
	new Float:angle = 185.0 - atan2(X-x, Y-y);
	A -= (angle - 5.0);
	return A;
}

stock Float:GetVehicleAngleToPoint(vehicleid, Float:x, Float:y)
{
    new Float:ix, Float:iy, Float:iz, Float:a;
	GetVehicleZAngle(vehicleid, a);
	GetVehiclePos(vehicleid, ix, iy, iz);
	return GetAngleToPoint(ix, iy, a, x, y);
}

new Text:debugglobal[2],
	PlayerText:UpgradeMenuSlot[MAX_PLAYERS][7][3],
	UpgradeSlot[MAX_PLAYERS][6],
	AksDel[MAX_PLAYERS][8],
	pEngine[MAX_PLAYERS char];

enum _temp_
{
	tRegisterStage,
	tPasswordAttemp,
	tAuthTime,
	tAuthSuccessTime,
	bool:tAuthorized,
	tSkinSelectedId,

	pArendaCar,
	pcarid,
	pTimer,
	bool:SPECTPLAYER,
	BreakKey,
	BreakCount,
	BreakTime,
	pWW[MAX_PLAYERS],
	pDeathCar,
	PT_AntiFlood,
	pLimit,
	pDM,
	pSellCar,
	kladID,
	kladPercent,
	kladKey,
	kladPrize[3],
	onlineData[2],
	tItemId,
	tType,
	tSlot,

	cefResolution[2],
	bool:cefFocus,
	bool:cefAuth,
	cefAuthActor,
	bool:showedKeyMenu,

	pMoroz,

	tSalonBox,
	tSalonCategory, 
	tSalonSelect,
	tSalonColor[2],
	tSalonCart[40],
	tSalonCartMoney,
	tSalonCartCheck[22],
	tSalonCartWindowCheck[8],
	Float:tSalonSlider[5],
	tSalonWindowColor[7],

	tBodyguardSpawnCount,

	nftPrize[6],
	Float:pPosVIP[3],

	tRoulettePrize,
	tRoulettePrizeID,
	tRouletteID,
	tRouletteFastOpen,

	tCustomAuraObject,
	tCustomAccessory[10],

	tCustomIcon[2],
	tSelectionData[2],
	tCreateNPC[MAX_CUSTOM_NPC],

	pWeapon,
	pAmmos,

	Float:inventoryPosition[2],
	Float:inventorySize[2],

	pCentralMarketId[3],
    pCentralMarketSelectId,
    pBlinkLight,
    
    tReturnDeath
}
new pTemp[MAX_PLAYERS][_temp_];

new PlayerModification[MAX_PLAYERS],
	AksSlot[MAX_PLAYERS][6][8],
	ZapretDice[MAX_PLAYERS],
	KostiName[MAX_PLAYERS],
	KostiMoney[MAX_PLAYERS],
	Float:playerEditAccessories_attach[MAX_PLAYERS][8][9],
	playerEditAccessories_data[MAX_PLAYERS][8][3];
	
new Text:BoxTaxi1;
new Text:BoxTaxi2;
new Text:Taximonitor;
new Text:TaxiDol;
new Text:TaxiServ;

new TheftKey[MAX_PLAYERS],
	TheftCount[MAX_PLAYERS],
	TheftCarID[MAX_PLAYERS],
	TheftTime[MAX_PLAYERS];


new ArrestID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};

new bool:TeamDuty[MAX_PLAYERS char];
new MusorObject[MAX_MUSORS] = {-1, ...};
new MusorCP[MAX_MUSORS] = {-1, ...};
new MusorCOP[MAX_MUSORS];
new MusorCar[MAX_MUSORS] = {-1, ...};
new NowMusor[MAX_VEHICLES] = {-1, ...};
new TempMusorObject[MAX_MUSORS] = {-1, ...};
new Temp2MusorObject[MAX_MUSORS] = {-1, ...};
new TempMusorMusor[MAX_MUSORS] = {-1, ...};
new MusorovozPlayer[MAX_VEHICLES] = {INVALID_PLAYER_ID, ...};
new CarMusorCount[MAX_VEHICLES];

const MAX_PRODUCTS_CARS = 13;
new CarproductCount[MAX_PRODUCTS_CARS],
	CarproductType[MAX_PRODUCTS_CARS],
	Text3D:CarProductText[MAX_PRODUCTS_CARS] = {NONE_3D_TEXT, ...};

new MusorCount[MAX_MUSORS] = {100, ...};
new Text3D:MusorText[MAX_MUSORS] = {NONE_3D_TEXT, ...};
new Text3D:MusorCarText[MAX_VEHICLES] = {NONE_3D_TEXT, ...};
new Text3D:AutobCarText[MAX_VEHICLES] = {NONE_3D_TEXT, ...};

new BenzinCount[MAX_VEHICLES];
new Float:BenzinCena[MAX_VEHICLES];
new Contracter[MAX_VEHICLES];
new Text3D:Benzin[MAX_VEHICLES] = {NONE_3D_TEXT, ...};

new bool:RemoveObject[MAX_MUSORS] = {false, ...};
new SvalkaCP[3];
new TimeOfCuff[MAX_PLAYERS];
new PlayerOfCuff[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
//-------------------------------------
new PlayerText:ActionText[MAX_PLAYERS] = {PlayerText:-1, ...};
new PlayerText:ActionBand[MAX_PLAYERS] = {PlayerText:-1, ...};
new PlayerText:TaxiDraw[MAX_PLAYERS] = {PlayerText:-1, ...};
new PlayerText:InfoText[MAX_PLAYERS] = {PlayerText:-1, ...};
new PlayerText:HInfoDraw[MAX_PLAYERS][6] = {{PlayerText:-1, ...}, ...};
new FactoryClothes;
/////////
new Ring[MAX_PLAYERS];
new Merrit[4];
/////////
new Text:BandDrawBG[2];
new Bar_CP[MAX_BARSs] = {-1, ...};
new ScrapCP;
new Yakydzapick;
new Eatery_CP[9] = {-1, ...};
new FirstReferal[MAX_PLAYERS];
new FirstBL[MAX_PLAYERS];
new TazerPlayer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
//new Text:HInfoEnterDraw;
//new Text:HInfoBuyDraw;
//new Text:HInfoBG;
new ShowJobID[MAX_PLAYERS];
new CreditMoney[MAX_PLAYERS];
new Zek_CP = -1;
new RingCP = -1;
new MeriaGun = -1;
new Reklam;
new BuyGunAmmo[MAX_PLAYERS] = {-1, ...};
new BuyGuns[MAX_PLAYERS] = {-1, ...};
new CaptureDef = -1;
new CaptureAtac = -1;
new CaptureDefKill = 0;
new CaptureAtacKill = 0;
new CaptureTime[2];
new CaptureZone = -1;

new BizAtack;
new BizDeff;
new BizAtakkill;
new BizDeffkill;
new BizTime[2];
new BizWar = -1;
new ClickBiz[MAX_PLAYERS];
new BizWarState;
new PlaceWar;
new HealExitPickup = -1;
new EnterBankPickup;
new ExitBankPickup;
new RecoveryTime[MAX_ORGS];
//----------------COUNT------------------------------
new OWNABLEHOUSES,
	OWNABLEBIZES,
	GANGZONES,
	FAMILYZONES,
	OWNABLESKLADS,
	ROOMOTELS;

new ShowBiz[MAX_PLAYERS][51];
//----------------COUNT------------------------------
new bool:EnterCasino[MAX_PLAYERS char];

new engine,lights,alarm,doors,bonnet,boot,objective;
new Binko_CP = -1;
new ResetShield[MAX_PLAYERS];
new SelectPost[MAX_PLAYERS];

new DBizitem[MAX_PLAYERS][22];

new PddState[MAX_PLAYERS];
new FuelName[4][15] =
{
	"Diesel", "A-92", "A-95", "A-98"
};
enum InfoDutyPos
{
	Float:dutyposX,
	Float:dutyposY,
	Float:dutyposZ,
	dutyposWorld
}

new DutyPos[][InfoDutyPos] =
{
	{0.0, 0.0, 0.0,-1}, //No-ne
	{-483.8583, 2204.3967, 1601.0938,2}, //LSPD
	{-483.8583, 2204.3967, 1601.0938,3}, //SFPD (LVPD)
	{-2515.0466,-652.1718,1331.6420,-1}, //FBI
	{-483.8583, 2204.3967, 1601.0938,4},
	{1154.5444,-1321.0308,1019.4178,2}, //больница ls
	{1492.8477,-1277.4307,113.8064,2}, //Meria
	{583.8752,1463.3833,1900.7980,-1}, //ARMY LV
	{1154.5444,-1321.0308,1019.4178,3}, //M4C
	{1543.7091, 1298.8573, 10.8475, 5}, //Licensers
	{2127.4995, 2523.0295, 1024.9781, 1}, //Radio
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
	{0.0, 0.0, 0.0,-1},
 	{0.0, 0.0, 0.0,-1},
	{458.16, 880.03, 1500.96,-1}, //army
	{-2687.48438, 820.49432, 1500.75085,1},//bank
	{1154.5444,-1321.0308,1019.4178,4},
	{-483.8583, 2204.3967, 1601.0938,5},
	{2127.4995, 2523.0295, 1024.9781, 2}, //Radio lv
	{0.0, 0.0, 0.0,-1}, //No-ne
	{2127.4995, 2523.0295, 1024.9781, 3}, //Radio SF
	{-1600.1089,-130.1264,1501.0859,-1},//armysf
	{-104.7889,2348.3770,1507.0781,2}//tsr
};

new TeamDutyCP[MAX_ORGS];
//-------------------------------
new RankName[MAX_ORGS][10][50];

new BeforeFill[MAX_VEHICLES];
new KindFuel[MAX_PLAYERS];
new Float:CountFuel[MAX_PLAYERS];
new PlayerFuel[MAX_PLAYERS];
//--------------------------------------
new NumInc_CP[MAX_PLAYERS] = {-1, ...};
new Inc_CP[3] = -1;

new Text3D:NarkoText[5];

new Text3D:FactoryText[3];
new FactoryFerum;
new FactoryMats;
new InJob[MAX_PLAYERS];
new Fish_CP[50];
new RazdPlayers,
	RazdStatus,
	RazdName[24],
	RazdPickup,
	Text3D:RazdText,
	RazdMoney;
new
	gBarrier[34];
//---------------bools------------------
new
	Taxi_GO[MAX_PLAYERS],
	bool:Cuffed[MAX_PLAYERS],
	bool:Controllable[MAX_PLAYERS char],
	bool:Crack[MAX_PLAYERS char],
	bool:TaxiON[MAX_PLAYERS char],
	bool:MedikON[MAX_PLAYERS char],
 	bool:MehanON[MAX_PLAYERS char],
	bool:PoliseON[MAX_PLAYERS char],
	bool:Fishing[MAX_PLAYERS char],
	bool:ADuty[MAX_PLAYERS char],
	bool:MinusGun[MAX_PLAYERS char],
	bool:GoogleOpen[MAX_PLAYERS char];

//--------------------------------------
new TheifTime[MAX_PLAYERS],
	TheifCount[MAX_PLAYERS],
	TheifKey[MAX_PLAYERS];
//--------------------------------------
new NoEnterPickup[MAX_PLAYERS],
	NoStrip[MAX_PLAYERS],
	ReMail[MAX_PLAYERS][50],
	SpectatePlayer[MAX_PLAYERS],
	HouseEntered[MAX_PLAYERS],
	GarageEntered[MAX_PLAYERS] = {-1, ...},
	ParkingEntered[MAX_PLAYERS],
	BizEntered[MAX_PLAYERS],
	Question[MAX_PLAYERS],
	FullnessTick[MAX_PLAYERS],
	OldFreePlayer[MAX_PLAYERS],
	PlayerDrunkLevel[MAX_PLAYERS],
	PlayerDrunkLevels[MAX_PLAYERS],
	bool:UsingShield[MAX_PLAYERS char],
	BuyInt[MAX_PLAYERS] = {-1, ...},
	SetPass[MAX_PLAYERS][30],
	UnbanName[MAX_PLAYERS][24],
	PlayerText:EventTimeTD[MAX_PLAYERS][1],
	EventLeave,
	Text:EventSob[7];

new TextReset[MAX_PLAYERS];
new LawyerOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new LiveOfferID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new LiveOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new TakeOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new HealOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new PlayerGoPost[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new TicketPrice[MAX_PLAYERS];
new CuffedTime[MAX_PLAYERS];
new Recuffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new HouseOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new HousePrice[MAX_PLAYERS];
new BizOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new RHouseOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new BizPrice[MAX_PLAYERS];
new ShowCar[MAX_PLAYERS][51][2];
new ShowVeh[MAX_PLAYERS];
new Errors[MAX_PLAYERS];
new DrivingTest[MAX_PLAYERS];
new FlyivingTest[MAX_PLAYERS];
new CreateMats[MAX_PLAYERS];
new CreateMatsCount[MAX_PLAYERS];
new CarTest[MAX_PLAYERS];
new MotoTest[MAX_PLAYERS];
new FarmJob[MAX_PLAYERS]= {-1, ...};

new Buyitem[MAX_PLAYERS] = {-1, ...};
new ShowPBiz[MAX_PLAYERS];

new TestASKMassive[MAX_PLAYERS][4];
new TestFASKMassive[MAX_PLAYERS][7];
new TaxiTarif[MAX_PLAYERS];
new TaxiPrice[MAX_PLAYERS];
new TaxiDistance[MAX_PLAYERS];
new PlayerCar[MAX_PLAYERS] = {INVALID_VEHICLE_ID, ...};
new PlayerSeat[MAX_PLAYERS] = {-1, ...};
new Smokes[MAX_PLAYERS];
new Smoke[MAX_PLAYERS];
new SmokeTime[MAX_PLAYERS];
new OldWorld[MAX_PLAYERS];
new TransferPlayer[MAX_PLAYERS];
new TelNumber[MAX_PLAYERS];
new InfoHouse[MAX_PLAYERS];
new PutState[MAX_PLAYERS];
new InfoBiz[MAX_PLAYERS];
new InfoOtel[MAX_PLAYERS];
new MLeader[MAX_PLAYERS];
new MLPlayer[MAX_PLAYERS];
new MLName[MAX_PLAYERS][24];
new SGunMats[MAX_PLAYERS];
new SGunID[MAX_PLAYERS];
new SGunOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new SGunPrice[MAX_PLAYERS];
new SGunAmmo[MAX_PLAYERS];
new OGReset[MAX_PLAYERS];
new HouseIcon[MAX_HOUSES] = {-1, ...};
new Text3D:House3DText[MAX_HOUSES] = {NONE_3D_TEXT, ...};
new HouseGaragePickup[MAX_HOUSES] = {-1, ...};
new Text3D:HouseGarage3DText[MAX_HOUSES] =  {NONE_3D_TEXT, ...};
new Text3D:CarText[MAX_VEHICLES] = {NONE_3D_TEXT, ...};
new CarOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new CarPrice[MAX_PLAYERS];
new SkinPrice[MAX_PLAYERS];
new SkinIDSell[MAX_PLAYERS];
new UnLeaderID[MAX_PLAYERS];
new InviteOffer[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new PanelPlayerID[MAX_PLAYERS];
new OwnableCar[MAX_VEHICLES];
new PlayerFish[MAX_PLAYERS][5];
new FishMassa[MAX_PLAYERS][5];
new PassRegSex[MAX_PLAYERS];
//---------------MAX_VEHICLES-------------------------
new VehicleSeat[MAX_VEHICLES][50],
	Text3D:TaxiText[MAX_VEHICLES] = {NONE_3D_TEXT, ...},
	UnEngine[MAX_VEHICLES],
	Float:VehicleHealth[MAX_VEHICLES],
	CarTime[MAX_VEHICLES],
	Float:Fuel[MAX_VEHICLES],
	CarStrips[MAX_VEHICLES];
//-----------------------------------------------------

enum BuildInfod
{
	Text3D:blBuildText,
	blClosed,
	blArenderID[24],
	blTime,
	blCanEnter
}
new BuildsInfo[1][BuildInfod];

enum gsInfo
{
	gsName[20],
	Float:gsPosX,
	Float:gsPosY,
	Float:gsPosZ,
	gsBizzID
}
new GoGunShopCP[11];
new GoGunShop[11][gsInfo] =
{
    {"GunShop LS",1359.9208,-1283.6482,13.3461,BIZ_GS_LS},
	{"Palomino Gun",2340.3765,63.1496,26.3359,BIZ_GS_SF},
	{"Blubbery Gun",235.4267,-180.1013,1.4297,BIZ_GS_LV},
	{"LV GunShop",2530.9441,2084.2971,10.6719,LV_AMYN1},
	{"LV Pro Gun",2093.8525,2052.8147,10.8203,LV_AMYN2},
	{"FC Gun",-302.5458,827.9150,13.2947,LV_AMYN3},
	{"EQ Gun",-1510.5068,2603.7961,55.6909,LV_AMYN4},
	{"SF Guns",-2625.7246,209.2422,4.6199,115},
	{"SF Guns",-2163.4663,129.3818,35.3203,116},
	{"SF Guns",-2051.9065,553.7458,35.1719,117},
	{"Angel Guns",-2093.6995,-2464.9138,30.6250,118}
};
new GoFuelCP[35];

enum gfinfo
{
	gfName[20],
	Float:gfPos_X,
	Float:gfPos_Y,
	Float:gfPos_Z,
	gfBizzID,
	Text3D:gf3DText
}
new GoFuel[35][gfinfo] = // тут
{
	{"Gas LS 1",1004.4177,-940.2440,42.1797,BIZ_GAS_LS_1},
	{"Gas LS 2",1944.3726,-1773.2112,13.3906,BIZ_GAS_LS_2},
	{"Gas LS 3",300.1025,-172.2511,1.3289,BIZ_GAS_LV_2},
	{"Gas LS 4",653.9818,-569.3989,16.3359,BIZ_GAS_LV_4},
	{"Gas LS 5",612.1644,-1511.0835,14.9344,BIZ_GAS_LV_5},
	{"Gas LS 6",1378.2557,456.6682,19.8868,BIZ_GAS_LV_6},
	{"Gas LV 1",2202.4253,2473.4390,10.8203,BIZ_AZS1},
	{"Gas LV 2",1598.4116,2199.1228,10.8203,BIZ_AZS2},
	{"Gas LV 3",611.7775,1694.6161,6.9922,BIZ_AZS3},
	{"Gas LV 4",2145.7642,2748.0129,10.8203,BIZ_AZS4},
	{"Gas LV 5",-1328.3707,2677.3887,50.0625,BIZ_AZS5},
	{"Gas LV 6",-1472.3184,1864.2222,32.6328,BIZ_AZS6},
	{"Gas SF 1",-98.7537,-1166.8053,2.5993,21},
	{"Gas SF 2",22.4816,-2646.1042,40.4618,27},
	{"Gas SF 3",-1606.3723,-2713.6147,48.5335,22},
	{"Gas SF 4",-2249.9185,-2558.6838,31.8938,25},
	{"Gas SF 5",-1666.6174,408.5915,7.1797,26},
	{"Gas SF 6",-2022.0974,155.9591,28.8359,23},
	{"Gas SF 7",-2261.1799,-2.6144,35.1719,29},
	{"Gas SF 8",-2405.7432,974.6953,45.2969,24},
	{"Gas LV 7",2631.1118,1106.5516,10.8130,137},
	{"Voda GAS 1", 105.4324,-1783.1241,1.8554,249},
	{"Voda GAS 2", -936.9263,12.7300,1.5432,251},
	{"Voda GAS 3", 438.0923,337.3775,2.9683,253},
	{"Voda GAS 4", 2170.7629,536.5368,1.5700,250},
	{"Voda GAS 5", -2981.5325,622.8323,1.9619,252},
	{"Gas LS 7", 1389.0552,21.1120,32.9716, 261},
	{"Gas LV 8", 77.2678,1215.6113,18.8322, 262},
	{"Gas LV 9", -2568.2583,2409.7717,14.8748, 263},
	{"Gas LS 8", 1031.7177,-1859.0328,13.5758, 265},
	{"Gas LS 9", -97.0290,-1525.8759,3.0488, 264},
	{"New Gas 1", 1021.9507, 1351.1122, 10.8250, 285},
	{"New Gas 2", 1964.9005, 2100.8760, 10.8203, 288},
	{"New Gas 3", 1842.3392, 634.8887, 10.8451, 286},
	{"New Gas 4", -2115.2180, -724.0730, 32.1945, 287}
};
enum brInfo
{
	brOrg,
	Float:brPos_X,
	Float:brPos_Y,
	Float:brPos_Z,
	Float:brPos_A,
	bool:brOpen,
	brForBarrierID,
	Float:brData[6]
}
new BarrierInfo[32][brInfo] =
{
    {TEAM_NONE, 		-2669.5933, 2121.8530, 54.3169, 0.000000, false, -1},
    {TEAM_NONE, 		-2686.4246, 2141.3667, 54.3169, 0.000000, false, -1},
	{TEAM_NONE, 		73.637833, -1535.661255, 5.043927, 90.000000, false, -1},
    {TEAM_NONE, 		31.207512, -1527.308350, 4.993926, 90.000000, false, -1},
	{TEAM_NONE, 		1640.88, -1147.39, 22.91, 0.00, false, -1},
	{TEAM_MERIALS,    	1521.98, -1282.21, 13.45,0.00, false, -1},
	{TEAM_LSPD,    		1544.71, -1630.79, 12.36,-90.00, false, -1},
	{TEAM_ARMYLV, 		1152.94, 1362.98, 9.76, 360.00, false, -1},
	{TEAM_ARMYLV, 		347.99, 1799.77, 17.37, 34.51, false, -1},
	{TEAM_RM, 			997.12, 1752.23, 9.74, 269.34, false, -1},
	{TEAM_RM, 			997.09, 1707.56, 9.74, 269.34, false, -1},
	{TEAM_NONE, 		2478.63, 2516.68, 9.79, 90.07, false, -1},
	{TEAM_NONE, 		2523.94, 2424.26, 9.79, 179.62, false, -1},
	{TEAM_NONE, 		-75.67, -349.27, 0.40, 89.15, false, -1},
	{TEAM_MEDICLV, 		1637.15, 1829.90, 9.63, 269.13, false, -1},
	{TEAM_MEDICLV, 		1577.66, 1829.97, 9.63, 270.69, false, -1},
	{TEAM_LVPD, 		2238.18, 2450.46, 9.80, -90.00, false, -1},
	{TEAM_RADIOLV, 		2617.45, 1169.65, 9.65, 268.97, false, -1},
	{TEAM_NONE, 		428.671,615.601,17.941, 34.000, false, -1},
	{TEAM_NONE, 		423.585,599.148,17.941, 213.997, false, -1},
	{TEAM_NONE, 		-144.712,482.638,11.078, 165.997, false, -1},
	{TEAM_NONE, 		-128.746,490.219,10.383, 345.992, false, -1},
	{TEAM_NONE, 		1792.316772, 800.371582, 10.961740, 90.0, false, -1},
	{TEAM_NONE, 		1800.232666, 822.460571, 10.511731, 90.0, false, -1},
	{TEAM_SFPD,			-1701.43, 687.59, 23.88, 90.00, false, -1},
	{TEAM_SFPD,			-1572.20, 658.84, 6.08, 270.00, false, -1},
    {TEAM_NONE, 		-2154.069580, -745.830383, 31.006355, 90.00, false, -1},
    {TEAM_NONE, 		-2154.069580, -967.349243, 31.006355, 90.00, false, -1},
	{TEAM_ARMYSF,		-1526.3906, 481.3828, 6.1797, 360.0000, false, -1},
    {TEAM_NONE, 		-2049.517822, -217.969101, 34.188900, 0.00, false, -1},
    {TEAM_FBI, 		-2436.851563, 495.453094, 28.953100, 205.000000, false, -1},
    {TEAM_NONE, 			1811.663818, -1886.248169, 12.369600, 90.000000, false, -1}
};
enum gInfo
{
	gOrg,
	gObID,
	Float:gClose_X,
	Float:gClose_Y,
	Float:gClose_Z,
	Float:gClose_A,
	Float:gOpen_X,
	Float:gOpen_Y,
	Float:gOpen_Z,
	bool:gOpen,
	gForGateid,
	bool:gCreated,
	gWorld
}
new GateInfo[][gInfo] =
{
	{TEAM_ARMY,976, 2720.25, -2508.42, 12.09,90.0,2720.25, -2516.92, 12.09,false,-1,false,-1},
	{TEAM_ARMY,976,  2720.10, -2409.59, 12.09,90.0, 2720.10, -2418.17, 12.09,false,-1,false,-1},
	{TEAM_LSPD,11327, 1589.33, -1638.27, 14.86,270.09, 1596.37, -1638.27, 14.86,false,-1,false,-1},
	{TEAM_ARMYLV,19313,  134.9800, 1941.5500, 21.7700,0.00,121.8900, 1941.5500, 21.7700,false,-1,false,-1},
	{TEAM_ARMYLV,19313,  285.98, 1822.27, 20.10,270.00,285.9800, 1833.4900, 20.1000,false,-1,false,-1},
    {TEAM_SFPD,19313, -1630.27258, 688.22009, 8.80640, 360.00000, -1644.25256, 688.22009, 8.80640,false,-1,false,-1},
    {TEAM_SFPD,19302, 2331.0060, 66.6724, 1502.2322, 0.00000, 2329.6661, 66.6724, 1502.2322,false,-1,false,0},
	{TEAM_RCPD,19302, 2331.0060, 66.6724, 1502.2322, 0.00000, 2329.6661, 66.6724, 1502.2322,false,-1,false,11},
	{TEAM_LVPD,19302, 2331.0060, 66.6724, 1502.2322, 0.00000, 2329.6661, 66.6724, 1502.2322,false,-1,false,12}
};
new gGate[sizeof(GateInfo)];
//
enum doorInfo // 0 просто, с +-
{
	dTypeMove, 
	dOrg,
	dObID,
	Float:dPos[4],
	Float:dPosEnd[4],
	bool:dStatus,
    dWorld,
	dInterior,
	Float:dSpeed,
	dName[47],

}

new DoorInfo[79][doorInfo] =
{
	//LSPD
	{1, TEAM_LSPD, 1495, {-476.120453, 2204.334717, 1600.070313, 180.000000}, {-476.059692, 2204.298095, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-465.676300, 2194.274658, 1600.070313, 90.000000}, {-465.752593, 2194.211181, 1600.070312, 90.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-460.397339, 2206.019287, 1600.070313, 0.000000}, {-460.459320, 2206.056884, 1600.070312, 0.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-480.859741, 2202.000000, 1600.070313, 90.000000}, {-480.894195, 2201.912841, 1600.070312, 90.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-469.717407, 2189.848633, 1600.070313, 180.000000}, {-469.646972, 2189.799072, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-469.717407, 2186.706299, 1600.070313, 180.000000}, {-469.656707, 2186.666503, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-460.303162, 2187.655762, 1600.070313, 180.000000}, {-460.250976, 2187.583251, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-460.303162, 2178.173340, 1600.070313, 180.000000}, {-460.240570, 2178.106445, 1600.070312, 180.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-472.156158, 2200.668701, 1600.070313, 90.000000}, {-472.227996, 2200.595947, 1600.070312, 90.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	{1, TEAM_LSPD, 1495, {-472.180695, 2191.246826, 1600.070313, 90.000000}, {-472.200073, 2191.196533, 1600.070312, 90.0}, false, 2, -1, 0.25, "{A19D9D}Открыть\n{FFFFFF}H"},
	//RCPD
	{1, TEAM_RCPD, 1495, {-476.120453, 2204.334717, 1600.070313, 180.000000}, {-476.059692, 2204.298095, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-465.676300, 2194.274658, 1600.070313, 90.000000}, {-465.752593, 2194.211181, 1600.070312, 90.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-460.397339, 2206.019287, 1600.070313, 0.000000}, {-460.459320, 2206.056884, 1600.070312, 0.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-480.859741, 2202.000000, 1600.070313, 90.000000}, {-480.894195, 2201.912841, 1600.070312, 90.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-469.717407, 2189.848633, 1600.070313, 180.000000}, {-469.646972, 2189.799072, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-469.717407, 2186.706299, 1600.070313, 180.000000}, {-469.656707, 2186.666503, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-460.303162, 2187.655762, 1600.070313, 180.000000}, {-460.250976, 2187.583251, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-460.303162, 2178.173340, 1600.070313, 180.000000}, {-460.240570, 2178.106445, 1600.070312, 180.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-472.156158, 2200.668701, 1600.070313, 90.000000}, {-472.227996, 2200.595947, 1600.070312, 90.0}, false, 3, -1, 0.25, "None"},
	{1, TEAM_RCPD, 1495, {-472.180695, 2191.246826, 1600.070313, 90.000000}, {-472.200073, 2191.196533, 1600.070312, 90.0}, false, 3, -1, 0.25, "None"},
	//SFPD
	{1, TEAM_SFPD, 1495, {-476.120453, 2204.334717, 1600.070313, 180.000000}, {-476.059692, 2204.298095, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-465.676300, 2194.274658, 1600.070313, 90.000000}, {-465.752593, 2194.211181, 1600.070312, 90.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-460.397339, 2206.019287, 1600.070313, 0.000000}, {-460.459320, 2206.056884, 1600.070312, 0.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-480.859741, 2202.000000, 1600.070313, 90.000000}, {-480.894195, 2201.912841, 1600.070312, 90.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-469.717407, 2189.848633, 1600.070313, 180.000000}, {-469.646972, 2189.799072, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-469.717407, 2186.706299, 1600.070313, 180.000000}, {-469.656707, 2186.666503, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-460.303162, 2187.655762, 1600.070313, 180.000000}, {-460.250976, 2187.583251, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-460.303162, 2178.173340, 1600.070313, 180.000000}, {-460.240570, 2178.106445, 1600.070312, 180.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-472.156158, 2200.668701, 1600.070313, 90.000000}, {-472.227996, 2200.595947, 1600.070312, 90.0}, false, 4, -1, 0.25, "None"},
	{1, TEAM_SFPD, 1495, {-472.180695, 2191.246826, 1600.070313, 90.000000}, {-472.200073, 2191.196533, 1600.070312, 90.0}, false, 4, -1, 0.25, "None"},
	//LVPD	
	{1, TEAM_LVPD, 1495, {-476.120453, 2204.334717, 1600.070313, 180.000000}, {-476.059692, 2204.298095, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-465.676300, 2194.274658, 1600.070313, 90.000000}, {-465.752593, 2194.211181, 1600.070312, 90.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-460.397339, 2206.019287, 1600.070313, 0.000000}, {-460.459320, 2206.056884, 1600.070312, 0.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-480.859741, 2202.000000, 1600.070313, 90.000000}, {-480.894195, 2201.912841, 1600.070312, 90.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-469.717407, 2189.848633, 1600.070313, 180.000000}, {-469.646972, 2189.799072, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-469.717407, 2186.706299, 1600.070313, 180.000000}, {-469.656707, 2186.666503, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-460.303162, 2187.655762, 1600.070313, 180.000000}, {-460.250976, 2187.583251, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-460.303162, 2178.173340, 1600.070313, 180.000000}, {-460.240570, 2178.106445, 1600.070312, 180.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-472.156158, 2200.668701, 1600.070313, 90.000000}, {-472.227996, 2200.595947, 1600.070312, 90.0}, false, 5, -1, 0.25, "None"},
	{1, TEAM_LVPD, 1495, {-472.180695, 2191.246826, 1600.070313, 90.000000}, {-472.200073, 2191.196533, 1600.070312, 90.0}, false, 5, -1, 0.25, "None"},
	{0, TEAM_BANK, 1495, {-2690.8259, 807.4251, 1499.9404, 0.00}, {-2692.1459, 807.4251, 1499.9404, 0.0}, false, -1, -1, 3.0, "{A19D9D}[ ALT - для сотрудников ]"},
	//
	{0, TEAM_LICENSERS, 19859, {1534.893311, 1273.516724, 11.067500, 0.0}, {1533.693311, 1273.516724, 11.067500, 0.0}, false, 5, -1, 3.0, "None"},
	{0, TEAM_MERIALS, 1495, {1490.244873, -1282.072144, 112.792702, 90.0}, {1490.24, -1283.57, 112.79, 90.0}, false, 2, -1, 3.0, "{FB8F4C}Открыть\n\n{FFFFFF}H"},
	{0, TEAM_MERIALS, 1495, {1995.655518, 1138.021729, 1037.639526, 0.0}, {1994.364013, 1138.021728, 1037.639526, 0.0}, false, 2, -1, 3.0, "{FB8F4C}Открыть\n\n{FFFFFF}H"},
	{0, TEAM_MERIALS, 1495, {1995.673462, 1109.162598, 1037.639526, 0.0}, {1994.362792, 1109.162597, 1037.639526, 0.0}, false, 2, -1, 3.0, "{FB8F4C}Открыть\n\n{FFFFFF}H"},
	//
	{0, TEAM_NONE, 1569, {-2095.651611, 509.676605, 1486.664429, 270.0}, {-2095.651611, 510.966583, 1486.664428, 270.0}, false, 5, -1, 3.0, "{FFFFFF}Служебный вход\n\n{F9AD43}Открыть \'ALT\'"},
	{0, TEAM_LICENSERS, 19859, {1525.322876, 1273.516724, 11.067504, 0.0}, {1524.122876, 1273.516724, 11.067504, 0.0}, false, 5, -1, 3.0, "None"},
	{0, TEAM_LICENSERS, 19859, {1543.593750, 1296.593262, 11.067504, 270.0}, {1543.593750, 1297.793262, 11.067504, 270.0}, false, 5, -1, 3.0, "None"},
	{0, TEAM_LICENSERS, 19859, {1538.090576, 1297.344849, 11.067504, 0.0}, {1536.890576, 1297.344849, 11.067504, 0.0}, false, 5, -1, 3.0, "None"},
	
	// SMI LS
	{0, TEAM_RADIO, 3089, {2137.968262, 2511.630371, 1025.276367, 90.0}, {2137.968261, 2510.409179, 1025.276367, 90.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2132.879395, 2514.468262, 1025.276367, 180.0}, {2134.100585, 2514.468261, 1025.276367, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2128.218506, 2514.470215, 1025.276367, 180.0}, {2129.439697, 2514.470214, 1025.276367, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2115.410156, 2504.860352, 1025.276367, 180.0}, {2116.631347, 2504.860351, 1025.276367, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2115.410156, 2514.470215, 1025.276367, 180.0}, {2116.621337, 2514.470214, 1025.276367, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2106.558594, 2507.943359, 1025.276367, 90.0}, {2106.558593, 2506.722167, 1025.276367, 90.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2109.057617, 2519.400391, 1024.815918, 180.0}, {2110.268798, 2519.400390, 1024.815917, 180.0}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {2098.798584, 2487.779785, 1024.815918, 224.999802}, {2099.655273, 2488.636474, 1024.815917, 224.999801}, false, 1, 157, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {1511.430542, 1946.574707, 1026.397217, 90.0}, {1511.430541, 1945.353515, 1026.397216, 90.0}, false, 1, 158, 3.0, "None"},
	{0, TEAM_RADIO, 3089, {1511.430542, 1952.786499, 1026.397217, -90.0}, {1511.430541, 1953.997680, 1026.397216, -90.0}, false, 1, 158, 3.0, "None"},
	
	// SMI LV
	{0, TEAM_RADIOLV, 3089, {2137.968262, 2511.630371, 1025.276367, 90.0}, {2137.968261, 2510.409179, 1025.276367, 90.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2132.879395, 2514.468262, 1025.276367, 180.0}, {2134.100585, 2514.468261, 1025.276367, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2128.218506, 2514.470215, 1025.276367, 180.0}, {2129.439697, 2514.470214, 1025.276367, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2115.410156, 2504.860352, 1025.276367, 180.0}, {2116.631347, 2504.860351, 1025.276367, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2115.410156, 2514.470215, 1025.276367, 180.0}, {2116.621337, 2514.470214, 1025.276367, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2106.558594, 2507.943359, 1025.276367, 90.0}, {2106.558593, 2506.722167, 1025.276367, 90.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2109.057617, 2519.400391, 1024.815918, 180.0}, {2110.268798, 2519.400390, 1024.815917, 180.0}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {2098.798584, 2487.779785, 1024.815918, 224.999802}, {2099.655273, 2488.636474, 1024.815917, 224.999801}, false, 2, 157, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {1511.430542, 1946.574707, 1026.397217, 90.0}, {1511.430541, 1945.353515, 1026.397216, 90.0}, false, 2, 158, 3.0, "None"},
	{0, TEAM_RADIOLV, 3089, {1511.430542, 1952.786499, 1026.397217, -90.0}, {1511.430541, 1953.997680, 1026.397216, -90.0}, false, 2, 158, 3.0, "None"},
	
	// SMI SF
	{0, TEAM_RADIOSF, 3089, {2137.968262, 2511.630371, 1025.276367, 90.0}, {2137.968261, 2510.409179, 1025.276367, 90.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2132.879395, 2514.468262, 1025.276367, 180.0}, {2134.100585, 2514.468261, 1025.276367, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2128.218506, 2514.470215, 1025.276367, 180.0}, {2129.439697, 2514.470214, 1025.276367, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2115.410156, 2504.860352, 1025.276367, 180.0}, {2116.631347, 2504.860351, 1025.276367, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2115.410156, 2514.470215, 1025.276367, 180.0}, {2116.621337, 2514.470214, 1025.276367, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2106.558594, 2507.943359, 1025.276367, 90.0}, {2106.558593, 2506.722167, 1025.276367, 90.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2109.057617, 2519.400391, 1024.815918, 180.0}, {2110.268798, 2519.400390, 1024.815917, 180.0}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {2098.798584, 2487.779785, 1024.815918, 224.999802}, {2099.655273, 2488.636474, 1024.815917, 224.999801}, false, 3, 157, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {1511.430542, 1946.574707, 1026.397217, 90.0}, {1511.430541, 1945.353515, 1026.397216, 90.0}, false, 3, 158, 3.0, "None"},
	{0, TEAM_RADIOSF, 3089, {1511.430542, 1952.786499, 1026.397217, -90.0}, {1511.430541, 1953.997680, 1026.397216, -90.0}, false, 3, 158, 3.0, "None"}
};

new dDoor[sizeof(DoorInfo)];
//
enum bgInfo
{
	bgGunid,
	bgAmmo[5],
	bgGPrice,
	bgPrice
}
new BuyGunInfo[11][bgInfo] =
{
	{1, 	{1, 0, 0, 0, 0}, 			0, 		60},
	{5, 	{1, 0, 0, 0, 0}, 			0, 		120},
	{8, 	{1, 0, 0, 0, 0}, 			0, 		300},
	{46, 	{1, 0, 0, 0, 0}, 			0, 		240},
	{17, 	{1, 2, 3, 4, 5}, 			0, 		50},
	{24, 	{50, 75, 100, 125, 150}, 	900, 	100},
	{25,	{50, 75, 100, 125, 150}, 	1100, 	120},
	{29, 	{100, 150, 200, 250, 300}, 	1300, 	200},
	{30, 	{100, 150, 200, 250, 300}, 	1400, 	250},
	{31, 	{100, 150, 200, 250, 300}, 	1450, 	280},
	{33, 	{50, 100, 150, 200, 250}, 	1510, 	300}
};
enum PFC
{
	Float:XPa,
	Float:YPa,
	Float:ZPa,
	Float:APa,
};
new ParkForCar[391][PFC] =
{
	{-1871.6202, -753.9549, 31.6340, 89.0427},
	{-1871.9474, -757.0220, 31.6343, 89.2582},
	{-1871.6311, -760.0211, 31.6340, 89.8982},
	{-1872.1663, -762.9946, 31.6344, 90.0468},
	{-1872.1367, -765.9468, 31.6341, 89.4313},
	{-1872.0852, -768.9422, 31.6339, 90.4691},
	{-1871.3602, -772.0715, 31.6339, 90.6048},
	{-1871.9237, -775.0435, 31.6340, 90.2190},
	{-1872.0220, -777.9892, 31.6343, 89.2233},
	{-1872.0299, -780.9689, 31.6346, 89.5120},
	{-1871.9841, -783.9876, 31.6344, 90.7812},
	{-1871.8494, -787.0410, 31.6343, 90.4071},
	{-1871.5658, -790.0233, 31.6340, 89.6425},
	{-1871.7587, -793.0941, 31.6344, 89.7132},
	{-1871.8359, -796.0454, 31.6340, 90.2430},
	{-1872.0118, -798.9916, 31.6342, 91.0487},
	{-1872.0118, -801.9916, 31.6342, 91.0487},
	{-1872.0118, -804.9916, 31.6342, 91.0487},
	{-1872.0118, -807.9916, 31.6342, 91.0487},
	{-1872.0118, -810.9916, 31.6342, 91.0487},
	{-1872.0118, -813.9916, 31.6342, 91.0487},
	{-1872.0118, -816.9916, 31.6342, 91.0487},
	{-1872.0118, -819.9916, 31.6342, 91.0487},
	{-1872.0118, -822.9916, 31.6342, 91.0487},
	{-1872.0118, -825.9916, 31.6342, 91.0487},
	{-1872.0118, -828.9916, 31.6342, 91.0487},
	{-1872.0118, -831.9916, 31.6342, 91.0487},
	{-1872.0118, -834.9916, 31.6342, 91.0487},
	{-1872.0118, -837.9916, 31.6342, 91.0487},
	{-1872.0118, -840.9916, 31.6342, 91.0487},
	{-1872.0118, -843.9916, 31.6342, 91.0487},
	{-1872.0118, -846.9916, 31.6342, 91.0487},
	{-1872.0118, -849.9916, 31.6342, 91.0487},
	{-1872.0118, -852.9916, 31.6342, 91.0487},
	{-1872.0118, -855.9916, 31.6342, 91.0487},
	{-1872.0118, -858.9916, 31.6342, 91.0487},
	{-1872.0118, -861.9916, 31.6342, 91.0487},
	{-1872.0118, -864.9916, 31.6342, 91.0487},
	{-1872.0118, -866.9916, 31.6342, 91.0487},
	{-1872.0118, -869.9916, 31.6342, 91.0487},
	{-1872.0118, -872.9916, 31.6342, 91.0487},
	{-1872.0118, -875.9916, 31.6342, 91.0487},
	{-1872.0118, -878.9916, 31.6342, 91.0487},
	{-1872.0118, -881.9916, 31.6342, 91.0487},
	{-1872.0118, -884.9916, 31.6342, 91.0487},
	{-1872.0118, -887.9916, 31.6342, 91.0487},
	{-1872.0118, -890.9916, 31.6342, 91.0487},
	{-1872.0118, -893.9916, 31.6342, 91.0487},
	{-1872.0118, -896.9916, 31.6342, 91.0487},
	{-1872.0118, -899.9916, 31.6342, 91.0487},
	{-1872.0118, -902.9916, 31.6342, 91.0487},
	{-1872.0118, -905.9916, 31.6342, 91.0487},
	{-1872.0118, -908.9916, 31.6342, 91.0487},
	{-1872.0118, -911.9916, 31.6342, 91.0487},
	{-1872.0118, -914.9916, 31.6342, 91.0487},
	{-1872.0118, -917.9916, 31.6342, 91.0487},
	{-1872.0118, -920.9916, 31.6342, 91.0487},
	{-1872.0118, -923.9916, 31.6342, 91.0487},
	{-1872.0118, -926.9916, 31.6342, 91.0487},
	{-1872.0118, -929.9916, 31.6342, 91.0487},
	{-1872.0118, -932.9916, 31.6342, 91.0487},
	{-1872.0118, -935.9916, 31.6342, 91.0487},
	{-1872.0118, -938.9916, 31.6342, 91.0487},
	{-1872.0118, -941.9916, 31.6342, 91.0487},
	{-1872.0118, -944.9916, 31.6342, 91.0487},
	{-1872.0118, -947.9916, 31.6342, 91.0487},
	{-1872.0118, -950.9916, 31.6342, 91.0487},
	{-1872.0118, -953.9916, 31.6342, 91.0487},
	{-1872.0118, -956.9916, 31.6342, 91.0487},
	{-1872.0118, -959.9916, 31.6342, 91.0487},
	{-1872.0845, -963.5865, 31.6340, 90.0455},
	{-1886.9064, -963.7236, 31.6344, 269.2615},
	{-1887.1301, -960.5974, 31.6343, 268.6360},
	{-1887.3192, -957.5673, 31.6344, 270.0260},
	{-1887.3192, -954.5673, 31.6344, 270.0260},
	{-1887.3192, -951.5673, 31.6344, 270.0260},
	{-1887.3192, -948.5673, 31.6344, 270.0260},
	{-1887.3192, -945.5673, 31.6344, 270.0260},
	{-1887.3192, -942.5673, 31.6344, 270.0260},
	{-1887.3192, -939.5673, 31.6344, 270.0260},
	{-1887.3192, -936.5673, 31.6344, 270.0260},
	{-1887.3192, -933.5673, 31.6344, 270.0260},
	{-1887.3192, -930.5673, 31.6344, 270.0260},
	{-1887.3192, -927.5673, 31.6344, 270.0260},
	{-1887.3192, -924.5673, 31.6344, 270.0260},
	{-1887.3192, -921.5673, 31.6344, 270.0260},
	{-1887.3192, -918.5673, 31.6344, 270.0260},
	{-1887.8038, -915.7139, 31.6343, 268.7760},
	{-1887.6500, -903.4103, 31.6343, 268.8207},
	{-1887.2260, -900.1493, 31.6341, 268.8922},
	{-1887.5204, -896.9490, 31.6343, 270.0451},
	{-1887.5204, -893.9490, 31.6343, 270.0451},
	{-1887.5204, -890.9490, 31.6343, 270.0451},
	{-1887.5204, -887.9490, 31.6343, 270.0451},
	{-1887.5204, -884.9490, 31.6343, 270.0451},
	{-1887.5204, -881.9490, 31.6343, 270.0451},
	{-1887.5204, -878.9490, 31.6343, 270.0451},
	{-1887.5204, -875.9490, 31.6343, 270.0451},
	{-1887.5204, -872.9490, 31.6343, 270.0451},
	{-1887.5204, -869.9490, 31.6343, 270.0451},
	{-1886.9302, -864.5999, 31.6343, 268.7473},
	{-1886.9866, -853.1797, 31.6344, 269.6419},
	{-1886.9866, -850.1797, 31.6344, 269.6419},
	{-1886.9866, -847.1797, 31.6344, 269.6419},
	{-1886.9866, -844.1797, 31.6344, 269.6419},
	{-1886.9866, -841.1797, 31.6344, 269.6419},
	{-1886.9866, -838.1797, 31.6344, 269.6419},
	{-1886.9866, -835.1797, 31.6344, 269.6419},
	{-1886.9866, -832.1797, 31.6344, 269.6419},
	{-1886.9866, -829.1797, 31.6344, 269.6419},
	{-1886.9866, -824.1797, 31.6344, 269.6419},
	{-1886.9866, -821.1797, 31.6344, 269.6419},
	{-1886.9866, -818.1797, 31.6344, 269.6419},
	{-1886.8785, -814.3453, 31.6343, 269.7630},
	{-1887.3572, -802.0540, 31.6343, 269.0090},
	{-1887.3572, -799.0540, 31.6343, 269.0090},
	{-1887.3572, -796.0540, 31.6343, 269.0090},
	{-1887.3572, -793.0540, 31.6343, 269.0090},
	{-1887.3572, -790.0540, 31.6343, 269.0090},
	{-1887.3572, -787.0540, 31.6343, 269.0090},
	{-1887.3572, -784.0540, 31.6343, 269.0090},
	{-1887.3572, -781.0540, 31.6343, 269.0090},
	{-1887.3572, -778.0540, 31.6343, 269.0090},
	{-1887.3572, -775.0540, 31.6343, 269.0090},
	{-1887.3572, -772.0540, 31.6343, 269.0090},
	{-1887.3572, -769.0540, 31.6343, 269.0090},
	{-1887.3572, -766.0540, 31.6343, 269.0090},
	{-1887.3572, -763.0540, 31.6343, 269.0090},
	{-1887.3572, -760.0540, 31.6343, 269.0090},
	{-1887.3572, -757.0540, 31.6343, 269.0090},
	{-1887.0830, -753.9937, 31.6342, 269.2267},
	{-1897.4717, -754.0249, 31.6344, 90.0577},
	{-1897.4717, -757.0249, 31.6344, 90.0577},
	{-1897.4717, -760.0249, 31.6344, 90.0577},
	{-1897.4717, -763.0249, 31.6344, 90.0577},
	{-1897.4717, -766.0249, 31.6344, 90.0577},
	{-1897.4717, -769.0249, 31.6344, 90.0577},
	{-1897.4717, -772.0249, 31.6344, 90.0577},
	{-1897.4717, -775.0249, 31.6344, 90.0577},
	{-1897.4717, -778.0249, 31.6344, 90.0577},
	{-1897.4717, -781.0249, 31.6344, 90.0577},
	{-1897.4717, -784.0249, 31.6344, 90.0577},
	{-1897.4717, -787.0249, 31.6344, 90.0577},
	{-1897.4717, -790.0249, 31.6344, 90.0577},
	{-1897.4717, -793.0249, 31.6344, 90.0577},
	{-1897.4717, -796.0249, 31.6344, 90.0577},
	{-1897.4717, -799.0249, 31.6344, 90.0577},
	{-1897.6514, -801.9987, 31.6344, 88.8193},
	{-1897.5822, -814.1745, 31.6340, 89.2212},
	{-1897.5822, -817.1745, 31.6340, 89.2212},
	{-1897.5822, -820.1745, 31.6340, 89.2212},
	{-1897.5822, -823.1745, 31.6340, 89.2212},
	{-1897.5822, -826.1745, 31.6340, 89.2212},
	{-1897.5822, -829.1745, 31.6340, 89.2212},
	{-1897.5822, -832.1745, 31.6340, 89.2212},
	{-1897.5822, -835.1745, 31.6340, 89.2212},
	{-1897.5822, -838.1745, 31.6340, 89.2212},
	{-1897.5822, -841.1745, 31.6340, 89.2212},
	{-1897.5822, -844.1745, 31.6340, 89.2212},
	{-1897.5822, -847.1745, 31.6340, 89.2212},
	{-1897.5822, -850.1745, 31.6340, 89.2212},
	{-1897.4645, -853.0779, 31.6342, 90.3830},
	{-1897.6432, -864.5861, 31.6342, 91.4497},
	{-1897.6432, -867.5861, 31.6342, 91.4497},
	{-1897.6432, -870.5861, 31.6342, 91.4497},
	{-1897.6432, -873.5861, 31.6342, 91.4497},
	{-1897.6432, -876.5861, 31.6342, 91.4497},
	{-1897.6432, -879.5861, 31.6342, 91.4497},
	{-1897.6432, -882.5861, 31.6342, 91.4497},
	{-1897.6432, -885.5861, 31.6342, 91.4497},
	{-1897.6432, -888.5861, 31.6342, 91.4497},
	{-1897.6432, -891.5861, 31.6342, 91.4497},
	{-1897.6432, -894.5861, 31.6342, 91.4497},
	{-1897.6432, -897.5861, 31.6342, 91.4497},
	{-1897.6432, -900.5861, 31.6342, 91.4497},
	{-1897.3824, -903.4614, 31.6340, 88.1722},
	{-1897.6892, -915.7218, 31.6340, 88.9445},
	{-1897.6892, -918.7218, 31.6340, 88.9445},
	{-1897.6892, -921.7218, 31.6340, 88.9445},
	{-1897.6892, -924.7218, 31.6340, 88.9445},
	{-1897.6892, -927.7218, 31.6340, 88.9445},
	{-1897.6892, -930.7218, 31.6340, 88.9445},
	{-1897.6892, -933.7218, 31.6340, 88.9445},
	{-1897.6892, -936.7218, 31.6340, 88.9445},
	{-1897.6892, -939.7218, 31.6340, 88.9445},
	{-1897.6892, -942.7218, 31.6340, 88.9445},
	{-1897.6892, -945.7218, 31.6340, 88.9445},
	{-1897.6892, -948.7218, 31.6340, 88.9445},
	{-1897.6892, -951.7218, 31.6340, 88.9445},
	{-1897.6892, -955.7218, 31.6340, 88.9445},
	{-1897.6892, -958.7218, 31.6340, 88.9445},
	{-1897.6892, -961.7218, 31.6340, 88.9445},
	{-1897.8511, -963.6726, 31.6343, 90.3608},
	{1558.4680, -1012.4069, 23.5168, 181.9901},
	{1562.8892, -1012.2247, 23.5166, 180.4049},
	{1567.3582, -1011.8825, 23.5202, 180.6724},
	{1571.9059, -1012.0411, 23.5166, 181.7434},
	{1576.3126, -1012.1378, 23.5165, 182.2266},
	{1581.4943, -1011.8914, 23.5173, 186.3029},
	{1585.8787, -1010.7643, 23.5168, 185.6483},
	{1590.4026, -1010.5210, 23.5170, 186.4816},
	{1594.7281, -1010.0948, 23.5165, 185.9081},
	{1599.2446, -1009.2011, 23.5168, 185.9490},
	{1604.3210, -1008.8847, 23.5166, 176.8446},
	{1608.9269, -1009.1859, 23.5170, 177.5059},
	{1613.2728, -1009.0444, 23.5168, 180.2016},
	{1617.7999, -1009.8328, 23.5110, 179.8297},
	{1623.3464, -1010.7888, 23.5088, 162.1745},
	{1627.7533, -1011.9344, 23.5087, 162.5268},
	{1632.2615, -1013.2950, 23.5092, 163.1210},
	{1636.3907, -1014.4413, 23.5091, 162.5507},
	{1640.6299, -1016.0787, 23.5087, 161.4913},
	{1645.2540, -1017.0021, 23.5094, 160.7001},
	{1651.7897, -1017.7875, 23.5094, 189.9938},
	{1656.1506, -1016.8237, 23.5093, 189.7430},
	{1660.5764, -1016.3417, 23.5087, 191.1470},
	{1664.8175, -1015.1065, 23.5092, 191.0829},
	{1674.4000, -1013.1021, 23.5095, 200.0218},
	{1678.6801, -1011.6260, 23.5091, 198.4138},
	{1682.7860, -1009.9215, 23.5089, 199.0804},
	{1686.8544, -1008.4095, 23.5165, 197.5920},
	{1691.2926, -1007.2444, 23.5165, 198.6693},
	{1695.7494, -1006.4331, 23.5165, 197.4052},
	{1703.7869, -1005.0826, 23.5190, 170.5832},
	{1708.1157, -1005.7994, 23.5231, 171.3285},
	{1712.6115, -1006.1609, 23.5250, 171.8795},
	{1717.0189, -1006.8057, 23.5246, 171.4042},
	{1721.6476, -1007.1997, 23.5240, 171.4922},
	{1726.6277, -1007.6859, 23.5379, 166.5302},
	{1730.7971, -1008.8813, 23.5512, 166.4220},
	{1735.3641, -1009.9448, 23.5666, 168.3793},
	{1739.9144, -1011.0194, 23.5717, 166.8184},
	{1744.2775, -1012.2689, 23.5715, 167.7883},
	{1748.7714, -1012.7493, 23.5717, 166.9149},
	{1752.8365, -1014.3951, 23.5716, 168.8181},
	{1757.3102, -1015.0510, 23.5718, 166.1820},
	{1761.7666, -1015.7945, 23.5715, 170.3444},
	{1767.5665, -1017.9461, 23.5716, 152.3228},
	{1771.6459, -1020.1177, 23.5717, 152.0864},
	{1775.6600, -1022.0659, 23.5719, 153.4988},
	{1779.8026, -1023.7059, 23.5714, 154.3663},
	{1783.8260, -1025.7316, 23.5716, 150.3163},
	{1793.5167, -1061.1029, 23.5752, 0.4574},
	{1788.9436, -1060.8019, 23.5719, 358.9199},
	{1784.2389, -1060.8807, 23.5721, 0.0023},
	{1780.1812, -1061.0358, 23.5713, 359.0605},
	{1775.3362, -1061.3716, 23.5717, 358.6985},
	{1771.1055, -1060.9952, 23.5720, 358.8543},
	{1766.4647, -1060.8171, 23.5718, 359.4640},
	{1762.0133, -1061.7875, 23.5713, 359.0246},
	{1761.9238, -1070.1180, 23.5712, 180.2054},
	{1766.4242, -1070.4081, 23.5714, 177.5186},
	{1771.1721, -1069.9393, 23.5714, 177.4281},
	{1775.4537, -1070.2118, 23.5712, 178.2182},
	{1779.8951, -1069.5941, 23.5713, 179.3939},
	{1784.2726, -1070.0413, 23.5712, 180.4913},
	{1788.9608, -1070.4805, 23.5717, 179.1534},
	{1793.3495, -1070.2399, 23.5716, 182.3082},
	{1803.2043, -1085.2394, 23.5720, 358.0617},
	{1798.8994, -1084.6654, 23.5719, 358.1654},
	{1794.1704, -1084.9940, 23.5796, 357.9424},
	{1789.6384, -1085.1123, 23.5794, 359.0909},
	{1785.3490, -1085.1626, 23.5795, 0.4020},
	{1780.5991, -1085.2754, 23.5718, 359.5494},
	{1776.1948, -1084.8647, 23.5715, 0.5800},
	{1771.6897, -1084.2368, 23.5717, 0.3023},
	{1767.1836, -1085.7990, 23.5712, 0.2183},
	{1762.5854, -1084.4930, 23.5717, 358.7430},
	{1758.0923, -1085.2037, 23.5719, 1.2575},
	{1753.6434, -1085.0924, 23.5715, 0.1049},
	{1748.9657, -1084.8939, 23.5719, 0.6234},
	{1744.6156, -1085.3342, 23.5713, 0.7709},
	{1739.9070, -1085.4197, 23.5711, 0.3403},
	{1735.3269, -1085.3162, 23.5711, 1.2077},
	{1731.2482, -1085.5979, 23.5559, 359.6583},
	{1726.2017, -1084.9943, 23.5337, 359.2104},
	{1743.9335, -1037.4263, 23.5716, 0.1580},
	{1748.3455, -1036.7844, 23.5714, 359.5643},
	{1752.8572, -1036.9032, 23.5720, 359.0736},
	{1757.5089, -1037.1031, 23.5718, 0.4561},
	{1761.9230, -1037.3584, 23.5714, 356.7782},
	{1761.8252, -1046.3853, 23.5715, 177.8386},
	{1757.4915, -1046.1006, 23.5713, 179.1035},
	{1753.0697, -1046.1973, 23.5719, 179.6179},
	{1748.4551, -1046.7034, 23.5718, 180.0661},
	{1743.9131, -1046.4293, 23.5715, 179.7599},
	{1722.7699, -1060.6680, 23.5338, 358.9793},
	{1718.2196, -1060.0126, 23.5207, 358.6655},
	{1713.7673, -1060.7281, 23.5167, 359.4945},
	{1709.4412, -1060.6038, 23.5165, 359.4044},
	{1704.7166, -1059.9884, 23.5172, 358.1128},
	{1700.3153, -1060.7413, 23.5166, 358.7368},
	{1695.8868, -1060.2627, 23.5227, 358.8898},
	{1691.2753, -1060.5869, 23.5243, 357.4435},
	{1691.1912, -1069.8153, 23.5171, 180.6926},
	{1695.8701, -1069.3495, 23.5168, 178.6040},
	{1700.2670, -1069.3667, 23.5168, 179.0710},
	{1704.7157, -1069.7094, 23.5171, 178.8946},
	{1709.2683, -1069.4926, 23.5169, 178.0049},
	{1713.7153, -1069.4919, 23.5165, 179.2534},
	{1718.3026, -1068.9731, 23.5173, 180.8427},
	{1722.6871, -1069.1141, 23.5334, 179.7421},
	{1722.6025, -1060.4854, 23.5336, 359.4358},
	{1718.2721, -1060.4814, 23.5207, 0.6014},
	{1713.9677, -1060.7882, 23.5168, 0.1287},
	{1709.3805, -1060.5582, 23.5169, 359.0342},
	{1704.7964, -1060.1798, 23.5168, 357.7699},
	{1700.3353, -1059.8936, 23.5172, 357.8647},
	{1695.7241, -1060.3492, 23.5232, 359.5998},
	{1691.3960, -1060.7487, 23.5248, 359.2441},
	{1705.9163, -1085.5106, 23.5169, 358.3792},
	{1701.4266, -1085.1654, 23.5171, 357.9610},
	{1697.0255, -1084.9978, 23.5165, 359.8781},
	{1692.5027, -1085.4437, 23.5169, 359.4893},
	{1688.2380, -1085.4274, 23.5165, 357.8648},
	{1675.8231, -1097.8225, 23.5168, 88.0123},
	{1675.8021, -1102.3594, 23.5165, 89.7332},
	{1675.9368, -1106.9783, 23.5166, 87.8055},
	{1675.7943, -1111.4727, 23.5172, 89.7565},
	{1675.7751, -1115.9670, 23.5172, 90.4918},
	{1675.8225, -1120.3788, 23.5172, 88.7881},
	{1675.5469, -1124.8788, 23.5171, 89.2826},
	{1675.5693, -1129.3719, 23.5171, 88.5380},
	{1666.4688, -1135.2738, 23.5171, 0.1341},
	{1661.7244, -1136.0667, 23.5172, 358.6440},
	{1657.2987, -1135.6372, 23.5172, 359.8706},
	{1652.9393, -1135.6422, 23.5165, 358.0985},
	{1648.4742, -1135.5204, 23.5172, 1.2977},
	{1617.0967, -1137.1364, 23.5172, 272.5109},
	{1617.1405, -1132.5933, 23.5171, 266.8187},
	{1616.2843, -1128.2009, 23.5166, 267.9693},
	{1616.8486, -1123.8628, 23.5170, 269.7912},
	{1617.0011, -1119.1412, 23.5172, 267.3853},
	{1592.1229, -1057.8048, 23.5165, 308.7149},
	{1589.3940, -1054.6306, 23.5172, 308.6678},
	{1586.8616, -1050.7434, 23.5173, 305.9297},
	{1584.3718, -1047.3011, 23.5167, 309.4448},
	{1581.6361, -1043.6340, 23.5166, 309.3819},
	{1577.7589, -1039.2748, 23.5174, 321.4056},
	{1573.6016, -1037.0328, 23.5209, 320.5859},
	{1570.1982, -1034.2122, 23.5249, 320.7296},
	{1563.9054, -1030.9979, 23.5186, 342.1199},
	{1559.7295, -1029.5508, 23.5165, 343.3477},
	{1555.3745, -1028.2522, 23.5167, 341.3905},
	{1551.0745, -1026.7731, 23.5170, 342.4940},
	{1546.8508, -1025.5540, 23.5171, 342.1929},
	{1542.6683, -1024.1702, 23.5171, 340.9424},
	{1658.9448, -1037.8763, 23.5088, 359.8871},
	{1654.3845, -1037.5585, 23.5094, 358.4614},
	{1649.9601, -1037.5441, 23.5093, 358.1330},
	{1645.3553, -1037.4141, 23.5094, 359.9295},
	{1640.7861, -1037.6759, 23.5091, 359.4187},
	{1636.3569, -1037.7754, 23.5088, 359.5124},
	{1631.8942, -1037.8721, 23.5089, 0.0841},
	{1627.3131, -1037.5183, 23.5093, 358.6852},
	{1627.1763, -1046.4005, 23.5087, 180.3113},
	{1631.8175, -1046.4231, 23.5091, 178.3477},
	{1636.1625, -1046.2880, 23.5094, 178.9926},
	{1640.7754, -1046.6510, 23.5090, 179.1166},
	{1645.2764, -1046.8058, 23.5094, 177.1074},
	{1649.7460, -1046.4567, 23.5090, 178.3391},
	{1654.4225, -1046.3765, 23.5090, 178.9497},
	{1658.6324, -1046.3380, 23.5086, 178.2492},
	{1658.0083, -1080.0065, 23.5127, 268.5453},
	{1657.9198, -1084.5458, 23.5164, 269.3615},
	{1658.3243, -1089.0385, 23.5166, 269.3302},
	{1658.2106, -1093.5894, 23.5170, 270.4691},
	{1658.3051, -1097.9753, 23.5171, 269.3956},
	{1658.3674, -1102.7065, 23.5172, 269.9523},
	{1657.9114, -1107.1176, 23.5166, 269.9855},
	{1658.4811, -1111.5708, 23.5169, 269.8734},
	{1648.9885, -1111.4705, 23.5248, 89.5551},
	{1648.9166, -1107.0082, 23.5172, 89.4219},
	{1649.6259, -1102.5834, 23.5165, 90.5175},
	{1649.1847, -1098.0969, 23.5168, 90.6903},
	{1649.4255, -1093.6208, 23.5168, 90.3299},
	{1649.0256, -1089.0177, 23.5172, 88.5190},
	{1649.7467, -1084.6544, 23.5167, 90.4367},
	{1649.0420, -1080.0314, 23.5134, 90.7553},
	{1629.5481, -1107.4907, 23.5172, 268.6024},
	{1629.8374, -1103.0299, 23.5166, 267.2411},
	{1629.7446, -1098.4086, 23.5165, 268.7328},
	{1629.4772, -1093.9991, 23.5204, 268.5530},
	{1630.1189, -1089.5664, 23.5168, 268.1686},
	{1629.4015, -1085.0798, 23.5167, 268.1021},
	{1621.1122, -1084.9014, 23.5165, 89.2882},
	{1621.1877, -1089.5990, 23.5172, 88.3801},
	{1620.8409, -1094.0743, 23.5206, 90.3619},
	{1621.1720, -1098.5520, 23.5171, 89.8521},
	{1620.6381, -1103.0771, 23.5171, 89.8721},
	{1621.2124, -1107.3531, 23.5169, 90.2835}
};
new Float:CarPounds[14][4] =
{
    {1611.3163,-1140.9514,1679.1689,-1073.6880},
    {1603.515625,-1089.84375,1806.640625,-1039.0625},
	{1566.40625,-1041.015625,1755.859375,-1007.8125},
	{1751.953125,-1041.015625,1792.96875,-1021.484375},
	{1755.859375,-1021.484375,1783.203125,-1011.71875},
	{1617.1875,-1140.625,1685.546875,-1091.796875},
	{1615.234375,-1095.703125,1685.546875,-1085.9375},
	{1578.125,-1056.640625,1609.375,-1039.0625},
	{1591.796875,-1068.359375,1607.421875,-1056.640625},
	{1599.609375,-1076.171875,1607.421875,-1066.40625},
	{1825.6003,-1147.3049,1547.0156,-1006.9152},
	{2480.0544,2482.7708,2534.8032,2543.1504},
	{2399.3401,2525.1711,2479.9580,2557.8350},
	{2458.6350,2482.7695,2479.3079,2500.5684}
};
enum healinfo
{
	Float:hCP[3],
	Float:hBed[4],
	hInt,
	hWorld,
	hName[24],
	hID
}
new HealInfo[81][healinfo] =
{
	{{-1339.6770, 19.8657, 1601.0889}, {-1338.7952, 19.7113, 1601.5659, 83.8531}, 2, 1, "The State", 1 },
	{{-1339.6770, 19.8657, 1601.0889}, {-1338.7952, 19.7113, 1601.5659, 83.8531}, 3, 2, "The State", 2 },
	{{-1339.6770, 19.8657, 1601.0889}, {-1338.7952, 19.7113, 1601.5659, 83.8531}, 3, 3, "The State", 3 },
	{{-1345.4254,19.8650,1601.0889}, {-1344.6072,19.8704,1601.5659,83.1468}, 2, 1, "The State", 4 },
	{{-1345.4254,19.8650,1601.0889}, {-1344.6072,19.8704,1601.5659,83.1468}, 3, 2, "The State", 5 },
	{{-1345.4254,19.8650,1601.0889}, {-1344.6072,19.8704,1601.5659,83.1468}, 3, 3, "The State", 6 },
	{{-1337.3591,3.5709,1601.0889}, {-1338.4857,4.4988,1601.5659,266.2759}, 2, 1, "The State", 7 },
	{{-1337.3591,3.5709,1601.0889}, {-1338.4857,4.4988,1601.5659,266.2759}, 3, 2, "The State", 8 },
	{{-1337.3591,3.5709,1601.0889}, {-1338.4857,4.4988,1601.5659,266.2759}, 3, 3, "The State", 9 },
	{{-1335.7355,19.8683,1601.0889}, {-1334.9148,19.7931,1601.5659,88.3194}, 2, 1, "The State", 10 },
	{{-1335.7355,19.8683,1601.0889}, {-1334.9148,19.7931,1601.5659,88.3194}, 3, 2, "The State", 11 },
	{{-1335.7355,19.8683,1601.0889}, {-1334.9148,19.7931,1601.5659,88.3194}, 3, 3, "The State", 12 },
	{{-1330.4944,19.8672,1601.0929}, {-1329.4827,19.7623,1601.5659,86.2056}, 2, 1, "The State", 13 },
	{{-1330.4944,19.8672,1601.0929}, {-1329.4827,19.7623,1601.5659,86.2056}, 3, 2, "The State", 14 },
	{{-1330.4944,19.8672,1601.0929}, {-1329.4827,19.7623,1601.5659,86.2056}, 3, 3, "The State", 15 },
	{{-1327.5740,4.6242,1601.0889}, {-1328.7638,4.5789,1601.5659,264.5501}, 2, 1, "The State", 16 },
	{{-1327.5740,4.6242,1601.0889}, {-1328.7638,4.5789,1601.5659,264.5501}, 3, 2, "The State", 17 },
	{{-1327.5740,4.6242,1601.0889}, {-1328.7638,4.5789,1601.5659,264.5501}, 3, 3, "The State", 18 },
	{{-1333.8420,4.5398,1601.0889}, {-1334.6543,4.5476,1601.5659,264.6297}, 2, 1, "The State", 19 },
	{{-1333.8420,4.5398,1601.0889}, {-1334.6543,4.5476,1601.5659,264.6297}, 3, 2, "The State", 20 },
	{{-1333.8420,4.5398,1601.0889}, {-1334.6543,4.5476,1601.5659,264.6297}, 3, 3, "The State", 21 },

	{{1172.6876,-1300.5726,1019.4178}, {1173.7727,-1300.4900,1020.1516,355.4137}, 2, 2, "The State", 22},
	{{1172.6874,-1296.5604,1019.4178}, {1173.7395,-1296.5192,1020.1516,350.9707}, 2, 2, "The State", 23},
	{{1172.6869,-1293.9464,1019.4178}, {1173.6384,-1293.8499,1020.1516,354.3612}, 2, 2, "The State", 24},
	{{1172.6864,-1289.9396,1019.4117}, {1173.7646,-1289.8275,1020.1516,353.3649}, 2, 2, "The State", 25},
	{{1172.6868,-1287.4933,1019.4117}, {1173.7874,-1287.3059,1020.1516,351.7419}, 2, 2, "The State", 26},
	{{1172.6852,-1283.5253,1019.4117}, {1173.7566,-1283.3757,1020.1516,352.6023}, 2, 2, "The State", 27},
	{{1166.8606,-1283.1107,1019.4327}, {1165.6801,-1283.2424,1020.1516,175.1978}, 2, 2, "The State", 28},
	{{1166.8456,-1289.7634,1019.4327}, {1165.7737,-1289.9288,1020.1516,178.1953}, 2, 2, "The State", 29},
	{{1166.8461,-1293.7697,1019.4286}, {1165.8413,-1293.8712,1020.1516,173.9863}, 2, 2, "The State", 30},
	{{1166.8489,-1287.0393,1019.4327}, {1165.7848,-1287.2286,1020.1516,175.7448}, 2, 2, "The State", 31},
	{{1172.6860,-1321.3020,1019.4198}, {1173.8264,-1321.2122,1020.1516,355.8066}, 2, 2, "The State", 32},
	{{1172.6871,-1325.3010,1019.4198}, {1173.6981,-1325.1902,1020.1516,353.3562}, 2, 2, "The State", 33},
	{{1172.6881,-1327.8164,1019.4198}, {1173.7400,-1327.7413,1020.1516,353.4123}, 2, 2, "The State", 34},
	{{1172.6798,-1331.7908,1019.4198}, {1173.7030,-1331.8124,1020.1516,355.0585}, 2, 2, "The State", 35},
	{{1172.6793,-1334.4395,1019.4198}, {1173.7358,-1334.4279,1020.1516,356.0546}, 2, 2, "The State", 36},
	{{1172.6876,-1338.3926,1019.4198}, {1173.7880,-1338.2942,1020.1516,356.4243}, 2, 2, "The State", 37},
	{{1167.2291,-1338.3225,1019.4328}, {1166.2716,-1338.3811,1020.1516,175.8774}, 2, 2, "The State", 38},
	{{1167.2284,-1334.2874,1019.4388}, {1166.0990,-1334.4462,1020.1516,174.2546}, 2, 2, "The State", 39},
	{{1167.2269,-1331.5585,1019.4388}, {1166.1874,-1331.6588,1020.1516,175.7650}, 2, 2, "The State", 40},
	{{1167.2269,-1327.6050,1019.4388}, {1166.1394,-1327.7194,1020.1516,173.5155}, 2, 2, "The State", 41},

	{{1172.6876,-1300.5726,1019.4178}, {1173.7727,-1300.4900,1020.1516,355.4137}, 3, 3, "The State", 22*2},
	{{1172.6874,-1296.5604,1019.4178}, {1173.7395,-1296.5192,1020.1516,350.9707}, 3, 3, "The State", 23*2},
	{{1172.6869,-1293.9464,1019.4178}, {1173.6384,-1293.8499,1020.1516,354.3612}, 3, 3, "The State", 24*2},
	{{1172.6864,-1289.9396,1019.4117}, {1173.7646,-1289.8275,1020.1516,353.3649}, 3, 3, "The State", 25*2},
	{{1172.6868,-1287.4933,1019.4117}, {1173.7874,-1287.3059,1020.1516,351.7419}, 3, 3, "The State", 26*2},
	{{1172.6852,-1283.5253,1019.4117}, {1173.7566,-1283.3757,1020.1516,352.6023}, 3, 3, "The State", 27*2},
	{{1166.8606,-1283.1107,1019.4327}, {1165.6801,-1283.2424,1020.1516,175.1978}, 3, 3, "The State", 28*2},
	{{1166.8456,-1289.7634,1019.4327}, {1165.7737,-1289.9288,1020.1516,178.1953}, 3, 3, "The State", 29*2},
	{{1166.8461,-1293.7697,1019.4286}, {1165.8413,-1293.8712,1020.1516,173.9863}, 3, 3, "The State", 30*2},
	{{1166.8489,-1287.0393,1019.4327}, {1165.7848,-1287.2286,1020.1516,175.7448}, 3, 3, "The State", 31*2},
	{{1172.6860,-1321.3020,1019.4198}, {1173.8264,-1321.2122,1020.1516,355.8066}, 3, 3, "The State", 32*2},
	{{1172.6871,-1325.3010,1019.4198}, {1173.6981,-1325.1902,1020.1516,353.3562}, 3, 3, "The State", 33*2},
	{{1172.6881,-1327.8164,1019.4198}, {1173.7400,-1327.7413,1020.1516,353.4123}, 3, 3, "The State", 34*2},
	{{1172.6798,-1331.7908,1019.4198}, {1173.7030,-1331.8124,1020.1516,355.0585}, 3, 3, "The State", 35*2},
	{{1172.6793,-1334.4395,1019.4198}, {1173.7358,-1334.4279,1020.1516,356.0546}, 3, 3, "The State", 36*2},
	{{1172.6876,-1338.3926,1019.4198}, {1173.7880,-1338.2942,1020.1516,356.4243}, 3, 3, "The State", 37*2},
	{{1167.2291,-1338.3225,1019.4328}, {1166.2716,-1338.3811,1020.1516,175.8774}, 3, 3, "The State", 38*2},
	{{1167.2284,-1334.2874,1019.4388}, {1166.0990,-1334.4462,1020.1516,174.2546}, 3, 3, "The State", 39*2},
	{{1167.2269,-1331.5585,1019.4388}, {1166.1874,-1331.6588,1020.1516,175.7650}, 3, 3, "The State", 40*2},
	{{1167.2269,-1327.6050,1019.4388}, {1166.1394,-1327.7194,1020.1516,173.5155}, 3, 3, "The State", 41*2},

	{{1172.6876,-1300.5726,1019.4178}, {1173.7727,-1300.4900,1020.1516,355.4137}, 4, 4, "The State", 22*3},
	{{1172.6874,-1296.5604,1019.4178}, {1173.7395,-1296.5192,1020.1516,350.9707}, 4, 4, "The State", 23*3},
	{{1172.6869,-1293.9464,1019.4178}, {1173.6384,-1293.8499,1020.1516,354.3612}, 4, 4, "The State", 24*3},
	{{1172.6864,-1289.9396,1019.4117}, {1173.7646,-1289.8275,1020.1516,353.3649}, 4, 4, "The State", 25*3},
	{{1172.6868,-1287.4933,1019.4117}, {1173.7874,-1287.3059,1020.1516,351.7419}, 4, 4, "The State", 26*3},
	{{1172.6852,-1283.5253,1019.4117}, {1173.7566,-1283.3757,1020.1516,352.6023}, 4, 4, "The State", 27*3},
	{{1166.8606,-1283.1107,1019.4327}, {1165.6801,-1283.2424,1020.1516,175.1978}, 4, 4, "The State", 28*3},
	{{1166.8456,-1289.7634,1019.4327}, {1165.7737,-1289.9288,1020.1516,178.1953}, 4, 4, "The State", 29*3},
	{{1166.8461,-1293.7697,1019.4286}, {1165.8413,-1293.8712,1020.1516,173.9863}, 4, 4, "The State", 30*3},
	{{1166.8489,-1287.0393,1019.4327}, {1165.7848,-1287.2286,1020.1516,175.7448}, 4, 4, "The State", 31*3},
	{{1172.6860,-1321.3020,1019.4198}, {1173.8264,-1321.2122,1020.1516,355.8066}, 4, 4, "The State", 32*3},
	{{1172.6871,-1325.3010,1019.4198}, {1173.6981,-1325.1902,1020.1516,353.3562}, 4, 4, "The State", 33*3},
	{{1172.6881,-1327.8164,1019.4198}, {1173.7400,-1327.7413,1020.1516,353.4123}, 4, 4, "The State", 34*3},
	{{1172.6798,-1331.7908,1019.4198}, {1173.7030,-1331.8124,1020.1516,355.0585}, 4, 4, "The State", 35*3},
	{{1172.6793,-1334.4395,1019.4198}, {1173.7358,-1334.4279,1020.1516,356.0546}, 4, 4, "The State", 36*3},
	{{1172.6876,-1338.3926,1019.4198}, {1173.7880,-1338.2942,1020.1516,356.4243}, 4, 4, "The State", 37*3},
	{{1167.2291,-1338.3225,1019.4328}, {1166.2716,-1338.3811,1020.1516,175.8774}, 4, 4, "The State", 38*3},
	{{1167.2284,-1334.2874,1019.4388}, {1166.0990,-1334.4462,1020.1516,174.2546}, 4, 4, "The State", 39*3},
	{{1167.2269,-1331.5585,1019.4388}, {1166.1874,-1331.6588,1020.1516,175.7650}, 4, 4, "The State", 40*3},
	{{1167.2269,-1327.6050,1019.4388}, {1166.1394,-1327.7194,1020.1516,173.5155}, 4, 4, "The State", 41*3}
};
new Text3D:HealText[81] = {NONE_3D_TEXT, ...};
new PlayerBed[MAX_PLAYERS];
new bool:PlayerLie[MAX_PLAYERS char];
new OBJECT_RAKE[MAX_PLAYERS]; // Проверка на то что имеется у игрока инструмент или нет.
const MAX_LINEN_OBJECT = 11;
enum linenInfo
{
    bool: linenStatus,
    Float:linenPosX,
    Float:linenPosY,
    Float:linenPosZ,
    linenObject,
    Text3D: linenLabel,
    linenScore,
    linenSecund,
    linenStatusTimer
}
new LinenInfo[MAX_LINEN_OBJECT][linenInfo] =
{
    {true, -264.8821, -1393.6427, 11.4850},
    {true, -288.1983, -1396.1859, 12.2953},
    {true, -310.4437, -1416.4810, 15.0943},
    {true, -290.1641, -1416.4885, 13.1366},
    {true, -265.3173, -1415.6331, 10.4779},
    {true, -239.7378, -1413.1207, 8.4944},
    {true, -214.3640, -1411.2096, 6.3158},
    {true, -189.4012, -1408.9705, 4.3835},
    {true, -189.3507, -1388.5031, 5.8134},
    {true, -213.2893, -1389.5488, 7.4410},
    {true, -240.2519, -1391.7345, 10.5762}
};
enum fermaInfo
{
	bool:farmStatus,
    Float:farmPos[3],
    farmObject,
    Text3D:farmText,
    farmTimer
}
new FermaInfo[][fermaInfo] =
{
	{true, {-120.7569,99.3704,3.1172}},
	{true, {-128.3809,102.1501,3.1172}},
	{true, {-136.5950,105.2897,3.1172}},
	{true, {-145.7583,108.6246,3.2538}},
	{true, {-154.5210,111.8713,3.3129}},
	{true, {-162.0900,114.5991,3.3625}},
	{true, {-160.0248,121.1348,3.4863}},
	{true, {-152.5749,120.8728,3.4832}},
	{true, {-143.6152,117.8463,3.4283}},
	{true, {-135.0514,114.8654,3.1491}},
	{true, {-126.0453,114.5036,3.1172}},
	{true, {-128.0462,121.7264,3.1172}},
	{true, {-133.5194,126.1950,3.3060}},
	{true, {-142.0328,128.4082,3.6180}},
	{true, {-133.0838,132.0404,3.3983}},
	{true, {-125.7041,130.2292,3.1298}},
	{true, {-118.4041,127.8988,3.1172}},
	{true, {-113.0468,132.3999,3.1172}},
	{true, {-118.1606,139.8210,3.1130}},
	{true, {-126.4074,144.2205,3.4593}},
	{true, {-122.4682,136.3154,2.7132}},
	{true, {-121.9310,123.0687,2.6973}},
	{true, {-115.6247,121.1413,2.6916}},
	{true, {-116.5819,111.6051,2.6884}},
	{true, {-135.9012,120.1452,2.8551}},
	{true, {-146.0981,124.2360,3.1245}},
	{true, {-145.5504,136.2930,3.3487}},
	{true, {-138.1209,141.5477,3.3050}},
	{true, {-136.9752,147.3535,3.4253}},
	{true, {-149.9188,144.0256,3.6182}}
};
const MAX_COTTON_OBJECT = 15;
enum cottonInfo
{
    bool:cottonStatus,
    Float:cottonPosX,
    Float:cottonPosY,
    Float:cottonPosZ,
    cottonObject,
    Text3D:cottonLabel,
    cottonScore,
    cottonSecund,
    cottonStatusTimer
}
new CottonInfo[MAX_COTTON_OBJECT][cottonInfo] =
{
    {true, -225.0934, -1538.5936, 7.4748},
    {true, -244.9032, -1538.2950, 6.3041},
    {true, -266.6799, -1538.8119, 4.8946},
    {true, -290.5024, -1538.9031, 8.4306},
    {true, -313.8723, -1539.2168, 12.9345},
    {true, -315.5166, -1515.1859, 12.9114},
    {true, -292.6646, -1514.9556, 8.9786},
    {true, -268.7896, -1514.8757, 5.9850},
    {true, -247.3963, -1514.4823, 7.5544},
    {true, -226.8527, -1515.3866, 7.9063},
    {true, -225.5202, -1489.0884, 8.2394},
    {true, -246.1186, -1488.9327, 6.9872},
    {true, -268.2265, -1490.1191, 5.8928},
    {true, -291.3911, -1489.0592, 8.3316},
    {true, -315.4521, -1489.0024, 12.6806}
};
enum EggsInfo
{
    Float:ePos_X,
	Float:ePos_Y,
	Float:ePos_Z,
	eVWorld,
	eCreate,
	eTimer
};
new Eggs[MAX_EGGS][EggsInfo] =
{
	{-2275.7200,87.0314,35.1641, 1, -1},
	{-2295.3132,107.4114,35.3125, 1, -1},
	{-2267.4077,117.4337,35.1718, 1, -1},
	{-2269.8113,47.6080,35.1641, 1, -1},
	{-2286.6294,56.6063,35.3125, 1, -1},
	{-2319.9539,48.5028,35.1641, 1, -1},
	{-2348.1899,76.4638,35.3125, 1, -1},
	{-2393.0188,66.4582,35.2920, 1, -1},
	{-2422.9236,85.2413,35.0234, 1, -1},
	{-2401.7488,121.9103,35.2546, 1, -1},
	{-2404.8376,176.9519,35.2152, 1, -1},
	{-2360.1316,192.3997,35.3125, 1, -1},
	{-2338.8518,237.9753,35.3168, 1, -1},
	{-2310.9033,223.2881,36.7057, 1, -1},
	{-2285.3687,266.9162,35.3203, 1, -1},
	{-2319.6628,249.2534,35.3203, 1, -1},
	{-2304.3103,133.7990,35.3125, 1, -1},
	{-2324.4160,166.4205,35.3125, 1, -1},
	{-2352.1743,198.1319,35.3125, 1, -1},
	{-2329.1748,113.6600,35.3125, 1, -1}
};
new OBJECT_SLEGAN[MAX_PLAYERS]; // Проверка на то что имеется у игрока инструмент или нет.
const MAX_MINE_OBJECT = 35;
enum mineInfo
{
    bool:mineStatus,
    Float:minePosX,
    Float:minePosY,
    Float:minePosZ,
    mineObject,
    Text3D:mineLabel,
    mineTimer,
    minePoroda
}
new MineInfo[MAX_MINE_OBJECT][mineInfo] =
{
    {true, 619.2419, 941.3776, -37.2434},
    {true, 661.9933, 936.9175, -37.8092},
    {true, 629.8119, 947.0472, -35.2863},
    {true, 632.1992, 953.4025, -34.3900},
    {true, 644.1904, 955.9868, -34.1643},
    {true, 646.9728, 941.4316, -35.6497},
    {true, 584.6645, 949.8398, -30.6175},
    {true, 563.0754, 944.5233, -29.5798},
    {true, 497.0916, 917.7969, -29.9888},
    {true, 508.1040, 924.3862, -28.4721},
    {true, 508.4806, 938.4163, -27.7112},
    {true, 518.5377, 944.4051, -25.3424},
    {true, 528.7015, 958.9933, -22.2651},
    {true, 532.1467, 969.0619, -21.7194},
    {true, 518.7510, 969.2048, -23.7236},
    {true, 488.4578, 896.8007, -30.5957},
    {true, 470.8828, 871.3386, -28.9356},
    {true, 496.9825, 850.9363, -29.4746},
    {true, 510.7053, 835.5143, -26.7997},
    {true, 514.9717, 822.7236, -24.7397},
    {true, 518.4806, 809.1451, -23.2232},
    {true, 506.6518, 805.2540, -21.9453},
    {true, 500.1867, 792.5642, -21.6318},
    {true, 517.2272, 790.6378, -21.3920},
    {true, 565.3442, 770.0980, -16.5111},
    {true, 582.7704, 791.1359, -29.9858},
    {true, 692.9124, 799.8726, -30.2292},
    {true, 716.2703, 816.9769, -30.2541},
    {true, 713.0031, 833.7784, -30.2268},
    {true, 719.2053, 847.8356, -29.9590},
    {true, 686.4009, 788.7589, -29.9033},
    {true, 561.9888, 800.1697, -28.0481},
    {true, 615.9201, 777.2510, -31.8031},
    {true, 648.7132, 777.1953, -29.9342},
    {true, 663.9606, 788.6589, -29.9526}
};
#define MAX_AUTO_BAZAR  95
enum autoBazar
{
    Float:autoBazarPosX,
    Float:autoBazarPosY,
    Float:autoBazarPosZ,
    Float:autoBazarZAngle,
    autoBazarType,
	Float:autoBazarBuyPosX,
    Float:autoBazarBuyPosY,
    Float:autoBazarBuyPosZ,
    Text3D:autoBazarLabel,
	Text3D:autoBazarText,
	autoBazarObject[4],
	autoBazarArea,
	autoBazarCost,
	autoBazarCarID,
	autoBazarplayerid
}
new autoBazarInfo[MAX_AUTO_BAZAR][autoBazar] =
{
    {-2133.7847,-757.5536,32.0234,88.8255,1},
    {-2133.2046,-760.4934,32.0234,88.8255,1},
    {-2133.4939,-763.5651,32.0234,88.8255,1},
    {-2133.6294,-766.5255,32.0234,88.8255,1},
    {-2133.7976,-769.6598,32.0234,88.8255,1},
    {-2133.4438,-772.4928,32.0234,88.8255,1},
    {-2133.3384,-775.6821,32.0234,88.8255,1},
    {-2133.0896,-778.6199,32.0234,88.8255,1},
    {-2133.5383,-781.6777,32.0234,88.8255,1},
    {-2133.5181,-784.6282,32.0234,88.8255,1},
    {-2133.0618,-787.7657,32.0234,88.8255,1},
    {-2133.6675,-790.4675,32.0234,88.8255,1},
    {-2134.1685,-793.5968,32.0234,88.8255,1},
    {-2134.0239,-796.6945,32.0234,88.8255,1},
    {-2133.9241,-799.5476,32.0234,88.8255,1},
    {-2133.3132,-802.7231,32.0234,88.8255,1},
    {-2133.0254,-815.0574,31.5958,88.8255,1},
    {-2132.6958,-818.0237,31.5993,88.8255,1},
    {-2132.7507,-821.6968,31.5902,88.8255,1},
    {-2132.5005,-825.0496,31.5951,88.8255,1},
    {-2133.5005,-827.8699,31.5961,88.8255,1},
    {-2133.2410,-831.3567,31.5764,88.8255,1},
    {-2132.7981,-834.1809,31.5931,88.8255,1},
    {-2132.7905,-837.5715,31.5955,88.8255,1},
    {-2132.9663,-840.7917,31.5957,88.8255,1},
    {-2134.0847,-843.8647,31.5991,88.8255,1},
    {-2133.9458,-847.4242,31.5995,88.8255,1},
    {-2133.8171,-850.4931,31.5986,88.8255,1},
    {-2133.8945,-853.6144,31.5965,88.8255,1},
	//
	{-2141.0378,-956.4103,31.6296,88.8255,2},
    {-2141.0786,-936.3013,31.6199,88.8255,2},
    {-2141.6599,-916.4990,31.6182,88.8255,2},
    {-2141.4026,-896.4485,31.6288,88.8255,2},
    {-2140.7351,-876.3362,31.6300,88.8255,2},
	//
	{-2149.8672,-757.6962,32.0234,269.5971,1},
    {-2149.7026,-760.7056,32.0234,269.5971,1},
    {-2150.0671,-763.4629,32.0234,269.5971,1},
    {-2150.1787,-766.7797,32.0234,269.5971,1},
    {-2149.8430,-769.5658,32.0234,269.5971,1},
    {-2149.7102,-772.5457,32.0234,269.5971,1},
    {-2150.1123,-775.5920,32.0234,269.5971,1},
    {-2150.0867,-778.6870,32.0234,269.5971,1},
    {-2149.9207,-781.6351,32.0234,269.5971,1},
    {-2150.4460,-784.5776,32.0234,269.5971,1},
    {-2150.0620,-787.5490,32.0234,269.5971,1},
    {-2149.3301,-790.8079,32.0234,269.5971,1},
    {-2149.0452,-793.5135,32.0234,269.5971,1},
    {-2149.4521,-796.5894,32.0234,269.5971,1},
    {-2149.1191,-799.6165,32.0234,269.5971,1},
    {-2148.6055,-802.5846,32.0234,269.5971,1},
    {-2148.5591,-805.8231,32.0234,269.5971,1},
    {-2148.9773,-808.6389,32.0234,269.5971,1},
    {-2148.9690,-811.6345,32.0234,269.5971,1},
    {-2148.9536,-814.8036,32.0234,269.5971,1},
    {-2149.1687,-818.1646,32.0234,269.5971,1},
    {-2148.6953,-821.4638,32.0234,269.5971,1},
    {-2148.1729,-824.8022,32.0234,269.5971,1},
    {-2148.3762,-828.0490,32.0234,269.5971,1},
    {-2148.8687,-831.1489,32.0234,269.5971,1},
    {-2148.8994,-834.4568,32.0234,269.5971,1},
    {-2148.9795,-837.8000,32.0234,269.5971,1},
    {-2149.3828,-841.1108,32.0234,269.5971,1},
    {-2148.8235,-844.0851,32.0234,269.5971,1},
    {-2148.8108,-847.5101,32.0234,269.5971,1},
    {-2148.9412,-850.5940,32.0234,269.5971,1},
    {-2149.1848,-853.8034,32.0234,269.5971,1},
	//
    {-2125.5747,-757.4848,31.5940,269.5971,1},
    {-2125.6846,-760.1937,31.5950,269.5971,1},
    {-2124.6802,-763.2191,31.5962,269.5971,1},
    {-2124.7546,-766.5494,31.5977,269.5971,1},
    {-2125.0969,-769.7847,31.5962,269.5971,1},
    {-2124.9866,-772.8482,31.5991,269.5971,1},
    {-2124.4126,-775.4781,31.5949,269.5971,1},
    {-2124.3528,-778.7167,31.5971,269.5971,1},
    {-2124.7014,-781.6792,31.5983,269.5971,1},
    {-2125.0100,-784.6066,31.5977,269.5971,1},
    {-2124.3083,-787.3878,31.5947,269.5971,1},
    {-2124.5654,-790.5499,31.5930,269.5971,1},
    {-2125.3350,-793.4932,31.5978,269.5971,1},
    {-2124.6309,-796.6444,31.5975,269.5971,1},
    {-2124.8667,-799.8256,31.5988,269.5971,1},
    {-2124.6003,-802.5762,31.5983,269.5971,1},
	{-2125.8113,-815.0848,31.5946,269.5971,1},
    {-2125.0237,-817.9536,31.5991,269.5971,1},
    {-2124.2620,-821.3064,31.5990,269.5971,1},
    {-2124.3130,-824.7056,31.5983,269.5971,1},
    {-2124.7581,-827.9227,31.5993,269.5971,1},
    {-2124.6248,-831.1382,31.5978,269.5971,1},
    {-2123.8840,-834.4582,31.5867,269.5971,1},
    {-2125.5986,-837.7907,31.5971,269.5971,1},
    {-2124.4814,-840.9609,31.5986,269.5971,1},
    {-2123.9492,-844.0683,31.5961,269.5971,1},
    {-2124.2764,-847.1362,31.5978,269.5971,1},
    {-2124.5750,-850.5481,31.5980,269.5971,1},
    {-2124.9832,-853.7025,31.5993,269.5971,1}
};

new Float:Table_Bazar_X[95] = 
{
	-757.599365,
	-760.620300,
	-763.600646,
	-766.598815,
	-769.588745,
	-772.548889,
	-775.609985,
	-778.617309,
	-781.629211,
	-784.620361,
	-787.619018,
	-790.600280,
	-793.648986,
	-796.659606,
	-799.659790,
	-802.648132,
	-814.901550,
	-818.130249,
	-821.350280,
	-824.599182,
	-827.828857,
	-831.069396,
	-834.319213,
	-837.569030,
	-840.827819,
	-844.108764,
	-847.269775,
	-850.569335,
	-853.769042,
	-1.0,
	-1.0,
	-1.0,
	-1.0,
	-1.0,
	-757.599365,
	-760.620300,
	-763.600646,
	-766.598815,
	-769.588745,
	-772.548889,
	-775.609985,
	-778.617309,
	-781.629211,
	-784.620361,
	-787.619018,
	-790.600280,
	-793.648986,
	-796.659606,
	-799.659790,
	-802.648132,
	-805.729125,
	-808.728027,
	-811.730163,
	-814.880371,
	-818.139831,
	-821.319580,
	-824.640625,
	-827.849365,
	-831.159362,
	-834.349731,
	-837.649963,
	-840.889892,
	-844.115417,
	-847.349487,
	-850.618713,
	-853.879760,
	-757.599365,
	-760.620300,
	-763.600646,
	-766.598815,
	-769.588745,
	-772.548889,
	-775.609985,
	-778.617309,
	-781.629211,
	-784.620361,
	-787.619018,
	-790.600280,
	-793.648986,
	-796.659606,
	-799.659790,
	-802.648132,
	-814.901550,
	-818.130249,
	-821.350280,
	-824.599182,
	-827.828857,
	-831.069396,
	-834.319213,
	-837.569030,
	-840.827819,
	-844.108764,
	-847.269775,
	-850.569335,
	-853.769042
};

//
enum pInfo
{
	pID, //Id игрока в базе

	pRegistrationPass[33], // пароль игрока при регистрации
	pReferalNickName[24], // ник реферала для получения ид
	pReferalID, // ид(account) реферала

	pOldRepl, // старт ломки от наркозависимости
	pAllRepl, // наркозависимость

	pBeg[5], // данные об /beg

	pWanted, // розыск игрока
	pOldWanted, // розыск при покупке адвоката

	pMoney, // вирты игрока
	pBank, // вирты на банке игрока
	pDepositInfo[3], // депозит игрока (0 - сумма, 1 - ласт пополнение, 2 - ласт снятие)
	pCredit, // кредит игрока банку

	pLevel, // уровень игрока
	pExp, // ехп игрока
	pSex, // пол игрока
	pRace, // тип кожи игрока

	pOldSkin, // олд скин игрока
	pSkin[2], // скин игрока

	pVIP[2], // 0 = uId вип игрока | 1 - level VIP
	pAddVIP, // аддвип игрока | 2000000000 - бесконечная
	pVipName[32], // тэг игрока в вип чате
	pVIPMenu[2], 

	pAdmin, // уровень админ-прав игрока
	pAdmRep, // админ репутация
	pAWarns, // админ варны

	Float:pArmour, // бронежилет игрока
	Float:pHealth, // хп игрока
	Float:pShield, // щит игрока (если мент)

	pHouseKey, // ид дома игрока
	pHouseOpen, // ид дома для /house
	pTrailer, // трейлер (если нет то -1)
	pTrailerKey, // ид трейлера игрока

	pInvPage, // страница инвентаря игрока (temp)
	pColorInv, // цвет инвентаря (temp)
	pInvColors, // ид цвета инвентаря
	pInvCell, // ячейки инвентаря доступные игрока
	pSelectTD, // цвет тексдрава (selectplayertd)

	pCarSkill, // карскилл (0 - 100)
	pBankPass, // пароль от банк. карты игрока

	pWarns, // варны игрока
	pFWarns, // орг варны игрока

	pMember[2], // ид организации игрока ( 0 - id org / 1 - leader )
	pRank, // ранк в органиации игрока
	pTag[50], // тэг игрока в организации

	pVirMoney, // az coins игрока
	pRoubles, // az rubles игрока

	pSkillLevel, // скилл навыков боя
	pDemorgan, // деморган (время)

	pCars, // кол-во машин игрока
	pCarsLoad, // кол-во загруженных каров

	pPackets, // материалы (temp)
	pD_Packets, // семена нар-ты

	pMuteTime, // время мута
	pRMuteTime, // время орг мута
	pFMuteTime, // время фам мута

	pHeal, // находения игрока на лечении (bool)
	pHealTime, // время нахождения на лечении (temp)

	pStyleFight, // выбраный стиль борьбы
	pSkillFight[4], // скилы файтинга

	pMaskON, // есть ли у игрока маска (temp)
	pDCTime, // выбор спавна игрока (temp)

	pGunSkill[9], // скилы ганов

	pBL, // черный список игрока
	pZKP, // законка игрока

	pRepPack, // набор для починики (airdrop + temp)

	pPrison, // тср
	pHospCity, // ид больницы (лс, лв, сф)

	pBomb, // бомба (temp)
  	pHungryShow, // показ полоски голода (bool)

	pPhoneInfo[4], // информация о телефоне игрока (0 - номер, 1 - статус, 2 - баланс, 3 - обои[launcher])

	pAmmos[13], // патроны игрока
	pGuns[13], // оружие игрока
	pWeaponRouns[13], // максимум патронов для оружия игрока

	pMerrit[MAX_PLAYER_NAME], // супруг(а) игрока
 	pSendName[MAX_PLAYER_NAME], // игрок в телефоне (смс, пополнения балика)

 	pCalling, // разгаваривает ли игрок (temp)
 	pONPhoneTalk, // телефон в руке (temp)

	pKlogin, // авторизация в банке (temp)

	pLastGun, // оружие игрока (temp)
	pLastAmmo, // патроны игрока (temp)

	pTimeToLastWarn, // время до снятия ласт варна

	pObjikt,
	pHSpectr,
	pScutes,
	pMScutes,

	pVID, // тип оплаты в 24/7 (temp)
	pType, // выбранный товар 24/7

	pHospital, // игрок на лечении (bool)

	pVipTime, // время вип статуса
	pBuildType, // концертный зал
	pZall, // ид зала

	pTir, // игрок тир (bool)
	pTirUp, // мешень +1 в тире (temp)

	pPcix, // кол-во раз был  в деморгане

	pLastIP[16], // последний ип игрока при входе (temp)
	pGoogle[32], // гугл аунтификатор
	pEmailAuth, // вход по почте (bool)
	pVkontakte, // id vkontakte

	pEventTime, // 
	pEvent, // 
	pFrom,
	plveh, // uid временого авто

	pWalkingInfo[2], // информация о ходьбе игрока (0 - тип, 1 - очки)
	pOpisanie[80], // описание игрока

	Float:pPremiumPos[3], // сохранненые позиции игрока /setspawn (premium vip)
	Float:pLastGameExit[3], // позиции игрока при выходе (add forever vip)

	LicensesData[12], // массив с данными об лицензиях

	pPlayedTime, // отыгранное время на сервере (temp)
	pDopInvCost[180], // что то с лавками (temp)

	pLastTimePutAks, // vipmenu
	OpenGunMenu, // gunMenu (bool)
	pClicked, // clicked
	pContractTime, // ferma skill

	pFarmOwner, // uid личной фермы ( -1 - нет )

	pCustomInterface[9], // interface info

	pSecurityID, // id tg / vk
	pSecurityType, // type security [ 0 - tg / 1 - vk ]
	pSecurityReward, // получал ли игрок награду за привязку

	pScreenBrowserInit,
	pSkladID[2],
	pCustomDance[29],
	pBodyguardFavoriteAnimCount[9],
	
    pRainbowColor,
	pRainbowBuyed,

	pHotKeyInfo[sizeof(HotKey_data)],
	pChatRoom[sizeof(ChatRoom_data)],

	pBannerInfo[3],
	pBannerCustomText[13]
}
new PI[MAX_PLAYERS][pInfo];

/*Подробная настройка Улучшений*/
enum improvements_data
{
	idSchumacher,
	imFreeloader,
	idBusinessman,
	idTablet,
	idCarSkill,
	idMoreHouses,
	idNoTaxes,
	idSevenBusinesses,
	idInstallment,
	idStorageRoom,
	idTwoFarm,
	idCallTwoBodyguard,
}

/*Подробная настройка Улучшений в телефоне*/
enum phoneimprovements_data
{
	pdAnnouncements,
	pdWalkieTalkie,
	pdDepartment,
	pdAdminAction,
	pdReportsDeath,
	pdVIPChat,
	pdFamilyChat,
	pdSpawnCarMessage
}

/*Подробная настройка /settings*/
enum setting_data
{
	sdCaseDisplay,
	sdAccessoryFire,
	sdCustomAura,
	sdAutoUseArmour,
	sdInvisibleMask,
	sdActionTrade,
	sdShowDocuments,
	sdShowPlayerDesc,
	sdShowPlayerFamily,
	sdShowAddVip,
	sdShowWriteStatus,
	sdShowRegisterNick,
	sdShowName,
	sdDamageInformer,
	sdHitInformer,
	sdShowPremiumVIPIcon,
	sdUseFishingRod,
	sdPlaySoundInt,
	sdPlaySoundGPS,
	sdPlaySoundAuth,
	sdPlaySoundDrag,
	sdDiscordPosition,
	sdMarker,
	sdLanguage
}

new
	PhoneImprovementsData[MAX_PLAYERS][phoneimprovements_data] = {{0, 0, 0, 0, 0, 0, 0, 0}, ...},
	ImprovementsData[MAX_PLAYERS][improvements_data] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, ...},
	SettingData[MAX_PLAYERS][setting_data] = {{0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 100, 0}, ...};

#define SetPhoneImprovementsData(%0,%1,%2) PhoneImprovementsData[%0][%1] = %2, UpdatePlayerDataStr(%0, "PhoneData", Int_PackMassive(0, PhoneImprovementsData[%0]))
#define SetImprovementsData(%0,%1,%2) ImprovementsData[%0][%1] = %2, UpdatePlayerDataStr(%0, "ImproventData", Int_PackMassive(0, ImprovementsData[%0]))
#define SetSettingData(%0,%1,%2) SettingData[%0][%1] = %2, UpdatePlayerDataStr(%0, "SettingsData", Int_PackMassive(0, SettingData[%0]))

new
	Inventory[MAX_PLAYERS][8][InventoryMaxSlot],
	InventoryNumber[MAX_PLAYERS][3][InventoryMaxSlot][10],
	/*
		Inventory[playerid][0] = ид премета;
		Inventory[playerid][1] = количество;
		Inventory[playerid][2] = цвет;
		Inventory[playerid][3] = идентфикатор;
		Inventory[playerid][4] = заточка;
		Inventory[playerid][5] = прочность;
		Inventory[playerid][6] = окончание;
		Inventory[playerid][7] = овнер предмета;

		InventoryNumber[playerid][0] = номер;
		InventoryNumber[playerid][1] = регион;
		InventoryNumber[playerid][2] = страна (тип номера);
	*/
	PickInvent[MAX_PLAYERS],
	PickInventSlot[MAX_PLAYERS],

	PlayerText:InvPageTD[MAX_PLAYERS][5] = {{PlayerText:-1, ...}, ...},
	PlayerText:InvTextDraws[MAX_PLAYERS][35] = {{PlayerText:-1, ...}, ...},

	PlayerText:Kletka[MAX_PLAYERS][36] = {{PlayerText:-1, ...}, ...},
	PlayerText:KletkaText[MAX_PLAYERS][72] = {{PlayerText:-1, ...}, ...},
	PlayerText:KletkaLevel[MAX_PLAYERS][36] = {{PlayerText:-1, ...}, ...},

	PlayerText:InvColorSlot[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},
	PlayerText:InvLevelSlot[MAX_PLAYERS][16] = {{PlayerText:-1, ...}, ...},
	PlayerText:InvItemSlot[MAX_PLAYERS][8] = {{PlayerText:-1, ...}, ...},

	PlayerText:InventMenuTD[MAX_PLAYERS][18] = {{PlayerText:-1, ...}, ...},
	PlayerText:InvBorderTD[MAX_PLAYERS][9] = {{PlayerText:-1, ...}, ...},
	PlayerText:EnchantWorkTD[MAX_PLAYERS][30] = {{PlayerText:-1, ...}, ...},
	PlayerText:ColorsChangeTD[MAX_PLAYERS][36] = {{PlayerText:-1, ...}, ...},
	PlayerText:ShopTD[MAX_PLAYERS][10] = {{PlayerText:-1, ...}, ...},
	PlayerText:OtherKletka[MAX_PLAYERS][30] = {{PlayerText:-1, ...}, ...},
	PlayerText:OtherKletkaText[MAX_PLAYERS][60] = {{PlayerText:-1, ...}, ...},
	PlayerText:OtherKletkaLevel[MAX_PLAYERS][30] = {{PlayerText:-1, ...}, ...},
	PlayerText:OtherInvPageTD[MAX_PLAYERS][6] = {{PlayerText:-1, ...}, ...},

	PlayerText:CarInvSlot[MAX_PLAYERS][20] = {{PlayerText:-1, ...}, ...},
	PlayerText:CarInvText[MAX_PLAYERS][23] = {{PlayerText:-1, ...}, ...},
	PlayerText:CarInvLevel[MAX_PLAYERS][23] = {{PlayerText:-1, ...}, ...},
	PlayerText:CarInvTextDraws[MAX_PLAYERS][28] = {{PlayerText:-1, ...}, ...},
	
	PlayerText:BodyguardDecorationTD[MAX_PLAYERS][4][3],
	PlayerText:BodyguardMenuButtons[MAX_PLAYERS][4][2],
	PlayerText:BodyguardInventoryButtons[MAX_PLAYERS][4][2],
	PlayerText:BodyguardWeaponTextDraws[MAX_PLAYERS][4][2],
	PlayerText:BodyguardInventorySlots[MAX_PLAYERS][4][4],
	PlayerText:BodyguardSkinsTextDraws[MAX_PLAYERS][4][2],
	PlayerText:BodyguardNameTextDraws[MAX_PLAYERS][4],
	PlayerText:BodyguardRarityTextDraws[MAX_PLAYERS][4],
	PlayerText:BodyguardLevelTextDraws[MAX_PLAYERS][4][2],
	PlayerText:BodyguardFeatureTextDraws[MAX_PLAYERS][4][3][2],
	PlayerText:BodyguardSpawnedTextDraws[MAX_PLAYERS][4][3],
	PlayerText:BodyguardBackGround[MAX_PLAYERS][4],
	PlayerText:BodyguardInventoryCells[MAX_PLAYERS][4][12],

		bool:bodyguardTDOpen[MAX_PLAYERS char],
		bool:bodyguardInventoryOpen[MAX_PLAYERS char],
		bool:tradeopen[MAX_PLAYERS char],
		bool:shopopen[MAX_PLAYERS char],
		bool:InventoryOpen[MAX_PLAYERS char],
		bool:EnchantWork[MAX_PLAYERS char],
		bool:ChangeColor[MAX_PLAYERS char],
		bool:ChangeColorStart[MAX_PLAYERS char],
		bool:FamilyOpen[MAX_PLAYERS char],
		FamilyOpenID[MAX_PLAYERS],
		EnchantWorkItem[MAX_PLAYERS][2],
		ChangeColorItem[MAX_PLAYERS][3],
		ChangeColorTimer[MAX_PLAYERS],
		EnchantWorkProgress[MAX_PLAYERS],
		EnchantTimer[MAX_PLAYERS],
		InventoryPage[MAX_PLAYERS];

enum // Типы инвентарей
{
	E_INVENTORY_TYPE_NONE, // НЕ ПОКАЗАН НЕ ОДИН ТИП ИНВЕНТАРЯ
	E_INVENTORY_TYPE_PLAYER, // ОСНОВНОЙ ТИП инвентаря
	E_INVENTORY_TYPE_TRADE, // ТИП ИНВЕНТАРЯ ПОД ТРЕЙД
	E_INVENTORY_TYPE_ENCHANT, // ТИП ИНВЕНТАРЯ ЗАЧЕРОВАЛЬНЯ
	E_INVENTORY_TYPE_ENCHANT_2, // ТИП ИНВЕНТАРЯ ЗАЧЕРОВАЛЬНЯ РЕМОНТ
	E_INVENTORY_TYPE_SHOP, // ТИП ИНВЕНТАРЯ МАГАЗИНЫ
	E_INVENTORY_TYPE_OTHER_INV, // БАГАЖНИК ХУЯЖНИК И ТД
	E_INVENTORY_TYPE_COLOR, // ТИП ИНВЕНТАРЯ ЗАЧЕРОВАЛЬНЯ ЦВЕТ
	E_INVENTORY_TYPE_ACTION
};

//
enum e_ADMIN_INFO
{
	admID,
    admGoto,
	admGethere,
	admSpectate,
	admInfoNewPlayer,
	admKillList,
	admIP,
	Float:admPos[3],
	admMember,
	admMemberRank,
	admWorld,
	admInterior,
	admFullDostup,
	admPassword[17],
	admTag[64],
	admTagColor[12],
	admNickNameTag
}
new AdminInfo[MAX_PLAYERS][e_ADMIN_INFO];
new gunmute[MAX_PLAYERS];

// LombardData
enum lombard_enum_data
{
	ld_bizId,
	ld_commission,
	ld_balance,
	
	ld_ItemId[180],
	ld_ItemCount[180],
	ld_ItemLevel[180],
	ld_ItemPercent[180],
	ld_ItemCost[180],
	ld_ItemCommision[180],
	ld_ItemPutTime[180]
};
new LombardData[2][lombard_enum_data], TOTAL_LOMBARD_LOADED = 0;

stock UpdatePlayerGun(playerid)
{	
	for(new i; i < 13; i++)
	{
		if(!PI[playerid][pAmmos][i])
		{
			PI[playerid][pGuns][i] = 0;
			continue;
		}
		
		ACFreeze(playerid, 15, 1);
		
		GivePlayerWeapon(playerid, PI[playerid][pGuns][i], PI[playerid][pAmmos][i]);	
	}
	
	return 1;
}

stock GetPlayerAmmoEx(playerid)
	return pTemp[playerid][pAmmos];

stock GetWeaponSlotEx(weaponid)
{
	switch(weaponid)
	{
		case 88: return 1;
		case 71,72,73,74,75,76,87,89: return 2;
		case 80,86: return 3;
		case 77,78,81,83,84: return 4;
		case 79,82,85: return 5;
		case 90,91: return 8;
		default: return GetWeaponSlot(weaponid);
	}
	return -1;
}

stock _GiveGun(playerid, weaponid, ammo)
{
	new slot = GetWeaponSlotEx(weaponid);
	if(slot == 0xFFFF) return 0;
	gunmute[playerid] = Global_Time+3;

	PI[playerid][pAmmos][slot] += ammo;
	PI[playerid][pGuns][slot] = weaponid;
	
	ACFreeze(playerid, 15, 1);
	
	GivePlayerWeapon(playerid, weaponid, ammo);
	
 	GameTextForPlayer(playerid, !"New weapon", 0, 1);
	
	if(!PI[playerid][pAmmos][slot]) PI[playerid][pGuns][slot]=0;

	//if(GetPlayerLauncher(playerid))
	//{
	//	new BitStream:bs = BS_New();
//
	//	BS_WriteValue(bs, 
	//		PR_UINT8, 220, 
	//		PR_UINT8, 157, 
	//		PR_UINT32, weaponid, 
	//		PR_UINT8, ammo,
	//		PR_UINT32, PI[playerid][pWeaponRouns][slot]);
//
	//	PR_SendPacketEx(bs, playerid), BS_Delete(bs);
	//}
	
	return 1;
}

stock _ResetGun(playerid)
{
    gunmute[playerid] = Global_Time + 3;
	
	ACFreeze(playerid, 15, 1);
	
    ResetPlayerWeapons(playerid);
	
	for(new x; x < 13; x ++)
	{
		PI[playerid][pAmmos][x] =
		PI[playerid][pGuns][x] = 0;
	}
	PI[playerid][pLastGun]=
	PI[playerid][pLastAmmo]= 0;
	return 1;
}

enum tpInfo
{
	tpName[50],
	Float:tpEnterPos_X,
	Float:tpEnterPos_Y,
	Float:tpEnterPos_Z,
	tpEnterWorld,
	tpEnterInt,
	Float:tpExitPos_X,
	Float:tpExitPos_Y,
	Float:tpExitPos_Z,
	Float:tpExitPos_A,
	tpExitInt,
	tpExitWorld
}

new TeleportInfo[][tpInfo] =
{
    {"Мэрия",1495.1898,-1279.9283,14.5749, 0, 0, 1498.6855, 1337.0830, 10.9790, 270.0, 220, 1},
	{"Выход на улицу", 1495.9725, 1337.0320, 10.9785, 1, 220, 1495.1967, -1283.5261,14.5414,184.2417, 0, 0},
	//
	{"FBI",-2456.1079,503.9311,30.0781, 0, 0, -2525.3167,-634.8485,1327.9960,1.3493, 2, 0},
	{"Выход на улицу",-2525.1655,-637.4876,1327.9960, 0, 2, -2454.1189,503.8209,30.0792,273.8015, 0, 0},
	//
	{"Полицейский участок LS",1554.866943, -1675.680297, 16.195312, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 2},
	{"Выход на улицу",-450.6910,2216.4705,1601.0859, 2, 11, 1552.4646,-1675.4471,16.1953, 90.0, 0, 0},
	{"Выход на улицу",-450.7023,2209.4355,1601.0859, 2, 11, 1552.4646,-1675.4471,16.1953, 90.0, 0, 0},
	{"Полицейский участок LS",1568.5947,-1689.9709,6.2188, 0, 0, -451.3889,2175.6819,1601.0908, 90.00, 11, 2},
	{"Выход в гараж", -448.1903, 2175.7390, 1601.0908, 2, 11, 1568.4929,-1692.5367,5.8906, 180.0, 0, 0},
	//
	{"Полицейский участок RC",627.3923,-571.7623,17.9145, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 3},
	{"Выход на улицу",-450.6910,2216.4705,1601.0859, 3, 11, 631.0835,-571.6002,16.3359, 270.0, 0, 0},
	{"Выход на улицу",-450.7023,2209.4355,1601.0859, 3, 11, 631.0835,-571.6002,16.3359, 270.0, 0, 0},
	//
	{"Тюрьма Сан Фиерро",-1606.3378,672.0713,-4.9063, 0, 0, 325.8035,94.0766,1001.0410,268.4566, 6, 13},
	{"Выход на улицу",323.9006,94.2639,1001.0410, 13, 6, -1606.3887,675.7780,-5.2422,359.2028, 0, 0},
    
	{"Полицейский участок SF",-1605.5493,710.2738,13.8672, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 4},
	{"Выход на улицу",-450.6910,2216.4705,1601.0859, 4, 11, -1606.1509,713.7501,13.2903,359.7803, 0, 0},
	{"Выход на улицу",-450.7023,2209.4355,1601.0859, 4, 11, -1606.1509,713.7501,13.2903,359.7803, 0, 0},
	{"Полицейский участок SF",-1594.2084,716.2449,-4.9063, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 4},
	{"Выход в гараж", -448.1903, 2175.7390, 1601.0908, 4, 11, -1592.1372,715.8721,-5.2422,268.9620, 0, 0},
	
	{"Полицейский участок LV",2287.0254,2432.3618,10.8203, 0, 0, -454.7704,2214.1042,1601.0859,90.0, 11, 5},
	{"Выход на улицу",-450.6910,2216.4705,1601.0859, 5, 11, 2287.0684,2428.8718,10.8203,179.2759, 0, 0},
	{"Выход на улицу",-450.7023,2209.4355,1601.0859, 5, 11, 2287.0684,2428.8718,10.8203,179.2759, 0, 0},
	{"Выход в гараж", -448.1903, 2175.7390, 1601.0908, 5, 11, 2293.2761,2451.4275,10.8203,87.4205, 0, 0},
	{"Полицейский участок LV",2297.1162,2451.5430,10.8203, 0, 0, -451.3889,2175.6819,1601.0908, 90.00, 11, 5},
	//
    {"Церковь", 2491.4995,918.3869,11.0234,0,0,2351.4946,-1958.6272,1601.0859,269.7597,0,0},
	{"Лас Вентурас", 2349.7522,-1958.6034,1601.0859,0,0,2489.3921,918.2584,11.0234,93.7449,0,0},
	{"Банковское отделение города Las Venturas",2375.5674,2306.3022,8.1406, 0, 0, 487.3989,1307.4255,774.4839,0.6282, 1, 2},
	{"Выход на улицу",487.5179,1304.6077,774.4839,2,1, 2375.3784,2310.3059,8.1406,0.8172, 0, 0},
	//
	{"Sport Club LS",2229.631835, -1721.709350, 13.565642, 0, 0, 773.9093,-76.9094,1000.6545,2.5748, 7, 0},
	{"Los Santos",773.8964,-78.8464,1000.6628, 0, 7, 2228.418701,-1722.766357,13.554397, 137.274353, 0, 0},
    {"Sport Club LV",2092.6499,2493.1968,14.8390, 0, 0, 773.9093,-76.9094,1000.6545,2.5748, 7, 1},
	{"Las Venturas",773.8964,-78.8464,1000.6628, 1, 7, 2095.5288,2493.2524,14.8390,267.9022, 0, 0},
	//

    {"Завод",-86.3057, -299.6985, 2.7646, 0, 0, 2575.9531,-1289.5161,1044.1250,87.2380, 2, 10},
	{"Лос Сантос",2577.3730,-1289.8970,1044.1250, 10, 2, -86.3985, -301.6363, 2.7646, 170.0, 0, 0},
	{"Завод Армия LS",2731.6279,-2417.5535,13.6280, 0, 0, 2575.9531,-1289.5161,1044.1250,87.2380, 2, 11},
	{"Выход",2577.3730,-1289.8970,1044.1250, 11, 2, 2731.6812,-2416.2803,13.6277,0.7204, 0, 0},
    {"Завод Армия LV",237.8633,1872.3997,11.4609, 0, 0, 2575.9531,-1289.5161,1044.1250,87.2380, 2, 12},
	{"Выход",2577.3730,-1289.8970,1044.1250, 12, 2, 233.9474,1872.2189,11.4609,90.4364, 0, 0},
	{"Завод Армия SF",-1510.6035,459.8911,7.1875, 0, 0, 2575.9531,-1289.5161,1044.1250,87.2380, 2, 13},
	{"Выход",2577.3730,-1289.8970,1044.1250, 13, 2, -1510.6216,462.8984,7.1875,357.1089, 0, 0},
    //
	{"Автошкола",-2038.5787, -86.3088, 35.4019, 0, 0, 1546.6743,1269.5719,10.8475, 0.0, 240, 5},
	{"San-Fierro", 1546.6564,1267.0314,10.8475, 5, 240, -2040.3466, -85.1591, 35.4019,50.00, 0, 0},
	{"Задний двор", 1546.7007,1298.1721,10.8475, 5, 240, -2044.7375, -119.6919, 35.3930,90.0, 0, 0},
	{"Автошкола",-2043.2159, -119.6945, 35.3930, 0, 0, 1546.7125,1294.6796,10.8475, 180.0, 240, 5},
    {"АвиаШкола",2427.6968,1662.9028,10.8203, 0, 0, -2027.7902,-105.3816,1035.1719,90.0, 3, 1},
	{"Las Venturas",-2026.8085,-103.6107,1035.1798, 1, 3, 2423.1008,1662.2064,10.8203,89.7324, 0, 0},
    //
    {"Radio студия LS",1653.9441,-1654.7587,22.5156, 0, 0, 1537.5176,1937.8842,1020.9574,357.9794, 158, 1},
	{"Los Santos", 1537.4601,1935.3938,1020.9454, 1, 158, 1653.5554,-1658.9841,22.5156,181.2989, 0, 0},
	
    {"Radio студия SF",-1941.0482,456.0038,35.1719, 0, 0, 1537.5176,1937.8842,1020.9574,357.9794, 158, 3},
	{"San Fierro", 1537.4601,1935.3938,1020.9454, 3, 158, -1941.4008,459.7771,35.1719,1.2511, 0, 0},
	
	{"Radio студия LV",2637.8018,1185.2871,10.8203, 0, 0, 1537.5176,1937.8842,1020.9574,357.9794, 158, 2},
	{"Las-Venturas", 1537.4601,1935.3938,1020.9454, 2, 158, 2637.8726,1182.4669,10.8203,179.5183, 0, 0},
    //
	{"La Cosa Nostra",1456.1313,2773.3252,10.8203, 0, 0, -1126.26, 1884.15, 1502.01,0.00, 5, 1},
	{"Las Venturas",-1125.94, 1881.66, 1502.01, 1, 5, 1460.8861,2773.1716,10.8203,269.9729, 0, 0},
	{"Yakuza",-2463.4805,131.7678,35.1719, 0, 0, -1418.83, 2098.87, 1502.02,180.0, 5, 0},
	{"San Fierro",-1418.83, 2100.82, 1502.02, 0, 5, -2460.8835,134.6681,35.1719,318.6300, 0, 0},
	{"Русская Мафия",937.0781,1731.0668,8.8516, 0, 0, -1423.74, 1723.25, 1502.00,270.0, 3, 0},
	{"Las Venturas",-1426.71, 1723.33, 1502.00, 0, 3, 940.1907,1731.1997,8.8516,271.1088, 0, 0},
    {"Warlock MC", -2191.5746, -2348.6829, 30.6186, 0, 0, 800.2677, 2518.0256, 1501.9982, 90.0, 3, 1},
	{"Выход на улицу", 801.6673, 2517.9797, 1501.9982, 1, 3, -2189.8608,-2350.1213,30.6250,230.0000, 0, 0},
    //
    {"Varrios Los Aztecas",2524.1243,-1998.7643,13.7826, 0, 0, -719.47, 2235.79, 1500.97,0.000, 7, 4},
	{"Выход на улицу",-719.51, 2233.60, 1500.97, 4, 7, 2521.5767,-2001.4885,13.5469,137.3131, 0, 0},
	{"Los Santos Vagos",2795.966552, -1619.309692, 10.921875, 0, 0, -404.95, 2416.19, 1500.97,90.0, 7, 2},
	{"Выход на улицу",-402.28, 2416.12, 1500.97, 2, 7, 2793.590820,-1618.637817,10.921875, 79.540718, 0, 0},
	{"Grove Street",2495.311035, -1690.930175, 14.765625, 0, 0, -560.5607, 2414.4805, 1500.9701,90.000, 7, 1},
	{"Выход на улицу",-558.6435, 2414.4875, 1500.9701, 1, 7, 2495.2034,-1689.1195,14.2319, 0.9635, 0, 0},
	{"The Rifa",2185.7822, -1815.2261, 13.5469, 0, 0, -561.1273, 2259.4351, 1500.9692,180.00, 7, 5},
	{"Выход на улицу",-561.1097, 2261.1970, 1500.9692, 5, 7, 2185.8145,-1810.8423, 13.5469, 1.5911, 0, 0},
	{"East Side Ballas",1996.9843,-1108.9388,26.8068, 0, 0, -725.4955, 2402.1990, 1500.9508,0.00, 7, 3},
	{"Выход на улицу",-725.4694, 2400.6169, 1500.9508, 3, 7, 1999.6416,-1108.8407,26.7737,270.0559, 0, 0},
    {"Night Wolfs",2473.1143,-1424.5762,29.0816, 0, 0, -579.2181,127.4654,1501.0900,90.4372, 7, 7},
 	{"Выход на улицу",-577.2973,126.9751,1501.0859, 7, 7, 2473.1699,-1422.2638,28.8397,357.6896, 0, 0},
    //
  	{"Наркопритон",2166.124267, -1671.345947, 15.073492, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 1},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 1, 5, 2167.414550,-1672.636352,15.080650, 223.037063, 0, 0},
	{"Наркопритон",1814.4722,-1995.8588,13.5544, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 2},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 2, 5, 1811.2611,-1996.1890,13.5513,87.3189, 0, 0},
	{"Наркопритон",2286.6912,-2012.8440,13.5447, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 3},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 3, 5, 2285.3196,-2015.5061,13.5434,131.0462, 0, 0},
	{"Наркопритон",2333.4478,-1922.6251,12.2991, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 4},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 4, 5, 2333.2817,-1919.0001,12.9586,359.0316, 0, 0},
	{"Наркопритон",2175.9934,-1503.9364,23.9520, 0, 0, 318.662506,1116.091186,1083.882812, 1.946820, 5, 5},
	{"The Ghetto",318.586029, 1114.793212, 1083.882812, 5, 5, 2176.1218,-1501.6234,23.9621,1.0594, 0, 0},
    //
	{"ЖК Аксиома", 1803.1802, 410.1853, 20.2294, 0, 0, 2788.6782, 738.2451, 1500.1187, 138.3252, 206, 15},
	{"Выход", 2790.6880, 739.5242, 1500.1187, 15, 206, 1802.9182, 407.6309, 20.2294, 175.2988, 0, 0},
	//
	{"Психиатрическая больница", -318.6733, 1048.2344, 20.3403, 0, 0, -809.3956, 2800.9446, 1501.9896, 358.2348, 6, 6},
	{"Крыша", 1499.9198, -1334.7799, 14.0258, 0, 0, 1489.1989,-1327.4569,23.6172,295.4271, 0, 0},
	{"Выход", 1486.5768, -1328.6232, 23.6172, 0, 0, 1502.0079,-1334.2809,14.0059,285.6668, 0, 0},
	{"Банковское отделение города San Fierro", -1703.9647,785.6906,25.7360, 0, 0, 957.6198,2460.6807,1601.9771,133.3242, 1, 2},
	{"Выход", 959.4328,2462.5598,1601.9771, 2, 1, -1705.4897,788.4920,24.8906,12.0529, 0, 0},
	{"Салон ''Сотовая связь''", 561.9577, -1506.6360,14.5488, 0, 0, 1754.342163, -246.678802, 1701.085693, 90.0, 1, 0},
	{"Выход", 1755.4420,-246.6395,1701.0857, 0, 1, 561.9577, -1506.6360,14.5488, 90.0, 0, 0},
	{"",-2071.5891,-2445.5686,30.7183, 0, 0, 2359.8989,2846.0955,1500.9688,88.1161, 1, 1}, // 1 Инта, 0 вирт мир //Салон трейлеров, пикап входа в салон
	{"",2360.0332,2847.5222,1500.9688, 1, 1, -2073.0798,-2444.9373,30.7183,140.0198, 0, 0}, // 1 Инта, 0 вирт мир //Салон трейлеров, пикап выхода из салона
	{"Больница LS", 1172.6415, -1323.3395, 15.4030, 0,0, 1172.3636,-1306.0862,1019.4160,91.0975, 2, 2},
	{"Больница SF", -2668.8684, 640.1640, 14.4531, 0,0, 1172.3636,-1306.0862,1019.4160,91.0975, 2, 3},
	{"Больница LV", 1607.4197, 1815.2408, 10.8203, 0,0, 1172.3636,-1306.0862,1019.4160,91.0975, 2, 4},
	{"Выход", 1538.2891,1046.0059,1033.8420, 2,2,1495.1898,-1279.9283,14.5749, 0.0, 0,0},
	{"Вход", 1791.4739,-1297.0667,13.4334, 0,0, 1791.4902,-1298.9351,13.5180,184.3282, 0,0},
	{"Выход", 1785.2805, -1297.9734, 13.4862, 0,0, 1785.4012,-1295.2101,13.4513,0.0, 0,0},
	{"Депо электропоезда", 1742.9917,-1943.5721,13.5698, 0,0, -2099.2454,513.7471,1487.6927,180.0000, 1,0}, // w,i , i, w
	{"Выход", -2099.3435,516.3708,1487.6927, 0, 1, 1743.0687,-1946.5758,13.5588,180.0000, 0,0},
	
	{"Лотерейный магазин \'Победа\'", 1411.1970, -1700.0333, 13.5395, 0,0, 831.9501, 7.1396, 1004.1797, 87.0, 3,3},
	{"Выход", 834.6684, 7.4453, 1004.1870, 3,3, 1414.9802, -1701.6910, 13.5395, 240.0, 0,0},
	
	{"ЖК Авантаж", 2461.4622, 2245.1499, 10.8203, 0, 0, 1484.8649,1528.8020,1601.0859,158.4146, 207, 10},
	{"Выход", 1486.8573,1530.3585,1601.0859, 10, 207, 2461.4236,2242.4377,10.8203,176.6225, 0, 0},
	
	{"ЖК Ультра", -2050.9949, 450.4646, 35.1719, 0, 0, 1895.8622,740.1544,1500.1459,90.1548, 208, 10},
	{"Выход", 1898.8169, 740.3632, 1500.1459, 10, 208, -2049.5986,453.7315,35.1719,336.0418, 0, 0}
};
new TeleportPickup[sizeof(TeleportInfo)] = {-1, ...};
new TirObj[8];
enum tirInfo
{
	Float:tirPosX,
	Float:tirPosY,
	Float:tirPosZ,
	Float:ftirPosX,
	Float:ftirPosY,
	Float:ftirPosZ
}
new Tir[][tirInfo] =
{
	{289.20,-24.89,1001.5,  289.10000610,-7.7,1000.5},
	{290.79,-24.89,1001.5,  290.60000610,-7.7,1000.5},
	{292.20,-24.89,1001.5,  292.10000610,-7.7,1000.5},
	{293.70,-24.89,1001.5,  293.60000610,-7.7,1000.5},
	{295.29,-24.89,1001.5,  295.10000610,-7.7,1000.5},
	{296.79,-24.89,1001.5,  296.60000610,-7.7,1000.5},
	{298.29,-24.89,1001.5,  298.10000610,-7.7,1000.5},
	{299.79,-24.89,1001.5,  299.60000610,-7.7,1000.5}
};

new HouseRooms[] = { 0, 1, 1, 4, 1, 5, 2, 4, 1, 1, 2, 1, 2, 4 , 2, 3, 3, 5, 2, 2, 1, 2, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5};

/* 	
	{2408.1118, -434.1063, 1502.0000},
	{-1838.9, 1227.97, 1502.01} 
*/

new Float:GHSPos[][3] =
{
	{0.000000, 0.000000, 0.000000},
	{244.182006, 304.898986, 999.148010},
	{267.100006, 305.000000, 999.148010},
	{235.257995, 1187.099975, 1080.260009},
	{300.210998, 312.851013, 999.148010},
	{226.897003, 1114.280029, 1081.000000},
	{744.351989, 1436.760009, 1102.699951},
	{225.671997, 1022.030029, 1084.020019},
	{-42.601600, 1405.920043, 1084.430053},
	{260.757995, 1237.770019, 1084.260009},
	{23.968000, 1340.520019, 1084.380004},
	{446.709991, 506.898010, 1001.419982},
	{386.919006, 1471.699951, 1080.189941},
	{82.98, 1323.15, 1083.13},
	{-68.6603,1351.2046,1080.2109},
	{226.4221,1239.9434,1082.1406},
	{328.0897,1477.6736,1084.4375},
	{446.9292,1397.0680,1084.3047},
	{318.6248,1114.7825,1083.8828},
	{2365.2981,-1135.3936,1050.8750},
	{2308.7720,-1212.9192,1049.0234},
	{2237.4131,-1081.6366,1049.0234},
	{2196.5149,-1204.5540,1049.0234},
	{2270.0549,-1210.6090,1047.5625},
	{-2169.9524, -2135.4763, 1501.1027},
	{-674.9777, -2166.6406, 1501.1388},
	{-407.3475, -2086.0859, 1501.0980},
	{-1036.5283, -2205.2937, 1501.0880},
	{2195.2798, -738.4201, 1502.0010},
	{2180.9004, -567.7491, 1502.0034},
	{2206.6814, -402.8716, 1502.0066},
	{ 1409.4313, -4.8183, 1000.9412 },
	{ 2217.1086, 2078.2092, 100.3735 },
	{ -1562.9635, -253.0311, 1501.0166 },
	{ -1412.7054, -232.5329, 1501.0168 },
	{ 1386.4121, -32.1168, 1000.9520 },
	{ -1322.8059, -464.9141, 1501.0168 }
};
enum nozoneinfo
{
	Float:zEnter_x,
	Float:zEnter_y,
	Float:zEnter_z,
	zDistance,
	zArea
};
new nzone[MAX_ZONE][nozoneinfo] =
{
	{280.1964,   840.0210,    18.1845, 	  150},
	{1421.4620,  -1735.1715,  13.0778,    100},
	{1172.8483,  -1393.1085,  13.0592,    100},
	{1809.0847,  -1891.0630,  13.1014,    100},
	{-2019.9607, -1002.5316,  31.7185,    100},
	{-1958.8065, 225.4428,    32.1599,    100},
	{-1992.9835, 165.4760,    27.2341,    100},
	{-2094.9800, -67.3422,    34.8602,    150},
	{-2140.2649, -782.1013,   32.0234,	  100},
	{-2142.2278, -948.1774,   32.0234,    100},
	{-87.6538,	 1217.4708,	  19.7422, 	  100}
};

enum parkinginfo
{
    Float:pEnter_x,
	Float:pEnter_y,
	Float:pEnter_z,
	Float:pEnter_a,
	pVWorld,
	pVInterior,
    Float:pExit_x,
    Float:pExit_y,
    Float:pExit_z,
    Float:pExit_a,
    Float:pVExit_x,
    Float:pVExit_y,
    Float:pVExit_z,
    Float:pVExit_a,
};
new parking[][parkinginfo] =
{
	{1159.0061, -1412.9017, 13.2993, 92.1731, 1,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1814.3567, -1877.0453, 13.5781, 3.1156, 2,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-78.3442,1180.6338,19.4433,178.3271, 3,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2811.5740,1235.1237,10.4653,88.9500, 5,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2650.6873,1181.1444,10.8203,91.8699, 6,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1790.0857,418.0161,19.9621,86.8489, 7,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1504.7184,-1325.3362,13.7060,271.2840, 8,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1436.8799,-1578.2943,13.2682,1.1519, 9,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1637.1638,-1684.8743,13.2173,93.0377, 10,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1403.2896,-1652.7843,13.1607,271.2161, 11,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1283.7948,-1349.4983,13.1657,3.1795, 12,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1175.3805,-1308.6919,13.6326,269.0903, 13,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{340.4299,-1618.8706,32.7566,179.5325, 14,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{611.8994,-1348.3763,13.4575,279.0285, 15,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{167.3457,-183.4712,1.3028,269.8813, 16,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-1452.4008,457.6721,6.9208,0.1636, 17,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-1991.2229,235.8233,28.6959,91.8888, 18,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2099.6377,-52.8561,35.0399,181.8297, 19,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2079.7205,-54.8950,34.9738,0.5623, 20,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2153.8198,277.4999,35.0464,181.6078, 21,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2443.9368,523.5727,29.9163,181.6118, 22,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-1967.0040,548.9451,34.8768,90.3882, 23,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2565.8049,556.1598,14.1902,269.6837, 24,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2627.1423,627.0738,14.1298,181.6917, 25,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2730.2429,75.1695,4.0616,271.5603, 26,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-1994.6035,-1032.1533,31.8478,359.2426, 27,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1613.7208,1721.5741,10.5646,265.7845, 28,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2201.0083,2411.4814,10.4901,177.4481, 29,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2255.9700,-1135.6167,26.4331,246.4052, 30,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2248.2683,-1726.0171,13.2362,268.7718, 31,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{2773.5608,-1649.4165,11.4144,270.2876, 32,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2123.9248,-2295.5845,30.3705,142.9485, 33,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2443.9199,105.2780,34.8502,258.0834, 34,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1446.2391,2816.8208,10.5487,271.3440, 35,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{946.8265,1660.0414,8.3660,268.2236, 36,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2456.6633,2292.8625,4.7045,1.0456, 37,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1156.6422,-1627.2762,13.6746,0.0072, 38,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1798.8214,-1442.1119,13.4887,1.6389, 39,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{-2093.2893,94.9678,35.3392,90.5946, 40,1, 2420.7029, 2355.3875, 1491.5951, 271.0465,2496.8066,2343.3479,1502.3184,87.2872},
	{1806.8236, -1288.2283, 13.6518, 45.00, 1,2, 1389.0466, -36.2530, 1000.9371,250.000, 1389.0466, -36.2530, 1000.9371, 250.000},
	{267.1080, -1583.2266, 33.1341, 350.00, 2, 2, 1371.9719, -22.8952, 1000.9316, 90.00, 1371.9719, -22.8952, 1000.9316, 90.00}
};

enum e_GARAGE_INTERIORS
{
	Float:e_GARAGE_INTERIOR_X,
	Float:e_GARAGE_INTERIOR_Y,
	Float:e_GARAGE_INTERIOR_Z,
	e_GARAGE_INTERIOR_INT
}

#define MAX_LEVEL_GARAGES   6
static const GaragesInteriors[MAX_LEVEL_GARAGES][e_GARAGE_INTERIORS] = { //Интерьер будет зависить от класса дома [hKlass]
	{2623.8853,1795.6268,1502.0000, 1},//1
	{340.1541,34.9017,829.3619, 1},//2
	{-1277.325928, -279.933807, 1501.000000, 1},//3
	{2570.1963,1750.9730,1501.9946, 1},//3
	{2696.876465, 1658.765991, 1502.083740, 1},//5
	{1862.762451, -2442.002441, 1500.968750, 1}//5
};

enum iInfo
{
	Float:iCam_X,
	Float:iCam_Y,
	Float:iCam_Z,
	Float:iCamAt_X,
	Float:iCamAt_Y,
	Float:iCamAt_Z,
	iInterior,
	iLevel,
	iCost
}

new Float:IntInfo[][iInfo] =
{
	{	0.0000,		0.0000,		0.0000,		0.0000,		0.0000,		0.0000,		0,	0,	0		},
	{	249.6246,	306.6749,	1001.1484,	243.5571,	300.3347,	999.1484,	1,	1,	40000	},
	{	266.9934,	303.4084,	999.1484,	273.9032,	306.8496,	999.1484,	2,	1,	40000	},
	{	237.3471,	1186.9100,	1080.2578,	231.0561,	1204.1001,	1080.2578,	3,	1,	390000	},
	{	311.0790,	311.6574,	1003.3047,	300.4887,	301.3558,	1003.5391,	4,	1,	120000	},
	{	226.4762,	1114.2119,	1080.9939,	241.9857,	1114.0405,	1080.9922,	5,	1,	550000	},
	{	742.7902,	1436.4205,	1102.7031,	762.0859,	1442.8284,	1102.7031,	6,	1,	140000	},
	{	224.1152,	1021.5891,	1084.0173,	243.2221,	1039.6519,	1084.0137,	7,	1,	620000	},
	{	-52.5170,	1412.7664,	1084.4297,	-45.2184,	1403.6163,	1084.4370,	8,	1,	80000	},
	{	259.1778,	1237.3501,	1084.2578,	265.0774,	1250.0245,	1084.2578,	9,	1,	80000	},
	{	18.3519,	1340.2017,	1084.3750,	32.0237,	1345.5005,	1088.8750,	10,	1,	240000	},
	{	443.1728,	506.6413,	1001.4195,	451.4167,	515.1450,	1001.4195,	12,	1,	60000	},
	{	387.1001,	1472.7684,	1080.1875,	383.9466,	1470.7700,	1080.1949,	15,	1,	60000	},
    {	85.73,	    1322.62,	1085.04,	85.59,  	1323.23,	1085.07,    9,  1,  800000	},
    {	-71.72,  	1366.68,	1082.73,	-70.58,  	1366.15,	1082.32,    6,  1,  60000	},
    {	217.61, 	1238.98,	1084.30,	218.12, 	1239.33,	1084.06,    2,  1,  90000	},
    {	330.23, 	1477.15,	1085.04,	329.94, 	1478.36,	1084.91,    15, 1,  110000	},
    {	445.27, 	1397.00,	1086.54,	445.69, 	1398.18,	1086.25,    2,  1,  400000	},
    {	316.37, 	1116.34,	1085.26,	317.39, 	1117.06,	1085.17,    5,  1,  100000	},
    {	2366.97,	-1126.16,	1052.11,	2366.66,	-1126.70,	1052.00,    8,  1,  380000	},
    {	2306.26,	-1206.41,	1051.03,	2306.81,	-1206.70,	1050.84,    6,  1,  190000	},
    {	2236.43,	-1080.86,	1050.34,	2236.60,	-1080.26,	1050.27,    2,  1,  240000	},
    {	2197.01,	-1199.81,	1050.94,	2196.50,	-1200.17,	1050.78,    6,  1,  380000	},
    {	2263.93,	-1206.06,	1051.39,	2263.40,	-1206.37,	1051.25,    10, 1,  380000	},
    {	-2155.3071, -2131.8706, 1503.2584,	-2155.9573, -2131.1160, 1503.0336,  8, 1,  2000000	},
    {	-647.9572,  -2179.6384, 1502.9762,	-648.8239,  -2179.1418, 1502.7513,  6, 1,  2100000	},
    {	-400.7250,  -2086.1755, 1502.5798,	-401.5462,  -2085.6079, 1502.4802,  2, 1,  4000000	},
    {	-1040.0017, -2186.1450, 1502.1348,	-1040.4255, -2187.0496, 1502.0493,  1, 1,  3900000	},
    {	2176.2957,  -738.4600,  1503.3000,	2176.6794,  -739.3814,  1503.1348,  10, 1,  13000000},
    {	2181.1086,  -580.2449,  1504.2460,	2181.9258,  -579.6741,  1503.9709,  10, 1,  13000000},
    {	2202.0627,  -401.4944,  1504.5913,	2201.7144,  -402.4331,  1504.2576,  10, 1,  13000000},
 
	{ 1400.551147, -5.519391, 1002.979126, 1404.440552, -8.237871, 1001.403687, 253, 1, 5000000},
	{ 2230.254883, 2084.683105, 103.128685, 2226.894043, 2081.586426, 101.100266, 252, 1, 5000000},
	{ -1571.150024, -246.940002, 1501.949951, -1571.609985, -247.380005, 1501.880005, 148, 1, 12000000 },
	{ -1400.609985, -235.440002, 1503.209961, -1401.199951, -234.330002, 1502.920044, 198, 1, 15000000 },
	{ 1381.675537, -32.927914, 1003.321228, 1385.244507, -29.554901, 1002.380371, 254, 1, 18000000},
	{ -1322.750000, -471.070007, 1502.819946, -1322.760010, -469.829987, 1502.569946, 189, 1, 200000}
	
};

new Tfarm_CP[70],
	Kfarm_CP[41],
	Zfarm_CP[25],
	Test_CP[41],
	MTest_CP[26],
	FTest_CP[50];

enum arInfo
{
	aRentID,
	aID,
	Float:aPos_X,
	Float:aPos_Y,
	Float:aPos_Z,
	Float:aPos_A,
	aColor_1,
	aColor_2,
	aBizid
};

new ArendInfo[][arInfo] =
{
 	{INVALID_PLAYER_ID, 547, 1392.1981, 385.5167, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 547, 1390.7390, 382.2040, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 546, 1389.3024, 378.8274, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 546, 1387.8916, 375.5937, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 546, 1386.3928, 372.3194, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 547, 1393.5696, 388.9565, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 547, 1394.9910, 392.3134, 19.4100, 246.3684,-1,-1,BIZ_RENT_SF},
	{INVALID_PLAYER_ID, 546, 2475.6345, -1526.8542, 23.6052, 359.0000,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 546, 2478.8823, -1526.9244, 23.6052, 359.0000,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 547, 2481.9150, -1526.8684, 23.6052, 359.0000,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 546, 2484.2478, -1517.7936, 23.6052, 181.9089,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 547, 2487.3140, -1517.7598, 23.6052, 181.9089,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 547, 2490.3770, -1517.8289, 23.6052, 181.9089,-1,-1,BIZ_RENT_LV},
	{INVALID_PLAYER_ID, 540,552.2256,-1263.0308,16.8377,215.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,549.2261,-1265.1127,16.8615,215.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,546.2819,-1267.1350,16.8603,216.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,543.2506,-1269.3328,16.8853,212.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,540.3386,-1271.8612,16.9312,218.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,537.4234,-1274.1729,16.8892,218.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,534.7526,-1276.3138,16.8918,219.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,531.9340,-1278.4873,16.8892,218.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,565.7926,-1283.7555,17.0098,103.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,564.8121,-1279.5139,17.0102,103.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,563.9153,-1275.2931,17.0073,102.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,563.3939,-1271.1617,16.9935,103.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 540,562.5081,-1267.2034,16.9659,103.0,-1,-1,BIZ_RENT_LS},
	{INVALID_PLAYER_ID, 487, 1875.0159, -2270.8831, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 487, 1875.0159, -2286.0461, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 487, 1875.0159, -2302.0259, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 487, 1859.6726, -2292.7288, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 487, 1859.6726, -2277.2041, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1884.0103, -2354.0991, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1884.0103, -2366.1475, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1884.0103, -2378.2358, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1870.8276, -2372.3872, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 469, 1870.8276, -2359.9214, 14.4766, -90.0000, -1,-1,BIZ_AERO_LS},
	{INVALID_PLAYER_ID, 484, 130.5295,-1836.3340,0.2430,89.8457, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.2226,-1887.9935,0.0909,93.2317, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.2712,-1882.1295,0.1079,95.1366, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.3813,-1873.3422,0.0287,92.2677, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.5959,-1867.2753,0.0326,94.8338, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.7223,-1858.2585,0.1352,96.5957, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 484, 135.7435,-1852.0146,0.0225,96.9833, -1,-1,BIZ_RENTLV2},
	{INVALID_PLAYER_ID, 558, 2148.7693, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 558, 2145.5740, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 558, 2139.1221, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 558, 2135.9407, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 541, 2126.3281, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 541, 2119.9055, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 541, 2116.7261, 1398.1857, 10.3921, 180.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 542, 2116.8022, 1409.0896, 10.5221, 360.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 542, 2110.3604, 1409.0831, 10.5221, 360.0000, -1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 542, 2107.2341, 1409.0896, 10.5221, 360.0000,-1,-1,BIZ_RENTLV3},
	{INVALID_PLAYER_ID, 560, 2216.1982, 2034.6406, 10.3637, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 560, 2216.1982, 2038.1283, 10.3637, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 560, 2216.1982, 2041.7065, 10.3637, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 560, 2216.1982, 2045.4866, 10.3637, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 496, 2246.2927, 2046.3232, 10.4237, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 496, 2246.2927, 2042.3247, 10.4237, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 496, 2246.2927, 2038.5048, 10.4237, 270.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 426, 2235.0664, 2038.6821, 10.4637, 90.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 426, 2235.0664, 2042.5248, 10.4637, 90.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 426, 2235.0664, 2050.1907, 10.4637, 90.0000, -1,-1,BIZ_RENTLV4},
	{INVALID_PLAYER_ID, 410, 1731.6844, 1885.4795, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 410, 1731.6948, 1890.8372, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 410, 1731.6909, 1893.6300, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 404, 1731.2958, 1899.5796, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 404, 1731.2533, 1902.0092, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 404, 1731.2714, 1905.6315, 10.3846, 90.5101, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 400, 1741.6327, 1885.7103, 10.7886, 270.0000, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 400, 1741.6398, 1888.6401, 10.7886, 270.0000, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 400, 1741.6577, 1895.1151, 10.7886, 270.0000, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 401, 1741.7596, 1897.8267, 10.5856, 270.0000, -1,-1,BIZ_RENTLV5},
	{INVALID_PLAYER_ID, 400, 2080.5874, 2468.3430, 10.7266, 0.0190, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 400, 2084.7898, 2468.3430, 10.7266, 0.0190, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 400, 2088.9299, 2468.3430, 10.7266, 0.0190, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 401, 2082.2666, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 401, 2078.1626, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 401, 2073.9431, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 401, 2069.8408, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 404, 2057.1904, 2480.2153, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 404, 2053.1138, 2480.2007, 10.7266, 180.0000, -1,-1,BIZ_RENTLV6},
	{INVALID_PLAYER_ID, 422, -30.8412, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID, 422, -34.2425, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID, 422, -37.8182, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID, 527, -44.6972, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID, 527, -48.3838, 1166.7690, 19.3222, 360.0000, -1,-1,BIZ_RENTLV7},
	{INVALID_PLAYER_ID,400, -1989.9163, 275.5569, 35.1662, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,400, -1990.0594, 272.2518, 35.1662, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,400, -1990.3448, 269.0416, 35.1662, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,401, -1990.7004, 263.9048, 34.8462, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,401, -1990.9237, 261.2656, 34.8462, 267.0000 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,404, -1991.3481, 255.2821, 34.8462, 264.0474 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,404, -1991.6816, 252.6617, 34.8462, 264.0474 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,410, -1992.7944, 248.2620, 34.8462, 264.0474 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,410, -1993.0652, 245.8304, 34.8462, 264.0474 ,-1,-1,BIZ_SFRENT1},
    {INVALID_PLAYER_ID,400, -2585.8699, 335.4568, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,400, -2585.8457, 331.9096, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,401, -2585.9548, 328.1809, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,401, -2585.9983, 324.8647, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,404, -2585.9209, 321.3739, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,404, -2585.9912, 317.6576, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,410, -2586.1077, 314.0794, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,410, -2586.0518, 310.8368, 4.9638, 90.0000 ,-1,-1,BIZ_SFRENT2},
    {INVALID_PLAYER_ID,400, -2493.7048, 795.6027, 35.2550, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,400, -2493.6475, 792.7779, 35.2550, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,401, -2493.6985, 790.0810, 35.1350, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,401, -2493.7954, 787.2208, 35.1350, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,404, -2493.5164, 784.3647, 34.7750, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,404, -2493.6309, 781.4155, 34.7750, 270.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,410, -2459.8179, 779.5052, 34.7350, 90.0000 ,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,410, -2459.4915, 786.4857, 34.7350, 90.0000,-1,-1,BIZ_SFRENT3},
    {INVALID_PLAYER_ID,409, -1764.7040, 956.2208, 24.4421, 270.0000 ,-1,-1,BIZ_SFRENT4},
    {INVALID_PLAYER_ID,409, -1752.3950, 956.3077, 24.4421, 270.0000 ,-1,-1,BIZ_SFRENT4},
    {INVALID_PLAYER_ID,409, -1760.8821, 947.5552, 24.4421, 270.0000 ,-1,-1,BIZ_SFRENT4},
    {INVALID_PLAYER_ID,409, -1750.7251, 947.5801, 24.4421, 270.0000 ,-1,-1,BIZ_SFRENT4},
    {INVALID_PLAYER_ID,409, -1740.4351, 955.3890, 24.4421, 258.6977 ,-1,-1,BIZ_SFRENT4},
	{INVALID_PLAYER_ID,415, -2197.2468, 971.6848, 79.7720, 270.0000 ,-1,-1,134},
	{INVALID_PLAYER_ID,429, -2197.2410, 977.7761, 79.6647, 269.9763 ,-1,-1,134},
	{INVALID_PLAYER_ID,411, -2197.2402, 989.8215, 79.7179, 270.0000 ,-1,-1,134},
	{INVALID_PLAYER_ID,451, -2197.2356, 995.7289, 79.7076, 269.9999 ,-1,-1,134},
	{INVALID_PLAYER_ID,506, -2197.2402, 1001.9411, 79.6714, 270.0000 ,-1,-1,147},
	{INVALID_PLAYER_ID,481, 1863.5612, -1398.4520, 12.9585, 261.0214 ,-1,-1,147},
	{INVALID_PLAYER_ID,481, 1863.5105, -1401.0997, 12.9626, 264.6744 ,-1,-1,147},
	{INVALID_PLAYER_ID,481, 1864.3284, -1405.0979, 12.9516, 253.1930 ,-1,-1,147},
	{INVALID_PLAYER_ID,481, 1864.5745, -1408.2422, 12.9564, 255.2842 ,-1,-1,147},
	{INVALID_PLAYER_ID,453, 2966.3306, -2020.8579, 0.3133, 279.6246 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.4080, -2015.0914, 0.2930, 285.7707 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.3630, -2009.5854, 0.2314, 271.8062 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.3481, -2003.7334, -0.8248, 276.4967 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.4287, -1997.7563, -0.6937, 288.3154 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.3748, -1991.5703, -0.5333, 270.0859 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.3374, -1985.8020, -0.9594, 271.3583 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2966.4446, -1980.1864, 0.2038, 280.8868 ,-1,-1,130},
	{INVALID_PLAYER_ID,453, 2967.0342, -1972.9269, 0.0905, 282.4146 ,-1,-1,130}
};

new ARENDCARS, ArendCar[sizeof(ArendInfo)] = INVALID_VEHICLE_ID, ArendKey[MAX_PLAYERS] = INVALID_VEHICLE_ID;

new Float:FishZone[15][3] =
{
	{349.8644,-2052.0598,7.8359},
	{349.9288,-2059.7078,7.8359},
	{349.9258,-2064.8701,7.8359},
	{349.9335,-2067.3757,7.8359},
	{349.9633,-2072.5100,7.8359},
	{354.5819,-2088.6687,7.8359},
	{362.2255,-2088.7966,7.8359},
	{367.2188,-2088.7983,7.8359},
	{369.7726,-2088.7871,7.8359},
	{375.0870,-2088.7959,7.8359},
	{383.4317,-2088.7952,7.8359},
	{391.2613,-2088.7966,7.8359},
	{396.0679,-2088.7976,7.8359},
	{398.6076,-2088.7954,7.8359},
	{403.9636,-2088.7976,7.8359}
};
new FishName[14][22] =
{
	"None",
	"Корешка",
	"Навага",
	"Сельдь",
	"Карп",
	"Окунь",
	"Тунец",
	"Камбала",
	"Кета",
	"Горбуша",
	"Красноперка",
	"Судак",
	"Щука",
	"Лещ"
};
new FishCost[14] =
{
	0, //None
	150, //Корешка
	50, //Навага
	150, //Сельдь
	200, //Карп
	200, //Окунь
	300, //Тунец
	80, //Камбала
	90, //Кета
	80, //Горбуша
	150, //Красноперка
	150, //Судак
	150, //Щука
	90  //Лещ
};
enum psInfo
{
	psSeria,
	psNumber,
	psSex,
	psDate[3],
	psDateBirth[3]
}
new PassInfo[MAX_PLAYERS][psInfo];
enum mcInfo
{
	mcState,
	mcDate[3]
}
new MedCardInfo[MAX_PLAYERS][mcInfo];
new GetPizza[2];
new PorterDownCP;
new HouseNalog[MAX_PLAYERS] = {-1,...};
new HouseNalogState2[MAX_PLAYERS] = {0,...};
new MinerCP[4];
new FerumPickup[6];
new FerumCP[16];
new FerumEndCP;
new BankCP[4];
new IncCP[INC_CPs][2];
new GolodTime[MAX_PLAYERS];
new OtherIcon[MAX_PLAYERS][68];
new PizzCP[Pizza_CPs][2];

new TeamColors[][2] = // 0 - Org | 1 - Fam
{
	{0xFFFFFF80, 0xFF5E5E80},
    {0x0049FF80, 0xFFFFFF80},
    {0x0049FF80, 0xE6507580},
    {0xFFFFFF80, 0xEFA4B780},
    {0x004eff80, 0x905B6980},
    {0xFF7E7E80, 0xD052CE80},
    {0xCCFF0080, 0xFF00FC80},
    {0x99663380, 0x5D395D80},
    {0xFF7E7E80, 0x8E38EA80},
    {0xFF663380, 0x6B21BB80},
    {0xFF800080, 0x2F00FF80},
    {0x00932799, 0x7456F880},
    {0xD1DB1C99, 0x5287F180},
    {0xcc00cc99, 0x1DBAF280},
    {0x00FFE299, 0x308EB080},
    {0x6666FF99, 0x30B06180},
    {0x33669980, 0x20F27180},
    {0x96020280, 0x10713580},
    {0x99336680, 0x47EB2A80},
    {0xBA541D80, 0x9EE99180},
	{0x99663380, 0xC2D95E80},
	{0x298CB780, 0xD1FF0080},
	{0xFF7E7E80, 0x7B902280},
	{0x0049FF80, 0xFFC90080},
	{0xFF800080, 0xE8CA6080},
	{0x7F646480, 0x6B5B1F80},
	{0xFF800080, 0xFF840080},
	{0x99663380, 0xC0431280},
	{0x99663380, 0x5C4C4580},
	{0x00000000, 0x37353480},
	{0x00000000, 0x35120480}

};

new WeaponNames[48][40] =
{
	"Unarmed (Fist)",
	{"Brass Knuckles"},
	{"Golf Club"},
	{"Night Stick"},
	{"Knife"},
	{"Baseball Bat"},
	{"Shovel"},
	{"Pool Cue"},
	{"Katana"},
	{"Chainsaw"},
	{"Purple Dildo"},
	{"Big White Vibrator"},
	{"Medium White Vibrator"},
	{"Small White Vibrator"},
	{"Flowers"},
	{"Cane"},
	{"Grenade"},
	{"Teargas"},
	{"Molotov"},
	{" "},
	{" "},
	{" "},
	{"Pistols"},
	{"Desert Eagle (Silencer)"},
	{"Desert Eagle"},
	{"Shotgun"},
	{"Sawnoff Shotgun"},
	{"Combat Shotgun"},
	{"Micro Uzi (Mac 10)"},
	{"MP5"},
	{"AK47"},
	{"M4"},
	{"Tec9"},
	{"Country Rifle"},
	{"Sniper Rifle"},
	{"Rocket Launcher"},
	{"Auto Rocket Launcher"},
	{"Flamethrower"},
	{"Minigun"},
	{"Satchel Charge"},
	{"Detonator"},
	{"Spray Can"},
	{"Fire Extinguisher"},
	{"Camera"},
	{"Night Vision Goggles"},
	{"Infrared Vision Goggles"},
	{"Parachute"},
	{"Fake Pistol"}
};
enum dInfo
{
    dDialog,
	dQuestion[100],
	dAnswers[150],
	dSuccesQwe
}
new QueInfo[4][dInfo] =
{
	{2,"Максимальная скорость в городе:",		"40 Км/ч\n60 Км/ч\n80 Км/ч\n100 Км/ч",1},
	{2,"Максимальная скорость вне города:		","100 Км/ч\n120 Км/ч\n150 Км/ч\nБез ограничений",1},
	{2,"Разрешена ли парковка на тротуаре?",	"Всегда да\nЕсли админ разрешит\nТолько в экстренных ситуациях\nВсегда нет",2},
	{2,"Что нужно делать при тумане?",		 	"Снизить скорость и включить фары\nЕхать как можно быстрее\nВыйти из авто и идти пешком\nЕхать и материться",0}
};
new QueFInfo[7][dInfo] =
{
    {2,"Можно ли садиться на зданиях?",  "Да\nНет\nВ особых местах\nВ любых местах",2},
    {2,"Разрешено ли буксировать другие транспортные средства?", "Да\nНет\nДа если ваша масса больше его\nБез ограничений",1},
    {2,"Какая дистанция должна быть между двумя летящими вертолётам/самолетами?", "2 метра\n10 метров\nКак можно ближе друг к другу\nНеобходимая для безопасного пролета",3},
    {2,"Полет между зданиями",    "Разрешён\nЗапрещен\nРазрешен при необходимости\nТолько так и надо летать",1},
    {2,"Летать разрешено",    "Везде\nТолько над водоемами\nТолько над сушей\nЗа исключением военных объектов",3},
    {2,"Покидать кабину летательного аппарата разрешено",    "После остановки двигателя\nНа лету\nКогда самолет перевернут\nНеисправен или двигатель остановлен",0},
    {2,"Перед взлетом необходимо проверить", "Стоимость реактивного топлива\nУровень реактивного топлива\nБезопастность взлета\nВсе пассажиры взяли с собой горшки",1}
};
new OrgSalary[MAX_ORGS][14];
new OldOrgSalary[][14] =
{
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //None
	{4500,5000,5500,6000,6500,7000,8000,8500,9000,10000,10500,11000,11500,12000}, //Police LS
	{4050,5000,5500,6000,6050,7000,8000,8500,9000,10000,10500,11000,11050,12000}, //Police LS
	{6500,7000,7500,8000,8500,9000,9500,10000,10500,11000,11500,12000,12050,13000}, //CIA
	{4500,5000,5500,6000,6500,7000,8000,8500,9000,10000,10500,11000,11500,12000}, //S.W.A.T
	{4500,5000,5500,6000,6500,7000,7500,8000,8500,9000,9500,10000,10500,11000}, //Medic
	{6000,7000,8000,8500,9000,9500,10000,10500,11000,11500,12000,12500,13000,13500}, //Meria LS
	{2000,3000,4000,5000,6000,6500,6000,7000,7500,8000,9000,10200,10600,11000}, //Meria SF
	{4500,5000,5500,6000,6500,7000,7500,8000,8500,9000,9500,10000,10500,11000}, //medic sf
	{3800,4000,4200,4300,4500,4700,5000,5300,5600,5900,6100,6400,6700,7000}, //Licensers
	{4900,5100,5500,6100,6500,6900,7300,7600,8000,8400,8800,9200,9600,10000}, //Radio
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Groove
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Vagos
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Ballas
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Coronos
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10}, //Rifa
	{4800,4900,5000,6000,6500,7000,8000,8500,9000,9500,10000,10500,10000,11000}, //Russian Mafia
	{4800,4900,5000,6000,6500,7000,8000,8050,9000,9500,10000,10500,10000,11000}, //Yakuza
	{4800,4900,5000,6000,6500,7000,8000,8500,9000,9500,10000,10500,10000,11000}, //LCN
	{4800,4900,5000,6000,6500,7000,8000,8500,9000,9500,10000,10500,10000,11000}, //Bikers
	{2000,3000,4000,5000,6000,6500,6000,7000,7500,8000,9000,10200,10600,11000}, //army
	{5500,5800,5900,6000,6200,6500,6700,7000,8000,10000,11000,12000,12800,13000}, //bank
	{4500,5000,5500,6000,6500,7000,7500,8000,8500,9000,9500,10000,10500,11000},
	{4500,5000,5500,6000,6500,7000,8000,8500,9000,10000,10500,11000,11500,12000},
	{4900,5100,5500,6100,6500,6900,7300,7600,8000,8400,8800,9200,9600,10000},
	{10,10,10,10,10,10,10,10,10,10,10,10,10,10},
	{4900,5100,5500,6100,6500,6900,7300,7600,8000,8400,8800,9200,9600,10000}, //RadioSF
	{2000,3000,4000,5000,6000,6500,6000,7000,7500,8000,9000,10200,10600,11000},
	{2000,3000,4000,5000,6000,6500,6000,7000,7500,8000,9000,10200,10600,11000} //army
};
new MOrgSkins[][] =
{
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},//None
    {71,266,284,267,267,265,282,282,311,17,295},//Police LS
    {71,266,284,267,267,265,282,282,288,283,283,0},//Police rcpd
    {286,286,286,286,163,163,163,165,165,165,166,166},//FBI
    {71,266,284,267,267,265,282,282,311,17,295,0},//Police SF
    {274,274,276,276,276,275,275,275,275, 70,70,0},//M4C
    {164,164, 164,163, 163,187,187,57,57,147,147,0},//Meria LS
    {287,287,287,179,179,253,253,61,61,255,255,0},//Army лв
    {274,274,274,274,274,275,275,275,275, 70,70,0},//M
    {59,59,59,59, 59, 59, 59, 59,59,240,240,0},//Licensers
    {188,188,188,188,250,250,250,250,250,261,261,0}, //Radio
    {105,105,105,105,106,106,106,107,269,271,270,270,270,270},//Groove Street
    {108,108,108,108,108,108,109,109,109,110,110,110,110,110},//LS Vagos
    {103,103,103,103,103,103,102,102,102,104,104,104,104,104},//Ballas
    {114,114,114,114,116,116,116,116,115,292,292,115,115},//El'Coronos
    {175,175,175,175,174,174,174,174,173,173,273,273,173,173},//SF Rifa
    {112,112,112,112,111,111,111,46,46,125,125,125, 125, 126},//Русская Мафия
    {122,122,122,208,208,123,123,123,186,186,118,118,228,228},//Yakuza
    {124,124,124,98,98,127,127,223,223,113,113,113,113,113},//LCN Male
    {181,242,241,181,181,248,248,248,248,247,247,110,110,100},//Bikers
    {287,287,287,179,179,253,253,61,61,255,255,0},//Army
    {164,171, 164,163, 171,166,153,118,153,227,227,0},//BANK
    {274,274,274,274,274,275,275,275,275, 70,70,0},//MEDIC LV
    {71,266,284,267,267,265,282,282,311,17,295,0},//Police LV
    {188,188,188,188,250,250,250,250,250,261,261,0}, //Radio lv
    {21,21,21,21,28,28,28,293,293,297,297,0}, //Wolfs
    {188,188,188,188,250,250,250,250,250,261,261,0}, //Radio
    {287,287,287,179,179,253,253,61,61,255,255,0},
    {287,287,287,287,  287,  287,  287,  287,  287,  287,  287,  287}
};
new GOrgSkins[][] =
{
    {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},//None
    {76,306,306,306,307,307,307,309,309,76,76,76,76,76},//Police LS
    {76,306,306,306,307,307,307,309,309,76,76,76,76,76},//Police LV
    {141,141,141,141,141,141,141,141,141,141,141,141,141,141},//F.B.I
    {76,306,306,306,307,307,307,309,309,76,76,76,76,76},//Police SF
    {219,308,308,308,308,308,150,150,150,150,150,219,219,219},//M4C
    {150,150,150,150,150,150,150,150,150,150,150,150,150,150},//Meria LS
    {191,191,191,191,191,191,191,191,191,191,191,191,191,191},//Army
    {219,308,308,308,308,308,219,219,219,219,219,219,219,219},//M4C SF
    {150,11,11,11,11,11,172,172,172,172,172,150,150,150},//Licensers
    {211,211,211,211,211,211,211,211,211,211,211,211,211,211}, //Radio
    {65,65,65,65,65,65,207,207,207,207,207,207,298,298},//Groove Street
    {190,190,190,190,190,190,190,190,190,190,190,190,190,190},//LS Vagos
    {195,195,195,195,195,195,195,195,195,195,195,195,195,195},//Ballas
    {41,193,193,193,193,193,193,193,193,193,193,41,41,41},//El'Coronos
    {226,226,226,226,226,226,226,226,226,226,226,226,226,226},//SF Rifa
    {214,233,233,233,233,233,214,214,214,214,214,214,214,214},//Русская Мафия Female
    {169,169,169,169,169,169, 169, 169, 169,169,169,169,169,169},//Yakuza
    {91,91,91,91,91,91,91,91,91,91,91,91,91,91},//LCN Female
    {233,233,233,233,233,233,233,233,233,233,233,233,233,233},//Bikers
    {191,191,191,191,191,191,191,191,191,191,191,191,191,191},//Army
    {141,141,141,141,141,141,141,141,141,141,141,141,141,141},//BANK
    {219,308,308,308,308,308,219,219,219,219,219,219,219,219},//M4C LV
    {76,306,306,306,307,307,307,309,309,76,76,76,76,76},    //Police LV
    {211,211,211,211,211,211,211,211,211,211,211,211,211,211}, //Radio lv
    {56,56,56,56,56,56,56,56,56,56,56,56,56,56}, //wolfs
    {211,211,211,211,211,211,211,211,211,211,211,211,211,211}, //Radio lv
    {191,191,191,191,191,191,191,191,191,191,191,191,191,191},
    {191,191,191,191,  191,  191,  191,  191,  191,  191,  191,  191}
};
new ItemsId[][] =
{
	{ 19421,19422,19423,19424,1}, //Наушники
	{ 19069,19068,19067,19554,18953,18954,1},//Шапки
	{ 18968,18967,18969,1},//Панамки
	{ 18955,18956,18957,18959,18926,18927,18928,18929,18930,18931,18932,18933,1},//Кепки
	{ 19104,19105,19106,19107,19108,19109,1},//Каски
	{ 18925,18922,18923,18924,18921,1},//Береты
	{ 19519,19274,1},//Парики
	{ 19011,19012,19013,19014,19015,19016,19017,19018,19019,19024,19027,19028,19029,19022,19035,19031,19032,19033,1},//Очки
	{ 18911,18912,18913,18914,18915,18916,18917,18918,18919,18920,1 }, //Банданы
	{ 18947,18948,18949,18950,18951,1 }, //Шляпы
	{ 19042,19041,19040,19039,19043,19044,19045,19046,19048,19049,19050,19051,19053,1 }, //Часы
	{ 3026,371,19559,1 },//портфели
	{ 18970, 18973, 18972, 18971,1 },//Шляпы
	{ 18910, 18909, 18908, 18907, 18906,1 }// Банданы на голову
};
new ItemsIdInv[][] =
{
	{ 13,14,15,16,1}, //Наушники
	{ 45,46,47,48,49,50,1},//Шапки
	{ 51,52,53,1},//Панамки
	{ 54,55,56, 57,58,59,60,61,62,63,64,65,1},//Кепки
	{ 66,67,68,69,70,71,1},//Каски
	{ 88,89,90,91,92,1},//Береты
	{ 86,87,1},//Парики
	{ 27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,1},//Очки
	{ 17,18,19,20,21,22,23,24,25,26,1 }, //Банданы
	{ 93,94,95,96,97,1 }, //Шляпы
	{ 1,2,3,4,5,6,7,8,9,10,11,12,13,1 }, //Часы
	{ 98,99,100,1 },//портфели
	{ 93, 94, 95, 96,1 },//Шляпы
	{ 107, 108, 109, 110, 111,1 }// Банданы на голову
};
new ItemsCost[][] =
{
	{ 3000,3000,3000,3000,1}, //Наушники
	{ 2500,2500,4000,6000,3000,3000,1},//Шапки
	{ 1500,1500,1500,1},//Панамки
	{ 1000,1000,1000,2000,2000,1500,4000,4000,3000,2500,2500,4000,1},//Кепки
	{ 2500,2500,3000,3000,3000,3000,1},//Каски
	{ 2000,2200,2200,2500,3000,1},//Береты
	{ 3000,3000,1},//Парики
	{ 500,2000,500,700,1200,1800,2800,2800,2800,3000,3000,3000,3000,3000,2000,2100,2100,4000,1},//Очки
	{ 2000,1000,1000,1700,1700,1700,1300,1000,1000,1700,1 }, //Банданы
	{ 2100,2100,2100,2100,2100,1 }, //Шляпы
	{ 40000,30000,45000,50000,60000,4000,4000,4000,5000,5500,5000,5200,5400,1 }, //Часы
	{1000,800,1200,1},//портфели
	{3400,3200,3500,3300,1},//шляпы
	{2000,2000,2000,2000,2000,1}//Банданы
};
new MSkins[][] =
{
	{ 1,   78,135,137,2,3,50,29,  37,  44,58, 68,  72,167,  73,  96,  97, 101, 119,153, 184, 206, 235, 236,20,242, 252, 258,98, 289, 290, 291, 294,299},
	{14, 79,134, 136,15,4,5,  19,21,22,143,67,  24,  25,  28,  36,	83,  84, 128, 156,182,144,183, 220, 221, 222, 241,18,262,180,293, 292, 297,296}
};
new GSkins[][] =
{
	{91,90, 93,150,138, 216, 226,56,55,225,233},
	{9, 11, 12, 40, 76, 190,215, 192,298,211,214}
};
new MSkinCost[] =
{
 	2000,2000,2000,2000,2000,4000,2000,4000,4000,4000,
	4000,6000,6000,7000,7000,7000,10000,
	13000,14000,20000,20000,20000,20000,21000,
	50000,75000,76000,77000,150000,250000,100000,
	100000,450000,500000,

	2000,2000,2000,2000,2000,4000,4000,4000,4000,4000,6000,6000,6000,
	6000,7000,7000,25000,25000,15000,15000,
	15000,25000,25000,20000,50000,60000,61000,80000,
	20000,25000,150000,150000,200000,450000
};
new GSkinCost[] =
{
 	2000,2000,5000,7000,10000,10000,
	10000,10000,20000,100000,200000,
	2000,2000,2000,5000,7000,
	25000,50000,70000,100000,350000,500000
};
new skinRegistration[2][2][11] = 
{ 
	{
		{15089, 15696, 15697, 15698, 15699, 78, 135, 137, 200, 213, 230}, 
		{15088, 15696, 15697, 15698, 15699, 79, 136, 134, 35, 4, 5}
	}, 
	{
		{15706, 15705, 41, 77, 226}, 
		{15706, 15705, 13, 245, 214}
	} 
};
new Float:Bankomats[57][4] =
{
	{1491.64, -1279.95, 14.27,90.00},
	{ 1641.49, -1172.26, 23.59, 270.00},
	{2250.82, -1667.82, 15.13,255.48},
	{461.87, -1512.79, 30.63,1.38},
	{2820.09, -1468.37, 15.97, 90.00},
	{-107.03, -305.86, 1.13, 180.00},
	{-1823.97, 1284.36, 16.03,110.70},
	{1810.93, -1905.23, 13.25,0.00},
	{1918.69, -1766.31, 13.25,-90.00},
	{1364.10, -1751.19, 13.25, 0.00},
	{1225.59, -1811.40, 16.25,90.00},
	{1147.24, -1773.07, 16.25,-90.00},
	{1232.28, -1415.86, 13.11,-90.00},
	{1367.62, -1290.17, 13.11,0.00},
	{753.93, -1384.86, 13.37,89.32},
	{1650.38, -1655.55, 22.19,90.50},
	{1949.18, -1986.50, 13.43,180.73},
	{2423.85, -1906.82, 13.22,359.22},
	{2233.128906, -1758.811646, 13.367500,269.85},
	{2351.486328, -1758.965332, 13.367500,269.85},
	{669.08, -577.52, 16.18,89.33},
	{ 2733.04, -2458.37, 13.41,179.86},
	{ -68.99, 1209.25, 19.61,90.00},
	{ 652.04, 1705.81, 6.99,41.29},
	{ 1154.41, 1363.19, 10.63,270.00},
	{ 1626.66, 1814.01, 10.53,270.00},
	{ 2239.50, 1282.36, 10.63,360.00},
	{ 2197.74, 1395.31, 11.02,90.00},
	{ 2093.95, 1450.54, 10.48, 134.65},
	{ 2185.11, 1660.57, 10.76,285.21},
	{ 2257.25, 1804.71, 10.63,359.10},
	{ 2332.84, 2171.95, 10.60,180.00},
	{ 2619.40, 2345.90, 10.52,111.19},
	{ 2889.23, 2459.36, 10.89,134.97},
	{ 2597.39, 1086.47, 10.65,180.00},
	{ 2283.26, 2432.83, 10.62,90.00},
	{ 2479.92, 2520.86, 10.61,180.00},
	{ 2098.86, 2484.50, 10.90,89.78},
	{1177.1570, -610.8480, 1104.8850},
	{127.77, 1910.33, 18.55, 0.00},
	{-2674.95, 635.06, 14.30,90.0},
	{-2276.68, 535.11, 34.98,180.0},
	{-2186.82, 330.27, 35.09,90.0},
	{-2241.62, 83.38, 35.26,360.0},
	{-2034.73, -60.15, 35.11,90.0},
	{-2020.87, 128.47, 28.31,180.0},
	{-2017.89, 450.44, 35.05,180.0},
	{-1624.12, 716.50, 14.5,270.0},
	{-1712.51, 1349.73, 6.88,47.0},
	{-2765.62, 372.16, 6.00,180.0},
	{-2629.31, 1407.91, 6.85,159.0},
	{2847.007080, 1295.574707, 11.271100, 90.0},
	{-1970.933228, 116.201599, 27.543800, 270.0},
	{1496.193726, -1750.358398, 15.176110, 270.0},
	{1131.687622, -1473.322998, 15.690900, 270.0},
	{-2129.861084, -765.109985, 31.764299, 360.0},
	{-14.524700, 1883.712402, 17.537399, 90.000000}
};

enum dzone_options
{
	Float:data_Position[3],
	data_KeyID,
	data_VirtualVorld,
	data_Interior,
	data_OnlyInterior
}
new DynamicZones_data[][dzone_options] =
{
	// НПС
	{{1324.0098,287.2829,20.0452}, 1024, 0, 0},
	{{1773.6903,-1891.7493,13.5504}, 1024, 0, 0},
	{{1163.6832,-1754.9606,13.6180}, 1024, 0, 0},
	{{2507.7012, -1471.6755, 24.0371}, 1024, 0, 0},
	{{523.8312, 848.2282, -42.9189}, 1024, 0, 0},
	{{-256.7696, -1362.8536, 9.4421}, 1024, 0, 0},

	//Мастерская одежды
	{{1541.4100,1644.3116,10.8203}, 1024, 0, 7, 1},

	//bank LS
	{{-2666.7019,792.7706,1500.9688}, 131072, 1, 22},
	{{-2666.7024,799.2590,1500.9688}, 131072, 1, 22},
	{{-2666.7019,805.7601,1500.9688}, 131072, 1, 22},
	{{-2669.0356,807.3683,1500.9688}, 131072, 1, 22},
	{{-2676.4058,807.0090,1500.9688}, 131072, 1, 22},
	{{-2683.5574,807.2742,1500.9688}, 131072, 1, 22},

	// luxe-auto
	{{-505.0940, 2597.6277, 53.5557}, 1024, 0, 0},

	// auto-invite
	{{-82.8856, 1209.2118, 19.7422}, 1024, 0, 0},
	{{-1995.5789, 137.5688, 27.6875}, 1024, 0, 0},
	{{1773.8164, -1900.8397, 13.5502}, 1024, 0, 0},
	{{2823.8813, 1295.2294, 10.7633}, 1024, 0, 0},
	{{1157.5122, -1748.6414, 13.5703}, 1024, 0, 0},

	// bank LV
	{{495.2460,1305.8107,774.4839}, 131072, 2, 1},
	{{495.2458,1307.6693,774.4839}, 131072, 2, 1},
	{{495.2461,1309.3712,774.4839}, 131072, 2, 1},
	{{495.2461,1311.0665,774.4839}, 131072, 2, 1},
	{{495.2457,1312.7102,774.4839}, 131072, 2, 1},
	{{494.6551,1318.8708,774.4839}, 1024, 2, 1},

	//Мэрия LS | 1 этаж
	{{1505.8837,1336.9933,10.9788}, 1024, 1, 220},
	{{1507.9591,1310.1366,10.9788}, 1024, 1, 220},
	{{1510.6276,1360.6719,10.9738}, 1024, 1, 220},
	{{1527.5151,1335.4556,10.9787}, 1024, 1, 220},

	//Мэрия LS | 2 этаж
	{{1489.7211,-1259.8965,113.8044}, 1024, 2, 0},
	{{1479.7483,-1272.7469,113.8064}, 1024, 2, 0},
	{{1478.9396,-1266.1267,113.8103}, 1024, 2, 0},
	{{1471.9293,-1268.1545,113.8103}, 1024, 2, 0},
	{{1471.6344,-1271.5841,113.8103}, 1024, 2, 0},

	//Мэрия LS | 3 этаж
	{{2000.3159,1139.3854,1038.6882}, 1024, 2, 2},
	{{1999.9065,1121.6826,1038.6824}, 1024, 2, 2},

	// Sklads enter
	{{2377.8894, -2016.7648, 14.8329}, 1024, 0, 0},
	{{2350.1963, -2094.3875, 13.5469}, 1024, 0, 0},
	{{2154.0161, -2150.4517, 13.5469}, 1024, 0, 0},
	{{1997.0769, -2093.9473, 13.5469}, 1024, 0, 0},
	{{122.8866, -306.2458, 1.5781}, 1024, 0, 0},
	{{-2089.1396, -2262.8438, 30.6532}, 1024, 0, 0},
	{{1706.9139, 1025.9686, 10.8203}, 1024, 0, 0},
	{{1629.3411, 972.2988, 10.8203}, 1024, 0, 0},
	{{1027.1880, 2243.4399, 10.8203}, 1024, 0, 0},
	{{1054.4637, 2099.2351, 10.8203}, 1024, 0, 0},

	// Склады внутри
	{{1534.6024, 1287.8298, 10.9075}, 1024, 0, 104},
	{{1534.4894, 1280.9431, 10.9075}, 1024, 0, 104},

	//24/7 buy
	{{2580.1863,1424.8801,1800.9688}, 131072, 0, 16, 1},

	//magaz aks
	{{-398.2936,2229.9414,1801.0859}, 1024, 0, 0},

	//house podval
	{{1079.0709,937.4053,1604.8663}, 1024, 0, 0},
	{{1089.9543,949.3320,1600.9935}, 1024, 0, 0},
	{{-1662.0044,-246.3976,14.1484}, 1024, 0, 0},
	{{-1658.3842,-244.2417,14.1484}, 1024, 0, 0},
	{{-1656.4144,-244.2409,14.1484}, 1024, 0, 0},
	{{-1654.5771,-244.2411,14.1484}, 1024, 0, 0},
	{{-1652.5847,-244.2414,14.1484}, 1024, 0, 0},
	{{-1650.5245,-244.2408,14.1484}, 1024, 0, 0},
	{{-1649.9041,-246.3955,14.1484}, 1024, 0, 0},

	//auto mast
	{{201.0626,-244.8124,1.5713}, 1024, 0, 0},
	{{203.5454,-240.1284,1.6483}, 262144, 0, 0},
	{{210.9777,-239.4558,1.6561}, 262144, 0, 0},

	//ammo
	{{295.0160,-38.2134,1001.5156}, 1024, 0, 1, 1},

	//центр занятости
	{{2092.9592,797.1265,1027.1211}, 1024, 0, 0},
	{{2096.7002,797.0533,1027.1211}, 1024, 0, 0},
	{{2100.0579,781.9525,1027.1211}, 1024, 0, 0},

	//тср снаружи
	{{39.1284,1910.0469,17.8962}, 1024, 0, 0},
	{{-15.6253,1957.1833,18.1981}, 1024, 0, 0},
	{{32.8925,1851.2185,18.2480}, 1024, 0, 0},
	{{-12.2581,1883.1897,17.6982}, 1024, 0, 0},

	// тср внутри
	{{313.7311,2460.5391,1500.9797}, 1024, 0, 0},
	{{337.4621,2461.2009,1500.9797}, 1024, 0, 0},
	{{321.5936,2483.2593,1500.9797}, 1024, 0, 0},
	{{-103.0808,2337.4805,1500.9497}, 1024, 0, 0},
	{{-100.1502,2402.9199,1500.9697}, 1024, 0, 0},
	{{-97.4013,2347.1445,1500.9497}, 1024, 0, 0},
	{{-102.9486,2400.0579,1500.9697}, 1024, 0, 0},
	{{-97.6769,2344.7224,1507.0781}, 1024, 0, 0},
	{{-103.9012,2351.7346,1500.9497}, 1024, 0, 0},

	//Пикапы с GameTextForPlayer
	{{-2502.4258,-650.1299,1331.6520}, 1024, 0, 0},
	{{583.2088,1433.3907,1904.2689}, 1024, 0, 0},
	{{485.16, 849.70, 1500.96}, 1024, 0, 0},
	{{-1587.6157,-121.8007,1501.0859}, 1024, 0, 0},
	{{363.6908,153.9987,1025.7964}, 1024, 0, 0},
	{{354.0459,170.0928,1025.7964}, 1024, 0, 0},
	{{2761.0051, -2565.0754, 13.6281}, 1024, 0, 0},
	{{2760.6651, -2566.2554, 13.6281}, 1024, 0, 0},
	{{2755.5088, -2515.5393, 13.6281}, 1024, 0, 0},
	{{2726.0520, -2521.9421, 29.8281}, 1024, 0, 0},
	{{1773.2142, -1888.9938, 13.5513}, 1024, 0, 0},
	{{-1324.4010, 9.3590, 1601.0859}, 1024, 0, 0},
	{{-1769.3776, -2019.0920, 1500.7853}, 1024, 0, 0},
	{{-1312.6182, 20.8936, 1597.6073}, 1024, 0, 0},
	{{-2083.3413, 2675.4199, 1500.9647}, 1024, 0, 0},
	{{1152.1932,-1305.5453,1019.4307}, 1024, 0, 0},
	{{1451.6128, -2285.0105, 13.5469}, 1024, 0, 0},
	{{1673.0103, 1447.5935, 10.7867}, 1024, 0, 0},
	{{-1409.4084, -298.2005, 14.1484}, 1024, 0, 0},
	{{3.0257, 32.9454, 1199.5938}, 1024, 0, 0},
	{{2154.7354, 1493.4109, 10.8203}, 1024, 0, 0},
	{{2351.2886, 720.3787, 1500.9688}, 1024, 0, 0},
	{{295.20001220703, -38.299999237061, 1001.5}, 1024, 0, 0},
	{{-1415.0663, 2081.2036, 1502.0225}, 1024, 0, 0},
	{{-1426.0897, 2091.5784, 1508.2068}, 1024, 0, 0},
	{{544.7178, -587.9365, 23.0899}, 1024, 0, 0},
	{{-2661.8655,785.9218,1500.9688}, 1024, 0, 0},
	{{1518.4906,-1777.8580,33.4269}, 1024, 0, 0},
	{{-955.6700,-2358.0708,1701.0859}, 1024, 0, 0},
	{{2350.7820,-1961.5228,1601.0859}, 1024, 0, 0},
	{{2327.74, 70.09, 1502.00}, 1024, 0, 0},
	{{-954.5001,-2350.5596,1701.0869}, 1024, 0, 0},
	{{463.8202, 2216.9792, 1601.0859}, 1024, 0, 0},
	{{-1609.7928,-110.7104,1501.0859}, 1024, 0, 0},
	{{2570.1045,-1281.3558,1044.1250}, 1024, 13, 0},
	{{-2594.7959,642.3338,14.4531}, 1024, 0, 0},
	{{-2467.6902,529.4441,51.0896}, 1024, 0, 0},
	{{-2514.1074,-634.8470,1327.9960}, 1024, 0, 0},
	{{2365.59, 72.03, 1502.01}, 1024, 11, 0},
	{{618.9825,-568.0446,26.1432}, 1024, 0, 0},
	{{1547.7014,-1622.3954,13.5366}, 1024, 0, 0},
	{{1547.6816,-1623.1069,13.3725}, 1024, 0, 0},
	{{-2034.3145,-114.1021,1035.1719}, 1024, 0, 0},
	{{-80.5815,82.6753,3.109}, 1024, 0, 0},
	{{-77.9217,90.3327,3.1172}, 1024, 0, 0},
	{{1593.2783,1724.0553,10.8203}, 1024, 0, 0},
	{{461.6805,223.6825,3197.7139}, 1024, 0, 0},
	{{481.3205,216.2760,3194.6360}, 1024, 0, 0},
	{{474.5011,216.2406,3194.6360}, 1024, 0, 0},
	{{483.0550,246.8815,3197.7139}, 1024, 0, 0},
	{{2570.1045,-1281.3558,1044.1250}, 1024, 12, 0},
	{{2570.1045,-1281.3558,1044.1250}, 1024, 11, 0},
	{{592.8829,1426.6675,1900.7980}, 1024, 0, 0},
	{{592.9380,1428.2743,1900.7980}, 1024, 0, 0},
	{{550.3827,1472.2921,1900.7980}, 1024, 0, 0},
	{{1165.4714,1344.7832,10.8125}, 1024, 0, 0},
	{{1165.4773,1346.2273,10.9219}, 1024, 0, 0},
	{{1460.8505,-1743.3596,13.5469}, 1024, 0, 0},
	{{1969.3076,-1981.4128,13.5469}, 1024, 0, 0},
	{{-83.2843,-302.1633,2.7646}, 1024, 0, 0},
	{{-38.9923,173.5192,2.4297}, 1024, 0, 0},
	{{1287.2783,-1261.7417,20.6199}, 1024, 0, 0},
	{{1285.9365,-1270.2250,13.5939}, 1024, 0, 0},
	{{1289.0641,-1271.5160,13.5400}, 1024, 0, 0},
	{{1583.3656,-1638.4817,13.3333}, 1024, 0, 0},
	{{1583.3033,-1637.5920,13.3905}, 1024, 0, 0},
	{{462.35, 874.83, 1500.96}, 1024, 0, 0},
	{{2842.3452,-2523.9382,17.7489}, 1024, 0, 0},
	{{2847.9468,-2519.4592,11.9786}, 1024, 0, 0},
	{{-618.6426,-679.4822,1001.0859}, 1024, 0, 0},
	{{1492.7451,1308.4236,1093.2927}, 1024, 0, 0},
	{{1490.3748,1305.7142,1093.2964}, 1024, 0, 0},
	{{1169.6074,-1333.3698,-0.8618}, 1024, 0, 0},
	{{1147.9972,-1343.0070,13.6483}, 1024, 0, 0},
	{{-1768.1641, -1992.0632, 1500.7856}, 1024, 0, 0},
	{{1152.1946,-1303.6064,1019.4307}, 1024, 0, 0},

	// BANK SF
	{{951.6818,2451.9473,1601.9871}, 1024, 2, 1},
	{{946.4888,2456.3435,1601.9771}, 131072, 2, 1},
	{{951.6119,2458.5156,1601.9771}, 131072, 2, 1},
	{{955.0067,2463.6587,1601.9771}, 131072, 2, 1},

	//магаз азс
	{{665.9228,-567.7970,1700.7394}, 1024, 0, 0},

	//магаз видеокарт
	{{1384.2220,-21.7990,1000.9229}, 1024, 0, 0},

	//магаз все для дома
	{{-413.9340,686.2108,1601.9966}, 1024, 0, 0},

	//ЦР
	{{1118.2678,-1432.0193,15.7969}, 1024, 0, 0},
	{{1129.1301,-1426.8523,15.7969}, 1024, 0, 0},
	{{1137.5410,-1489.5074,15.7969}, 1024, 0, 0},
	{{1145.1555,-1484.7578,15.7969}, 1024, 0, 0},
	{{1145.3188,-1496.9410,15.7969}, 1024, 0, 0},
	{{1112.7622,-1497.4581,15.8003}, 1024, 0, 0},
	{{1112.7644,-1484.9135,15.7969}, 1024, 0, 0},
	{{1108.4072,-1427.3759,15.7969}, 1024, 0, 0},
	{{1107.5281,-1430.3042,15.7969}, 1024, 0, 0},
	{{1111.1637,-1424.4833,15.7969}, 1024, 0, 0},

	//больки
	{{1152.1946,-1303.6064,1019.4307}, 1024, 0, 0},
	{{-1609.7928, -110.7104, 1501.0859}, 1024, 0, 0},
	{{462.35, 874.83, 1500.96}, 1024, 0, 0},
	{{1169.6074, -1333.3698, -0.861}, 1024, 0, 0},
	{{550.3827, 1472.2921, 1900.7980}, 1024, 0, 0},
	{{-1324.4010, 9.3590, 1601.0859}, 1024, 0, 0},
	{{1148.6715, -1308.8401, 1019.4266}, 1024, 0, 0},
	{{1152.1932,-1305.5453,1019.4307}, 1024, 0, 0}
};
new Float:ZoneForCollision[4][3] =
{
	{-2129.2104,-860.3240,32.0354}, // АвтоБазар
	{1129.3059,-1442.0228,18.0474}, // Центральный рынок
	{1478.0765,-1746.1033,14.0764}, // Центральный банк
	{1775.2537,-1908.0100,13.3858}
};
enum area_types
{
	arCentralRinok[2],
	arGhetto,
	arAutoBazar,
	arParking[sizeof(parking)],
	arBarrier[sizeof(BarrierInfo)],
	arLavka[sizeof(CentralMarketPosition)],
	arBankomats[sizeof(Bankomats)],
	arDoor[sizeof(DoorInfo)],
	arAutobazar[MAX_AUTO_BAZAR],
	arFuels[sizeof(GoFuel)],
	arHealBads[sizeof(HealInfo)],
	arOther[sizeof(DynamicZones_data)],
	arCollision[sizeof(ZoneForCollision)]
}
new gAreas[area_types];

enum oInfo
{
	oID,
	oName[32],
	oLeader[24],
	oBank,
	oDrugs,
	oMats,
	Max_Rang,
	oOb4ak,
	oBenz,
	oRemont,
	oMask
}
new OrgInfo[MAX_ORGS][oInfo];
new Dorm_CP[MAX_ORGS] = {-1, ...};
new Text3D:DormText[MAX_ORGS] = {NONE_3D_TEXT, ...};
new Float:DormPos[27][3] =
{
	{0.0,0.0,0.0}, //None
	{0.0,0.0,0.0}, //LSPD
	{0.0,0.0,0.0}, //LVPD
	{0.0,0.0,0.0}, //CIA
	{0.0,0.0,0.0}, //SWAT
	{0.0,0.0,0.0}, //Medik
	{0.0,0.0,0.0}, //MeriaLS
	{0.0,0.0,0.0}, //MeriaSF
	{0.0,0.0,0.0}, //MeriaLV
	{0.0,0.0,0.0}, //Licensers
	{0.0,0.0,0.0}, //Radio
	{-590.6566, 2405.8647, 1503.81}, //Groove St.
	{-436.4060, 2414.9927, 1500.02}, //LS Vagos
	{-739.9849, 2418.2139, 1500.02}, //Ballas
	{-708.18, 2247.16, 1500.02}, //Coronos
	{-567.9110, 2244.9880, 1500.02}, //Rifa
	{-1376.59, 1730.02, 1501.45}, //RM
	{-1394.2540, 2101.7390, 1501.2599}, //Yakuza
	{-1147.6879, 1926.7343, 1501.1862}, //LCN
	{778.4292, 2518.5076, 1502.0092}, //Bikers
	{0.0,0.0,0.0}, //army
	{0.0,0.0,0.0}, //BANK
	{0.0,0.0,0.0}, //BANK
	{0.0,0.0,0.0}, //BANK
	{0.0,0.0,0.0}, //BANK
	{-599.0525,112.0772,1503.5990}, //wolfs
	{0.0,0.0,0.0} //sf
};

enum gangzone_info
{
	gangOwnerId,
	familyOwnerId,
	familyAttackId,
	familyStartAttack,
	familyTimeStart[3]
};

new GangZoneInfo[304][gangzone_info], GangZone[302];

new Float:FerumCPPos[16][4] =
{
	{2558.4739,-1295.8499,1044.1250,0.0},
	{2556.1707,-1295.8499,1044.1250,0.0},
	{2553.7725,-1295.8497,1044.1250,0.0},
	{2544.3621,-1295.8524,1044.1250,0.0},
	{2542.0627,-1295.8502,1044.1250,0.0},
	{2542.0247,-1291.0040,1044.1250,180.0},
	{2544.2896,-1291.0055,1044.1250,180.0},
	{2553.8286,-1291.0051,1044.1250,180.0},
	{2556.1653,-1291.0057,1044.1250,180.0},
	{2558.4722,-1291.0055,1044.1250,180.0},
	{2560.0459,-1284.6926,1044.1250,90.0},
	{2560.0452,-1282.7565,1044.1250,90.0},
	{2552.0383,-1282.8169,1044.1250,90.0},
	{2552.0391,-1284.8226,1044.1250,90.0},
	{2544.0613,-1282.7789,1044.1250,90.0},
	{2544.0613,-1284.7793,1044.1250,90.0}
};
new Float:FerumPickupPos[6][3] =
{
    {2559.1011,-1299.8197,1044.1250},
	{2551.1067,-1299.7057,1044.1250},
	{2543.0305,-1299.8914,1044.1250},
	{2543.1702,-1287.7507,1044.1250},
	{2551.1094,-1287.7623,1044.1250},
	{2559.1382,-1287.6731,1044.1250}
};

enum griba
{
	Float:gribPos[3],
	gribCreat
}
new Float:GribInfo[106][griba] =
{
    {{702.8815,-705.6253,18.1862},-1},
    {{629.6369,-626.4828,16.8087},-1},
    {{552.2899,-710.6613,15.6666},-1},
    {{549.5466,-726.0712,16.4740},-1},
    {{498.2195,-679.3785,19.3385 },-1},
    {{435.9091,-699.4714,24.1253 },-1},
    {{410.0149,-693.8445,25.3369 },-1},
    {{423.6373,-632.5778,31.2596 },-1},
    {{383.9173,-598.8234,38.6380 },-1},
    {{365.3120,-605.5251,37.1760 },-1},
    {{389.1755,-564.6368,42.2504 },-1},
    {{396.1581,-548.8250,41.7694 },-1},
    {{411.8608,-449.7965,29.2956 },-1},
    {{424.7657,-430.9502,28.3068 },-1},
    {{441.9207,-381.7615,31.4900 },-1},
    {{439.1675,-350.8515,32.7176 },-1},
    {{271.2307,-263.2632,1.5781 },-1},
    {{108.2987,-136.0934,1.5781 },-1},
    {{175.8603,49.5331,2.3979 },-1},
    {{493.5621,97.1763,27.7191 },-1},
    {{547.1754,173.4039,27.1073 },-1},
    {{708.5907,307.0195,20.2344 },-1},
    {{743.8032,331.7983,20.3124 },-1},
    {{942.9208,409.0231,20.2344 },-1},
    {{1233.2169,536.8552,20.2344 },-1},
    {{1330.6167,494.6686,20.2184 },-1},
    {{1491.0624,324.2256,18.8417 },-1},
    {{1485.3533,273.8969,18.9174 },-1},
    {{1429.8097,164.6635,21.9831 },-1},
    {{1265.4169,-133.5778,39.7847 },-1},
    {{-372.7117,-89.7796,46.0523 },-1},
    {{-462.4359,-204.0353,77.9991 },-1},
    {{-554.9720,-221.0948,76.3361 },-1},
    {{921.3636,-479.7340,44.0374 },-1},
    {{890.4687,-494.8910,36.9549 },-1},
    {{878.1802,-483.0581,35.4741 },-1},
    {{1983.4618,89.3856,29.4775 },-1},
    {{2210.0349,146.4971,26.1758 },-1},
    {{-332.3008,-1987.6200,26.1051 },-1},
    {{-375.2895,-2004.4412,28.4262 },-1},
    {{-420.7345,-1962.1367,20.7989 },-1},
    {{-370.9467,-2049.1355,28.5462 },-1},
    {{-448.5980,-2072.9041,80.6654 },-1},
    {{-490.3048,-2121.0930,89.5054 },-1},
    {{-515.2039,-2223.6245,42.7538 },-1},
    {{-556.2787,-2223.5444,34.8664},-1},
    {{-653.4810,-2185.8540,14.6571 },-1},
    {{-697.4235,-2144.5728,24.7645 },-1},
    {{-913.5545,-2281.5803,45.6804 },-1},
    {{-924.2963,-2392.5601,63.9710 },-1},
    {{-921.2469,-2419.2676,73.1529 },-1},
    {{-928.6000,-2452.7974,90.8816 },-1},
    {{-1092.1782,-2576.2622,77.2730 },-1},
    {{-1114.4218,-2326.8787,44.7146 },-1},
    {{-1095.8896,-2317.7642,51.1427 },-1},
    {{-1036.0745,-2331.6079,60.0633 },-1},
    {{-1823.0471,-2169.1082,77.6051 },-1},
    {{-1745.4077,-2018.1677,74.5071 },-1},
    {{-1943.8130,-2144.5457,76.9309 },-1},
    {{-1955.9766,-2162.8020,75.9688 },-1},
    {{-1685.1254,-2385.9275,99.3290 },-1},
    {{-1643.7135,-2411.9897,95.7691 },-1},
    {{-1551.1573,-2505.1743,90.8708 },-1},
    {{-1465.4910,-2556.2893,63.7663 },-1},
    {{-1435.4855,-2544.3879,60.4281 },-1},
    {{-1401.0656,-2548.1582,55.9067 },-1},
    {{-1347.5752,-2507.9780,37.0068 },-1},
    {{-1328.0197,-2467.7183,27.8259 },-1},
    {{-1290.3135,-2479.8984,16.9108 },-1},
    {{-1277.4055,-2498.1367,11.4951 },-1},
    {{-568.3260,-2276.3220,27.5938 },-1},
    {{-653.1019,-2255.4465,23.3936 },-1},
    {{-614.5738,-2398.0959,28.0911 },-1},
    {{-620.2932,-2477.4644,52.8450 },-1},
    {{-673.6429,-2562.6052,58.4840 },-1},
    {{-797.0350,-2611.4380,85.9543 },-1},
    {{-814.8298,-2713.2485,90.4954 },-1},
    {{-900.3575,-2635.6716,96.5351 },-1},
    {{-908.8201,-2450.1675,86.1361},-1},
    {{-564.7324,-2000.7518,48.2172 },-1},
    {{-514.0831,-1990.8127,46.7821 },-1},
    {{-386.3437,-1968.6517,25.7109 },-1},
    {{-285.8642,-2063.6074,34.5075 },-1},
    {{-1735.6969,-2501.1594,10.1409 },-1},
    {{-1840.7139,-2382.2207,29.1400 },-1},
    {{-1906.1353,-2212.6089,77.4492 },-1},
    {{-1874.5731,-1969.2981,87.2874 },-1},
    {{-1739.6145,-1950.4650,98.8599 },-1},
    {{-1613.4684,-1867.4391,86.1701 },-1},
    {{-1868.5590,-1894.4634,88.9713 },-1},
    {{-2005.6901,-1937.4910,77.0140 },-1},
    {{-1672.1672,-1241.9645,56.0353 },-1},
    {{-1650.4935,-1225.4619,61.8498 },-1},
    {{-1650.6229,-1209.2308,64.9244 },-1},
    {{-1666.0083,-1198.4526,66.7604 },-1},
    {{-1663.8088,-1177.6703,74.1764 },-1},
    {{-1762.3182,-1037.3500,71.8555 },-1},
    {{-1776.3201,-1027.1984,67.7035 },-1},
    {{-1768.3276,-1001.6918,72.3583 },-1},
    {{-1728.5266,-979.0954,75.2465 },-1},
    {{-1717.1040,-972.0726,73.4562 },-1},
    {{-1705.9585,-976.0599,73.1204 },-1},
    {{-1699.4006,-992.9841,72.9413 },-1},
    {{-1693.8057,-1018.5599,72.9807 },-1},
    {{-1707.7991,-1044.0151,74.1118 },-1},
    {{-1734.0542,-924.7174,74.8878 },-1}
};
enum cInfo
{
    cModel,
	Float:cPos[4],
 	cInterior,
	cVirtualWorld,
	cColor_1,
	cColor_2,
	cOwner[MAX_PLAYER_NAME],
	cShtrafer,
	cKeyer[MAX_PLAYER_NAME],
	cLock,
	cCost,
	cShtraf,
	cAlarmON,
	cKeyIN,
	cID,
	Float:cMilage,
	cStyle,
	cParkedInGarage,
	cParkedInParking,
	cShtrafName[MAX_PLAYER_NAME],
	Float:cMaslo,
	cParkedInPark,
	TuningComp[8],
	cInvCell[23], // 0 .. 9 vis | 10 .. 20 tech | 21 - tt | 22 - vinyl | 23 - number
	cInvCellColor[23],
	cTunInstalled[10],
	Float:TunPosX[10],
	Float:TunPosY[10],
	Float:TunPosZ[10],
	Float:TunRotX[10],
	Float:TunRotY[10],
	Float:TunRotZ[10],
	ConnectLoad
};
new CarInfo[MAX_VEHICLES][cInfo];

enum vInfo
{
	vModel,
	Float:vPos_X,
	Float:vPos_Y,
	Float:vPos_Z,
	Float:vPos_A,
	vColor_1,
	vColor_2,
	vModification,
	vEngine,
	vLights,
	vAlarm,
	vDoors,
	vBonnet,
	vWindow,
	vBoot,
	vJob,
	vTeam,
	vRank,
	vListID,
	vAntiRepair,
	vLock,
	vPlayer,
	vFilled,
	vFree,
	vID,
	vIDa,
	vStyle,
	vTuningObject[10],
	vFamily,
	Float:vHandling[24],
	vNumber[70]
}
new VehicleInfo[MAX_VEHICLES][vInfo],
	vehicleTuning[MAX_VEHICLES][10],
	vehicleWindowColors[MAX_VEHICLES][7],
	Float:vehicleWheelSetting[MAX_VEHICLES][2][2],
	Float:vehicleWheelSize[MAX_VEHICLES];

enum skladInfo
{
	sklad_id,
	sklad_Owner[24],
	sklad_Password,
	sklad_item[150],
	sklad_item_amount[150],
	sklad_item_enchant[150],
	sklad_item_mending[150],
	sklad_item_color[150],
	sklad_door,
	bool:sklad_door_open,
	sklad_pickup,
	Text3D:sklad_3dtext,
	sklad_areaid,
	sklad_areaid_menu
}
new SkladInfo[MAX_SKLADS][skladInfo],
	Float:sklad_door_position[][] = {
		{1521.547607, 1285.701782, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9915, 1286.9852, 10.9125}, // 1
		{1521.547607, 1289.821777, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9918, 1291.0778, 10.9125}, // 2
		{1528.186523, 1292.370361, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7397, 1291.1058, 10.9125}, // 3
		{1521.547607, 1293.941772, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9923, 1295.2207, 10.9125}, // 4
		{1528.186523, 1296.490356, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7383, 1295.2385, 10.9125}, // 5
		{1521.547607, 1298.061768, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9921, 1299.3259, 10.9125}, // 6
		{1528.186523, 1300.610352, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7422, 1299.3268, 10.9125}, // 7
		{1521.547607, 1302.181763, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9935, 1303.4375, 10.9125}, // 8
		{1528.186523, 1304.730347, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7413, 1303.4528, 10.9125}, // 9
		{1521.547607, 1306.301758, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9924, 1307.5629, 10.9125}, // 10
		{1528.186523, 1308.850342, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7413, 1307.5768, 10.9125}, // 11
		{1521.547607, 1310.421753, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9919, 1311.6775, 10.9125}, // 12
		{1528.186523, 1312.970337, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7427, 1311.6835, 10.9125}, // 13
		{1521.547607, 1314.541748, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9933, 1315.7941, 10.9125}, // 14
		{1528.186523, 1317.090332, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7426, 1315.8292, 10.9125}, // 15
		{1521.547607, 1318.661743, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9944, 1319.9279, 10.9175}, // 16
		{1528.186523, 1321.210327, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7419, 1319.9763, 10.9175}, // 17
		{1521.547607, 1322.781738, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9928, 1324.0232, 10.9175}, // 18
		{1528.186523, 1325.330322, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7412, 1324.0905, 10.9175}, // 19
		{1521.547607, 1326.901733, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9961, 1328.1488, 10.9175}, // 20
		{1528.186523, 1329.450317, 11.632491, -0.000000, 0.000000, -0.000015, 1527.7379, 1328.1942, 10.9175}, // 21
		{1521.547607, 1331.021729, 11.632491, 0.000000, 0.000000, 540.000000, 1521.9935, 1332.2727, 10.9175}, // 22
		{1522.940552, 1337.535400, 11.632491, 0.000022, -0.000007, 89.999916, 1524.2009, 1337.0909, 10.9175}, // 23
		{1527.060547, 1337.535400, 11.632491, 0.000022, -0.000007, 89.999916, 1528.3463, 1337.0912, 10.9175}, // 24
		{1531.180542, 1337.535400, 11.632491, 0.000022, -0.000007, 89.999916, 1532.4199, 1337.0900, 10.9175}, // 25
		{1535.300537, 1337.535400, 11.632491, 0.000022, -0.000007, 89.999916, 1536.5769, 1337.0916, 10.9125}, // 26
		{1539.420532, 1337.535400, 11.632491, 0.000022, -0.000007, 89.999916, 1540.7205, 1337.0907, 10.9125}, // 27
		{1543.540527, 1337.535400, 11.632491, 0.000022, -0.000007, 89.999916, 1544.8503, 1337.0914, 10.9125}, // 28
		{1547.439575, 1333.568115, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9957, 1332.2944, 10.9125}, // 29
		{1547.439575, 1329.448120, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9929, 1328.1624, 10.9125}, // 30
		{1540.812988, 1326.930176, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2588, 1328.1670, 10.9125}, // 31
		{1547.439575, 1325.328125, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9956, 1324.0817, 10.9125}, // 32
		{1540.812988, 1322.810181, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2583, 1324.0649, 10.9125}, // 33
		{1547.439575, 1321.208130, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9933, 1319.9679, 10.9125}, // 34
		{1540.812988, 1318.690186, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2584, 1319.9647, 10.9125}, // 35
		{1547.439575, 1317.088135, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9956, 1315.8202, 10.9075}, // 36
		{1540.812988, 1314.570190, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2585, 1315.8717, 10.9075}, // 37
		{1547.439575, 1312.968140, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9922, 1311.7004, 10.9075}, // 38
		{1540.812988, 1310.450195, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2584, 1311.7067, 10.9075}, // 39
		{1547.439575, 1308.848145, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9916, 1307.6000, 10.9075}, // 40
		{1540.812988, 1306.330200, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2582, 1307.6235, 10.9075}, // 41
		{1547.439575, 1304.728149, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9934, 1303.4934, 10.9075}, // 42
		{1540.812988, 1302.210205, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2581, 1303.4808, 10.9075}, // 43
		{1547.439575, 1300.608154, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9912, 1299.3765, 10.9075}, // 44
		{1540.812988, 1298.090210, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2585, 1299.3417, 10.9075}, // 45
		{1547.439575, 1296.488159, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9929, 1295.2184, 10.9075}, // 46
		{1540.812988, 1293.970215, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2577, 1295.2285, 10.9075}, // 47
		{1547.439575, 1292.368164, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9956, 1291.0938, 10.9075}, // 48
		{1540.812988, 1289.850220, 11.632491, 0.000000, 0.000000, 179.999878, 1541.2604, 1291.1323, 10.9075}, // 49
		{1547.439575, 1288.248169, 11.632491, -0.000000, 0.000000, -0.000015, 1546.9934, 1286.9851, 10.9075} // 50
	};

enum hInfo
{
	hID,
	Float:hEnter_X,
	Float:hEnter_Y,
	Float:hEnter_Z,
	Float:hExit_X,
	Float:hExit_Y,
	Float:hExit_Z,
	hCost,
	hLevel,
	hOwner[24],
	hInt,
	hLock,
	hRent,
	hMoney,
	hDrugs,
	hMats,
	hItem[90],
	hItemCount[90],
	hItemLevel[90],
	hItemProc[90],
	hItemIdentificator[90],
	hItemColor[90],
	hBar,
	hPodval,
	hNalog,
	hNalog2,
	hNoOwner,
	hKlass,
	hMed,
	hGarage,
	Float:hGarage_X,
	Float:hGarage_Y,
	Float:hGarage_Z,
	hType,
	hkvInt,
	hAuction,
	hAuctionTime,
	hAuctionName[MAX_PLAYER_NAME+2],
	hAuctionCost[2],
	hAuctionMoney,
	hObjectCount[2],
	H_PICKUP_ID,
	H_AREA_ID,
	H_AREA_EXIT,
	hMainingInstalling,
	hMainingInstalling_time,
	hEstate,
	hKratos,
	hCinema
};

new
	HouseInfo[MAX_HOUSES][hInfo],
	HRoomOwner[MAX_HOUSES][5][MAX_PLAYER_NAME],
	HRoomPay[MAX_HOUSES][5],
	HRoomNalog[MAX_HOUSES][5];

enum HOUSE_MAINING_ENUM 
{
	card_status,
	Float:card_balance,
	card_level,
	Float:card_percent,
	card_last_update
};

new MiningBTC[MAX_HOUSES][20][HOUSE_MAINING_ENUM],
	Float:MiningBTCPos[][3] = {

		{-1658.4623, -244.2459, 14.1484},
		{-1656.4078, -244.2418, 14.1484},
		{-1654.4594, -244.2415, 14.1484},
		{-1652.4283, -244.2435, 14.1484},
		{-1650.4478, -244.2418, 14.1484},
		{-1649.9041, -246.4743, 14.1484}

	}, Float:ChanceUpdateVideoCard[10] = {0.0, 90.0, 80.0, 70.0, 50.0, 40.0, 30.0, 20.0, 10.0, 5.0};

stock Float:GetMiningBTC(level)
{
	if(level > 10)
		return 0.0;

	return (5.0 * level);
}

#define MAX_SELLCARS (212)
enum scInfo
{
	scType,
	scModel,
	Float:sc_PosX,
	Float:sc_PosY,
	Float:sc_PosZ,
	Float:sc_PosA,
	bool:scSpawn,
	scCount
};
new SellInfo[MAX_SELLCARS][scInfo];
new SellCard[MAX_VEHICLES];
new ShowSellCar[MAX_PLAYERS][MAX_SELLCARS];
new SELLCARS;
enum bInfo
{
	bID,
	bState,
	Float:bEnter[3],
	Float:bExit[3],
	bOwner[24],
	bName[30],
	bZam[24],
	bCost,
	bLevel,
	bInt,
	bLock,
	bMoney,
	Float:bEnterPrice,
	bProducts,
	bKrasher,
	bVisit,
	bWin,
	bBuyCost,
	bNeedItem,
	bItem[19],
	bMapIcon,
	bUpgrade[3],
	bPickup,
	bCostType,
	bObjectCount[2],
	Text3D:B_TEXT_ID,
	B_PICKUP_ID,
	B_ICON_ID,
	B_AREA_ID,
	B_AREA_EXIT
}
new BizData[MAX_BIZ][bInfo];

new TempStripObject[MAX_VEHICLES] = {-1, ...},
	TempStripTimer[MAX_VEHICLES],
	Float:TStripPos[MAX_STRIPS][3],
	StripCount,
	PlayerMail[MAX_PLAYERS][50],
	PlayerName[MAX_PLAYERS][MAX_PLAYER_NAME],
	PlayerRegIP[MAX_PLAYERS][16],
	PlayerIp[MAX_PLAYERS][16];

#include ../library/bitstream // Все от ракнета тут
#include ../library/data/family // Данные фамы
#include modules/itemsinfo // Предметы инвентаря
//#include modules/azpotify_track // Массив с треками

// Массив AC_CODE хранит в себе текстовые форматы номеров кода анти-чита
static const AC_CODE[AC_MAX_TRIGGERS][AC_MAX_CODE_LENGTH] =
{
    "000", "001", "002", "003", "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "016", "017", "018", "019", "020", "021", "022", "023", "024", "025", "026", "027", "028", "029", "030", "031", "032", "033", "034", "035", "036", "037", "038", 
	"039", "040", "041", "042", "043", "044", "045", "046", "047", "048", "049", "050", "051", "052"
};

// Массив AC_CODE_NAME хранит в себе названия читов, которые соответствуют кодам анти-чита
static const AC_CODE_NAME[AC_MAX_TRIGGERS][AC_MAX_CODE_NAME_LENGTH] =
{
    {"AirBreak (onfoot)"}, {"AirBreak (in vehicle)"}, {"Teleport (onfoot)"}, {"Teleport (in vehicle)"}, {"Teleport (into/between vehicles)"}, {"Teleport (vehicle to player)"}, {"Teleport (pickups)"}, {"FlyHack (onfoot)"}, {"FlyHack (in vehicle)"}, {"SpeedHack (onfoot)"}, 
	{"SpeedHack (in vehicle)"}, {"Health hack (in vehicle)"}, {"Health hack (onfoot)"}, {"Armour hack"}, {"Money hack"}, {"Weapon hack"}, {"Ammo hack (add)"}, {"Ammo hack (infinite)"}, {"Special actions hack"}, {"GodMode from bullets (onfoot)"}, {"GodMode from bullets (in vehicle)"}, 
	{"Invisible hack"}, {"Lagcomp-spoof"}, {"Tuning hack"}, {"Parkour mod"}, {"Quick turn"}, {"Rapid fire"}, {"FakeSpawn"}, {"FakeKill"}, {"Pro Aim"}, {"CJ run"}, {"CarShot"}, {"CarJack"}, {"UnFreeze"}, {"AFK Ghost"}, {"Full Aiming"}, {"Fake NPC"}, {"Reconnect"}, {"High ping"}, 
	{"Dialog hack"}, {"Sandbox"}, {"Invalid version"}, {"Rcon hack"}, {"Tuning crasher"}, {"Invalid seat crasher"}, {"Dialog crasher"}, {"Attached object crasher"}, {"Weapon Crasher"}, {"Connects to one slot"}, {"Flood callback functions"}, {"Flood change seat"}, {"DDos"}, {"NOP's"}
};

stock Float:PointToPoint(Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2)
	return floatsqroot(floatpower(floatabs(floatsub(x2,x)),2)+floatpower(floatabs(floatsub(y2,y)),2)+floatpower(floatabs(floatsub(z2,z)),2));

new Float:SpawnInfo[29][4] =
{
	{1874.8156, 2228.1123, 1036.3204, 90.7581},				    //Int:  7 | World: 0 | None
	{-469.2832,2201.7419,1601.0879,180.0},				//Int:  6 | World: 10 | LSPD
	{-469.2832,2201.7419,1601.0879,180.0},				        //Int:  6 | World: 11 | RCPD
	{-2517.5935,-650.5844,1327.9659,358.1692},				//Int:  2 | World: 12 | FBI
	{-469.2832,2201.7419,1601.0879,180.0},				        //Int:  10 | World: 0 | SFPD
	{1151.9828,-1321.5035,1019.4178,180.7741},			//Int:  0 | World: 0 | Medic
	{1495.7332,-1283.4430,113.8212,88.8265},		//Int:  0 | World: 0 | Meria LS
	{582.7991,1473.3457,1900.7980,94.9175},				    //Int:  3 | World: 1 | ARMY LV
	{1151.9828,-1321.5035,1019.4178,180.7741},		    //Int:  3 | World: 2 | MedicSF
	{1542.9929,1300.8286,10.8528,90.0},			    	//Int:  3 | World: 5 | Licensers
	{2122.4683,2521.7490,1024.9781, 272.7667},        		        //Int:  1 | World: 1 | Radio
	{-560.5607, 2414.4805, 1500.9701, 90.0},			    //Int:  7 | World: 1 | Groove
	{-404.95, 2416.19, 1500.97,90.0},				        //Int:  7 | World: 2 | Vagos
	{-725.4955, 2402.1990, 1500.9508,0.0},			     	//Int:  7 | World: 3 | Ballas
	{-719.47, 2235.79, 1500.97,0.000},				        //Int:  7 | World: 4 | Coronos
	{-561.1273, 2259.4351, 1500.9692,180.0},				//Int:  7 | World: 5 | Rifa
	{-1390.49, 1718.02, 1502.28,90.0},			            //Int:  3 | World: 0 | Russian
	{-1409.89, 2072.84, 1502.02,0.000},     				//Int:  5 | World: 0 | Yakuza
	{-1126.22, 1931.18, 1501.96,180.0},		                //Int:  5 | World: 1 | LCN
	{778.4115, 2509.0295, 1501.9790,270.0},		            //Int:  3 | World: 0 | Bikers
	{459.18, 878.14, 1500.96, 180.000},	                    //Int:  0 | World: 0 | Army
	{-2684.58740, 820.24365, 1500.97046,180.000},		    //Int:  1 | World: 1 | Bank
	{1151.9828,-1321.5035,1019.4178,180.7741},		    //Int:  1 | World: 2 | MedicLV
	{-469.2832,2201.7419,1601.0879,180.0},		                //Int:  1 | World: 2 | LVPD
	{2122.4683,2521.7490,1024.9781, 272.7667},		                //Int:  1 | World: 2 | CNN LV
	{-596.0529,130.2787,1501.0900,234.3755},                //Int:  7 | World: 7 | Night Wolfs
	{2122.4683,2521.7490,1024.9781, 272.7667},		                //Int:  1 | World: 3 | CNN SF
	{-1609.6104,-113.5421,1501.0859,179.3103},
	{-100.4005,2346.7053,1507.0781,272.8730}
};
new SpawnIntWorld[29][2] =
{
	{7,0},//Int: 7 | World: 0 | None
	{11,2},//Int: 6 | World: 10 | LSPD
	{11,3},//Int: 6 | World: 11 | LVPD
	{2,0},//Int: 2 | World: 12 | FBI
	{11,4},//Int: 10 | World: 0 | police sf
	{2,2},//Int: 0 | World: 0 | Medic
	{0,2},//Int: 0 | World: 0 | Meria LS
	{2,1},//Int: 3 | World: 1 | ARMY LV
	{2,3},//Int: 3 | World: 2 | hospital sf
	{240,5},//Int: 3 | World: 5 | Licensers
	{157,1},//Int: 1 | World: 1 | Radio
	{7,1},//Int: 7 | World: 1 | Groove
	{7,2},//Int: 7 | World: 2 | Vagos
	{7,3},//Int: 7 | World: 3 | Ballas
	{7,4},//Int: 7 | World: 4 | Coronos
	{7,5},//Int: 7 | World: 5 | Rifa
	{3,0},//Int: 3 | World: 0 | Russian
	{5,0},//Int: 5 | World: 0 | Yakuza
	{5,1},//Int: 5 | World: 1 | LCN
	{3,1},//Int: 3 | World: 1 | Bikers
	{2,1},//army
	{22,1}, //банк
	{2,4}, //medic lv
	{11,5}, //lvpd
	{157,2}, //radio lv
	{7,7}, //wolfs
	{157,3}, //sf news
	{2,1},//armysf
	{2,2}//armysf
};
enum gpsInfo
{
	gpsName[50],
	Float:gpsPos[3],
	bool:gpsCP
}
new GpsInfo[16][gpsInfo] =
{
	{"Автошкола",				{-2027.4399,-73.7133,34.8768}, true},
	{"Мэрия ЛС",				{1495.3958,-1283.8339,14.5343}, true},
	{"Ферма",					{-27.0336,163.0780,2.4297}, true},
	{"Грузчики",				{1969.7396,-1969.3291,13.1014}, true},
	{"Завод",					{-86.1893,-305.8608,1.4219}, true},
	{"Банк",					{1480.9033,-1744.6389,13.5469}, true},
	{"Устройство на работу",	{1289.0641,-1271.5160,13.5400}, true},
	{"Больница ЛС", 			{1177.6864,-1323.2448,14.0830}, true},
	{"Больница LV", 			{1641.8849,1833.5286,10.8508}, true},
	{"Больница SF", 			{-2666.6680,580.7857,14.4609}, true},
	{"ЖД Los Santos", 			{1805.0404,-1908.3304,13.3983}, true},
	{"ЖД San Fierro", 			{-1994.0475,100.2056,27.5391}, true},
	{"ЖД Las-Venturas", 		{2827.3931,1255.9264,10.7685}, true},
	{"Полиция LS", 				{1540.0491,-1676.1680,13.2146}, true},
	{"Полиция SF", 				{-1629.0847,726.1740,14.1306}, true},
	{"Полиция LV", 				{2285.9685,2420.4519,10.4922}, true}

};
new Float:MusorPos[MAX_MUSORS][4] =
{
    {1464.30004883,-725.00000000,92.50000000,110.00000000},
	{1514.50000000,-776.00000000,79.69999695,126.00000000},
	{1523.40002441,-794.79998779,74.09999847,87.99670410},
	{1522.69995117,-837.29998779,67.00000000,87.99499512},
	{1459.30004883,-888.09997559,55.29999924,337.99499512},
	{1415.69995117,-930.59997559,35.70000076,175.99438477},
	{1444.40002441,-934.40002441,36.09999847,175.98999023},
	{1273.50000000,-914.29998779,42.00000000,185.98999023},
	{1236.59997559,-920.79998779,42.70000076,189.98754883},
	{1179.19995117,-932.09997559,43.00000000,189.98657227},
	{1133.69995117,-1033.09997559,31.70000076,179.98657227},
	{1116.69995117,-1033.19995117,31.70000076,179.98352051},
	{1091.90002441,-1071.90002441,27.89999962,89.98352051},
	{1091.90002441,-1097.69995117,24.89999962,89.97802734},
	{1172.00000000,-1104.69995117,24.70000076,89.97802734},
	{1171.90002441,-1070.80004883,28.10000038,89.97802734},
	{1199.50000000,-1029.09997559,31.79999924,179.97802734},
	{1237.30004883,-1028.50000000,31.79999924,179.97802734},
	{820.79998779,-1411.90002441,13.30000019,359.97802734},
	{848.90002441,-1412.09997559,13.19999981,359.97253418},
	{883.79998779,-1412.30004883,12.89999962,359.97253418},
	{908.59997559,-1467.90002441,13.39999962,269.97253418},
	{908.29998779,-1509.59997559,13.39999962,269.96704102},
	{858.09997559,-1523.90002441,13.39999962,269.96704102},
	{801.00000000,-1689.40002441,13.39999962,269.96704102},
	{801.29998779,-1703.59997559,13.39999962,269.96704102},
	{801.09997559,-1724.00000000,13.39999962,269.96704102},
	{796.00000000,-1759.90002441,13.30000019,179.96704102},
	{764.29998779,-1744.19995117,12.10000038,89.96704102},
	{763.40002441,-1690.69995117,4.30000019,89.96154785},
	{788.09997559,-1665.59997559,13.30000019,179.96154785},
	{648.29998779,-1644.30004883,14.80000019,89.95605469},
	{647.59997559,-1614.40002441,15.00000000,89.95056152},
	{196.10000610,-1389.90002441,48.00000000,40.00000000},
	{255.50000000,-1337.59997559,52.70000076,39.99572754},
	{289.29998779,-1314.19995117,53.90000153,39.99572754},
	{347.29998779,-1280.59997559,53.79999924,29.99572754},
	{409.60000610,-1252.90002441,51.59999847,29.99267578},
	{563.00000000,-1196.00000000,44.59999847,20.00000000},
	{634.90002441,-1111.09997559,46.50000000,39.99511719},
	{684.40002441,-1061.69995117,49.40000153,59.99023438},
	{725.79998779,-985.70001221,52.70000076,59.98535156},
	{312.60000610,-1196.09997559,76.00000000,219.98535156},
	{253.89999390,-1239.09997559,72.30000305,210.98474121},
	{220.69999695,-1267.30004883,65.19999695,239.98474121},
	{339.50000000,-1197.19995117,76.30000305,39.97985840},
	{402.70001221,-1168.40002441,78.30000305,149.97924805},
	{579.20001221,-1127.40002441,49.20000076,199.97436523},
	{632.59997559,-1093.40002441,46.79999924,213.97314453},
	{668.00000000,-1057.00000000,49.29999924,233.96972656},
	{691.40002441,-1014.79998779,51.70000076,243.96484375},
	{828.70001221,-868.50000000,68.59999847,201.96240234},
	{872.20001221,-855.09997559,77.30000305,201.96166992},
	{921.09997559,-832.20001221,93.59999847,201.96166992},
	{831.59997559,-880.29998779,68.19999695,331.96166992},
	{924.59997559,-842.20001221,93.59999847,21.95739746},
	{976.59997559,-814.29998779,97.59999847,21.95617676},
	{1030.19995117,-791.50000000,102.80000305,21.95617676},
	{1081.80004883,-777.50000000,107.69999695,1.95617676},
	{1077.90002441,-765.50000000,107.59999847,189.95556641},
	{1063.90002441,-623.79998779,115.69999695,9.95361328},
	{1082.59997559,-626.00000000,113.00000000,9.94812012},
	{998.20001221,-644.50000000,121.50000000,29.94812012},
	{910.70001221,-681.79998779,116.19999695,229.94323730},
	{949.00000000,-696.29998779,121.90000153,29.93835449},
	{898.40002441,-769.40002441,97.09999847,9.93774414},
	{832.79998779,-798.29998779,73.09999847,9.93713379},
	{794.29998779,-807.40002441,65.90000153,9.93713379},
	{897.29998779,-711.79998779,109.59999847,260.00000000},
	{239.65, -95.84, 1.58,   91.32},
	{239.74, -118.88, 1.58,   91.32},
	{325.93, -121.10, 1.58,   271.10},
	{325.89, -95.86, 1.58,   271.10},
	{265.45, -64.92, 1.58,   179.96},
	{239.69, -26.58, 1.58,   89.71},
	{736.57, -523.21, 16.21,   179.02},
	{779.00, -523.25, 16.21,   179.02},
	{813.12, -523.26, 16.21,   179.96},
	{738.81, -536.99, 16.21,   1.11},
	{777.70, -536.99, 16.21,   1.94},
	{2350.80, 188.64, 26.22,   91.00},
	{2350.75, 134.63, 26.22,   91.00},
	{2350.71, 105.32, 26.22,   91.00},
	{2400.71, 22.17, 26.22,   91.00},
	{2470.83, 66.71, 26.22,   91.00},
	{2540.73, 76.81, 26.22,   91.00},
	{2540.66, 5.85, 26.22,   91.00},
	{2498.47, 104.91, 26.22,   359.23},
	{2431.72, -35.15, 26.22,   359.23},
	{2378.88, -35.13, 26.22,   359.23},
	{2313.62, -105.08, 26.22,   359.23},
	{2259.08, -105.03, 26.22,   359.23},
	{2443.21, 48.53, 26.22,   178.94},
	{2421.21, 48.45, 26.22,   178.94},
	{2383.01, 98.79, 26.22,   178.94},
	{2475.12, 118.51, 26.22,   178.94},
	{2512.74, 118.49, 26.22,   178.94},
	{2509.32, -15.08, 26.22,   359.23},
	{1903.05, -1049.86, 23.89,   358.00},
	{1953.33, -1054.39, 24.10,   350.34},
	{2026.01, -1060.01, 24.55,   157.00},
	{2065.52, -1077.81, 24.76,   157.00},
	{2105.70, -1095.61, 25.04,   155.39},
	{2153.94, -1088.39, 25.03,   155.00},
	{2023.31, -1129.72, 24.72,   179.00},
	{1992.58, -1129.78, 25.64,   179.00},
	{1944.96, -1129.73, 25.64,   181.21},
	{1904.3395, -1129.8004, 24.6400,   181.21},
	{2077.97, -1127.56, 23.92,   90.31},
	{2077.91, -1163.08, 23.92,   89.89},
	{2089.25, -1294.75, 23.89,   179.96},
	{2128.76, -1294.73, 23.89,   179.96},
	{2191.03, -1294.59, 23.89,   179.96},
	{2247.32, -1294.73, 23.89,   179.96},
	{2094.57, -1226.91, 23.89,   360.00},
	{2154.48, -1226.86, 23.89,   360.00},
	{2205.32, -1226.86, 23.89,   360.00},
	{2253.96, -1226.92, 23.89,   360.00},
	{2151.10, -1306.91, 23.89,   360.00},
	{2107.25, -1306.97, 23.89,   360.00},
	{2227.45, -1390.26, 23.89,   360.00},
	{2263.73, -1390.36, 23.89,   360.00},
	{2206.45, -1403.90, 23.89,   269.38},
	{2147.68, -1378.29, 23.89,   179.96},
	{2135.47, -1426.23, 23.89,   90.49},
	{2135.48, -1470.86, 23.89,   90.49},
	{2186.56, -1378.25, 23.89,   179.96},
	{2206.53, -1488.03, 23.89,   269.38},
	{1855.69, -1926.20, 13.44,   180.00},
	{1903.58, -1926.18, 13.44,   180.00},
	{1944.11, -1926.27, 13.44,   180.00},
	{1995.55, -1718.13, 13.50,   270.55},
	{1995.59, -1647.34, 13.50,   270.55},
	{2074.87, -1728.97, 13.50,   270.55},
	{2074.88, -1706.43, 13.50,   270.55},
	{2074.80, -1649.38, 13.50,   270.55},
	{2074.79, -1624.52, 13.50,   270.55},
	{2008.48, -1635.21, 13.50,   90.28},
	{2008.48, -1721.76, 13.50,   90.28},
	{2314.05, -1726.07, 13.42,   179.55},
	{2386.48, -1725.76, 13.42,   179.55},
	{2389.23, -1653.06, 13.42,   179.55},
	{2366.88, -1652.96, 13.42,   179.55},
	{2285.65, -1652.69, 14.98,   182.25},
	{2642.57, 767.02, 10.84,   0.59},
	{2618.29, 767.06, 10.84,   0.59},
	{2565.09, 767.02, 10.84,   0.59},
	{2529.38, 766.97, 10.84,   0.59},
	{2551.88, 699.42, 10.87,   180.32},
	{2398.52, 706.79, 10.84,   0.59},
	{2369.56, 706.98, 10.84,   0.59},
	{2329.12, 706.88, 10.84,   0.59},
	{2258.87, 706.79, 10.84,   0.59},
	{2203.37, 706.77, 10.84,   0.59},
	{2122.67, 666.96, 10.84,   0.59},
	{2075.39, 667.23, 10.84,   0.59},
	{2030.08, 666.90, 10.84,   0.59},
	{2028.57, 746.85, 10.84,   0.59},
	{2072.46, 746.99, 10.84,   0.59},
	{2114.22, 747.03, 10.84,   0.59},
	{2394.46, 719.40, 10.87,   180.32},
	{2433.57, 724.43, 10.87,   90.27},
	{2433.68, 679.99, 10.87,   90.27},
	{2343.90, 719.52, 10.87,   180.32},
	{2393.25, 639.58, 10.87,   180.32},
	{2341.52, 639.45, 10.87,   180.32},
	{2252.82, 639.42, 10.87,   180.32},
	{2203.64, 639.33, 10.87,   180.32},
	{2201.28, 719.26, 10.87,   180.32},
	{2120.93, 759.50, 10.87,   180.32},
	{2070.09, 759.47, 10.87,   180.32},
	{2023.90, 759.45, 10.87,   180.32},
	{2034.44, 679.66, 10.87,   180.32},
	{2095.44, 679.43, 10.87,   180.32},
	{2153.85, 764.59, 10.87,   90.27},
	{1861.23, 708.06, 10.87,   270.72},
	{1303.57, 2034.20, 10.63,   89.38},
	{1303.69, 2001.51, 10.63,   89.38},
	{1394.07, 1990.95, 10.63,   89.38},
	{1393.90, 2024.64, 10.63,   89.38},
	{1393.58, 1926.95, 10.63,   89.38},
	{1533.87, 2074.94, 10.63,   89.38},
	{1533.83, 2114.63, 10.63,   89.38},
	{1624.99, 2154.48, 10.63,   89.38},
	{1624.71, 2096.19, 10.63,   89.38},
	{1624.71, 2045.27, 10.63,   89.38},
	{1381.06, 1994.91, 10.63,   271.13},
	{1380.93, 2035.42, 10.63,   269.63},
	{1612.15, 2035.01, 10.63,   269.63},
	{1611.98, 2065.01, 10.63,   269.63},
	{1612.14, 2115.02, 10.63,   269.63},
	{1611.95, 2148.89, 10.63,   269.63},
	{1699.60, 2121.21, 10.63,   269.63},
	{1700.27, 2075.47, 10.63,   269.63},
	{1700.60, 2040.05, 10.63,   269.63},
	{1700.92, 1985.08, 10.63,   269.63},
	{1560.99, 2011.05, 10.63,   270.30},
	{1561.03, 1989.74, 10.63,   270.30},
	{1380.92, 1895.00, 10.63,   271.13},
	{1480.91, 1892.00, 10.63,   271.13},
	{1480.97, 1937.24, 10.63,   271.13},
	{1300.29, 2547.20, 10.88,   90.08},
	{1391.93, 2551.38, 10.87,   90.08},
	{1484.43, 2532.94, 10.87,   90.08},
	{1594.32, 2663.57, 10.87,   90.08},
	{1914.71, 2753.74, 10.87,   90.08},
	{1953.12, 2748.35, 10.87,   180.72},
	{1989.09, 2748.43, 10.87,   180.72},
	{2023.63, 2748.47, 10.87,   180.72},
	{2064.93, 2748.47, 10.87,   180.72},
	{2053.51, 2650.59, 10.87,   180.72},
	{2011.46, 2650.65, 10.87,   180.72},
	{1985.99, 2650.74, 10.87,   180.72},
	{1943.95, 2650.69, 10.87,   180.72},
	{1659.71, 2739.69, 10.87,   180.72},
	{1623.39, 2740.00, 10.87,   180.72},
	{1578.96, 2739.51, 10.87,   180.72},
	{1564.48, 2827.96, 10.87,   180.72},
	{1606.19, 2828.01, 10.87,   180.72},
	{1669.44, 2828.21, 10.87,   180.72},
	{1615.70, 2596.47, 10.87,   180.72},
	{1653.03, 2596.10, 10.87,   180.72},
	{1551.35, 2596.23, 10.87,   180.72},
	{1499.03, 2596.12, 10.87,   180.72},
	{1335.61, 2596.18, 10.87,   180.72},
	{1306.87, 2596.19, 10.87,   180.72},
	{1281.20, 2596.15, 10.87,   180.72},
	{1240.80, 2601.34, 10.87,   269.24},
	{1285.23, 2561.32, 10.87,   269.24},
	{1285.18, 2537.78, 10.87,   269.51},
	{1379.27, 2536.53, 10.87,   269.51},
	{1471.01, 2534.72, 10.87,   269.51},
	{1332.01, 2583.56, 10.87,   360.00},
	{1355.20, 2583.58, 10.87,   360.00},
	{1421.89, 2583.46, 10.87,   360.00},
	{1446.24, 2583.39, 10.87,   360.00},
	{1488.70, 2582.01, 10.878,   360.00},
	{1510.08, 2581.70, 10.87,   360.00},
	{1529.74, 2582.02, 10.87,   360.00},
	{1582.53, 2582.17, 10.87,   360.00},
	{1650.35, 2582.03, 10.87,   360.00},
	{1557.09, 2727.03, 10.87,   360.00},
	{1595.83, 2726.94, 10.87,   360.00},
	{1628.76, 2726.99, 10.87,   360.00},
	{1668.93, 2727.10, 10.87,   360.00},
	{1699.00, 2706.95, 10.87,   360.00},
	{1720.95, 2707.02, 10.87,   360.00},
	{1001.12, 2025.14, 10.69,   269.86},
	{1001.23, 1976.18, 10.69,   269.86},
	{1001.18, 1924.32, 10.69,   269.86},
	{1001.16, 1878.22, 10.69,   269.86},
	{1101.15, 1974.30, 10.69,   269.86},
	{1101.13, 2024.37, 10.69,   269.86},
	{901.13, 2051.30, 10.69,   269.86},
	{901.12, 1984.46, 10.69,   269.86},
	{913.65, 2031.43, 10.69,   90.34},
	{913.78, 1932.05, 10.69,   90.34},
	{1013.64, 1929.09, 10.69,   90.34},
	{1013.67, 1876.48, 10.69,   90.34},
	{1013.65, 1848.01, 10.69,  90.34},
	{1013.70, 1976.77, 10.69,   90.34},
	{1013.65, 2029.22, 10.69,   90.34},
	{-2800.30004883,-187.19999695,7.00000000,270.00000000},
	{-2800.30004883,-162.69999695,7.00000000,270.00000000},
	{-2800.19995117,-137.00000000,7.00000000,270.00000000},
	{-2800.89990234,-124.40000153,7.00000000,270.00000000},
	{-2800.00000000,-97.30000305,7.00000000,270.00000000},
	{-2800.19995117,-86.09999847,7.00000000,270.00000000},
	{-2799.80004883,-44.40000153,7.00000000,270.00000000},
	{-2800.19995117,-22.89999962,7.00000000,270.00000000},
	{-2800.60009766,3.59999990,7.00000000,270.00000000},
	{-2800.80004883,24.10000038,7.00000000,270.00000000},
	{-2800.00000000,76.00000000,7.00000000,270.00000000},
	{-2799.89990234,93.90000153,7.00000000,270.00000000},
	{-2800.00000000,115.19999695,7.00000000,270.00000000},
	{-2800.30004883,138.89999390,7.00000000,270.00000000},
	{-2800.10009766,177.69999695,7.00000000,270.00000000},
	{-2800.60009766,202.60000610,7.00000000,270.00000000},
	{-2800.19995117,220.60000610,7.00000000,270.00000000},
	{-2714.80004883,-176.30000305,4.09999990,90.00000000},
	{-2715.10009766,-149.60000610,4.09999990,90.00000000},
	{-2714.89990234,-130.00000000,4.09999990,90.00000000},
	{-2715.00000000,-111.69999695,4.09999990,90.00000000},
	{-2715.00000000,-86.59999847,4.09999990,90.00000000},
	{-2714.89990234,-54.50000000,4.09999990,90.00000000},
	{-2714.80004883,-37.09999847,4.09999990,90.00000000},
	{-2715.10009766,-16.50000000,4.09999990,90.00000000},
	{-2714.80004883,3.40000010,4.09999990,90.00000000},
	{-2714.69995117,23.60000038,4.09999990,90.00000000},
	{-2695.39990234,5.30000019,4.09999990,270.00000000},
	{-2695.80004883,-16.39999962,4.09999990,270.00000000},
	{-2697.80004883,-92.50000000,4.09999990,270.00000000},
	{-2697.60009766,-111.80000305,4.09999990,270.00000000},
	{-2697.69995117,-130.50000000,4.09999990,270.00000000},
	{-2698.10009766,-150.69999695,4.09999990,270.00000000},
	{-2697.50000000,-168.89999390,4.09999990,270.00000000},
	{-2697.19995117,-178.60000610,4.09999990,270.00000000},
	{-2697.60009766,-194.39999390,4.09999990,270.00000000},
	{-2612.80004883,-194.50000000,4.09999990,90.00000000},
	{-2612.89990234,-171.19999695,4.09999990,90.00000000},
	{-2612.89990234,-152.10000610,4.09999990,90.00000000},
	{-2612.80004883,-129.39999390,4.09999990,90.00000000},
	{-2612.69995117,-114.19999695,4.09999990,90.00000000},
	{-2612.50000000,-93.50000000,4.09999990,90.00000000},
	{-2510.19995117,-187.00000000,25.39999962,90.00000000},
	{-2509.89990234,-164.89999390,25.39999962,90.00000000},
	{-2509.80004883,-148.10000610,25.39999962,90.00000000},
	{-2595.10009766,-116.30000305,4.09999990,270.00000000},
	{-2596.00000000,-88.40000153,4.09999990,270.00000000},
	{-2868.19995117,802.70001221,37.00000000,70.00000000},
	{-2874.50000000,751.29998779,31.29999924,99.99938965},
	{-2865.39990234,723.90002441,28.89999962,119.99752808},
	{-2856.69995117,711.40002441,26.79999924,129.99267578},
	{-2839.69995117,686.59997559,21.50000000,129.99023438},
	{-2833.00000000,861.20001221,43.90000153,89.99023438},
	{-2832.30004883,890.50000000,43.90000153,89.98901367},
	{-2833.80004883,931.20001221,43.90000153,89.98901367},
	{-2832.30004883,908.79998779,43.90000153,89.98901367},
	{-2837.19995117,948.20001221,43.90000153,97.98901367},
	{-2852.60009766,976.09997559,43.09999847,127.98706055},
	{-2880.00000000,1008.70001221,37.90000153,107.98526001},
	{-2887.69995117,1028.69995117,35.29999924,107.98461914},
	{-2890.69995117,1059.59997559,32.09999847,85.98461914},
	{-2890.69995117,1082.80004883,30.29999924,85.98449707},
	{-2890.50000000,1108.40002441,26.50000000,85.98449707},
	{-2648.60009766,166.60000610,4.09999990,0.00000000},
	{-2621.10009766,166.69999695,4.09999990,0.00000000},
	{-2697.19995117,92.90000153,4.09999990,270.00000000},
	{-2697.50000000,118.59999847,4.09999990,270.00000000},
	{1418.5046,-1719.4152,13.5469,269.2261}
};
new Float:KfarmCP[41][6] =
{
    {-184.9722,-82.7518,4.0306},
	{-131.5195,45.3891,4.0314},
	{-129.7648,61.2338,4.0232},
	{-148.4111,45.9041,4.0279},
	{-188.4211,-58.5058,4.0253},
	{-202.8581,-79.2588,4.0287},
	{-221.0651,-66.4053,4.0322},
	{-177.5857,55.6894,4.0302},
	{-175.0521,76.7636,4.0246},
	{-197.2664,69.6795,4.0278},
	{-240.1194,-49.5897,4.0308},
	{-252.1668,-68.7349,4.0291},
	{-262.7175,-46.3346,4.0275},
	{-217.3090,77.5874,3.6632},
	{-218.6236,97.6469,3.3378},
	{-238.1613,89.3703,2.7706},
	{-278.9063,-53.0016,3.6665},
	{-250.8011,-104.9574,4.0266},
	{-68.7040,-134.6366,4.0254},
	{-46.4462,-107.6458,4.0299},
	{-12.9264,-15.5678,4.0344},
	{2.1369,-4.6207,4.0267},
	{5.5661,-27.8083,4.0280},
	{-21.4320,-99.4839,4.0263},
	{-20.7517,-116.0080,3.8912},
	{-1.2317,-109.2714,2.8481},
	{18.9543,-49.4316,4.0405},
	{32.3634,-58.4100,2.9603},
	{20.9043,-101.8049,1.7312},
	{34.4455,-119.9228,1.5343},
	{68.4658,-79.7715,1.5228},
	{67.4805,-42.6489,1.5188},
	{76.3979,6.2672,1.5196},
	{71.7280,23.9239,1.5195},
	{45.6861,4.9714,3.3803},
	{23.1783,7.6011,4.0307},
	{39.5740,43.2017,3.7079},
	{36.1423,62.1102,3.9340},
	{15.3264,44.8276,4.0422},
	{-25.1018,16.0796,4.0290},
	{-51.7812,20.7080,4.0368}
};
new Float:ZfarmCP[25][6] =
{
	{100.6866,-64.5787,1.5455},
	{56.0033,-145.7697,0.9653},
	{-111.8483,-116.8205,16.6434},
	{-318.5152,74.1949,71.3597},
	{-486.6695,374.2145,82.5771},
	{-738.7219,1122.5493,89.3947},
	{-333.3462,1444.7206,99.2022},
	{336.7698,1514.1581,102.1196},
	{1087.0231,1546.8097,105.9969},
	{1575.1433,1205.4236,102.8536},
	{1838.5952,572.6145,102.5804},
	{1927.1459,222.2732,103.4873},
	{2351.5313,-359.0211,118.3301},
	{2643.5742,-606.6374,172.7613},
	{2681.6025,-989.9222,161.0328},
	{2611.0366,-1618.5599,155.6738},
	{2086.8401,-2028.3580,151.8905},
	{1331.8174,-2077.0786,151.9869},
	{636.3494,-2029.3116,153.8539},
	{77.0836,-1852.5889,155.9250},
	{-267.1792,-1520.8143,156.9968},
	{-110.4687,-782.8535,143.0934},
	{-33.0220,-459.3522,91.2547},
	{36.1508,-163.4410,11.9876},
	{69.5594,10.8043,0.8711}
};

new Float:TfarmCP[70][6] =
{
	{-118.1748,97.4917,3.0651},
	{-102.3105,145.5701,3.0610},
	{-106.8568,149.7707,3.1874},
	{-112.8148,140.7989,3.0597},
	{-125.5881,105.3041,3.0673},
	{-133.4025,103.0735,3.0632},
	{-132.3515,113.7574,3.0645},
	{-118.9367,150.9895,3.4657},
	{-126.4329,156.4545,3.9562},
	{-131.5200,148.3374,3.6880},
	{-144.6826,109.5869,3.2178},
	{-153.9973,118.8447,3.3910},
	{-141.2469,156.2265,4.6573},
	{-146.6637,162.1942,5.4198},
	{-153.4110,150.9425,4.7476},
	{-165.3392,117.8946,3.3752},
	{-175.0434,117.1606,3.3544},
	{-174.4845,125.0051,3.5019},
	{-160.1963,164.7359,6.4523},
	{-166.2135,169.6932,7.6537},
	{-173.5223,160.1913,6.4298},
	{-187.2398,124.2202,3.7512},
	{-195.5763,128.0365,3.5244},
	{-193.6472,137.9212,4.4866},
	{-182.0522,171.8253,8.3759},
	{-190.6828,175.6244,8.6778},
	{-195.9674,169.0853,7.6857},
	{-207.4358,140.7540,3.7952},
	{-214.2281,141.1931,3.3721},
	{-212.4464,148.7155,4.2040},
	{-202.1340,172.1356,7.7502},
	{-205.6149,177.4380,8.3778},
	{-210.4960,166.1616,6.1400},
	{-241.9848,86.0831,1.7317},
	{-271.4360,-5.3024,1.8295},
	{-279.3911,-48.8195,2.4158},
	{-275.4128,-54.1622,3.0598},
	{-268.7864,-47.4318,3.0608},
	{-220.9540,94.0284,2.3265},
	{-212.7856,94.8735,2.5955},
	{-214.4124,84.4652,2.7034},
	{-263.1281,-64.3032,3.0636},
	{-258.4779,-70.3799,3.0646},
	{-253.8372,-65.0455,3.0634},
	{-203.2972,88.8572,3.0195},
	{-195.5331,88.9328,3.0653},
	{-196.3607,77.2021,3.0632},
	{-246.9209,-72.4962,3.0652},
	{-240.0850,-78.7946,3.0630},
	{-233.9185,-70.4941,3.0624},
	{-183.3356,80.3386,3.0632},
	{-176.9255,81.6690,3.0670},
	{-176.9210,72.5584,3.0632},
	{-227.2966,-77.2946,3.0637},
	{-221.4651,-82.8734,3.0636},
	{-214.6182,-70.3217,3.0632},
	{-165.5585,75.0176,3.0638},
	{-157.1545,74.6684,3.0633},
	{-159.6431,60.2371,3.0633},
	{-206.8094,-79.7317,3.0663},
	{-198.9123,-83.9681,3.0671},
	{-193.5644,-71.2071,3.0632},
	{-145.0178,64.9668,3.0636},
	{-137.8913,64.4220,3.0657},
	{-139.5562,52.8586,3.0630},
	{-187.3551,-78.2913,3.0636},
	{-184.3640,-83.0329,3.0691},
	{-175.9903,-72.4573,3.0632},
	{-148.7052,-2.5463,3.0632},
	{-101.1523,121.7584,3.0556}
};
new Float:FTestCP[32][3] =
{
 	{335.2493,2507.1733,16.7721},
	{245.4903,2507.4009,17.9485},
	{96.2973,2505.7954,36.9217},
	{-256.5354,2499.8550,106.8746},
	{-501.2109,2495.5256,163.0337},
	{-753.5185,2491.0242,227.6976},
	{-997.2165,2486.7146,256.8429},
	{-1230.9210,2482.5798,265.5193},
	{-1442.9468,2478.8218,290.0843},
	{-1597.0712,2451.8928,299.4502},
	{-1732.5657,2161.2761,301.4369},
	{-1687.0771,1842.2844,305.7045},
	{-1514.3478,1600.4325,312.6266},
	{-1315.4949,1377.0530,297.0782},
	{-1116.7668,1193.6467,298.9896},
	{-915.7100,1005.9146,307.8987},
	{-719.2480,598.1807,322.2305},
	{-481.8251,210.9960,331.3884},
	{-46.6716,-81.8203,354.6748},
	{355.5101,-353.4440,383.1853},
	{753.8187,-121.7109,393.5413},
	{845.5276,354.7133,419.5043},
	{788.0444,934.6417,516.7670},
	{446.4632,1510.7357,501.1467},
	{58.6717,1922.6689,515.6477},
	{-202.2462,2283.7065,545.9451},
	{-683.5740,2397.1563,557.9771},
	{-931.2388,2517.4988,559.1993},
 	{-711.4028,2742.4685,539.8641},
	{-382.1129,2624.3086,227.4810},
	{210.9538,2504.4670,18.1422},
	{410.8219,2501.4426,16.7665}
};
new Float:MotoCP[26][3] =
{
 	{-2059.0200, -126.1100, 34.0},
	{-2054.6084, -147.0878, 34.0},
	{-2055.1780, -152.9433, 34.0},
	{-2065.7983, -153.4618, 34.0},
	{-2089.6201, -154.5897, 34.0},
	{-2091.42, -210.18, 34.0},
	{-2082.95, -210.03, 34.0},
	{-2057.8975, -209.8797, 34.0},
	{-2053.1602, -215.7152, 34.0},
	{-2057.0249, -225.8122, 34.0},
	{-2070.8521, -231.4756, 34.0},
	{-2065.2292, -239.5741, 34.0},
	{-2071.4102, -247.3599, 34.0},
	{-2065.2590, -255.4796, 34.0},
	{-2051.60, -267.89, 34.0},
	{-2024.13, -259.16, 34.0},
	{-2024.10, -233.73, 34.0},
	{-2023.31, -207.86, 34.0},
	{-2016.04, -199.51, 34.0},
	{-2024.73, -179.44, 34.0},
	{-2016.11, -170.78, 34.0},
	{-2024.96, -175.48, 34.0},
	{-2031.50, -170.52, 34.0},
	{-2052.21, -163.68, 34.0},
	{-2052.32, -127.16, 34.0},
	{-2071.39, -121.10, 34.0}
};
new Float:TestCP[41][3] =
{
 	{-2059.0200, -126.1100, 34.0},
	{-2054.6084, -147.0878, 34.0},
	{-2055.1780, -152.9433, 34.0},
	{-2065.7983, -153.4618, 34.0},
	{-2089.6201, -154.5897, 34.0},
	{-2090.1208, -161.4055, 34.0},
	{-2085.0481, -170.1313, 34.0},
	{-2079.8274, -180.0190, 34.0},
	{-2084.1169, -191.9221, 34.0},
	{-2090.0884, -199.6911, 34.0},
	{-2085.2195, -209.9026, 34.0},
	{-2057.8975, -209.8797, 34.0},
	{-2053.1602, -215.7152, 34.0},
	{-2057.0249, -225.8122, 34.0},
	{-2070.8521, -231.4756, 34.0},
	{-2065.2292, -239.5741, 34.0},
	{-2071.4102, -247.3599, 34.0},
	{-2065.2590, -255.4796, 34.0},
	{-2057.6206, -261.1608, 34.0},
	{-2051.0156, -261.1801, 34.0},
	{-2061.3167, -259.7816, 34.0},
	{-2043.6409, -266.7408, 34.0},
	{-2028.5431, -257.5663, 34.0},
	{-2028.6276, -236.3317, 34.0},
	{-2024.5247, -215.4607, 34.0},
	{-2033.3253, -203.2597, 34.0},
	{-2034.0292, -198.1813, 34.0},
	{-2039.9347, -207.4130, 34.0},
	{-2017.5181, -205.4601, 34.0},
	{-2017.3644, -198.5782, 34.0},
	{-2024.6440, -185.7857, 34.0},
	{-2025.4039, -172.4389, 34.0},
	{-2033.2543, -170.1053, 34.0},
	{-2051.2263, -168.5887, 34.0},
	{-2050.9883, -161.9117, 34.0},
	{-2043.2867, -154.1868, 34.0},
	{-2024.8883, -153.6865, 34.0},
	{-2025.2654, -137.3493, 34.0},
	{-2032.9283, -137.1115, 34.0},
	{-2052.6453, -133.3875, 34.0},
	{-2069.7473, -124.5639, 34.0}
};
new Float:IncCPPos[INC_CPs][44] =
{
	{767.1450,-1045.3896,23.9731,776.8019,-1038.0181,24.2658},
	{955.3633,-1330.1484,13.3765,953.9100,-1335.5221,13.5389},
	{1198.9749,-1441.2113,13.3481,1206.0974,-1438.9908,13.3828},
	{1213.5999,-1574.7318,13.3906,1217.2823,-1583.1549,13.5469},
	{1138.3198,-1743.4321,13.3984,1139.4956,-1760.5665,13.5942},
	{395.0161,-1775.0806,5.3623,385.2637,-1817.8198,7.8409},
	{453.0342,-1500.5748,30.8837,459.5194,-1500.8080,31.0414},
	{822.6261,-1596.8116,13.3828,822.8293,-1589.4729,13.5545},
	{1741.0114,-1596.5645,13.3819,1739.3080,-1583.7665,14.1583},
	{1824.1311,-1685.0016,13.3828,1835.0616,-1682.3575,13.4055},
	{2288.9473,2419.0779,10.8203,2287.1638,2429.7104,10.8203},
	{2114.6890,2083.5286,10.8203,2086.3657,2074.2183,11.0547},
	{1986.9327,1085.8973,10.8203,1977.7756,1076.0548,10.8203},
	{2614.7888,1162.4569,10.8203,2637.4773,1182.7587,10.8203},
	{2496.7053,1526.4484,10.8125,2481.6992,1525.5863,11.7108},
	{2583.9001,2001.6904,10.8203,2546.8918,1971.8082,10.8203},
	{2884.9507,2438.1228,10.8203,2876.7019,2446.1970,11.0690},
	{2160.3674,2780.6301,10.8203,2172.6409,2795.6777,10.8203},
	{1472.9072,2385.1072,10.8203,1442.1285,2360.2480,10.8203},
	{1654.7034,1796.7312,10.8203,1671.5212,1814.3573,10.8203},
	{1561.0010,981.8759,10.8203,1557.5923,990.4278,10.8203},
	{2116.7949,2461.2368,10.8203,2085.7800,2486.2427,11.0781}
};
new Float:PizzaCPPos[Pizza_CPs][28] =
{
	{1440.1667,-1737.8706,13.5469,1435.2152,-1739.8103,13.5469},
	{1382.3086,-1797.8336,13.5469,1382.6823,-1803.2275,13.5469},
	{1776.6429,-1902.4270,12.9070,1772.1271,-1901.4381,13.5535},
	{2213.4614,-1144.1184,25.3181,2219.9824,-1149.0887,25.7654},
	{1188.1270,-1310.5155,13.0823,1184.5132,-1316.7859,13.5726},
	{187.0143,-124.0223,1.0808,193.8266,-116.8488,1.5496},
	{-84.5102,112.2954,2.6442,-86.5782,102.0456,3.1172},
	{-85.2322,-323.6229,0.9474,-103.6221,-311.7107,1.4297},

	{-52.2622,1205.6853,18.8788,-61.6785,1207.6107,19.6705},
	{2030.7439,991.9927,10.3462,2031.5634,987.1809,10.8131},
	{2600.1536,1051.1808,10.3450,2599.8362,1058.9191,10.8125},
	{2320.6665,2420.6665,10.3401,2326.4238,2420.3315,10.8203},
	{2345.1563,2406.7139,10.3474,2350.0383,2406.5601,10.8203},
	{2534.8772,2128.6367,10.3500,2536.9409,2135.6943,10.8203}
};
new Float:MinPos[4][3] =
{
	{-99.1655,116.7517,3.1096},
	{-100.7876,112.9081,3.1096},
	{-103.8008,104.6256,3.1172},
	{-105.0540,100.2948,3.1172}
};

stock CreateTeamVehicle(org, rank, model, Float:X, Float:Y, Float:Z, Float:A, Color_1, Color_2, spawntime, number_region[] = "", number_name[] = "")
{
	new carid = J_AddStaticVehicleEx(model, X, Y, Z, A, Color_1, Color_2, spawntime);

	VehicleInfo[carid][vTeam] = org;
	VehicleInfo[carid][vRank] = rank;

	if(strlen(number_region) > 3 && strlen(number_name) > 3)
		SetString(VehicleInfo[carid][vNumber], (str_f("%s,%s,%s,4", number_name, number_region, number_region)));

	return carid;
}

stock CreateJobVehicle(job,model,Float:X,Float:Y,Float:Z,Float:A,Color_1,Color_2,spawntime)
{
	new carid = J_AddStaticVehicleEx(model, X, Y, Z, A, Color_1, Color_2, spawntime);

	VehicleInfo[carid][vJob] = job;
	
	return carid;
}

enum _Veeh
{
	vGorod,
	vCena,
	vName[50],
	Text3D:vText,
	vReis
}
new Vehs[MAX_VEHICLES][_Veeh];
new pPressed[MAX_PLAYERS];
enum BUSLLS {
	BUSSTATION1,
	Float:BUS_COORD1[3]
};
static const Float:BusCityLS[37][BUSLLS] = {
	{0,{1229.8259,-1829.7358,13.5368}},
	{0,{1280.2579,-1854.6804,13.5182}},
	{0,{1652.2408,-1873.4386,13.5162}},
	{0,{1734.5934,-1819.4779,13.5007}},
	{1,{1816.8345,-1904.2699,13.6184}},
	{0,{1818.5557,-1914.4448,13.5211}},
	{0,{1942.7035,-1933.7701,13.5162}},
	{1,{1965.2905,-1784.1429,13.5104}},
	{0,{1965.2986,-1775.8351,13.5162}},
	{0,{1834.2664,-1749.8036,13.5161}},
	{1,{1824.0920,-1645.9943,13.5162}},
	{0,{1824.0588,-1627.0508,13.5162}},
	{0,{1580.0244,-1590.1259,13.5271}},
	{0,{1432.5289,-1571.1511,13.4886}},
	{0,{1455.5337,-1456.0300,13.4987}},
	{0,{1583.1376,-1443.8529,13.5238}},
	{0,{1610.7544,-1324.1510,17.4376}},
	{1,{1538.7518,-1294.6869,16.0552}},
	{0,{1521.1030,-1295.0481,15.1298}},
	{0,{1456.5043,-1255.2910,13.5255}},
	{0,{1371.3203,-1239.2648,13.5156}},
	{1,{1339.4738,-1306.8401,13.5837}},
	{0,{1339.5033,-1314.6669,13.5420}},
	{0,{1340.9142,-1382.7581,13.6311}},
	{0,{1223.4369,-1393.6273,13.3420}},
	{1,{1209.1743,-1316.7479,13.5312}},
	{0,{1209.0643,-1303.7913,13.5224}},
	{0,{1080.9596,-1278.3923,13.5390}},
	{0,{1056.1063,-1378.4590,13.5907}},
	{0,{1324.8569,-1407.8351,13.4525}},
	{0,{1438.4069,-1443.2587,13.5189}},
	{0,{1427.7025,-1707.5081,13.5161}},
	{1,{1502.1509,-1735.7925,13.5162}},
	{0,{1502.1509,-1735.7925,13.5162}},
	{0,{1567.4381,-1748.1270,13.5161}},
	{0,{1568.1758,-1859.9463,13.5161}},
	{0,{1281.2180,-1848.9690,13.5216}}
};

enum BUSFLS 
{
	BUSSTATION2,
	Float:BUS_COORD2[3]
};

static const Float:BusFarm[67][BUSFLS] = 
{
	{0,{1237.8948,-1832.1141,13.4713}},
	{0,{1404.0356,-1874.5087,13.4578}},
	{0,{1652.9841,-1874.6194,13.4578}},
	{0,{1807.0486,-1834.2417,13.4592}},
	{1,{1818.7704,-1906.8622,13.4683}},
	{0,{1818.7704,-1906.8622,13.4683}},
	{0,{1927.7805,-1935.2821,13.4578}},
	{0,{1963.7667,-1893.1801,13.4578}},
	{1,{1964.7584,-1778.1088,13.4547}},
	{0,{1964.7584,-1778.1088,13.4547}},
	{0,{1911.3258,-1749.8579,13.4574}},
	{0,{1824.5112,-1725.7615,13.4745}},
	{1,{1824.8112,-1645.2742,13.4578}},
	{0,{1824.8112,-1645.2742,13.4578}},
	{0,{1853.1031,-1429.0073,13.4657}},
	{0,{1868.8618,-1164.9558,23.7471}},
	{0,{1915.4825,-1043.4963,23.8686}},
	{0,{2085.8872,-1099.6027,24.9618}},
	{1,{2235.0862,-1140.5504,25.7006}},
	{0,{2235.0862,-1140.5504,25.7006}},
	{0,{2394.4849,-1156.6980,28.8896}},
	{0,{2697.7700,-1155.8300,52.8518}},
	{0,{2890.3357,-1099.2585,10.9500}},
	{0,{2896.3125,-851.6042,10.9502}},
	{0,{2816.1965,-435.7941,20.9845}},
	{0,{2742.5786,-208.1715,29.8970}},
	{0,{2818.1643,27.4715,20.8995}},
	{0,{2733.5378,46.7397,22.6336}},
	{0,{2413.7217,44.1769,26.4117}},
	{0,{2395.8704,76.3691,26.4110}},
	{1,{2278.4397,95.1039,26.4167}},
	{0,{2278.4397,95.1039,26.4167}},
	{0,{2207.5850,44.9261,26.4122}},
	{0,{1920.4877,45.7306,34.2922}},
	{0,{1741.3544,111.9195,33.0462}},
	{0,{1510.2655,147.4181,31.5759}},
	{1,{1229.3667,278.9224,19.4813}},
	{0,{1229.3667,278.9224,19.4813}},
	{0,{1220.0930,333.0586,19.4829}},
	{0,{1296.6200,319.4578,19.4829}},
	{0,{1348.4712,377.3011,19.4842}},
	{0,{1361.6685,455.9211,19.9597}},
	{0,{1159.1312,557.9290,19.9648}},
	{0,{1008.9088,459.5093,19.9578}},
	{0,{844.3448,347.9556,19.9638}},
	{0,{524.7679,249.8273,14.7410}},
	{0,{313.7930,79.9660,3.1327}},
	{1,{-2.4951,167.0647,2.1562}},
	{0,{-2.4951,167.0647,2.1562}},
	{0,{-169.3714,232.4576,10.7568}},
	{0,{-267.1622,87.9629,1.1528}},
	{0,{-285.3360,-214.5397,1.1534}},
	{1,{-153.9026,-375.9617,1.1538}},
	{0,{-153.9026,-375.9617,1.1538}},
	{0,{17.6611,-500.0209,8.4701}},
	{0,{46.8314,-657.7147,3.5617}},
	{0,{320.6441,-571.8426,40.6437}},
	{0,{677.5936,-675.7714,16.2595}},
	{0,{692.6474,-845.8254,43.3442}},
	{0,{796.1514,-1138.9399,24.0360}},
	{0,{795.8639,-1377.2534,13.4896}},
	{0,{854.6149,-1407.6465,13.2316}},
	{1,{1271.4054,-1409.2161,13.1092}},
	{0,{1271.4054,-1409.2161,13.1092}},
	{0,{1339.3062,-1426.6134,13.4578}},
	{0,{1295.0242,-1667.2679,13.4578}},
	{0,{1294.7853,-1829.2402,13.4578}}
};
enum BUSZLS {
    BUSSTATION3,
	Float:BUS_COORD3[3]
};
static const Float:BusZav[39][BUSZLS] = 
{
	{0,{1229.2997,-1831.3430,13.4918}},
	{0,{1656.7872,-1874.7206,13.4766}},
	{0,{1692.0085,-1824.3645,13.4765}},
	{0,{1807.9644,-1835.1954,13.4760}},
	{1,{1819.0844,-1905.2897,13.4900}},
	{0,{1819.0844,-1905.2897,13.4900}},
	{0,{1945.8931,-1934.5231,13.4759}},
	{0,{1963.6215,-1765.2841,13.4761}},
	{0,{1835.3751,-1750.2057,13.4757}},
	{1,{1824.7355,-1646.5450,13.4763}},
	{0,{1824.7355,-1646.5450,13.4763}},
	{0,{1852.6595,-1275.8950,13.4841}},
	{0,{1731.1975,-1298.5696,13.5214}},
	{1,{1549.8947,-1293.5890,16.5593}},
	{0,{1549.8947,-1293.5890,16.5593}},
	{0,{1467.7245,-1296.6996,13.5162}},
	{0,{1456.8760,-1246.0756,13.4824}},
	{0,{1369.8267,-1238.0427,13.4760}},
	{0,{1379.0013,-961.8619,34.1029}},
	{0,{1173.1611,-939.0876,42.9138}},
	{0,{1259.4996,-366.2016,2.9810}},
	{0,{1188.1992,-177.1511,40.3592}},
	{0,{943.0252,-176.3220,11.2184}},
	{0,{543.1816,-138.7326,37.4017}},
	{0,{347.0766,-139.8066,1.6424}},
	{0,{296.2548,-139.2764,1.5204}},
	{0,{280.4119,-196.8805,1.5154}},
	{0,{29.9225,-205.7583,1.5759}},
	{0,{-293.6570,-146.0782,1.4663}},
	{1,{-146.8190,-382.9973,1.1712}},
	{0,{36.6532,-623.3799,3.4851}},
	{0,{203.1494,-651.0359,19.7352}},
	{0,{401.8615,-586.5921,37.6639}},
	{0,{665.8414,-665.6905,16.3843}},
	{0,{793.1093,-1028.8997,25.4933}},
	{0,{794.4880,-1380.8113,13.5557}},
	{0,{1134.5815,-1407.9766,13.5701}},
	{0,{1328.6002,-1407.6282,13.4327}},
	{0,{1295.3855,-1766.4696,13.4766}}
};
enum BUSALS {
    BUSSTATION4,
	Float:BUS_COORD4[3]
};
static const Float:BusAvto[28][BUSALS] = {
	{0,{1232.6331,-1830.5366,13.4941}},
	{0,{1410.1094,-1875.3966,13.4760}},
	{0,{1656.1490,-1874.8623,13.4756}},
	{0,{1692.0580,-1827.3738,13.4761}},
	{0,{1808.1899,-1835.3752,13.4761}},
	{1,{1818.9661,-1905.0737,13.4903}},
	{0,{1818.9661,-1905.0737,13.4903}},
	{0,{1941.8381,-1934.3352,13.4759}},
	{0,{2072.3174,-1935.4684,13.4711}},
	{0,{2091.6484,-1765.0592,13.4909}},
	{0,{2174.4597,-1754.3929,13.4692}},
	{0,{2403.6680,-1734.2816,13.4759}},
	{1,{2410.3813,-1906.8245,13.4759}},
	{0,{2410.9624,-1946.8339,13.4758}},
	{0,{2226.4150,-1969.8279,13.4749}},
	{0,{2220.7681,-1907.9124,13.4615}},
	{0,{2094.4858,-1892.2651,13.4661}},
	{1,{1982.1689,-1928.8876,13.4753}},
	{0,{1982.1689,-1928.8876,13.4753}},
	{0,{1832.2825,-1929.9409,13.4775}},
	{0,{1824.0001,-1837.5123,13.5067}},
	{0,{1703.1348,-1809.0640,13.4597}},
	{0,{1598.1779,-1869.9440,13.4766}},
	{0,{1571.9581,-1745.8114,13.4766}},
	{1,{1498.0388,-1728.6017,13.4759}},
	{0,{1489.6395,-1728.8545,13.4765}},
	{0,{1402.1185,-1729.0494,13.4836}},
	{0,{1386.6500,-1858.5278,13.4759}}
};

////////маршутки лв
enum BUSLV { ///////////с лс до лв
    BUSSTATION5,
	Float:BUS_COORD5[3]
};
static const Float:BusLv[51][BUSLV] = {
	{0,{1232.0515,-1828.6260,13.4986}},
	{0,{1250.6344,-1854.9460,13.4760}},
	{0,{1488.9105,-1874.8153,13.4773}},
	{0,{1703.0072,-1813.7273,13.4600}},
	{1,{1818.5599,-1906.5231,13.4893}},
	{0,{1818.5599,-1906.5231,13.4893}},
	{0,{1946.3177,-1934.2123,13.4760}},
	{1,{1963.8538,-1777.8281,13.4761}},
	{0,{1963.8538,-1777.8281,13.4761}},
	{0,{1801.3658,-1730.7200,13.4837}},
	{1,{1500.5328,-1729.7361,13.4750}},
	{0,{1500.5328,-1729.7361,13.4750}},
	{0,{1314.3804,-1718.7456,13.4760}},
	{0,{1359.2566,-1431.8987,13.4799}},
	{1,{1361.0975,-1266.0936,13.4760}},
	{0,{1361.0975,-1266.0936,13.4760}},
	{0,{1370.4576,-1058.4480,26.7226}},
	{0,{1399.8005,-951.6357,34.9892}},
	{0,{1565.7369,-993.6835,45.6616}},
	{0,{1708.4244,-785.1653,54.5776}},
	{0,{1680.0234,-236.2828,42.4546}},
	{0,{1657.3685,250.2939,29.9955}},
	{0,{1790.0594,656.9621,18.1466}},
	{0,{2000.8984,834.6299,6.8330}},
	{0,{2506.7175,844.3246,6.8291}},
	{0,{2727.5769,1250.8336,6.8329}},
	{0,{2796.3796,1456.4688,10.7554}},
	{0,{2824.8545,1389.0665,10.8473}},
	{1,{2823.2661,1255.8954,10.8554}},
	{0,{2823.2661,1255.8954,10.8554}},
	{0,{2794.2759,1315.3356,10.8434}},
	{0,{2625.3569,1298.4623,10.7653}},
	{1,{2604.9023,1097.9755,10.7646}},
	{0,{2604.9023,1097.9755,10.7646}},
	{0,{2501.0615,1075.6737,10.7651}},
	{0,{2345.2649,1046.8436,10.7651}},
	{0,{2334.6252,976.3047,10.7645}},
	{1,{2137.9341,976.5244,10.7816}},
	{0,{2137.9341,976.5244,10.7816}},
	{0,{2046.6974,952.9116,10.2044}},
	{0,{2024.6371,854.6613,6.8276}},
	{0,{1789.5865,804.9660,11.1350}},
	{0,{1726.7368,525.0765,28.1258}},
	{0,{1654.1354,-169.6108,35.2687}},
	{0,{1700.9017,-580.4525,37.3024}},
	{0,{1583.0924,-894.6972,49.9651}},
	{0,{1359.8951,-959.5404,34.0466}},
	{1,{1339.1453,-1311.2400,13.5118}},
	{0,{1339.1453,-1311.2400,13.5118}},
	{0,{1295.9526,-1554.2906,13.4825}},
	{0,{1285.6277,-1849.1674,13.4842}}
};
//////////
enum BUSLVV { ///////////с лс до лв
	BUSSTATION6,
	Float:BUS_COORD6[3]
};
static const Float:BusLvv[52][BUSLVV] = {
	{0,{2807.6387,1272.8435,10.8427}},
	{1,{2825.9631,1256.7458,10.8591}},
	{0,{2825.9631,1256.7458,10.8591}},
	{0,{2828.9734,1393.1162,10.8363}},
	{0,{2729.9451,1663.1802,6.8276}},
	{0,{2739.0483,1987.6598,6.8265}},
	{0,{2812.8105,2110.1235,10.7473}},
	{0,{2849.4526,2145.1411,10.7650}},
	{0,{2892.3428,2291.0251,10.7734}},
	{0,{2909.6057,2414.2551,10.9135}},
	{1,{2856.4448,2401.3391,10.9138}},
	{0,{2856.4448,2401.3391,10.9138}},
	{0,{2804.6528,2383.3884,10.9136}},
	{0,{2818.2456,2315.2917,10.9135}},
	{0,{2905.1653,2388.1152,10.7650}},
	{0,{2840.4058,2295.1409,10.8219}},
	{0,{2625.9592,2278.2600,10.7645}},
	{0,{2542.5381,2235.6853,10.7654}},
	{1,{2450.1213,2236.4241,10.7706}},
	{0,{2450.1213,2236.4241,10.7706}},
	{0,{2430.5205,2399.5078,10.7647}},
	{1,{2392.3000,2417.3269,10.8366}},
	{0,{2392.3000,2417.3269,10.8366}},
	{0,{2229.5918,2426.0535,10.7643}},
	{1,{2084.2234,2457.1541,10.7648}},
	{0,{2084.2234,2457.1541,10.7648}},
	{0,{2025.6925,2438.1533,10.7651}},
	{0,{2116.6624,2263.3884,10.7667}},
	{0,{2109.2144,2116.1926,10.7732}},
	{0,{1925.2623,2101.1592,10.7652}},
	{0,{1913.1256,2044.5667,10.7647}},
	{0,{1705.0833,2037.6892,10.7669}},
	{0,{1691.8285,1876.0144,10.7651}},
	{1,{1644.2288,1818.9999,10.7729}},
	{0,{1644.2288,1818.9999,10.7729}},
	{0,{1663.2039,1711.4940,10.7644}},
	{0,{1975.4893,1711.2468,10.7662}},
	{0,{2043.9906,1689.7333,10.7651}},
	{0,{2044.2896,1381.0764,10.7658}},
	{1,{2039.3444,1061.6316,10.7652}},
	{0,{2039.3444,1061.6316,10.7652}},
	{0,{2056.6633,974.5224,10.6306}},
	{1,{2161.5979,970.3667,10.8381}},
	{0,{2161.5979,970.3667,10.8381}},
	{0,{2328.8586,971.0248,10.7650}},
	{0,{2366.9402,1070.0721,10.7646}},
	{0,{2593.4543,1071.5558,10.7647}},
	{1,{2610.7393,1087.2466,10.7646}},
	{0,{2610.7393,1087.2466,10.7646}},
	{0,{2609.3401,1239.3336,10.7647}},
	{0,{2629.3052,1297.4266,10.7651}},
	{0,{2789.9265,1310.8939,10.8431}}
};
////////
enum BUSLVVV { ///////////с лс до лв
    BUSSTATION7,
	Float:BUS_COORD7[3]
};
static const Float:BusLvvv[54][BUSLVVV] = {
	{1,{2826.6458,1256.2856,10.8607}},
	{0,{2826.6458,1256.2856,10.8607}},
	{0,{2817.6826,1312.2994,10.8472}},
	{0,{2541.7107,1314.7201,10.7647}},
	{0,{2429.8262,1353.9536,10.7650}},
	{0,{2335.4736,1374.8931,10.7662}},
	{1,{2128.0342,1376.2758,10.7692}},
	{0,{2128.0342,1376.2758,10.7692}},
	{0,{2050.5156,1376.1844,10.7650}},
	{0,{2045.2562,1225.3993,10.7662}},
	{1,{2039.2996,1060.9802,10.7650}},
	{0,{2039.2996,1060.9802,10.7650}},
	{0,{2045.5696,869.7059,6.9740}},
	{0,{1741.0863,854.6646,9.5771}},
	{0,{1355.0416,907.3795,9.7279}},
	{0,{926.2228,743.3319,10.7975}},
	{0,{479.3568,737.7695,4.6967}},
	{0,{244.9114,935.9122,26.6957}},
	{0,{189.1044,1121.2612,15.2849}},
	{0,{82.1361,1200.2052,18.6089}},
	{1,{-82.8524,1203.1519,19.7575}},
	{0,{-82.8524,1203.1519,19.7575}},
	{0,{-115.2880,1240.1694,17.5618}},
	{0,{132.7793,1175.0040,16.2269}},
	{0,{261.1092,1218.7169,15.7113}},
	{1,{348.2864,1393.8882,6.9014}},
	{0,{348.2864,1393.8882,6.9014}},
	{0,{396.9423,1564.6307,17.3186}},
	{1,{646.7731,1761.4861,4.9962}},
	{0,{646.7731,1761.4861,4.9962}},
	{0,{652.9279,1807.9609,5.5642}},
	{0,{693.6188,1808.6732,5.6322}},
	{0,{711.8121,1844.6010,5.6461}},
	{0,{813.0897,1785.5085,3.8044}},
	{0,{830.9492,1542.2643,17.9034}},
	{0,{787.4529,1314.0424,25.1152}},
	{1,{806.6180,1143.0206,28.4117}},
	{0,{806.6180,1143.0206,28.4117}},
	{0,{535.7621,1059.8241,28.4218}},
	{0,{239.1753,979.0547,28.2874}},
	{0,{263.9735,879.7539,21.6726}},
	{0,{379.7841,660.2042,13.3631}},
	{0,{386.7987,698.2360,8.9994}},
	{0,{630.9131,655.3173,6.1711}},
	{0,{963.0237,730.8145,10.7728}},
	{0,{1254.0504,828.2292,8.4419}},
	{0,{1703.8965,831.3081,8.3600}},
	{0,{1966.6864,831.3790,6.8309}},
	{0,{2190.9299,832.0923,6.8290}},
	{0,{2519.5972,844.5468,6.8291}},
	{0,{2724.1719,1089.6066,6.8321}},
	{0,{2751.4805,1371.3278,7.0348}},
	{0,{2797.1931,1467.6797,10.9872}},
	{0,{2811.0874,1302.5314,10.8440}}
};



////////
enum BUSSF{ ///////////с лс до cf
    BUSSTATION8,
	Float:BUS_COORD8[3]
};
static const Float:bussf[67][BUSSF] = {
	{0,{1239.2727,-1830.1093,13.4772}},
	{0,{1222.9926,-1855.1899,13.4578}},
	{0,{1659.7306,-1873.6669,13.4587}},
	{0,{1691.8713,-1828.2920,13.4563}},
	{0,{1707.5065,-1815.3641,13.4411}},
	{1,{1818.9033,-1907.0626,13.4684}},
	{0,{1818.9033,-1907.0626,13.4684}},
	{0,{1940.1924,-1935.0177,13.4580}},
	{0,{2066.0974,-1935.1301,13.4468}},
	{0,{2084.1279,-1916.7261,13.4578}},
	{0,{2114.9438,-1532.5641,24.1030}},
	{0,{2114.6106,-1397.4122,23.9031}},
	{0,{2255.9529,-1385.9990,23.9079}},
	{0,{2272.8545,-1166.5625,26.2749}},
	{1,{2242.8049,-1137.0457,25.8989}},
	{0,{2242.8049,-1137.0457,25.8989}},
	{0,{2149.0205,-1093.2343,24.9249}},
	{0,{1874.5559,-1006.6810,36.1298}},
	{0,{1709.8173,-707.0225,47.3745}},
	{0,{1693.8153,-403.5671,36.4291}},
	{0,{1644.5189,-3.8706,36.6602}},
	{0,{1786.8777,646.0321,18.9150}},
	{0,{1809.8561,817.5914,10.8629}},
	{0,{1767.7992,852.4989,10.4403}},
	{0,{1405.0864,876.2901,7.0759}},
	{0,{928.0593,743.1429,10.7757}},
	{0,{477.9346,737.8159,4.7228}},
	{0,{-4.5236,639.8621,8.8318}},
	{0,{-619.5453,658.5139,16.7961}},
	{0,{-842.0254,964.0228,25.1174}},
	{0,{-878.1572,1142.8975,28.1087}},
	{0,{-1009.8782,1293.9994,40.2651}},
	{0,{-1284.6588,963.9929,45.2598}},
	{0,{-1523.9430,711.5268,45.3911}},
	{0,{-1816.2042,416.2890,17.6484}},
	{0,{-1875.0621,404.4098,17.2046}},
	{0,{-1986.7096,349.5109,34.9161}},
	{0,{-2007.7003,306.7575,34.9604}},
	{1,{-2009.9449,130.6911,27.6141}},
	{0,{-2009.9449,130.6911,27.6141}},
	{1,{-2009.3240,-86.2265,35.4043}},
	{0,{-2009.3240,-86.2265,35.4043}},
	{0,{-2007.1432,-273.2873,35.3966}},
	{0,{-2046.3518,-326.7133,35.3794}},
	{0,{-2385.0352,-325.1478,37.9981}},
	{0,{-2806.4470,-491.9019,7.2122}},
	{0,{-2916.6018,-1155.5824,9.5673}},
	{0,{-2940.6841,-1538.1550,10.9662}},
	{0,{-2867.6536,-1946.4441,37.2266}},
	{0,{-2525.5186,-2273.7234,29.1935}},
	{0,{-2323.9414,-2630.9778,59.4208}},
	{0,{-1918.3955,-2622.7783,58.2431}},
	{0,{-1612.5243,-2768.3389,46.9970}},
	{0,{-1149.4178,-2868.0261,67.7893}},
	{0,{-820.2522,-2833.2683,56.6978}},
	{0,{-214.1823,-2869.7571,39.2527}},
	{0,{9.9848,-2644.1697,40.2500}},
	{0,{-316.1310,-2113.1294,27.9829}},
	{0,{-266.0706,-1667.7366,14.9981}},
	{0,{79.3633,-1298.2041,13.1298}},
	{0,{604.4440,-1195.3882,19.1967}},
	{0,{625.6140,-1427.2957,13.8754}},
	{0,{621.9033,-1713.2443,14.2480}},
	{0,{665.4852,-1755.8931,13.5018}},
	{0,{1042.6567,-1842.6890,13.5036}},
	{0,{1102.1276,-1854.6323,13.4550}},
	{0,{1250.8386,-1855.1190,13.4580}}

};


// Objects
#define MAX_CREATE_OBJECTS 1500
enum obj_INFO
{
	objBaseID,
	objID,
	objModel,
	Float:objPosX,
	Float:objPosY,
	Float:objPosZ,
	Float:objRotX,
	Float:objRotY,
	Float:objRotZ,
	objHouseID,
	objBizID,
	objItemID,
	objWorld,
	objInterior
}
new
	BH_Object[MAX_CREATE_OBJECTS][obj_INFO],
	TOTALOBJECTS,
	EditObjectPlayer[MAX_PLAYERS];

const MAX_ADMIN_MAPPING = 1000;

enum admin_mapping
{
	AM_Object,
	AM_UID,

	Float:AM_Pos[3],
	Float:AM_Rot[3]
};

new 
	AdminMapping[MAX_ADMIN_MAPPING][admin_mapping],
	AdminMapping_List[MAX_PLAYERS][2];

enum BUSLVSF{ ///////////с лв до cf
        BUSSTATION9,
		Float:BUS_COORD9[3]
};
static const Float:buslvsf[69][BUSLVSF] = {
	{1,{2818.7419,1257.3925,10.8343}},
	{0,{2818.7419,1257.3925,10.8343}},
	{0,{2791.3337,1315.4778,10.8250}},
	{0,{2574.2002,1315.0728,10.8538}},
	{0,{2446.2585,1315.7064,10.8499}},
	{0,{2429.9224,1357.2341,10.7468}},
	{0,{2389.2612,1375.7986,10.7485}},
	{0,{2125.0715,1375.3788,10.7516}},
	{0,{2097.9458,1375.4659,10.7855}},
	{0,{2045.9497,1341.0956,10.7473}},
	{1,{2040.6155,1062.1938,10.7468}},
	{0,{2040.6155,1062.1938,10.7468}},
	{0,{2045.6891,881.5240,7.2298}},
	{0,{1995.8934,855.4678,6.8081}},
	{0,{1658.7972,854.5658,6.8740}},
	{0,{1356.7434,907.4755,9.6777}},
	{0,{1116.4193,845.9794,10.7428}},
	{0,{888.3245,727.7820,10.8321}},
	{0,{659.8762,679.7547,7.5954}},
	{0,{491.3829,731.1174,4.3072}},
    {0,{299.1613,838.0553,17.1871}},
	{0,{199.1845,1056.6332,21.0792}},
	{0,{169.6721,1152.3199,14.4374}},
	{0,{67.3102,1200.3102,18.6911}},
	{1,{-83.8147,1202.2227,19.7309}},
	{0,{-83.8147,1202.2227,19.7309}},
	{0,{-113.0133,1217.5348,19.0318}},
	{0,{-77.6962,1255.8416,12.6333}},
	{0,{169.3127,1147.4120,14.3619}},
	{0,{260.4173,874.7805,21.4181}},
	{0,{116.6964,703.6432,5.9623}},
	{0,{-231.3173,577.5603,15.7142}},
	{0,{-574.3392,637.8568,16.7930}},
	{0,{-831.6596,836.4021,19.8658}},
	{0,{-873.1947,1126.7213,26.9703}},
	{0,{-915.5178,1315.5579,37.8013}},
	{0,{-1085.5634,1198.1527,39.0290}},
	{0,{-1297.7290,949.5397,45.6279}},
	{0,{-1597.4331,633.9749,42.3623}},
	{0,{-1820.2052,411.9102,17.4357}},
	{0,{-1878.3140,399.3504,17.5204}},
	{0,{-1982.8495,349.0168,34.7826}},
	{0,{-2008.9194,245.0558,29.6036}},
	{0,{-2009.2172,123.8958,27.6140}},
	{1,{-1989.2716,176.2378,27.6140}},
	{0,{-1989.2716,176.2378,27.6140}},
	{0,{-2000.4724,328.1176,35.0907}},
	{0,{-1979.3467,340.7978,34.6584}},
	{0,{-1867.6576,403.1433,17.1183}},
	{0,{-1822.2546,375.9888,17.0860}},
	{0,{-1783.6349,394.4813,17.9640}},
	{0,{-1575.9696,625.4163,42.6431}},
	{0,{-1329.9995,885.0818,46.6918}},
	{0,{-1078.1804,1152.6123,38.2186}},
	{0,{-908.4866,931.0784,18.8703}},
	{0,{-700.2190,672.8992,16.6869}},
	{0,{-257.4713,550.0108,16.1901}},
	{0,{39.5957,634.2082,7.2312}},
	{0,{480.1574,709.7883,5.0814}},
	{0,{934.9865,720.3270,10.7901}},
	{0,{1191.9908,823.4895,9.5034}},
	{0,{1506.4880,830.6743,6.8950}},
	{0,{1887.7756,832.3083,8.4499}},
	{0,{2292.8589,831.5078,6.8095}},
	{0,{2658.0078,937.9959,6.8081}},
	{0,{2728.9512,1246.3154,6.8095}},
	{0,{2795.9653,1451.9988,10.7232}},
	{0,{2824.8608,1393.1545,10.8226}},
	{0,{2809.2686,1291.3936,10.8302}}
};


///////
enum BUSSFSF{ ///////////с лв до cf
        BUSSTATION10,
		Float:BUS_COORD10[3]
};
static const Float:bussfsf[55][BUSSFSF] = {
	{0,{-2167.1038,317.4204,34.8428}},
	{0,{-2023.2380,318.5129,34.6873}},
	{0,{-2009.1259,300.6385,34.3691}},
	{0,{-2009.8013,125.2293,27.2110}},
	{1,{-1988.5049,180.6631,27.2085}},
	{0,{-1988.5049,180.6631,27.2085}},
	{0,{-2001.5211,264.7843,31.2235}},
	{1,{-1999.0499,468.3500,34.6873}},
	{0,{-1999.0499,468.3500,34.6873}},
	{0,{-1998.5966,590.4084,34.6897}},
	{0,{-1855.5277,600.6783,34.6854}},
	{0,{-1709.1293,673.1445,24.4042}},
	{0,{-1708.8419,714.7418,24.4120}},
	{1,{-1637.9459,726.1580,14.1365}},
	{0,{-1637.9459,726.1580,14.1365}},
	{0,{-1578.1815,726.1118,7.0200}},
	{0,{-1526.2339,883.5734,6.7088}},
	{0,{-1579.1440,1109.5095,6.7088}},
	{1,{-1714.2565,1335.4342,6.7150}},
	{0,{-1714.2565,1335.4342,6.7150}},
	{0,{-1871.2581,1361.2819,6.7088}},
	{0,{-2006.2347,1313.5310,6.7088}},
	{0,{-2233.9192,1336.1649,6.7088}},
	{1,{-2630.1072,1309.6821,6.7104}},
	{0,{-2630.1072,1309.6821,6.7104}},
	{0,{-2784.3318,1294.9115,5.4524}},
	{0,{-2884.1899,1114.9465,24.7271}},
	{0,{-2811.4885,877.4551,43.5760}},
	{0,{-2766.2197,805.7432,52.1425}},
	{0,{-2753.2576,794.6345,52.8756}},
	{0,{-2753.7847,689.5037,40.7973}},
	{0,{-2753.0166,577.3898,14.0619}},
	{0,{-2737.8687,562.3759,14.0691}},
	{1,{-2632.8486,560.7029,14.1319}},
	{0,{-2632.8486,560.7029,14.1319}},
	{0,{-2441.3323,561.8361,23.8603}},
	{0,{-2401.4966,561.9412,24.4133}},
	{0,{-2389.6692,549.9596,24.8637}},
	{0,{-2285.2390,391.5641,34.4838}},
	{0,{-2254.6250,212.0838,34.8417}},
	{1,{-2255.0723,133.9813,34.8427}},
	{0,{-2255.0723,133.9813,34.8427}},
	{0,{-2260.0593,-48.1074,34.8416}},
	{0,{-2236.5339,-73.3561,34.8419}},
	{1,{-2029.0266,-73.3784,34.8431}},
	{0,{-2029.0266,-73.3784,34.8431}},
	{0,{-2005.2770,-57.4544,34.8351}},
	{0,{-2004.3948,13.9501,32.7774}},
	{0,{-2020.1083,32.0629,32.8326}},
	{0,{-2157.3428,32.7148,34.8390}},
	{0,{-2144.7627,190.4043,34.8720}},
	{0,{-2164.1365,211.0393,34.8426}},
	{0,{-2239.3037,210.7358,34.8418}},
	{0,{-2248.9690,227.7879,34.8352}},
	{0,{-2248.8120,305.6744,34.8365}}
};


enum BUSSFFA{ ///////////с лв до cf
        BUSSTATION11,
		Float:BUS_COORD11[3]
};
static const Float:bussffa[75][BUSSFFA] = {
	{0,{-2174.9050,317.7509,34.8427}},
	{0,{-2019.6237,318.1793,34.6871}},
	{0,{-2008.9510,305.0338,34.5090}},
	{1,{-2010.6046,132.7925,27.2097}},
	{0,{-2010.6046,132.7925,27.2097}},
	{0,{-2008.9885,-54.7401,34.8402}},
	{0,{-1992.7821,-71.9844,34.0853}},
	{0,{-1814.6967,-118.2254,5.1683}},
	{0,{-1801.4783,-128.7777,5.3002}},
	{0,{-1818.4156,-418.9573,14.9718}},
	{0,{-1821.5718,-560.0546,15.8870}},
	{0,{-1775.8096,-585.4281,16.0077}},
	{0,{-1764.6259,-605.3375,15.8596}},
	{0,{-1657.9926,-777.3015,42.9683}},
	{0,{-1332.6031,-817.1893,75.3023}},
	{0,{-1176.0317,-676.6423,48.4221}},
	{0,{-1056.9240,-463.1037,34.6965}},
	{0,{-947.2189,-254.8894,36.9878}},
	{0,{-792.8929,-249.9980,45.8879}},
	{0,{-562.7043,-256.6750,60.9046}},
	{0,{-316.2539,-286.0246,6.6690}},
	{0,{-272.0051,-223.7131,0.7491}},
	{0,{-302.1390,-159.6033,0.7516}},
	{0,{-224.5988,-172.3030,1.8700}},
	{0,{-142.8315,-189.3140,1.5519}},
	{0,{-125.6160,-173.4721,1.7245}},
	{0,{-126.3775,-20.3938,2.7886}},
	{1,{-52.7965,127.3154,2.7880}},
	{0,{-52.7965,127.3154,2.7880}},
	{0,{-27.6686,157.9936,2.1155}},
	{0,{-5.2347,159.2431,1.7491}},
	{0,{218.4274,46.1648,1.9498}},
	{0,{230.1113,-88.4340,1.1009}},
	{0,{230.0273,-268.5443,1.1006}},
	{0,{205.9705,-307.4175,1.1301}},
	{0,{332.2468,-391.9171,12.2810}},
	{0,{532.9624,-418.1426,28.4018}},
	{0,{631.2547,-417.7620,15.9580}},
	{0,{638.9210,-471.1431,15.8565}},
	{0,{599.3491,-505.5807,15.8574}},
	{0,{628.7352,-533.2062,15.8594}},
	{1,{637.9811,-580.6973,15.8584}},
	{0,{637.9811,-580.6973,15.8584}},
	{0,{647.9406,-622.0186,16.0518}},
	{0,{487.1001,-604.9935,35.3475}},
	{0,{227.8586,-604.9842,31.0738}},
	{0,{53.7878,-654.0306,3.4489}},
	{0,{46.8307,-617.3934,3.1673}},
	{0,{-69.5452,-430.3338,0.7478}},
	{1,{-159.3885,-356.7591,0.9042}},
	{0,{-159.3885,-356.7591,0.9042}},
	{0,{-238.8560,-274.7635,0.7491}},
	{0,{-266.2452,-273.7684,1.3606}},
	{0,{-479.6364,-269.6306,46.8227}},
	{0,{-738.6415,-244.1123,55.8440}},
	{0,{-930.6696,-235.2151,38.3850}},
	{0,{-954.9512,-267.3421,36.2725}},
	{0,{-1127.2024,-527.6874,30.0361}},
	{0,{-1199.4417,-725.4346,57.2638}},
	{0,{-1394.0016,-813.6325,81.2812}},
	{0,{-1682.1772,-759.7511,40.5603}},
	{0,{-1759.1646,-598.3143,15.9505}},
	{0,{-1780.5062,-576.2640,16.0070}},
	{0,{-1815.9708,-560.0258,15.8876}},
	{0,{-1803.9103,-361.1591,19.1933}},
	{0,{-1797.0063,-128.9246,5.3084}},
	{0,{-1811.9873,-114.1868,5.1679}},
	{0,{-1964.3723,-62.7383,25.4352}},
	{1,{-2032.3367,-67.7764,34.8424}},
	{0,{-2032.3367,-67.7764,34.8424}},
	{0,{-2201.4539,-67.3160,34.8417}},
	{0,{-2238.8613,-67.4324,34.8414}},
	{0,{-2250.8760,-57.2726,34.8425}},
	{0,{-2249.4824,138.3279,34.8427}},
	{0,{-2249.3821,306.6966,34.8339}}
};

stock SetEngineStatus(carid, status, playerid)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,status,lights,alarm,doors,bonnet,boot,objective);
    VehicleInfo[carid][vEngine] = status;
	SetLightsStatus(carid, status, playerid != -1? playerid: -1);
    return 1;
}

stock SetLightsStatus(carid,status, playerid=-1)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,engine,status,alarm,doors,bonnet,boot,objective);
    VehicleInfo[carid][vLights] = status;
    return 1;
}

stock SetDoorsStatus(carid,status, playerid = -1)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,engine,lights,alarm,status,bonnet,boot,objective);
    /*if(playerid != -1 && GetPlayerState(playerid)==2 && !IsAVelik(carid) && !IsAPlane(carid) && !GetPlayerLauncher(playerid))
    {
        if(InventoryOpen{playerid}) return 0;
        if(PI[playerid][pSpeedo] == 0)
        {
			new number = GetVehicleID(carid);
		    DestroyPlayerTD(playerid, speeddraw[playerid][0]);
		    speeddraw[playerid][0] = CreatePlayerTextDraw(playerid, 531.000000, 396.000000, "lock");
			PlayerTextDrawAlignment(playerid, speeddraw[playerid][0], 2);
			PlayerTextDrawBackgroundColor(playerid, speeddraw[playerid][0], 255);
			PlayerTextDrawFont(playerid, speeddraw[playerid][0], 2);
			PlayerTextDrawLetterSize(playerid, speeddraw[playerid][0], 0.239998, 1.600000);
			PlayerTextDrawColor(playerid, speeddraw[playerid][0], -1);
			PlayerTextDrawSetOutline(playerid, speeddraw[playerid][0], 0);
			PlayerTextDrawSetProportional(playerid, speeddraw[playerid][0], 1);
			PlayerTextDrawSetShadow(playerid, speeddraw[playerid][0], 1);
			PlayerTextDrawUseBox(playerid, speeddraw[playerid][0], 1);
			if(IsAOwnableCar(carid)) PlayerTextDrawBoxColor(playerid, speeddraw[playerid][0], (CarInfo[number][cLock])?-1407312129:576000767);
			else if(VehicleInfo[carid][vJob]!=0 || IsAArendCar(carid)) PlayerTextDrawBoxColor(playerid, speeddraw[playerid][0], (VehicleInfo[carid][vLock])?-1407312129:576000767);
			PlayerTextDrawTextSize(playerid, speeddraw[playerid][0], 241.000000, 28.000000);
			PlayerTextDrawSetSelectable(playerid, speeddraw[playerid][0], 0);
			ShowPlayerTD(playerid, speeddraw[playerid][0]);
		}
		else if(!GetPlayerLauncher(playerid))
		{
		    new color;
			if(IsAOwnableCar(GetPlayerVehicleID(playerid)))
		    {
		        if(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cLock])color=-1407312129;
		        else color=576000767;
		    }
		    else
		    {
		        if(VehicleInfo[GetPlayerVehicleID(playerid)][vJob]!=0 || IsAArendCar(GetPlayerVehicleID(playerid)) )
		        {
		            if(VehicleInfo[GetPlayerVehicleID(playerid)][vLock])color=-1407312129;
		            else color=576000767;
		        }
		        else color=576000767;
		    }
		    PlayerTextDrawColor(playerid, speedometr[playerid][23], color);
		    PlayerTextDrawColor(playerid, speedometr[playerid][24], color);
		    PlayerTextDrawColor(playerid, speedometr[playerid][22], color);
			ShowPlayerTD(playerid, speedometr[playerid][23]);
			ShowPlayerTD(playerid, speedometr[playerid][22]);
			ShowPlayerTD(playerid, speedometr[playerid][24]);
		}
    }*/
    return 1;
}

stock SetBootStatus(carid,status)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,status,objective);
    VehicleInfo[carid][vBoot] = status;
    return 1;
}

stock SetAlarmStatus(carid,status)
{
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(carid,engine,lights,status,doors,bonnet,boot,objective);
    VehicleInfo[carid][vAlarm] = status;
    return 1;
}

stock GetEngineStatus(carid)
	return VehicleInfo[carid][vEngine];

stock GetLightsStatus(carid)
	return VehicleInfo[carid][vLights];

stock GetDoorsStatus(carid)
	return VehicleInfo[carid][vDoors];

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(GetPlayerLauncher(forplayerid))
	{
        SetVehicleWheelSize(vehicleid, vehicleWheelSize[vehicleid], forplayerid);

		if(!GetString(VehicleInfo[vehicleid][vNumber], "Arizona ST"))
		{
			new number_text[4][50];
			sscanf(VehicleInfo[vehicleid][vNumber], "P<,>a<s[50]>[4]", number_text);
			SetVehicleNumberPlates(vehicleid, strval(number_text[3]) + 1, number_text[0], number_text[1]);
		}
        
		for(new i; i < 10; i++)
		{
			if(i < 2)
   				SetVehicleWheelSettings(vehicleid, i, vehicleWheelSetting[vehicleid][i][1], vehicleWheelSetting[vehicleid][i][0], forplayerid);

		    if(i < 7)
		        SetVehicleWindowTint(vehicleid, i, vehicleWindowColors[vehicleid][i], forplayerid);
		    
		    if(!vehicleTuning[vehicleid][i]) 
				continue;
		    
		    switch i do
		    {
		        case 0..2: if(vehicleTuning[vehicleid][i] > 0) AddVehicleComponentEx(vehicleid, vehicleTuning[vehicleid][i], false, forplayerid);
		        case 3: SetVehicleFrontLight(vehicleid, vehicleTuning[vehicleid][i], forplayerid);
		        case 4: SetVehicleExhaustColor(vehicleid, vehicleTuning[vehicleid][i], forplayerid);
				case 5: SetVehicleBottomColor(vehicleid, vehicleTuning[vehicleid][i], forplayerid);
				case 6: SetVehicleWadPainting(vehicleid, vehicleTuning[vehicleid][i], VehicleInfo[vehicleid][vColor_1], forplayerid);
				case 7: SetVehicleWheelDisks(vehicleid, vehicleTuning[vehicleid][i], vehicleTuning[vehicleid][8], forplayerid);
				case 9: SendVehiclePacketData(vehicleid, 151, bool:vehicleTuning[vehicleid][i], forplayerid);
				default: { }
		    }
		}

        changeVehicleHandlingParametrs(vehicleid, forplayerid, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
	}
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	//if(GetPlayerLauncher(forplayerid) && GetRadioZone(vehicleid) != -1)
	//	destroyZoneAZVoice(GetRadioZone(vehicleid), true, forplayerid, false);
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(GetPlayerLauncher(playerid))
	{
		global_str = "";

		if(PI[forplayerid][pAdmin] && !AdminInfo[forplayerid][admNickNameTag])
			strcat(global_str, "icon_admin");

		if(GetPlayerADDVIP(forplayerid))
			strcat(global_str, (str_f("%sicon_vip_new", strlen(global_str) ? "|" : "")));

		setPlayerTag(forplayerid, playerid, strlen(global_str) ? true : false, global_str);

		for(new i; i < 8; i ++)
		{
			if(i < 2)
			{
				if(pTemp[forplayerid][tCustomIcon][i])
					setPlayerCustomIcon(forplayerid, i, true);
			}

			if(AksSlot[forplayerid][0][i] && AksSlot[forplayerid][2][i] && ItemsInfo[AksSlot[forplayerid][0][i]][itemCustom] == 2)
				createPlayerAccessory(playerid, forplayerid, i, true, ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachInfo][0], ItemsInfo[AksSlot[forplayerid][0][i]][itemModel], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][0], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][1], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][2], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][3], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][4], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][5], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][6], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][7], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachPosition][8], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachInfo][1], ItemsInfo[AksSlot[forplayerid][0][i]][itemAttachInfo][2]);

			else createPlayerAccessory(playerid, forplayerid, i, false);
		}
	}
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	setPlayerTag(forplayerid, playerid, false);
}

public OnGameModeInit()
{
	Global_Time = gettime();
	battlePassQuestsDay_data[0] = Global_Time + 86400;

	for(new i; i < MAX_VEHICLES; i++)
	{
		OwnableCar[i] = INVALID_VEHICLE_ID;
		SetString(CarInfo[i][cOwner], "The State");
		SetString(CarInfo[i][cKeyer], "The State");
		SetString(VehicleInfo[i][vNumber], "Arizona ST");
		CarInfo[i][cID] =
		VehicleInfo[i][vID] =
		VehicleInfo[i][vFamily] =
		SellCard[i] = -1;

		if(i < MAX_CUSTOM_NPC)
			Custom_npcOptions[i][data_ID] = 
			Custom_npcOptions[i][data_AttachedID] =
			Custom_npcOptions[i][data_AttackedID] = INVALID_DATA_ID;

		if(i < MAX_PLAYERS)
		{
			TradeInfo[i][tradePlayer] = INVALID_PLAYER_ID;

			for(new idx; idx < 20; idx++) 
			{
				if(idx < 10) 
					TradeInfo[i][tradeItem][idx] = -1;

				FP_Data[i][F_FAMILY_IDCAR_CARS][idx] = INVALID_VEHICLE_ID,
				FP_Data[i][F_FAMILY_PLAYER_CARS][idx] = INVALID_PLAYER_ID;
			}
		}

		if(i < MAX_TRAILERS)
		{
			TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
			TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
			TrailerInfo[i][tObjPark] = INVALID_STREAMER_ID;
		}

		if(i < 85 && GLS[22])
		{
			PodarokInfo[i][porCreat] = -1;
			PodarokInfo[i][porCreat] = CreateDynamicPickup(19056,1,PodarokInfo[i][porPos][0], PodarokInfo[i][porPos][1], PodarokInfo[i][porPos][2],-1);
		}

		if(i < MAX_ZONE)
			nzone[i][zArea] = CreateDynamicSphere(nzone[i][zEnter_x], nzone[i][zEnter_y], nzone[i][zEnter_z], nzone[i][zDistance], 0, 0, -1);

		if(i < MAX_COTTON_OBJECT)
		{
			CottonInfo[i][cottonScore] = 10;
       		CottonInfo[i][cottonStatus] = true;
       		CottonInfo[i][cottonObject] = CreateDynamicObject(819, CottonInfo[i][cottonPosX], CottonInfo[i][cottonPosY], CottonInfo[i][cottonPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
       		SetDynamicObjectMaterial(CottonInfo[i][cottonObject], 0, 817, "gta_procflowers", "gras07Si", 0);
       		f(global_str, 80, "Хлопок (%d из 10)\n{73B461}Для сбора урожая", CottonInfo[i][cottonScore]);
       		CottonInfo[i][cottonLabel] = CreateDynamic3DTextLabel(global_str, -1, CottonInfo[i][cottonPosX], CottonInfo[i][cottonPosY], CottonInfo[i][cottonPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
		}

		if(i < sizeof(FermaInfo))
		{
			FermaInfo[i][farmObject] = CreateDynamicObject(864, FermaInfo[i][farmPos][0],FermaInfo[i][farmPos][1],FermaInfo[i][farmPos][2]-1.0, 356.000000, 0.000000, 3.141600, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
       	 	FermaInfo[i][farmText] = CreateDynamic3DTextLabel("Используйте: 'ALT'\n{FFFFFF}Чтобы собрать куст.", 0xAFAFAFFF, FermaInfo[i][farmPos][0],FermaInfo[i][farmPos][1], FermaInfo[i][farmPos][2], 4.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
		}

		if(i < MAX_LINEN_OBJECT)
		{
			LinenInfo[i][linenScore] = 10;
       		LinenInfo[i][linenStatus] = true;
       		LinenInfo[i][linenObject] = CreateDynamicObject(865, LinenInfo[i][linenPosX], LinenInfo[i][linenPosY], LinenInfo[i][linenPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
       		SetDynamicObjectMaterial(LinenInfo[i][linenObject], 0, 817, "gta_procflowers", "gras07Si", 0);
       		f(global_str, 70, "Лён (%d из 10)\n{73B461}Для сбора урожая", LinenInfo[i][linenScore]);
       		LinenInfo[i][linenLabel] = CreateDynamic3DTextLabel(global_str, -1, LinenInfo[i][linenPosX], LinenInfo[i][linenPosY], LinenInfo[i][linenPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
		}

		if(i < MAX_MINE_OBJECT)
		{
			MineInfo[i][mineStatus] = true;
			MineInfo[i][mineObject] = CreateDynamicObject(3930, MineInfo[i][minePosX], MineInfo[i][minePosY], MineInfo[i][minePosZ] - 1.2, -5.499997, 0.000000, -26.200012, -1, -1);
			SetDynamicObjectMaterial(MineInfo[i][mineObject], 0, 12871, "ce_ground01", "cs_rockdetail2", 0);
			switch(random(50))
			{
				case 0..15: MineInfo[i][minePoroda] = 5;
				case 16..25: MineInfo[i][minePoroda] = 4;
				case 26..35: MineInfo[i][minePoroda] = 3;
				case 36..45: MineInfo[i][minePoroda] = 2;
				case 46..49: MineInfo[i][minePoroda] = 1;
			}

			f(global_str, 80, "Месторождение ресурсов\n{73B461}Для добычи ископаемого");
			MineInfo[i][mineLabel] = CreateDynamic3DTextLabel(global_str, -1, MineInfo[i][minePosX], MineInfo[i][minePosY], MineInfo[i][minePosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
		}

		if(i < MAX_STOLS)
		{
			f(global_str,256,"[ Стол №%d ]\n\
				{9ACD32}Ожидание игроков:{FFFFFF} %d/6\n\
				{9ACD32}Ставка:{FFFFFF} %d фишек\n\n\
				{9ACD32}Сесть за стол - F\n\
				{9ACD32}Дурак подкидной\n\
				{9ACD32}Начало через {FFFFFF}%d сек", i+1,StolInfo[i][stolPlayers],StolInfo[i][stolBet],StolInfo[i][stolTime]);
			stolText[i] = CreateDynamic3DTextLabel(global_str, -1, StolInfo[i][stolPosX], StolInfo[i][stolPosY],StolInfo[i][stolPosZ], 2.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
			for(new d; d < 6; d++) StolInfo[i][stolPlayer][d] = INVALID_PLAYER_ID;
		}

		if(i < MAX_CONTAINERS)
		{
			//простые
			if(ContainerInfo[i][cState] == 0) f(global_str, 550,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:$ {E98E52}%d\n\n{FFFFFF}Аукцион(открыт)\n\n- Последняя ставка: {E98E52}-\n{FFFFFF}- Последняя сумма:$ {E98E52}-",ContainerInfo[i][cClass],ContainerInfo[i][cEngClass]
			,ContainerInfo[i][cMinStavka]);
			else f(global_str, 550,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:AZ {E98E52}%d\n\n{FFFFFF}Аукцион(открыт)\n\n- Последняя ставка: {E98E52}-\n{FFFFFF}- Последняя сумма:AZ {E98E52}-",ContainerInfo[i][cClass],ContainerInfo[i][cEngClass]
			,ContainerInfo[i][cMinStavka]);
			Conteinertext[i] = CreateDynamic3DTextLabel(global_str,-1,ContainerInfo[i][cX],ContainerInfo[i][cY],ContainerInfo[i][cZ]+1.2,3.0);
			//пикапы
			ContainerInfo[i][cPickup] = CreateDynamicPickup(1313,1,ContainerInfo[i][cX],ContainerInfo[i][cY],ContainerInfo[i][cZ],-1);
		}

		if(i < 30)
		{
			new id = random(sizeof(position_klad));
			CreateKlad(Iter_Free(Klad), position_klad[id][0],position_klad[id][1], position_klad[id][2]);
		}
	}
    
	MapAndreas_Init(MAP_ANDREAS_MODE_MINIMAL);

	PrizeCont[0] = CreateDynamic3DTextLabel("",-1,-1733.1738,154.7842,4.62765+1.2,4.0); // первый конт
	PrizeCont[1] = CreateDynamic3DTextLabel("",-1,-1722.5854,184.4038,4.6131+1.2,4.0); // второй конт
	PrizeCont[2] = CreateDynamic3DTextLabel("",-1,-1733.1622,186.9687,4.6276+1.2,4.0); // третий конт
	PrizeCont[3] = CreateDynamic3DTextLabel("",-1,-1739.3959,189.5589,4.6131+1.2,4.0); // четвертый конт
	PrizeCont[4] = CreateDynamic3DTextLabel("",-1,-1722.5547,151.7641,4.6131+1.2,4.0); //пятый конт
	PrizeCont[5] = CreateDynamic3DTextLabel("",-1,-1722.5529,121.4378,4.6131+1.2,4.0); //6 конт
	PrizeCont[6] = CreateDynamic3DTextLabel("",-1,-1729.2148,135.1702,4.6276+1.2,4.0); //7 конт
	PrizeCont[7] = CreateDynamic3DTextLabel("",-1,-1739.4297,137.0448,4.6131+1.2,4.0); //8 конт
	PrizeCont[8] = CreateDynamic3DTextLabel("",-1,-1733.1539,118.9052,4.6276+1.2,4.0); //9 конт

	//gAreas[arCentralRinok][1] = createZoneAZVoice(1, 0, "Центральный рынок", 0xFFFFFFFF);
	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

	LoadServerConfig();
	mysql = mysql_connect(mysql_data[0], mysql_data[1], mysql_data[2], mysql_data[3]);

	if(!mysql_errno(mysql))
		printf("  [DataBase %s]: Ошибок не выявлено, загрузка продолжается!", Setting_Server[7]);
	else
		printf("  [DataBase %s]: Найдена ошибка '%d', повторяем подключение.", Setting_Server[7], mysql_errno(mysql));

	mysql_set_charset("cp1251", mysql);
	mysql_tquery(mysql, "UPDATE `accounts` SET `Online_status` = '0'");
    mysql_tquery(mysql, "UPDATE `accounts` SET `bonusTime` = CONCAT(SUBSTRING_INDEX(`bonusTime`, ',', 2), ',0') WHERE LENGTH(`bonusTime`) - LENGTH(REPLACE(`bonusTime`, ',', '')) >= 2;");
	mysql_tquery(mysql, "UPDATE `accounts` SET `bonusTake_EveryDay` = ''");
	
	#include "../library/mysql_load"
	LoadPawnShops();
	LoadAdminCommands();
    ManualVehicleEngineAndLights();
   	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	LimitPlayerMarkerRadius(70.0);
	SetNameTagDrawDistance(25.0);
   	ShowPlayerMarkers(2);
   	Weather = 2;
	SetGameModeText(Setting_Server[2]);
	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	print("\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= [LoadOtherDataServer] =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n");
    SendRconCommand("reloadfs map");
    SendRconCommand("reloadfs ilya");
    SendRconCommand("reloadfs hostname");
    print("\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= [LoadOtherDataServer] =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n");
	SendRconCommand((str_f("weburl %s", Setting_Server[3])));
    //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");
	printf("[Arizona %s] Modellimit   		 ->  %i/Unlimited", Setting_Server[7], SELLCARS);
	printf("[Arizona %s] Загружено домов     ->  %d/%d", Setting_Server[7], OWNABLEHOUSES, MAX_HOUSES);
	printf("[Arizona %s] Загружено бизнесов  ->  %d/%d", Setting_Server[7], OWNABLEBIZES, MAX_BIZ);
	printf("[Arizona %s] Создано транспорта  ->  %d/2000", Setting_Server[7], CountVehicles());
	printf("[Arizona %s] Создано объектов    ->  %d/Unlimited", Setting_Server[7], CountDynamicObjects());
	printf("[Arizona %s] Создано гангзон     ->  %d/%d", Setting_Server[7], GANGZONES, MAX_GANG_ZONES);
	printf("[Arizona %s] Создано иконки      ->  %d/Unlimited", Setting_Server[7], CountDynamicMapIcons());
	printf("[Arizona %s] Создано 3D текстов  ->  %d/Unlimited", Setting_Server[7], CountDynamic3DTextLabels());
	printf("[Arizona %s] Создано трейлеров   ->  %06d", Setting_Server[7], OWNABLETRAILERS);
	printf("[Arizona %s] Загружено складов   ->  %d/%d", Setting_Server[7], OWNABLESKLADS, MAX_SKLADS);
	printf("[Arizona %s] Подгружено ADM Command -> %d", Setting_Server[7], sizeof(AdminCommandList));
	print("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");
	//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	
	new hour;
	Global_Time = gettime(hour);
	SetWorldTime(hour);
	day_of_week = getDayEx();
    SetTimer("ServerTimer", 1000, true);
    SetTimer("Modellimit", 120000, true);
    SetTimer("UpdatePlayer", 250, true);
	YSF_SetExtendedNetStatsEnabled(true);
	return printf("settings.amx was database logs connect_id: [%i]", _:logs_handle = CallRemoteFunction("@CONNECTION_LOG_BASE", "d", Global_Time)), true;
}

public OnGameModeExit()
	return mysql_close(mysql), mysql_close(logs_handle), false;

stock CountVehicles() 
	return Iter_Count(Vehicle);

stock bool:floatcomp(Float:X1, Float:X2, Float:Delta = 0.05)
	return (floatabs(X1-X2) < Delta) ? true : false;

stock IsAtBankomat(playerid,Float:distance)
{
    for(new i = 0;i < sizeof(Bankomats);i ++) if(IsPlayerInRangeOfPoint(playerid,distance,Bankomats[i][0],Bankomats[i][1],Bankomats[i][2])) return 1;
	return 0;
}

stock IsAtGang(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
	    case TEAM_GROOVE,TEAM_VAGOS,TEAM_BALLAS,TEAM_CORONOS,TEAM_RIFA,TEAM_WOLFS: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtMafia(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
	    case TEAM_RM,TEAM_YAKUZA,TEAM_LCN,TEAM_BIKERS: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsAtFrakcia(playerid, onlygos = 0)
{
	new team = GetTeamID(playerid);
	if(onlygos)
	{
	    switch(team)
		{
		    case TEAM_LSPD,TEAM_LVPD,TEAM_RCPD,TEAM_FBI,TEAM_ARMY,TEAM_ARMYLV,TEAM_LICENSERS,TEAM_SFPD,TEAM_M4C,TEAM_MEDICLV,TEAM_MERIALS,TEAM_MEDICSF,TEAM_BANK,TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV,TEAM_ARMYSF,28: return 1;
		    default: return 0;
		}
	}
	else
	{
		switch(team)
		{
		    case TEAM_LSPD,TEAM_LVPD,TEAM_RCPD,TEAM_FBI,TEAM_SFPD,TEAM_M4C,TEAM_MEDICLV,TEAM_MERIALS,TEAM_MEDICSF,TEAM_LICENSERS,TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV,TEAM_ARMY,TEAM_ARMYLV,TEAM_BANK,TEAM_ARMYSF,28: return 1;
		    default: return 0;
		}
	}
	return 0;
}

stock GetVehicleShiftPos(vehicleid, style, &Float:x, &Float:y, &Float:z, Float:distance)
{
    new Float:a;
	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);
	switch(style)
	{
	    case 0:
	    {
	        x += (distance * floatsin(-a, degrees));
			y += (distance * floatcos(-a, degrees));
	    }
	    case 1:
		{
		    x -= (distance * floatsin(-a, degrees));
			y -= (distance * floatcos(-a, degrees));
		}
		case 2:
	    {
	        a += 90.0;
	        x -= (distance * floatsin(-a, degrees));
			y -= (distance * floatcos(-a, degrees));
	    }
	    case 3:
		{
		    a -= 90.0;
      		x -= (distance * floatsin(-a, degrees));
			y -= (distance * floatcos(-a, degrees));
		}
		default: return 0;
	}
	return 1;
}

stock ShiftCords(style, &Float:x, &Float:y, Float:a, Float:distance)
{
	switch(style)
	{
	    case 0:
	    {
	        x += (distance * floatsin(-a, degrees));
			y += (distance * floatcos(-a, degrees));
	    }
	    case 1:
		{
		    x -= (distance * floatsin(-a, degrees));
			y -= (distance * floatcos(-a, degrees));
		}
		default: return 0;
	}
	return 1;
}

stock IsGangToZone(gangid, zone, Float:kolvo = 50.0)
{
	new Count, InZone, Float:All;
	foreach(new i: Player)
	{
	    if(GetTeamID(i) == gangid)
	    {
	        Count ++;
	        
	        if(IsPlayerToKvadrat(i, ZonesInfo[zone][zone_min][0], ZonesInfo[zone][zone_min][1], ZonesInfo[zone][zone_max][0], ZonesInfo[zone][zone_max][1]))
				InZone ++;
		}
	}
	if(!Count || !InZone) return 0;
	All = 100.0 * float(InZone) / Count;
	return (All >= kolvo);
}

stock GetGangZone(Float:X, Float:Y)
{
	for(new q = 1; q < FAMILYZONES; q++)
	{
		if ((X <= FamilyZone[q][zone_Max_X] && X >= FamilyZone[q][zone_Min_X]) && (Y <= FamilyZone[q][zone_Max_Y] && Y >= FamilyZone[q][zone_Min_Y]))
			return q;
	}
	
	return -1;
}

stock GetPlayerGangZone(playerid)
{
	for(new i; i < sizeof(ZonesInfo); i++)
	    if(IsPlayerToKvadrat(playerid, ZonesInfo[i][zone_min][0], ZonesInfo[i][zone_min][1], ZonesInfo[i][zone_max][0], ZonesInfo[i][zone_max][1]))
			return i;

	return -1;
}

stock ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	static str[100];

	str = "{BFBBBA}";
	strcat(str,caption);

	ShowPlayerDialog(playerid, dialogid, style, str, info, button1, button2);

	if(dialogid) 
		SetPVarInt(playerid, "DialogID", dialogid);

	return SetPVarInt(playerid, "DialogOpen", 1);
}

stock ResetDynamicCPs(playerid)
{
    TogglePlayerDynamicCP(playerid, PorterDownCP, false);
	TogglePlayerDynamicCP(playerid, Binko_CP, true);
	for(new i;i<4;i++) TogglePlayerDynamicCP(playerid, BankCP[i], false);
	TogglePlayerDynamicCP(playerid, ScrapCP, false);
	TogglePlayerDynamicCP(playerid, FerumEndCP, false);
	for(new i; i < MAX_MUSORS; i ++)
	{
	    if(i < MAX_MUSORS) TogglePlayerDynamicCP(playerid, MusorCP[i], false);
	    if(i < sizeof(MinPos)) TogglePlayerDynamicCP(playerid, MinerCP[i], false);
	    if(i < sizeof(FerumCP)) TogglePlayerDynamicCP(playerid, FerumCP[i], false);
	    if(i < sizeof(GoFuelCP)) TogglePlayerDynamicCP(playerid, GoFuelCP[i], false);
	    if(i < sizeof(GoGunShop)) TogglePlayerDynamicCP(playerid, GoGunShopCP[i], false);
		if(i < sizeof(IncCP))
		{
		    TogglePlayerDynamicCP(playerid, IncCP[i][0], false);
	    	TogglePlayerDynamicCP(playerid, IncCP[i][1], false);
		}
		if(i < sizeof(PizzCP))
		{
		    TogglePlayerDynamicCP(playerid, PizzCP[i][0], false);
	    	TogglePlayerDynamicCP(playerid, PizzCP[i][1], false);
		}
	}
	return 1;
}
stock DisableAllRaceCPs(playerid)
{
    for(new i = 1; i <= CountDynamicRaceCPs();i ++) TogglePlayerDynamicRaceCP(playerid, i, false);
	return 1;
}
public OnPlayerRequestSpawn(playerid)
{
	if(!pTemp[playerid][tAuthorized])
	{
	    SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Для авторизации на нашем сервере введите пароль");
	    Kick(playerid);
	    return false;
	}
	return true;
}

public OnPlayerRequestClass(playerid, classid)
{
    SetSpawnInfo(playerid, 255, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0);
	if(pTemp[playerid][tAuthorized]) PlayerSpawn(playerid), GetSkinOfPlayer(playerid);
	return false;
}

stock UpdateBusinessText(bizid, id = 0)
{
	global_str = "";

    if(GetString(BizData[bizid][bOwner], "The State"))
    {
        f(global_str, 300, "\
			{FAAC58}Бизнес продаeтся \n\n\
			{73B461}Тип бизнeса: {FFFFFF}%s\n\
	  		{73B461}Номер бизнеса: {FFFFFF}%d\n\
	  		{73B461}Цена: {FFFFFF}%s\n\
	  		{73B461}Можно приобрести:{FFFFFF} /buybiz", BizData[bizid][bName], bizid, (str_f(!BizData[bizid][bCostType] ? "$%d" : "%d AZ Coins", BizData[bizid][bCost])));
	}
	else
	{
		GetMysqlData("businesses", "opisanie", BizData[bizid][bID]);

		if(strlen(mysql_string) > 3)
			f(global_str, 72, "{FFFF00}%s\n\n", mysql_string);

		f(global_str, 300, "%s%s{%s}Владелец: {%s}%s", global_str, BizData[bizid][bState] == 13 ? (str_f("{BF9088}Тип бизнеса: {FFFFFF}%s (ID: %i)\n", BizData[bizid][bName], bizid)) : (str_f("{%s}Номeр бизнеса: {%s}%d\n{%s}Тип бизнеса: {%s}%s\n", IsNoEnterBiz(bizid) ? "FFFFFF" : "73B461", IsNoEnterBiz(bizid) ? "31B404" : "FFFFFF", bizid, IsNoEnterBiz(bizid) ? "FFFFFF" : "73B461", IsNoEnterBiz(bizid) ? "31B404" : "FFFFFF", BizData[bizid][bName])), BizData[bizid][bState] == 13 ? "BF9088" : IsNoEnterBiz(bizid) ? "FFFFFF" : "73B461", IsNoEnterBiz(bizid) && BizData[bizid][bState] != 13 ? "31B404" : "FFFFFF", BizData[bizid][bOwner]);

		if(IsNoEnterBiz(bizid) && BizData[bizid][bState] != 13)
			strcat(global_str, "\n\n{cccccc}Входа нет!");

	   	if(BizData[bizid][bBuyCost] && BizData[bizid][bNeedItem])
		{
			if(BizData[bizid][bState] == 7) f(global_str, 400, "%s\n\n{FFFFFF}Скупает {CBB42F}%d{FFFFFF} продуктов со склада фермы\nСтоимость 1-го продукта: {CBB42F}%d$\nПосигнальте, чтобы разгрузить продукты.", global_str, BizData[bizid][bNeedItem], BizData[bizid][bBuyCost]);
			else f(global_str, 400, "%s\n\nСкупает {CBB42F}%d{FFFFFF} продуктов с разгрузочной станции.\nСтоимость 1-го предмета: {CBB42F}%d$\nПосигнальте, чтобы разгрузить продукты.", global_str, BizData[bizid][bNeedItem], BizData[bizid][bBuyCost]);
		}
	}
	UpdateDynamic3DTextLabelText(GetBizData(bizid, B_TEXT_ID), COLOR_WHITE, global_str);
	if(id) SaveBusiness(bizid);

	return true;
}

stock UpdateHouseGarage(house) 
{
	if(IsValidDynamicPickup(HouseGaragePickup[house]))
		DestroyDynamicPickup(HouseGaragePickup[house]);
	
	if(IsValidDynamic3DTextLabel(HouseGarage3DText[house]))
		DestroyDynamic3DTextLabel(HouseGarage3DText[house]);

	if(HouseInfo[house][hGarage])
		HouseGaragePickup[house] = CreateDynamicPickup(19133, 0, HouseInfo[house][hGarage_X], HouseInfo[house][hGarage_Y], HouseInfo[house][hGarage_Z], 0, 0, -1, 25.0),
		HouseGarage3DText[house] = CreateDynamic3DTextLabel((str_f("{FFFFFF}Гараж ( %i )\nВойти: {f4e451}ALT{FFFFFF}\nЗаехать: {f4e451}H", house)), -1, HouseInfo[house][hGarage_X], HouseInfo[house][hGarage_Y], HouseInfo[house][hGarage_Z], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	return true;
}

stock UpdateHouse(house)
{
	if(IsValidDynamicMapIcon(HouseIcon[house]))
		DestroyDynamicMapIcon(HouseIcon[house]), HouseIcon[house] = INVALID_STREAMER_ID;
	
	if(IsValidDynamicPickup(HouseInfo[house][H_PICKUP_ID]))
		DestroyDynamicPickup(HouseInfo[house][H_PICKUP_ID]);
		
	if(IsValidDynamicArea(HouseInfo[house][H_AREA_ID]))
		DestroyDynamicArea(HouseInfo[house][H_AREA_ID]);

	if(IsValidDynamicArea(HouseInfo[house][H_AREA_EXIT]))
		DestroyDynamicArea(HouseInfo[house][H_AREA_EXIT]);

	if(GetString(HouseInfo[house][hOwner], "The State"))
	{
		f(global_str, 300,
			"{FF9900}*** %s продается ***\n\n\
			{FFFFFF}Номер %s: {AFAFAF}%d\n\
			{FFFFFF}Стоимость: {AFAFAF}$%d",
			HouseInfo[house][hType] == 2 ? "Квартира" : "Дом",
			HouseInfo[house][hType] == 2 ? "квартиры" : "дома",
			house,
			HouseInfo[house][hCost]);

		if(HouseInfo[house][hType] != 2) 
			strcat(global_str, (str_f("\n{FFFFFF}Гараж: [ %s {FFFFFF}]", HouseInfo[house][hGarage] ? "{27C627}ЕСТЬ" : "{FA736C}НЕТ")));
	}
	else
	{
		GetMysqlData("houses", "Name", house);

		f(global_str, 500,
			"{FF9900}*** %s ***\n\
			%s\
			{FFFFFF}Номер %s: {AFAFAF}%d\n\
			{FFFFFF}Владелец: {AFAFAF}%s\n",
			HouseInfo[house][hType] == 2 ? "Квартира занята" : "Дом занят",
			strlen(mysql_string) > 3 ? (str_f("{ffff00}%s\n\n", mysql_string)) : "",
			HouseInfo[house][hType] == 2 ? "квартиры" : "дома",
			house,
			HouseInfo[house][hOwner]);

		if(HouseInfo[house][hType] != 2) 
			strcat(global_str, (str_f("{FFFFFF}Класс дома: {AFAFAF}%i\n", HouseInfo[house][hKlass])));

		f(global_str, 500, "%s{ffffff}Дверь: %s", global_str, HouseInfo[house][hLock] ? "{C22323}Закрыта" : "{3D9829}Открыта");

		if(HouseInfo[house][hType] != 2) 
		{
			f(global_str, 500,
				"%s\n\n\
				{FFFFFF}Гараж: [ %s {FFFFFF}]\n\
				{FFFFFF}Подвал: [ %s {FFFFFF}]\n\
				{FFFFFF}Подвал с вентиляцией: [ %s {FFFFFF}]\n\
				{FFFFFF}Домашний кинотеатр: [ %s {FFFFFF}]",
				global_str, 
				HouseInfo[house][hGarage] ? "{27C627}ЕСТЬ" : "{FA736C}НЕТ",
				HouseInfo[house][hPodval] ? "{27C627}ЕСТЬ" : "{FA736C}НЕТ",
				HouseInfo[house][hMainingInstalling] ? "{27C627}ЕСТЬ" : "{FA736C}НЕТ",
				HouseInfo[house][hCinema] ? "{27C627}ЕСТЬ" : "{FA736C}НЕТ");

			if(HouseInfo[house][hKratos])
				strcat(global_str, "\n\n{FFFFFF}Дом находится под охраной 'Кратос'");
		}
	}

	if(HouseInfo[house][hType] != 2) HouseIcon[house] = CreateDynamicMapIcon(HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z], (31 + _:!GetString(HouseInfo[house][hOwner], "The State")), 0, 0, 0);
	HouseInfo[house][H_PICKUP_ID] = CreateDynamicPickup( !GetString(HouseInfo[house][hOwner], "The State") ? 19522 : 1273, 23, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]);
	HouseInfo[house][H_AREA_ID] = CreateDynamicSphere(HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z], 1.25, 0);
	HouseInfo[house][H_AREA_EXIT] = CreateDynamicSphere(HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z], 1.25, house + 50, HouseInfo[house][hInt]);
	
	return UpdateDynamic3DTextLabelText(House3DText[house], COLOR_WHITE, global_str), SaveHouse(house);
}

public: PlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid)) return true;
    if(IsPlayerInAnyVehicle(playerid))
	{
	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X ,Y, Z);
	}
 	SettingSpawn(playerid); 	
	if(pTemp[playerid][SPECTPLAYER] == true) SpecPl(playerid, false);
	else SpawnPlayer(playerid);
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(weaponid > 47)
		return false;

    if(PI[playerid][pTir] == 1)
    {
        for(new i, WeaponSkill_data[] = {22, 23, 24, 25, 28, 29, 30, 31, 34}; i < 8; i++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 1.0, Tir[i][tirPosX], Tir[i][tirPosY], Tir[i][tirPosZ]))
            {
                if(hittype == BULLET_HIT_TYPE_OBJECT && hitid == TirObj[i])
                {
					for(new s; s < sizeof(WeaponSkill_data); s++)
					{
						if(WeaponSkill_data[s] != weaponid) continue;

						f(global_str, 10, "%d/10", PI[playerid][pTirUp]++);
						GameTextForPlayer(playerid, global_str, 1000, 4);

						if(PI[playerid][pTirUp] == 10)
						{
							if(PI[playerid][pVIP][0] >= 5 && PI[playerid][pGunSkill][s] <= 9900)
								PI[playerid][pGunSkill][s] += 100;

							else if(PI[playerid][pVIP][0] <= 5 && PI[playerid][pGunSkill][s] <= 9950)
								PI[playerid][pGunSkill][s] = 50;

							SCMF(playerid, COLOR_GOLD, "Вы прокачали скилл оружия на {FFFFFF}%s%.", PI[playerid][pVIP][0] >= 5 ? "1.0" : "0.5");
							GameTextForPlayer(playerid, !"Gun skill++", 0, 1), PI[playerid][pTirUp] = 0;
						}
					}
	                if(!PlayerPlayed{playerid})
	                {
	                    SCM(playerid, COLOR_RED, !"Для безопасной стрельбе в тире нужно надеть наушники! Вы можете умереть!");
	                    new Float:Health;
	                    GetPlayerHealth(playerid, Health);
	                    UpdatePlayerHealth(playerid, Health - 2);
	                }
		    	}
	    	}
    	}
	}
	return 1;
}

stock LogotypeManagement(playerid, bool:show = true)
{
	for(new i; i < 3; i++)
		if(show) TextDrawShowForPlayer(playerid, Logotype[i]); else TextDrawHideForPlayer(playerid, Logotype[i]);

	return 1;
}

stock ShowPlayerIdAuthorization(playerid, type, bool:account)
{
	switch(type)
	{
		case 0:
		{
			if(!account)
				ShowRegisterDialog(playerid, pTemp[playerid][tRegisterStage]);

			else SPDF(playerid, 2, DIALOG_STYLE_PASSWORD, !"Авторизация", "{FFFFFF}Добро пожаловать на {EBA225}Arizona Role Play{FFFFFF}\n\nВведите свой пароль\n{FFFFFF}Попыток для ввода пароля: {28910B}%d", !"Принять", !"Контекст", pTemp[playerid][tPasswordAttemp]);

			LogotypeManagement(playerid, true);
		} 
		case 1:
		{
			executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"Auth\"]');");
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.auth.initializeServerInformation', '[{ \
					\"id\": 1,\
					\"title\": \"%s\", \
					\"flag\": \"https://pc.az-ins.com/resource/image/project_icons/1.png\", \
					\"online\": %i, \
					\"status\": \"good\", \
					\"username\": \"%s\", \
					\"password\": \"\", \
					\"remember\": false }]');", Setting_Server[7], Iter_Count(Player), PlayerName[playerid])));
			if(!account) executeEvent(playerid, 0, "window.executeEvent('event.auth.initializeSignupPage', '[ null ]');");
			cursorPlayer(playerid, 0, true);
		}
		case 2: cursorPlayer(playerid, 9, true), eventMobile(playerid, {9, 1}, !"1"), eventMobile(playerid, {9, 2}, IntToStr(Iter_Count(Player)));
	}
	return SpecPl(playerid, true);
}

stock ShowRegisterDialog(playerid, registerDialogId)
{
	switch(registerDialogId)
	{
		case 0: 
		{
			f(global_str, 1024, "\
			{FFFFFF}Добро пожаловать, {205CA2}%s{FFFFFF}\n\n\
			Этот аккаунт {FF6347}не зарегистрирован {FFFFFF}на нашем сервере.\n\
			Для регистрации введите пароль.\n\
			Он будет использоваться для авторизации на нашем сервере.\n\n\
			{BF2F2F}\tПримечания:\n\
			\t- Длина пароля от 6 до 30 символов\n\
			\t- Пароль должен состоять из букв и цифр\n\
			\t- Пароль чувствителен к регистру\n", PlayerName[playerid]);

			SPD(playerid, 1, DIALOG_STYLE_INPUT, !"{E88813}(1/4) Пароль", global_str, !"Принять", !"Выход");
		}
		case 1: SPD(playerid, 1, DIALOG_STYLE_LIST, !"{E88813}[2/5] Выберите ваш пол", !"Мужчина\nЖенщина", !"Принять", !"Выход");
		case 2: SPD(playerid, 1, DIALOG_STYLE_LIST, !"{E88813}[3/5] Выберите цвет кожи", !"{FFCC99}Светлый\n{FFCC99}Тёмный", !"Принять", !"Выход");
		case 3: SPD(playerid, 1, DIALOG_STYLE_LIST, !"[3/4] Откуда вы о нас узнали?", !"Вкладка 'Hosted'\nОт друзей\nНа порталах/форумах\nВ поисковике\nДругое", !"Принять", !"Выход");
	    case 4: SPD(playerid, 1, DIALOG_STYLE_INPUT, !"{E88813}[4/4] Введите ник пригласившего?", !"{FFFFFF}Введите ник игрока пригласившего вас.\nПример: {E88813}Carl_Johnson\n", !"Принять", !"Выход");
		case 5:
		{
			new Cache:result = mysql_query(mysql, (str_f("SELECT * FROM `accounts` WHERE `NickName` = '%s' LIMIT 1;", PlayerName[playerid])));

			if(pTemp[playerid][cefAuth] && GetPlayerLauncher(playerid) == 1 || GetPlayerLauncher(playerid) == 2)
			{
				switch(GetPlayerLauncher(playerid))
				{
					case 1: { executeEvent(playerid, 0, cache_num_rows() ? ("window.executeEvent('event.auth.updateNicknameErrorMessage', `[ \"Данный никнейм уже зарегистрирован на сервере!\" ]`);") : ("window.executeEvent('event.auth.initializeCharacterEditor', '[ null ]');")); if(!cache_num_rows()) executeEvent(playerid, 0, "window.executeEvent('event.auth.updateVideoBackgroundVisible', `[false]`);"); }
					case 2: eventMobile(playerid, {9, 4}, cache_num_rows() ? ("user_exist") : ("success"));
				}
				ShowActor(playerid, pTemp[playerid][cefAuthActor], PI[playerid][pSkin][0] = PI[playerid][pSex] ? 15706 : PI[playerid][pRace] ? 15088 : 15089, 1773.3618, -1901.4326, 13.5511, 105.8005);
			}
			else { if(!cache_num_rows()) ShowCefPublic(playerid, "createCharacter", "0,0,0"); else return Kick(playerid); }

			cache_delete(result);
		}
	}
	return 1;
}

stock CheckReferalMySQL(playerid, const referalName[])
{
	if(GetPlayerID(referalName, 1) == INVALID_PLAYER_ID || GetString(referalName, PlayerName[playerid]))
	{
		if(GetPlayerLauncher(playerid) == 1 && pTemp[playerid][cefAuth]) executeEvent(playerid, 0, "window.executeEvent('event.auth.updateReferralError', `[ \"Рефералл с данным никнеймом не найден!\" ]`);");
		else if(GetPlayerLauncher(playerid) == 2) eventMobile(playerid, {9, 4}, !"referral_invalid");
		else 
			SCM(playerid, COLOR_OLDRED, "_________________Ошибка_____________________"), 
			SCM(playerid, COLOR_OLDRED, "Возможные причины:"), 
			SCM(playerid, 0x9acd32ff, "    - Вы указали свой ник"), 
			SCM(playerid, 0x9acd32ff, "    - Такого аккаунта не существует"), 
			SCM(playerid, COLOR_OLDRED, "_____________________________________________"), 
			ShowRegisterDialog(playerid, 4);
	}
	else 
		PI[playerid][pReferalID] = GetPlayerID(referalName, 1), ShowRegisterDialog(playerid, 5);

	return true;
}

public OnPlayerConnect(playerid)
{
	if(!IsValidNickName(PlayerName[playerid]))
		return Kick(playerid);

	if(ANTI_RAK_BOT)
		SetPlayerNameInServerQuery(playerid, PlayerName[playerid]);

    if(IsPlayerNPC(playerid))
	{
		if(strcmp(PlayerIp[playerid], "255.255.255.255", true) != 0 && strcmp(PlayerIp[playerid], "127.0.0.1", true) != 0)
		{
			printf("[anti-exploit] Detected using nex-ac exploit %d [IP: %s]", playerid, PlayerIp[playerid]);
			return Kick(playerid);
		}
	}
	PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);

	GetPlayerIp(playerid, PlayerIp[playerid], 16);
	SetPlayerVirtualWorld(playerid, 1228);
	SetPlayerWeather(playerid, Weather);
	ClearChatForPlayer(playerid);
	ClearPlayerData(playerid);
	
	mysql_tquery(mysql, (str_f("SELECT * FROM `accounts` WHERE `NickName` = '%s' LIMIT 1;", PlayerName[playerid])), "GetMysqlAccount", "d", playerid);

	RemoveBuildings(playerid);
	UpdatePlayerMapIcon(playerid);

	if(GetPlayerLauncher(playerid))
	{
		if(serverInterfaceSettings[0])
			sendPlayerCustom_packet(playerid, 53, 4);

		sendPlayerCustom_rpc(playerid, 3, 0, 3, 1, 1, 0, 0);
		//createZoneAZVoice(2, playerid, "", 0, -1, playerid);

		for(new i; i < 8; i++)
			createPlayerAccessory(INVALID_PLAYER_ID, playerid, i, false);
	}
		
	if(GetPlayerLauncher(playerid) == 0)
	{
	    new fso_map;
		fso_map = CreateDynamicObject(19741, 1152.217773, -1423.552124, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1148.807617, -1423.532104, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1145.961182, -1423.562134, 17.337383, -90.000015, 90.000000, -89.999954, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
		fso_map = CreateDynamicObject(19741, 1142.567017, -1423.532104, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
	    fso_map = CreateDynamicObject(19741, 1105.139160, -1423.562134, 17.337383, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
		fso_map = CreateDynamicObject(19741, 1105.139160, -1423.562134, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1111.379150, -1423.562134, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
	    fso_map = CreateDynamicObject(19741, 1105.139160, -1423.562134, 17.337383, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
	    fso_map = CreateDynamicObject(19741, 1152.210815, -1423.562134, 17.337383, -90.000015, 90.000000, -89.999954, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
	    fso_map = CreateDynamicObject(19741, 1145.961182, -1423.562134, 17.337383, -90.000015, 90.000000, -89.999954, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
		fso_map = CreateDynamicObject(19741, 1142.567017, -1423.532104, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1139.750610, -1423.572144, 17.337383, -90.000015, 90.000000, -89.999954, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
		fso_map = CreateDynamicObject(18762, 1139.458252, -1423.946167, 20.093069, 0.000000, 71.500084, 0.000000, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 18631, "nomodelfile", "hazardtile6", 0);
		fso_map = CreateDynamicObject(19741, 1138.783203, -1423.612183, 17.337383, -89.999992, 270.000000, 90.000023, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 3979, "civic01_lan", "sl_dwntwndr1", 0);
		fso_map = CreateDynamicObject(19741, 1138.783203, -1423.562134, 17.337383, -89.999992, 270.000000, 90.000023, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 3979, "civic01_lan", "sl_dwntwndr1", 0);
		fso_map = CreateDynamicObject(18762, 1136.427734, -1423.946167, 14.461545, 0.000000, 108.299927, 0.000000, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 18631, "nomodelfile", "hazardtile6", 0);
		fso_map = CreateDynamicObject(19741, 1136.337402, -1423.532104, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(18762, 1134.716064, -1423.946167, 18.506546, 0.000000, 71.500084, 0.000000, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 18631, "nomodelfile", "hazardtile6", 0);
		fso_map = CreateDynamicObject(19741, 1132.680420, -1423.592163, 17.337383, -90.000015, 90.000000, -89.999954, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
		fso_map = CreateDynamicObject(18762, 1131.680908, -1423.946167, 16.031511, 0.000000, 108.299927, 0.000000, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 18631, "nomodelfile", "hazardtile6", 0);
		fso_map = CreateDynamicObject(19741, 1131.898193, -1423.632690, 17.297382, -89.999992, 270.000000, 89.999962, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 3979, "civic01_lan", "sl_dwntwndr1", 0);
		fso_map = CreateDynamicObject(19741, 1131.892334, -1423.562134, 17.297382, -89.999992, 270.000000, 89.999969, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 3979, "civic01_lan", "sl_dwntwndr1", 0);
		fso_map = CreateDynamicObject(7666, 1130.803711, -1423.358643, 15.869083, 60.400024, -89.999908, -0.000096, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterialText(fso_map, 0, "ЦР ЗАКРЫТ -", 140, "Arial", 70, 1, 0xFFFFFFFF, 0, 1);
		fso_map = CreateDynamicObject(19741, 1130.097778, -1423.532104, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(7666, 1128.603394, -1423.397827, 16.511499, 60.400024, -89.999924, -0.000083, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterialText(fso_map, 0, "ВНИМАНИЕ", 140, "Arial", 88, 1, 0xFF600000, 0, 1);
		fso_map = CreateDynamicObject(7666, 1128.603394, -1423.370850, 17.306950, 60.400024, -89.999908, -0.000096, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterialText(fso_map, 0, "!", 140, "Arial", 88, 1, 0xFF600000, 0, 1);
		fso_map = CreateDynamicObject(7666, 1128.603394, -1423.370850, 17.306950, 60.400024, -89.999908, -0.000096, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterialText(fso_map, 0, "к", 140, "Webdings", 150, 0, 0xFF600000, 0, 1);
		fso_map = CreateDynamicObject(19445, 1128.436523, -1423.491089, 16.556639, 0.000029, 0.000000, 89.999908, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8589, "lwbldstuff03", "filmcase01_64", 0);
		fso_map = CreateDynamicObject(7666, 1126.723389, -1423.358643, 15.869083, 60.400024, -89.999908, -0.000096, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterialText(fso_map, 0, "КАЧАЙ ЛАУНЧЕР", 140, "Arial", 70, 1, 0xFFFFFFFF, 0, 1);
		fso_map = CreateDynamicObject(19741, 1125.700073, -1423.592163, 17.337383, -89.999992, 269.999969, 90.000038, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
		fso_map = CreateDynamicObject(19741, 1124.766357, -1423.632690, 17.297382, -89.999992, 270.000031, 89.999962, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 3979, "civic01_lan", "sl_dwntwndr1", 0);
		fso_map = CreateDynamicObject(19741, 1124.760498, -1423.562134, 17.297382, -89.999992, 270.000000, 89.999962, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 3979, "civic01_lan", "sl_dwntwndr1", 0);
		fso_map = CreateDynamicObject(18762, 1124.161987, -1423.946167, 18.518328, 0.000000, 108.299927, 0.000000, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 18631, "nomodelfile", "hazardtile6", 0);
		fso_map = CreateDynamicObject(19741, 1123.857788, -1423.562134, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(18762, 1122.709839, -1423.946167, 14.489480, 0.000000, 71.500084, 0.000000, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 18631, "nomodelfile", "hazardtile6", 0);
		fso_map = CreateDynamicObject(18762, 1119.415405, -1423.946167, 20.088289, 0.000000, 108.299927, 0.000000, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 18631, "nomodelfile", "hazardtile6", 0);
		fso_map = CreateDynamicObject(19741, 1118.579834, -1423.592163, 17.337383, -90.000015, 90.000000, -89.999954, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
		fso_map = CreateDynamicObject(19741, 1117.635376, -1423.632690, 17.337383, -89.999992, 270.000000, 89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 3979, "civic01_lan", "sl_dwntwndr1", 0);
		fso_map = CreateDynamicObject(19741, 1117.629517, -1423.562134, 17.337383, -89.999992, 270.000000, 89.999992, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 3979, "civic01_lan", "sl_dwntwndr1", 0);
		fso_map = CreateDynamicObject(19741, 1117.618286, -1423.562134, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1111.388794, -1423.562134, 17.337383, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 8488, "flamingo1", "flmngo04_256", 0);
		fso_map = CreateDynamicObject(19741, 1111.379150, -1423.562134, 25.217377, -90.000008, 90.000000, -89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1185.614014, -1494.010986, 15.517380, -90.000008, 90.000000, 179.900024, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19795, 1185.624023, -1492.447510, 14.260169, 0.000007, 0.000000, 179.999969, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 4600, "theatrelan2", "wolf1 copy", 0);
		fso_map = CreateDynamicObject(19795, 1185.624023, -1489.197144, 14.260169, 0.000007, 0.000000, 179.999969, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 4600, "theatrelan2", "wolf1 copy", 0);
		fso_map = CreateDynamicObject(19741, 1185.625488, -1487.761108, 15.517380, -90.000008, 90.000000, 179.900024, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1185.634277, -1481.508911, 15.517380, -90.000008, 90.000000, 179.900024, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1133.013306, -1561.848755, 23.587345, -89.999992, -89.949997, 89.950020, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1132.042358, -1562.088745, 15.517374, -90.000008, 90.000000, 269.900024, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19795, 1128.334351, -1562.076782, 14.230175, 0.000007, 0.000000, 89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 4600, "theatrelan2", "wolf1 copy", 0);
		fso_map = CreateDynamicObject(19741, 1126.773560, -1561.837402, 23.587345, -89.999992, -89.949997, 89.950020, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1125.803345, -1562.077148, 15.517374, -90.000008, 90.000000, 269.900024, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19795, 1125.093384, -1562.076782, 14.230175, 0.000007, 0.000000, 89.999977, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 4600, "theatrelan2", "wolf1 copy", 0);
		fso_map = CreateDynamicObject(19741, 1120.869019, -1561.822388, 23.591347, -89.999992, -89.949997, 89.950020, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19795, 1063.569824, -1494.051758, 14.230175, 0.000000, 0.000000, -15.700008, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 4600, "theatrelan2", "wolf1 copy", 0);
		fso_map = CreateDynamicObject(19741, 1063.516724, -1494.157715, 15.517382, -89.999992, 211.797043, 106.297050, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19795, 1062.693237, -1497.170654, 14.230175, 0.000000, 0.000000, -15.700008, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 4600, "theatrelan2", "wolf1 copy", 0);
		fso_map = CreateDynamicObject(19741, 1061.869873, -1500.135376, 15.517382, -89.999992, 211.797043, 106.297050, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf2", 0);
		fso_map = CreateDynamicObject(19741, 1061.278687, -1494.829712, 24.887394, -89.999992, 199.676788, 95.176750, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf4", 0);
		fso_map = CreateDynamicObject(19741, 1060.108398, -1499.235596, 24.877394, -89.999992, 199.676788, 95.176750, -1, -1, playerid, STREAMER_OBJECT_SD, 600.0); // 1
		SetDynamicObjectMaterial(fso_map, 0, 6048, "mall_law", "wolf4", 0);
	}
	return SCM(playerid, COLOR_RED, !"Добро пожаловать на Arizona Role Play!"), true;
}

public: GetMysqlAccount(playerid)
{
	new bool:account;
	if(cache_num_rows()) account = true;
	else account = false;

	if(GetPlayerLauncher(playerid) == 1 && pTemp[playerid][cefAuth] || GetPlayerLauncher(playerid) == 2)
		SetPlayerCameraPos(playerid, 1770.9120, -1902.2330, 14.0240),
		SetPlayerCameraLookAt(playerid, 1774.7010, -1898.9810, 13.7740);

	else
	{
		for(new i; i < 11; i++) TextDrawShowForPlayer(playerid, IntroLogo[i]);
		InterpolateCameraPos(playerid, 2172.4255, -1043.7322, 73.9263, 2172.4255, -1043.7322, 73.9263, 10000, CAMERA_CUT),
		InterpolateCameraLookAt(playerid, 2170.4832, -1045.6545, 73.8663, 2170.4832, -1045.6545, 73.8663, 10000, CAMERA_CUT);
	}

	f(global_str, 150, "SELECT * FROM `banip` WHERE `IP` = '%s' LIMIT 1", PlayerIp[playerid]);
    mysql_tquery(mysql, global_str, "MysqlCheckPlayerBanIP", "d", playerid);

	return ShowPlayerIdAuthorization(playerid, (GetPlayerLauncher(playerid) == 1 && !pTemp[playerid][cefAuth]) ? 0 : GetPlayerLauncher(playerid), account);
}

public: MysqlCheckBanOnLogin(playerid, namez[])
{
    new seconds;

    if(cache_num_rows() > 0)
    {
		cache_get_value_name(0, "Name", SQL_GET_ROW_STR[0]);
		cache_get_value_name(0, "BanAdmin", SQL_GET_ROW_STR[1]);
		cache_get_value_name(0, "BanReason", SQL_GET_ROW_STR[2]);
		cache_get_value_name_int(0, "BanSeconds", seconds);
		cache_get_value_name(0, "BanDate", SQL_GET_ROW_STR[3]);

		if(Global_Time < seconds)
		{	
			global_str = "{FFFFFF}Ваш игровой аккаунт: {FF0000}%s{FFFFFF} заблокирован!\n\n\
			Администратор: {AFAFAF}%s\n\
			{FFFFFF}Причина: {AFAFAF}%s\n\
			{FFFFFF}Дата блокировки: {AFAFAF}%s\n\
			{FFFFFF}Дата разблокировки: {AFAFAF}%s\n\n\
			{FFFFFF}Если вы не согласны с блокировкой аккаунта,\n\
			вы можете подать заявку на разблокировку на форуме: %s";
			
			return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Этот аккаунт заблокирован!", global_str, !"Ок", !"", SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1], SQL_GET_ROW_STR[2], SQL_GET_ROW_STR[3], UNIX_TO_DATE(seconds), Setting_Server[4]), Kick(playerid);
		}
		else
			SQL("UPDATE `accounts` SET `Warns` = '0' WHERE `ID` = '%d' LIMIT 1", PI[playerid][pID]),
		    SQL("DELETE FROM `bannames` WHERE `Name` = '%s' LIMIT 1", PN(playerid));
    }
    
    f(global_str, 100, "SELECT * FROM `accounts` WHERE `ID` = '%i' LIMIT 1", PI[playerid][pID]);
	mysql_tquery(mysql, global_str, "OnPlayerLoadData", "d", playerid);
	
	return true;
}

stock CreateAllTextDraws(playerid)
{
	TaxiDraw[playerid] = CreatePlayerTextDraw(playerid,574.000000, 205.000000, "");
	PlayerTextDrawBackgroundColor(playerid,TaxiDraw[playerid], 255);
	PlayerTextDrawFont(playerid,TaxiDraw[playerid], 2);
	PlayerTextDrawLetterSize(playerid,TaxiDraw[playerid], 0.229998, 1.699998);
	PlayerTextDrawColor(playerid,TaxiDraw[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TaxiDraw[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TaxiDraw[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TaxiDraw[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TaxiDraw[playerid], 0);

	ActionText[playerid] = CreatePlayerTextDraw(playerid, 325.000000, 83.000000, "PRESS ~r~ENTER");
	PlayerTextDrawAlignment(playerid, ActionText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, ActionText[playerid], 255);
	PlayerTextDrawFont(playerid, ActionText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ActionText[playerid], 0.909999, 2.599999);
	PlayerTextDrawColor(playerid, ActionText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ActionText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ActionText[playerid], 1);

	ActionBand[playerid] = CreatePlayerTextDraw(playerid, 205.000000, 112.000000, "Band");
	PlayerTextDrawBackgroundColor(playerid, ActionBand[playerid], 255);
	PlayerTextDrawFont(playerid, ActionBand[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ActionBand[playerid], -0.000000, 0.899999);
	PlayerTextDrawColor(playerid, ActionBand[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ActionBand[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ActionBand[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ActionBand[playerid], 1);
	PlayerTextDrawUseBox(playerid, ActionBand[playerid], 1);
	PlayerTextDrawBoxColor(playerid, ActionBand[playerid], 0xFF990055);
	PlayerTextDrawTextSize(playerid, ActionBand[playerid], 201.000000, 0.000000);

	HInfoDraw[playerid][0] = CreatePlayerTextDraw(playerid, 598.000000, 169.000000, "HOUSE 1");
	PlayerTextDrawAlignment(playerid, HInfoDraw[playerid][0], 3);
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][0], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][0], 0.569998, 1.899999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][0], 1);

	HInfoDraw[playerid][1] = CreatePlayerTextDraw(playerid, 499.000000, 194.000000, "Owner~n~~g~Jack_Alliance");
	PlayerTextDrawAlignment(playerid, HInfoDraw[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][1], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][1], 0.509999, 1.0);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][1], 1);

	HInfoDraw[playerid][2] = CreatePlayerTextDraw(playerid, 403.000000, 229.000000, "LEVEL: ~g~5");
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][2], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][2], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][2], 0.709999, 1.399999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][2], 1);

	HInfoDraw[playerid][3] = CreatePlayerTextDraw(playerid, 403.000000, 248.000000, "PRICE: ~g~1000000");
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][3], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][3], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][3], 0.709999, 1.399999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][3], 1);

	HInfoDraw[playerid][4] = CreatePlayerTextDraw(playerid, 403.000000, 267.000000, "ROOMS: ~g~4");
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][4], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][4], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][4], 0.709999, 1.399999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][4], 1);

	HInfoDraw[playerid][5] = CreatePlayerTextDraw(playerid, 403.000000, 286.000000, "STATUS: ~r~Open");
	PlayerTextDrawBackgroundColor(playerid, HInfoDraw[playerid][5], 255);
	PlayerTextDrawFont(playerid, HInfoDraw[playerid][5], 3);
	PlayerTextDrawLetterSize(playerid, HInfoDraw[playerid][5], 0.709999, 1.399999);
	PlayerTextDrawColor(playerid, HInfoDraw[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, HInfoDraw[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, HInfoDraw[playerid][5], 1);

	td_damage[playerid][0] = CreatePlayerTextDraw(playerid, 200.000000, 365.000000, "Nick - Weapon +damage");
	PlayerTextDrawLetterSize(playerid, td_damage[playerid][0], 0.200000, 0.900000);
	PlayerTextDrawTextSize(playerid, td_damage[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, td_damage[playerid][0], 2);
	PlayerTextDrawColor(playerid, td_damage[playerid][0], 0x82E1B3FF);
	PlayerTextDrawUseBox(playerid, td_damage[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, td_damage[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, td_damage[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, td_damage[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, td_damage[playerid][0], 0x0000001A);
	PlayerTextDrawFont(playerid, td_damage[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, td_damage[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, td_damage[playerid][0], 0);

	td_damage[playerid][1] = CreatePlayerTextDraw(playerid, 440.000000, 365.000000, "Nick - Weapon -damage");
	PlayerTextDrawLetterSize(playerid, td_damage[playerid][1], 0.200000, 0.900000);
	PlayerTextDrawTextSize(playerid, td_damage[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, td_damage[playerid][1], 2);
	PlayerTextDrawColor(playerid, td_damage[playerid][1], 0xEEA2ADFF);
	PlayerTextDrawUseBox(playerid, td_damage[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, td_damage[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, td_damage[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, td_damage[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, td_damage[playerid][1], 0x0000001A);
	PlayerTextDrawFont(playerid, td_damage[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, td_damage[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, td_damage[playerid][1], 0);
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	static const Float:deerCP_data[][] = {
		{2432.282958, -636.361633, 123.194137},
		{2430.241210, -640.891174, 123.484321},
		{2400.339599, -653.201293, 126.982398},
		{2448.780517, -693.500000, 121.764999},
		{2326.010253, -617.413269, 129.465515},
		{2294.355957, -644.897583, 132.358642},
		{2330.653320, -709.715209, 130.854690}
	};

	for(new i; i < sizeof(deerCP_data); i++)
	{
		if(BULLET_HIT_TYPE_OBJECT && objectid == deer[i])
		{
			if(--objBT[i] > 0) return true;
	        DestroyDynamicObject(deer[i]);
	        deerlabel[i] = CreateDynamic3DTextLabel(!"{FAAC58}Тушка оленя\n{FFFFFF}Используйте '{FAAC59}ALT{FFFFFF}'\n{FFFFFF}Чтобы подобрать", -1, deerCP_data[i][0], -deerCP_data[i][1], deerCP_data[i][2], 10.0);
	        deercp[i] = CreateDynamicCP(deerCP_data[i][0], -deerCP_data[i][1], deerCP_data[i][2], 2.0, -1, -1, -1, 20.0);
	        SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Добыча на земле, беги хватай!");
	        donttake[i] = 0;
		}
	}
	return 1;
}

stock ShowPlayerAZS(playerid)
{
    global_str = "";
	for(new i;i < sizeof(GoFuel);i ++)
	{
		new biz = GoFuel[i][gfBizzID];
		f(global_str,1500,"%s\n{FFFFFF}%s {B83434}%d/50000 л. {9ACD32}$%d\n",global_str, GoFuel[i][gfName],BizData[biz][bProducts],BizData[biz][bMoney]);
	}
	SPD(playerid,236,2,"Выберите АЗС",global_str,"Выбор", !"Отмена");
	return 1;
}

stock ShowPlayerGS(playerid)
{
	global_str = "";
	for(new i;i < sizeof(GoGunShop);i ++)
	{
		new biz = GoGunShop[i][gsBizzID];
		f(global_str,1500,"%s\n{FFFFFF}%s {B83434}%d/50000 мат. Баланс бизнеса: {9ACD32}$%d\n",global_str, GoGunShop[i][gsName],BizData[biz][bProducts],BizData[biz][bMoney]);
	}
	SPD(playerid,258,2,"Выберите GunShop",global_str,"Выбор", !"Отмена");
	return 1;
}

stock Float:fmax(Float:v1, Float:v2) return v1 > v2?v1:v2;
stock Float:fmin(Float:v1, Float:v2) return v1 < v2?v1:v2;
stock Float:jfloatsub(Float:value1, Float:value2)
{
	new Float:num1 = fmax(value1, value2);
	new Float:num2 = fmin(value1, value2);
	new Float:diff = (num1 - num2);
	if(diff > 300.0) diff = ( 360.0 - num1 ) + num2;
	return diff;
}

stock ShowPlayerActionText(playerid, text[])
	return PlayerTextDrawSetString(playerid, ActionText[playerid], text), ShowPlayerTD(playerid, ActionText[playerid]);

stock HidePlayerActionText(playerid)
	return PlayerTextDrawHide(playerid, ActionText[playerid]);

stock ShowPlayerActionBand(playerid, status, endstatus)
{
	new Float:part = 100.0 / float(endstatus) * float(status), Float:length = 201.0 + part * 2.42;
	if(length > 443.0) length = 443.0;
	else if(length < 201.0) length = 201.0;
	PlayerTextDrawTextSize(playerid, ActionBand[playerid], length, 0.0);
	ShowPlayerTD(playerid, ActionBand[playerid]);
	TextDrawShowForPlayer(playerid, BandDrawBG[0]);
	TextDrawShowForPlayer(playerid, BandDrawBG[1]);
	return 1;
}

stock HidePlayerActionBand(playerid)
{
	PlayerTextDrawHide(playerid, ActionBand[playerid]);
	TextDrawHideForPlayer(playerid, BandDrawBG[0]);
	TextDrawHideForPlayer(playerid, BandDrawBG[1]);
	return 1;
}

stock ResetDoorsStatus(carid)
{
	new status;
	if(!IsAOwnableCar(carid)) status = false;
	else status = CarInfo[GetVehicleID(carid)][cLock];
	SetDoorsStatus(carid, status);
	return status;
}

stock IsAMeria(playerid)
{
	if(GetTeamID(playerid) == TEAM_MERIALS)
		return true;

	return false;
}

stock IsAMedic(playerid)
{
	if(GetTeamID(playerid) == TEAM_MEDICSF or GetTeamID(playerid) == TEAM_M4C or GetTeamID(playerid) == TEAM_MEDICLV)
		return true;

	return false;
}

stock VehicleSeatState(seat)
{
	new seatstate;
	switch(seat)
	{
	    case 0: seatstate = 2;
	    default: seatstate = PLAYER_STATE_PASSENGER;
	}
	return seatstate;
}

stock GetVehicleSeat(vehicleid, seatid)
{
	new playerid = VehicleSeat[vehicleid][seatid];
	
	if(IsPlayerInVehicle(playerid, vehicleid) && GetPlayerState(playerid) == VehicleSeatState(seatid))
		return playerid;

	VehicleSeat[vehicleid][seatid] = INVALID_PLAYER_ID;
	return VehicleSeat[vehicleid][seatid];
}

public OnPlayerDisconnect(playerid, reason)
{
	if(pTemp[playerid][tAuthorized])
	{
		if(Iter_Contains(Admin, playerid)) Iter_Remove(Admin, playerid);
		if(Iter_Contains(TrainList, playerid)) Iter_Remove(TrainList, playerid), UpdateDepoList();
		if(DeathText[playerid]) DestroyDynamic3DTextLabel(DeathText[playerid]);
		if(SharInfo[playerid][sharStatus]) ResetShar(playerid);
		if(FamilyText[playerid]) DestroyDynamic3DTextLabel(FamilyText[playerid]), FamilyText[playerid] = Text3D:false;
		if(Int_GetPlayerData(playerid, "install_house_obj")) DestroyObject(EditObjectPlayer[playerid]);
		if(PI[playerid][pBeg][1]) PI[playerid][pBeg][1] = 0, DestroyDynamicObject(PI[playerid][pBeg][2]), DestroyDynamicObject(PI[playerid][pBeg][2] + 1);
	    if(VehID[playerid]) DestroyVehicleEx(VehID[playerid]), VehID[playerid] = 0;
		if(pTemp[playerid][tSalonBox] != -1) tuningStationClose(playerid);
		//if(GetRadioZone(playerid, 2) != -1) destroyZoneAZVoice(GetRadioZone(playerid, 2), true, INVALID_PLAYER_ID, true);
		if(GetPlayerVehicleFamily(playerid) != -1) destroyFamilyCar(playerid, GetPlayerVehicleFamily(playerid));

		for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
		{
			if(Bodyguard_playerData[playerid][i][bg_Spawn])
				Bodyguard_playerData[playerid][i][bg_Spawn] = !Bodyguard_playerData[playerid][i][bg_Spawn], BodyguardDelete(playerid, i);
		}

		PLVEH_destroy(playerid);
		ResetDanceForPlayer(playerid);
		DestroyPlayerMapDraws(playerid);
		
		KillAllTimers(playerid);
		
		DeletePVar(playerid, "Idiota");
		DeletePVar(playerid, "ListItem");
		DeletePVar(playerid, "List");
		DeletePVar(playerid, "ListItemKolvo");

		SaveAccount(playerid);

		if(!(PI[playerid][pTrailerKey] == -1))
		{
			new i = PI[playerid][pTrailerKey];
			if(IsValidTrailer(i))
			{
				if(!TrailerInfo[i][tParked])
				{
					TrailerInfo[i][tShtraf] = 5000000;
					SaveTrailer(i);
					if(TrailerInfo[i][tIDcar] != INVALID_VEHICLE_ID)
					{
						DestroyDynamicObject(TrailerInfo[i][tObj]);
						DestroyVehicleIter(TrailerInfo[i][tIDcar]);
						CheckPlayers(i);
						TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
						TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
					}
				}
			}
		}

		for(new i; i < MAX_VEHICLES; i++)
		{
			if(IsPlayerRegCar(playerid, i))
				DestroyVehicleEx(OwnableCar[ GetVehicleID(i) ]);
		}

		if(pTemp[playerid][pSellCar] != -1)
		{
		    if(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] == playerid)
		    {
				new i = pTemp[playerid][pSellCar];
		        autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
		        autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
		        DestroyDynamicArea(autoBazarInfo[i][autoBazarArea]);
				DestroyDynamic3DTextLabel(autoBazarInfo[i][autoBazarText]);
				for(new z; z < 4; z++) DestroyDynamicObject(autoBazarInfo[i][autoBazarObject][z]);
		    	if(autoBazarInfo[i][autoBazarType] == 1) {
		    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
		    	}
		    	else {
		    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
		    	}
				i = 0;
			}
		}

		if(!(bumboxobject[playerid] == 0))
			BoomDelete(playerid);

		if(ReportSend{playerid}) 
		{
			ReportSend{playerid} = 
			ReportON{playerid} = false;
			DeletePVar(playerid, "ReportMessage");
			if(TotalReport) TotalReport --;
		}

	  	if(GotoInfo[playerid][gtGoID] != INVALID_PLAYER_ID) CheckPlayerGoCuff(GotoInfo[playerid][gtGoID]);
		if(GotoInfo[playerid][gtID] != INVALID_PLAYER_ID)
		{
		    Cuffed[GotoInfo[playerid][gtID]] = false;
			CuffedTime[GotoInfo[playerid][gtID]] = 0;
			TogglePlayerControllable(GotoInfo[playerid][gtID], true);
			SetPlayerSpecialAction(GotoInfo[playerid][gtID], 0);
		    ClearAnimationsEx(GotoInfo[playerid][gtID]);
	     	SCM(GotoInfo[playerid][gtID], COLOR_GREY, !"[Ошибка]{FFFFFF} Вы были выпущены с конвоя.");
	        CheckPlayerGoCuff(GotoInfo[playerid][gtID]);
	        CheckPlayerGoCuff(playerid);
		}
		if(PI[playerid][pScutes] != -1)
		{
			f(global_str, 80, "[ЖУЧЕК]: Игрок %s покинул сервер и жучек был удален.", PN(playerid));
			SCM(PI[playerid][pScutes], COLOR_BLUE, global_str);
			PI[PI[playerid][pMScutes]][pScutes] =
			PI[playerid][pMScutes] = -1;
		}
		if(PI[playerid][pMScutes] != -1)
		{
			PI[PI[playerid][pMScutes]][pScutes] =
			PI[playerid][pMScutes] = -1;
		}

		if(!(KostiName[playerid] == INVALID_PLAYER_ID)) Predlog[KostiName[playerid]] = 0;
		ExitPlayerFromSlotMachine(playerid);
		
	    if(SlotTimer[playerid] != -1) KillTimer(SlotTimer[playerid]);
		if(GetPlayerState(playerid) == 2 && VehicleInfo[GetPlayerVehicleID(playerid)][vTeam] == TEAM_LICENSERS && VehicleInfo[GetPlayerVehicleID(playerid)][vPlayer] != -1) VehicleInfo[GetPlayerVehicleID(playerid)][vPlayer] = -1;
		if(startlomka[playerid] == 1) PI[playerid][pOldRepl] = 1001;
		pSportZal[playerid] =
		AddTimeMessages[playerid] = 0;
		if(KostiName[playerid] != INVALID_PLAYER_ID)
		{
			SCM(KostiName[playerid], COLOR_RED, !"[Информация] {FFFFFF}Кости: Ваш оппонент вышел из игры");
			KostiMoney[KostiName[playerid]] =
			ZapretDice[KostiName[playerid]] = 0;
	  		KostiName[KostiName[playerid]] =
			KostiName[playerid] = INVALID_PLAYER_ID;
		}
		f(global_str, 200, "UPDATE `accounts` SET `Online_status` = '0' WHERE `ID` = '%d'", PI[playerid][pID]);
		mysql_tquery(mysql, global_str);
		amlf("Игрок <a href=../pages/user?name=%s>%s</a> вышел с сервера. IP: %s", 0, "", "", PN(playerid), PN(playerid), PlayerIp[playerid]);
		//
		if(PlayerCar[playerid] != INVALID_VEHICLE_ID && IsPlayerInVehicle(playerid, PlayerCar[playerid])) VehicleSeat[PlayerCar[playerid]][PlayerSeat[playerid]] = INVALID_PLAYER_ID;
		PlayerSeat[playerid] = -1;
		PlayerCar[playerid] = INVALID_VEHICLE_ID;
		new NearCops;
		if(!IsAIP(PN(playerid)) && !IsADomen(PN(playerid)))
		{
			foreach(new i: Player)
			{
				if(ArrestID[i] == playerid) ArrestID[i] = INVALID_PLAYER_ID;
				if( IsACop(i) && ProxDetectorS(25.0, playerid, i, 1) ) NearCops ++;
			}
		}
		
		DisablePlayerRaceCheckpoint(playerid);
		HouseNalog[playerid] = -1;
		HouseNalogState2[playerid] = 0;

		if(ArendKey[playerid] != INVALID_VEHICLE_ID)
		{
			new car = ArendKey[playerid];
			if(ArendInfo[car][aRentID] == playerid)
			{
				ArendInfo[car][aRentID] = INVALID_PLAYER_ID;
				SetVehicleToRespawn(ArendCar[0] + car);
			}
			ArendKey[playerid] = INVALID_VEHICLE_ID;
		}
		CheckBed(playerid);
		if(TazerPlayer[playerid] != INVALID_PLAYER_ID)
		{
		    new id = TazerPlayer[playerid];
		    if(TazerPlayer[id] == playerid) TazerPlayer[id] = INVALID_PLAYER_ID;
		    TazerPlayer[playerid] = INVALID_PLAYER_ID;
		}
		if(LiveOffer[playerid] != INVALID_PLAYER_ID)
		{
			new id = LiveOffer[playerid];
			LiveOffer[playerid] = INVALID_PLAYER_ID;
			if(LiveOffer[id] == playerid)
			{
				LiveOffer[id] = INVALID_PLAYER_ID;
				SCM(id, COLOR_GREY, !"[Подсказка] {FFFFFF}Интервью окончено т.к ваш собеседник покинул сервер");
				TogglePlayerControllable(id, true);
			}
		}
		if(TimetoReturn[playerid] > 0 && pTemp[playerid][pArendaCar] != -1)
		{
			new carsid = pTemp[playerid][pArendaCar];
		    if(carsid != 0)
		    {
		        GetVehicleHealth(carsid, VehicleHealth[carsid]);
			    if(VehicleHealth[carsid] < 700)
			    {
			        new money = floatround(1000 - VehicleHealth[carsid]);
					if(PI[playerid][pMoney] >= money) GiveMoney(playerid, -money);
					else if(PI[playerid][pBank] >= money) PI[playerid][pBank] -= money;
					else if(PI[playerid][pZKP] >= 10) PI[playerid][pZKP] -= 10;
			    }
			    switch(VehicleInfo[carsid][vJob])
			    {
			        case 1: endrabavt(playerid);
					case 11:
					{
					    new vehsid = GetVehicleTrailer(carsid);
					    SetVehicleToRespawn(vehsid);
					    SetVehicleToRespawn(carsid);
					}
			        default: SetVehicleToRespawn(carsid);
			    }
			    TimetoReturn[playerid] = 0;
			    pTemp[playerid][pArendaCar] = -1;
			}
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(IsATaxi(vehicleid))
			{
			    new PLAYER_SEAT = GetPlayerVehicleSeat(playerid);
				if(!PLAYER_SEAT)
				{
					if(PlayerJob[playerid] == JOB_TAXI)
					{
						if(TaxiTarif[playerid] > 0)
						{
							TaxiTarif[playerid] = 0;
							PlayerTextDrawHide(playerid, TaxiDraw[playerid]);
                            TextDrawShowForPlayer(playerid, BoxTaxi1);
                            TextDrawShowForPlayer(playerid, BoxTaxi2);
                            TextDrawShowForPlayer(playerid, TaxiDol);
                            TextDrawShowForPlayer(playerid, Taximonitor);
                            TextDrawShowForPlayer(playerid, TaxiServ);

							UpdateDynamic3DTextLabelText(TaxiText[vehicleid], COLOR_GOLD, "<< Такси для аренды >>");
							for(new i; i < 4; i++)
							{
							    new player = GetVehicleSeat(vehicleid, i);
							    if(player != INVALID_PLAYER_ID)
								{
								    SCM(player, COLOR_GREY, !"[Подсказка] {FFFFFF}Таксист, который вез вас теперь не на службе");
								    if(PI[player][pMoney] > TaxiPrice[player]) GiveMoney(playerid, TaxiPrice[player]);
									GiveMoney(player, -TaxiPrice[player]);
									PlayerTextDrawHide(player,TaxiDraw[player]);
									PlayerTextDrawSetString(player, TaxiDraw[player], "0");
									PlayerTextDrawHide(playerid,TaxiDraw[playerid]);
									PlayerTextDrawSetString(playerid, TaxiDraw[playerid], "0");
	          						TextDrawHideForPlayer(playerid, BoxTaxi1);
		                            TextDrawHideForPlayer(playerid, BoxTaxi2);
		                            TextDrawHideForPlayer(playerid, Taximonitor);
		                            TextDrawHideForPlayer(playerid, TaxiServ);
		                            TextDrawHideForPlayer(playerid, TaxiDol);
	          						TextDrawHideForPlayer(player, BoxTaxi1);
		                            TextDrawHideForPlayer(player, BoxTaxi2);
		                            TextDrawHideForPlayer(player, Taximonitor);
		                            TextDrawHideForPlayer(player, TaxiServ);
		                            TextDrawHideForPlayer(player, TaxiDol);
									TaxiPrice[player] =
									TaxiDistance[player] = 0;
								}
							}
						}
					}
				}
				else
				{
					new id = GetVehicleSeat(vehicleid, 0);
					if(id != INVALID_PLAYER_ID)
					{
						if(PI[playerid][pMoney] > TaxiPrice[playerid]) GiveMoney(id, TaxiPrice[playerid]);
						f(global_str, 90, "[Информация] {FFFFFF}Вы взяли $%d с игрока %s за поездку", TaxiPrice[playerid], PN(playerid));
						SCM(id, COLOR_VALIK, global_str);
						new money;
						for(new i = 1; i < 4; i ++)
						{
							new seat = GetVehicleSeat(vehicleid, i);
							if(seat != INVALID_PLAYER_ID) money += TaxiPrice[seat];
						}
						valstr(global_str, money);
						PlayerTextDrawSetString(id, TaxiDraw[id], global_str);
						GiveMoney(playerid, -TaxiPrice[playerid]);
						PlayerTextDrawHide(playerid, TaxiDraw[playerid]);
					  	TextDrawHideForPlayer(playerid, BoxTaxi1);
				      	TextDrawHideForPlayer(playerid, BoxTaxi2);
				      	TextDrawHideForPlayer(playerid, Taximonitor);
				      	TextDrawHideForPlayer(playerid, TaxiServ);
  					  	TextDrawHideForPlayer(playerid, TaxiDol);
						PlayerTextDrawSetString(playerid, TaxiDraw[playerid], "0");
						f(global_str, 90, "[Информация] {FFFFFF}Вы отдали $%d таксисту %s за поездку", TaxiPrice[playerid], PN(id));
						SCM(playerid, COLOR_GREY, global_str);
						TaxiPrice[playerid] = 0;
					}
				}
				VehicleSeat[vehicleid][PLAYER_SEAT] = INVALID_PLAYER_ID;
				PlayerSeat[playerid] = -1;
				PlayerCar[playerid] = INVALID_VEHICLE_ID;
			}
		}
		if(Merrit[0] != 0 && (Merrit[1] == playerid || Merrit[2] == playerid || Merrit[3] == playerid))
		{
			Merrit[0] =
			Merrit[1] =
			Merrit[2] =
			Merrit[3] = 0;
			ProxDetector(25, playerid, "Свадьба была сорвана!", COLOR_ME);
		}
		if(PI[playerid][pCalling] != -1)
		{
			if(PI[playerid][pONPhoneTalk] > 0)
			{
				f(global_str, 83, "[Информация] {FFFFFF}Звонок окончен! Время разговора {73B461}%d секунд.", PI[playerid][pONPhoneTalk]);
				SCM(playerid, COLOR_GREY, global_str);

	            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

				f(global_str, 83, "[Информация] {FFFFFF}Звонок окончен! Время разговора {73B461}%d секунд.", PI[PI[playerid][pCalling]][pONPhoneTalk]);
				SCM(PI[playerid][pCalling], COLOR_GREY, global_str);

				SetPlayerSpecialAction(PI[playerid][pCalling], SPECIAL_ACTION_STOPUSECELLPHONE);
			}

			if(!PI[PI[playerid][pCalling]][pONPhoneTalk])
			{
				f(global_str, 350, "UPDATE `phonebook` SET `num` = `num` + 1 WHERE `Namez` = '%s' AND `Name` = '%s'", PN(playerid), PN(PI[playerid][pCalling]));
				mysql_tquery(mysql, global_str);
			}
			DestroyPlayerTD(PI[playerid][pCalling], callname[PI[playerid][pCalling]]);
			DestroyPlayerTD(playerid, callname[playerid]);
			PI[PI[playerid][pCalling]][pONPhoneTalk] =
			PI[playerid][pONPhoneTalk] = 0;
			if(pSvon{playerid}) pSvon{playerid} = false;
			if(pSvon{PI[playerid][pCalling]}) pSvon{PI[playerid][pCalling]} = false;
			SelectTextDraw(PI[playerid][pCalling], -16776961);
			SelectTextDraw(playerid, -16776961);
			PI[playerid][pCalling] =
			PI[PI[playerid][pCalling]][pCalling] = -1;
		}

	 	if(PI[playerid][pHSpectr] != -1 && SERIU[PI[playerid][pHSpectr]][sID] == playerid)
		{
		 	callcmd::reoff(PI[playerid][pHSpectr],"");
		 	GameTextForPlayer(PI[playerid][pHSpectr], !"~r~Player Disconnect", 3000, 3);
		}
		
		pTemp[playerid][tAuthorized] = false;
	}

	PlayerName[playerid][0] = EOS;

	return true;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	for(new i; i < 11; i++)
	{
		if(i < 2 && areaid == OrgBattlesArea[i]) 
		{
			if(IsAtGang(playerid) or IsAtMafia(playerid))
			{
				if(OrgBattlesState) OrgBattlesCountMember[PI[playerid][pMember]]++;
				SCMF(playerid, -1, "ты зашел в зону для битвы за: %s", !i ? "притон" : "нефтевышек");
			}
		}
		if(i < 6 && areaid == BikeAreaID[i]) GlobalMassive[playerid][3] = i + 1, sendPlayerMenuKey(playerid, 1024, "Пункт выдачи велосипедов|0|Действие|ALT", 7);
		if(i < 8)
		{
			if(areaid == ScreenAreaId[i] && ScreenInfo_data[i][data_Status]) 
			{
				if(PI[playerid][pScreenBrowserInit])
					setBrowserWindowPicture(playerid, 1, (str_f("https://api-samp.arizona-five.com/youtube_play_video.php?video_id=%s%s", ScreenInfo_data[i][data_VideoLink], !i && ScreenInfo_data[i][data_VideoTime][0] ? (str_f("&start=%i", ScreenInfo_data[i][data_VideoTime][0])) : "")));

				else 
					createBrowser_object(CallRemoteFunction("GetScreenId", "i", i), 7914, (str_f("https://api-samp.arizona-five.com/youtube_play_video.php?video_id=%s%s", ScreenInfo_data[i][data_VideoLink], !i && ScreenInfo_data[i][data_VideoTime][0] ? (str_f("&start=%i", ScreenInfo_data[i][data_VideoTime][0])) : "")), !i ? 50.0 : 80.0, i, playerid);

				break;
			}
		}
	}
	//	createZoneAZVoice(1, 0, "Центральный рынок", 0xFFFFFFFF, gAreas[arCentralRinok][1], playerid);

	if(areaid == gAreas[arGhetto])
	{
		GameTextForPlayer(playerid, FixText("ВЫ ВОШЛИ В ЦЕНТР ГЕТТО"), 2000, 4);

		SCM(playerid, COLOR_VALIK, !"[Подсказка] {ffffff}Вы попали в {FF6666}\"Центр Гетто\"{ffffff}. Это нейтральная территория всех бандитов.");
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {ffffff}Рекомендуем соблюдать местные правила во избежание наказаний! {cccccc}( /help - Центр Гетто )");
		
		if(centreGhettoPlayer_data[playerid][1] > Global_Time && centreGhettoPlayer_data[playerid][0])
			SCMF(playerid, COLOR_VALIK, "[Подсказка] {ffffff}У Вас имеется {%s}%s розыск гетто{ffffff}. Еще будет действовать: {ff6666}%s{ffffff}.", centreGhettoPlayer_data[playerid][0] == 1 ? "ffff00" : "ff0000", centreGhettoPlayer_data[playerid][0] == 1 ? "желтый" : "красный", Convert(centreGhettoPlayer_data[playerid][1]));
	}

    if(areaid >= RadarInfo[0][radArea] && areaid <= RadarInfo[MAX_RADARS - 1][radArea])
    {
	    new speed = GetPlayerVehicleSpeed(playerid);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(!IsACop(playerid))
	        {
                if(speed >= 120)
                {
                    if(PI[playerid][pMoney] < 500)
                    {
						PI[playerid][pWanted] += 1;
						SuspectPlayer(playerid, 4);
						SetPlayerWantedLevel(playerid, PI[playerid][pWanted]);
                        SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы были объявлены в розыск! Причина: {FF6347}Превышение скорости");
                        f(global_str, 64, "Ваш текущий уровень розыска: {FF6347}%d", PI[playerid][pWanted]);
                        SCM(playerid, COLOR_WHITE, global_str);
                    }
                    else
                    {
						GiveMoney(playerid, -500);
                        SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы были оштрафованы за нарушение максимальной допустимой скорости");
                        SCM(playerid, COLOR_WHITE, !"С вас взяли 500$. Постарайтесь не нарушать в дальнейшем.");
                        f(global_str, 64,"~w~SPEED: %d/120 MAX.~n~FINED 500$.", speed);
                        GameTextForPlayer(playerid, global_str, 3000, 5);
                    }
                }
            }
	    }
    }
	
	if(Int_GetPlayerData(playerid, "ShowTrainTable") && InJob[playerid] && PlayerJob[playerid] == 22 && GetPlayerState(playerid) == 2 && (areaid >= TrainArea[1] && areaid <= TrainArea[max_trains-1]))
		SCM(playerid, COLOR_VALIK, !"Вы приближаетесь к остановке, готовьтесь к остановке"), SCM(playerid, COLOR_VALIK, !"Остановитесь для посадки и высадки пассажиров");
	
	else
	{
		for(new i; i < OWNABLEHOUSES; i++)
		{
			if(i < sizeof(parking) && areaid == gAreas[arParking][i])
				sendPlayerMenuKey(playerid, 1024, "Войти|0|Действие|ALT", 7);

			if(i < sizeof(BarrierInfo) && areaid == gAreas[arBarrier][i]) 
				sendPlayerMenuKey(playerid, 262144, "Открыть|0|Действие|H", 7);

			if(i < sizeof(CentralMarketPosition) && areaid == gAreas[arLavka][i]) 
				sendPlayerMenuKey(playerid, 1024, (str_f("%s|0|Действие|ALT", CentralMarket[i][crOwnedId] == INVALID_PLAYER_ID ? "Взаимодействие" : "Меню товаров")), 7);

			if(i < sizeof(Bankomats) && areaid == gAreas[arBankomats][i]) 
				sendPlayerMenuKey(playerid, 1024, "Открыть меню банкомата|0|Действие|ALT", 7);

			if(i < sizeof(DoorInfo) && areaid == gAreas[arDoor][i]) 
				sendPlayerMenuKey(playerid, 262144, "Открыть|0|Действие|H", 7);

			if(i < sizeof(GoFuel) && areaid == gAreas[arFuels][i] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) 
				sendPlayerMenuKey(playerid, 262144, "Заправиться|0|Действие|H", 7);

			if(i < sizeof(HealInfo) && areaid == gAreas[arHealBads][i]) 
				sendPlayerMenuKey(playerid, 131072, "Встать/лечь|0|Действие|N", 7);

			if(i < MAX_MUSORS && areaid == MusorCOP[i]) 
				sendPlayerMenuKey(playerid, 1024, "Мусорка|0|Посмотреть содержимое|ALT", 7), musorka[playerid] = i;

			if(i < MAX_AUTO_BAZAR)
			{
				if(areaid == autoBazarInfo[i][autoBazarArea])
				{
					if(autoBazarInfo[i][autoBazarplayerid] == playerid)
						if (!IsPlayerInAnyVehicle(playerid)) TimetoReturn[playerid] = 0;

					sendPlayerMenuKey(playerid, 1024, "Купить|0|Действие|ALT", 7);
				}
				else if(areaid == gAreas[arAutobazar][i] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					sendPlayerMenuKey(playerid, 262144, "Выставить авто|0|Действие|H", 7);
			}

			if(i < OWNABLESKLADS)
				if(areaid == SkladInfo[i][sklad_areaid] || areaid == SkladInfo[i][sklad_areaid_menu]) GlobalMassive[playerid][7] = i;

			if(i < sizeof(DynamicZones_data) && areaid == gAreas[arOther][i] && GetPlayerInterior(playerid) == DynamicZones_data[i][data_Interior])
			{
				if(!DynamicZones_data[i][data_OnlyInterior] && GetPlayerVirtualWorld(playerid) != DynamicZones_data[i][data_VirtualVorld])
					return false;

				if(i == 1) 
					f(global_str, 256, "Джереми|Его роль заключается в том, чтобы ввести игрока в мир игры, познакомить его с основными механиками и принципами игры, а также дать начальные навыки и знания, необходимые для успешного прохождения игры.|Поговорить|ALT");

				else if(i == 48)
					f(global_str, 256, "Купить что-то|0|Действие|N");

				else
					f(global_str, 256, "Взаимодействие|0|Действие|%s", DynamicZones_data[i][data_KeyID] == 1024 ? "ALT" : DynamicZones_data[i][data_KeyID] == 262144 ? "H" : "N");

				sendPlayerMenuKey(playerid, DynamicZones_data[i][data_KeyID], global_str, 7, i < 6 ? true : false);
			}

			if(i < OWNABLEBIZES)
			{
				if(areaid == GetBizData(i, B_AREA_EXIT))
					sendPlayerMenuKey(playerid, 1024, "Выход из бизнеса|0|Действие|ALT", 7);

				if(areaid == GetBizData(i, B_AREA_ID))
					ShowInfoMenu(playerid, i, 0);
			}
				
			if(areaid == HouseInfo[i][H_AREA_EXIT])
				sendPlayerMenuKey(playerid, 1024, "Выход из дома|0|Действие|ALT", 7);

			if(areaid == HouseInfo[i][H_AREA_ID])
				ShowInfoMenu(playerid, i, 1);
		}
	}
	
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{	
	if(pTemp[playerid][showedKeyMenu])
		closePlayerNotification(playerid, false);

	for(new i; i < OWNABLESKLADS; i++)
	{
		if(i < 2) 
		{
			if(areaid == OrgBattlesArea[i] && (IsAtGang(playerid) or IsAtMafia(playerid)))
			{
				if(OrgBattlesState) OrgBattlesCountMember[PI[playerid][pMember]]--;
				SCMF(playerid, -1, "ты вышел с зоны для битвы за: %s", !i ? "притон" : "нефтевышек");
			}
		}
		if(i < 8)
			if(areaid == ScreenAreaId[i] && GetPlayerLauncher(playerid) && ScreenInfo_data[i][data_Status]) 
				destroyBrowser(playerid, 1);

		if(i < MAX_AUTO_BAZAR)
			if(autoBazarInfo[i][autoBazarplayerid] == playerid)
 	    	    if(areaid == autoBazarInfo[i][autoBazarArea])
 	    	        if (!IsPlayerInAnyVehicle(playerid))
	 		            TimetoReturn[playerid] = 10;

		if(i < MAX_MUSORS) 
			musorka[playerid] = -1;

		if(areaid == SkladInfo[i][sklad_areaid] || areaid == SkladInfo[i][sklad_areaid_menu]) GlobalMassive[playerid][7] = 0;
	}

	
	if(areaid == gAreas[arGhetto])
		GameTextForPlayer(playerid, FixText("ВЫ ПОКИНУЛИ ЦЕНТР ГЕТТО"), 2000, 4);

	if(areaid == gAreas[arCentralRinok][0])
	{
		//destroyZoneAZVoice(gAreas[arCentralRinok][1], true, playerid);
	}
		
	return HideInfoMenu(playerid), true;
}

stock NullSpawned(playerid)
{
	SetPlayerWantedLevel(playerid, PI[playerid][pWanted]);
	DestroyPlayerTD(playerid, InfoText[playerid]);
	J_SetPlayerDrunkLevel(playerid, 0);
	SetPlayerSkills(playerid);
	ResetDynamicCPs(playerid);
	DisableAllRaceCPs(playerid);
	CheckPlayerGoCuff(playerid);
	HideFuelTD(playerid);
	KindFuel[playerid]          = -1;
	CountFuel[playerid]         = 0.0;
	BuyGuns[playerid] 			=
    HouseEntered[playerid]      =
    BizEntered[playerid] 		= -1;
    Controllable{playerid} 		= true;
	Cuffed[playerid] 			= false;
    Buyitem[playerid]=-1;
	BuyInt[playerid] 			= -1;
	InJob[playerid] 			=
	PI[playerid][pBomb] = 0;
    CreateMats[playerid] 		= 0;
    CuffedTime[playerid] 		= 0;
    CheckTheftCar(playerid);
    CheckMiner(playerid);
    CheckPorter(playerid);
    CheckBreakCuff(playerid);
	UnCuffPlayer(playerid);
	KillTimer(DanceTimer[playerid]);
	KillTimer(CheckDanceTimer[playerid]);
	KillTimer(PlayerDMZZ[playerid]);
	KillTimer(besttimer[playerid]);
 	KillTimer(TDTimer[playerid]);
 	KillTimer(besttime[playerid]);
	KillTimer(iluxatime[playerid]);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(server_fix_two[playerid] >= 20) 
		return Kick(playerid);
	
	server_fix_two[playerid]++;
	server_fix_one[playerid] = 30;

	NullSpawned(playerid);
    if(!pTemp[playerid][tAuthorized]) return Kick(playerid);
	if(TeamDuty{playerid}) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
	else SetPlayerColor(playerid, 0xFDFCFC15);
	
    if(PI[playerid][pBeg][0] == -1 && PI[playerid][pLevel] < 4)
    {
        PI[playerid][pBeg][0] = 0;
        SCM(playerid, -1, !"{DFCFCF}>>>{DC4747} Пока вы малоимущий {DFCFCF}(до 4-го уровня){DC4747}, на улице вы можете попрошайничать деньги.");
        SCM(playerid, -1, !"{DC4747}Используйте команду {DFCFCF}/beg{DC4747}, чтобы поставить табличку и банку для денег!");
    }
	if(IsValidDynamicArea(area_boombox[playerid])) DestroyDynamicArea(area_boombox[playerid]);

	new hour, minute, second;
	gettime(hour, minute, second);
	SetPlayerTime(playerid, hour, minute);
	
	UpdatePlayerGun(playerid);
	
	PI[playerid][pLastGun] =
	PI[playerid][pLastAmmo] = 0;
	PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);
  	SetPlayerWeather(playerid, Weather);

	StopAudioStreamForPlayer(playerid);

	RemovePlayerAttachedObject(playerid, 9);

    gunmute[playerid] = Global_Time + 5;
 	if(GotoInfo[playerid][gtGoID] != INVALID_PLAYER_ID) CheckPlayerGoCuff(GotoInfo[playerid][gtGoID]);
	if(GotoInfo[playerid][gtID] != INVALID_PLAYER_ID)
	{
	    Cuffed[GotoInfo[playerid][gtID]] = false;
		CuffedTime[GotoInfo[playerid][gtID]] = 0;
		TogglePlayerControllable(GotoInfo[playerid][gtID], true);
		SetPlayerSpecialAction(GotoInfo[playerid][gtID], 0);
	    ClearAnimationsEx(GotoInfo[playerid][gtID]);
     	SCM(GotoInfo[playerid][gtID], COLOR_GREY, !"[Ошибка]{FFFFFF} Вы были выпущены с конвоя.");
        CheckPlayerGoCuff(GotoInfo[playerid][gtID]);
        CheckPlayerGoCuff(playerid);
	}
	SpectatePlayer[playerid] = INVALID_PLAYER_ID;
	
	if(boombox[playerid]) BoomDelete(playerid);
	if(TempBGObject[playerid] != -1) DestroyPlayerObject(playerid, TempBGObject[playerid]),  TempBGObject[playerid] = -1;

    if(!PI[playerid][pSkin][0]) return Streamer_UpdateEx(playerid, 1871.5439, 2226.6455, 1037.3204, -1, 211, -1, 2000, 0), SetPlayerBuySkin(playerid);
	else SetCameraBehindPlayer(playerid);

	if(IsAtGang(playerid) || IsAtMafia(playerid)) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]), TeamDuty{playerid} = true;
	
	SettingSpawn(playerid);

	if(!PI[playerid][pDemorgan]) SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
	else PI[playerid][pOldSkin] = GetSkinOfPlayer(playerid);

 	if(ADuty{playerid} && !(AdminInfo[playerid][admInterior] == -1))
 	{
 	    PI[playerid][pMember][0] = AdminInfo[playerid][admMember];
	    PI[playerid][pRank] = AdminInfo[playerid][admMemberRank];
	    SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
	    SetPlayerVirtualWorld(playerid, AdminInfo[playerid][admWorld]);
		SetPlayerInterior(playerid, AdminInfo[playerid][admInterior]);
	    UpdatePlayerPos(playerid, AdminInfo[playerid][admPos][0], AdminInfo[playerid][admPos][1], AdminInfo[playerid][admPos][2]);
	    
	   	AdminInfo[playerid][admInterior] = -1;	

	   	if(!(SERIU[playerid][sID] == INVALID_PLAYER_ID) && PI[playerid][pAdmin])
		{
			if(pTemp[playerid][SPECTPLAYER]==true) SpecPl(playerid,false);
		
			HideRecon(playerid);
			CancelSelectTextDraw(playerid);
			PI[SERIU[playerid][sID]][pHSpectr] = -1;
			SERIU[playerid][sID] = INVALID_PLAYER_ID;
		}
 	}
 	if(IsANews(playerid)) _GiveGun(playerid, 43, 200);
	return 1;
}

stock GetSkinOfPlayer(playerid)
{
	new skin, org = GetTeamID(playerid), rank = PI[playerid][pRank];
	if(!org) skin = PI[playerid][pSkin][0];
	else
	{
	    if(TeamDuty{playerid}) skin = (PI[playerid][pSex] == 2) ? GOrgSkins[org][rank] : MOrgSkins[org][rank];
		else skin = PI[playerid][pSkin][0];
		if(IsAtGang(playerid) || IsAtMafia(playerid)) skin = (PI[playerid][pSex] == 2) ? GOrgSkins[org][rank] : MOrgSkins[org][rank];
	}
	return skin;
}

stock SettingSpawn(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
	new skin;
   	if(PI[playerid][pHospital]>0)
	{
	    if(PI[playerid][pHealth]>5) UpdatePlayerHealth(playerid,PI[playerid][pHealth]);
   		else UpdatePlayerHealth(playerid,20);
	}
	else if(PI[playerid][pLevel]>1) PI[playerid][pHospital]=1, UpdatePlayerHealth(playerid,20);

	if(PI[playerid][pDemorgan] > 0)
	{
		SetSpawnInfoEx(playerid, skin, -801.45, 2831.39, 1501.99, 180.0);
		UpdatePlayerHealth(playerid, 100);
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 6);
		SetPlayerSkin(playerid, 268);
		return 1;
	}
 	else if(PI[playerid][pHeal] > 0 && !IsAtGang(playerid))
	{
		if(!IsAArmy(playerid))
	    {
	        switch(random(2))
			{
				case 0: SetSpawnInfoEx(playerid, skin, 1170.0173,-1285.6511,1019.4117,90.000);
				case 1: SetSpawnInfoEx(playerid, skin, 1169.3961,-1337.4742,1019.4198,90.000);
			}
			switch(PI[playerid][pHospCity])
			{
			    case 1:
			    {
			        SetPlayerVirtualWorld(playerid, 2);
			    	SetPlayerInterior(playerid, 2);
			    }
			    case 2:
			    {
			        SetPlayerVirtualWorld(playerid, 3);
			    	SetPlayerInterior(playerid, 2);
			    }
			    default:
				{
				 	SetPlayerVirtualWorld(playerid, 4);
			    	SetPlayerInterior(playerid, 2);
				}
			}
        }
		else
		{
			if(GetTeamID(playerid) == TEAM_ARMY) SetSpawnInfoEx(playerid, skin, 471.80, 881.74, 1500.96, 180.000);
			if(GetTeamID(playerid) == TEAM_ARMYLV) SetSpawnInfoEx(playerid, skin, 549.5598,1466.0801,1900.7980,353.8267);
			if(GetTeamID(playerid) == TEAM_ARMYSF) SetSpawnInfoEx(playerid, skin, -1609.6104,-113.5421,1501.0859,179.3103);
			SetPlayerVirtualWorld(playerid, 1);
  			SetPlayerInterior(playerid, 2);
			return 1;
		}
	    UpdatePlayerHealth(playerid,25);
	    if(startlomka[playerid]==1)PI[playerid][pOldRepl]=0;
	    return 1;
	}
	else if(PI[playerid][pDCTime] == 7)
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetSpawnInfoEx(playerid, skin, PI[playerid][pPremiumPos][0], PI[playerid][pPremiumPos][1], PI[playerid][pPremiumPos][2], 0.0);
		return 1;
	}
	else if(PI[playerid][pDCTime] == 5)
	{
		if(PI[playerid][pFrom] == -1)
			PI[playerid][pDCTime] = 0,
			PlayerSpawn(playerid);
		
		else
		{
			new ID = PI[playerid][pFrom];
			
			switch OtelInfo[RoomOtel[ID][otRoomOwnerOtel]][otLevel] do
			{
				case 5: SetSpawnInfoEx(playerid, skin, 2298.1599, 2678.7400, 1500.9688, 0.0);
				case 4: SetSpawnInfoEx(playerid, skin, 2201.0801, 2737.7900, 1500.9659, 0.0);
				case 3: SetSpawnInfoEx(playerid, skin, -1162.6600, -638.6580, 1500.9688, 0.0);
			}
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 400 + ID);
			
			return InfoOtel[playerid] = ID;
		}
	}
	
	else if(PI[playerid][pDCTime] == 6 && !(FP_Data[playerid][F_FAMILY_SPAWN_DATA] == -1))
	{
		new id = FP_Data[playerid][F_FAMILY_SPAWN_DATA];
		
		switch FP_Data[playerid][F_FAMILY_SPAWN_TYPE] do
		{
			case 1:
			{
				HouseEntered[playerid] = id;
				SetSpawnInfoEx(playerid, skin, HouseInfo[id][hExit_X],HouseInfo[id][hExit_Y],HouseInfo[id][hExit_Z],0.0);
				SetPlayerInterior(playerid, HouseInfo[id][hInt]);
				return SetPlayerVirtualWorld(playerid, id + 50);
			}
			
			case 0:
			{
				FP_Data[playerid][F_FAMILY_PICK_KV] = id;
				
				new int_id = FKV_Data[id][kvDataId];
					
				SetSpawnInfoEx(playerid, skin, FKV_Data_Int[int_id][kvInt_X], FKV_Data_Int[int_id][kvInt_Y], FKV_Data_Int[int_id][kvInt_Z], FKV_Data_Int[int_id][kvInt_A]);
				
				SetPlayerInterior(playerid, FKV_Data_Int[int_id][kvInterior]);
				return SetPlayerVirtualWorld(playerid, FKV_Data[id][kvSqlId] + 1);
			}
		}
	}
	
	else//спавн дома
	{
		if(PI[playerid][pDCTime] == 4)
		{
		    if(PI[playerid][pTrailerKey] == -1)
		    {
				PI[playerid][pDCTime] = 0;
				PlayerSpawn(playerid);
			}
			else EnterTrailer(playerid, PI[playerid][pTrailerKey], 1);
			return 1;
		}
	    if(PI[playerid][pDCTime] == 0)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			if(PI[playerid][pLevel] < 3)
			{
				if(!PI[playerid][pRace])
				{
					switch random(6) do
					{
						case 0: SetSpawnInfoEx(playerid, skin, 1765.5046, -1892.7008, 13.5611, 175.9128);
						case 1: SetSpawnInfoEx(playerid, skin, 1765.3536, -1902.9863, 13.5661, 355.7444);
						case 2: SetSpawnInfoEx(playerid, skin, 1758.8562, -1903.0684, 13.5646, 357.3111);
						case 3: SetSpawnInfoEx(playerid, skin, 1758.8551, -1892.5815, 13.5559, 177.4561);
						case 4: SetSpawnInfoEx(playerid, skin, 1765.3536, -1902.9863, 13.5661, 355.7444);
						case 5: SetSpawnInfoEx(playerid, skin, 1765.3536, -1902.9863, 13.5661, 355.7444);
					}
					return true;
				}
				else return SetSpawnInfoEx(playerid, skin, 1765.3536, -1902.9863, 13.5661, 355.7444);
			}

			else if(PI[playerid][pLevel] >= 3 && PI[playerid][pLevel] < 5)
			{
			    switch random(2) do
				{
		  			case 0: SetSpawnInfoEx(playerid, skin, -1975.1952, 137.6538, 27.6873, 94.4402);
		  			case 1: SetSpawnInfoEx(playerid, skin, -1972.2318, 122.2105, 27.6873, 5.4760);
				}
				return 1;
			}
			else if(PI[playerid][pLevel] >= 5 && PI[playerid][pLevel] < 20)
			{
			    switch random(4) do
				{
		  			case 0: SetSpawnInfoEx(playerid, skin, 2859.1819, 1259.2250, 11.3906, 331.3528);
		  			case 1: SetSpawnInfoEx(playerid, skin, 2859.4858, 1284.0747, 11.3906, 201.6550);
		  			case 2: SetSpawnInfoEx(playerid, skin, 2858.7656, 1320.1461, 11.3906, 223.5886);
		  			case 3: SetSpawnInfoEx(playerid, skin, 2848.8167, 1293.3512, 11.3906, 99.5075);
				}
				return 1;
			}
			else if(PI[playerid][pLevel] >= 20) return SetSpawnInfoEx(playerid, skin, -71.1408, 1223.8297, 19.6863, 119.4150);
		}
		if(PI[playerid][pDCTime]==1 && PI[playerid][pHouseKey] != -1)
		{
			if(GetString(HouseInfo[PI[playerid][pHouseKey]][hOwner],PN(playerid)))
			{
			    HouseEntered[playerid] = PI[playerid][pHouseKey];
				SetSpawnInfoEx(playerid, skin, HouseInfo[PI[playerid][pHouseKey]][hExit_X],HouseInfo[PI[playerid][pHouseKey]][hExit_Y],HouseInfo[PI[playerid][pHouseKey]][hExit_Z],0.0);
				SetPlayerInterior(playerid,HouseInfo[PI[playerid][pHouseKey]][hInt]);
				SetPlayerVirtualWorld(playerid,PI[playerid][pHouseKey]+50);
				return 1;
			}
			else
			{
				new s = GetHouseStyle(PI[playerid][pHouseKey]);
				for(new i;i < HouseRooms[s];i ++)
				{
					if(GetString(HRoomOwner[PI[playerid][pHouseKey]][i],PN(playerid)))
					{
					    HouseEntered[playerid] = PI[playerid][pHouseKey];
						SetSpawnInfoEx(playerid, skin, HouseInfo[PI[playerid][pHouseKey]][hExit_X],HouseInfo[PI[playerid][pHouseKey]][hExit_Y],HouseInfo[PI[playerid][pHouseKey]][hExit_Z],0.0);
						SetPlayerInterior(playerid,HouseInfo[PI[playerid][pHouseKey]][hInt]);
						SetPlayerVirtualWorld(playerid,PI[playerid][pHouseKey]+50);
						return 1;
					}
				}
			}
		}
		else if(PI[playerid][pDCTime]==2 && GetTeamID(playerid) != 0){
			SetPlayerFacingAngle(playerid,SpawnInfo[PI[playerid][pMember][0]][3]);
		    SetPlayerInterior(playerid,SpawnIntWorld[PI[playerid][pMember][0]][0]);
		    SetPlayerVirtualWorld(playerid,SpawnIntWorld[PI[playerid][pMember][0]][1]);
			SetSpawnInfoEx(playerid, skin, SpawnInfo[PI[playerid][pMember][0]][0], SpawnInfo[PI[playerid][pMember][0]][1], SpawnInfo[PI[playerid][pMember][0]][2], SpawnInfo[PI[playerid][pMember][0]][3]);
			return 1;
		}
	}
	SetSpawnInfoEx(playerid, skin, 167.5974,-109.2371,1.5501,272.6516);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	PI[playerid][pDCTime] = 0;
	return 1;
}
stock UpdateCarInfo(vehicleid)
{
	if(IsAOwnableCar(vehicleid) || SellCard[vehicleid] != -1)
	{
	    if(IsASellCar(vehicleid)) f(global_str,200,"{FF9900} Транспорт продается {FFFFFF}\n\nМодель: {AFAFAF}%s (%d){FFFFFF}\nНомер: {AFAFAF}SP %d{FFFFFF}\nСтоимость: {AFAFAF}$%d.", GetVehicleName(vehicleid),GetVehicleModelEx(vehicleid),vehicleid,GetCarPrice(GetVehicleModelEx(vehicleid)));
	    else global_str = "";
	    UpdateDynamic3DTextLabelText(CarText[vehicleid],COLOR_WHITE,global_str);
	}
	return 1;
}

stock ClearChatForPlayer(playerid)
{
	for(new i; i < 20; i ++) SCM(playerid, -1, !" ");
	return 1;
}

stock CheckTheftCar(playerid)
{
	if(TheftCarID[playerid] != 0)
	{
	    TheftCarID[playerid] = 0;
	    TheftKey[playerid] = 0;
	    TheftTime[playerid] = 0;
	    TheftCount[playerid] = 0;
	    HidePlayerActionText(playerid);
	    HidePlayerActionBand(playerid);
    }
    return 1;
}
stock CheckBreakCuff(playerid)
{
	if(pTemp[playerid][BreakKey] != 0)
	{
	    pTemp[playerid][BreakKey] = 0;
	    pTemp[playerid][BreakTime] = 0;
	    pTemp[playerid][BreakCount] = 0;
	    HidePlayerActionText(playerid);
	    HidePlayerActionBand(playerid);
    }
    return 1;
}
stock CheckMiner(playerid)
{
    for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], false);
	RemovePlayerAttachedObject(playerid, 7);
    return 1;
}
stock CheckPorter(playerid)
{
	TogglePlayerDynamicCP(playerid, PorterDownCP, false);
	RemovePlayerAttachedObject(playerid, 7);
    return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
    if(IsPlayerNPC(playerid)) 
		return true;

    if(pTemp[playerid][tAuthorized])
    {
		deltarget(playerid);
		_ResetGun(playerid);
		StopAudioStreamForPlayer(playerid);
		CheckBed(playerid);
    	//
		if(IsValidDynamicArea(area_boombox[playerid])) DestroyDynamicArea(area_boombox[playerid]);
        
		if(selfi{playerid})
		{
		    selfi{playerid} = false;
		    TextDrawHideForPlayer(playerid, StopAnimation);
		}
		if(PI[playerid][pLastGun] > 0)
		{
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
			    new Float:x, Float:y, Float:z, Float:eagle;
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, eagle);
		        new idgun;
		        switch(PI[playerid][pLastGun])
		        {
		            case 3: idgun = 334;
		            case 4: idgun = 335;
		            case 5: idgun = 336;
					case 6: idgun = 337;
					case 8: idgun = 339;
					case 17: idgun = 343;
					case 22: idgun = 346;
					case 23: idgun = 347;
					case 24: idgun = 348;
					case 25: idgun = 349;
					case 28: idgun = 352;
					case 29: idgun = 353;
					case 30: idgun = 355;
					case 31: idgun = 356;
					case 32: idgun = 372;
					case 33: idgun = 357;
					case 34: idgun = 358;
					case 42: idgun = 366;
					case 43: idgun = 367;
					case 46: idgun = 371;
					default:
					{
					    PI[playerid][pLastGun] =
		 				PI[playerid][pLastAmmo] = 0;
					}
		        }
		        if(idgun > 0)
		        {
			        new idobject = -1;
			        for(new i; i < MAX_DGUNS; i++)
				    {
				        if(dguns[i] == -1)
						{
				 			idobject = i;
					 		break;
						}
				    }
			        if(idobject == -1)
				    {
				        new min1 = Global_Time;
				        for(new i; i < MAX_DGUNS; i++)
				        {
				            if(dguntime[i] < min1)
				            {
				                min1 = dguntime[i];
				                idobject = i;
				            }
				        }
				        DestroyDynamicObject(dguns[idobject]);
				    }
		            dguntime[idobject] = Global_Time;
		            dpatrons[idobject] = PI[playerid][pLastAmmo];
			        dgunn[idobject] = PI[playerid][pLastGun];
			        dguns[idobject] = CreateDynamicObject(idgun, x, y, z - 0.97, 96, 110, eagle, GetPlayerVirtualWorld(playerid));
					PI[playerid][pLastGun] =
					PI[playerid][pLastAmmo] = 0;
				}
			}
		}

		if(GetPlayerGangZone(killerid) == 66 or GetPlayerGangZone(killerid) == 291)
			if(OrgBattlesState)
				if(IsAtGang(playerid) && IsAtGang(killerid) or IsAtMafia(playerid) && IsAtMafia(killerid))
					if(PI[playerid][pMember] != PI[killerid][pMember])
						if(!OrgBattlesGangKicked[PI[playerid][pMember]] && !OrgBattlesGangKicked[PI[killerid][pMember]])
							OrgBattlesKills[PI[killerid][pMember]]++;

		if(IsPlayerInDynamicArea(playerid, gAreas[arGhetto]) && IsPlayerInDynamicArea(killerid, gAreas[arGhetto]))
		{
			if(centreGhettoPlayer_data[playerid][0] && centreGhettoPlayer_data[playerid][1] > Global_Time)
				SCMF(killerid, -1, "ты убил игрока %s[%i] с %i уровнем розыска (ghetto)", PN(playerid), playerid, centreGhettoPlayer_data[playerid][0]);

			else
			{
				SCM(killerid, COLOR_VALIK, !"[Информация] {ffffff}Вы получили {ff0000}красный розыск гетто{ffffff}.");
				SCM(killerid, COLOR_VALIK, !"[Подсказка] {ffffff}Теперь если вас убьют на территории гетто, Вы потеряете {ff6666}2 случайных предмета{ffffff} из своего инвентаря!");
				centreGhettoPlayer_data[killerid][0] = 2, centreGhettoPlayer_data[killerid][1] = 10800;
				UpdatePlayerDataStr(killerid, "CentreGhettoData", Int_PackMassive(0, centreGhettoPlayer_data[killerid]));
			}
		}

  		if(pTemp[playerid][pDeathCar] != INVALID_VEHICLE_ID && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		{
	 		pTemp[playerid][pDeathCar] = INVALID_VEHICLE_ID;
    		ExitCar(playerid);
    		new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
			UpdatePlayerPos(playerid, X, Y, Z);
		    CallTimeOutFunction("PlayerSpawn", 2000, false, "i", playerid);
		}
	    Smoke[playerid] =
	    pSportZal[playerid] =
	    SellGzone[playerid] =
	    SellPGzone[playerid] =
	    addskate[playerid] = 
	    Vnedren[playerid] = 0;
        UpdatePlayerArmour(playerid, 0);
        UpdatePlayerHealth(playerid, 15);
	    SetFullness(playerid, 40);
		new job = PlayerJob[playerid], injob = InJob[playerid];
		if ( (job == 17 || job == 18 || job == 19 || job == 20) && (injob == 1 || injob == 3) ) InJob[playerid] = 0, SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы забыли забрать свою зарплату, не забудьте вернутся что бы забрать ее!");
		
		if(job == JOB_PIZZA) InJobs[playerid] = 0, NumInc_CP[playerid] = -1;
		
	 	if(!(GotoInfo[playerid][gtGoID] == INVALID_PLAYER_ID)) CheckPlayerGoCuff(GotoInfo[playerid][gtGoID]);
		if(GotoInfo[playerid][gtID] != INVALID_PLAYER_ID)
		{
		    Cuffed[GotoInfo[playerid][gtID]] = false;
			CuffedTime[GotoInfo[playerid][gtID]] = 0;
			TogglePlayerControllable(GotoInfo[playerid][gtID], true);
			SetPlayerSpecialAction(GotoInfo[playerid][gtID], 0);
		    ClearAnimationsEx(GotoInfo[playerid][gtID]);
	     	SCM(GotoInfo[playerid][gtID], COLOR_GREY, !"[Ошибка]{FFFFFF} Вы были выпущены с конвоя.");
	        CheckPlayerGoCuff(GotoInfo[playerid][gtID]);
	        CheckPlayerGoCuff(playerid);
		}
		if(PI[playerid][pMaskON] > 0)
		{
		    PI[playerid][pMaskON] = 0;
	        if(TeamDuty{playerid}) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
			else SetPlayerColor(playerid, 0xFFFFFF80);
		}
		gunmute[playerid] = Global_Time + 5;

		for(new i; i < 10; i++)
			if(IsTextDrawVisibleForPlayer(playerid, clothChois[i]))
				TextDrawHideForPlayer(playerid, clothChois[i]);

		if(IsTextDrawVisibleForPlayer(playerid, BoxTaxi1))
			TextDrawHideForPlayer(playerid, BoxTaxi1),
		    TextDrawHideForPlayer(playerid, BoxTaxi2),
		    TextDrawHideForPlayer(playerid, Taximonitor),
		    TextDrawHideForPlayer(playerid, TaxiServ),
		    TextDrawHideForPlayer(playerid, TaxiDol),
	   		PlayerTextDrawHide(playerid, TaxiDraw[playerid]);

		if(IsPlayerTextDrawVisible(playerid, InfoText[playerid]))
			DestroyPlayerTD(playerid, InfoText[playerid]);

		if(!PI[playerid][pDemorgan] && !IsAtGang(playerid)) BackToBolka(playerid);
		if(Merrit[0] != 0 && (Merrit[1] == playerid || Merrit[2] == playerid || Merrit[3] == playerid))
		{
			Merrit[0] =
			Merrit[1] =
			Merrit[2] =
			Merrit[3] = 0;
			ProxDetector(25, playerid, !"Свадьба была сорвана!", COLOR_ME);
		}
		if(!(killerid == INVALID_PLAYER_ID))
	    {
			for(new i; i < 8; i++)
				AksSlot[playerid][2][i] = AksSlot[playerid][2][i] >= 5 ? AksSlot[playerid][2][i] - 5 : 0;
		
			if((CaptureTime[0] > 0 || CaptureTime[1] > 0) && ((GetTeamID(playerid) == CaptureAtac && GetTeamID(killerid) == CaptureDef) || (GetTeamID(playerid) == CaptureDef && GetTeamID(killerid) == CaptureAtac)))
		    {
				if(GetTeamID(playerid) == CaptureAtac && GetTeamID(killerid) == CaptureDef) CaptureDefKill ++;
				if(GetTeamID(playerid) == CaptureDef && GetTeamID(killerid) == CaptureAtac) CaptureAtacKill ++;
				foreach(new i: Player)
				{
					if(GetTeamID(i) == CaptureDef || GetTeamID(i) == CaptureAtac)
					{
						SendDeathMessageToPlayer(i, killerid, playerid, reason);
					    f(global_str, 130,"~y~kills~n~~n~~g~%s:~w~ %i~n~~r~%s:~w~ %i",GetGangName(CaptureDef),CaptureDefKill,GetGangName(CaptureAtac),CaptureAtacKill);
						TextDrawSetString(Kapture,global_str);
					    if(GetTeamID(i)==CaptureAtac || GetTeamID(i)==CaptureDef) TextDrawShowForPlayer(i, Kapture);
						else TextDrawHideForPlayer(i, Kapture);
					}
				}
			}
			if(BizWarState == 2 && ((GetTeamID(playerid) == BizAtack && GetTeamID(killerid) == BizDeff) || (GetTeamID(playerid) == BizDeff && GetTeamID(killerid) == BizAtack)))
		    {
				if(GetTeamID(playerid) == BizAtack && GetTeamID(killerid) == BizDeff) BizDeffkill ++;
				if(GetTeamID(playerid) == BizDeff && GetTeamID(killerid) == BizAtack) BizAtakkill ++;
				foreach(new i: Player)
				{
					if(GetTeamID(i) == BizDeff || GetTeamID(i) == BizAtack) SendDeathMessageToPlayer(i, killerid, playerid, reason);
				}
			}

			if(!(RCzone[killerid] == -1) && GetVehicleModelEx(GetPlayerVehicleID(killerid)) == 464)
				PlayerTimerItem[killerid][1] = Global_Time + 18000,
					SCM(killerid, COLOR_OLDRED, "При использовании транспорта на радио управления запрещено причинять вред!"),
						SaveMasiveTimer(killerid),
							ResetRC(killerid);

			if(GetCount(killerid, 7758)) 
				showPlayerVisitBanner(playerid, PI[killerid][pBannerInfo][0], PI[killerid][pBannerInfo][2], PN(killerid), PI[killerid][pBannerInfo][1] != 16 ? bannerNamed[1][PI[killerid][pBannerInfo][1]] : (str_f("%s", PI[killerid][pBannerCustomText])), GetPlayerWeaponEx(killerid));
		}
		foreach(Player, i)
		{
			if(PI[i][pAdmin] && !AdminInfo[i][admKillList] && ACTIVEpanel[4])
				SendDeathMessageToPlayer(i, killerid, playerid, reason);
		}
	}
	return 1;
}

stock IsARC(vehicleid)
	return (VehicleState[vehicleid] == 7);

stock IsABoat(vehicleid) 
	return (VehicleState[vehicleid] == VEHICLE_STATE_BOAT);

stock IsAVelik(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_VELIK);

stock IsAPlane(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_PLANE);

stock IsABike(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_BIKE);

stock IsAMoped(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_MOPED);

stock IsACar(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_CAR);

stock IsATrain(vehicleid)
	return (VehicleState[vehicleid] == VEHICLE_STATE_TRAIN);

stock OwnCarNumber(carid)
{
	new str[5 - 2 + 8];

	if(IsAOwnableCar(carid))
		f(str, sizeof(str), "SP %d", carid);
		
	return str;
}

public OnVehicleSpawn(vehicleid)
{
    for(new i; i < 7; i++) 
		DeleteTuningCar(vehicleid,i);
	
	if(GetVehicleModelEx(vehicleid) == 462 && VehicleInfo[vehicleid][vFree])
    {
        tuningcar[vehicleid][0] = CreateDynamicObject(18644,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][0], 0, 1560, "7_11_door", "CJ_CHROME2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][0], vehicleid, 0.001, -0.870, 0.209, 0.000, 177.200, 0.000);
		tuningcar[vehicleid][1] = CreateDynamicObject(2685,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][1], 0, 19574, "sampfruits", "apple2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][1], vehicleid, -0.024, -1.093, 0.368, 2.200, -90.100, -88.699);
		tuningcar[vehicleid][2] = CreateDynamicObject(2685,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][2], 0, 19574, "sampfruits", "apple2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][2], vehicleid, 0.022, -1.093, 0.398, -2.699, 89.200, 91.399);
		tuningcar[vehicleid][3] = CreateDynamicObject(19475,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterialText(tuningcar[vehicleid][3], 0, "Free", 140, "Segoe Script", 199, 0, -1, 0, 1);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][3], vehicleid, 0.010, -1.080, 0.390, 0.000, -3.099, 1.299);
		tuningcar[vehicleid][4] = CreateDynamicObject(19475,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterialText(tuningcar[vehicleid][4], 0, "Free", 140, "Segoe Script", 199, 0, -1, 0, 1);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][4], vehicleid, -0.010, -1.080, 0.390, 0.000, 3.099, -177.900);
		tuningcar[vehicleid][5] = CreateDynamicObject(11740,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterial(tuningcar[vehicleid][5], 0, 19574, "sampfruits", "apple2", 0);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][5], vehicleid, -0.010, 0.578, 0.265, 95.800, 0.000, 0.000);
		tuningcar[vehicleid][6] = CreateDynamicObject(19475,0.0,0.0,-1000.0,0.0,0.0,0.0,0,0,-1,300.0,300.0);
		SetDynamicObjectMaterialText(tuningcar[vehicleid][6], 0, "Eco", 140, "Segoe Script", 170, 0, -1, 0, 1);
		AttachDynamicObjectToVehicle(tuningcar[vehicleid][6], vehicleid, -0.009, 0.581, 0.260, -0.899, 0.000, 89.899);
	}
	if(GetVehicleModelEx(vehicleid) == 512 && VehicleInfo[vehicleid][vTeam] == TEAM_LICENSERS && VehicleInfo[vehicleid][vPlayer] !=-1)
	{
	    SCM(VehicleInfo[vehicleid][vPlayer],COLOR_RED,!"[Подсказка]{FFFFFF}Вы сломали транспорт, который принадлежит министерству транспорта.");
	    SCM(VehicleInfo[vehicleid][vPlayer],COLOR_RED,!"[Подсказка]{FFFFFF}Работники этой организации выписали вам счет на оплату ущерба");
	    SCM(VehicleInfo[vehicleid][vPlayer],COLOR_RED,!"[Подсказка]{FFFFFF}Ваш кредитный счет пополнен на 5 000$. Оплатить его можно в банке.");
		PI[VehicleInfo[vehicleid][vPlayer]][pCredit]+=5000;
		FlyivingTest[VehicleInfo[vehicleid][vPlayer]] = 0;
		CarTest[VehicleInfo[vehicleid][vPlayer]] = -1;
		MotoTest[VehicleInfo[vehicleid][vPlayer]] = -1;
	}

	VehicleInfo[vehicleid][vPlayer]=-1;

 	if(VehicleInfo[vehicleid][vJob]>0)
	{
		foreach(new i: Player)
		{
		    if(pTemp[i][pArendaCar]==vehicleid)
			{
				pTemp[i][pArendaCar] = -1;
				TimetoReturn[i]=0;
				DisablePlayerRaceCheckpoint(i);
		    	break;
			}
		}
		if(VehicleInfo[vehicleid][vJob] == 12 || (VehicleInfo[vehicleid][vJob]>=17 && VehicleInfo[vehicleid][vJob]<=20)) Fuel[vehicleid] = 100.0;
		if(VehicleInfo[vehicleid][vJob]==1) UpdateDynamic3DTextLabelText(AutobCarText[vehicleid], 0xFFFFFFFF, "{E06C1F}Автобус\n{73B461}[Для аренды]");
	}
	if(IsACopCar(vehicleid) || GetVehicleModelEx(vehicleid) == 432 || GetVehicleModelEx(vehicleid) == 433 || GetVehicleModelEx(vehicleid) == 427 || GetVehicleModelEx(vehicleid) == 528) J_SetVehicleHealth(vehicleid,5000);
	else J_SetVehicleHealth(vehicleid,1500);

	if(IsAArendCar(vehicleid)) Fuel[vehicleid] = 100.0;
	if(VehicleInfo[vehicleid][vJob]==JOB_MECHANIC)
	{
		BenzinCena[vehicleid]=0.0;
		if(BenzinCount[vehicleid]>0)
		{
		    BizData[Contracter[vehicleid]][bProducts]+=BenzinCount[vehicleid];
		    UpdateFuels(Contracter[vehicleid]);
		    BenzinCount[vehicleid] =0;
		}
		Contracter[vehicleid]=-1;
		UpdateDynamic3DTextLabelText(Benzin[vehicleid], 0xFFFFFFFF, "{57B22C}Заправка 0$\n{FFFFFF}Бензина: 0/1000");
	}
	if((VehicleInfo[vehicleid][vTeam] >=1 && VehicleInfo[vehicleid][vTeam]<11) || VehicleInfo[vehicleid][vTeam]>19) Fuel[vehicleid] = 100.0;
	if(IsAStripCar(vehicleid)) CarStrips[vehicleid] = 10;

	if(IsAVelik(vehicleid) || GetVehicleVirtualWorld(vehicleid) == 1228) SetEngineStatus(vehicleid,true, -1);
	else SetEngineStatus(vehicleid,false, -1);

    if(IsAOwnableCar(vehicleid))
	{
		new vehid = GetVehicleID(vehicleid);
		if(CarInfo[vehid][cPos][0] == 0.0 && CarInfo[vehid][cPos][1] == 0.0 && CarInfo[vehid][cPos][2] == 0.0) CarInfo[vehid][cParkedInPark] = 1;
		if(!VehicleInfo[vehicleid][vTeam] && !VehicleInfo[vehicleid][vJob] && !IsAArendCar(vehicleid)) ModCar(vehicleid);
		UpdateCarInfo(vehicleid);
		ChangeVehicleColor(vehicleid, CarInfo[vehid][cColor_1], CarInfo[vehid][cColor_2]);
		SetDoorsStatus(vehicleid, 0);
		if(VehicleInfo[vehicleid][vJob] != 0)
		{
			VehicleInfo[vehid][vLock] = 0;
			SetDoorsStatus(vehicleid, VehicleInfo[vehid][vLock]);
		}
		else SetDoorsStatus(vehicleid, CarInfo[vehid][cLock]);
		//
		if(!GetString(CarInfo[vehid][cOwner], "The State") && (CarInfo[vehid][cParkedInPark] || CarInfo[vehid][cShtraf]))
		{
			new s = CarInfo[vehid][cShtraf] ? random(198)+193:random(193);
		    CarInfo[vehid][cPos][0] = ParkForCar[s][XPa];
		    CarInfo[vehid][cPos][1] = ParkForCar[s][YPa];
		    CarInfo[vehid][cPos][2] = ParkForCar[s][ZPa];
		    CarInfo[vehid][cPos][3] = ParkForCar[s][APa];
			RestartCar(vehicleid);
		}
	}
    
    if(IsAArendCar(vehicleid))
	{
		new vehid = GetArendCarID(vehicleid);
		if(ArendInfo[vehid][aRentID] >= MAX_PLAYERS)
		{
			ArendInfo[vehid][aRentID] = INVALID_PLAYER_ID;
			return 1;
		}
		ArendKey[ArendInfo[vehid][aRentID]] = INVALID_VEHICLE_ID;
		ArendInfo[vehid][aRentID] = INVALID_PLAYER_ID;
	}

	return 1;
}
public OnVehicleDeath(vehicleid, killerid)
{
	if(GetVehicleModelEx(vehicleid)==433 && CarMusorCount[vehicleid]>20)
	{
	    new Float:x, Float:y, Float:z;
	    UpdateDynamic3DTextLabelText(MusorCarText[vehicleid], 0xFFFFFFFF, "Загружено: 0%/100%");
		CarMusorCount[vehicleid] = 0;
		GetVehiclePos(vehicleid, x, y, z);
		new idobject;
        for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x+2.4, y, z-1.3, 0, 0, 0);
		for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x-2.4, y, z-1.3, 0, 0, 0);
		for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x-2.4, y+1.2, z-1.3, 0, 0, 0);
		for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x-2.4, y-2.2, z-1.3, 0, 0, 0);
		for(idobject = 0;idobject<MAX_DMATS;idobject++)
        {
            if(dmats[idobject]==-1) break;
        }
		dmats[idobject] = CreateDynamicObject(1279, x-3.4, y-2.2, z-1.3, 0, 0, 0);
	    return 1;
	}
	return 1;
}

stock DestroyVehicleEx(vehicleid, bool:spawn = false)
{
	for(new i; i < 30; i++)
	{ 
		if(i < 10) InstallTun(vehicleid, i, 1);
		if(i < 7) DeleteTuningCar(vehicleid, i);

        if(VehicleInfo[vehicleid][vFamily] == -1)
		    TrunkInfo[vehicleid][tItem][i] = TrunkInfo[vehicleid][tItemCount][i] = 0;
	}
	
	VehicleInfo[vehicleid][vModel] = 
	VehicleInfo[vehicleid][vStyle] = 
	VehicleInfo[vehicleid][vModification] = 0;

	if(IsAOwnableCar(vehicleid)) 
	{
		if(VehicleInfo[vehicleid][vFamily] == -1)
	   		OwnableCar[GetVehicleID(vehicleid)] = INVALID_VEHICLE_ID,
			DestroyDynamic3DTextLabel(CarText[vehicleid]),
			SaveOwnableCar(GetVehicleID(vehicleid));

		if(spawn == false)
		{
			if(VehicleInfo[vehicleid][vFamily] == -1)
				SetString(CarInfo[GetVehicleID(vehicleid)][cOwner], "The State"),
				SetString(CarInfo[GetVehicleID(vehicleid)][cKeyer], "The State");

			CarInfo[GetVehicleID(vehicleid)][cID] = -1;
			for(new i, default_value[] = {0, 0, 0, 1, 1, 0, 0, 0, 0}; i < 23; i++) 
			{
				if(i < 9)
					vehicleTuning[vehicleid][i] = default_value[i];

				CarInfo[GetVehicleID(vehicleid)][cInvCell][i] = 0;
			}
		}
	}

	VehicleInfo[vehicleid][vID] = -1;

	DestroyVehicleIter(vehicleid);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(!pTemp[playerid][tAuthorized]) return false;
    if(Global_Time < Int_GetPlayerData(playerid, "AntiFlood")) return !SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не флуди!");

    if(PI[playerid][pMuteTime])
	{
		SetPlayerChatBubble(playerid, !"Пытается что-то сказать.", COLOR_OLDRED, 10.0, 5000);
		SendMuteMessage(playerid);
		return 0;
	}
	SetPVarInt(playerid, "AntiFlood", Global_Time+1);
	if(IsAIP(text))
	{
		f(global_str, 300, "[Подозрение на рекламу] %s[%d]: [%s]", PN(playerid), playerid, text);
		SendAdminsMessage(COLOR_OLDRED, global_str);
		return 0;
	}
	if(PI[playerid][pONPhoneTalk] > 0)
	{
	    if(PI[playerid][pCalling] != -1 && pTemp[PI[playerid][pCalling]][tAuthorized])
	    {
	    	f(global_str, 300, "{73B461}[Тел]:{FFFFFF} %s - %s", PN(playerid), text);
			SCM(playerid, -1, global_str);
			SCM(PI[playerid][pCalling], -1, global_str);
			SetPlayerChatBubble(playerid, global_str, COLOR_WHITE, 10.0, 10000);
			if(PI[playerid][pScutes] != -1)
			{
			    f(global_str, 300, "[ЖУЧЕК]: %s говорит по телефону:  %s", PN(playerid), text);
			    SCM(PI[playerid][pScutes], COLOR_BLUE, global_str);
			}
			if(PI[PI[playerid][pCalling]][pScutes] != -1)
			{
			    f(global_str, 300, "[ЖУЧЕК]: %s говорит по телефону:  %s", PN(playerid), text);
			    SCM(PI[PI[playerid][pCalling]][pScutes], COLOR_BLUE, global_str);
			}
			PI[playerid][pPhoneInfo][2] --;
		}
		return 0;
	}
	if(Merrit[0] == 1 && Merrit[2] == playerid)
	{
		if(!IsPlayerInRangeOfPoint(Merrit[3], 10.0, 2363.9543,-1958.5900,1601.0859 ) || !IsPlayerInRangeOfPoint(Merrit[2], 10.0, 2363.9543,-1958.5900,1601.0859)) return 0;
		f(global_str, 300, " - %s (%s) [%d]", text, PN(playerid), playerid);
		ProxDetector(25.0, playerid, global_str, COLOR_CHAT, 1);
		if(GetString(text, "да"))
		{
		    Merrit[0] = 2;
			f(global_str, 300, "%s: Невеста %s согласны ли вы стать женой %s?", PN(Merrit[1]), PN(Merrit[3]), PN(Merrit[2]));
			ProxDetector(20, playerid, global_str, COLOR_SCHAT,1);
			SCM(Merrit[3], COLOR_GREY, !"[Подсказка] {FFFFFF}Для того чтобы сделать свой выбор напиши в игровой чат да/нет");
		}
		if(GetString(text, "нет"))
		{
		    SCM(Merrit[3], COLOR_VALIK, !"[Информация] {FFFFFF}Ваш жених отклонил предложение пожениться!");
		    f(global_str, 300, "%s тихо передал пистолет невесте", PN(Merrit[1]));
			ProxDetector(25, playerid, global_str, COLOR_ME);
		    _GiveGun(Merrit[3], 24, 10);
		    Merrit[0] = 0;
		}
		return 0;
	}
	else if(Merrit[0] == 2 && Merrit[3] == playerid)
	{
		if(!IsPlayerInRangeOfPoint(Merrit[3], 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Жених не в церкови!");
		if(!IsPlayerInRangeOfPoint(Merrit[2], 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Невеста не в церкови!");
		f(global_str, 300, " - %s (%s) [%d]", text, PN(playerid), playerid);
		ProxDetector(25.0, playerid, global_str, COLOR_CHAT, 1);
		if(GetString(text, "да"))
		{
		    SCM(Merrit[2], COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно приняли помолвку , теперь вы можете поцеловатся");
		    SCM(Merrit[3], COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно приняли помолвку , теперь вы можете поцеловатся");
			strmid(PI[playerid][pMerrit], PN(Merrit[2]), 0, MAX_PLAYER_NAME);
			strmid(PI[Merrit[2]][pMerrit], PN(Merrit[3]), 0, MAX_PLAYER_NAME);
		    Merrit[0] = 0;
		    f(global_str, 300, "Поздравляем: %s[%d] и %s[%d] теперь они муж и жена!", PN(Merrit[2]), Merrit[2], PN(Merrit[3]), Merrit[3]);
		    SCMALL(COLOR_GOLD, global_str);
		    GiveMoney(Merrit[1], GLS[20]);
		    f(global_str, 300, "[Информация] {FFFFFF}Вы получили %d$ за проведение свадьбы", GLS[20]);
			SCM(Merrit[1], COLOR_VALIK, global_str);
		}
		else if(GetString(text, "нет"))
		{
		    SCM(Merrit[2], COLOR_VALIK, !"[Информация] {FFFFFF}Ваша жена отклонила предложение пожениться!");
		    Merrit[0] = 0;
			ProxDetector(25, playerid, "[Информация] {FFFFFF}Свадьба была сорвана!", COLOR_ME);
		}
		return 0;
	}
	if(GetString(text, ")"))
	{
	    f(global_str, 80, " %s[%d] улыбается", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "))"))
	{
	    f(global_str, 80, " %s[%d] смеется", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "("))
	{
	    f(global_str, 80, " %s[%d] грустит", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "(("))
	{
	    f(global_str, 80, " %s[%d] сильно расстроился", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "xD"))
	{
	    f(global_str, 80, " %s[%d] валяется от смеха", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, ":D"))
	{
	    f(global_str, 80, " %s[%d] хохочет во весь голос", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "O_o"))
	{
	    f(global_str, 80, " %s[%d] очень удивлен", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, ">_<"))
	{
	    f(global_str, 80, " %s[%d] сморщился от злости", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, ";)"))
	{
	    f(global_str, 80, " %s[%d] подмигивает", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		return 0;
	}
	else if(GetString(text, "q"))
	{
	    if(!PlayerLie{playerid})
	    {
			if(PI[playerid][pAdmin])
		    {
	            f(global_str, 300, " %s[%d] показал(а) распальцовку {33AA33}Admins Team", PN(playerid), playerid);
				ProxDetector(25, playerid, global_str, COLOR_ME);
				ApplyAnimationEx(playerid, !"GHANDS", !"gsign1LH", 4.0, 0, 0, 0, 0, 0, 1);
				return 0;
			}
			new member[30];
			switch(PI[playerid][pMember][0])
			{
				case TEAM_GROOVE: member = "{009327}Grove Street";
				case TEAM_VAGOS: member = "{D1DB1C}Vagos Family";
				case TEAM_BALLAS: member = "{cc00cc}West Coast Ballas";
				case TEAM_WOLFS: member = "{7F6464}Night Wolfs";
				case TEAM_CORONOS: member = "{00FFE2}Varioz Los Aztecas";
				case TEAM_RIFA: member = "{6666FF}The Rifa Gang";
				case TEAM_BIKERS: member = "{BA541D}Warlock MC";
			}
	        f(global_str, 300, " %s показал(а) распальцовку %s", PN(playerid), member);
			ProxDetector(25, playerid, global_str, COLOR_ME);
			ApplyAnimationEx(playerid, !"GHANDS", !"gsign1LH", 4.0, 0, 0, 0, 0, 1, 1);
			return 0;
		}
	}
	if(LiveOffer[playerid] != INVALID_PLAYER_ID)
	{
	    new id = LiveOffer[playerid];
        if(IsPlayerConnected(id))
        {
	        if(LiveOfferID[id] == playerid || LiveOfferID[playerid] == id)
	        {
	            switch(PI[playerid][pMember][0])
	            {
	                case TEAM_RADIO: global_str = "LS";
	                case TEAM_RADIOSF: global_str = "SF";
	                case TEAM_RADIOLV: global_str = "LV";
	                default: global_str = "";
	            }
	            if(!IsANews(playerid)) f(global_str, 300, "Гость %s[%d]: %s", PN(playerid), playerid, text);
	        	else f(global_str, 300, "Репортёр [%s] %s[%d]: %s", global_str, PN(playerid), playerid, text);
		       	SCMALL(COLOR_LIGHTGREEN, global_str);
			}
			else LiveOffer[playerid] = INVALID_PLAYER_ID;
		}
		else LiveOffer[playerid] = INVALID_PLAYER_ID;
		return 0;
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -575.7592, 2568.7976, 1702.5029))
	{
	    f(global_str, 300, "[Микрофон] %s[%d] говорит:{FFFFFF}  %s", PN(playerid), playerid, text);
	    ProxDetector(100.0, playerid, global_str, 0x90E9D6FF, 1);
		return 0;
	}
	f(global_str, 300, "{FFFFFF}%s[%d] говорит:{B7AFAF}  %s", PN(playerid), playerid, text);
	ProxDetector(25.0, playerid, global_str, -1, 1);
	if(!IsANotControllable(playerid) && CreteBomb[playerid] == 0 && !AnimPlayed{playerid} && !selfi{playerid})
	{
		ApplyAnimation(playerid, !"PED", !"IDLE_CHAT", 4.1, 0, 1, 1, 1, 1, 1);
		CallTimeOutFunction("ClearAnim", 100 * strlen(text), false, "d", playerid);
	}
	SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 10000);
	return 0;
}
public: ClearAnim(playerid) return ApplyAnimation(playerid, !"CARRY", !"crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!pTemp[playerid][tAuthorized])
		return Kick(playerid);

	for(new i; i < sizeof(CarSellMarket); i++)
		if(!Controllable{playerid} or vehicleid == CarSellMarket[i][data_CarID])
			return ClearAnimations(playerid);

	if(!ispassenger)
		CheckEnterCar(playerid, vehicleid);

	if(IsAOwnableCar(vehicleid))
	{
	    new number = GetVehicleID(vehicleid);
		if(CarInfo[number][cLock] == 1)
		{
 	        ClearAnimations(playerid);
 	        SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Этот транспорт закрыт!");
			if(CarInfo[number][cAlarmON] == 1)
	   		{
				SetAlarmStatus(vehicleid, true);
				foreach(Player, i)
				{
					if(playerid == i) continue;
					else if(IsPlayerHaveCar(i, vehicleid))
					{
						new Float:X, Float:Y, Float:Z;
						GetVehiclePos(vehicleid, X, Y, Z);
						f(global_str, 100, "[Информация] {FFFFFF}На транспорте [%s] сработала сигнализация", OwnCarNumber(vehicleid));
						SCM(i, COLOR_YELLOW, global_str);
						SCM(i, COLOR_RED, !"[Информация] {FFFFFF}Местоположение транспорта указано на карте!");
						EnableGPSForPlayer(i, X, Y, Z);
						break;
					}
				}
			}
		}
	}

	if(SharInfo[playerid][sharStatus] && vehicleid == SharInfo[playerid][sharVehicle])
	{
		for(new i; i < 10; i++)
			if(IsPlayerAttachedSlotUsedEx(playerid, i)) RemovePlayerAttachedObject(playerid, i);

		SetEngineStatus(vehicleid, true, playerid);
	}

	if(AksSlot[playerid][0][5] && IsPlayerAttachedSlotUsedEx(playerid, 5)) 
		RemovePlayerAttachedObject(playerid, 5);
	
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(VehicleInfo[vehicleid][vPlayer]==playerid &&  GetVehicleModelEx(vehicleid)==512 && VehicleInfo[vehicleid][vTeam] == TEAM_LICENSERS) VehicleInfo[vehicleid][vPlayer] = -1;
	
	if(SharInfo[playerid][sharStatus] && vehicleid == SharInfo[playerid][sharVehicle])
	{
		for(new i; i < 8; i++)
			if(AksSlot[playerid][0][i] && !AksDel[playerid][i]) SetPlayerAccessory(playerid, AksSlot[playerid][0][i], i);

		SetEngineStatus(vehicleid, false, playerid);
	}
	
	if(AksSlot[playerid][0][5] && !IsPlayerAttachedSlotUsedEx(playerid, 5) && !AksDel[playerid][5]) 
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);

	return 1;
}

stock GetVehicleID(carid)
{
	if(VehicleInfo[carid][vID] != -1 && IsValidVehicle(carid)) return VehicleInfo[carid][vID];
	return -1;
}

stock IsAOwnableCar(carid)
{
	if(!(VehicleInfo[carid][vID] == -1)) return 1;
	return 0;
}

stock IsASellCar(carid)
{
	if(IsAOwnableCar(carid) && VehicleInfo[carid][vFamily] == -1 && GetString(CarInfo[GetVehicleID(carid)][cOwner], "The State") or SellCard[carid] != -1)
		return true;

	return false;
}

stock IsATaxi(carid)
	return (VehicleInfo[carid][vJob] == 5);

stock CheckEnterCar(playerid, vehicleid)
{
	if(GetPlayerVirtualWorld(playerid)!=1228)
	{
		foreach(Player, id)
		{
	    	for(new i; i < 20; i++)
	    	{
	    		if(!(VehicleInfo[vehicleid][vFamily] == -1) && FP_Data[id][F_FAMILY_IDCAR_CARS][i] == vehicleid && !(FP_Data[id][F_FAMILY_ID] == FP_Data[playerid][F_FAMILY_ID]))
                {
					ClearAnimations(playerid);
                    SCMF(playerid, COLOR_VALIK, "Этот транспорт принадлежит семье '%s', он Вам недоступен!", GetFamilyDataString(FP_Data[id][F_FAMILY_ID], "name"));
                }
            }
    	}
		
		for(new i; i < 3; i++)
		{
			if(vehicleid == autoSelectionWinners_Data[i][1])
				ClearAnimations(playerid);
		}

		if(VehicleInfo[vehicleid][vJob] != 0)
		{
		    new hour,minuite,second;
		    gettime(hour,minuite,second);
			if(PlayerJob[playerid] != VehicleInfo[vehicleid][vJob])
			{
			    SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этого транспорта!");
				ExitCar(playerid);
			}
			else if(!InJob[playerid] && VehicleInfo[vehicleid][vJob] == JOB_COLLECTOR)
			{
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Ошибка", !"{FFFFFF}Сначала переоденьтесь", !"Ок", !"");
				ExitCar(playerid);
			}
		}
		
		else if(VehicleInfo[vehicleid][vTeam])
		{
			if(!TeamDuty{playerid} && !(VehicleInfo[vehicleid][vTeam] == TEAM_LICENSERS))
			{
		        SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Служебный транспорт доступен только во время работы!");
	   			ExitCar(playerid);
				return 0;
			}
			if(GetTeamID(playerid) != VehicleInfo[vehicleid][vTeam] && (VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS || CarTest[playerid] == -1 && MotoTest[playerid] == -1))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этого транспорта!");
				ExitCar(playerid);
			}
			else
			{
			    if(PI[playerid][pRank] < VehicleInfo[vehicleid][vRank] && (VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS || CarTest[playerid] == -1 && MotoTest[playerid] == -1))
			    {
			        SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Ваш ранг недостаточно высок!");
					ExitCar(playerid);
			    }
			}
		}
		else if(IsAArendCar(vehicleid))
		{
		    if(ArendInfo[GetArendCarID(vehicleid)][aID] == 578)
		    {
 				if(FP_Data[playerid][F_FAMILY_ID] == -1)
					return ExitCar(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот транспорт доступен только для членов семьи!");
			}
		}
		else if(IsAPlane(vehicleid))
		{
		    if(CarTest[playerid] == -1 || VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS)
		    {
				if(!GetPlayerLicense(playerid, 2))
				{
				    SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Возможно у вас нет лицензии на полеты, поэтому вы не можете водить этот транспорт!");
					ExitCar(playerid);
					return 1;
				}
			}
		}
		else if( IsABoat(vehicleid) )
		{
			if(!GetPlayerLicense(playerid, 3))
			{
				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Возможно у вас нет лицензии на вождение водного транспорта, поэтому вы не можете водить на этой лодке!");
				ExitCar(playerid);
				return 1;
			}
		}
		else if(IsABike(vehicleid))
		{
            if(MotoTest[playerid] == -1 || VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS)
			{
				if(!GetPlayerLicense(playerid, 1))
			    {
	   				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Возможно у вас нет лицензии на вождение мотоцикла, поэтому вы не можете водить этот транспорт!");
			    	ExitCar(playerid);
			    	return 1;
	    		}
			}
		}
		else if(!IsABike(vehicleid) && !IsAPlane(vehicleid) && !IsABoat(vehicleid) && !IsAVelik(vehicleid) && !IsAMoped(vehicleid))
		{
			if(CarTest[playerid] == -1 || VehicleInfo[vehicleid][vTeam] != TEAM_LICENSERS)
			{
				if(!GetPlayerLicense(playerid, 0))
				{
					SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Возможно у вас нет лицензии на вождение, поэтому вы не можете водить это авто.");
					ExitCar(playerid);
					return 1;
				}
			}
		}
	}
	return 1;
}

stock ExitCar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
	else ClearAnimations(playerid);
	return 1;
}

stock SetPlayerMoney(playerid, money)
{
	ResetPlayerMoney(playerid);
	return GivePlayerMoney(playerid, PI[playerid][pMoney] = money);
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC(playerid)) return 1;
	new carid = GetPlayerVehicleID(playerid);
	if(oldstate == 2)
	{
		if(Int_GetPlayerData(playerid, "ShowTrainTable") && PlayerJob[playerid] == 22 && InJob[playerid] && GetVehicleModelEx(PI[playerid][plveh]) == 538)
		{
			PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
			return SPD(playerid, 4290, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы хотите завершить рейс?", !"Выбрать", !"Отмена");
		}
	
		if(!(auto_drive_select[playerid] == -1) && !(PI[playerid][plveh] == -1))
			UpdatePlayerPos(playerid, -1637.2988, 1201.5315, 7.2080, 244.5), SetPlayerVirtualWorld(playerid, 0), auto_drive_select[playerid] = -1;

		for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
			if(!(Bodyguard_npcData[playerid][i][bgnpc_NPC] == INVALID_PLAYER_ID))
				exitVehiclePed(Bodyguard_npcData[playerid][i][bgnpc_NPC]);

		PLVEH_destroy(playerid);
	}
    if(oldstate == 2)
    {
        if(TimetoReturn[playerid]==0)
        {
	        if(pTemp[playerid][pArendaCar]==pTemp[playerid][pcarid])
			{
				TimetoReturn[playerid]=120;
				SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}У вас есть 2 минуты чтобы вернуться обратно в транспорт.");
			}
		}
		pTemp[playerid][pcarid] = INVALID_VEHICLE_ID;

    }
	if(newstate==2)
	{

	    ResetDoorsStatus(carid);
	    if(IsAVelik(carid)) SetEngineStatus(carid,true, playerid);
	    if(VehicleInfo[carid][vJob])
	    {
		    switch VehicleInfo[carid][vJob] do
		    {
		        case 1..5,11,13,14:
				{
					VehicleInfo[carid][vFilled] = 1;
					if((VehicleInfo[carid][vPlayer]!=-1) && VehicleInfo[carid][vPlayer]!=playerid)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Этот транспорт уже арендуют!"),RemovePlayerFromVehicle(playerid);
					if(PlayerJob[playerid] != VehicleInfo[carid][vJob]) return RemovePlayerFromVehicle(playerid);
					if(PlayerJob[playerid] == VehicleInfo[carid][vJob] && pTemp[playerid][pArendaCar] != carid)
					{
						if(pTemp[playerid][pArendaCar]!=-1)
						{
							SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже арендуете рабочий транспорт!");
							return RemovePlayerFromVehicle(playerid);
						}
						f(global_str, 400,"\n\n{FFFFFF}Стоимость аренды этого транспорта состовляет {42B02C}%d${FFFFFF}.\n{FAAC58}Вы получите бесплатную заправку при аренде авто.\n\n{FFFFFF}Обратите внимание что этот транспорт необходимо вернуть в том состоянии в котором вы его арендовали.\nВ ином случае вам будет выписан чек за порчу государственного имущества!\n ",GLS[15]);
						SPD(playerid,RABOTABUS+1,DIALOG_STYLE_MSGBOX, !"Аренда транспорта",global_str, !"Согласен", !"Отмена");
					}
				}
			}
		}

	    pTemp[playerid][pcarid] = carid;
	    pTemp[playerid][pDeathCar] = carid;

		if(carid == SharInfo[playerid][sharVehicle]) GameTextForPlayer(playerid, "Vozdushnyy shar",3000,1);
	    else GameTextForPlayer(playerid, FixText(GetVehicleName(carid)), 3000, 1);

	    VehicleSeat[carid][0] = playerid;
		GetVehicleHealth(carid,VehicleHealth[carid]);
	    if(pTemp[playerid][pArendaCar]!=-1 && VehicleInfo[carid][vJob]==PlayerJob[playerid]) TimetoReturn[playerid]=0;
	    if(PlayerJob[playerid] == JOB_COLLECTOR)
	    {
		    if(IsPlayerInIncVehicle(playerid))
		    {
			    if(InJob[playerid] == 1)
			    {
					new rand = random(sizeof(IncCP));
					TogglePlayerDynamicCP(playerid, IncCP[rand][0], true);
					SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Едьте в обозначенное на карте место");
					NumInc_CP[playerid] = rand;
					SetPlayerColor(playerid,0xBFC0C2FF);
					InJob[playerid] = 2;
			    }
			    else if(InJob[playerid] == 2)
			    {
			        new rand = NumInc_CP[playerid];
					TogglePlayerDynamicCP(playerid, IncCP[rand][0], true);
					SetPlayerColor(playerid,0xBFC0C2FF);
			    }
			    else if(InJob[playerid] == 4)
			    {
			        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) TogglePlayerDynamicCP(playerid, BankCP[0], true);
					else TogglePlayerDynamicCP(playerid, BankCP[2], true);
			        InJob[playerid] = 5;
			    }
		    }
	    }
	    PlayerCar[playerid] = carid;
	    PlayerSeat[playerid] = 0;
	    SetCameraBehindPlayer(playerid);
	    SpeedometrSetting(playerid, 1);
     	CheckEnterCar(playerid, carid);
	    if(VehicleInfo[carid][vJob] == JOB_MUSOR)
	    {
	        if(PlayerJob[playerid] == JOB_MUSOR)
	        {
	            for(new i; i < MAX_MUSORS; i ++) TogglePlayerDynamicCP(playerid, MusorCP[i], true);
		        MusorovozPlayer[carid] = playerid;
		        InJob[playerid] = 1;
	        }
	    }
		for(new i; i < 20; i++)
		{
			if(VehicleInfo[carid][vFamily] != -1 && carid == FP_Data[playerid][F_FAMILY_IDCAR_CARS][i])
			{
				SCMF(playerid, COLOR_VALIK, "Этот транспорт принадлежит семье '%s', стоимость аренды: 0$ в 1 минуту (с банковского счёта)", GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name"));
				SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"{73B461}Аренда семейного авто", "{ffffff}{73B461}-{ffffff} Этот транспорт принадлежит семье {73B461}%s{ffffff}.\n\n{73B461}-{ffffff} Текущая стоимость: {73B461}$0{ffffff} в 1 минуту\n{73B461}-{ffffff} Стоимость аренды будет списываться с Вашего банковского счёта каждую 1 минуту\n\n{CCCCCC}Для продолжения нажмите 'Далее'", !"Далее", !"", GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name"));
				break;
			}
		}
        if(GetEngineStatus(carid) <= 0)
        {
			SCM(playerid, 0xDFCFCFFF, !"[Подсказка] {DC4747}Чтобы завести двигатель введите {DFCFCF}/engine{DC4747} или нажмите {DFCFCF}N");
			SCM(playerid, 0xDFCFCFFF, !"[Подсказка] {DC4747}Для управления поворотниками , используйте клавиши: {DFCFCF}(NUM4/NUM6)");
			SCM(playerid, 0xDFCFCFFF, !"[Подсказка] {DC4747}В транспорте присутствует радио{DFCFCF}[/radio]");
			SetEngineStatus(carid,false, playerid);
			if(IsACar(carid) && !ImprovementsData[playerid][idCarSkill]) 
			{
			    f(global_str, 300, "[Подсказка] {DC4747}Ваш текущий навык вождения: {DFCFCF}[%d/100]  {DC4747}Информация: /carskill", PI[playerid][pCarSkill]);
			    SCM(playerid, 0xDFCFCFFF, global_str);
			}
			if(pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] == playerid) {
				SCM(playerid, 0xDFCFCFFF, !"[Подсказка] {DC4747}Если вы заведете двигатель, табличка пропадет");
			}
		}
		if(IsAArendCar(GetPlayerVehicleID(playerid)))
		{
		    if(ArendInfo[GetArendCarID(GetPlayerVehicleID(playerid))][aID] == 578)
		    {
		        if(ArendKey[playerid] != INVALID_VEHICLE_ID)
		        {
		            if(!Proviziya{playerid})
		            {
			            SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}На миникарте установлена метка, где расположен склад СФ!\nНа нем вы должны загрузить товар, который нужно привести в Аксиому!\n\n", !"Принять", !"");
			            EnableGPSForPlayer(playerid, -1733.3938, 187.7363, 3.5547);
					}
					else
					{
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Ваша машина уже загружена. Отправляйтесь на склад Аксиомы, чтобы\nразгрузить машину с товаром!\n\n", !"Принять", !"");
						EnableGPSForPlayer(playerid, 1830.3701, 416.7932, 20.1436);
				    }
				}
			}
		}
		if(GetVehicleModelEx(GetPlayerVehicleID(playerid)) == 433 || GetVehicleModelEx(GetPlayerVehicleID(playerid)) ==548) SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Для того чтобы начать развозку оборудования введи [/carm]");
	    new model = GetVehicleModelEx(carid);
		if(model == 528 || (model >= 596 && model <= 599) && IsACop(playerid) && PI[playerid][pRank] > 5) SCM(playerid,COLOR_WHITE, !" {9ACD32} Используйте 2 чтобы выбросить полосу с шипами");
		if(VehicleInfo[carid][vModification]) GameTextForPlayer(playerid, VehicleInfo[carid][vStyle] ? ("~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~STYLE:~r~ SPORT!") : ("~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~STYLE:~g~ COMFORT!"), 3000, 3);
		if(IsASellCar(carid))
	    {
	       	f(global_str, 400,"{FF9900}Этот транспорт продается.\n\n{FFFFFF}Модель: {AFAFAF}%s{FFFFFF}\nНомер: {AFAFAF}SP %d{FFFFFF}\nСтоимость: {AFAFAF}$%d{FFFFFF}\n\n{FFFFFF}Чтобы купить нажмите {B83434}'Купить'",
	       	GetVehicleName(carid),carid,GetCarPrice(GetVehicleModelEx(carid)));
			SPD(playerid,11,0,"Транспорт продается",global_str,"Купить", !"Отмена");
		}
		if(IsAOwnableCar(carid) && !IsASellCar(carid) && VehicleInfo[carid][vFamily] == -1)
	    {
	        new number = GetVehicleID(carid);
	        if(CarInfo[number][cLock])
	        {
	            RemovePlayerFromVehicle_Ex(playerid);
	            return 1;
	        }
		    else
		    {
				f(global_str,150,"Этот транспорт зарегистрирован на жителя {9ACD32}%s",CarInfo[number][cOwner]);
			    SCM(playerid,COLOR_WHITE,global_str);
				if(PI[playerid][pAdmin] > 0)
				{
				    f(global_str, 100, "Налог этого транспорта составляет %d", CarInfo[number][cShtrafer]);
			    	SCM(playerid, COLOR_VALIK, global_str);
				}
			    if(CarInfo[number][cAlarmON])
			    {
				    SetAlarmStatus(carid,true);
					foreach(new i: Player)
					{
					    if(IsPlayerHaveCar(i,carid))
					    {
							new Float:X, Float:Y, Float:Z;
							GetVehiclePos(carid, X, Y, Z);
							f(global_str, 150, "[Информация] {FFFFFF}На транспорте [%s] сработала сигнализация", OwnCarNumber(carid));
							SCM(i, COLOR_YELLOW, global_str);
							SCM(i, COLOR_RED, !"[Информация] {FFFFFF}Местоположение транспорта указано на карте!");
							EnableGPSForPlayer(i, X, Y, Z);
							break;
						}
					}
				}
				if(CarInfo[number][cShtraf] > 0)
				{
				    f(global_str, 400, "\n\n{FFFFFF}Этот транспорт находится на штрафстоянке!\n\nВладелец должен внести за него залог.\nРазмер залога: $%d\n\nПоставил на стоянку: %s\n{9EF04B}Оплатить залог можно в любом отделении банка!", CarInfo[number][cShtrafName], CarInfo[number][cShtraf]);
				    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Запрещено!", global_str, !"Ок", !"");
				    RemovePlayerFromVehicle(playerid);
				}
		    }
	    }
  		if(IsAArendCar(carid))
		{
			if(ArendKey[playerid] == INVALID_VEHICLE_ID)
			{
       			if(!IsAArended(carid))
				{
				    new cost;
				    new arid = GetArendCarID(GetPlayerVehicleID(playerid));
				    new bizid = ArendInfo[arid][aBizid];
				    if(bizid != -1 && bizid < sizeof ArendInfo){
					switch(GetVehicleModelEx(carid))
				    {
				        case 454: cost= BizData[bizid][bItem][0];
				        case 484: cost = BizData[bizid][bItem][1];
				        case 558: cost = BizData[bizid][bItem][2];
				        case 541: cost = BizData[bizid][bItem][3];
				        case 560: cost = BizData[bizid][bItem][4];
				        case 409: cost = BizData[bizid][bItem][5];
						case 462: cost = BizData[bizid][bItem][6];
						case 469: cost = BizData[bizid][bItem][7];
						case 487: cost = BizData[bizid][bItem][8];
				        default: cost = BizData[bizid][bItem][9];
					}}
					else cost = 20000;
				    f(global_str, 200,"{FFFFFF}Транспорт для аренды!\n\n{FF9900}Модель: %s\nСтоимость: %d\n\n{AFAFAF}Чтобы арендовать нажмите 'Аренда'", GetVehicleName(carid), cost);
					SPD(playerid, 230, 0, "Аренда", global_str, "Аренда", !"Отмена");
				}
                else
				{
				    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Этот транспорт уже арендуют!");
					RemovePlayerFromVehicle(playerid);
				}
			}
			else
			{
				if(ArendKey[playerid] != GetArendCarID(carid))
				{
					SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже арендуете транспорт! Используйте /unrentcar чтобы отказаться от аренды!");
					RemovePlayerFromVehicle(playerid);
				}
			}
		}
		if(VehicleInfo[carid][vJob] == 12)
	    {
			if(InJob[playerid]==3)
			{
			    new rand;
				if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) rand = random(8);
				else
				{
				    new did = random(14);
				    switch(did)
				    {
				        case 1..6: rand = did+8;
				        case 7..14: rand = did;
						default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Сядьте на мопед заново!");
					}
				}
			    InJob[playerid]=4;
			    SetPlayerChatBubble(playerid, "Положил ящик с пиццой в багажник мопеда", COLOR_PURPLE, 10.0, 5000);
			    SPD(playerid,0,0,!"","Вы успешно положили пиццу в багажник вашего мопеда.\nСледуйте чекпоинту чтобы доставить пиццу и получить денег.\n\nБудьте осторожны на дороге!", !"Принять","");
			    if(IsPlayerAttachedSlotUsedEx(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
				if(NumInc_CP[playerid]==-1)
				{
					TogglePlayerDynamicCP(playerid, PizzCP[rand][0], true);
					NumInc_CP[playerid] = rand;
					EnableGPSForPlayer(playerid, PizzaCPPos[rand][0], PizzaCPPos[rand][1], PizzaCPPos[rand][2]);
				}
			}
			else SCM(playerid,COLOR_ACHAT,"Для начала развозки пиццы возьмите ее в пункте выдачи!");
	    }
	    else if(InJob[playerid]==3 && InJobs[playerid]!=0) ExitCar(playerid);
		if(VehicleInfo[carid][vJob] == 18)
	    {
	        if(InJob[playerid]!=1)
			{
				SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не переоделись в рабочую одежду!");
				RemovePlayerFromVehicle(playerid);
				return 0;
			}
  		    SetPVarInt(playerid,"fermar",Global_Time+170);
			f(global_str,400,"{C8C4BA}[ Подсказка ]{FFFFFF}\n\nОтправляйтесь по чекпоинтам для выполнения своей работы,\nполучить зарплату вы сможете в здании фермы.\nЗа проделаный пункт работы вы получите 60 очк. фермера.\n\nУдачной работы!");
	        SPD(playerid,0,0,!"",global_str, !"Принять","");
	        TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[0],true);
	        InJob[playerid]=3;
	        FarmJob[playerid]=0;
	    }
	    else if(VehicleInfo[carid][vJob] == 19)
	    {
	        if(InJob[playerid]!=1)
			{
				SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не переоделись в рабочую одежду!");
				RemovePlayerFromVehicle(playerid);
				return 0;
			}
			SetPVarInt(playerid,"fermar",Global_Time+120);
			f(global_str,400,"{C8C4BA}[ Подсказка ]{FFFFFF}\n\nОтправляйтесь по чекпоинтам для выполнения своей работы,\nполучить зарплату вы сможете в здании фермы.\nЗа проделаный пункт работы вы получите 90 очк. фермера.\n\nУдачной работы!");
	        SPD(playerid,0,0,!"",global_str, !"Принять","");
	        TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[0],true);
	        InJob[playerid]=3;
	        FarmJob[playerid]=0;
	    }

	    else if(VehicleInfo[carid][vJob] == 20)
	    {
	        if(InJob[playerid]!=1)
			{
				SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не переоделись в рабочую одежду!");
				RemovePlayerFromVehicle(playerid);
				return 0;
			}
			SetPVarInt(playerid,"fermar",Global_Time+200);
			f(global_str, 400,"{C8C4BA}[ Подсказка ]{FFFFFF}\n\nОтправляйтесь по чекпоинтам для выполнения своей работы,\nполучить зарплату вы сможете в здании фермы.\nЗа проделаный пункт работы вы получите 50 очк. фермера.\n\nУдачной работы!");
	        SPD(playerid,0,0,!"",global_str, !"Принять","");
	        TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[0],true);
	        InJob[playerid]=3;
	        FarmJob[playerid]=0;
	    }
	    if(VehicleInfo[carid][vTeam] != 0)
	    {
	        if(VehicleInfo[carid][vTeam] == TEAM_LICENSERS && CarTest[playerid] != -1 && GetVehicleModelEx(carid)== 426)
	        {
	            TogglePlayerDynamicRaceCP(playerid,Test_CP[0],true);
	            J_RepairVehicle(GetPlayerVehicleID(playerid));
	            SPD(playerid,0,0,!"","{FFFFFF}Едьте по чекпоинтам не нарушая пдд. Иначе вы провалите тест.\n{B2D63B}Ни в коем случае не выходите из автомобиля иначе вы так-же провалите тест!\n\n{D72121}Обязательно следите за подсказками так как вам засчитает ошибку!\nПри малейшем повреждение авто, вы провалите тест.", !"Принять","");
			}
			else if(VehicleInfo[carid][vTeam] == TEAM_LICENSERS && CarTest[playerid] != -1 && GetVehicleModelEx(carid)== 512)
			{
			    VehicleInfo[carid][vPlayer]=playerid;
			    TogglePlayerDynamicRaceCP(playerid,FTest_CP[0],true);
	            J_RepairVehicle(GetPlayerVehicleID(playerid));
	            SPD(playerid,0,0,!"","{979D93}Уважаемый пилот!\n\n\nБудьте осторожны при полёте, этот транспорт принадлежит авиашколе.\nВ случае поломки самолёта вы обязаны будете заплатить за его ремонт в реальной стоимости.\nЕсли у вас не будет денег для его оплаты, вам придётся выплачивать за него кредит.\n\n{9FC084}Следуйте за чекпоинтами. Удачного полёта", !"Закрыть","");
			}
			else if(VehicleInfo[carid][vTeam] == TEAM_LICENSERS && MotoTest[playerid] != -1 && GetVehicleModelEx(carid)== 586)
			{
			    VehicleInfo[carid][vPlayer]=playerid;
			    TogglePlayerDynamicRaceCP(playerid,MTest_CP[0],true);
	            J_RepairVehicle(GetPlayerVehicleID(playerid));
	            SPD(playerid,0,0,!"","\n\n{FFFFFF}Едьте по чекпоинтам не нарушая пдд. Иначе вы провалите тест.\n{9ACD32}Ни в коем случае не выходите из мотоцикла иначе вы так-же провалите тест!\n\n", !"Принять","");
			}
	        else if(GetTeamID(playerid) != VehicleInfo[carid][vTeam])
	        {
		        SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}У вас нет ключей от этого транспорта!");
				RemovePlayerFromVehicle(playerid);
	        }
	    }
	    if(PlayerJob[playerid] == 17 )
		{
		    if(InJob[playerid] == 3)
		    {
				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы уронили сено!");
				InJob[playerid] = 1;
			    RemovePlayerAttachedObject(playerid, 7);
				for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], true);
			}
		}
		IsDropBomb(playerid);
	    if(carid == pTemp[playerid][pArendaCar] && BusTime[playerid] != 0)
	    {
	        BusTime[playerid]=0;
	        SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Продолжайте движение в том же направлении");
	    }

	}
    if(newstate == PLAYER_STATE_PASSENGER)
    {
        if(Vehs[carid][vCena] != 0)
	    {
	        new idvoditel = GetVehicleSeat(carid,0);
	        if(idvoditel != INVALID_PLAYER_ID)
		    {
		        if(PI[playerid][pMoney] < Vehs[carid][vCena])
				{
				    SetPlayerChatBubble(playerid, !"Показал(а) водителю проездной.", COLOR_PURPLE, 15.0, 5000);
				    ProxDetector(25.0, playerid, !"Показал(а) водителю проездной.", COLOR_PURPLE);
				}
	            else
				{
					GiveMoney(playerid, -Vehs[carid][vCena]);
					GiveMoney(idvoditel, Vehs[carid][vCena]);
					f(global_str, 150, "[Информация] {FFFFFF}Пассажир %s оплатил билет, добавлено к зарплате", PN(playerid));
					SCM(idvoditel, 0x6495EDFF, global_str);
				}
			}
	    }
	    new seat = GetPlayerVehicleSeat(playerid);
	    if(PlayerCar[playerid] != INVALID_VEHICLE_ID) VehicleSeat[PlayerCar[playerid]][PlayerSeat[playerid]] = -1;
	    VehicleSeat[carid][seat] = playerid;
	    PlayerCar[playerid] = carid;
	    PlayerSeat[playerid] = seat;
	    SetCameraBehindPlayer(playerid);
	    if(IsATaxi(carid))
	    {
	        new id = GetVehicleSeat(carid, 0);
            if(id != INVALID_PLAYER_ID)
			{
			    if(PlayerJob[id] == JOB_TAXI)
	            {
	                if(TaxiTarif[id] > 0)
			    	{
		                Taxi_GO[playerid] = 0;
		                TaxiPrice[playerid] = 0;
		                TaxiDistance[playerid] = 0;
		                ShowPlayerTD(playerid,TaxiDraw[playerid]);
				    	TextDrawShowForPlayer(playerid, BoxTaxi1);
		                TextDrawShowForPlayer(playerid, BoxTaxi2);
		                TextDrawShowForPlayer(playerid, Taximonitor);
		                TextDrawShowForPlayer(playerid, TaxiServ);
		                TextDrawShowForPlayer(playerid, TaxiDol);
		                PlayerTextDrawSetString(playerid, TaxiDraw[playerid],"0");
		                f(global_str, 80,">> {FFFFFF}%s сел к вам в такси.",PN(playerid));
		                SCM(id,COLOR_VALIK, global_str);
		                if(PI[playerid][pMoney]<=TaxiTarif[id])
    					{
	    					SCM(id,COLOR_RED,!"[ВНИМАНИЕ]{FFFFFF} У игрока который к вам сел , не хватит денег чтобы оплатить за проезд!");
		    				SCM(playerid,COLOR_RED,!"<< {FFFFFF}У вас не достаточно денег чтобы ездить на такси!");
			    			RemovePlayerFromVehicle(playerid);
    					}
	    	            SPD(playerid, 247, 2, "Как ехать?", "1. Выбрать пункт в GPS\n2. Отметить точку на карте\n3. Договориться с таксистом", "Выбор", !"Отмена");
    				}
	    			else
    				{
	    				SCM(id,COLOR_RED,!"[Информация] {FFFFFF}К вам в такси сел пассажир, но вы не получите с него прибыли, так-как вы не установили тариф!");
		    			SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Этот таксист еще не установил тариф за свои услуги!");
		    		}
	            }
    	    }
        }
	}
	if(oldstate == 2 || oldstate == 3)
	{
		if(PlayerPlayed{playerid} && GetCount(playerid, 517) < 1)
		{
			PlayerPlayed{playerid} = false;
			StopAudioStreamForPlayer(playerid);
		}
	}
	if(oldstate == 2 || oldstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = PlayerCar[playerid];
		new seat = PlayerSeat[playerid];
		if(GetVehicleModelEx(vehicleid)==570)
		{
		    NoEnterPickup[playerid] =2;
	    	TogglePlayerControllable(playerid,false);
		}
		Controllable{playerid} = true;
		SetCameraBehindPlayer(playerid);
  		if(VehicleInfo[vehicleid][vJob] == JOB_MUSOR)
	    {
	        if(PlayerJob[playerid] == JOB_MUSOR)
	        {
	            for(new i; i < MAX_MUSORS; i ++) TogglePlayerDynamicCP(playerid, MusorCP[i], false);
		        if(InJob[playerid] == 2) DetachMusor(vehicleid);
		    	InJob[playerid] = 0;
	    	}
	    }
		if(!IsAPlane(vehicleid) && !IsAVelik(vehicleid) && !IsATrain(vehicleid)) SpeedometrSetting(playerid);
		if(vehicleid != INVALID_VEHICLE_ID && GetVehicleSeat(vehicleid, seat) == playerid) VehicleSeat[vehicleid][seat] = INVALID_PLAYER_ID;
	    if(InJob[playerid]==3)
	    {
	        SCMF(playerid, COLOR_GREY, "[Информация] {FFFFFF}Вы вышли из %s, если вы что-то заработали, то можете получить зарплату в здании фермы.", VehicleInfo[vehicleid][vJob] == 18 ? "трактора" : VehicleInfo[vehicleid][vJob] == 19 ? "комбайна" : "кукурузника");
			TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[FarmJob[playerid]],false);
	        InJob[playerid]=1;
	        FarmJob[playerid]=-1;
	    }
		if(CarTest[playerid] != -1 && VehicleInfo[vehicleid][vTeam] == TEAM_LICENSERS || MotoTest[playerid] != -1)
		{
		    new i = CarTest[playerid];
		    if(GetVehicleModelEx(vehicleid)==512)
		    {
		        TogglePlayerDynamicRaceCP(playerid, FTest_CP[i], false);
		        SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы провалили тест т.к вышли из самолёта.");
		    }
			if(GetVehicleModelEx(vehicleid)==426)
			{
			    TogglePlayerDynamicRaceCP(playerid, Test_CP[i], false);
			    SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы провалили тест т.к вышли из авто.");
			}
			if(GetVehicleModelEx(vehicleid)==586)
			{
			    TogglePlayerDynamicRaceCP(playerid, MTest_CP[MotoTest[playerid]], false);
			    SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы провалили тест т.к вышли из мото.");
		    	MotoTest[playerid] = -1;
			}
			CarTest[playerid] = -1;
		}
		if(VehicleInfo[vehicleid][vJob] == JOB_COLLECTOR)
	    {
   			if(InJob[playerid] == 2 && InJob[playerid] != 5 )
		    {
          		new rand = NumInc_CP[playerid];
		        NumInc_CP[playerid]=-1;
		        InJob[playerid]=1;
				TogglePlayerDynamicCP(playerid, IncCP[rand][0], false);
		        SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)][0]);
		    }
	    }
	    if(VehicleInfo[vehicleid][vJob] == 12)
	    {
	        if(InJob[playerid]==4)
	        {
	            InJob[playerid]=3;
	            SetPlayerChatBubble(playerid, "Достал из багажника ящик с пиццой.", COLOR_PURPLE, 10.0, 5000);
	            if(!IsPlayerAttachedSlotUsedEx(playerid, 7))SetPlayerAttachedObject(playerid, 7, 2814, 1, 0.0, 0.5, -0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
	        }
	    }
		if(IsATaxi(vehicleid))
		{
			if(!PlayerSeat[playerid])
			{
    			if(PlayerJob[playerid] == JOB_TAXI)
				{
					if(TaxiTarif[playerid] > 0)
					{
						TaxiTarif[playerid] = 0;
					    //SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы теперь не на службе");
						PlayerTextDrawHide(playerid,TaxiDraw[playerid]);
					  	TextDrawHideForPlayer(playerid, BoxTaxi1);
				      	TextDrawHideForPlayer(playerid, BoxTaxi2);
				      	TextDrawHideForPlayer(playerid, Taximonitor);
				      	TextDrawHideForPlayer(playerid, TaxiServ);
				      	TextDrawHideForPlayer(playerid, TaxiDol);
						UpdateDynamic3DTextLabelText(TaxiText[vehicleid], COLOR_GOLD, "<< Такси для аренды >>");
						for(new i;i < 4;i ++)
						{
						    new player = GetVehicleSeat(vehicleid, i);
						    if(!IsPlayerConnected(player)) continue;
							if(player != INVALID_PLAYER_ID)
							{
								SCM(player,COLOR_GREY, !"[Информация] {FFFFFF}Таксист, который вез вас теперь не на службе");
								PlayerTextDrawHide(player,TaxiDraw[player]);
							  	TextDrawHideForPlayer(player, BoxTaxi1);
						      	TextDrawHideForPlayer(player, BoxTaxi2);
						      	TextDrawHideForPlayer(player, Taximonitor);
						      	TextDrawHideForPlayer(player, TaxiServ);
						      	TextDrawHideForPlayer(player, TaxiDol);
						      	if(PI[player][pMoney] > TaxiPrice[player]) GiveMoney(playerid,TaxiPrice[player]);
        						GiveMoney(player,-TaxiPrice[player]);
								PlayerTextDrawHide(player,TaxiDraw[player]);
								PlayerTextDrawSetString(playerid, TaxiDraw[playerid],"0");
								PlayerTextDrawSetString(player, TaxiDraw[player],"0");
								TaxiPrice[player] = 0;
								TaxiDistance[player] = 0;
							}
						}
					}
				}
			}
			else if(PlayerSeat[playerid] > 0)
			{
				new id = GetVehicleSeat(vehicleid, 0);
				if(id != INVALID_PLAYER_ID)
				{
 			    	if(PI[playerid][pMoney] > TaxiPrice[playerid]) 	GiveMoney(playerid,-TaxiPrice[playerid]);
 			    	GiveMoney(id,TaxiPrice[playerid]);
					PlayerTextDrawHide(playerid,TaxiDraw[playerid]);
					TextDrawHideForPlayer(playerid, BoxTaxi1);
     				TextDrawHideForPlayer(playerid, BoxTaxi2);
				    TextDrawHideForPlayer(playerid, Taximonitor);
				    TextDrawHideForPlayer(playerid, TaxiServ);
				    TextDrawHideForPlayer(playerid, TaxiDol);
					PlayerTextDrawSetString(playerid, TaxiDraw[playerid],"0");
					f(global_str, 150,"[Информация] {FFFFFF}Вы взяли $%d с игрока %s за поездку",TaxiPrice[playerid],PN(playerid));
					SCM(id,COLOR_VALIK,global_str);
					f(global_str,150,"[Информация] {FFFFFF}Вы отдали $%d таксисту %s за поездку",TaxiPrice[playerid],PN(id));
					SCM(playerid,COLOR_GREY,global_str);
					TaxiPrice[playerid]=0;
					new money;
					for(new i = 1; i < 4; i ++)
					{
						new pseat = GetVehicleSeat(vehicleid, i);
						if(pseat != INVALID_PLAYER_ID) money += TaxiPrice[pseat];
					}
					valstr(global_str, money);
					PlayerTextDrawSetString(id, TaxiDraw[id],global_str);
				}
			}
		}
 	}
	if(oldstate == 2 || oldstate == PLAYER_STATE_PASSENGER)
	{
 		new vehicleid = PlayerCar[playerid];
 		if(VehicleInfo[vehicleid][vJob] == JOB_TRUCKER)
		{
			if(InJob[playerid] == 1 && PlayerJob[playerid] == JOB_TRUCKER)
			{
			    FactoryMats += 500;
			    new gopost = PlayerGoPost[playerid];
			    DetachTrailerFromVehicle(vehicleid);
				TogglePlayerDynamicCP(playerid, GoFuelCP[gopost], false);
				TogglePlayerDynamicCP(playerid, GoGunShopCP[gopost], false);
			    SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Груз который вы везете отцепился!");
				InJob[playerid] = 0;
    			f(global_str, 400, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
				UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
				PlayerGoPost[playerid]=-1;
			}
		}
	}
	return 1;
}
stock IsAArended(carid)
{
    if(IsAArendCar(carid))
	{
	    new rentid = GetArendCarID(carid);
	    if(ArendInfo[rentid][aRentID]!=INVALID_PLAYER_ID)
	    {
	        return 1;
	    }
	}
	return 0;
}
forward CreatedMats(playerid);
public CreatedMats(playerid)
{
	if(CreateMats[playerid] == 3)
	{
	    Controllable{playerid} = true;
		CarryAnim(playerid);
		RemovePlayerAttachedObject(playerid, 6);
		SetPlayerAttachedObject(playerid, 7, 1279, 5, 0.05, 0.24, 0.2, 104, 10, 75);
		TogglePlayerDynamicCP(playerid, FerumEndCP, true);
		CreateMats[playerid] = 4;
		TogglePlayerControllable(playerid,true);
		return 1;
	}
	return 0;
}
stock CreateGate(gateid)
{
    gGate[gateid] = CreateDynamicObject(GateInfo[gateid][gObID],GateInfo[gateid][gClose_X],GateInfo[gateid][gClose_Y],GateInfo[gateid][gClose_Z],0,0,GateInfo[gateid][gClose_A],GateInfo[gateid][gWorld]);
	GateInfo[gateid][gCreated] = true;
	return 1;
}

stock CreateDoor(doorid)
{
    dDoor[doorid] = CreateDynamicObject(DoorInfo[doorid][dObID], DoorInfo[doorid][dPos][0],DoorInfo[doorid][dPos][1],DoorInfo[doorid][dPos][2], 0,0, DoorInfo[doorid][dPos][3], DoorInfo[doorid][dWorld], DoorInfo[doorid][dInterior]);
	
	switch DoorInfo[doorid][dOrg] do
	{
		case 9:
			SetDynamicObjectMaterial(dDoor[doorid], 0, 18029, "genintintsmallrest", "GB_restaursmll12", 0);
			
		case TEAM_RADIO, TEAM_RADIOSF, TEAM_RADIOLV:
		{			
			SetDynamicObjectMaterial(dDoor[doorid], 2, 19595, "lsappartments1", "carpet4-256x256", 0);
			SetDynamicObjectMaterial(dDoor[doorid], 1, 19800, "lsacarpark1", "dt_officewall1", 0);
			SetDynamicObjectMaterial(dDoor[doorid], 0, 19480, "signsurf", "sign", 0);
		}
		
		default:
			SetDynamicObjectMaterial(dDoor[doorid], 2, 3440, "airportpillar", "metalic_64", 0),
			SetDynamicObjectMaterial(dDoor[doorid], 1, 4830, "airport2", "sanairtex3", 0),
			SetDynamicObjectMaterial(dDoor[doorid], 0, 3440, "airportpillar", "metalic_64", 0xFFD3D3D3);
	}
	return false;
}

stock SetBuyGunCamera(playerid)
{
	SetPlayerCameraPos(playerid, 295.1925, -36.7806, 1002.9);
	SetPlayerCameraLookAt(playerid, 295.1925, -39.7806, 1002.9);
	InterpolateCameraPos(playerid, 295.1925, -35.7806, 1002.9, 295.1925, -38.7, 1002.9, 1000);
	InterpolateCameraLookAt(playerid, 295.1925, -38.7, 1002.9, 295.20001221, -39.29999924, 1001.59997559, 1000, CAMERA_MOVE);
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new rand = NumInc_CP[playerid];
	new gopost = PlayerGoPost[playerid];
	new team = GetTeamID(playerid);

	if(checkpointid == RingCP)
		return SPD(playerid, 188, DIALOG_STYLE_MSGBOX, !"Покупка колец", !"Вы хотите приобрести\nобручальные кольца?\nСтоимость которых (5 000$.)", !"Принять", !"Отклонить");

	else if(checkpointid == SvalkaCP[0] || checkpointid == SvalkaCP[1] || checkpointid == SvalkaCP[2])
	{
	    new carid = GetPlayerVehicleID(playerid);
	    if(carid > 0 && GetVehicleModelEx(carid) == 408)
	    {
	        if(InJob[playerid] == 1)
	        {
		        if(CarMusorCount[carid] <= 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом мусоровозе нет мусора.");
				new money = floatround(CarMusorCount[carid] * GLS[8]);
				GiveMoney(playerid, money);
				f(global_str, 100, "[Информация] {FFFFFF}Вы получили {73B461}$%d{FFFFFF} за разгруженные контейнера.", money);
				SCM(playerid, COLOR_WHITE, global_str);
				UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, "Загружено: 0%/100%");
				CarMusorCount[carid] = 0;
			}
	    }
	}
	else if(checkpointid == MatsDel_CP)
	{
	    new payout = PI[playerid][pPackets] * 5;
	    if(FactoryMats >= payout)
	    {
	        if((GetCount(playerid, 511) + payout) > 2000) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не сможете унести с собой больше 2000 материалов");
			if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не состоите в банде !");
			if(PI[playerid][pPackets] < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ингредиентов!");
			f(global_str, 100, "[Информация] {FFFFFF}Фабрика дала вам %d материалов за %d ингредиентов.", payout, PI[playerid][pPackets]);
			SCM(playerid, COLOR_VALIK, global_str);
			AddItem(playerid, 511, payout);
			PI[playerid][pPackets] = 0;
			FactoryMats -= payout/10;
		}
		else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}На фабрике нет столько материалов");
		return 1;
	}
	else if(checkpointid >= MusorCP[0] && checkpointid <= MusorCP[MAX_MUSORS-1])
	{
	    new musor = checkpointid - MusorCP[0];
	    new carid = GetPlayerVehicleID(playerid);
	    if(MusorCount[musor] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В этом контейнере нет мусора.");
	    else if(CarMusorCount[carid] >= 100)
		{
			SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Отправляйтесь на свалку чтобы разгрузить мусоровоз.");
			SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Свалка вашего города обозначена на карте красной меткой.");
			if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) EnableGPSForPlayer(playerid,2200.9934,-1977.1194,13.5576);
			else EnableGPSForPlayer(playerid,178.4099,1101.4073,16.4498);
			return 0;
		}
		else if(NowMusor[carid] != -1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Этот мусоровоз уже разгружает контейнер");
		else if(MusorCar[musor] != -1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Этот мусорный контейнер уже разгружают");
		else if(GetVehicleModelEx(carid) == 408)
		{
			if(InJob[playerid] == 1)
			{
			    new Float:angle = GetVehicleAngleToPoint(carid, MusorPos[musor][0], MusorPos[musor][1]);
				if( (angle >= -220 && angle <= -140) || (angle >= 140 && angle <= 220) )
				{
					new Float:X, Float:Y, Float:Z, Float:A;
					new Float:oX, Float:oY, Float:oZ;
					InJob[playerid] = 2;
					GetVehicleZAngle(carid, A);
					GetVehicleShiftPos(carid, 2, X, Y, Z, 7.0);
					GetVehicleShiftPos(carid, 2, oX, oY, oZ, 3.3);
					TempMusorObject[musor] = CreateDynamicObject(1509, X, Y, Z, 100, 90, A);
					Temp2MusorObject[musor] = CreateDynamicObject(1334, X, Y, Z, 100, 90, A);
					AttachObjectToObject(Temp2MusorObject[musor], TempMusorObject[musor], -2.0, 0.0, 0.0, 0.0, 270.0, 230.0, 1);
					MoveDynamicObject(TempMusorObject[musor], X, Y, Z-0.005, 0.001, 20, 90, A);
					RemoveObject[TempMusorObject[musor]] = true;
					TempMusorMusor[TempMusorObject[musor]] = musor;
					NowMusor[carid] = musor;
					MusorCar[musor] = carid;
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Загрузка началась , стойте на месте , во избежания неприятностей");
					SetVehiclePos(carid, oX, oY, oZ);
					TogglePlayerControllable(playerid, false);
					SetDoorsStatus(carid, 0);
					CallTimeOutFunction("StopMusor", 4500, false, "i", TempMusorObject[musor]);
				}
				else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны подъехать задом");
			}
		}
	}
	else if(checkpointid >= FerumCP[0] && checkpointid <= FerumCP[15])
	{
	    new ferumid = (checkpointid - FerumCP[0]);
	    if(CreateMats[playerid] == 2)
		{
		    if(PI[playerid][pONPhoneTalk]>0) return 0;
		    CreateMats[playerid] = 3;
			new Float:X = FerumCPPos[ferumid][0];
			new Float:Y = FerumCPPos[ferumid][1];
			new Float:Z = FerumCPPos[ferumid][2];
			new Float:A = FerumCPPos[ferumid][3];
			UpdatePlayerPos(playerid, X, Y, Z);
			SetPlayerFacingAngle(playerid, A);
			ShiftCords(0, X, Y, A, 0.8);
			ApplyAnimationEx(playerid, "OTB", "BETSLP_LOOP", 4.1, 1, 1, 1, 1, 0, 1);
			SetPlayerTimer(playerid, "CreatedMats", 8000, false);
			SetPlayerAttachedObject(playerid, 6, 18644, 6, 0.07, 0.02, 0.03, 10.0, 0.0, 0.0);
			Controllable{playerid} = false;
			for(new i; i < sizeof(FerumCP);i ++) TogglePlayerDynamicCP(playerid, FerumCP[i], false);
	    }
	    else if(CreateMats[playerid] == 1) SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы ещё не брали металл.");
	    else if(CreateMats[playerid] == 4) SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Отнесите материалы к остальным материалам.");
	}
	else if(checkpointid == FerumEndCP)
	{
		if(CreateMats[playerid] == 4)
		{
			if(GetPlayerVirtualWorld(playerid)>13)return Kick(playerid);
			if(GetPlayerInterior(playerid)!=2)return Kick(playerid);
	    	if(GetPlayerVirtualWorld(playerid)==10)
			{
				FactoryMats += 50;
				f(global_str, 150, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
				UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
			}
			else
			{
			    if(GetPlayerVirtualWorld(playerid)==11)
				{
				    if(OrgInfo[TEAM_ARMY][oMats]>=100000)return SPD(playerid,0,0,!"","{BCB7B7}Склад с патронами армии переполнен!", !"Закрыть","");
					OrgInfo[TEAM_ARMY][oMats]+=200;
					GLS[25] -=100;
				}
			    else if (GetPlayerVirtualWorld(playerid)==12)
				{
				    if(OrgInfo[TEAM_ARMYLV][oMats]>=100000)return SPD(playerid,0,0,!"","{BCB7B7}Склад с патронами армии переполнен!", !"Закрыть","");
					OrgInfo[TEAM_ARMYLV][oMats]+=200;
					GLS[26] -=100;
				}
				else if (GetPlayerVirtualWorld(playerid)==13)
				{
				    if(OrgInfo[TEAM_ARMYSF][oMats]>=100000)return SPD(playerid,0,0,!"","{BCB7B7}Склад с патронами армии переполнен!", !"Закрыть","");
					OrgInfo[TEAM_ARMYSF][oMats]+=200;
					GLS[43] -=100;
				}
				SaveInformation();
			}
		    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
			if(CreateMats[playerid] == 4)
			{
			    CreateMats[playerid] = 1;
				CreateMatsCount[playerid] ++;
				if(GetPlayerVirtualWorld(playerid)==10) f(global_str, 150,"Вы уже изготовили: {DC4747}%d{FFFFFF} материалов и заработали {DC4747}%d${FFFFFF}.",CreateMatsCount[playerid],CreateMatsCount[playerid] * GLS[5]);
				else f(global_str, 150,"Вы уже изготовили: {DC4747}%d{FFFFFF} материалов и заработали {DC4747}%d${FFFFFF}.",CreateMatsCount[playerid],(CreateMatsCount[playerid] * GLS[5])/2);

				SCM(playerid,COLOR_WHITE, global_str);
				RemovePlayerAttachedObject(playerid, 7);
				TogglePlayerDynamicCP(playerid, FerumEndCP, false);

				return 1;
			}
	    }
	}
	if(checkpointid >= MinerCP[0] && checkpointid <= MinerCP[3])
	{
	    if(PlayerJob[playerid] == 17)
		{
            if(GetPlayerVirtualWorld(playerid)!=0)return 1;
			if(InJob[playerid] == 3)
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
				    ferman[playerid]++;
					switch(PI[playerid][pContractTime])
					{
					    case 0..499: global_str = "500";
				        case 500..3199: global_str = "3200";
						case 3200..6999: global_str = "7000";
						default: global_str = "&&";
					}
                    PI[playerid][pContractTime]+=2;
        			f(global_str, 150, "[Подсказка]{FFFFFF} Сена перетащено: %d шт. {FF6347} Теперь ваш навык фермерства %d/%s", ferman[playerid],PI[playerid][pContractTime],global_str);
        			SCM(playerid,COLOR_RED, global_str);
				    InJob[playerid] = 1;
				    RemovePlayerAttachedObject(playerid, 7);
				    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
				    if(GLS[27]<10000)GLS[27] +=1;
				    else GLS[27] +=2;
				    SaveInformation();
				    GiveBizMoney(BIZ_ELECTRO_LS,12);
			    	f(global_str, 150, "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
					UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);

				    for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], false);

					RewardSet(playerid, 3, 1);
			    }
			}
		}
		return 1;
	}
	else if(checkpointid == PorterDownCP)
	{
	    if(PlayerJob[playerid] == JOB_PORTER)
		{
		    if(GetPlayerVirtualWorld(playerid)!=0)return 1;
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
				if(InJob[playerid] == 3)
				{
       		 		ferman[playerid]++;
        			f(global_str, 100, "Груза перетащено: {73B461}%d шт.", ferman[playerid]);
					SCM(playerid,COLOR_WHITE, global_str);
				    InJob[playerid] = 1;
				    //GiveBizMoney(BIZ_ELECTRO_LV,60);
				    RemovePlayerAttachedObject(playerid, 7);
				    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
				    TogglePlayerDynamicCP(playerid, PorterDownCP, false);
					if(GLS[28]<10000) GLS[28]+=32;
				    else GLS[28]+=1;
				    SaveInformation();
				    f(global_str, 300, "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
					UpdateDynamic3DTextLabelText(FactoryText[2], COLOR_WHITE, global_str);
					RewardSet(playerid, 4, 1);
				}
			}
		}
		return 1;
	}
	else if(checkpointid == BankCP[0] || checkpointid == BankCP[2] )
	{
	    if(PlayerJob[playerid] == JOB_COLLECTOR)
	    {
			if(InJob[playerid] == 5)
			{
				if(IsPlayerInIncVehicle(playerid))
	    	    {
	    	        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257))
					{
						TogglePlayerDynamicCP(playerid, BankCP[0], false);
						TogglePlayerDynamicCP(playerid, BankCP[1], true);
					}
					else
					{
						TogglePlayerDynamicCP(playerid, BankCP[2], false);
						TogglePlayerDynamicCP(playerid, BankCP[3], true);
					}
		    	    TogglePlayerControllable(playerid, true);
			    	SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Отнесите мешки с деньгами в банк");
			    	InJob[playerid] = 6;
			    	RemovePlayerFromVehicle(playerid);
	    	    }
			}
		}
		return 1;
	}
	else if(checkpointid == BankCP[1] || checkpointid == BankCP[3] )
	{
	    if(PlayerJob[playerid] == JOB_COLLECTOR)
	    {
			if(InJob[playerid] == 6)
			{
				if(!IsPlayerInAnyVehicle(playerid))
	    	    {
	    	        RemovePlayerAttachedObject(playerid, 7);
	    	        SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
	    	        new money = GLS[11];
					GiveMoney(playerid,money);
					f(global_str, 100,"[Информация] {FFFFFF}Вы получили {73B461}$%d{FFFFFF} за проделанную работу",money);
					SCM(playerid, COLOR_WHITE, global_str);
	    	    }
	    	    InJob[playerid] = 1;
	    	    if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) TogglePlayerDynamicCP(playerid, BankCP[1], false);
	    	    else TogglePlayerDynamicCP(playerid, BankCP[3], false);

			}
	    }
	    return 1;
	}
 	else if(checkpointid == Dorm_CP[team])
	{
		if(!IsPlayerInRangeOfPoint(playerid,40,DormPos[team][0],DormPos[team][1],DormPos[team][2]))return 1;
		f(global_str, 256,"{B83434} Общак \n\n{FFFFFF}Наркотики: \t\t{9ACD32}%dг\n{FFFFFF}Патроны: \t\t{9ACD32}%d\n{FFFFFF}Канистры: \t\t{9ACD32}%d\n{FFFFFF}Инструменты: \t{9ACD32}%d\n{FFFFFF}Маски: \t\t{9ACD32}%d",OrgInfo[team][oDrugs],OrgInfo[team][oMats],OrgInfo[team][oBenz],OrgInfo[team][oRemont],OrgInfo[team][oMask]);
		SPD(playerid,216,0,"",global_str,"Меню","Назад");
		return 1;
	}
	else if(checkpointid == Binko_CP) return GameTextForPlayer(playerid, "~g~Press ~r~ALT", 1000, 3);
	else if(checkpointid == Zek_CP) return SPD(playerid,107,2,"Выберите пункт","Список заключенных\nСписок разыскиваемых","Выбор", !"Отмена");
	else if(checkpointid >= Eatery_CP[0] && checkpointid <= Eatery_CP[8])
	{
		if(BizEntered[playerid]!= -1) SPD(playerid,2761,2,"","{42B02C}-{FFFFFF} Покушать на месте\n{42B02C}-{FFFFFF} Купить в дом", !"Принять", !"Отмена");
		else SPD(playerid,185,2,"Выберите еду","{42B02C}-{FFFFFF} Картофель-Фри \t\t220$\n{42B02C}-{FFFFFF} Сэндвич \t\t\t260$\n{42B02C}-{FFFFFF} Баскет \t\t\t300$\n{42B02C}-{FFFFFF} Крылышки \t\t\t340$\n{42B02C}-{FFFFFF} Салат \t\t\t380$\n{42B02C}-{FFFFFF} Курица \t\t\t420$\n{42B02C}-{FFFFFF} Комплексный Обед \t\t700$","Выбор", !"Отмена");
		return 1;
	}
	else if(gopost != -1)
	{
	    if(PlayerJob[playerid] == JOB_TRUCKER)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new carid = GetPlayerVehicleID(playerid);
				new money = GLS[9];
				new Float:X = VehicleInfo[carid][vPos_X];
				new Float:Y = VehicleInfo[carid][vPos_Y];
				new vehid = GetVehicleTrailer(carid);
		        new postid = SelectPost[playerid];
				if(VehicleInfo[carid][vJob] == JOB_TRUCKER )
				{
				    new Float:Pos[3];
					GetPlayerPos(playerid, Pos[0],Pos[1], Pos[2]);
					if(InJob[playerid] == 1)
					{
						if(IsTrailerAttachedToVehicle(carid))
						{
							if(checkpointid == GoFuelCP[gopost])
							{
								new bizid = GoFuel[postid][gfBizzID];
							    if(BizData[bizid][bProducts] < 50000) BizData[bizid][bProducts] += 1000;
				            	else BizData[bizid][bProducts] = 50000;
				            	if(BizData[bizid][bMoney] >= money) GiveBizMoney(bizid,-money);
						        TogglePlayerDynamicCP(playerid, GoFuelCP[gopost], false);
						    	UpdateFuels(bizid);
						    	GiveMoney(playerid,money);
								f(global_str, 100,"[Информация] {FFFFFF}Вы получили процент от выручки в размере: {73B461}%d$",money);
								SCM(playerid, COLOR_VALIK, global_str);
								ShiftCords(0,X,Y,VehicleInfo[carid][vPos_A],8.0);
								PlayerGoPost[playerid]=-1;
								InJob[playerid] = 0;
								SetVehicleToRespawn(vehid);
					    	}
					    	else if(checkpointid == GoGunShopCP[gopost])
							{
							    new bizid = GoGunShop[postid][gsBizzID];
							    if(BizData[bizid][bProducts] < 50000) BizData[bizid][bProducts] += 1000;
				            	else BizData[bizid][bProducts] = 50000;
				            	if(BizData[bizid][bMoney] >= money)GiveBizMoney(bizid,-money);
						        TogglePlayerDynamicCP(playerid, GoGunShopCP[gopost], false);
						        GiveMoney(playerid,money);
								f(global_str, 100,"[Информация] {FFFFFF}Вы получили процент от выручки в размере: {73B461}%d$",money);
								SCM(playerid, COLOR_VALIK, global_str);
								ShiftCords(0,X,Y,VehicleInfo[carid][vPos_A],8.0);
								InJob[playerid] = 0;
								SetVehicleToRespawn(vehid);
								PlayerGoPost[playerid]=-1;
					    	}
					    }
					}
				}
			}
		}
		return 1;
	}
	else if(rand != -1 && checkpointid == IncCP[rand][0])
	{
		if(PlayerJob[playerid] == JOB_COLLECTOR)
		{
			if(InJob[playerid] == 2)
			{
				TogglePlayerDynamicCP(playerid, IncCP[rand][0], false);
                InJob[playerid] = 3;
	   			TogglePlayerDynamicCP(playerid, IncCP[rand][1], true);
	   			SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Возьмите мешки с деньгами");
				TogglePlayerControllable(playerid, true);
				RemovePlayerFromVehicle(playerid);
			}
		}
	}
	else if(rand != -1 && checkpointid == IncCP[rand][1])
	{
		if(PlayerJob[playerid] == JOB_COLLECTOR)
		{
			if(InJob[playerid] == 3)
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					SetPlayerColor(playerid,0x9ACD32AA);
					if(!IsPlayerAttachedSlotUsedEx(playerid, 7))SetPlayerAttachedObject(playerid, 7, 1550, 5, 0.2, 0.0, 0.0, -50.0, 180.0, 70.0, 0.6, 0.6, 0.6);
					SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Садитесь в грузовик и едьте в банк");
					new inccp = NumInc_CP[playerid];
					TogglePlayerDynamicCP(playerid, IncCP[inccp][1], false);
					InJob[playerid] = 4;
				}
			}
		}
	}
	else if(rand != -1 && checkpointid == PizzCP[rand][1])
	{
		if(PlayerJob[playerid] == JOB_PIZZA)
		{
			if(InJob[playerid] != 3) return SCM(playerid,COLOR_GREY, !"[Ошибка]{FFFFFF} У вас в руках нет пиццы!");
			if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка]{FFFFFF} У вас в руках нет пиццы!");
			new inccp = NumInc_CP[playerid];
			TogglePlayerDynamicCP(playerid, PizzCP[inccp][1], false);
			InJob[playerid] = 2;
			NumInc_CP[playerid]=-1;
			SendBotMessage(playerid,"Хорошо что завез, а то уже думал самому придётся ехать.");
			GiveMoney(playerid,550);
			if(IsPlayerAttachedSlotUsedEx(playerid, 7))RemovePlayerAttachedObject(playerid,7);
			ClearAnimationsEx(playerid);
			RewardSet(playerid, 6, 1);
		}
	}
	else if(rand != -1 && checkpointid == PizzCP[rand][0])
	{
		if(PlayerJob[playerid] == JOB_PIZZA)
		{
		    if(InJob[playerid] != 4) SCM(playerid,COLOR_GREY, !"[Ошибка]{FFFFFF} В эту точку вы должны приехать на рабочем мопеде!");
			if(VehicleInfo[GetPlayerVehicleID(playerid)][vJob] != 12) return SCM(playerid,COLOR_GREY, !"[Ошибка]{FFFFFF} В эту точку вы должны приехать на рабочем мопеде!");
			TogglePlayerDynamicCP(playerid, PizzCP[rand][0], false);
			TogglePlayerDynamicCP(playerid, PizzCP[rand][1], true);
			SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Отдайте пиццу заказчику.");
			RemovePlayerFromVehicle(playerid);
		}
	}
	else
	{
		if(!Fishing{playerid})
		{
			for(new i; i < sizeof(FishZone);i ++) if(checkpointid == Fish_CP[i]) return SPD(playerid,212,0,"Место для рыбалки","{FFFFFF}Вы действительно хотите порыбачить?\nДля рыболовли вам необходима удочка, которую можно приобрести в любом 24/7\nи наживка для рыбалки, ее так же можно там купить.\nРыбу можно продать в магазин.","да","Нет");
		}
	}
	//
	return 0;
}

stock GetVehicleMaxSeat(vehicleid)
{
    static MaxSeats[] =
	{
		3,1,1,1,3,3,0,1,1,3,1,1,1,3,1,1,3,1,3,1,3,
		3,1,1,1,0,3,3,3,1,0,8,0,1,1,15,1,8,3,1,3,0,
		1,1,1,3,0,1,0,1,15,1,0,0,0,1,1,1,3,3,1,1,1,
		1,1,1,3,3,1,1,3,1,0,0,1,1,0,1,1,3,1,0,3,1,
		0,0,0,3,1,1,3,1,3,0,1,1,1,3,3,1,1,1,1,1,1,
		1,1,3,1,0,0,1,0,0,1,1,3,1,1,0,0,1,1,1,1,1,
		1,1,1,3,0,0,0,1,1,1,1,2,2,0,3,1,1,1,1,1,3,
		3,1,1,3,3,1,0,1,1,1,1,1,1,3,3,1,1,0,1,3,3,
		0,15,1,0,0,1,0,1,1,1,1,3,3,1,3,0,15,3,1,1,1,
		1,15,15,1,1,1,0,3,3,3,1,1,1,1,1,3,1,15,15,15,3,
		15,15
	};
	new model = GetVehicleModelEx(vehicleid) - 400;
	if(model >= 0) return MaxSeats[model];
	return -1;
}

stock SetPlayerBuyItem(playerid)
{
    new race = PI[playerid][pType];
	SetPlayerCameraPos(playerid,-398.04,2229.84,1801.91);
	SetPlayerCameraLookAt(playerid,-397.68,2230.35,1801.47);
	Buyitem[playerid] = 0;
	ClearChatForPlayer(playerid);
    f(global_str,50,"~g~Cost: ~r~$%d",ItemsCost[race][0]);
    switch(ItemsId[race][0])
	{
		//наушники
		case 19421: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.1407,0.0000, 0.0000, 198.9623);
		//шапки
		case 19069: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.1606,360.0000, 30.0000, 93.3478);
		//панамки
		case 18968: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.1606,360.0000, 11.0000, 215.0000);
		//кепки
		case 18955: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.1406,360.0000, -328.0000, 153.0000);
		//каски
		case 19104: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 153.0000);
		//береты
		case 18925: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 342.2888);
		//парики
		case 19519: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.8564, 2231.0369, 1801.5004,269.0000, 345.0000, 86.1028);
		//очки
		case 19011: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3884, 2230.6755, 1801.1604,360.0000, -2.0000, 213.3229);
		//банданы
		case 18911: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3884, 2230.6755, 1801.2166,61.0000, 10.0000, 226.0000);
		//шляпы
		case 18947: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3884, 2230.6755, 1801.1564,350.0000, 270.0000, 107.3994);
		//часы
		case 19042: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.3884, 2230.6755, 1801.1364,158.0000, 360.0000, 278.0000);
		//портфели
		case 3026: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0],-397.2441, 2230.6956, 1801.1604,270.0000, -76.0000, 105.0000);
		case 18970: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0], -397.5000, 2230.7065, 1801.1350, -0.3000, 11.7600, -24.9600 );
        case 18910: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][0], -397.5894, 2230.7183, 1801.1122, 106.1400, -2.6400, -110.5800 );
	}
	PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	ShowPlayerTD(playerid,InfoText[playerid]);
	BuyInt[playerid] = -1;
	TogglePlayerControllable(playerid, false);

	for(new i; i < 9; i++)
		TextDrawShowForPlayer(playerid, clothChois[i]);

 	SelectTextDraw(playerid, -16776961);
	return 1;
}

stock SetPlayerBuySkin(playerid, shop = 0)
{
    new race = PI[playerid][pRace];
	if(shop)
	{
		ClearChatForPlayer(playerid);
		SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Для отмены нажмите {FFFFFF}Cancel");
	    TogglePlayerDynamicCP(playerid, Binko_CP, false);
	    SetPlayerFacingAngle(playerid,180.0);
		UpdatePlayerPos(playerid,199.1063, -128.3574, 1003.5152);
		SetPlayerCameraPos(playerid,199.2,-134.3,1003.5);
		SetPlayerCameraLookAt(playerid,199.1,-131.6,1003.5);
		
		CreateInfoText(playerid);
		
		pTemp[playerid][tSkinSelectedId] = 0;

		if(PI[playerid][pSex] <= 1) f(global_str,50,"~g~Cost: ~r~$%d",MSkinCost[0]), 
			SetPlayerSkinEx(playerid,MSkins[race][pTemp[playerid][tSkinSelectedId]]);
			
		else f(global_str,50,"~g~Cost: ~r~$%d",GSkinCost[0]),
			SetPlayerSkinEx(playerid,GSkins[race][pTemp[playerid][tSkinSelectedId]]);
		
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);

		BuyInt[playerid] = -1;
		OldWorld[playerid] = GetPlayerVirtualWorld(playerid);
		PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
		SetPlayerVirtualWorld(playerid, playerid + 5);
	}
	else
	{
	    new team = GetTeamID(playerid), Float:X = SpawnInfo[team][0],  Float:Y = SpawnInfo[team][1], Float:Z = SpawnInfo[team][2], Float:A = SpawnInfo[team][3];
	    DestroyPlayerTD(playerid,InfoText[playerid]);
		
		SetPlayerPos(playerid, X, Y, Z), SetPlayerInterior(playerid, 211), SetPlayerFacingAngle(playerid, A);
		
		SetPlayerCameraPos(playerid, 1871.5439, 2226.6455, 1037.3204);
		SetPlayerCameraLookAt(playerid, 1876.0872, 2228.6479, 1036.3204);

		pTemp[playerid][tSkinSelectedId] = (PI[playerid][pSex] ? 2 : 5);
		ShowCefPublic(playerid, (str_f("updateCharacter|%s|%s|%i", PI[playerid][pSex] ? ("girl") : ("man"), PI[playerid][pRace] ? ("black") : ("white"), pTemp[playerid][tSkinSelectedId])), "0,0,0");
	}

	for(new i; i < 9; i++)
		TextDrawShowForPlayer(playerid, clothChois[i]);

	return SelectTextDraw(playerid, -16776961);
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	new test = CarTest[playerid];
	if(test != -1 && checkpointid == FTest_CP[test])
	{
		TogglePlayerDynamicRaceCP(playerid,FTest_CP[test],false);
		if((test+1) == 32)
		{
  			SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сдали практику на право летать на самолёте. Держите ваше удостоверения.");
  			GivePlayerLic(playerid, 2);
  			ExitCar(playerid);
  			VehicleInfo[GetPlayerVehicleID(playerid)][vPlayer] = -1;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			CarTest[playerid] = -1;
  		}
  		else
  		{
  			CarTest[playerid] ++;
  			new i = CarTest[playerid];
  			TogglePlayerDynamicRaceCP(playerid,FTest_CP[i],true);
		}
	}
	if(test != -1 && checkpointid == Test_CP[test])
	{
		TogglePlayerDynamicRaceCP(playerid,Test_CP[test],false);
		if( (test+1) == sizeof(Test_CP) )
		{
  			SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сдали тест на вождение! Держите своё вод.удостоверение.");
  			GivePlayerLic(playerid, 0);
  			ExitCar(playerid);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			CarTest[playerid] = -1;
  		}
  		else
  		{
  			CarTest[playerid] ++;
  			new i = CarTest[playerid];
  			TogglePlayerDynamicRaceCP(playerid,Test_CP[i],true);
  			if(test == 12) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Внимание!\nЧтобы открыть {9ACD32}шлагбаум{FFFFFF}, используйте:\n{9ACD32}Сигнал{FFFFFF}( Необходимо нажать клавишу: H)\n\n", "Понял","");
            else if(test == 19) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Отлично!\nТеперь вы должны выехать из {9ACD32}парковки{FFFFFF}, включив заднюю скорость, а\nзатем {9ACD32}повернуть{FFFFFF} налево.\n\n", "Понял","");
            else if(test == 22) SPD(playerid, 0,0, "", "\n\n{FFFFFF}А здесь аккуратно!\nПостарайтесь медленно {9ACD32}проехать{FFFFFF} препятствие не ударив машину.\nЗатем {9ACD32}продолжите{FFFFFF} движение по чекпоинтам.\n\n", "Понял","");
            else if(test == 26) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Тут все просто!\nВыезжайте из места где вы {9ACD32}припарковались{FFFFFF}, повернув налево.\nзатем {9ACD32}продолжите{FFFFFF} движение по чекпоинтам.\n\n", "Понял","");
		}
	}
	new mtest = MotoTest[playerid];
	if(mtest != -1 && checkpointid == MTest_CP[mtest])
	{
		TogglePlayerDynamicRaceCP(playerid,MTest_CP[mtest],false);
		if( (mtest+1) == sizeof(MTest_CP) )
		{
  			SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сдали тест на вождение мото-транспорта! Держите своё вод.удостоверение.");
  			GivePlayerLic(playerid, 1);
  			ExitCar(playerid);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			MotoTest[playerid] = -1;
			TogglePlayerDynamicRaceCP(playerid,MTest_CP[0],false);
  		}
  		else
  		{
  			MotoTest[playerid] ++;
  			new i = MotoTest[playerid];
  			TogglePlayerDynamicRaceCP(playerid,MTest_CP[i],true);
  			if(mtest == 8) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Внимание!\nЧтобы открыть {9ACD32}шлагбаум{FFFFFF}, используйте:\n{9ACD32}Сигнал{FFFFFF}( Необходимо нажать клавишу: H)\n\n", "Понял","");
            else if(mtest == 20) SPD(playerid, 0,0, "", "\n\n{FFFFFF}Отлично!\nТеперь вы должны выехать из {9ACD32}парковки{FFFFFF}, включив заднюю скорость, а\nзатем {9ACD32}повернуть{FFFFFF} направо.\n\n", "Понял","");
		}
	}
	if(FarmJob[playerid] != -1 && checkpointid == Tfarm_CP[FarmJob[playerid]])
	{
		TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[FarmJob[playerid]],false);
		if( (FarmJob[playerid]+1) == sizeof(Tfarm_CP) )
		{
		    ferman[playerid]+=14;
  			SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно отработали. {ECB534}Ваш навык фермера повышен на 60 единиц[ /ffarm ]");
  			f(global_str, 70,"[Информация] {FFFFFF}Вы уже заработали: %d$",ferman[playerid]*GLS[4]);
  			SCM(playerid,COLOR_GREY,global_str);
  			PI[playerid][pContractTime]+=60;
  			GiveBizMoney(BIZ_ELECTRO_LS,450);
			FarmJob[playerid]=0;
			TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[0],true);
  		}
  		else
  		{
  			FarmJob[playerid] ++;
  			TogglePlayerDynamicRaceCP(playerid,Tfarm_CP[FarmJob[playerid]],true);
		}
	}
	if(FarmJob[playerid] != -1 && checkpointid == Kfarm_CP[FarmJob[playerid]])
	{
		TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[FarmJob[playerid]],false);
		if( (FarmJob[playerid]+1) == sizeof(Kfarm_CP) )
		{
		    ferman[playerid]+=26;
  			SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно отработали. {ECB534}Ваш навык фермера повышен на 90 единиц[ /ffarm ]");
  			f(global_str, 100,"[Информация] {FFFFFF}Вы уже заработали: %d$",ferman[playerid]*GLS[4]);
  			SCM(playerid,COLOR_GREY,global_str);
  			GLS[27] +=90;
  			SaveInformation();
  			GiveBizMoney(BIZ_ELECTRO_LS,600);
	    	f(global_str, 200, "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
			UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);
  			PI[playerid][pContractTime]+=90;
			FarmJob[playerid]=0;
			TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[0],true);
  		}
  		else
  		{
  			FarmJob[playerid] ++;
  			TogglePlayerDynamicRaceCP(playerid,Kfarm_CP[FarmJob[playerid]],true);
		}
	}
	if(FarmJob[playerid] != -1 && checkpointid == Zfarm_CP[FarmJob[playerid]])
	{
		TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[FarmJob[playerid]],false);
		if( (FarmJob[playerid]+1) == sizeof(Zfarm_CP) )
		{
      		ferman[playerid]+=54;
  			SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно отработали. {ECB534}Ваш навык фермера повышен на 50 единиц[ /ffarm ]");
  			f(global_str, 100,"[Информация] {FFFFFF}Вы уже заработали: %d$",ferman[playerid]*GLS[4]);
  			SCM(playerid,COLOR_GREY, global_str);
  			PI[playerid][pContractTime]+=50;
  			GiveBizMoney(BIZ_ELECTRO_LS,700);
			FarmJob[playerid]=0;
			TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[0],true);
  		}
  		else
  		{
  		    FarmJob[playerid] ++;
  			TogglePlayerDynamicRaceCP(playerid,Zfarm_CP[FarmJob[playerid]],true);
		}
	}
	return 1;
}

stock SellCar(carid, bool:command = false, bool:family = false)
{
	new number = GetVehicleID(carid);
	
	CarInfo[number][cVirtualWorld] =
	CarInfo[number][cInterior] = 0;
	CarInfo[number][cColor_1] =
	CarInfo[number][cColor_2] = 1;
	SetString(CarInfo[number][cKeyer], "The State");
	CarInfo[number][cShtrafer] =
	CarInfo[number][cLock] =
	CarInfo[number][cShtraf] =
	CarInfo[number][cKeyIN] =
	CarInfo[number][cAlarmON] = 0;
	CarInfo[number][cMilage] = 0;
	VehicleInfo[carid][vAntiRepair] = 2;
	VehicleHealth[carid] = 1000;
	SetVehicleVirtualWorld(carid, 0);

	SQL("UPDATE ownable SET Owner = 'The State' WHERE ID = %d;", CarInfo[number][cID]);

	if(!family) 
		SetString(CarInfo[number][cOwner], "The State"), SaveOwnableCar(number);

    DestroyVehicleEx(carid);
    
	if(command == false) 
	{
		for(new i; i < SELLCARS; i++)
		{
			if(SellInfo[i][scModel] == CarInfo[number][cModel])
				SellInfo[i][scCount] ++,
				SaveSellCar(i);
		}
	}
	return true;
}

stock ShowBankMenu(playerid)
{
	if(!PI[playerid][pBankPass])
		return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}Вы не можете воспользоватся банком/банкоматом.{FFFFFF}\nУ вас нет банковской карты. Получить ее можно в\nбанковском отделении Las Venturas ,или у сотрудника банка!", !"Закрыть", !"");

	if(!PI[playerid][pKlogin]) return SPD(playerid, 991, DIALOG_STYLE_INPUT, !"", !"{929290}Вы должны подтвердить свой PIN-код к карточке.\nВведите свой код в ниже указаную строку.", !"Принять", !"Закрыть");

	new list;

	new	isatbank = IsPlayerInRangeOfPoint(playerid, 2.5, -2683.9232, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2676.5600, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2669.0400, 807.4161, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2666.4729, 805.8691, 1500.9094) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -2666.4665, 799.2879, 1500.9094) ||

					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2409,1305.6490,774.4839) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2459,1307.4744,774.4839)||
					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2454,1309.2797,774.4839)||
					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2461,1311.0074,774.4839) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 495.2460,1312.8225,774.4839) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 951.8005,2458.6746,1601.9771) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 954.9710,2463.5288,1601.9771) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, -14.5615,1882.9138,17.6982) ||
					IsPlayerInRangeOfPoint(playerid, 2.5, 946.6893,2456.3723,1601.9771);
	if(isatbank)
	{
		global_str = "\
		{FFFFFF}Состояние основного счета\n\
		Снять с Основного счета\n\
		Пополнить основной счет\n\
		Перевести деньги с основного счета\n\
		{FFFF00}Оплата всех налогов\n\
		{73B461}Оплатить налог на транспорт\n\
		{FFFFFF}Пополнить депозит {FCBE52}[20.00 - 12.00]\n\
		{FFFFFF}Снять деньги с депозита {FCBE52}[20.00 - 12.00]\n\
		{FFFFFF}Внести залог на транспорт\n\
		Купить валюту ЕВРО\n\
		Продать валюту ЕВРО\n\
		Состояние {ff6a0d}личного{FFFFFF} счета\n\
		Снять с {ff6a0d}личного{FFFFFF} счета\n\
		Пополнить {ff6a0d}личный{FFFFFF} счет\n";
		list = 14;
	}
	else
	{
		global_str = "\
		{FFFFFF}Состояние основного счета\n\
		Снять с Основного счета\n";
		list = 2;
		//
	}
	if(GetPlayerHouses(playerid, 1)) strcat(global_str, "{73B461}Оплатить налоги на дом\n"), GlobalMassive[playerid][14] = list,list++;

	if(GetPlayerBiz(playerid) != -1) strcat(global_str, "{73B461}Оплатить налоги на бизнес\n"), GlobalMassive[playerid][15] = list,list++;

	if(PI[playerid][pMember][0] != 0) strcat(global_str, "Пополнить счет организации\n"), GlobalMassive[playerid][16] = list,list++;

	if(PI[playerid][pPhoneInfo][0] > 0) strcat(global_str, "Пополнить счет sim карты мобильного телефона"), GlobalMassive[playerid][17] = list,list++;

	return SPD(playerid, 33, DIALOG_STYLE_LIST, isatbank ? "Банк":"Банкомат", global_str, !"Выбор", !"Отмена");
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(!pTemp[playerid][tAuthorized])
		return false;

	if(Int_GetPlayerData(playerid, "EnterPickup") > Global_Time) return false;
	
	SetPVarInt(playerid, "EnterPickup", Global_Time + 2);

	if ( (pickupid >= NeftPick[0] && pickupid <= NeftPick[1]) || (pickupid >= OtelPickup[0] && pickupid <= OtelPickup[MAX_OTELS + 3 - 1]) )
		return GameTextForPlayer(playerid, !"~r~Press~w~ ALT", 1000, 3);
	
	else if(pickupid >= ContainerInfo[0][cPickup] && pickupid <= ContainerInfo[MAX_CONTAINERS-1][cPickup])
		return GameTextForPlayer(playerid, "~w~Press ~b~ALT", 1000, 3);

	else if(pickupid >= ShopEatPick[0] && pickupid <= ShopEatPick[1])
		showStreetFood(playerid, EatInfo[pickupid - ShopEatPick[0]]);
	
	else if(pickupid >= TeleportPickup[0] && pickupid <= TeleportPickup[sizeof(TeleportInfo)-1])
	{
	    if(Getemer[playerid] > Global_Time) return 0;
	    
	    HouseEntered[playerid] = -1;
	    CanUse[playerid] = 0;

	    if(GetPlayerSkin(playerid) == 80)
			SetPlayerSkinEx(playerid, !PI[playerid][pOldSkin] ? PI[playerid][pSkin][0]:PI[playerid][pOldSkin]),
			pSportZal[playerid]=0,
			SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}На улицу запрещено выходить в форме для тренировок!");
		
		new tp, zone = GetPlayerGangZone(playerid);

		switch tp = pickupid - TeleportPickup[0] do
		{
			case 0: EnterPlayerTakeGun(playerid, !"[Подсказка] {FFFFFF}При входе в мэрию у вас забрали оружие. Забрать сможете как будете уходить!");
			
			case 1,51,53,55:
				EnterPlayerGiveGun(playerid);
				
			case 50,52,54:
				EnterPlayerTakeGun(playerid, !"[Подсказка] {FFFFFF}При входе в радиостанцию у вас забрали оружие. Забрать сможете как будете уходить!");
			
			case 72,74,78,80:
			{
				if(!(zone == -1) && GangZoneInfo[zone][gangOwnerId] == PI[playerid][pMember][0])
			    {
			        SCM(playerid,COLOR_ORANGE, !"Этот наркопритон принадлежит вашей банде!");
			        
					if(PI[playerid][pRank] >= 9)
				        SCM(playerid,-1, !"Для управления наркопритоном используйте команды:"),
				        SCM(playerid,-1, !"/getmoney /putmonet /setdsell /setdbuy."),
				        SCM(playerid,COLOR_ORANGE, !"Необходимо подойти к вашему барыге!"),
				        CanUse[playerid] = 1;
				}
			}

			case 100:
			{
				if(PlayerJob[playerid] == 22 && InJob[playerid])
					SetPlayerSkinEx(playerid, PI[playerid][pOldSkin]),
					InJob[playerid] = 0,
					SCM(playerid, COLOR_VALIK, !"Вы сняли рабочую одежду");
			}
		}
	
		SetPlayerVirtualWorld(playerid, TeleportInfo[tp][tpExitWorld]), SetPlayerInterior(playerid, TeleportInfo[tp][tpExitInt]);
		UpdatePlayerPos(playerid, TeleportInfo[tp][tpExitPos_X], TeleportInfo[tp][tpExitPos_Y], TeleportInfo[tp][tpExitPos_Z], TeleportInfo[tp][tpExitPos_A]);
		SetCameraBehindPlayer(playerid);

		Getemer[playerid] = Global_Time + 6;
	}
	
	else if(pickupid >= FKV_Data[0][kvPickup] && pickupid <= FKV_Data[78][kvPickup])
		return EnterFamilyKV(playerid, pickupid - FKV_Data[0][kvPickup]);
	
	else if(pickupid >= FKV_Data_Int_Exit[0] && pickupid <= FKV_Data_Int_Exit[1])
	{	
		new id = pickupid - FKV_Data_Int_Exit[0];
		
		SetPlayerInterior(playerid, FKV_Data_Int[id][kvE_Interior]);
		SetPlayerVirtualWorld(playerid, FKV_Data_Int[id][kvE_World]);

		UpdatePlayerPos(playerid, FKV_Data_Int[id][kvE_Int_X], FKV_Data_Int[id][kvE_Int_Y], FKV_Data_Int[id][kvE_Int_Z]);
		
		return FP_Data[playerid][F_FAMILY_PICK_KV] = -1;
	}
	
	else if(pickupid == EnterBankPickup)
 	{
     	EnterPlayerTakeGun(playerid, !"[Подсказка] {FFFFFF}При входе в банк у вас забрали оружие. Забрать сможете как будете уходить!");
		
		SetPlayerVirtualWorld(playerid, 1), SetPlayerInterior(playerid, 22);
        UpdatePlayerPos(playerid, -2691.6641, 796.5349, 1500.9669,270.0);
        SetCameraBehindPlayer(playerid);
 	}
 	else if(pickupid == ExitBankPickup)
 	{
 		EnterPlayerGiveGun(playerid);

 		SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
        UpdatePlayerPos(playerid, 1480.8480,-1768.7529,18.7929,357.1815);
        SetCameraBehindPlayer(playerid);
 	}
	else if(pickupid == HealExitPickup)
	{
	    if(Getemer[playerid] > Global_Time) 
			return false;
 		
		else if(PI[playerid][pHeal])
		 	return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы находитесь на лечении!");

		new world = GetPlayerVirtualWorld(playerid);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		switch world do
		{
			case 2: UpdatePlayerPos(playerid, 1176.8413,-1324.0846,14.0412, 335.2464);
			
			case 3: UpdatePlayerPos(playerid, -2668.9080,636.9764,14.4531, 180.0);
			
			case 4: UpdatePlayerPos(playerid, 1607.4996,1818.8636,10.8203, 2.3200);
			
		}
		return true;
 	}
	
 	for(new i; i < 106; i++)
	{
	    if(GribInfo[i][gribCreat] ==pickupid)
	    {
		    if(!IsPlayerInRangeOfPoint(playerid,5,GribInfo[i][gribPos][0],GribInfo[i][gribPos][1],GribInfo[i][gribPos][2])) return 0;
		    if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не наркодиллер!");
		    GribInfo[i][gribCreat]=-1;
		    DestroyDynamicPickup(pickupid);
			f(global_str, 60, "%s срезал(а) растение", PN(playerid));
			ProxDetector(25, playerid, global_str, COLOR_PURPLE);
			PI[playerid][pD_Packets] += 1;
			ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);
			f(global_str, 100,"[Информация] {FFFFFF}Вы нашли семена для посадки наркотиков.");
			SCM(playerid,COLOR_VALIK, global_str);
			f(global_str, 125,"[Информация] {FFFFFF}У вас уже:  {73B461}%d шт.",PI[playerid][pD_Packets]);
			SCM(playerid,COLOR_VALIK, global_str);
			return 1;
		}
		else if(GLS[22])
		{
			if(PodarokInfo[i][porCreat]!=pickupid) continue;
			if(!IsPlayerInRangeOfPoint(playerid,5,PodarokInfo[i][porPos][0],PodarokInfo[i][porPos][1],PodarokInfo[i][porPos][2])) return false;
			PodarokInfo[i][porCreat]=-1;
			DestroyDynamicPickup(pickupid);
			if(PI[playerid][pVIP][0] >= 5) AddItem(playerid, 552, random(3)+1);
			else AddItem(playerid, 552, 1);
			f(global_str, 256 ,"[Информация]{FFFFFF} Вы подобрали подарок. У вас уже %d подарка(ов)! Обменять подарки на шкатулку можно у Эдварда.",GetCount(playerid, 552));
			SCM(playerid,COLOR_RED,global_str);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
			return true;
		}
		if(i < MAX_EGGS)
		{
			if(Eggs[i][eCreate] != pickupid) continue;
			AddItem(playerid, 552, 1);
			Eggs[i][eCreate] = -1;
			DestroyDynamicPickup(pickupid);
			f(global_str, 256, "[Подсказка]{FFFFFF} Вы подобрали подарок. У вас уже %d подарка(ов)! Обменять подарки на шкатулку можно у Эдварда.", GetCount(playerid, 552));
			SCM(playerid, COLOR_LIGHTBLUE, global_str);
			ApplyAnimationEx(playerid, !"BOMBER", !"BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
			return 1;
		}
	}
	return 1;
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(Int_GetPlayerData(playerid, "EnterPickup") > Global_Time) return false;
	SetPVarInt(playerid, "EnterPickup", Global_Time + 2);
	if(GetPlayerVirtualWorld(playerid)==1228)
		return 1;

 	if(PI[playerid][pMember][0] > 0 && (pickupid == TeamDutyCP[PI[playerid][pMember][0]] && (GetPlayerVirtualWorld(playerid) == DutyPos[PI[playerid][pMember][0]][dutyposWorld] || DutyPos[PI[playerid][pMember][0]][dutyposWorld] == -1)))
	{
		if(Getemer[playerid] > Global_Time)
			return 0;

	    Getemer[playerid] = Global_Time + 5;
		if(pSportZal[playerid] == 1)
			return SCM(playerid, COLOR_RED, !"Вы не можете пользоваться этой раздевалкой пока не переоденетесь в служебную форму!");

		else if(IsAArmy(playerid) || IsACop(playerid))
		{	
			if(Int_GetPlayerData(playerid, "openGetGun")) return false;
			return SPD(playerid, 581, DIALOG_STYLE_LIST, !"", !"{42B02C}-{FFFFFF} Переодеться\n{42B02C}-{FFFFFF} Взять боеприпасы\n", !"Принять", !"Отклонить");
		}
		else
			SPD(playerid, 581, DIALOG_STYLE_LIST, !"", !"{42B02C}-{FFFFFF} Переодеться", !"Принять", !"Отклонить");

	    return 1;
	}
	else if(pickupid == RazdPickup)
	{
		if(Getemer[playerid]>Global_Time)return false;
		Getemer[playerid]=Global_Time+1;
		GameTextForPlayer(playerid, "~r~PRESS ~w~ALT", 500, 3);
		return true;
	}
	else if(pickupid == EventLeave)
    {
		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{ffffff}Вы успешно покинули мероприятие!\n\n", !"Принять", !"");
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid ,0);
		UpdatePlayerPos(playerid,-2267.3701,180.6651,35.3125);
		SetPlayerFacingAngle(playerid, 229.3854);
		if(IsPlayerAttachedSlotUsedEx(playerid, 3))
			RemovePlayerAttachedObject(playerid, 3);

		DestroyPlayerTD(playerid, EventTimeTD[playerid][0]);
		PI[playerid][pEventTime] = 0;
    }
    else if(pickupid >= GetPizza[0] && pickupid <= GetPizza[1])
 	{
		if(PlayerJob[playerid]!= JOB_PIZZA)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не работаете развозчиком пиццы.");
		if( InJob[playerid]!=2) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не готовы сейчас взять пиццу.");
		if(!IsPlayerAttachedSlotUsedEx(playerid, 7))SetPlayerAttachedObject(playerid, 7, 2814, 1, 0.0, 0.5, -0.0, 90.0, 90.0, 0.0, 1.0, 1.0, 1.0);
 	    InJob[playerid]=3;
	 	CarryAnim(playerid);
	   	SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы взяли пиццу. Садитесь на мопед чтобы положить ее в багажник.");
	   	SCM(playerid,COLOR_ACHAT,"[Информация] {FFFFFF}Введите /stopjob если захотите закончить работу.");
        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) InJobs[playerid]=1;
		else InJobs[playerid]=2;
		return 1;
	}
 	else if(pickupid >= healthpd[0] && pickupid <= healthpd[7])
 	{
        if(Getemer[playerid] > Global_Time) return 0;
	    Getemer[playerid] = Global_Time + 4;
	    if(!IsACop(playerid) && PI[playerid][pMember][0] != TEAM_MERIALS && !IsANews(playerid) && PI[playerid][pMember][0] != TEAM_BANK && PI[playerid][pMember][0] != TEAM_LICENSERS)
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не полицейский и не состоите в правительстве/банке/новостном агенстве/автошколе!");

 	    UpdatePlayerHealth(playerid, 100);
        GameTextForPlayer(playerid, !"Health +100", 0, 1);
        return 1;
	}
	else if(pickupid == prost)
	{
	    if(Getemer[playerid]>Global_Time)return 0;
	    Getemer[playerid]=Global_Time+4;
	    f(global_str, 100,"Стоимость выкупа составляет: %d$. Что-то еще?",GLS[21]);
	    SendBotMessage(playerid, global_str);
	    return 1;
	}
	else if(pickupid >= Bar_CP[0] && pickupid <= Bar_CP[MAX_BARSs-1])
	{
	    if(Getemer[playerid]>Global_Time)return 0;
	    Getemer[playerid]=Global_Time+4;
		for(new i; i < 5; i++) DestroyPlayerTD(playerid, alcodraw2[playerid][i]);
	    new biz = BizEntered[playerid];
		if(biz == -1)
		{
			biz = 51;
			new stringd[7];
			valstr(stringd, BizData[biz][bItem][0]);
			alcodraw2[playerid][0] = CreatePlayerTextDraw(playerid, 121.000000, 178.000000, stringd);
			valstr(stringd, BizData[biz][bItem][1]);
			alcodraw2[playerid][1] = CreatePlayerTextDraw(playerid, 170.000000, 178.000000, stringd);
			valstr(stringd, BizData[biz][bItem][2]);
			alcodraw2[playerid][2] = CreatePlayerTextDraw(playerid, 221.000000, 178.000000, stringd);
			valstr(stringd, BizData[biz][bItem][3]);
			alcodraw2[playerid][3] = CreatePlayerTextDraw(playerid, 122.000000, 227.000000, stringd);
			valstr(stringd, BizData[biz][bItem][4]);
			alcodraw2[playerid][4] = CreatePlayerTextDraw(playerid, 170.000000, 227.000000, stringd);
			for(new A; A < 5; A++)
			{
				PlayerTextDrawBackgroundColor(playerid, alcodraw2[playerid][A], 255);
				PlayerTextDrawFont(playerid, alcodraw2[playerid][A], 2);
				PlayerTextDrawLetterSize(playerid, alcodraw2[playerid][A], 0.320000, 0.899999);
				PlayerTextDrawColor(playerid, alcodraw2[playerid][A], -1);
				PlayerTextDrawSetOutline(playerid, alcodraw2[playerid][A], 0);
				PlayerTextDrawSetProportional(playerid, alcodraw2[playerid][A], 1);
				PlayerTextDrawSetShadow(playerid, alcodraw2[playerid][A], 1);
				PlayerTextDrawSetSelectable(playerid, alcodraw2[playerid][A], 0);
			}
			for(new A; A < 5; A++) TextDrawShowForPlayer(playerid, alcodraw[A]);
			for(new A; A < 7; A++) TextDrawShowForPlayer(playerid, alcodraw1[A]);
			for(new A; A < 5; A++) ShowPlayerTD(playerid, alcodraw2[playerid][A]);
			SelectTextDraw(playerid, 0xFF9933FF);
		}
		else CreateShopTD(playerid, 3);
	  	return 1;
	}
 	else if(pickupid == MeriaGun)
	{
	    if(!IsAMeria(playerid)) return 0;

		_GiveGun(playerid, 3, 30);
		if(PI[playerid][pRank]>4)
		{
			UpdatePlayerArmour(playerid, 100);
			SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы получили дубинку и бронежилет!");
		}
		f(global_str, 80," %s берет табельное оружие",PN(playerid));
		ProxDetector(25,playerid, global_str, COLOR_PURPLE);
		return 1;
	}
	else if(pickupid == EnterSklad[0])
	{
	    if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в государственных структурах!");
    	SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,1);
		UpdatePlayerPos(playerid,458.32, 864.39, 1500.96);
		SetPlayerFacingAngle(playerid, 270.000);
		return 1;
	}
	else if(pickupid == EnterSklad[1])
	{
	    if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы находитесь на лечении!");
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		UpdatePlayerPos(playerid,2732.3691,-2451.3196,17.5937);
		SetPlayerFacingAngle(playerid, 325.8486);
		return 1;
	}
	else if(pickupid == EnterSklad[2])
	{
	    SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,1);
		UpdatePlayerPos(playerid,592.1155,1454.0194,1900.7979);
		SetPlayerFacingAngle(playerid, 105.8748);
		return 1;
	}
	else if(pickupid == EnterSklad[3])
	{
	    if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы находитесь на лечении!");
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		UpdatePlayerPos(playerid,253.2157,1838.9449,17.6568);
		SetPlayerFacingAngle(playerid, 268.8097);
		return 1;
	}
	else if(pickupid == EnterSklad[4])
	{
	    if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в государственных структурах!");
    	SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,1);
		UpdatePlayerPos(playerid,-1611.0013,-126.1146,1501.0859);
		SetPlayerFacingAngle(playerid, 269.2612);
		return 1;
	}
	else if(pickupid == EnterSklad[5])
	{
	    if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы находитесь на лечении");
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		UpdatePlayerPos(playerid,-1368.9514,499.1776,11.1953);
		SetPlayerFacingAngle(playerid,267.9026);
		return 1;
	}
	else if(pickupid == nalogoffise[0])
	{
	    SetPlayerVirtualWorld(playerid,1);
		SetPlayerInterior(playerid,3);
		UpdatePlayerPos(playerid,1493.8759,1305.5491,1093.2891);
		SetPlayerFacingAngle(playerid, 84.0490);
		return 1;
	}
	else if(pickupid == nalogoffise[1])
	{
	    SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		UpdatePlayerPos(playerid,1530.8074,-1070.4329,25.0625);
		SetPlayerFacingAngle(playerid, 339.1004);
		return 1;
	}
	else if(pickupid == amybank)
 	{
		if(GetTeamID(playerid) != TEAM_BANK)
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не сотрудник банка!");

		_GiveGun(playerid, 3, 100);
		f(global_str, 50, "%s берет оружие", PN(playerid));
		ProxDetector(25, playerid, global_str, COLOR_PURPLE);
		return 1;
	}
	else if(pickupid >= HealSG[0] && pickupid <= HealSG[86])
		return GameTextForPlayer(playerid, !"~g~Press~r~ ALT", 1000, 3);
	
 	else if(pickupid == Inc_CP[0]||pickupid == Inc_CP[1])
	{
		if(PlayerJob[playerid] != JOB_COLLECTOR) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не инкассатор");
		if(InJob[playerid]) SPD(playerid,149,0,"Работа 'Инкассатор'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
		else SPD(playerid,149,0,"Работа 'Инкассатор'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
		return 1;
	}
	else if(pickupid == Yakydzapick)
	{
	    if(Getemer[playerid]>Global_Time)return 0;
	    Getemer[playerid]=Global_Time+5;
		SPD(playerid,1666,2,"Меню ресторана","Курица в соусе Терияки\t\t\t 600$\nМисо-суп\t\t\t\t\t 500$\nПрозрачная лапша с говядиной\t\t 700$\nУдон в сливочном соусе с говядиной\t\t 800$\nКани спайси \t\t\t\t\t 600$", !"Принять", !"Закрыть");
		return 1;
	}
	else if(pickupid >= portpick[0] && pickupid <= portpick[4])
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    if(!IsANotControllable(playerid))
		    {
				if(PlayerJob[playerid] == JOB_PORTER)
				{
					if(InJob[playerid] == 1)
					{
					    ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
			            InJob[playerid] = 3;
			            TogglePlayerDynamicCP(playerid, PorterDownCP, true);
			    		CarryAnim(playerid);
			    		if(!IsPlayerAttachedSlotUsedEx(playerid, 7))SetPlayerAttachedObject(playerid, 7, 2060, 5, 0.01, 0.1, 0.2, 100, 10, 85);
					}
				}
			}
		}
		return 1;
	}
	else if (pickupid ==demorgan[0])
	{
	    if(PI[playerid][pDemorgan]) return 1;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 272.4357);
		UpdatePlayerPos(playerid, -2152.7336, 645.0001, 52.3672);
		return 1;
    }
	else if(pickupid >= FerumPickup[0] && pickupid <= FerumPickup[5])
	{
	    if(CreateMats[playerid] == 1)
		{
		    if(GetPlayerVirtualWorld(playerid)==11 && GLS[25]<100) return SPD(playerid,0,0,!"","{BCB7B7}На складе армии недостаточно материалов для изготовления патронов!\nВы можете загрузить материалы на заводе LS с помощью вертолета.", !"Закрыть","");
		    else if (GetPlayerVirtualWorld(playerid)==12 && GLS[26]<100)  return SPD(playerid,0,0,!"","{BCB7B7}На складе армии недостаточно материалов для изготовления патронов!\nВы можете загрузить материалы на заводе LS с помощью вертолета.", !"Закрыть","");
			else if (GetPlayerVirtualWorld(playerid)==13 && GLS[43]<100)  return SPD(playerid,0,0,!"","{BCB7B7}На складе армии недостаточно материалов для изготовления патронов!\nВы можете загрузить материалы на заводе LS с помощью вертолета.", !"Закрыть","");
			CreateMats[playerid] = 2;
			SetPlayerAttachedObject(playerid, 7, 7891, 5, 0.3, 0.17, 0.1, 0.0, 150.0, 60.0, 0.08, 0.08, 0.08);
			if(GetPlayerVirtualWorld(playerid)==10)
			{
			    if(FactoryFerum<5)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}На заводе недостаточно металла для его переработки!");
				FactoryFerum -= 5;
    			f(global_str, 170, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
				UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
			}
			for(new i; i < sizeof(FerumCP);i ++) TogglePlayerDynamicCP(playerid, FerumCP[i], true);
		}
		else if(CreateMats[playerid] == 2) SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже брали металл. Направляйтесь к рабочему месту.");
		else if(CreateMats[playerid] == 4) SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Отнесите материалы к остальным материалам.");
		else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не на работе!");
		return 0;
	}
    else if(pickupid == FactoryClothes)
    {
        if(Getemer[playerid]>Global_Time)return 0;
	    Getemer[playerid]=Global_Time+5;
        if(InJob[playerid]) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}В данный момент вы уже где-то работаете!");
        if(!CreateMats[playerid]) SPD(playerid, 254, 0, "Раздевалка", "Вы хотите переодеться и начать работать?", "Да", "Нет");
		else SPD(playerid, 254, 0, "Раздевалка", "Вы хотите завершить работу?", "Да", "Нет");
		return 1;
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(!IsAOwnableCar(vehicleid))
	{
	    SPD(playerid,0,0,!"","{CD1717}Ошибка!{FFFFFF}\n\n\nТюнинговать можно только личный транспорт!\n\n\n","{CD1717}Принять{FFFFFF}","");
	    RemoveVehicleComponent(vehicleid,componentid);
        return 0;
	}
	else
	{
	    RemoveVehicleComponent(vehicleid, componentid);
	    SCM(playerid, COLOR_WHITE, !"Этот транспорт нельзя тюнинговать");
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(!pTemp[playerid][tAuthorized])
		return false;

	amount += float(GetAccessoryPlayerBuff(playerid, 2));

	if(GetAccessoryPlayerBuff(playerid, 3) >= amount * (random(100) * 2) / 100) 
		amount += amount * (float(GetAccessoryPlayerBuff(playerid, 3)) / 100);

	amount -= amount * (float(GetAccessoryPlayerBuff(damagedid, 0)) / 100);

	if(ProxDetectorS(20.0, damagedid, playerid, 1))
	{
		switch(weaponid)
		{
			case 3, 23:
			{
				if(IsACop(playerid) || IsAMeria(playerid) || PI[playerid][pMember][0] == TEAM_BANK)
				{
					if(!CuffedTime[damagedid])
					{
						if(Controllable{damagedid})
						{
							ClearAnimationsEx(damagedid);
							CheckMiner(damagedid);
							CheckPorter(damagedid);
							CheckBreakCuff(damagedid);
							CheckTheftCar(damagedid);

							ProxDetector(25, playerid, (str_f("* %s оглушил %s %s", PN(playerid), PN(damagedid), weaponid == 13 ? "дубинкой" : "выстрелом с тазера")), COLOR_PURPLE);
							SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Нажмите {FF0000}\"N\"{FFFFFF} около человека чтобы сковать его");

							TazerPlayer[damagedid] = playerid;
							TazerPlayer[playerid] = damagedid;

							new Float:X, Float:Y, Float:Z;
							GetPlayerPos(damagedid, X, Y, Z), Z += 1.5;

							switch(GetPlayerAnimationIndex(playerid))
							{
								case 17: CuffedPlayer(damagedid, 15);
								case 18: CuffedPlayer(damagedid, 20);
								case 19: CuffedPlayer(damagedid, 25);
								default: CuffedPlayer(damagedid, 30);
							}

							if(GetPlayerLauncher(damagedid))
								setPlayerCustomIcon(damagedid, 1, true);
						}
					}
				}
			}

			case 0, 88:
			{
				if(damagedid == INVALID_PLAYER_ID or Int_GetPlayerData(damagedid, !"takeMorozPlayer") > Global_Time or Int_GetPlayerData(playerid, !"giveMorozPlayer") > Global_Time or weaponid == 0 && PI[damagedid][pSkin][0] != 841)
					return false;

				new Float:attachedPosition[][] = 
				{
					{-0.032000, 0.025000, -0.039999, -94.900017, 8.700002, -61.399879, 1.088999, 0.765999, 1.301999},
					{-0.141999, -0.003999, -0.000999, -9.199993, 5.600007, -89.499947, 0.432000, 0.656000, 0.615999},
					{-0.141999, -0.003999, -0.000999, -9.199993, 5.600007, -89.499947, 0.432000, 0.656000, 0.615999},
					{0.281000, 0.015000, -0.017999, -12.099991, 4.600006, -74.100014, 0.571000, 0.656000, 0.753000},
					{0.262000, 0.023000, 0.013000, -12.099991, 3.400007, -83.099968, 0.571000, 0.656000, 0.753000},
					{0.235000, 0.011000, -0.018999, -8.599989, 3.800008, -77.899956, 0.595000, 0.508000, 0.853999},
					{0.235000, 0.011000, -0.018999, -8.599989, 3.800008, -77.899956, 0.595000, 0.508000, 0.853999}
				}, attachedBoned[] = {1, 5, 6, 12, 11, 8, 7};

				for(new i; i < 6; i++)
				{
					if(IsPlayerAttachedSlotUsedEx(damagedid, i)) 
						RemovePlayerAttachedObject(damagedid, i);

					SetPlayerAttachedObject(damagedid, i, 2806, attachedBoned[i], attachedPosition[i][0], attachedPosition[i][1], attachedPosition[i][2], attachedPosition[i][3], attachedPosition[i][4], attachedPosition[i][5], attachedPosition[i][6], attachedPosition[i][7], attachedPosition[i][8], 0xFF53BCFF, 0);
				}

				Int_SetPlayerData(damagedid, !"takeMorozPlayer", Global_Time + 5), pTemp[damagedid][pMoroz] = true;
				Int_SetPlayerData(playerid, !"giveMorozPlayer", Global_Time + 10);

				TogglePlayerControllable(damagedid, Controllable{damagedid} = false);
			}
		}
	}

	if(GetPlayerWeaponEx(playerid) != 43 && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_WINE && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
	{
		if(!IsACop(playerid))
		{
			if(GetPlayerGZ(playerid) && GetPlayerVirtualWorld(playerid) != 11 && GetPlayerVirtualWorld(playerid) != 12 && GetPlayerVirtualWorld(playerid) != 13)
			{
				if(!NoEnterPickup[playerid])
					SetPVarInt(playerid,"antidmnew", (Int_GetPlayerData(playerid,"antidmnew")+1));

				NoEnterPickup[playerid] = 7;
				ClearAnimationsEx(playerid);
				ApplyAnimationEx(playerid, !"MISC", !"PLYR_SHKHEAD", 4.1, false, false, false, false, 0, false);
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{B8F64D}Подсказка", !"\n\n{FFFFFF}В этом месте запрещено {FC7979}драться/стрелять{FFFFFF}.\nЕсли вы продолжите, то вы будете кикнуты!", !"Принять", !"");
			}
		}
	}

	if(IsPlayerInDynamicArea(playerid, gAreas[arGhetto]) && IsPlayerInDynamicArea(damagedid, gAreas[arGhetto]))
	{
		SCM(playerid, COLOR_VALIK, !"[Информация] {ffffff}Вы получили {ffff00}желтый розыск гетто {ffffff}из-за того, что напали на игрока без причины.");
		SCM(playerid, COLOR_VALIK, !"[Подсказка] {ffffff}Если вы его убьете, вы получите {ff0000}полноценный Розыск гетто{ffffff}!");
		centreGhettoPlayer_data[playerid][0] = 1, centreGhettoPlayer_data[playerid][1] = Global_Time + 180;
		UpdatePlayerDataStr(playerid, "CentreGhettoData", Int_PackMassive(0, centreGhettoPlayer_data[playerid]));
	}

	ShowDamageTextDrawForPlayer(playerid, damagedid, weaponid, amount);
	SetPlayerChatBubble(damagedid, (str_f("- %.2f HP", amount)), COLOR_OLDRED, 30.0, 5000);

    return true;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(!pTemp[playerid][tAuthorized])
		return false;

	if(!(issuerid == INVALID_PLAYER_ID) && GetAccessoryUpdate(AksSlot[issuerid][1][2]))
	{
		amount += float(GetAccessoryPlayerBuff(issuerid, 2));
		
		if(GetAccessoryPlayerBuff(issuerid, 3) >= amount * (random(100) * 2) / 100) 
			amount += amount * (float(GetAccessoryPlayerBuff(issuerid, 3)) / 100);

		amount -= amount * (float(GetAccessoryPlayerBuff(playerid, 0)) / 100);
	}

	if(PI[playerid][pArmour] > 0)
	{
	    if(weaponid > 46) PI[playerid][pHealth] -= amount;
	    else PI[playerid][pArmour] -= amount;
	}
	else PI[playerid][pHealth] -= amount;
	
	if(amount > 0)
 	{
		if(UsingShield{playerid})
		{
	        if(PI[playerid][pShield] >= 10.0)
	        {
	   			GetPlayerHealth(playerid, PI[playerid][pHealth]);
	            PI[playerid][pHealth] += 10;
				if(PI[playerid][pHealth] > 100) PI[playerid][pHealth] = 100;
			    UpdatePlayerHealth(playerid, PI[playerid][pHealth]);
				PI[playerid][pShield] -= 10.0;
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, 7);
				UsingShield{playerid} = false;
				PI[playerid][pShield] = 0.0;
				ClearAnimationsEx(playerid);
			}
	    }
		SetPlayerSkills(issuerid);
	}

	return true;
}

stock SetPlayerSkills(playerid)
{
    if(!IsPlayerConnected(playerid)) return 1;
    SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL,			PI[playerid][pGunSkill][0]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL_SILENCED,	PI[playerid][pGunSkill][1]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_DESERT_EAGLE,		PI[playerid][pGunSkill][2]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_SHOTGUN,			PI[playerid][pGunSkill][3]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_MICRO_UZI,			PI[playerid][pGunSkill][4]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_MP5,				PI[playerid][pGunSkill][5]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_AK47,				PI[playerid][pGunSkill][6]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_M4,				PI[playerid][pGunSkill][7]/10);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_SNIPERRIFLE,		PI[playerid][pGunSkill][8]/10);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(Int_GetPlayerData(playerid, "EditObjectHouse"))
	{
		new id = Int_GetPlayerData(playerid, "object_edit_id"); DeletePVar(playerid, "EditObjectHouse"), DeletePVar(playerid, "object_edit_id");
		SetDynamicObjectPos(BH_Object[id][objID], BH_Object[id][objPosX], BH_Object[id][objPosY], BH_Object[id][objPosZ]);
		SetDynamicObjectRot(BH_Object[id][objID], BH_Object[id][objRotX], BH_Object[id][objRotY], BH_Object[id][objRotZ]);
	 	CancelEdit(playerid);
	}

	if(newinteriorid > 0 && oldinteriorid == 0)
	{
		SetPlayerWeather(playerid, 2);
		DestroyPlayerMapDraws(playerid);
	}
	else if(newinteriorid == 0 && oldinteriorid > 0)
	{
		SetPlayerWeather(playerid, Weather);
		CreatePlayerMapDraws(playerid);
	}
	return 1;
}

public: EngineVehicle(playerid, vehicleid)
{
	if(IsPlayerInVehicle(playerid,vehicleid))
	{
	    if(!IsAOwnableCar(vehicleid) || VehicleInfo[vehicleid][vFamily] != -1 || CarInfo[GetVehicleID(vehicleid)][cKeyIN])
	    {
	        new Float:Health;
			GetVehicleHealth(vehicleid, Health);
			if(Health > 1000.0) Health = 1000.0;
			new hp = 11 - floatround(Health / 100.0);
		    new uEngine = random(hp);
		    if(uEngine < 4)
		    {
		        SetEngineStatus(vehicleid, true, playerid);
		        f(global_str, 100," Двигатель успешно завелся | -  %s .",PN(playerid));
		        ProxDetector(25.0,playerid, global_str, COLOR_DOCHAT);
		    }
		    else
		    {
		        f(global_str,100," Двигатель не завелся | -  %s.",PN(playerid));
		        ProxDetector(25.0,playerid,global_str,COLOR_DOCHAT);
			}
		}
	}
	return 1;
}
stock MuchNumber(...)
{
	new count = numargs(), maxnum;
	for(new i; i < count; i ++)
	{
	    new temp = getarg(i);
	    if(temp > maxnum) maxnum = temp;
	}
	return maxnum;
}
forward DestroyTempStrip(strip, carid);
public DestroyTempStrip(strip, carid)
{
	DestroyDynamicObject(TempStripObject[carid]);
	TempStripObject[carid] = -1;
	if(StripCount > 1)
	{
		for(new i = strip; i < StripCount; i ++)
		{
		    TStripPos[i][0] = TStripPos[i+1][0];
			TStripPos[i][1] = TStripPos[i+1][1];
			TStripPos[i][2] = TStripPos[i+1][2];
		}
	}
	StripCount --;
	return 1;
}
forward PlayerUnStrip(playerid);
public PlayerUnStrip(playerid)
{
    NoStrip[playerid] = -1;
    return 1;
}
stock IsAStripCar(carid)
{
	new model = GetVehicleModelEx(carid);
	switch(model)
	{
	    case 528, 596..599: return 1;
	    default: return 0;
	}
	return 0;
}
stock bool:bollean(value)
{
	return value?true:false;
}
stock CuffedPlayer(playerid, cuffedtime)
{
	TogglePlayerControllable(playerid, true);
	CuffedTime[playerid] = cuffedtime;
	Cuffed[playerid] = true;
	Crack{playerid} = bollean(cuffedtime > 0);
	Cuffed[playerid] = bollean(cuffedtime == 0);
	if(PlayerJob[playerid] == 17 && InJob[playerid] == 2) for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], false);
	//
	if(PlayerJob[playerid] == JOB_PORTER && InJob[playerid] == 2) TogglePlayerDynamicCP(playerid, PorterDownCP, false);
    if(TheftCarID[playerid] != 0)
	{
	    TheftCarID[playerid] = 0;
	    TheftKey[playerid] = 0;
	    TheftTime[playerid] = 0;
	    TheftCount[playerid] = 0;
	    HidePlayerActionText(playerid);
	    HidePlayerActionBand(playerid);
	}
	if(pTemp[playerid][BreakKey] != 0)
	{
		pTemp[playerid][BreakKey] =
		pTemp[playerid][BreakTime] =
		pTemp[playerid][BreakCount] = 0;
  		HidePlayerActionText(playerid);
	    HidePlayerActionBand(playerid);
		DeleteItem(playerid, 558, 1);
	}
	if(IsACop(playerid))
	{
	    new cuffid = PlayerOfCuff[playerid];
	    if(cuffid != INVALID_PLAYER_ID)
	    {
	        if(PlayerOfCuff[cuffid] == playerid) PlayerOfCuff[cuffid] = INVALID_PLAYER_ID;
	        PlayerOfCuff[playerid] = INVALID_PLAYER_ID;
	        TimeOfCuff[playerid] = 0;
	    }
	}
	if(cuffedtime <= 0)
	{
	    new tazer = TazerPlayer[playerid];
		if(tazer != INVALID_PLAYER_ID)
  		{
 			TazerPlayer[playerid] = INVALID_PLAYER_ID;
 			TazerPlayer[tazer] = INVALID_PLAYER_ID;
  		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	}
	CancelCuff(playerid);
	return 1;
}
stock UnCuffPlayer(playerid)
{
	Cuffed[playerid] = false;
	CuffedTime[playerid] = 0;
	SetPlayerSpecialAction(playerid, 0);
    TogglePlayerControllable(playerid, true);
    pTemp[playerid][BreakKey] = 0;
	pTemp[playerid][BreakTime] = 0;
	pTemp[playerid][BreakCount] = 0;
 	HidePlayerActionText(playerid);
	HidePlayerActionBand(playerid);
	ClearAnimations(playerid);
	return 1;
}
stock Parking(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
    if(GetPlayerVirtualWorld(playerid) == 0)
    {
        for(new i; i < sizeof(parking); i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z]))
            	return ParkingEntered[playerid] = i, SPD(playerid, 1981, DIALOG_STYLE_LIST, !"Выберите этаж!", !"{FFFFFF}1.\n2.", !"Принять", !"Отмена");
        }
    }
    else
    {
        new i = ParkingEntered[playerid];
        if(i == -1) return false;

        if(IsPlayerInRangeOfPoint(playerid, 2.0, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z]))
        {
        	SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
			if(carid)
			{
				SetVehiclePos(carid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.0);
				SetVehicleZAngle(carid, parking[i][pExit_a]);
				LinkVehicleToInterior(carid, 0);
				SetVehicleVirtualWorld(carid, 0);
			}
			else UpdatePlayerPos(playerid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.0, parking[i][pEnter_a]);
            return ParkingEntered[playerid] = -1;
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z]))
        {
			if(carid)
			{
				SetVehiclePos(carid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.0);
				SetVehicleZAngle(carid, parking[i][pExit_a]);
				LinkVehicleToInterior(carid, 0);
				SetVehicleVirtualWorld(carid, 0);
			}
			SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.0, parking[i][pEnter_a]);
			return ParkingEntered[playerid] = -1;
        }
    }
    return 0;
}
stock GarageMovement(playerid)
{
	new veh_id = GetPlayerVehicleID(playerid);
  	if(GarageEntered[playerid] == -1)
	{
		for(new i; i < OWNABLEHOUSES; i++)
		{
			if(HouseInfo[i][hGarage])
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hGarage_X], HouseInfo[i][hGarage_Y], HouseInfo[i][hGarage_Z]))
				{
					if(!IsACop(playerid) && (!IsPlayerHouse(playerid, i) or !IsPlayerTenant(playerid, i)))
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Это не ваш гараж!");

					if(veh_id)
					{
						new count = 0;
						foreach(Vehicle, vehid)
						{
							if(GetVehicleVirtualWorld(vehid) != (i+50)) continue;
							count ++;
						}
						if(count == 1 && HouseInfo[i][hKlass] == 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом гараже уже есть 1 машина!");

						if(count == 2 && HouseInfo[i][hKlass] == 2) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом гараже уже есть 2 машины!");

						if(count == 3 && (HouseInfo[i][hKlass] == 3 || HouseInfo[i][hKlass] == 4)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом гараже уже есть 3 машины!");

						if(count == 5 && HouseInfo[i][hKlass] == 5) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В этом гараже уже есть 5 машин!");

						SetVehiclePos(veh_id,GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_X], GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_Y],
						GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_Z]+1.0);
						LinkVehicleToInterior(veh_id, GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_INT]);
						SetVehicleVirtualWorld(veh_id, i + 50);

						SetPlayerInterior(playerid, GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_INT]);
						SetPlayerVirtualWorld(playerid, i + 50);
					}
					SetPlayerVirtualWorld(playerid, i + 50), SetPlayerInterior(playerid, GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_INT]);

					UpdatePlayerPos(playerid,
					GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_X],
					GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_Y],
					GaragesInteriors[HouseInfo[i][hKlass] - 1][e_GARAGE_INTERIOR_Z] + 1.0,
					-1);
					
					return GarageEntered[playerid] = i;
				}
				else continue;
			}
		}
	}
	else
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, GaragesInteriors[HouseInfo[GarageEntered[playerid]][hKlass] - 1][e_GARAGE_INTERIOR_X], GaragesInteriors[HouseInfo[GarageEntered[playerid]][hKlass] - 1][e_GARAGE_INTERIOR_Y], GaragesInteriors[HouseInfo[GarageEntered[playerid]][hKlass] - 1][e_GARAGE_INTERIOR_Z]))
		{
			if(GetPlayerVirtualWorld(playerid) == (GarageEntered[playerid] + 50))
			{
				if(veh_id)
				{
					SetVehiclePos(
						veh_id,
						HouseInfo[GarageEntered[playerid]][hGarage_X],
						HouseInfo[GarageEntered[playerid]][hGarage_Y],
						HouseInfo[GarageEntered[playerid]][hGarage_Z] + 0.6
					);
					LinkVehicleToInterior(veh_id, 0);
					SetVehicleVirtualWorld(veh_id, 0);
					Streamer_Update(playerid);
				}
				UpdatePlayerPos(playerid, HouseInfo[GarageEntered[playerid]][hGarage_X], HouseInfo[GarageEntered[playerid]][hGarage_Y], HouseInfo[GarageEntered[playerid]][hGarage_Z] + 0.6 );
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				if(veh_id != 0)	PutPlayerInVehicle(playerid, veh_id, 0);
				GarageEntered[playerid] = -1;
				return 1;
			}
		}
	}
	return 0;
}

new timerwaxt[MAX_PLAYERS];

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{	
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(newkeys & 2)
			for(new i; i < 3; i++)
				if(IsPlayerInRangeOfPoint(playerid, 2.5, tuningStation_boxInfo[i][0][0], tuningStation_boxInfo[i][0][1], tuningStation_boxInfo[i][0][2]))
					tuningStationOpen(playerid, i);

		if(IsAUniqueVehicle(GetPlayerVehicleID(playerid)))
		{
			if(newkeys & 4)
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);

			else if(oldkeys & 4)
				RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1010);
		}
	}

	if(newkeys == PRESS_ALT)
	{
		for(new i; i < 3; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, FKV_Data_Int[i][kvAutoparkPos][0], FKV_Data_Int[i][kvAutoparkPos][1], FKV_Data_Int[i][kvAutoparkPos][2]))
			{
				if(GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "kv_id") == -1)
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У вашей семьи нет квартиры.");

				if(!(FKV_Data_Int[FKV_Data[GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "kv_id")][kvDataId]][kvInterior] == FKV_Data_Int[i][kvInterior]))
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У вашей семьи нет квартиры именно в этом ЖК.");

				return SPDF(playerid, 25192, DIALOG_STYLE_TABLIST, !"Выберите тип автопарка", "Семейный автопарк	свободно %i из %i\nИнкассаторские грузовики	свободно 0 из 0", !"Выбрать", !"Закрыть", GetFamilyVehicleCount(playerid), GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot"));
			}

			if(IsValidDynamic3DTextLabel(autoSelectionWinners_TextData[i]) && IsValidDynamicPickup(autoSelectionWinners_Data[i][0]) && IsPlayerInRangeOfPoint(playerid, 1.5, autoSelectionPosition_Pickup[i][0], autoSelectionPosition_Pickup[i][1], autoSelectionPosition_Pickup[i][2]))
			{
				static const selectionName[][] = {"Грузовик", "Автобус", "Самолет"};

				return spdList(playerid, 0, i), SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{FFFFFF}Вы действительно хотите получить новый сертификат на {FFFF00}%s{FFFFFF}?\n\nВместо этого у вас заберут 2 старых сертификата на такой же вид транспорта.", !"Обменять", !"Закрыть", selectionName[i]);
			}
		}	

		if(musorka[playerid] != -1)
			OtherInvOpen(playerid, 2, 0.0, 0.0, musorka[playerid]);

		if(GetPlayerInterior(playerid) == 104)
		{
			if(GlobalMassive[playerid][7])
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, sklad_door_position[GlobalMassive[playerid][7] - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][6], sklad_door_position[GlobalMassive[playerid][7] - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][7], sklad_door_position[GlobalMassive[playerid][7] - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][8]))
				{
					if(GetString(SkladInfo[GlobalMassive[playerid][7]][sklad_Owner], "The State"))
						SPDF(playerid, 25200, DIALOG_STYLE_MSGBOX, !"Покупка склада", "{ffffff}Складское помещение: {338FAF}№%d\n{ffffff}Склад: {338FAF}№%d\n{ffffff}Стоимость: {338FAF}50000000$\n\n{ffffff}Вы действительно хотите купить этот склад?", !"Купить", !"Закрыть", GetPlayerVirtualWorld(playerid), GlobalMassive[playerid][7] - 50 * (GetPlayerVirtualWorld(playerid) - 1));

					else 
					{
						if(GetPVarInt(playerid, "sklad_repeatpass") > Global_Time)
							return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Вводить код доступа можно 1 раз в минуту!");

						SPD(playerid, 25201, DIALOG_STYLE_INPUT, !"Доступ запрещён!", !"{ffffff}Чтобы открыть этот склад, введите специальный {338FAF}код доступа{ffffff}:", !"Открыть", !"Закрыть"), GlobalMassive[playerid][8] = 1;
					}
				}
				else SPD(playerid, 25201, DIALOG_STYLE_INPUT, !"Доступ запрещён!", !"{ffffff}Чтобы открыть этот склад, введите специальный {338FAF}код доступа{ffffff}:", !"Открыть", !"Закрыть"), GlobalMassive[playerid][8] = 2;
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, 219.9615, -269.2213, 1.8221))
			return SPD(playerid, 26253, DIALOG_STYLE_LIST, !"Автоподбор авто", !"{ff6666}[1] Воспользоваться услугами автоподбора\n[2] Полезная информация\n[3] Где владелец СТО?\n[4] Сколько попыток у меня осталось?", !"Выбрать", !"Закрыть");
	
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 214.4270, -266.1833, 1.5688))
			return SPD(playerid, 26257, DIALOG_STYLE_LIST, !"Информация", !"[1] Основная информация\n[2] Какой транспорт можно получить?\n[3] Преимущества полученного транспорта", !"Выбрать", !"Закрыть");

		if(GlobalMassive[playerid][3])
			if(IsPlayerInRangeOfPoint(playerid, 1.0, RentBikePosition[GlobalMassive[playerid][3] - 1][0], RentBikePosition[GlobalMassive[playerid][3] - 1][1], RentBikePosition[GlobalMassive[playerid][3] - 1][2]))
				SPD(playerid, 26216, DIALOG_STYLE_LIST, "Пункт выдачи велосипедов", "{ff6666}[1]{Ffffff} Взять велосипед\n{ff6666}[2]{Ffffff} Получить лицензии", "Выбрать", "Закрыть");

		if(IsPlayerInRangeOfPoint(playerid, 1.5, -1662.1952,-246.4758,14.1484) && !(HouseEntered[playerid] == -1))
		{
			SetPlayerInterior(playerid, HouseInfo[HouseEntered[playerid]][hInt]);
			return UpdatePlayerPos(playerid, HouseInfo[HouseEntered[playerid]][hExit_X], HouseInfo[HouseEntered[playerid]][hExit_Y], HouseInfo[HouseEntered[playerid]][hExit_Z], -1);
		}

		else if(IsPlayerInRangeOfPoint(playerid, 2.0, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap]) && AirDrop[air_Status])
		{
			if(!AirDrop[air_Open])
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Контейнер контрабанды ещё не преземлился на землю!");

			global_str = "{FFFFFF}Приз\t{FFFFFF}Количество\t{FFFFFF}Подобрать можно через ( секунд)";

			for(new i; i < 5; i++)
				strcat(global_str, (str_f("\n%s (x%d)\t%d\t%s", ItemsInfo[AirDrop[air_Inventory][i]][itemName],  AirDrop[air_InventoryReCount][i], AirDrop[air_InventoryCount][i], Global_Time < AirDrop[air_InventoryLastTake][i] ? (str_f("{ae433d}%s", Convert(AirDrop[air_InventoryLastTake][i]-Global_Time))):"{9ACD32}Сейчас")));

			return SPD(playerid, 9904, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}AirDrop |{8C65E9} Содержимое", global_str, !"{9ACD32}O", !"{ae433d}X");
		}

		else if(!(BizEntered[playerid] == -1))
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1525.2045, 1436.7594, 10.9674) or IsPlayerInRangeOfPoint(playerid, 1.0, 1525.1495, 1439.1144, 10.9674))
			{
				if(!GetString(BizData[BizEntered[playerid]][bOwner], PlayerName[playerid]) && !GetString(BizData[BizEntered[playerid]][bZam], PlayerName[playerid]))
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только владельцу и заместителю ломбарда.");

				new data = (IsPlayerInRangeOfPoint(playerid, 1.5, 1525.2045, 1436.7594, 10.9674));
				
				if(data)
					UpdatePlayerPos(playerid, 1525.1495, 1439.1144, 10.9674);
				else
					UpdatePlayerPos(playerid, 1525.2045, 1436.7594, 10.9674);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1531.2493,1445.7972,10.9674))
			{
				if(!GetString(BizData[BizEntered[playerid]][bOwner], PlayerName[playerid]) && !GetString(BizData[BizEntered[playerid]][bZam], PlayerName[playerid]))
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только владельцу и заместителю ломбарда.");
				
				return ShowLombardMenu(playerid);
			}
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1118.0151, -1432.4603, 15.7969))
			return SPD(playerid, 15072, DIALOG_STYLE_LIST, !"Выберите список", !"Средние цены товаров при продаже\nСредние цены товаров при скупке", !"Выбрать", !"Закрыть");
			
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 334.1906, -1806.6876, 4.5385))
			return SPD(playerid, 25111, DIALOG_STYLE_LIST, !"Автомобильный аукцион", !"{ffffff}{ae433d}[1] {ffffff}Информация\n{ae433d}[2] {CCCCCC}Забрать выкупленный транспорт", !"Выбрать", !"Отмена");
			 
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2571.3157, 978.1287, 10.9932))
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация о салоне", !"{95D1CC}В этом тюнинг салоне вы можете приобрести товары, которые значительно увеличат технические характеристики\nвашего автомобиля, а также товары визуальной модификации: тонировка, винилы, уникальные диски и многое другое,\nкоторые выделят ваш автомобиль из толпы!\n\n{B3541E}Посетить салон можно только за рулём кастомного автомобиля, доступного при игре с лаунчера ARIZONA GAMES\n\n{F0BB62}Два раза в час, в 25 и в 55 минут на 5 минут тюнинг салон закрывается для пополнения компонентов тюнинга!\nПосле пополнения в тюнинг салоне появится 3 случайные детали технического тюнинга,\n3 случайные детали визуального тюнинга и 3 случайных винила!", !"Выход", !"");

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1148.6715, -1308.8401, 1019.4266))
			return SPD(playerid, 15310, DIALOG_STYLE_MSGBOX, !"Быстрое лечение", !"{ffffff}Вы действительно хотите пройти курс\nбыстрой реабилитации за {ffff00}$50000{ffffff}?", !"Да", !"Закрыть");
			
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1487.6162, 1519.0647, 1601.0859) or IsPlayerInRangeOfPoint(playerid, 1.0, 1487.5302, 1519.0012, 1604.6797) or IsPlayerInRangeOfPoint(playerid, 1.0, 1487.4905, 1519.0012, 1608.2207) or IsPlayerInRangeOfPoint(playerid, 1.0, 1487.4507, 1519.0012, 1611.7803))
			return SPD(playerid, 7677, DIALOG_STYLE_LIST, !"", !"{6DCB33}1{FFFFFF} этаж\n{6DCB33}2{FFFFFF} этаж\n{6DCB33}3{FFFFFF} этаж\n{6DCB33}4{FFFFFF} этаж", !"Принять", !"Отмена");
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1800.4841, 409.9243, 20.2294) or IsPlayerInRangeOfPoint(playerid, 1.0, 2464.3484, 2244.9761, 10.8203)  or IsPlayerInRangeOfPoint(playerid, 1.0, -2053.0842, 460.5180, 35.1719))
		{
			new count = GetCount(playerid, 522);
			
			format(global_str, 1024, "\
				{C4DF3D}<={FFFFFF} TOП развитая семья: {F88860}-.\n\
				{C4DF3D}<={FFFFFF} TOП большая семья: {F88860}-.\n\
				{8D9F37}<={FFFFFF} TOП влиятельная семья: {F88860}-.\n\
				{DB873D}<={FFFFFF} Ежедневные задания\n\
				{808D84}Информация для семей.\n\
				{808D84}%s\n\
				{808D84}Обменять {C4DF3D}200{808D84} талонов на {C4DF3D}Активный аксессуар:{808D84}'Бумбокс'\n\
				{808D84}Обменять {C4DF3D}500{808D84} талонов на {C4DF3D}наклейку:{808D84} 'Supreme'\n\
				{808D84}Обменять {C4DF3D}1200{808D84} талонов на{C4DF3D} Samsung Galaxy S10 (Белый)\n\
				{808D84}Обменять {C4DF3D}1200{808D84} талонов на{C4DF3D} IPhone X (Белый)",
				(FP_Data[playerid][F_FAMILY_ID] == -1 || !count ) ? "Обмен талонов на репутацию [ {FD4D58}Недоступно{808D84} ]":(str_f("Обменять {C4DF3D}%d{808D84} талонов на {C4DF3D}%d{808D84} репутации!", count, count * 10 ))
			);
			
			return SPD(playerid, 3998, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
		}
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 822.1429, 3.1134, 1004.1797))
			return SPD(playerid, 7899, DIALOG_STYLE_LIST, !"", "{DB873D}[+]{FFFFFF} Сколько человек участвует в лотерее?\n{DB873D}[+]{FFFFFF} Какой призовой фонд?\n{DB873D}[+]{FFFFFF} Когда определяются победители?\n{DB873D}[+]{FFFFFF} Купить билет \t\t[{E6FA6A}10 000${FFFFFF}]\n{DB873D}[+]{FFFFFF} Купить VIP билет!\n{76FE27}[+]{FFFFFF} Забрать приз! \t\t{DB873D}[ Не доступно ]", !"Принять", !"Отмена");
			
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1529.6951, 1576.1597, 10.9252))
		{
			if(!(BizEntered[playerid] == -1) && !GetString(BizData[BizEntered[playerid]][bOwner], PN(playerid)) && !GetString(BizData[BizEntered[playerid]][bZam], PN(playerid))) 
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы не владелец этого секонд-хенда.");
		}
		
		else if(IsPlayerInRangeOfPoint(playerid, 30.0, 1530.4161,1575.3398,10.9252))
		{
			if(!(BizEntered[playerid] == -1) && SecondHand[ BizEntered[playerid] - 263 ][secondStatus])
			{
				for(new i; i < sizeof(SecondHand_Pos); i++) 
				{
					if(SecondHand_Pos[i][secondCreate] && IsPlayerInRangeOfPoint(playerid, 1.0, SecondHand_Pos[i][secondX], SecondHand_Pos[i][secondY], SecondHand_Pos[i][secondZ]))
						return Int_SetPlayerData(playerid, "SecondIDPICK", i), SPD(playerid, 15338, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{ffffff}Стоимость одежды из секонд-хенда: {ffff00}$50000\n\nВы действительно хотите приобрести одежду?", !"Купить", !"Закрыть");
				}
			}
		}
			
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2534.8040, -1472.6917, 24.0019))
			return CreateShopTD(playerid, 7);

		else if(!(BizEntered[playerid] == -1) && IsPlayerInRangeOfPoint(playerid, 1.0, -1064.8044,-1200.9800,1729.8284))
			return CreateShopTD(playerid, 6);

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2530.6060, -1475.0999, 23.9788))
			return SPD(playerid, 7625, DIALOG_STYLE_LIST, !"Что сделаешь?", !"{FFFFFF}1. Продам патроны {F57449}[Не доступно]{FFFFFF}\n2. Продам наркотики {F57449}[Не доступно]{FFFFFF}\n3. Продам ингридиенты {F57449}[Не доступно]{FFFFFF}\n4. Продам саженцы {F57449}[Не доступно]{FFFFFF}\n5. Продам Гураму {A2F549}ключи{FFFFFF} от армейских ворот и машин за {A2F549}2000${FFFFFF}\n6. Куплю у Гурама ключи от армейских ворот и машин за {F5E149}90 000${FFFFFF}\n7. Куплю у Гурама ключи от дверей Банка за {F5E149}30 000${FFFFFF}\n8. Заплатить Гураму {F5E149}2 миллиона{FFFFFF} за 500 репутации для семьи!\n9. Купить у Гурама {F5E149}Армейскую форму{FFFFFF} за 50 000$\n\n10. Купить у Гурама {F5E149}100 патронов{FFFFFF} за 8500$\n\n11. Очистить розыск через Гурама {F5E149}за 500 000$\n\n12. Купить секретную сумку (работает до перезахода) {F5E149}за 45 000$\n\n{FD37FF}Что такое секретная сумка?", !"Выбрать", !"Отмена");
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1658.6666,1210.0797,7.2500))
			CreatreMenuDrive(playerid);

		else if(GetPlayerVirtualWorld(playerid) == 2)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1471.6508,-1271.7303,113.8103))
				return SPD(playerid, 15152, DIALOG_STYLE_LIST, !"Консультант по вопросам фермы", !"- Посмотреть все фермы\n- Продать ферму", !"Выбрать", !"Закрыть");
			
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1479.7925,-1272.7500,113.8064))
				return SPD(playerid, 6682, DIALOG_STYLE_LIST, !"", !"{FE9DA7}>>>{FFFFFF} Оставить жалобу\n{EBDA60}<<<{FFFFFF} Читать жалобы", !"Открыть", !"Отмена");
		}

	 	if(IsPlayerInRangeOfPoint(playerid, 1.0, 1384.2760, -21.8199, 1000.9229) && !(BizEntered[playerid] == -1) && GetBizData(BizEntered[playerid], bState) == 28)
			return SPD(playerid, 15270, DIALOG_STYLE_MSGBOX, !"Покупка видеокарты", "{ffffff}Вы хотите купить видеокарту для майнинга криптовалюты?\nЕё стоимость: {ffff00}$350 000\n\n{cccccc}Осталось видеокарт в наличии: 0 шт.\n(завоз новых видеокарт каждый час)", !"Купить", !"Закрыть");
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -505.0940, 2597.6277, 53.5557))
			return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"{BFBBBA}Автосалон Luxe-класса", "{ffffff}В данном автосалоне вы можете купить авто люкс класса, такие как:\n{cccccc}- Mercedes GT63s AMG\n- Mercedes G63 AMG\n- Audi RS6\n- BMW X5\n- Chevrolet Corvette\n- Chevrolet Cruze\n- Lexus LX\n- Porsche 911\n- Porsche Cayenne\n- Mercedes S63 AMG\n- Volkswagen Touareg\n- Lamborghini Urus\n- Audi Q8\n- Dodge Challenger\n- Acura NSX\n- Volvo V60\n- Range Rover evoque\n- Honda Civic Type-R\n- Lexus Sport-S\n- Ford Mustang\n- Volvo XC90\n- Jaguar F-pace\n- Kia Optima\n\n{cccccc}Авто доставляется из-за рубежа каждые 8 часа.\n\n{ffffff}На данный момент мы ожиданием поставку автомобиля {FA5858}%s\n{ffffff}До прибытия осталось: {FA5858}%s\n{ffffff}Цена автомобиля: {FA5858}$200000000\n\n", !"Закрыть", !"", GetVehicleName(CarSletInfo[0], true), Convert(CarSletInfo[1] - Global_Time));

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1541.4100,1644.3116,10.8203) && GetPlayerInterior(playerid) == 7)
		{
			if(BizEntered[playerid] == -1) return false;
			
			else if(!EnableWorkShop) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Данная система временно отключена администрацией проекта.");

			global_str = "{cccccc}Название услуги	{cccccc}Стоимость\n";

			for(new i, named_service[][] = {"Улучшение аксессуаров/одежды", "Ремонт аксессуаров/одежды", "Улучшение кастомных бронежилетов", "Покраска аксессуаров", "Разбор аксессуаров", "Улучшение PREMIUM VIP"}; i < GetMaxItems(BizData[BizEntered[playerid]][bState]); i++)
				strcat(global_str, (str_f("{73B461}%i. {ffffff}%s	{73B461}$%i\n", i + 1, named_service[i], BizData[BizEntered[playerid]][bItem][i])));
				
			return SPD(playerid, 9619, DIALOG_STYLE_TABLIST_HEADERS, !"{73B461}Мастерская | Список услуг", global_str, !"Выбрать", !"Отмена");
		}

		else if(!DoorInfo[45][dStatus] && IsPlayerInRangeOfPoint(playerid, 3.0, -2095.651611, 509.676605, 1486.664429))
			return callcmd::opengate(playerid);

		else if(PlayerJob[playerid] == 22 && IsPlayerInRangeOfPoint(playerid, 1, -2092.8953, 505.5473, 1487.6927)) return 
			SPD(playerid, 4293, DIALOG_STYLE_MSGBOX, "Машинист электропоезда", InJob[playerid] ? "{FFFFFF}Вы хотите переодеться обратно в повседневную одежду?":"{FFFFFF}Вы хотите переодеться в рабочую одежду?", "Выбрать", "Отмена");
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, -2102.2109, 506.9873, 1487.6927) || IsPlayerInRangeOfPoint(playerid, 1.5, -2102.2109, 512.9057, 1487.6927))
		{
			if(!InJob[playerid] || !(PlayerJob[playerid] == 22))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не переоделись в рабочую форму!");
				return SCM(playerid, -1, !"Переодеться можно в служебном помещении за дверью с названием \'Служебный Вход\'");
			}
			return SPD(playerid, 4292, DIALOG_STYLE_MSGBOX, "Регистрация на рейс", "{FFFFFF}Вы хотите занять очередь на регистрацию рейса?", "Выбрать", "Отмена");
		}	
		else if(IsPlayerInRangeOfPoint(playerid, 2.5, -38.4478,1180.5905,19.3594 )) SPD(playerid,7893,2,"Задать вопрос","- Ты кто?\n{852A2A}Доступные задания","Закрыть","");
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1793.6145, -1303.1317, 13.6498))
		{
			new s;
			global_str = "{ffff00}20 этаж\n";
			for(new i = 1133; i >= 1099; i--)
			{
				if(HouseInfo[i][hType] == 2)
				{
					if(GetString(HouseInfo[i][hOwner], "The State")) f(global_str, 1500, "%s{cccccc}[№ %d] Квартира свободна\n",global_str, i);
						else f(global_str, 1500, "%s{cccccc}[№ %d] Владелец: %s\n",global_str, i ,HouseInfo[i][hOwner]);
					s++;
					switch(s){
					case 5: strcat(global_str,"\n \n{ffff00}18 этаж\n");
					case 10: strcat(global_str,"\n \n{ffff00}16 этаж\n");
					case 15: strcat(global_str,"\n \n{ffff00}14 этаж\n");
					case 20: strcat(global_str,"\n \n{ffff00}12 этаж\n");
					case 25: strcat(global_str,"\n \n{ffff00}10 этаж\n");
					case 30: strcat(global_str,"\n \n{ffff00}8 этаж\n");
					}
				}
			}
			SPD(playerid, 0, DIALOG_STYLE_LIST, "{BFBBBA}Информация о квартирах", global_str, "Закрыть","");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 280.4361, -1607.8396, 33.1133)) 
		{
			new s;
			global_str = "{ffff00}13 этаж\n";
			for(new i = 1165; i >= 1134; i--)
			{
				if(HouseInfo[i][hType] == 2)
				{
					if(GetString(HouseInfo[i][hOwner], "The State")) f(global_str, 1500, "%s{cccccc}[№ %d] Квартира свободна\n",global_str, i);
						else f(global_str, 1500, "%s{cccccc}[№ %d] Владелец: %s\n",global_str, i ,HouseInfo[i][hOwner]);
					s++;
					switch s do
					{
						case 4: strcat(global_str,"\n \n{ffff00}13 этаж\n");
						case 8: strcat(global_str,"\n \n{ffff00}12 этаж\n");
						case 12: strcat(global_str,"\n \n{ffff00}11 этаж\n");
						case 16: strcat(global_str,"\n \n{ffff00}10 этаж\n");
						case 20: strcat(global_str,"\n \n{ffff00}9 этаж\n");
						case 24: strcat(global_str,"\n \n{ffff00}8 этаж\n");
						case 28: strcat(global_str,"\n \n{ffff00}7 этаж\n");
						case 32: strcat(global_str,"\n \n{ffff00}6 этаж\n");
					}
				}
			}
			SPD(playerid, 0, DIALOG_STYLE_LIST, "{BFBBBA}Информация о квартирах", global_str, "Закрыть","");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1385.7400, -1.6083, 1000.9371) || IsPlayerInRangeOfPoint(playerid, 1.0, 1412.5050, -20.0327, 1000.9316))
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1385.7400, -1.6083, 1000.9371))
				{
					if(GetPlayerVirtualWorld(playerid) != 1) return 0;
					DeletePVar(playerid, "SelectEtageLiftd");
				}
				else
				{
					if(GetPlayerVirtualWorld(playerid) != 2) return 0;
					SetPVarInt(playerid, "SelectEtageLiftd", 1);
				}

			UpdatePlayerPos(playerid, 2628.3110, 1182.9056, 1041.5614);
			SetPlayerFacingAngle(playerid,180.00);
			SetPlayerInterior(playerid, 11);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2628.3110, 1182.9056, 1041.5614))
		{
			switch(Int_GetPlayerData(playerid, "SelectEtageLiftd"))
			{
				case 0: UpdatePlayerPos(playerid, 1385.7400, -1.6083, 1000.9371),
				SetPlayerFacingAngle(playerid,180.00),
				SetPlayerVirtualWorld(playerid, 1);
				case 1: UpdatePlayerPos(playerid, 1412.5050, -20.0327, 1000.9316),
				SetPlayerFacingAngle(playerid,90.00),
				SetPlayerVirtualWorld(playerid, 2);
			}
			SetPlayerInterior(playerid, 2);
			DeletePVar(playerid, "SelectEtageLiftd");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 2352.2026,2841.7737,1501.2664)) //Вход в трейлер 1 класса
		{
			UpdatePlayerPos(playerid, 1334.1860,1261.1288,1501.0850);
			SetPlayerFacingAngle(playerid,90.8997);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1334.1860,1261.1288,1501.0850)) //Выход из трейлера 1 класса
		{
		    if(TrailerEnter[playerid] != -1)
		    {
		        if(TrailerInfo[TrailerEnter[playerid]][tParked] == 0) return SPD(playerid, 4355, 0, "{FAAC58}Выход с трейлера", "{FFFFFF}Трейлер сейчас находится на сцепке с машиной, вы хотите {FAAC58}выпрыгнуть{FFFFFF}?", "Спрыгнуть", "Отмена");
		        new Float:tt, Float:tt2, Float:tt3;
		        GetDynamicPickupPos(TrailerInfo[TrailerEnter[playerid]][tPickup], tt, tt2, tt3);
		        UpdatePlayerPos(playerid, tt,tt2,tt3+0.2);
				SetPlayerFacingAngle(playerid,90);
				TrailerEnter[playerid] = -1;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
			UpdatePlayerPos(playerid, 2352.2026,2841.7737,1501.2664);
			SetPlayerFacingAngle(playerid,348.9421);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 2346.8303,2859.3630,1501.1156)) //Вход в трейлер 2 класса
		{
			UpdatePlayerPos(playerid, 1313.6605,1262.3265,1501.0850);
			SetPlayerFacingAngle(playerid,88.7765);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1313.6605,1262.3265,1501.0850)) //Выход из трейлера 2 класса
		{
		    if(TrailerEnter[playerid] != -1)
		    {
		        if(TrailerInfo[TrailerEnter[playerid]][tParked] == 0) return SPD(playerid, 4355, 0, "{FAAC58}Выход с трейлера", "{FFFFFF}Трейлер сейчас находится на сцепке с машиной, вы хотите {FAAC58}выпрыгнуть{FFFFFF}?", "Спрыгнуть", "Отмена");
		        new Float:tt, Float:tt2, Float:tt3;
		        GetDynamicPickupPos(TrailerInfo[TrailerEnter[playerid]][tPickup], tt, tt2, tt3);
		        UpdatePlayerPos(playerid, tt,tt2,tt3+0.2);
				SetPlayerFacingAngle(playerid,90);
				TrailerEnter[playerid] = -1;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
			UpdatePlayerPos(playerid, 2346.8303,2859.3630,1501.1156);
			SetPlayerFacingAngle(playerid,9.8090);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 2352.3911,2855.1179,1501.0981)) //Вход в трейлер 3 класса
		{
			UpdatePlayerPos(playerid, 1290.3165,1260.6007,1501.4446);
			SetPlayerFacingAngle(playerid,86.2930);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1290.3165,1260.6007,1501.4446)) //Выход из трейлера 3 класса
		{
		    if(TrailerEnter[playerid] != -1)
		    {
		        if(TrailerInfo[TrailerEnter[playerid]][tParked] == 0) return SPD(playerid, 4355, 0, "{FAAC58}Выход с трейлера", "{FFFFFF}Трейлер сейчас находится на сцепке с машиной, вы хотите {FAAC58}выпрыгнуть{FFFFFF}?", "Спрыгнуть", "Отмена");
		        new Float:tt, Float:tt2, Float:tt3;
		        GetDynamicPickupPos(TrailerInfo[TrailerEnter[playerid]][tPickup], tt, tt2, tt3);
		        UpdatePlayerPos(playerid, tt,tt2,tt3+0.2);
				SetPlayerFacingAngle(playerid,90);
                TrailerEnter[playerid] = -1;
                SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				return 1;
			}
			UpdatePlayerPos(playerid, 2352.3911,2855.1179,1501.0981);
			SetPlayerFacingAngle(playerid,256.6946);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 2354.2744,2829.4934,1500.9688)) //Покупка трейлера
		{
		    f(global_str, 100, "{BFBBBA}Выберите трейлер (Осталось: %d)", ctrailers);
			SPD(playerid, 1399, 2, global_str, "\n\
			{FFFFFF}- трейлер {FF9966}№1 (маленький)\t [$75000000]\n\
			{FFFFFF}- трейлер {FF9966}№2 (средний)\t [$100000000]\n\
			{FFFFFF}- трейлер {FF9966}№3 (большой)\t [$150000000]", "Выбрать", "Отмена");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1102.6368, -1428.4495, 15.7969))
			return SPD(playerid, 9898, DIALOG_STYLE_INPUT, "", "{FFFFFF}Привет, меня зовут {FC5C5C}Абрахам{FFFFFF}. Если тебе срочно\nпонадобились монеты, ты пришел по адресу.\nЯ продаю {FC5C5C}АЗ{FFFFFF} Coins. Цена {FC5C5C}1{FFFFFF}-ой монеты: {FC5C5C}50 000$\n\n{B72424}Введите в строку, сколько монет хотите приобрести.", "Обмен", "Отмена");

		else if(IsPlayerInDynamicArea(playerid, gAreas[arCentralRinok][0]))
		{
		//	SCMF(playerid, 0xFF0000FF, "playerid: %i(crId: %i, crOwnerId: %i) in zone (arCentralRinok) pressed Alt;", playerid, pTemp[playerid][pCentralMarketId][0], pTemp[playerid][pCentralMarketId][0] != -1 ? CentralMarket[pTemp[playerid][pCentralMarketId][0]][crOwnedId] : -1);

			for(new i; i < sizeof(CentralMarketPosition); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, CentralMarketPosition[i][0], CentralMarketPosition[i][1], CentralMarketPosition[i][2]) && IsOsnovatel(playerid))
				{
					//if(pTemp[playerid][pCentralMarketId][0] != -1 or pTemp[playerid][pCentralMarketId][0] == i)
					//	return false;
//
					if(CentralMarket[i][crStatusId])
					{
						if(CentralMarket[i][crStatusId] == 3)
							return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Владелец лавки редактирует товар, посмотреть ассортимент пока нельзя!");

						if(CentralMarket[i][crStatusId] == 2 && CentralMarket[i][crOwnedId] == playerid && pTemp[playerid][pCentralMarketId][0] == i)
							return SPD(playerid, 3040, DIALOG_STYLE_LIST, (str_f("Лавка №%i", pTemp[playerid][pCentralMarketId][0] + 1)), !"{C0C0C0}[1] {8CFF57}Управление продажей товаров\n{C0C0C0}[2] {8CFF57}Добавить товар на покупку\n{C0C0C0}[3] {8CFF57}Добавить товар на покупку (поиск по предметам)\n{C0C0C0}[4] {FFFFFF}Прекратить покупку товара\n{C0C0C0}[5] {FF6347}Прекратить аренду прилавка", !"Выбрать", !"Отмена");

						else
						{
							for(new s, bool:check; s < 300; s++)
							{
								if(CentralMarketItems[i][0][1][s] > 0)
									pTemp[playerid][pCentralMarketSelectId] = 0, check = true;

								if(CentralMarketItems[i][0][1][s] > 0 && CentralMarketItems[i][1][1][s] > 0)
									pTemp[playerid][pCentralMarketSelectId] = 0, check = true;

								if(CentralMarketItems[i][1][1][s] > 0 && CentralMarketItems[i][0][1][s] > 0)
									pTemp[playerid][pCentralMarketSelectId] = 0, check = true;

								if(CentralMarketItems[i][1][1][s] > 0 && CentralMarketItems[i][0][1][s] <= 0)
									pTemp[playerid][pCentralMarketSelectId] = 1, check = true;

								if(s == 299 && !check) 
									return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} В этом магазине нет товаров!"); 
							}
						}

						return pTemp[playerid][pCentralMarketId][1] = i, CreateShopTD(playerid, 100);
					}

					else if(pTemp[playerid][pCentralMarketId][0] == -1 && PI[playerid][pLevel] >= 3 && !Int_GetPlayerData(playerid,"DialogOpen") && !Int_GetPlayerData(playerid, "OtherInventOpen"))
						return spdList(playerid, 0, i), SPDF(playerid, 3010, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Стоимость аренды лавки: {85E94E}%i BTC{FFFFFF}\nВы действительно хотите выставить свой {85E94E}товар{FFFFFF} на продажу?", !"Принять", !"Отмена", GetPlayerADDVIP(playerid) ? 0 : 20000);

					return true;
				}
                else pTemp[playerid][pCentralMarketId][1] = -1;
			}
		}
		
		for(new i; i < OWNABLETRAILERS; i++)
		{
		    if(!IsValidTrailer(i)) continue;
		    if(TrailerInfo[i][tObj] != INVALID_STREAMER_ID) continue;
		    new Float:tt, Float:tt2, Float:tt3;
      		GetDynamicPickupPos(TrailerInfo[i][tPickup], tt, tt2, tt3);
		    if(IsPlayerInRangeOfPoint(playerid, 1.0, tt,tt2,tt3))
		    {
		        if(TrailerInfo[i][tLocks]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Дверь закрыта!");
		        EnterTrailer(playerid, i, 0);
				break;
			}
		}

		ShowSheltMiningForPlayer(playerid, HouseEntered[playerid]);
	}

	if(newkeys & 512 && IsPlayerInAnyVehicle(playerid))
		callcmd::style(playerid);

	if(newkeys == 4)
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, -2106.0000,-2418.8154,30.6250))
		    {
				new carid = GetPlayerVehicleID(playerid);
				if(GetTrailer(playerid) == -1 && !PI[playerid][pTrailer]) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}У Вас нет трейлера.");
				if(IsPlayerRegCar(playerid, carid))
				{
				    if(GetTrailer(playerid) != -1)
					{
						if(TrailerInfo[GetTrailer(playerid)][tShtraf] != 0)
						{
						    f(global_str, 200, "{FFFFFF}Ваш трейлер был эвакуирован нашими сотрудниками.\nК оплате: {FAAC58}$%d\
						    (штраф за потерю трейлера)\n{FFFFFF}Вы хотите забрать ваш трейлер?", TrailerInfo[GetTrailer(playerid)][tShtraf]);
						    SPD(playerid, 1401, 0, "Гараж", global_str, "Забрать", "Закрыть");
						}
						else SPD(playerid, 1401, 0, "Гараж", "{FFFFFF}Вы хотите забрать свой новенький трейлер?", "Забрать", "Закрыть");
						return 1;
					}
					SPD(playerid, 1401, 0, "Гараж", "{FFFFFF}Вы хотите забрать свой новенький трейлер?", "Забрать", "Закрыть");
				}
				else SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы должны находиться в личном транспорте!");
			}
		}
	}

	if(newkeys == 16)
	{
		if(IsACarInv(ItemsInfo[ AksSlot[playerid][0][2] ][itemModel]) && GetVehicleModelEx(GetPlayerVehicleID(playerid)) == ItemsInfo[ AksSlot[playerid][0][2] ][itemModel])
			ResetRC(playerid);
	    
		else if(SharInfo[playerid][sharStatus])
		{
		    new Float:X, Float:Y, Float:Z;
		    GetVehiclePos(SharInfo[playerid][sharVehicle], X, Y, Z);
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z))
				PutPlayerInVehicle(playerid,SharInfo[playerid][sharVehicle],0);
		}
	}

	if(newkeys == PRESS_ALT)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.0, -1515.8018,2722.2019,1500.9674))
        {
			SetPlayerInterior(playerid, 23);
			SetPlayerVirtualWorld(playerid, 1);
			UpdatePlayerPos(playerid, 2786.0383,735.7945,1500.1187);
		}
    }

    if(newkeys == PRESS_ALT)
	{
    	if(IsPlayerInRangeOfPoint(playerid, 1.5, -2082.9087, 1343.1514, 7.0990))
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "", "{FFFFFF}Заработок на нефтебазе {FFF700}SAN-FIERRO{FFFFFF}\n\nЭто подработка благодаря которой вы можете заработать\nочень много денег. Суть системы заключается в перепродаже\nнефти государственным организациям. Нефть можно приобрести\nпо низкой цене на нефтевышках(бизнес), которыми владеют\nигроки (можно найти с помощью /{FFF700}oillist{FFFFFF} ). У каждой вышки\nесть свои запасы и цена, узнать её можно только приехав к ней\nили узнать у владельца по телефону. Для начала своего дела\nнеобходимо приобрести({FFF700}рекомендуется{FFFFFF}) или арендовать яхту.\n(Чем больше размером яхта - тем больше нефти в неё помещается)\nЗатем отправиться на одну из нефтевышек и закупить нужное\nвам количество бочек. После покупки бочек, необходимо их\nсдать на нефтебазу СФ ({FFF700}/gps - Важные места - Скупка нефти{FFFFFF})\n\n{FF1E00}Пиратство!{FFFFFF}\nПредусмотрена возможность воровать бочки с вашей яхты.\nПо пути на нефтебазу любой из игроков может вас ограбить,\nдля этого ему потребуется перетащить все бочки с вашей\nлодки - на свою. Выгода пиратов заключается в том что\nони не будут тратить собственные деньги на закупку товара\nа сразу будут продавать ваши бочки и получать деньги себе!", "Понял", "");
		
		else if(Int_GetPlayerData(playerid, "NeftInPlayer") && IsPlayerInRangeOfPoint(playerid, 1.0, -2072.3931, 1363.2417, 7.1016))
		{
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно продали бочку с 200.0 литров нефти и получили $36000");
			GiveMoney(playerid, 36000);
			DeletePVar(playerid, "NeftInPlayer");
			RemovePlayerAttachedObject(playerid, 7);
			return true;
		}
	}

 //   if(newkeys & KEY_SPRINT && newkeys & KEY_JUMP && !IsPlayerInAnyVehicle(playerid) && !PlayerLie{playerid}) ApplyAnimationEx(playerid, !"PED", "GETUP_FRONT", 4.0, 0, 1, 1, 0, 0, 1);
	if(newkeys == KEY_NO)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, 14.2867,1811.2552,17.7232))
		{
			f(global_str, 700, "\
			{FFFFFF}Boxing\t{FFFFFF}[ %s{FFFFFF} ]\n\
			{FFFFFF}Kungfu\t{FFFFFF}[ %s{FFFFFF} ]\n\
			{FFFFFF}Kneehead\t{FFFFFF}[ %s{FFFFFF} ]\n\
			{FFFFFF}Grabkick\t{FFFFFF}[ {9ACD32}изучен{FFFFFF} ]\n\
			{FFFFFF}Elbow\t{FFFFFF}[ %s{FFFFFF} ]", 
            PI[playerid][pSkillLevel] > 5000 ? "{9ACD32}изучен" : "{FF6347}не изучен",
			PI[playerid][pSkillLevel] > 10000 ? "{9ACD32}изучен" : "{FF6347}не изучен",
			PI[playerid][pSkillLevel] > 20000 ? "{9ACD32}изучен" : "{FF6347}не изучен",
			PI[playerid][pSkillLevel] > 300000 ? "{9ACD32}изучен" : "{FF6347}не изучен");
            SPD(playerid, 9941, DIALOG_STYLE_LIST, "Выберите стиль соревновательного боя", global_str, !"Выбрать", !"Закрыть");
	  	}
	  	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2666.7024, 792.7377, 1500.9688))
	  		return SPD(playerid, 15276, DIALOG_STYLE_LIST, !"Выберите операцию", !"Продать BTC\nКупить BTC", !"Выбрать", !"Закрыть");
	}

	if(newkeys == PRESS_ALT)
	{
		if(InfoBiz[playerid] != -1)
		{
			new Float:accessoryKioskPosition_data[][] = { {2214.7620, -1692.8035, 13.7870} }, i = GetKioskBussinesID(InfoBiz[playerid]);

			if(IsPlayerInRangeOfPoint(playerid, 1.5, accessoryKioskPosition_data[i][0], accessoryKioskPosition_data[i][1], accessoryKioskPosition_data[i][2]))
				OtherInvOpen(playerid, 5, 0.0, 0.0, InfoBiz[playerid]);
		}
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1090.0826,1525.7831,1716.0868)) CreateShopTD(playerid, 4); // хз
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 665.9795,-567.7969,1700.7394)) CreateShopTD(playerid, 1);
	}
	if(newkeys == KEY_NO)
	{
    	if(!(InfoHouse[playerid] == -1))
        {
			if(Int_GetPlayerData(playerid, "BuyData") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
            new house = InfoHouse[playerid];
            if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[house][hEnter_X],HouseInfo[house][hEnter_Y],HouseInfo[house][hEnter_Z]))
	    	{
	    		if(PI[playerid][pLevel] < 3) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Участвовать в ловле имущества можно с 3 уровня!");

           	 	if(IsValidPassport(playerid))
		    	{
			        if(GetPlayerHouses(playerid))
			        {
				        if(GetString(HouseInfo[house][hOwner],"The State"))
			     	    {
							if(GetHouseCost(playerid, house)) return function_InteractionProperty(playerid, 1);
			     	        else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		     	        }
		     	        else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот дом уже кем то куплен!");
					}
					else SCM(playerid, COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше домов! Покупайте улучшение 'Больше недвижимости' чтобы иметь до 3-х домов!");
				}
     	        else SCM(playerid, COLOR_GREY , !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");
     	    }
     	    else InfoHouse[playerid] = -1;
			Int_SetPlayerData(playerid, "BuyData", Global_Time + 3);
		}
	}
	if(newkeys == KEY_NO)
	{
 		if(!(InfoBiz[playerid] == -1))
   		{
			new biz = InfoBiz[playerid];

			if(PI[playerid][pLevel] < 3) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Участвовать в ловле имущества можно с 3 уровня!");
			else if(Int_GetPlayerData(playerid, "BuyData") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
            if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[biz][bEnter][0],BizData[biz][bEnter][1],BizData[biz][bEnter][2]))
	    	{
				if(!IsValidPassport(playerid)) return SCM(playerid, COLOR_GREY , !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");
	        	else if(GetPlayerBizes(playerid))
	        	{
			        if(GetString(BizData[biz][bOwner],"The State"))
		     	    {
		 				new money;
		 				switch BizData[biz][bCostType] do
		 				{
		 					case 1: money = PI[playerid][pVirMoney];
		 					default: money = PI[playerid][pMoney];
		 				}
						if(money >= BizData[biz][bCost]) function_InteractionProperty(playerid, 1);
		     	        else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	     	        }
	     	        else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот бизнес уже кем то куплен!");
     	        }
				else SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
     	    }
     	    else InfoBiz[playerid] = -1;
			Int_SetPlayerData(playerid, "BuyData", Global_Time + 3);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.5, -2683.9232, 807.4161, 1500.9094) || IsPlayerInRangeOfPoint(playerid, 2.5, -2676.5600, 807.4161, 1500.9094) || IsPlayerInRangeOfPoint(playerid, 2.5, -2669.0400, 807.4161, 1500.9094) || IsPlayerInRangeOfPoint(playerid, 2.5, -2666.4729, 805.8691, 1500.9094) || IsPlayerInRangeOfPoint(playerid, 2.5, -2666.4665, 799.2879, 1500.9094) || IsPlayerInRangeOfPoint(playerid, 2.0, 495.2409,1305.6490,774.4839) || IsPlayerInRangeOfPoint(playerid, 2.0, 495.2459,1307.4744,774.4839) || IsPlayerInRangeOfPoint(playerid, 2.0, 495.2454,1309.2797,774.4839) || IsPlayerInRangeOfPoint(playerid, 2.0, 495.2461,1311.0074,774.4839) || IsPlayerInRangeOfPoint(playerid, 2.0, 495.2460,1312.8225,774.4839) || IsPlayerInRangeOfPoint(playerid, 2.0, 951.8005, 2458.6746, 1601.9771) || IsPlayerInRangeOfPoint(playerid, 2.0, 954.9710,2463.5288,1601.9771) || IsPlayerInRangeOfPoint(playerid, 2.5, -14.5615,1882.9138,17.6982) || IsPlayerInRangeOfPoint(playerid, 2.0, 946.6893,2456.3723,1601.9771)) return ShowBankMenu(playerid);
   		else
		{
			if(BizEntered[playerid] != -1 && BizData[BizEntered[playerid]][bState] == B_BUY)
				if(BizData[BizEntered[playerid]][bState] == B_BUY)
					if(IsPlayerInRangeOfPoint(playerid, 2.0, 2580.1340,1424.8770,1800.9688))
						SPDF(playerid, 103, DIALOG_STYLE_LIST, !"", "{42B02C}-{FFFFFF} Купить\n{42B02C}-{FFFFFF} Продать\n{42B02C}- {FFFFFF}Оплата: %s", !"Выбор", !"Отмена", PI[playerid][pVID] ? ("{E5D02D}Кредиткой") : ("{E5D02D}Наличкой"));
		}
    }

	if(!(pTemp[playerid][kladID] == -1))
	{	
		new i = pTemp[playerid][kladID];
		
		if(pTemp[playerid][kladKey] == newkeys && IsPlayerInRangeOfPoint(playerid, 2.0, KladInfo[i][kladX], KladInfo[i][kladY], KladInfo[i][kladZ]))
		{
			if(!KladInfo[pTemp[playerid][kladID]][kladOpen]) 
				SendkladProgress(playerid, pTemp[playerid][kladPercent] + 1, random(6));
			
			else
				pTemp[playerid][kladID] = -1,
				ClearAnimationsEx(playerid);
		}
	}
			
	if(newkeys == PRESS_ALT)
	{
		foreach(Klad, i)
		{
			if(KladInfo[i][kladStatus] && IsPlayerInRangeOfPoint(playerid, 2.0, KladInfo[i][kladX], KladInfo[i][kladY], KladInfo[i][kladZ]))
			{
				if(KladInfo[i][kladOpen] == true)
					return pTemp[playerid][kladID] = i, SPDF(playerid, 3736, DIALOG_STYLE_INPUT, !"{FFFFFF}Взлом | {DC4747}Клад", "{FFFFFF}\n\nДля того, чтобы взломать замок,\nвам необходимо ответить на вопрос-загадку!\n\nВопрос:\n%s\n\nВведите ответ в пустое контекстное поле:\n\n", !"»", !"x", captcha_klad[KladInfo[i][kladCaptcha]][0]);
		
				else if(GetPlayerWeaponEx(playerid) == 6)
					pTemp[playerid][kladID] = i, SPD(playerid, 3735, DIALOG_STYLE_MSGBOX, !"{FFFFFF}Выкопать | {DC4747}Клад", !"{FFFFFF}\n\nВы действительно желаете выкопать данный клад?\n\n", !"»", !"x");
				
				else 
					SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас нету лопаты в руках");
				
				return true;
			}
		}
		
		for(new i; i < MAX_OTELS; i++)
		{
			if(i < 15 && ContInfo[i][contStatus] && IsPlayerInRangeOfPoint(playerid, 1.0, ContInfo[i][contPos][0], ContInfo[i][contPos][1], ContInfo[i][contPos][2]))
			{
				ContInfo[i][contStatus] = false;
				DestroyDynamicObject(ContInfo[i][contObject]);
				ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0, 1);
				new id = random(13), 
					mas_cont[13] = {1080, 549, 770, 772, 773, 774, 775, 776, 7447, 7318, 7322, 798, 731},
					mas_cont_count[13] = {400, 30, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60};

				f (global_str, 100, "%s ++", ItemsInfo[mas_cont[id]][itemEng_name]);
				GameTextForPlayer(playerid, global_str, 1000, 3);
				AddItem(playerid, mas_cont[id], random(mas_cont_count[id]));
				break;
			}
		
			else if(i < MAX_OTELS && IsPlayerInRangeOfPoint(playerid, 1.0, OtelInfo[i][otEnter_X], OtelInfo[i][otEnter_Y], OtelInfo[i][otEnter_Z]))
			{
				switch OtelInfo[i][otLevel] do
				{
					case 3: UpdatePlayerPos(playerid, -1028.2850,-608.9657,1500.9850), SetPlayerFacingAngle(playerid, 182.9890); 
					case 4: UpdatePlayerPos(playerid, 2014.5282,2671.0544,1500.9493), SetPlayerFacingAngle(playerid, 269.7830);
					case 5: UpdatePlayerPos(playerid, 1806.4370,2652.8674,1500.9714), SetPlayerFacingAngle(playerid, 259.7562);
				}
				SetPlayerInterior(playerid, 1);
				SetPlayerVirtualWorld(playerid, OtelInfo[i][otBusiness]);
				InfoOtel[playerid] = i;
			}

			else if(i < sizeof(CarSellMarket) && IsPlayerInRangeOfPoint(playerid, 1.0, CarSellMarket[i][data_Position][0], CarSellMarket[i][data_Position][1], CarSellMarket[i][data_Position][2]))
				return spdList(playerid, 0, i), ShowDonateDialog(playerid, 6, CarSellMarket[i][data_ID]);
		}
	}

	if(newkeys == PRESS_ALT)
	{
	    ///9d3b34
		if(IsPlayerInRangeOfPoint(playerid, 1, 1803.6194,2652.5393,1500.9967) || IsPlayerInRangeOfPoint(playerid, 1, 2011.9275,2671.0142,1500.9493) || IsPlayerInRangeOfPoint(playerid, 1, -1028.3639,-606.2128,1500.9709))
		{
			new id = InfoOtel[playerid];
			
			UpdatePlayerPos(playerid, OtelInfo[id][otEnter_X], OtelInfo[id][otEnter_Y], OtelInfo[id][otEnter_Z]);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			
			InfoOtel[playerid] = -1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1, 2298.1599, 2678.7400, 1500.9688) || IsPlayerInRangeOfPoint(playerid, 1, 2201.0801,2737.7900,1500.9659) || IsPlayerInRangeOfPoint(playerid, 1, -1162.6600,-638.6580,1500.9688))
			ExitOtelRoom(playerid, InfoOtel[playerid]); 
			
		else if(IsPlayerInRangeOfPoint(playerid, 1, 1810.0848, 2652.6111, 1500.9688) || IsPlayerInRangeOfPoint(playerid, 1, 2020.6329, 2672.6775, 1500.9493) || IsPlayerInRangeOfPoint(playerid, 1, -1029.7727, -641.8089, 1500.9688))
		{
			new id = InfoOtel[playerid];
			
			global_str = "";
			for(new i, count; i < ROOMOTELS; i++)
			{
				if(RoomOtel[i][otRoomOwnerOtel] == id)
					f ( global_str, 1024, "%s%d.   Номер %s\n", global_str, count + 1, !(RoomOtel[i][otRoomOwner] == -1) ? "{FF0000}[Занят]":"{33AA33}[Свободен]"),
					spdList(playerid, count, i),
					count++;
			}
				
			SPD(playerid, 267, DIALOG_STYLE_LIST, !"{FFFFFF}Отель {33CCFF}[Список номеров]", global_str, !"Выбор", !"Отмена");
		}
		else if(!(InfoOtel[playerid] == -1) && (IsPlayerInRangeOfPoint(playerid, 50.0, 1827.1152,2652.5200,1500.9688) || IsPlayerInRangeOfPoint(playerid, 50.0, -1028.0155,-645.3092,1500.9688) || IsPlayerInRangeOfPoint(playerid, 50.0, 2024.0829,2678.9797,1506.2704)))
			OtelRoomAction(playerid, InfoOtel[playerid]);
			
	    else if(IsPlayerInRangeOfPoint(playerid, 2, -1746.7738,156.5982,3.5547))
	    {
			f(global_str, 400, "\n\n{FFFFFF}Привет, как к тебе обращаться? Очень приятно, %s.\nМеня зовут Магнус, как и эти контейнеры, я родом из Германии.\nЯ постоянно торчу тут и работаю в одиночку.\nК сожалению, я очень устал, мне все это надоело.\nи, вообще, в языке я вашем не силен.\nДавай я по-быстрому тебе расскажу все и буду дальше отдыхать.\n\n", PN(playerid));
	        SPD(playerid, 8383, 0, "{FFFFFF}Магнус ( Менеджер ) | {9d3b34}Контейнеры", global_str, "»", "X");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 60.0, -1729.0693,141.6826,3.5692))
		{
			for(new id; id < MAX_CONTAINERS; id++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
				{
					if(ContainerInfo[id][cStatus] > 1) return 1;
					static header[80], auction[200]; header[0] = EOS; auction[0] = EOS; new valute[4],caseid;
					global_str = "{FFFFFF}Наименование\t{FFFFFF}Параметр\n";
					f(header, 80,"{E98E52}%s: {FFFFFF}({E98E52}%s{FFFEFF}) | {BE2D2D}Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
					if(!ContainerInfo[id][cState]) valute = "$";
					else valute = "AZ";
					switch(ContainerInfo[id][cStatus])
					{
						case 1 : caseid = 4446, f(auction, 200,"Аукцион завершен: {FFFFFF}({E98E52}%s{FFFFFF}):\n\
						{FFFFFF}- Владелец\t{E98E52}%s\n\
						{FFFFFF}- Купил за\t%s {E98E52}%d",Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valute,ContainerInfo[id][cCash]);
						case 0 : caseid = 4444, f(auction, 200,"Аукцион: {FFFFFF}({E98E52}%s{FFFFFF}):\n\
						{FFFFFF}- Последняя ставка\t{E98E52}%s\n\
						{FFFFFF}- Последняя сумма\t%s {E98E52}%d",Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valute,ContainerInfo[id][cCash]);
					}
					f(global_str, 512,"\
					%sПосмотреть возможный выигрыш\t[ {E98E52}Посмотреть{FFFFFF} ]\n\
					Класс\t%s ( {E98E52}%s{FFFFFF} )\n\
					Начальная цена:\t%s {E98E52}%d\n\
					%s\n\
					{73B461}%s",
					global_str,ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],valute,ContainerInfo[id][cMinStavka],
					auction,(ContainerInfo[id][cStatus]) ? ("Открыть контейнер") : ("Участвовать в аукционе"));
					SPD(playerid,caseid,DIALOG_STYLE_TABLIST_HEADERS,header,global_str,"»","x");
					DialogListID[playerid] = id;
					return true;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cPrizeX],ContainerInfo[id][cPrizeY],ContainerInfo[id][cPrizeZ]))
				{
					if(ContainerInfo[id][cStatus] == 2 && GetString(ContainerInfo[id][cOwned],PN(playerid))) return ShowContMenu(playerid, id);
				}
			}
		}
	}

	if(newkeys == KEY_ACCELERATE)
	{
		if(addskate[playerid] == 1 && !IsPlayerInWater(playerid))
		{
		    if(IsPlayerInAnyVehicle(playerid)) return 0;
		    if(Int_GetPlayerData(playerid, !"skatewait") > Global_Time) return 1;
		    if(GetPlayerAnimationIndex(playerid) == 1541 || GetPlayerAnimationIndex(playerid) == 1540 || GetPlayerAnimationIndex(playerid) == 1538 || GetPlayerAnimationIndex(playerid) == 1062 || GetPlayerAnimationIndex(playerid) == 1539 || GetPlayerAnimationIndex(playerid) == 1129 || GetPlayerAnimationIndex(playerid) == 1250 || GetPlayerAnimationIndex(playerid) == 1156 ||  GetPlayerAnimationIndex(playerid) == 1065 || GetPlayerAnimationIndex(playerid) == 1063 || GetPlayerAnimationIndex(playerid) == 1061 || GetPlayerAnimationIndex(playerid) == 1064 || GetPlayerAnimationIndex(playerid) == 1133) return 0;
			if(GetPlayerInterior(playerid) != 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Нельзя использовать в интерьере!");
			new Float:X, Float:Y, Float:Z, Float:A;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			PI[playerid][plveh] = J_AddStaticVehicleEx(15882, X, Y, Z, A, random(127), random(127));
			PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
			addskate[playerid] = 2;
			PlayerPlaySound(playerid, 1131, 0, 0, 0);
			return RemovePlayerAttachedObject(playerid, 6);
		}
	}
	
	//БумБокс
	if (newkeys & KEY_WALK)
		if(boombox[playerid] != 0)
			if(IsPlayerInRangeOfPoint(playerid, 2.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);

	if(oldkeys == KEY_SPRINT)
	{
		if(Int_GetPlayerData(playerid, "TimerDance"))
		{
			SPD(playerid, 3768, 0, "Остановка тренировки","{FFFFFF}Вы действительно хотите завершить тренировку раньше времени?","Завершить","Нет");
		}
	    if(TimerShaxta[playerid] == 1)
	    {
	        ClearAnimationsEx(playerid);
	        TimerShaxta[playerid] = 0;
			KillTimer(timerwaxt[playerid]);
		}
		if(ferma[playerid] == 1)
	    {
	        ClearAnimationsEx(playerid);
	        ferma[playerid] = 0;
			KillTimer(timerferma[playerid]);
		}
	}
    if(newkeys == PRESS_ALT && !IsPlayerInAnyVehicle(playerid))
	{
    	for(new i; i < MAX_MINE_OBJECT; i++)
        {
			if(IsPlayerInRangeOfPoint(playerid, 1.2, MineInfo[i][minePosX], MineInfo[i][minePosY], MineInfo[i][minePosZ]))
            {
				if(AksSlot[playerid][0][5] != 3528 && !OBJECT_SLEGAN[playerid])
					return SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы добыть полезное ископаемое, нужно купить у Лари инструмент (/gps - Разное - Шахта)");

				if(MineInfo[i][mineStatus] == false)
					continue;

                if(TimerShaxta[playerid] == 1) return 1;
				TimerShaxta[playerid] = 1;
		        ApplyAnimationEx(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
				timerwaxt[playerid] = CallTimeOutFunction("ProgressWaxta", AksSlot[playerid][0][5] == 3528 ? 3500 : 7000, 0, "d", playerid);
		        return 1;
            }
		}
	}

	if(newkeys == KEY_YES)
    {
        if(!(InventoryPage[playerid] == E_INVENTORY_TYPE_NONE)) return false;
        if(PI[playerid][pCalling] != -1) return SelectTextDraw(playerid, -16776961);
		
		if(!(pTemp[playerid][kladID] == -1))
		{
			new id = pTemp[playerid][kladID];
			if(KladInfo[id][kladStatus] && IsPlayerInRangeOfPoint(playerid, 2.0, KladInfo[id][kladX], KladInfo[id][kladY], KladInfo[id][kladZ]))
				return false;
		}

		callcmd::invent(playerid);

		if(Int_GetPlayerData(playerid, !"CraftStatus"))
			ClearAnimationsEx(playerid),
			KillTimer(besttimer[playerid]),
			DeletePVar(playerid, !"CraftStatus"),
			SCM(playerid, COLOR_RED, !"Вы прервали процесс создания предмета!"),
			TogglePlayerControllable(playerid, true);
	}

	if(PRESSED(KEY_SPRINT)) pEngine{playerid} = 1;
    else if(holding(KEY_SPRINT)) pEngine{playerid} = 0;

	if(newkeys == KEY_NO)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    for(new i; i < MAX_AUTO_BAZAR; i++)
		    {
		        if(!(autoBazarInfo[i][autoBazarCarID] == INVALID_VEHICLE_ID) && IsPlayerInRangeOfPoint(playerid, 2.0, autoBazarInfo[i][autoBazarBuyPosX], autoBazarInfo[i][autoBazarBuyPosY], autoBazarInfo[i][autoBazarBuyPosZ]))
		        {
					if(autoBazarInfo[i][autoBazarplayerid] == playerid)
						return false;

		            if(autoBazarInfo[i][autoBazarplayerid] == INVALID_PLAYER_ID)
						return false;

					new Float:health;
					GetVehicleHealth(autoBazarInfo[i][autoBazarCarID], health);

		            pTemp[playerid][pSellCar] = i;

					if(!GetString(VehicleInfo[autoBazarInfo[i][autoBazarCarID]][vNumber], "Arizona ST"))
						f(global_str, 64, "{A63737}%s{FFFFFF}", VehicleInfo[autoBazarInfo[i][autoBazarCarID]][vNumber]);

					else global_str = "{991717}Без номеров [X2 налог]{FFFFFF}";

					if(IsAPlane(autoBazarInfo[i][autoBazarCarID]))
						f(global_str, 444,"{FFFFFF}Транспорт: {73B461}%s[%d] {FFFFFF}Комплектация: %s\n{FFFFFF}Владелец: {73B461}%s\n{FFFFFF}Посредник: {73B461}%s\n{FFFFFF}Налог: {73B461}%d {FFFFFF}/ 40 000\n{FFFFFF}Штраф: {73B461}%d {FFFFFF}/ 60 000\n\nНомер автомобиля: %s{FFFFFF}\nЗдоровье автомобиля: {F57449}%.1f/1500.0{FFFFFF}\n\n{73B461}Стоимость транспорта составляет: %d BTC", GetVehicleName(autoBazarInfo[i][autoBazarCarID]), autoBazarInfo[i][autoBazarCarID],VehicleInfo[autoBazarInfo[i][autoBazarCarID]][vModification] ? ("{e54c4c}TT") : ("{96e54c}Сток"),PN(autoBazarInfo[i][autoBazarplayerid]), CarInfo[autoBazarInfo[i][autoBazarCarID]][cKeyer], CarInfo[autoBazarInfo[i][autoBazarCarID]][cShtrafer], CarInfo[autoBazarInfo[i][autoBazarCarID]][cShtraf], global_str, health, autoBazarInfo[i][autoBazarCost]);

					else
						f(global_str, 444,"{FFFFFF}Транспорт: {73B461}%s[%d] {FFFFFF}Комплектация: %s\n{FFFFFF}Владелец: {73B461}%s\n{FFFFFF}Посредник: {73B461}%s\n{FFFFFF}Пробег: {73B461}%.0f км.\n{FFFFFF}Налог: {73B461}%d {FFFFFF}/ 40 000\n{FFFFFF}Штраф: {73B461}%d {FFFFFF}/ 60 000\n\nНомер автомобиля: %s{FFFFFF}\nЗдоровье автомобиля: {F57449}%.1f/1500.0{FFFFFF}\n\n{73B461}Стоимость транспорта составляет: %d BTC", GetVehicleName(autoBazarInfo[i][autoBazarCarID]), autoBazarInfo[i][autoBazarCarID],VehicleInfo[autoBazarInfo[i][autoBazarCarID]][vModification] ? ("{e54c4c}TT") : ("{96e54c}Сток"),PN(autoBazarInfo[i][autoBazarplayerid]), CarInfo[autoBazarInfo[i][autoBazarCarID]][cKeyer], CarInfo[autoBazarInfo[i][autoBazarCarID]][cMilage], CarInfo[autoBazarInfo[i][autoBazarCarID]][cShtrafer], CarInfo[autoBazarInfo[i][autoBazarCarID]][cShtraf], global_str, health, autoBazarInfo[i][autoBazarCost]);

					return SPD(playerid, 2221, DIALOG_STYLE_MSGBOX, !"Технический паспорт транспорта", global_str, !"Купить", !"Отмена");
		        }
		    }
		}
	}
	if(newkeys == PRESS_ALT)
	{
		for(new id; id < sizeof(FermaInfo); id++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, FermaInfo[id][farmPos][0], FermaInfo[id][farmPos][1], FermaInfo[id][farmPos][2]) && PlayerJob[playerid] == 17 && InJob[playerid] == 1 && FermaInfo[id][farmStatus])
            {
				if(Int_GetPlayerData(playerid, "FermaJob"))
					return false;

				ApplyAnimationEx(playerid,"BOMBER","BOM_Plant",4.1,1,1,1,1,0,1);
				SetPVarInt(playerid, "FermaJob", 1);
				new time = 4000 + random (2000);
				SetPlayerChatBubble(playerid, "Собирает сено", 0xfac769FF, 5.0, time);
				return CallTimeOutFunction("FermaJob", time, false, "dd", playerid, id);
			}
		}
	}

	if(newkeys == PRESS_ALT && !IsPlayerInAnyVehicle(playerid))
	{
		for(new i; i < MAX_COTTON_OBJECT; i++)
        {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, CottonInfo[i][cottonPosX], CottonInfo[i][cottonPosY], CottonInfo[i][cottonPosZ]))
            {
				if(AksSlot[playerid][0][5] != 3529 && !OBJECT_RAKE[playerid]) 
					return SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы добыть урожай, нужно купить у Эмилио инструмент (/gps - Разное - Ферма)");

				if(CottonInfo[i][cottonStatusTimer]) return 1;
				if(CottonInfo[i][cottonStatus] == false) continue;
				if(Int_GetPlayerData(playerid,"ProgressFerma")) return 1;
	            CottonInfo[i][cottonScore] --;

				//
				ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
				SetPVarInt(playerid,"ProgressFerma", 594);
				CallTimeOutFunction("ProgressFerma", AksSlot[playerid][0][5] == 3529 ? 1150 : 2300, false, "i", playerid);
				//
				f(global_str, 85, "Хлопок (%d из 10)\n{73B461}Для сбора урожая", CottonInfo[i][cottonScore]);
	            UpdateDynamic3DTextLabelText(CottonInfo[i][cottonLabel], -1, global_str);

	            if(!CottonInfo[i][cottonScore])
	            {
					CottonInfo[i][cottonStatus] = false;
		            CottonInfo[i][cottonSecund] = 180;
		            DestroyDynamic3DTextLabel(CottonInfo[i][cottonLabel]);
		            DestroyDynamicObject(CottonInfo[i][cottonObject]);
		            return 1;
				}
				return 1;
            }
		}
		for(new i; i < MAX_LINEN_OBJECT; i++)
        {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, LinenInfo[i][linenPosX], LinenInfo[i][linenPosY], LinenInfo[i][linenPosZ]))
            {
				if(AksSlot[playerid][0][5] != 3529 && !OBJECT_RAKE[playerid]) 
					return SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы добыть урожай, нужно купить у Эмилио инструмент (/gps - Разное - Ферма)");

				if(LinenInfo[i][linenStatusTimer]) return 1;
				if(LinenInfo[i][linenStatus] == false) continue;
				if(Int_GetPlayerData(playerid,"ProgressFerma")) return 1;
	            LinenInfo[i][linenScore] --;

				//
				ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
				SetPVarInt(playerid,"ProgressFerma", 595);
				CallTimeOutFunction("ProgressFerma", AksSlot[playerid][0][5] == 3529 ? 1150 : 2300, false, "i", playerid);
				//
				f(global_str, 85, "Лён (%d из 10)\n{73B461}Для сбора урожая", LinenInfo[i][linenScore]);
	            UpdateDynamic3DTextLabelText(LinenInfo[i][linenLabel], -1, global_str);

	            if(!LinenInfo[i][linenScore])
	            {
					LinenInfo[i][linenStatus] = false;
		            LinenInfo[i][linenSecund] = 180;
		            DestroyDynamic3DTextLabel(LinenInfo[i][linenLabel]);
		            DestroyDynamicObject(LinenInfo[i][linenObject]);
		            return 1;
				}
				return 1;
            }
		}
	}

    if(PI[playerid][pBeg][1])
		ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_W_loop", 4.1, 0, 1, 1, 1, 1);
   
    //if(newkeys & 2)
	if(PRESSED(1024) && PI[playerid][pWalkingInfo][0] && !AnimPlayed{playerid} && GetPlayerSpeed(playerid) > 0)
	{
		switch(PI[playerid][pWalkingInfo][0]) //
		{
			case 1: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1); // норм
			case 2: ApplyAnimation(playerid,"PED","HIT_walk",4.1,1,1,1,1,1); // норм 2
			case 3: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1); // ганг
			case 4: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1); //ганг 2
			case 5: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1); // old
			case 6: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1); // old2
			case 7: ApplyAnimation(playerid,"PED","MuscleWalk",4.1,1,1,1,1,1); // серьёзная
			case 8: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1); // Женская
			case 9: ApplyAnimation(playerid,"PED","woman_run",4.1,1,1,1,1,1); // женская 2
			case 10: ApplyAnimation(playerid,"MUSCULAR","MuscleWalk",4.1,1,1,1,1,1); // На пафосе
			case 11: ApplyAnimation(playerid,"MUSCULAR","Musclewalk_Csaw",4.1,1,1,1,1,1); // на пафосе 2
			case 12: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1); // с выпрям рукой
		}
	}

	if(RELEASED(KEY_WALK) && !AnimPlayed{playerid} && PI[playerid][pWalkingInfo][0]) ClearAnimationsEx(playerid);
	//
	if(SharInfo[playerid][sharProgress] > 0 && SharInfo[playerid][sharVehicle] == INVALID_VEHICLE_ID && SharInfo[playerid][sharKey] > 0)
	{
		if(PRESSED(1024)) SharKey(playerid, 1);
		if(PRESSED(262144)) SharKey(playerid, 2);
		if(PRESSED(KEY_SPRINT)) SharKey(playerid, 3);
	}

	if(PRESSED(262144))
	{
		if(SharInfo[playerid][sharStatus] == true && SharInfo[playerid][sharProgress] == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, SharInfo[playerid][sharPos][0],SharInfo[playerid][sharPos][1],SharInfo[playerid][sharPos][2]))
			{
				SharInfo[playerid][sharProgress] = 6;
				SharInfo[playerid][sharKey] = 1+random(3);
				SharMenuShow(playerid);
			}
		}
	}
	if(PRESSED(262144) || PRESSED(KEY_NO))
	{
		if(!IsPlayerInAnyVehicle(playerid)) //LiftInfo[][liftID]
		{
			for(new i; i < sizeof(LiftInfo); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, LiftInfo[i][liftTextPosX], LiftInfo[i][liftTextPosY], LiftInfo[i][liftTextPosZ]) && GetPlayerInterior(playerid) == LiftInfo[i][liftInterior] &&  GetPlayerVirtualWorld(playerid) == LiftInfo[i][liftWorld])
				{
					new id = LiftInfo[i][liftID];
					if(LiftMoving[id] || LiftNext[id] != -1) return SCM(playerid, COLOR_GREY, "Лифт сейчас в движении, попробуйте позже.");
					LiftMoving[id] = 1;
					LiftPosition[id] = i;
					for(new q; q < sizeof(LiftInfo); q++) UpdateLiftText(q,1,i,id);
					CallTimeOutFunction("MoveDoorLift",5000+random(1500),0,"d",i);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.0, LiftInfo[i][liftPosX], LiftInfo[i][liftPosY], LiftInfo[i][liftPosZ]) && GetPlayerInterior(playerid) == LiftInfo[i][liftInterior] &&  GetPlayerVirtualWorld(playerid) == LiftInfo[i][liftWorld])
				{
					new id = LiftInfo[i][liftID];
					if(LiftPosition[id] != i) return 0;
					if(LiftMoving[id]-Global_Time > 3 || !LiftMoving[id]) return SCM(playerid, COLOR_OLDRED, "Лифт только приехал, попробуйте позже.");
					global_str = "";
					SetPVarInt(playerid, "SelectEtageLift", id);
					switch(id)
					{
						case 0:
						{
							for(new t = 8; t >= 0; t--)
							{
								f(global_str, 200, "%s%s\t%s\t%s\n", global_str, LiftInfo[t][liftName],
								(LiftPosition[id] == t) ? ("{cccccc}текущий этаж"):(""), (LiftNext[id] == t) ? ("{ffff00}выбран следующим"):(""));
							}
						}
						case 1:
						{
							for(new t = sizeof(LiftInfo)-1; t >= 9; t--)
							{
								f(global_str, 200, "%s%s\t%s\t%s\n", global_str, LiftInfo[t][liftName],
								(LiftPosition[id] == t) ? ("{cccccc}текущий этаж"):(""), (LiftNext[id] == t) ? ("{ffff00}выбран следующим"):(""));
							}
						}
					}
					return SPD(playerid, 15025, DIALOG_STYLE_TABLIST, "{BFBBBA}Выберите этаж", global_str, "Выбрать", "Закрыть");
				}
				else if(i < 17)
				{
					for(new s; s < 2; s++)
					{
						if(IsPlayerInRangeOfPoint(playerid, 1.5, NeftPos[s][i][0], NeftPos[s][i][1], NeftPos[s][i][2]))
						{
							SetPVarInt(playerid, "NeftBizID", NeftBizID[s][i]);

							if(!s) return SPDF(playerid, 978, DIALOG_STYLE_MSGBOX, !"Покупка бочки", "{FFFFFF}Вы хотите купить бочку с 200.0 л. нефти за $%.00f?", !"Выбрать", !"Отмена", BizData[NeftBizID[0][i]][bEnterPrice]*200);
							else return SPD(playerid, 25382, DIALOG_STYLE_MSGBOX, !"{31B404}Покупка бочки", !"{FFFFFF}Вы хотите купить бочку с {31B404}500 л.{ffffff} нефти за {31B404}100000{ffffff} BTC?\n\n{cccccc}Для перевозки бочек Вам потребуется специальное транспортное средство.", !"Далее", !"Отмена");
						}
					}
				}
			}

			if(Int_GetPlayerData(playerid, "FocusOilBarrel") && Int_GetPlayerData(playerid, "ShowPlayerNeft"))
			{
				new
					vehicleid = Int_GetPlayerData(playerid, "ShowPlayerNeft"),
					focusOil = Int_GetPlayerData(playerid, "FocusOilBarrel")-1;

				switch OilObjectStatus[vehicleid][focusOil] do
				{
					case 0:
					{
						if(OilObjectStatus[vehicleid][focusOil])
							return false;

						new Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ;

						GetOilAttachObjPos(vehicleid, focusOil, X, Y, Z, rX, rY, rZ);

						//DestroyDynamicObjectModel(vehicleid, OilObjects[vehicleid][focusOil], 3632);
						//OilObjects[vehicleid][focusOil] = CreateDynamicObject(3632, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 50.0);
						//AttachDynamicObjectToVehicle(OilObjects[vehicleid][focusOil], vehicleid, X, Y, Z, rX, rY, rZ);
						//
						f(global_str, 100, "200.0 литров\nВладелец: %s", PN(playerid));
						OilTextObj[vehicleid][focusOil] = CreateDynamic3DTextLabel(global_str, 0xFFFFFFFFF3ED8EAA, X,Y,Z, 5.0, INVALID_PLAYER_ID, vehicleid);
						SetString(OilOwner[vehicleid][focusOil],PN(playerid));
						//
						ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.1, 0, 1, 1, 0, 0, 1);
						OilObjectStatus[vehicleid][focusOil] = true;
						DeletePVar(playerid, "NeftInPlayer");
						RemovePlayerAttachedObject(playerid, 7);
						SetPlayerOilBarrelTargetID(playerid, vehicleid, 1);
					}
					case 1:
					{
						if(!OilObjectStatus[vehicleid][focusOil]) return 0;

						if(!GetString(OilOwner[vehicleid][focusOil], PN(playerid)) && IsPlayerInRangeOfPoint(playerid, 100.0, -2117.5806,1401.0322,1.4643)) return 0;

						DestroyDynamicObjectModel ( vehicleid, OilFocusObject[vehicleid], 19135);
						DestroyDynamic3DTextLabel ( OilTextObj[vehicleid][focusOil] );

						OilObjectStatus[vehicleid][focusOil] = false;
						SetPVarInt(playerid, "NeftInPlayer", true);
						CarryAnim(playerid);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						SetPlayerAttachedObject(playerid, 7, 3632, 6, 0.0170, 0.1470, -0.2220, -16.6000, 0.0000, 0.0000, 0.6430, 0.6110, 0.7090);
						SetPlayerOilBarrelTargetID(playerid, vehicleid, 0);
					}
				}
			}
			callcmd::opengate(playerid);
		}

	}
	if(newkeys & 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			CheckRepairSystem(playerid);

			callcmd::opengate(playerid);

			if(IsAtGasStation(playerid) != -1)
				callcmd::fill(playerid);
		}
	}
 	if(PRESSED(KEY_WALK) && !IsPlayerInAnyVehicle(playerid))
	{
		if(GarageMovement(playerid)) return 1;
		if(Parking(playerid)) return 1;
	}
	if(newkeys & 2 && IsPlayerInAnyVehicle(playerid))
	{
		if(GarageMovement(playerid)) return 1;
		if(Parking(playerid)) return 1;
	}
	if(newkeys == KEY_CROUCH)
	{
	    if(IsAArendCar(GetPlayerVehicleID(playerid)))
	    {
			if(ArendInfo[GetArendCarID(GetPlayerVehicleID(playerid))][aID] == 578)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, -1733.3938, 187.7363, 3.5547))
			    {
				    if(Proviziya{playerid})
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже загрузили машину!");

				    Proviziya{playerid} = true;
				    EnableGPSForPlayer(playerid, 1830.3701, 416.7932, 20.1436);
				    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно загрузили машину провизией.\nОтправляйтесь к {FABA2F}складу{FFFFFF} семьи для разгрузки!\nПункт назначения {FABA2F}отмечен{FFFFFF} на миникарте.\n\n", !"Принять", !"");
				}
			    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1830.3701, 416.7932, 20.1436))
			    {
				    if(!Proviziya{playerid})
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваша машина не загружена!");

				    Proviziya{playerid} = false;
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно разгрузили машину с провизией.\nНа миникарте {FABA2F}отмечено {FFFFFF}место следующей загрузки!\n\n", !"Принять", !"");
					EnableGPSForPlayer(playerid, -1733.3938, 187.7363, 3.5547);
				}
			}
		}
		for(new i; i < MAX_AUTO_BAZAR; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ]) && IsAOwnableCar(GetPlayerVehicleID(playerid)))
			{
				if(autoBazarInfo[i][autoBazarType] == 1 && (!IsACar(GetPlayerVehicleID(playerid)) && !IsABike(GetPlayerVehicleID(playerid)) && !IsAVelik(GetPlayerVehicleID(playerid)))) return 0;
				else if(autoBazarInfo[i][autoBazarType] == 2 && !IsAPlane(GetPlayerVehicleID(playerid))) return 0;
			    if(GetString(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cOwner], PN(playerid)) && autoBazarInfo[i][autoBazarplayerid] == INVALID_PLAYER_ID)
			    {
			        pTemp[playerid][pSellCar] = i;
			    	SPD(playerid, 2218, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите желаемую цену за транспорт (BTC).", !"Выбрать", !"Отмена");
			        return 1;
			    }
			    else if(IsPlayerInHisVehicle(playerid) && autoBazarInfo[i][autoBazarplayerid] == playerid)
			    {
			        SPD(playerid, 2220, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы хотите снять транспорт с продажи?", !"Да", !"Отмена");
			        return 1;
			    }
				return 1;
			}
		}
	}
    if(GetPlayerVirtualWorld(playerid) == 1228) return 1;
	/// RECON
	if(newkeys & 16)
	{
	    if(bool:Int_GetPlayerData(playerid,"configrecon") == true)
		{
	 		for(new i; i < 6; i++) DestroyPlayerTD(playerid, recon_p[playerid][i]);
			DeletePVar(playerid, "selectrecon1");
			DeletePVar(playerid, "configrecon");
		}
	}
	if(PRESSED(KEY_SPRINT))
	{
		FunciaRecon(playerid);
		OpenMenuRecon(playerid);
	}  
	// RECON
 	if(newkeys == KEY_SECONDARY_ATTACK)
	{
		if(AnimPlayed{playerid})
		{
		    ClearAnimationsEx(playerid);
		    if(Int_GetPlayerData(playerid, "P_SEAT_STATUS")) DeletePVar(playerid, "P_SEAT_STATUS");
		    TextDrawHideForPlayer(playerid, StopAnimation);

			for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
			{
				if(Bodyguard_playerData[playerid][i][bg_Timer] <= 0)
					continue;

				ApplyAnimationEx(playerid, !"PED", !"phone_out", 4.1, 0, 1, 1, 1, 1, 1);

				Bodyguard_playerData[playerid][i][bg_Timer] = 0;

				return SCM(playerid, COLOR_OLDRED, !"Призыв личного охранника отменён!");
			}
		}
		if(selfi{playerid})
		{
	        TogglePlayerControllable(playerid, 1);
	        SetCameraBehindPlayer(playerid);
	        RemovePlayerAttachedObject(playerid, 0);
	        ApplyAnimationEx(playerid, !"PED", !"ATM", 4.1, 0, 1, 1, 0, 1, 1);
		    selfi{playerid} = false;
		    TextDrawHideForPlayer(playerid, StopAnimation);
		}
	}
	if(newkeys == KEY_HANDBRAKE)
	{
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsAOwnableCar(GetPlayerVehicleID(playerid)))
        {
			new carid = GetPlayerVehicleID(playerid);
	        if(VehicleInfo[carid][vModification] == 554 || VehicleInfo[carid][vModification] == 587)
	        {
                if(VehicleInfo[carid][vStyle])
                {
					new unspeed;
					switch random(5) do
					{
						case 0: unspeed = 10;
			            case 1: unspeed = 20;
                        case 2: unspeed = 30;
				        case 3: unspeed = 40;
				        case 4: unspeed = 50;
					}
					SetVehicleSpeed(carid,GetPlayerVehicleSpeed(playerid)-unspeed);
                }
			}
		}
	}

    new Float:XYZ[3];
    if(newkeys & KEY_JUMP)
    {
        if(PlayerJob[playerid] == 17)
		{
		    if(InJob[playerid] == 3)
		    {
				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы уронили сено!");
				InJob[playerid] = 1;
			    RemovePlayerAttachedObject(playerid, 7);
				for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], true);
			}
		}
		if(PlayerJob[playerid] == JOB_PORTER)
		{
		    if(InJob[playerid] == 3)
		    {
				TogglePlayerDynamicCP(playerid, PorterDownCP, false);
				SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы уронили груз!");
				InJob[playerid] = 1;
			    RemovePlayerAttachedObject(playerid, 7);
			    ApplyAnimationEx(playerid, "PED", "GETUP_FRONT", 4.0, 0, 1, 1, 0, 0, 1);
			}
		}
		if(CreteBomb[playerid]>200) IsDropBomb(playerid);
	}
	if(newkeys & KEY_JUMP || newkeys & KEY_SPRINT )
    {
		if(CreateMats[playerid]==4 || CreateMats[playerid]==3)
		{
		    Controllable{playerid} = true;
		    RemovePlayerAttachedObject(playerid, 7);
		    SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы уронили материалы!");
		    CreateMats[playerid] = 1;
		    TogglePlayerDynamicCP(playerid, FerumEndCP, false);
		    ClearAnimationsEx(playerid);
		    NoEnterPickup[playerid] =7;
			ApplyAnimationEx(playerid,"FAT","IDLE_tired",4.0,0,0,0,1,0);
		}
	}
	if((oldkeys & KEY_HANDBRAKE && newkeys & KEY_SECONDARY_ATTACK))
	{
		if(IsPlayerInRangeOfPoint(playerid, 6.0,773.770,-62.312,1000.7184) || IsPlayerInRangeOfPoint(playerid, 6.0,268.3984,1741.8547,649.3459)|| IsPlayerInRangeOfPoint(playerid, 6.0,697.4471,-1668.7750,871.3057)|| IsPlayerInRangeOfPoint(playerid, 6.0,640.5844,-1188.0693,1001.3860))
		{
		    if(PI[playerid][pONPhoneTalk]) return 0;
			if(pSportZal[playerid] != 1) return SCM(playerid,COLOR_VALIK, !"[Ошибка] {FFFFFF}Вы не переоделись!");
			switch(random(3))
			{
				case 1:
				{
					switch(random(3))
					{
						case 0: PlayerPlaySound(playerid, 17805, 0.0, 0.0, 0.0);
						case 1: PlayerPlaySound(playerid, 17806, 0.0, 0.0, 0.0);
					}
					new iskill;
					if(PI[playerid][pSkillLevel]<=5000) iskill = 5000;
					if(PI[playerid][pSkillLevel]<=10000 && PI[playerid][pSkillLevel]>5000) iskill = 10000;
					if(PI[playerid][pSkillLevel]<=20000 && PI[playerid][pSkillLevel]>10000) iskill = 20000;
					if(PI[playerid][pSkillLevel]<=30000 && PI[playerid][pSkillLevel]>20000) iskill = 30000;
					PI[playerid][pSkillLevel]++;
					f(global_str,16,"%d/%d",PI[playerid][pSkillLevel],iskill);
					GameTextForPlayer(playerid,global_str,500,6);
					if(PI[playerid][pSkillLevel] == 5000)
					{
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 5000 ударов, используйте /fightstyle");
						PI[playerid][pSkillFight][0] = 1;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 3 стиля боя, требуется еще 5000 ударов");
					}
					if(PI[playerid][pSkillLevel] == 10000)
					{
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 10000 ударов, используйте /fightstyle");
						PI[playerid][pSkillFight][1] = 1;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 2 стиля боя, требуется еще 10000 ударов");
					}
					if(PI[playerid][pSkillLevel] == 20000)
					{
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 20000 ударов , используйте /fightstyle");
						PI[playerid][pSkillFight][2] = 1;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Осталось открыть 1 стиль боя, требуется еще 10000 ударов");
					}
					if(PI[playerid][pSkillLevel] == 30000)
					{
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили новый стиль боя 30000 ударов , используйте /fightstyle");
						PI[playerid][pSkillFight][3] = 1;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы выучили все стили боя! Поздравляем!");
					}
				}
			}
		}
	}
	if(newkeys == PRESS_ALT)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1289.1204,-1271.5150,13.5400 ))
	    {
			UpdatePlayerPos(playerid, 2099.9548,781.9525,1027.1211);
			SetPlayerInterior(playerid, 2);
		}
		
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, 2099.9548,781.9525,1027.1211))
	    {
			UpdatePlayerPos(playerid, 1289.1204,-1271.5150,13.5400);
			SetPlayerInterior(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1120.5518,-1311.0817,1019.4119))
	    {
			UpdatePlayerPos(playerid, 1123.9635,-1533.5908,1010.2963);
			SetPlayerFacingAngle(playerid, 269.3300);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1123.9635,-1533.5908,1010.2963))
	    {
			UpdatePlayerPos(playerid, 1120.5518,-1311.0817,1019.4119);
			SetPlayerFacingAngle(playerid, 269.3300);
		}
	}
	if(newkeys == KEY_CROUCH)
	{
	    for(new i; i <OWNABLEBIZES; i++)
		{
		    if(!GetString(BizData[i][bOwner],"The State"))
	    	{
				if(BizData[i][bBuyCost] && BizData[i][bNeedItem])
				{
				    if(PlayerJob[playerid] == 3 && IsPlayerInRangeOfPoint(playerid,10,BizData[i][bEnter][0],BizData[i][bEnter][1],BizData[i][bEnter][2]))
				    {
						f(global_str, 300, "{FFFFFF}Бизнес закупает {B7A51B}%d{FFFFFF} едениц товара. Стоимость 1-го продукта: {B7A51B}%d$.{FFFFFF}\nВведите количество товара которое хотите продать бизнесу.",BizData[i][bNeedItem],BizData[i][bBuyCost]);
						SPD(playerid,8762,1,!"",global_str, !"Принять", !"Отмена");
						return dBiz[playerid] = i;
				    }
				}
			}
		}
		if(PlayerJob[playerid]==3 && VehicleInfo[GetPlayerVehicleID(playerid)][vJob]==3 && IsPlayerInRangeOfPoint(playerid, 6.0, -48.8906,26.7353,3.1172))
			return SPD(playerid,2281,2,!"",!"{42B02C}-{FFFFFF} Закупить продукты\n{42B02C}-{FFFFFF} Вернуть продукты", !"Принять", !"Отмена");

/* 		else if(PlayerJob[playerid]==3 && VehicleInfo[GetPlayerVehicleID(playerid)][vJob]==3 &&IsPlayerInRangeOfPoint(playerid, 6.0, 1976.6340,-2029.4700,13.5469))
			return SPD(playerid,2291,2,"","{42B02C}-{FFFFFF} Закупить груз\n{42B02C}-{FFFFFF} Вернуть груз", !"Принять", !"Отмена");
  */  			
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2224.5222,-2461.0154,13.4466) || IsPlayerInRangeOfPoint(playerid, 5.0, 1124.2776,1962.4742,10.8203))
		{
			if(PlayerJob[playerid] != JOB_SCRAPER) SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не развозчик металлолома");
			//nothingstock(0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2052.71, -106.53, 35.06))
        {
    		new vehid = GetPlayerVehicleID(playerid);
    		if(VehicleInfo[vehid][vTeam] == TEAM_LICENSERS) SetVehiclePos(vehid, -2052.90, -98.77, 34.90);
    	}
    	else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2052.90, -98.77, 34.90))
    	{
            new vehid = GetPlayerVehicleID(playerid);
    		if(VehicleInfo[GetPlayerVehicleID(playerid)][vTeam] == TEAM_LICENSERS) SetVehiclePos(vehid, -2052.71, -106.53, 35.06);
     	}
	}

    if(newkeys & KEY_WALK && oldkeys & KEY_NO) return callcmd::menu(playerid);
	if(newkeys == KEY_WALK && !IsPlayerInAnyVehicle(playerid))
	{
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 1507.9591, 1310.1906, 10.9788))
        {
		    if(PI[playerid][pLevel] < 20) return SendBotMessage(playerid, "Создать семью можно, после 20-го уровня!");
		    else if(PI[playerid][pMoney] < 3000000) return SendBotMessage(playerid, "У вас недостаточно денег чтобы создать семью!\nНеобходимо: 3.000.000$");
			else if(!(FP_Data[playerid][F_FAMILY_ID] == -1)) return SendBotMessage(playerid, "Вы не можете создать семью, так как вы уже в ней состоите!");
			SPD(playerid, 492, DIALOG_STYLE_MSGBOX, "", "\n\n{FFFFFF}Вы действительно хотите создать свою семью?\nСтоимость создания семьи: {FAAC58}3 000 000$\n\n", !"Принять", !"Отмена");
	    }
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 943.8988,1039.5798,1056.3680))
		{
			if(GetPlayerVirtualWorld(playerid) == 0)
				SPD(playerid, 7845, DIALOG_STYLE_LIST, !"", !"{C4DF3D}<= {ffffff}Когда начинается мероприятие?\n{C4DF3D}<= {ffffff}Что собой представляет это мероприятие?\n{8D9F37}<= {ffffff}Сколько людей учавствует в мероприятии?\n{DB873D}<= {ffffff}Купить билет и войти! {DB873D}[30.000$]", !"Принять", !"Отмена");
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 523.8312, 848.2282, -42.9189))
		{
			//if(OBJECT_SLEGAN[playerid]) return SCM(playerid, COLOR_RED, "[Ошибка] У вас уже есть инструмент!");
			if(tradeopen{playerid}) return 1;
			f(global_str, 600,"\
			Действие\t\t\t{baba5d}В наличии\t{4ed442}Стоимость\n\
			Продать Лари ресурс ''Камень''\t{ffcd66}%d шт\t{73B461}%d BTC за шт\n\
			Продать Лари ресурс ''Металл''\t{ffcd66}%d шт\t{73B461}%d BTC за шт\n\
			Продать Лари ресурс ''Бронза''\t{ffcd66}%d шт\t{73B461}%d BTC за шт\n\
			Продать Лари ресурс ''Серебро''\t{ffcd66}%d шт\t{73B461}%d BTC за шт\n\
			Продать Лари ресурс ''Золото''\t{ffcd66}%d шт\t{73B461}%d BTC за шт\n\
			{8a562c}Купить у Лари инструмент для добычи\t \t{73B461}$4000",
			GetCount(playerid, 596),shafta[0],
			GetCount(playerid, 597),shafta[1],
			GetCount(playerid, 598),shafta[2],
			GetCount(playerid, 599),shafta[3],
			GetCount(playerid, 600),shafta[4]);
			SPD(playerid, 3212, DIALOG_STYLE_TABLIST_HEADERS, "Выберите действие", global_str, "Выбрать", !"Отмена");
			SetPVarInt(playerid, "BuyFarmSt", 1);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, -256.7696, -1362.8536, 9.4421))
		{
			if(tradeopen{playerid}) return 1;
			f(global_str, 400,"\
			Действие\t\t\t{baba5d}В наличии\t{4ed442}Стоимость\n\
			Продать Эмилио ресурс ''Хлопок''\t{ffcd66}%d шт\t{73B461}%d BTC за шт\n\
			Продать Эмилио ресурс ''Лён''\t{ffcd66}%d шт\t{73B461}%d BTC за шт\n\
			{8a562c}Купить у Эмилио инструмент для сбора урожая\t \t{73B461}$4000",
			GetCount(playerid, 594),fermalen[0],
			GetCount(playerid, 595),fermalen[1]);
			SPD(playerid, 3212, DIALOG_STYLE_TABLIST_HEADERS, "Выберите действие", global_str, "Выбрать", !"Отмена");
			SetPVarInt(playerid, "BuyFarmSt",0);
		}
	    new Float:x, Float:y, Float:z;
		for(new i;i<MAX_DMATS;i++)
		{
		    if(dmats[i]!=-1)
		    {
		        GetDynamicObjectPos(dmats[i],x,y,z);
				if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
				{
				    if((GetCount(playerid, 511)+500)<2000)
				    {
					    DestroyDynamicObject(dmats[i]);
					    dmats[i]=-1;
					    SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно подобрали ящик, в котором {FFFFFF}500{73B461} готовых патронов!");
					    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
                        AddItem(playerid, 511, 500);
						SetPlayerChatBubble(playerid, "Подобрал что-то с земли", COLOR_PURPLE, 10.0, 5000);
					}
					else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы можете переносить максимум 2000 патронов!");
				    return 1;
				}
			}
		}
		for(new i;i<MAX_DGUNS;i++)
		{
		    if(dguns[i]!=-1)
		    {
		        GetDynamicObjectPos(dguns[i],x,y,z);
				if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
				{
				    DestroyDynamicObject(dguns[i]);
				    dguns[i]=-1;
				    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
				    _GiveGun(playerid,dgunn[i],dpatrons[i]);
				    f(global_str, 150,"[Информация] {FFFFFF}Вы подобрали оружие:{FFFFFF} %s[%d].",GunPN(dgunn[i]),dpatrons[i]);
				    SCM(playerid,COLOR_VALIK, global_str);
					SetPlayerChatBubble(playerid, "Подобрал оружие с земли", COLOR_PURPLE, 10.0, 5000);
					dpatrons[i]=-1;
					dgunn[i]=-1;
				    return 1;
				}
			}
		}
		if(GetPlayerVirtualWorld(playerid)==0)
		{
			for(new i;i<MAX_NARKO;i++)
			{
			    if(ddrugs[i]!=-1)
			    {
			        GetDynamicObjectPos(ddrugs[i],x,y,z);
					if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
					{
					    if(ddTimer[i]==0)
			    		{
			    		    Timerak[playerid]=17;
						    return 1;
						}
						else
						{
							if(Int_GetPlayerData(playerid,"timeas")>Global_Time)
							{
							    if(!IsAtGang(playerid))return SCM(playerid,COLOR_RED,!"Вы не можете испортить этот саженец!");
							    Timerak[playerid]=17;
							    return 1;
							}
							SetPVarInt(playerid,"timeas",Global_Time+4);
							SCM(playerid,COLOR_GREY, !"Конопля еще не созрела, нажмите ALT еще раз чтобы вырвать саженец!");
							return 1;
						}
					}
				}
			}
		}
		/*for(new i;i<sizeof(phonepos);i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2, phonepos[i][0],phonepos[i][1],phonepos[i][2]))
			{
 				SetPlayerChatBubble(playerid, "Использует телефон", COLOR_PURPLE, 10.0, 5000);
 				SPD(playerid,2261,0,"","{FAAC58}- Телефонная будка{FFFFFF}\n\nСтоимость вызова такси составляет 75$, если наша компания найдет свободное\nтакси мы вас сразу оповестим.\n{FAAC58}Желаете продолжить?", !"Принять", !"Отмена");
			}
		}*/
		
        if(IsPlayerInRangeOfPoint(playerid,1.5,649.3248,-1353.8834,13.5470))
        {
			PI[playerid][pBuildType]=0;
            if(!BuildsInfo[0][blClosed]) {
			    SPD(playerid,867,DIALOG_STYLE_INPUT,!"",!"\n\n{FFFFFF}Концертный зал не арендован и вход пока не доступен.\nСтоимость аренды зала составляет {D1BE41}50 000${FFFFFF} за {D1BE41}1{FFFFFF} час.\nВведите количество часов на сколько вы хотите арендовать помещение.\n\n",!"Принять",!"Отмена");
			}
			else
			{
			    if(!GetString(BuildsInfo[0][blArenderID],PN(playerid)))
			    {
				    if(!BuildsInfo[0][blCanEnter]) {
						SCM(playerid,COLOR_GREEN,!"[Подсказка] {FFFFFF}Вы бесплатно вошли в концертный зал.");
					    UpdatePlayerPos(playerid,-575.709, 2594.2, 1705.09); //вход в здание
					    SetPlayerFacingAngle(playerid, 180.11);
			            SetPlayerInterior(playerid,9);
			            SetPlayerVirtualWorld(playerid,9);
						ZallFunction[2]++;
				    }
				    else if(BuildsInfo[0][blCanEnter]==1 || BuildsInfo[0][blCanEnter]>2)
				    {
				        if(PI[playerid][pMoney]<BuildsInfo[0][blCanEnter])
						{
						    f(global_str, 160,"[Ошибка] {FFFFFF}У вас недостаточно денег, чтобы войти в коцертный зал! Необходимо %d$",BuildsInfo[0][blCanEnter]);
							SCM(playerid,COLOR_RED, global_str);
							return 1;
						}
						GiveMoney(playerid,-BuildsInfo[0][blCanEnter]);
						SCM(playerid,COLOR_GREY, !"<< {FFFFFF}Вы успешно оплатили вход и вошли в концертный зал.");
					    UpdatePlayerPos(playerid,-575.709, 2594.2, 1705.09); //вход в здание
					    SetPlayerFacingAngle(playerid, 180.11);
			            SetPlayerInterior(playerid,9);
			            SetPlayerVirtualWorld(playerid,9);
						ZallFunction[2]++;
						ZallFunction[1]+=BuildsInfo[0][blCanEnter];
				    }
				    else
				    {
						if(PI[playerid][pZall]!=0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет пропуска для входа в арендованый концертный зал, получить его можно у арендатора или охранника.");
					    UpdatePlayerPos(playerid,-575.709, 2594.2, 1705.09); //вход в здание
					    SetPlayerFacingAngle(playerid, 180.11);
			            SetPlayerInterior(playerid,9);
			            SetPlayerVirtualWorld(playerid,9);
						ZallFunction[2]++;
						SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}Вы вошли в концертный зал, как приглашеный человек.");
					}
				}
				else {
				    UpdatePlayerPos(playerid,-575.709, 2594.2, 1705.09); //вход в здание
				    SetPlayerFacingAngle(playerid, 180.11);
		            SetPlayerInterior(playerid,9);
		            SetPlayerVirtualWorld(playerid,9);
					ZallFunction[2]++;
				}
			}
        }
        if(IsPlayerInRangeOfPoint(playerid,1.5,-575.709, 2594.2, 1705.09))
        {
			UpdatePlayerPos(playerid,649.3248,-1353.8834,13.5470);//выход из здания
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			PI[playerid][pBuildType]=-1;
        }
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 770.8220,-77.3209,1000.6563 ))SPD(playerid,6446,DIALOG_STYLE_MSGBOX,"Раздевалка","Вы хотите надеть/снять форму и начать/закончить тренировку?","Одеть","Снять");
  		if(pTemp[playerid][tSkinSelectedId] != -1)
	    {
	        if(PI[playerid][pSkin][0] != 0)
	        {
		        if(!IsPlayerInRangeOfPoint(playerid, 1.0, 199.1063, -128.3574, 1003.5152))
		        {
			        pTemp[playerid][tSkinSelectedId] = -1;
					TogglePlayerControllable(playerid, true);
     				SetPlayerSkinEx(playerid,PI[playerid][pOldSkin]);
					TogglePlayerDynamicCP(playerid, Binko_CP, true);
					SetCameraBehindPlayer(playerid);
					return 1;
				}
			}
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 644.0786,-1365.4963,13.6142))//охрана
		{
		    if(GetString(BuildsInfo[0][blArenderID],PN(playerid))) return SendBotMessage(playerid,"Здравствуйте, начальник!");
		    if(!BuildsInfo[0][blClosed]) return SendBotMessage(playerid,"К сожалению помочь тебе я не могу.");
		    if(BuildsInfo[0][blCanEnter]==2)
		    {
		        if(Int_GetPlayerData(playerid,"zalll")==9) return SendBotMessage(playerid,"Чувак, я не буду 10 раз бегать туда-сюда, жди!");
		        if(PI[playerid][pZall]==0) return SendBotMessage(playerid,"Чувак, у тебя уже есть пропуск!");
		        SendBotMessage(playerid,"Таксс, я передам владельцу, что ты хотел получить пропуск.\nЕсли что, стой тут, я крикну если можно будет войти.");
		        SetPVarInt(playerid,"zalll",9);
		    }
		    else
		    {
		        if(!BuildsInfo[0][blCanEnter]) SendBotMessage(playerid,"Вход же свободен, зачем я тебе?");
		        else
		        {
					f(global_str, 90,"Стоимость входа сейчас: %d$.",BuildsInfo[0][blCanEnter]);
					SendBotMessage(playerid,global_str);
		        }
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -569.7514,2567.4849,1702.5029))//управление залом
		{
		    if(!GetString(BuildsInfo[0][blArenderID],PN(playerid))) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете управлять концертным залом!");
		    SPD(playerid,8981,2,"","Изменить музыку", !"Принять", !"Отмена");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1531.3723,1112.4895,1033.8420)) return SPD(playerid,1977,2,"","- Кто сейчас стоит на должности: 'Губернатор' ?\n- Чем занимается губернатор?", !"Принять", !"Отмена");
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1773.6903,-1891.7493,13.5504 ))
		{
			if(!GetPlayerLauncher(playerid))
				return SCM(playerid, COLOR_OLDRED, "[Ошибка] {ffffff}Начальная квестовая линия работает только при игре с официального лаунчера ARIZONA GAMES или ARIZONA MOBILE!"), SCMF(playerid, COLOR_GREY, "Ccылка на скачивание лаунчера: %s", Setting_Server[3]);
	
			SCM(playerid, COLOR_RED, "[Ошибка]{ffffff} Система начальных квестов находится на доработке!");
		}
		
		else if(GetPlayerVirtualWorld(playerid) == 5 && IsPlayerInRangeOfPoint(playerid, 1.0, 1544.0896, 1272.6919, 10.8475))
			return SPD(playerid, 1982, DIALOG_STYLE_LIST, !"", !"{FFC133}- {FFFFFF}Где получить права пилота?\n{FFC133}- {FFFFFF}Сколько стоят права на вождение?\n{FFC133}- {FFFFFF}Сотрудники автошколы на дежурстве.\n{FFC133}- {FFFFFF}Сколько стоит сдача на права пилота?", !"Принять", !"Отмена");
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1152.1932,-1305.5453,1019.4307) && (GetPlayerInterior(playerid) == 2 && GetPlayerVirtualWorld(playerid) == 2 || GetPlayerInterior(playerid) == 3 && GetPlayerVirtualWorld(playerid) == 3 || GetPlayerInterior(playerid) == 4 && GetPlayerVirtualWorld(playerid) == 4))
		   	SPD(playerid, 1871, DIALOG_STYLE_LIST, "", "\
				{FFC036}-{FFFFFF} Кто стоит на должности главврача?\n\
				{FFC036}-{FFFFFF} Сколько стоит лечение?\n\
				{FFC036}-{FFFFFF} Сколько стоит лечение от наркозависимости?\n\
				{FFC036}-{FFFFFF} Сколько стоит рецепт?\n\
				{FFC036}-{FFFFFF} Сколько стоит антибиотик?\n\
				{FFC036}-{FFFFFF} Сотрудники больницы на дежурстве.\n\
				{FFC036}-{FFFFFF} В какой больнице я нахожусь?", "Выбрать", "Отмена");
		   
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1152.1932,-1305.5453,1019.4307))
		{
			new g = GetPlayerInterior(playerid);
		    new w = GetPlayerVirtualWorld(playerid);
		    if(g == 3 && w == 3) SPD(playerid, 1979, DIALOG_STYLE_LIST, "", "{FFC133}- {FFFFFF}Кто сейчас стоит на должности главврача?\n{FFC133}- {FFFFFF}Сколько стоит лечение?\n{FFC133}- {FFFFFF}Сотрудники больницы на дежурстве.\n{FFC133}- {FFFFFF}В каком городе я нахожусь?", !"Принять", !"Отмена");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1152.1932,-1305.5453,1019.4307))
		{
			new g = GetPlayerInterior(playerid);
		    new w = GetPlayerVirtualWorld(playerid);
		    if(g == 4 && w == 4) SPD(playerid, 1980, DIALOG_STYLE_LIST, "", "{FFC133}- {FFFFFF}Кто сейчас стоит на должности главврача?\n{FFC133}- {FFFFFF}Сколько стоит лечение?\n{FFC133}- {FFFFFF}Сотрудники больницы на дежурстве.\n{FFC133}- {FFFFFF}В каком городе я нахожусь?", !"Принять", !"Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1754.9205,-316.1614,1654.5055))
		{
			SPD(playerid, 0, 0, "", "{FFFFFF}Школа танцев:\n\nБлагодаря обучению правильно двигаться в танце\nу вас появится возможность изменения походки\nна клавишу ALT при наборе необходимого очков навыка.\n\nПосмотреть статистику навыка: {eb4010}/settings - Стиль походки", "Понял", "");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1756.8765,-315.1113,1654.5055))
		{
			SPD(playerid, 3767, 0, "Тренер по танцам", "{FFFFFF}Вы хотите начать тренировку?\n\n{AFAFAF}Стоимость тренировки:{FFFFFF} $100000\n{AFAFAF}Длительность тренировки:{FFFFFF} 3 минуты", "Начать", "Нет");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1527.5154,1335.3561,10.9787) || IsPlayerInRangeOfPoint(playerid, 1.0, 1489.7209,-1259.8041,113.8044) || IsPlayerInRangeOfPoint(playerid, 1.0, 1999.9302,1121.5923,1038.6824))
		{
			if(GetPlayerVirtualWorld(playerid) == 2 || GetPlayerVirtualWorld(playerid) == 1) SPD(playerid, 3772, DIALOG_STYLE_LIST, "{BFBBBA}Выберите этаж", "{FFFFFF}1 Этаж ( {EBEB3D}Холл/Информационная{FFFFFF} )\n2 Этаж ( {6AD630}Центр услуг/Буфет{FFFFFF} )\n3 Этаж ( {EB7D3D}Правление/Администрация{FFFFFF} ) ", "Выбрать", "Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2108.4653,789.9943,1027.1191))
		{
		    if(RazdStatus == 0)
		    {
     			SPD(playerid, 3337, DIALOG_STYLE_INPUT, "", "\
				{FFFFFF}Здраствуйте! В этом месте вы можете начать раздачу своих\n\
				денег для малоимущих игроков! Деньги с бюджета можно получить\n\
				игрокам от 1-го уровня! Каждый человек узнает кто устроил раздачу.\n\n\
				Введите сумму и сколько игроков получит деньги через запятую\n\
				Пример: {FF6347}5000000,20", "Понял","");
		    }
		    else SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы не можете начать раздачу денег, пока идёт предыдущая.");
		}
		else if(IsAtBankomat(playerid, 2.0)) return ShowBankMenu(playerid);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2107.1008,789.9330,1027.1191))
		{
		    if(RazdStatus != 0)
		    {
				if(RazdPlayers >= 1)
				{
					if(Int_GetPlayerData(playerid,"Razd_Select") != 0) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы уже принимали участие в этой раздаче.");
 					GiveMoney(playerid, RazdMoney);
					f(global_str, 150,"[Подсказка]{FFFFFF} На ваш игровой счет начислено {9ACD32}%d$",RazdMoney);
			 		SCM(playerid, 0xFF9966FF, global_str);
			 		SetPVarInt(playerid,"Razd_Select",1);
			 		RazdPlayers -= 1;
					f(global_str, 300,"\
					Раздача средств для малоимущих\n\
					\tХватит ещё на {9ACD32}%d{FFFFFF} игроков\n\
					\tКаждому по {9ACD32}%d${FFFFFF}\n\
					Организатор: {42B02C}%s",RazdPlayers,RazdMoney,RazdName);
					UpdateDynamic3DTextLabelText(RazdText,COLOR_WHITE, global_str);
			 		if(RazdPlayers == 0)
				 	{
				 		RazdStatus = 0;
				 		RazdPlayers = 0;
				 		RazdMoney = 0;
				 		SetString(RazdName,"");
				 		DestroyDynamic3DTextLabel(RazdText);
                        foreach(Player, i){
						SetPVarInt(i,"Razd_Select",0); }
			 		}
				}
		    }
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1420.4176,-1685.8624,13.5469 ))
		{
			return SPD(playerid, 1449, DIALOG_STYLE_LIST, !"Задать вопрос", !"- Что ты тут делаешь?\n- Где взять гражданские талоны?\n- Где взять подарки?\n {852A2A}Обменять подарки\n {37FC47}Обменять гражданские талоны", !"Закрыть", !"");
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, -77.9217,90.3327,3.1172 ))
		{
		    if(PlayerJob[playerid]== 17 || PlayerJob[playerid]== 18 || PlayerJob[playerid]== 19 || PlayerJob[playerid]== 20)f(global_str, 50,"Текущая должность: %s",GetJobPN(PlayerJob[playerid]));
		    else global_str = "";
			SPD(playerid,3919,2,global_str,"{73B461}-{FFFFFF} Информация\n{73B461}-{FFFFFF} Переодеться и начать/закончить работу\n{73B461}-{ABAE40} Устроится на работу начального фермера\n{73B461}-{FFFFFF} Устроится на работу тракториста\n{73B461}-{FFFFFF} Устроится на работу комбайнера\n{73B461}-{FFFFFF} Устроится на работу водителя кукурузника", !"Принять", !"Отмена");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2034.3145,-114.1021,1035.1719 ))
		{
			if(GetPlayerLicense(playerid, 2)) return false;
		    if (PI[playerid][pContractTime] < 7000 ) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}EasterBoard Farm не раздает кому попало лицензии на полёты, только лучшим работникам!");
		    SPD(playerid,0,0,!"","{FAC64C}Вы успешно получили бесплатную лицензию на полёты, при поддержке\nПредприятия EasterBoard Farm.", !"Закрыть","");

		    return GivePlayerLic(playerid, 2);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 363.6908,153.9987,1025.7964)) CheckNalog(playerid, 0);
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 354.0459,170.0928,1025.7964 )) CheckNalog(playerid, 1);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -463.8202, 2216.9792, 1601.0859) || IsPlayerInRangeOfPoint(playerid, 1.0, -955.6700,-2358.0708,1701.0859 )) SPD(playerid, 25765, DIALOG_STYLE_LIST, "{BFBBBA} ", "{ff6666}[1] {ffffff}Сдача с повинной\n{ff6666}[2] {ffffff}Получение номерного знака {33AA33}[1.000.000$]\n{FF6666}[3] {ffffff}Вернуть номерной знак {cccccc}[100.000$]", "Выбрать", "Отмена");
     	else if(IsPlayerInRangeOfPoint(playerid, 0.5, -80.5815,82.6753,3.1096 ))
		{
			if(PlayerJob[playerid]!= 17 && PlayerJob[playerid]!= 18 && PlayerJob[playerid]!= 19 && PlayerJob[playerid]!= 20)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы здесь не работаете!");
			if(ferman[playerid]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы еще ничего не заработали и не можете получить зарплату!");
			GiveMoney(playerid,ferman[playerid]*GLS[4]);
			f(global_str, 150,"[Информация] {FFFFFF}Вы успешно забрали свою зарплату в размере:{FFFFFF} %d$",ferman[playerid]*GLS[4]);
			SCM(playerid,COLOR_RED, global_str);
			ferman[playerid]=0;
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 26.1645,2233.7747,1501.6503 ))
		{
		    if(PlayerJob[playerid]!= JOB_GUIDE) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не работаете здесь!");
			if(InJob[playerid]==0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не начинали работу!");
			if(deal[playerid]<1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы ничего еще не заработали!");
			GiveMoney(playerid,deal[playerid]*20000);
			f(global_str, 155,"[Информация] {FFFFFF}Вы успешно забрали свои заработаные деньги ( %d$ )",deal[playerid]*20000);
			SCM(playerid,COLOR_VALIK, global_str);
			deal[playerid]=0;
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2798.11, -2393.91, 13.96 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 2743.82, -2453.84, 13.86 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 2782.68, -2372.74, 13.63 ))
		{
		    if(OrgInfo[TEAM_ARMY][oMats] < 2000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}На складе недостаточно материалов!");
			if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не состоите в банде !");
			if(PI[playerid][pPackets] >= 30) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас уже нет места для хранения ингредиентов!");
		    PI[playerid][pPackets] = 30;
		    OrgInfo[TEAM_ARMY][oMats] -= 150;
		    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
			SetPlayerChatBubble(playerid, "Украл ингредиенты", COLOR_PURPLE, 10.0, 5000);
		    SPD(playerid,0,0,!"","{928989}Вы успешно украли 30 шт. ингредиентов ( частей оружия ).\nДля того чтобы из них изготовить патроны, а затем оружие , вам\nнеобходимо отправится на завод /gps - работы для новичков - завод\nи найти там чекпоинт в котором можно обменять ингредиенты.\nЗатем у вас появятся патроны и из них можно сделать оружие командой /creategun.\n\n{3F8628}Приятной игры", !"Закрыть","");
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1325.6866,476.3579,7.8498 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -1294.9114,491.5177,11.1953 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -1291.1442,501.8154,11.1953 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -1397.9807,502.8033,11.3047 ))
		{
		    if(OrgInfo[TEAM_ARMYSF][oMats] < 2000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}На складе недостаточно материалов!");
			if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не состоите в банде !");
			if(PI[playerid][pPackets] >= 30) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас уже нет места для хранения ингредиентов!");
		    PI[playerid][pPackets] = 30;
		    OrgInfo[TEAM_ARMYSF][oMats] -= 150;
		    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
			SetPlayerChatBubble(playerid, "Украл ингредиенты", COLOR_PURPLE, 10.0, 5000);
		    SPD(playerid,0,0,!"","{928989}Вы успешно украли 30 шт. ингредиентов ( частей оружия ).\nДля того чтобы из них изготовить патроны, а затем оружие , вам\nнеобходимо отправится на завод /gps - работы для новичков - завод\nи найти там чекпоинт в котором можно обменять ингредиенты.\nЗатем у вас появятся патроны и из них можно сделать оружие командой /creategun.\n\n{3F8628}Приятной игры", !"Закрыть","");
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 154.3891,1903.3417,18.7570 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 141.1707,1875.4081,17.8434 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 115.3891,1875.2244,17.8359 ) ||
		IsPlayerInRangeOfPoint(playerid, 1.0, 117.9125,1871.2745,17.8359 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 141.1704,1875.4607,17.8434 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 137.3782,1879.5315,17.8359 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 193.3672,1931.5112,17.6406 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 202.5459,1861.9189,13.1406 ))
		{
		    if(OrgInfo[TEAM_ARMYLV][oMats] < 2000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}На складе недостаточно материалов!");
			if(!IsAtGang(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не состоите в банде !");
			if(PI[playerid][pPackets] >= 30) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас уже нет места для хранения ингредиентов!");
		    PI[playerid][pPackets] = 30;
		    OrgInfo[TEAM_ARMYLV][oMats] -= 150;
		    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
			SetPlayerChatBubble(playerid, "Украл ингредиенты", COLOR_PURPLE, 10.0, 5000);
		    SPD(playerid,0,0,!"","{928989}Вы успешно украли 30 шт. ингредиентов ( частей оружия ).\nДля того чтобы из них изготовить патроны, а затем оружие , вам\nнеобходимо отправится на завод /gps - работы для новичков - завод\nи найти там чекпоинт в котором можно обменять ингредиенты.\nЗатем у вас появятся патроны и из них можно сделать оружие командой /creategun.\n\n{3F8628}Приятной игры", !"Закрыть","");
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -398.3770,2229.9397,1801.0859 ))
		{
		    if(pTemp[playerid][tSkinSelectedId] != -1 || BuyInt[playerid] != -1  || BuyGuns[playerid] != -1 || Buyitem[playerid]!=-1) return false;
			SPD(playerid,1653,5,"","Аксессуар\tЯчейка\n{42B02C}-{FFFFFF} Наушники\t5\n{42B02C}-{FFFFFF} Шапки\t1\n{42B02C}-{FFFFFF} Панамки\t1\n{42B02C}-{FFFFFF} Кепки\t1\n{42B02C}-{FFFFFF} Каски\t1\n{42B02C}-{FFFFFF} Береты\t1\n{42B02C}-{FFFFFF} Парики\t1\n{42B02C}-{FFFFFF} Стильные очки\t2\n{42B02C}-{FFFFFF} Банданы\t4\n{42B02C}-{FFFFFF} Шляпы\t1\n{42B02C}-{FFFFFF} Наручные часы\t3\n{42B02C}-{FFFFFF} Сумки\t6\n{42B02C}-{FFFFFF} Шляпы [2]\t1\n{42B02C}-{FFFFFF} Банданы [2]\t1", !"Принять", !"Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1547.6816,-1623.1069,13.3725 )) return UpdatePlayerPos(playerid,1547.7014,-1622.3954,13.5366);
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 1547.7014,-1622.3954,13.5366 )) return UpdatePlayerPos(playerid,1547.6816,-1623.1069,13.3725);

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -166.9772,1347.3783,1500.9888 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -208.6039,1323.4382,1500.9888 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -208.6047,1327.2102,1500.9888 ) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, -210.7849,1329.7562,1500.9888 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -212.6879,1334.1384,1500.9888) || IsPlayerInRangeOfPoint(playerid, 1.0, -208.9196,1334.1351,1500.9888) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, -187.4157,1305.7438,1507.6416 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -194.7263,1305.7531,1507.6416 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -180.6385,1299.5883,1507.6770) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, -183.1053,1299.8328,1507.6770 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -186.0829,1297.2595,1507.6692 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -190.7337,1296.8057,1507.6692) ||
				IsPlayerInRangeOfPoint(playerid, 1.0, -193.2607,1298.5358,1507.6692 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -194.5027,1296.8018,1507.6692 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -197.0397,1298.5365,1507.6692)) return callcmd::Newsredak(playerid, "");

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2570.1045,-1281.3558,1044.1250 ))
		{
			if(GetPlayerVirtualWorld(playerid)==11)
			{
				f(global_str, 300,"Склад армии ЛС.\n\n{BCB7B7}- Материалов %d\n- Патронов %d\n\nПатроны изготовляются на этом складе.\nДля их изготовления необходимы материалы!",GLS[25],OrgInfo[TEAM_ARMY][oMats]);
				SPD(playerid,0,0,!"",global_str, !"Закрыть","");
			}
			else if(GetPlayerVirtualWorld(playerid)==12)
			{
			    f(global_str, 300,"Склад армии LV.\n\n{BCB7B7}- Материалов %d\n- Патронов %d\n\nПатроны изготовляются на этом складе.\nДля их изготовления необходимы материалы!",GLS[26],OrgInfo[TEAM_ARMYLV][oMats]);
			    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
			}
			else if(GetPlayerVirtualWorld(playerid)==13)
			{
			    f(global_str, 300,"Склад армии SF.\n\n{BCB7B7}- Материалов %d\n- Патронов %d\n\nПатроны изготовляются на этом складе.\nДля их изготовления необходимы материалы!",GLS[43],OrgInfo[TEAM_ARMYSF][oMats]);
			    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
			}
			return 1;
		}

		for(new i; i < sizeof(bandos); i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 1.0, bandos[i][0], bandos[i][1], bandos[i][2])) {
				SPD(playerid, 655, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Варианты победы\n\n{eec74a}[1] {ffffff}- 3 Вишни - {73b461}x6\n{eec74a}[2] {ffffff}- 3 Винограда - {73b461}x8\n{eec74a}[3] {ffffff}- 3 числа - {73b461}x10\n{eec74a}[4] {ffffff}- 3 Колокола - {73b461}x12\n{eec74a}[5] {ffffff}- 3 слитка - {73b461}x14\n{eec74a}[6] {ffffff}- 6 слитков - {73b461}x20\n\n{eec74a}[7] {ffffff}- 2 Колокола - {73b461}x2\n{eec74a}[8] {ffffff}- 2 слитка - {73b461}x3\n{eec74a}[9] {ffffff}- 4 слитка - {73b461}x4\n\n{FFFFFF}Остальную информацию можно узнать в /help - Однорукий бандит!\n\n{f7a736}Введите количество фишек, которое хотите поставить\nна баланс игрового автомата.", !"Принять", !"Закрыть");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1155.9557,-1296.9935,1019.4139))
		{
			if(PI[playerid][pLevel] < 20 && !IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вип отделение доступно с 20 лет в штате!");
	        UpdatePlayerPos(playerid, 638.1970,-1239.7104,1024.3918);
	        SetPlayerFacingAngle(playerid, 268.8476);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1079.0709, 937.4053, 1604.8663 )) UpdatePlayerPos(playerid, HouseInfo[HouseEntered[playerid]][hExit_X], HouseInfo[HouseEntered[playerid]][hExit_Y], HouseInfo[HouseEntered[playerid]][hExit_Z], -1);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1415.0663, 2081.2036, 1502.0225 )) UpdatePlayerPos(playerid, -1426.0897, 2091.5784, 1508.2068);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1426.0897, 2091.5784, 1508.2068 )) UpdatePlayerPos(playerid, -1415.0663, 2081.2036, 1502.0225);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1089.8099,949.3317,1600.9935) || IsPlayerInRangeOfPoint(playerid, 1.0, 2637.8193,1169.8242,1038.1185))
		{
		    if(!IsPlayerHouse(playerid, HouseEntered[playerid])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете пользоваться чужим верстаком!");
			if(Int_GetPlayerData(playerid, "CraftStatus"))
			{
			    SCM(playerid, COLOR_RED, !"Вы прервали процесс создания предмета!");
				ShowCraft(playerid);
				KillTimer(besttimer[playerid]);
				DeletePVar(playerid, "CraftStatus");
				ClearAnimationsEx(playerid);
				TogglePlayerControllable(playerid, true);
			}
			else ShowCraft(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1108.0726,-1430.3044,15.7969) || IsPlayerInRangeOfPoint(playerid, 1.0, 1108.0330,-1427.3765,15.7969))
		{
			if(Int_GetPlayerData(playerid, "CraftStatus"))
			{
			    SCM(playerid, COLOR_RED, !"Вы прервали процесс создания предмета!");
				ShowCraft(playerid);
				KillTimer(besttimer[playerid]);
				DeletePVar(playerid, "CraftStatus");
				ClearAnimationsEx(playerid);
				TogglePlayerControllable(playerid, true);
			}
			else ShowCraft(playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2350.7820,-1961.5228,1601.0859 ))
		{
		    if(PI[playerid][pMoney] < 1200)
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег!");

		    GiveMoney(playerid, -1200);
		    _GiveGun(playerid, 14, 1);
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1539.0739,1964.0602,1020.9574 ))
		{
			SetPlayerInterior(playerid, 157);
			UpdatePlayerPos(playerid, 2134.4197,2496.2974,1024.9802, 1.0433);
		}
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2131.1404,2495.9873,1024.9802 ))
		{
			SetPlayerInterior(playerid, 158);
			UpdatePlayerPos(playerid, 1535.7570,1963.6580,1020.9574,181.5645);
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -2682.5276,796.4670,1501.0259 )) {
			mysql_tquery(mysql, "SELECT donation, NickName FROM accounts WHERE donation != 0 ORDER BY donation DESC LIMIT 20", "MysqlDonationBlago", "d", playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -2661.8655, 785.9218, 1500.9688 ))
		{
		    if(PI[playerid][pMember][0] != TEAM_BANK)
		    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этой двери!");

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, 1518.4906, -1777.8580, 33.4269);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1518.4906, -1777.8580, 33.4269 ))
		{
		    if(PI[playerid][pMember][0] != TEAM_BANK)
		    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этой двери!");
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 1);
			UpdatePlayerPos(playerid, -2661.8655, 785.9218, 1500.9688);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2000.4484, 1139.0625, 1038.6882 )) callcmd::ekonom(playerid, "");
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -2064.8579, 2709.9797, 1500.9766 ))
		{
		    if(PI[playerid][pMember][0] != TEAM_MERIALS)
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Дверь доступна только сотрудникам мэрии!");
			UpdatePlayerPos(playerid, 1473.2888,-1262.4442,14.5625);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1473.2888,-1262.4442,14.5625 ))
		{
		    if(PI[playerid][pMember][0] != TEAM_MERIALS)
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Дверь доступна только сотрудникам мэрии!");
			UpdatePlayerPos(playerid, -2064.8579, 2709.9797, 1500.9766);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 2);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 295.20001220703, -38.299999237061, 1001.5 ))
		{
		    new biz = BizEntered[playerid];
			if(GetPlayerLicense(playerid, 5))
			{
				if(biz != -1)
				{
				    if(BuyGuns[playerid] == -1)
		  			{
						CreateInfoText(playerid);
						
						SetPlayerFacingAngle(playerid, 180.0);
						UpdatePlayerPos(playerid, 295.1638,-37.8457,1001.5156);
						
						new gunid = BuyGunInfo[0][bgGunid],
							model = GetWeaponModel(gunid),
							price = BizData[BizEntered[playerid]][bItem][0];
						
						f(global_str, 100, "~w~Name: %s~n~Ammo: %d~n~Cost: $%d", WeaponNames[gunid], BuyGunInfo[0][bgAmmo][0], price);
						PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
						
						DestroyPlayerObject(playerid, TempBGObject[playerid]);
						
						BuyGuns[playerid] = BuyGunAmmo[playerid] = 0;
		                TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, GUN_ROT);
	                    
						SetBuyGunCamera(playerid);
	                   //if(BuyGunInfo[0][bgAmmo][1]) TextDrawShowForPlayer(playerid, ButtonUp);

						for(new i; i < 9; i++)
							TextDrawShowForPlayer(playerid, clothChois[i]);
						
						SelectTextDraw(playerid, 0xFFFFFFAA);
					}
					else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже покупаете оружие");
				}
				else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы ни в 1 из бизнесов");
			}
			else SendBotMessage(playerid,"Нееет! Я не продам пушку человеку без лицензии!");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2154.7354,1493.4109,10.8203 ))
		{
			SetPlayerInterior(playerid, 4);
			SetPlayerVirtualWorld(playerid, 1);
			SetPlayerFacingAngle(playerid, 263.5787);
			UpdatePlayerPos(playerid, 2351.2886, 720.3787, 1500.9688);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2351.2886,720.3787,1500.9688 ))
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerFacingAngle(playerid, 88.5033);
		    UpdatePlayerPos(playerid, 2154.9141, 1493.4940, 10.8203);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 3.0257, 32.9454, 1199.5938 ))
		{
		    SetPlayerInterior(playerid, 0);
		    if(GetPlayerInterior(playerid) == 1) UpdatePlayerPos(playerid, 1280.0313, -1531.1406, 1244.7153);
		    if(GetPlayerInterior(playerid) == 2) UpdatePlayerPos(playerid, -2172.6094, -54.8171, 1244.2686);
		    if(GetPlayerInterior(playerid) == 3) UpdatePlayerPos(playerid, 2031.6953, 1729.3984, 1244.3545);
		    SetPlayerVirtualWorld(playerid, 0);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1451.6128, -2285.0105, 13.5469 ) || IsPlayerInRangeOfPoint(playerid, 1, 1673.0103, 1447.5935, 10.7867 ) || IsPlayerInRangeOfPoint(playerid, 1, -1409.4084, -298.2005, 14.1484 )) {
		  	if(PI[playerid][pWanted] > 0)
			  	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрокам с розыском, запрещено прыгать с парашюта!");
			SPD(playerid, 9982, DIALOG_STYLE_LIST, "Стоимость прыжка: {B5FA53}900$", "Прыгнуть с парашютом над городом: {B5FA53}LS\nПрыгнуть с парашютом над городом: {53FA78}SF\nПрыгнуть с парашютом над городом: {FACE53}LV", !"Принять", !"Отмена");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -2083.3413, 2675.4199, 1500.9647)) SPD(playerid, 6682, DIALOG_STYLE_LIST, "", "{FE9DA7}>>> {FFFFFF}Оставить жалобу\n{EDBA60}>>> {FFFFFF}Читать жалобы", "Открыть", !"Отмена");
		if(IsPlayerInRangeOfPoint(playerid, 1.0, -1312.6182, 20.8936, 1597.6073))
		{
			UpdatePlayerPos(playerid, -1771.9169, -2017.0677, 1500.7853);
			SetPlayerFacingAngle(playerid, 14.4063);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2073.8965,-1369.1693,1007.1063 ))
		{
		    UpdatePlayerPos(playerid,2342.5989,-673.4814,1055.4230);
		    SetPlayerFacingAngle(playerid,269.5394);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2342.5989,-673.4814,1055.4230 ))
		{
      		UpdatePlayerPos(playerid,2073.8965,-1369.1693,1007.1063);
		    SetPlayerFacingAngle(playerid,91.2718);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 483.0550,246.8815,3197.7139 )) return UpdatePlayerPos(playerid,474.5011,216.2406,3194.6360);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 474.5011,216.2406,3194.6360 ))return  UpdatePlayerPos(playerid,483.0550,246.8815,3197.7139);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 481.3205,216.2760,3194.6360 ))return  UpdatePlayerPos(playerid,461.6805,223.6825,3197.7139);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 461.6805,223.6825,3197.7139 ))return  UpdatePlayerPos(playerid,481.3205,216.2760,3194.6360);
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1583.3033,-1637.5920,13.3905 ))
	    {
			if(PI[playerid][pMember][0] !=1)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет ключей от двери");
	        UpdatePlayerPos(playerid,1583.3656,-1638.4817,13.3333);
	        return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1583.3656,-1638.4817,13.3333 ))
	    {
	        if(PI[playerid][pMember][0] !=1)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет ключей от двери");
            UpdatePlayerPos(playerid,1583.3033,-1637.5920,13.3905);
            return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 494.7682,1318.9098,774.4839 ))
	    {
	        if(PI[playerid][pBankPass] != 0)
	        	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}У вас уже есть банковская карта!", !"Закрыть", !"");

	        if(PI[playerid][pMoney] < 1000)
	        	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

	        SPD(playerid, 779, DIALOG_STYLE_MSGBOX, !"", !"{FFA500}Вас приветсвуют в банковском отделении города Las Venturas!\n\n{FFFFFF}Вы действительно хотите получить банковскую карту?\nПри получении банковской карты вы принимаете все условия в использовании наших услуг.\nВы установите пароль на карту, чтобы защитить ее от злоумышлеников.", !"Принять", !"Отмена");
	        return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 951.6823,2451.9871,1601.9871 ))
	    {
	        if(PI[playerid][pBankPass] != 0)
	        	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}У вас уже есть банковская карта!", !"Закрыть", !"");

	        if(PI[playerid][pMoney] < 1500)
	        	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

	        SPD(playerid, 779, DIALOG_STYLE_MSGBOX, !"", !"{FFA500}Вас приветсвуют в банковском отделении города San Fierro!\n\n{FFFFFF}Вы действительно хотите получить банковскую карту?\nПри получении банковской карты вы принимаете все условия в использовании наших услуг.\nВы установите пароль на карту, чтобы защитить ее от злоумышлеников.", !"Принять", !"Отмена");
	        return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -38.9923,173.5192,2.4297 ))
	    {
			f(global_str, 600,"{FFFFFF}Предприятие: {73B461}EasterBoard Farm.{FFFFFF}\nНа данный момент зарплата на ферме составляет:\n\n- Начинающий фермер: {73B461}%d${FFFFFF}\n- Тракторист: {73B461}%d${FFFFFF}\n- Комбайнер: {73B461}%d${FFFFFF}\n- Водитель кукурузника: {73B461}%d${FFFFFF}\n\n{73B461}Следите за новостями!",GLS[4],GLS[4]*14,GLS[4]*26,GLS[4]*54);
			SPD(playerid,0,0,"Информация",global_str, !"Принять","");
			return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, -83.2843,-302.1633,2.7646 ))
	    {
			f(global_str, 300,"{FFFFFF}Предприятие: {73B461}Завод.{FFFFFF}\n\nНа данный момент зарплата составляет: {73B461}%d${FFFFFF}\n{73B461}Следите за новостями!",GLS[5]);
			SPD(playerid,0,0,"Информация",global_str, !"Принять","");
			return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1969.3076,-1981.4128,13.5469 ))
	    {
			f(global_str, 300,"{FFFFFF}Предприятие: {73B461}Грузчики.{FFFFFF}\n\nНа данный момент зарплата составляет: {73B461}%d${FFFFFF}\n{73B461}Следите за новостями!",GLS[6]);
			SPD(playerid,0,0,"Информация",global_str, !"Принять","");
			return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1460.8505,-1743.3596,13.5469 ))
	    {
			f(global_str, 400,"{73B461}Центральный банк Los Santos.{FFFFFF}\n\nНалог на авто: {73B461}%d{FFFFFF}\nНалог на дом: {73B461}%d{FFFFFF}\nНалог на бизнес: {73B461}%d{FFFFFF}\nНалог на трейлеры: {73B461}%d\n\nНалоги могут изменится в любой момент.\n{73B461}Следите за новостями!",GLS[1],GLS[2],GLS[3], GLS[68]);
			SPD(playerid,0,0,"Информация",global_str, !"Принять","");
			return 1;
	    }
     	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -954.5001,-2350.5596,1701.0869) ||
	    IsPlayerInRangeOfPoint(playerid, 1.0, 2327.74, 70.09, 1502.00) ||
		IsPlayerInRangeOfPoint(playerid, 1.0, -2502.4258,-650.1299,1331.6520) ||
	 	IsPlayerInRangeOfPoint(playerid, 1.0, 583.2088,1433.3907,1904.2689) ||
	    IsPlayerInRangeOfPoint(playerid, 1.0, 485.16, 849.70, 1500.96) ||
		IsPlayerInRangeOfPoint(playerid, 1.0, -1587.6157,-121.8007,1501.0859))
	    {
	        if(!IsACop(playerid) && !IsAArmy(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Доступ к спутнику имеется только у военных и правоохранных организаций!");
        	if(Int_GetPlayerData(playerid,"reloader")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
        	//if(PI[playerid][pRank]<9)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет доступа к этому разделу!");
            if(!ShowMap[playerid]) TogglePlayerMap(playerid, 1);
        	else TogglePlayerMap(playerid, 0);
        	SetPVarInt(playerid,"reloader",Global_Time+2);
        	return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 592.9380,1428.2743,1900.7980 )) return UpdatePlayerPos(playerid,592.8829,1426.6675,1900.7980);
		else if(IsPlayerInRangeOfPoint(playerid, 0.5, 592.8829,1426.6675,1900.7980 )) return UpdatePlayerPos(playerid,592.9380,1428.2743,1900.7980);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 618.9825,-568.0446,26.1432 ))
		{
		    SetPlayerInterior(playerid,6);
	 		SetPlayerVirtualWorld(playerid,11);
	 		UpdatePlayerPos(playerid,2365.45, 73.89, 1502.01);
	 		SetPlayerFacingAngle(playerid,0.00);
	 		return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2365.59, 72.03, 1502.01))
		{
			if(GetPlayerVirtualWorld(playerid)==11)
			{
			    SetPlayerInterior(playerid,0);
		 		SetPlayerVirtualWorld(playerid,0);
				UpdatePlayerPos(playerid,618.9825,-568.0446,26.1432);
				SetPlayerFacingAngle(playerid,84.4441);
				return 1;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1165.4773,1346.2273,10.9219 ))return UpdatePlayerPos(playerid,1165.4714,1344.7832,10.8125);
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1165.4714,1344.7832,10.8125 ))return UpdatePlayerPos(playerid,1165.4773,1346.2273,10.9219);
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2096.8794,797.0545,1027.1211 ))
			return SPD(playerid, 189 , DIALOG_STYLE_LIST, !"", !"{FFFFFF}Пожертвовать: {FF6347}10 000$\nПожертвовать: {FF6347}50 000$\nПожертвовать: {FF6347}200 000$\nПожертвовать: {FF6347}1 000 000$\nПожертвовать: {FF6347}5 000 000$\nПожертвовать: {FF6347}100 000 000$ [{FFFF00}Бонус: Аксессуар Доллар{FF6347}]", !"Принять", !"Отклонить");
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2657.75, 808.67, 1500.97))
	 	{
	 	    foreach(new i: Player)
	 	    {
	 	        if(PI[i][pCredit]>0 && pTemp[i][tAuthorized])
	 	        {
	 	            f(global_str, 150,"- %s\t\t\t - Должен: %d\t\tУровень розыска: %d",PN(i),PI[i][pCredit],PI[i][pWanted]);
	 	            SPD(playerid,0,0,"Должники банка",global_str, !"Принять","");
	 	        }
	 	    }
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 199.1063, -128.3574, 1003.5152 ))
		{
			if(GetSkinInfo(PI[playerid][pSkin][0]) != GetPlayerSkin(playerid)) return SCM (playerid,COLOR_VALIK, !"[Ошибка] {FFFFFF}Вы не можете переодеться , так как вы сейчас в служебной одежде!{FFFFFF}");
			if(InviteOffer[playerid]!= INVALID_PLAYER_ID)return 1;

			if(pTemp[playerid][tSkinSelectedId] == -1) SetPlayerBuySkin(playerid, 1);
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1514.1516, 1276.8065, 10.8455 ) && GetPlayerInterior(playerid) == 240 && GetPlayerVirtualWorld(playerid) == 5)
		{
	        if(CuffedTime[playerid] > 0) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы обездвижены и не можете двигаться");
			if(DrivingTest[playerid] == 0)
			{
			    PddState[playerid] = 0;
				SCM(playerid, COLOR_YELLOW, "|____ Параграф 1: Общие положения ____|");
		  		SCM(playerid, COLOR_WHITE, !"1.1. Настоящие Правила дорожного движения устанавливают единый порядок дорожного движения на всей территории San Andreas.");
		  		SCM(playerid, COLOR_WHITE, !" 1.2. Лица, нарушившие Правила, несут ответственность в соответствии с действующим законодательством.");
				SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Выход\"", "Далее", "Выход");
				return 1;
			}
			else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}В данный момент вы сдаете тест на права.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1746.6765,2246.2012,10.8203 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 665.9875,-1576.6426,14.4777 ) )
	 	{
			PlayerJob[playerid] = JOB_PIZZA;
			SPD(playerid,28,0,"Работа: Развозчик пиццы","{FFFFFF}Вы собираетесь устроиться на работу Развозчиком пиццы\nВы согласны с условиями?","Да","Нет");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1749.0339,2246.2012,10.8203 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 668.0192,-1576.7659,14.4074 ))
		{
			if(PlayerJob[playerid] != JOB_PIZZA) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не развозчик пиццы!");
			if(!InJob[playerid]) SPD(playerid,1222,0,"Работа 'Развозчик пиццы'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
			else SPD(playerid,1223,0,"Работа 'Развозчик пиццы'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
			return 1;
	  	}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1979.9426,-1971.1410,13.5825 ))
	 	{
			PlayerJob[playerid] = JOB_PORTER;
			SPD(playerid,28,0,"Работа: Грузчик","{FFFFFF}Вы собираетесь устроиться на работу Грузчиком\nВы согласны с условиями?","Да","Нет");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 207.5972,-238.0196,1.5772 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 2111.5618,894.6057,10.9149 ))
	 	{
			if(PlayerJob[playerid]!=JOB_MECHANIC )return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не работаете механиком!");
			if(mehan[playerid]!=2) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не переоделись!");
            SPD(playerid,381,2,"Выбор работы","1. Отремонтировать авто\n2. Починить двигатель", !"Принять", !"Отмена");
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2362.8149,1256.1603,1505.3315))
		{
			if(PlayerJob[playerid]!=JOB_MECHANIC )return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не работаете механиком!");
			if(!InJob[playerid]) SPD(playerid,659,0,"Работа 'Механик автосервиса'","{FFFFFF}Вы хотите заступить на смену?\t","Да","Нет");
			else SPD(playerid,660,0,"Работа 'Механик автосервиса'","{FFFFFF}Вы хотите завершить смену?\t","Да","Нет");
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 200.7409,-244.7211,1.5713 ) || IsPlayerInRangeOfPoint(playerid, 1.0, -312.7885,1191.2400,19.7613))
		{
			if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы здесь не работаете!");
			if(!InJob[playerid]) SPD(playerid,661,0,"Работа 'Механик'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
			else SPD(playerid,662,0,"Работа 'Механик'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
			return true;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 33.8607,2232.1184,1501.6503 ))
	 	{
   			new hour,minuite,second;
		    gettime(hour,minuite,second);
		    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
			{
		 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
		 		return 1;
			}
	 	    if(PlayerJob[playerid] != JOB_GUIDE) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы здесь не работаете!");
		    if(!InJob[playerid]) SPD(playerid,663,0,"Работа 'Крупье'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
			else SPD(playerid,664,0,"Работа 'Крупье'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
			return 1;
		}

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1985.3893, 994.8577, 11.2320 ) || IsPlayerInRangeOfPoint(playerid, 1.0, 1967.6718, 1014.8460, 10.9900 ))
			return SPD(playerid, 665, DIALOG_STYLE_LIST, !"", !"{acee4a}[Купить] {FFFFFF}Фишки\n{eec74a}[Продать] {FFFFFF}Фишки", !"Принять", !"Отмена");

	    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1980.1283,-1968.4868,13.5825 ))
		{
			if(PlayerJob[playerid] != JOB_PORTER) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не грузчик");
			if(!InJob[playerid]) SPD(playerid,666,0,"Работа 'Грузчик'","{FFFFFF}Вы хотите переодеться чтобы начать работу?","Да","Нет");
			else SPD(playerid,667,0,"Работа 'Грузчик'","{FFFFFF}Вы хотите переодеться чтобы завершить работу?","Да","Нет");
			return 1;
	  	}
	  	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1152.1946,-1303.6064,1019.4307) || IsPlayerInRangeOfPoint(playerid, 1.0, -1609.7928, -110.7104, 1501.0859) || IsPlayerInRangeOfPoint(playerid, 1.0, 1169.6074, -1333.3698, -0.8618)|| IsPlayerInRangeOfPoint(playerid, 1.0, 462.35, 874.83, 1500.96) || IsPlayerInRangeOfPoint(playerid, 1.0, 550.3827, 1472.2921, 1900.7980) || IsPlayerInRangeOfPoint(playerid, 1.0, -1324.4010, 9.3590, 1601.0859))
		{
			if(!PI[playerid][pHeal])
			{
				new Float:Health;
				GetPlayerHealth(playerid, Health);
				if(Health < 100.0) SPD(playerid, 186, DIALOG_STYLE_MSGBOX, "Курс лечения", "{FFFFFF}Вы хотите пройти курс лечения?", "Да", "Нет");
				else SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Вы здоровы!");
			}
			else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы уже проходите лечение!");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1510.8745, 1360.7517, 10.9738 ) && GetPlayerVirtualWorld(playerid) == 1 && GetPlayerInterior(playerid) == 220)
		{
			if(!IsValidPassport(playerid)) SPD(playerid, 147, 2, "Выберите пол", "{E64444}-{FFFFFF} Мужчина\n{E64444}-{FFFFFF} Женщина", "Далее", !"Отмена");
			else SendBotMessage(playerid,"Вы в своем уме? У вас уже есть паспорт!");
			return 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2847.9468,-2519.4592,11.9786))
		{
			UpdatePlayerPos(playerid, 2842.3452,-2523.9382,17.7489);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2842.3452,-2523.9382,17.7489))
		{
			UpdatePlayerPos(playerid, 2847.9468,-2519.4592,11.9786);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2093.2317,797.1243,1027.1211))
		{
			return SPD(playerid, 3392, DIALOG_STYLE_LIST, !"", !"Список рабочих мест\n{ff6016}Уволиться с работы", !"Принять", !"Отмена");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -190.34, 1338.59, 1500.98) || IsPlayerInRangeOfPoint(playerid, 1.0, 216.7613,-247.8414,1.9079)) return callcmd::ad(playerid, "");

		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2033.3712,-117.4146,1035.1719))
		{
		   if(TimetoReturn[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Подождите пока арендованную машину заберут на стоянку!");

		   if(FlyivingTest[playerid] != 0 || CarTest[playerid] != -1)
		   {
                FlyivingTest[playerid]= 0;
	 			CarTest[playerid] = -1;
	 			SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы отменили практическую часть экзамена.");
	 			DisablePlayerRaceCheckpoint(playerid);
				return 1;
		   }
		   else if(FlyivingTest[playerid] == 0 && CarTest[playerid] == -1)
		   {
				if(GetPlayerLicense(playerid, 2))
					return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас уже есть лицензия на полеты!");
    			
				SPD(playerid,3331,0,"","{FFFFFF}Вас приветствует авиашкола {FFA500}Las Venturas{FFFFFF}\nСтоимость прохода экзамена на управление воздушным транспортом: 20 000$\nДля продолжения нажмите{B03131} 'Далее'{FFFFFF}","Далее", !"Отмена");
				FlyivingTest[playerid] = 1;
				Question[playerid] = 0;
				Errors[playerid] = 0;
				TestFASKMassive[playerid] = { 0, 1, 2, 3, 4, 5, 6 };
				RandomMassive(TestFASKMassive[playerid], 7);
				return 1;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1520.6713,1274.9663,10.8455) or IsPlayerInRangeOfPoint(playerid, 1.0, 1520.6670,1272.5221,10.8455) or IsPlayerInRangeOfPoint(playerid, 1.0, 1517.1656,1272.4816,10.8455) or IsPlayerInRangeOfPoint(playerid, 1.0, 1517.1669,1275.0220,10.8455) or IsPlayerInRangeOfPoint(playerid, 1.0, 1517.1661,1278.5099,10.8455) or IsPlayerInRangeOfPoint(playerid, 1.0, 1517.1660,1281.0385,10.8455) or IsPlayerInRangeOfPoint(playerid, 1.0, 1520.6711,1280.9509,10.8455) or IsPlayerInRangeOfPoint(playerid, 1.0, 1520.6713,1278.5593,10.8455) && GetPlayerInterior(playerid) == 240 && GetPlayerVirtualWorld(playerid) == 5) 
			return SPD(playerid, 47, DIALOG_STYLE_LIST, !"", !"1. Сдать экзамен на вождения {B4EC64}авто\n{FFFFFF}2. Сдать экзамен на вождения {B4EC64}мото-транспорта\n{FFFFFF}3. Где получить права на {B4EC64}полеты?\n{FFFFFF}4. Как получить лицензию на {B4EC64}оружие?", !"Выбрать", !"Отмена");
		
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1768.1641, -1992.0632, 1500.7856))
		{
		    if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы находитесь на лечении");
			if(GetPlayerVirtualWorld(playerid)==1)
			{
                SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			    UpdatePlayerPos(playerid, 1147.9972,-1343.0070,13.6483);
			    SetPlayerFacingAngle(playerid,177.6540);
			    NoEnterPickup[playerid] =2;
	    		TogglePlayerControllable(playerid,false);
			}
			else if(GetPlayerVirtualWorld(playerid)==2)
			{
			    SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			    UpdatePlayerPos(playerid, 1593.2783,1724.0553,10.8203);
			}
			else if(GetPlayerVirtualWorld(playerid)==3)
			{
			    SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			    UpdatePlayerPos(playerid, -2594.7959,642.3338,14.4531);
			    SetPlayerFacingAngle(playerid,271.9759);
			}
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,1593.2783,1724.0553,10.8203))
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 2);
			UpdatePlayerPos(playerid, -1768.1641, -1992.0632, 1500.7856);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Enter", 3000, 3);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1147.9972,-1343.0070,13.6483))
		{
		    SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 1);
			UpdatePlayerPos(playerid, -1768.1641, -1992.0632, 1500.7856);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Enter", 3000, 3);
			NoEnterPickup[playerid] =2;
	    	TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2594.7959,642.3338,14.4531))
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 3);
			UpdatePlayerPos(playerid, -1768.1641, -1992.0632, 1500.7856);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Enter", 3000, 3);
			NoEnterPickup[playerid] =2;
	    	TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2512.0083,-649.9902,1331.6420))
		{
		    if(GetTeamID(playerid) != TEAM_FBI) return 0;
		    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не на дежурстве");
		    SPD(playerid, 240, DIALOG_STYLE_LIST, !"", !"{B03131}-{FFFFFF} Стандарт [4+]\n{B03131}-{FFFFFF} Средний [6+]\n{B03131}-{FFFFFF} Высший [9]\n{B03131}-{FFFFFF} Переодеться в служебную одежду", !"Выбор", !"Отмена");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -618.6426,-679.4822,1001.0859))
		{
		    if(!IsAtFrakcia(playerid, 1)) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Дверь заперта!");
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, 279.5766,-1619.0736,114.6778);
			SetPlayerFacingAngle(playerid, 261.7703);
			NoEnterPickup[playerid] =2;
 			TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 279.5766,-1619.0736,114.6778))
		{
		    if(!IsAtFrakcia(playerid, 1)) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Дверь заперта!");
		    SetPlayerInterior(playerid, 2);
		    SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, -618.6426,-679.4822,1001.0859);
			SetPlayerFacingAngle(playerid, 271.2979);
			NoEnterPickup[playerid] =2;
 			TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2514.1074,-634.8470,1327.9960))
		{
		    if(!IsAtFrakcia(playerid, 1)) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Дверь заперта!");
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, -2467.6902,529.4441,51.0896);
			SetPlayerFacingAngle(playerid, 170.8995);
			NoEnterPickup[playerid] =2;
 			TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2467.6902,529.4441,51.0896))
		{
		    if(!IsAtFrakcia(playerid, 1)) return SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Дверь заперта!");
		    SetPlayerInterior(playerid, 2);
		    SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, -2514.1074,-634.8470,1327.9960);
			SetPlayerFacingAngle(playerid, 177.6572);
			NoEnterPickup[playerid] =2;
 			TogglePlayerControllable(playerid,false);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1492.7451,1308.4236,1093.2927))
		{
  			new hour,minuite,second;
		    gettime(hour,minuite,second);
		    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
			{
		 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
		 		return 1;
			}
		    if(GetPlayerVirtualWorld(playerid) == 1)
		    {
		        if(HouseNalogState2[playerid] == 2)
				{
		            f(global_str, 170,"[Информация] {FFFFFF}Вы получили {73B461}%d${FFFFFF} за проделанную работу",GLS[12]);
		            SCM(playerid,COLOR_WHITE, global_str);
		            GiveMoney(playerid,GLS[12]);
		            HouseNalogState2[playerid] = 0;
				}
			    if(PlayerJob[playerid] != JOB_NALOG) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не работаете в Налоговой");
				new numik;
				global_str = "";
				for(new houseid=random(MAX_HOUSES);houseid< MAX_HOUSES;houseid++)
				{
				    if(HouseInfo[houseid][hNalog2] < 200 || strcmp(HouseInfo[houseid][hOwner],"The State",true) == 0 ) continue;
				    numik++;
					f(global_str,3000,"%s%s\t\t\t{40B02F}$%d{FFFFFF}\n",global_str,HouseInfo[houseid][hOwner],HouseInfo[houseid][hNalog2]);
					if(numik>=20)break;
				}
				if(strlen(global_str) > 0 )
				{
				    f(global_str,3100,"Имя/Фамилия\tДолжен\t\n%s",global_str);
					SPD(playerid,982,5,"Должники", global_str, !"Выбрать", !"Отмена");
				}
				else SPD(playerid,0,0,"Информация","{FFFFFF}На данный момент доступной работы нет!\n\n{40B02F}Попробуйте поискать работу еще раз.", !"Закрыть","");
			}
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 485.50, 867.03, 1500.96) || IsPlayerInRangeOfPoint(playerid, 1.0, 589.6020,1420.4148,1900.7980) || IsPlayerInRangeOfPoint(playerid, 1.0, -1349.3669,493.8840,11.1953))
		{
		    if(Getemer[playerid]>Global_Time)return 0;
	    	Getemer[playerid]=Global_Time+5;
		    if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в гос. структурах!");
		    GiveFullness(playerid,50);
			ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы немного перекусили. Посмотреть состояние голода можно {FFFFFF}/satiety");
   			SendEatBot(playerid);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2761.0051, -2565.0754, 13.6281))
		{
            if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас нет ключей от двери");
            UpdatePlayerPos(playerid, 2760.6651, -2566.2554, 13.6281);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2760.6651, -2566.2554, 13.6281))
		{
            if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас нет ключей от двери");
		    UpdatePlayerPos(playerid, 2761.0051, -2565.0754, 13.6281);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2755.5088, -2515.5393, 13.6281))
		{
            if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас нет ключей от двери");
            UpdatePlayerPos(playerid, 2726.0520, -2521.9421, 29.8281);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2726.0520, -2521.9421, 29.8281))
		{
            if(!IsAtFrakcia(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас нет ключей от двери");
		    UpdatePlayerPos(playerid, 2755.5088, -2515.5393, 13.6281);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 286.17, -30.55, 1001.52))
		{
			if(PI[playerid][pMoney] < 500) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег!");
			GiveBizMoney(BizEntered[playerid], 500);
        	GiveMoney(playerid, -500);
        	PI[playerid][pTir] = 1;
			UpdatePlayerPos(playerid, 286.13, -27.63, 1001.52);
			GameTextForPlayer(playerid, !"~w~Welcome to~n~~b~shooting range", 5000, 1);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 286.1845, -24.4473, 1001.5156))
		{
		    SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно надели наушники для того чтобы уберечь себя от сильного шума.");
		    SCM(playerid, -1, !"Не снимайте наушники, пока не закончите тренировку, вы можете попасть в больницу!");
		    if(PlayerPlayed{playerid})
		 	{
				StopAudioStreamForPlayer(playerid);
				RemovePlayerAttachedObject(playerid, 6);
				PlayerPlayed{playerid} = false;
				SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Вы выключили радио.");
			}
		    SPD(playerid, 9811, DIALOG_STYLE_LIST, !"Радио", !"[1] Radio Electron\n[2] Radio LaserStar\n[3] Radio Record FM\n[4] Radio Europa Plus FM\n[5] Radio Premium FM\n[6] Radio Zaycev FM\n[7] Radio Dorognoe\n[8] Radio Chanson FM\n[9] Radio Zabawa FM\n[10] Radio Nawe FM\n[11] Radio Pioner FM\n[12] Radio Jazz FM", !"Выбрать", !"Отмена");
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 286.08, -29.09, 1001.52))
		{
			PI[playerid][pTir] = 0;
			UpdatePlayerPos(playerid, 286.14, -32.38, 1001.52);
            return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 544.7178, -587.9365, 23.0899))
		{
		    SetPlayerInterior(playerid, 11);
		    SetPlayerVirtualWorld(playerid, 2);
		    UpdatePlayerPos(playerid, 229.2502, 2367.7720, 1500.9756);
		    SetPlayerFacingAngle(playerid, 88.2878);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 229.2502, 2367.7720, 1500.9756))
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    UpdatePlayerPos(playerid, 544.3036, -590.3224, 22.8681);
		    SetPlayerFacingAngle(playerid, 197.0002);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2201.2429,-2340.7310,30.6250))
		{
		    return SPD(playerid, 9821, DIALOG_STYLE_LIST, !"", !"{c4df3d}<= {FFFFFF}Где взять черепа?\n{c4df3d}<= {FFFFFF}Что можно купить за черепа?\n{8d9f37}<= {FFFFFF}Как купить товар за черепа?", !"Принять", !"Отмена");
		}
    }
	if(PRESSED(KEY_FIRE))
	{
	    if(CreteBomb[playerid]>200) IsDropBomb(playerid);
	    if(GetPlayerWeaponEx(playerid) == 41)
	    {
	        foreach(Vehicle, car)
	        {
			    GetVehiclePos(car,XYZ[0],XYZ[1],XYZ[2]);
		        if(IsPlayerInRangeOfPoint(playerid,2,XYZ[0],XYZ[1],XYZ[2]))
		        {
			        if(GetPlayerWeaponEx(playerid) == 41)
				    {
				        if(VehicleInfo[car][vTeam]!=0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете покрасить эту машину!");
				     	if(IsPlayerInAnyVehicle(playerid))return 0;
			    	    if(Int_GetPlayerData(playerid, !"balon") == 0 || Int_GetPlayerData(playerid, !"balon1") == 0 ) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не выбрали цвет для покраски или у вас нет балончика!");
			    	    if(!IsPlayerHaveCar(playerid, car))
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш автомобиль!");

		     	 		SetPVarInt(playerid, "ProcessCarRep", Int_GetPlayerData(playerid, "ProcessCarRep")+1);
		     	 		f(global_str, 80,"Complated %d/30", Int_GetPlayerData(playerid, "ProcessCarRep"));
		    	 		GameTextForPlayer(playerid, global_str, 700, 3);
		    			if(Int_GetPlayerData(playerid, "ProcessCarRep") == 30)
		    			{
	    			        new carid = GetVehicleID(car);
		    				ChangeVehicleColor(car,Int_GetPlayerData(playerid,"balon"),Int_GetPlayerData(playerid,"balon1"));
			    			CarInfo[carid][cColor_1] = Int_GetPlayerData(playerid,"balon");
			    			CarInfo[carid][cColor_2] = Int_GetPlayerData(playerid,"balon1");
			    			DeletePVar(playerid, "ProcessCarRep");
			     			SaveOwnableCar(car);
							sendPlayerBattlepassAction(playerid, 14);
			    		}
		    			return 1;
		    		}
	    		}
	    	}
		}
	}
	if(!Cuffed[playerid])
	{
        if(TheftCarID[playerid] != 0)
		{
		    new carid = TheftCarID[playerid];
		    new Float:X,Float:Y,Float:Z;
		    GetVehiclePos(carid, X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z))
			{
			    if(!TheftTime[playerid])
			    {
					if(TheftKey[playerid] != 0 && PRESSED(TheftKey[playerid]))
				    {
					    TheftCount[playerid] ++;
					    ShowPlayerActionText(playerid, "~g~Succes!");
	    				ShowPlayerActionBand(playerid, TheftCount[playerid], 10);
				       	if(TheftCount[playerid] >= 10)
					   	{
						   	TheftTime[playerid] = 2;
						   	ApplyAnimationEx(playerid,"GANGS","prtial_gngtlkB",4.1, 0, 1, 1, 1, 0, 1);
						}
					    else
						{
							TheftTime[playerid] = 3;
							ApplyAnimationEx(playerid,"ROB_BANK","CAT_Safe_Rob",4.1, 0, 1, 1, 1, 0, 1);
						}
					}
					else
				    {
				        if(!RELEASED(TheftKey[playerid]))
				        {
							TheftKey[playerid] = 0;
							TheftTime[playerid] = 0;
							TheftCount[playerid] = 0;
							TheftCarID[playerid] = 0;
							TogglePlayerControllable(playerid, true);
							HidePlayerActionText(playerid);
	    					HidePlayerActionBand(playerid);
						}
					}
					new rand1 = random(10),rand2 = random(10);
					if(rand1 == rand2)
					{
					    DeleteItem(playerid, 5818);
					    SCM(playerid, COLOR_RED, !"[Подсказка]{FFFFFF} Вы сломали отмычку!");
					    GameTextForPlayer(playerid, !"break", 0, 1);
					    TheftKey[playerid] =
						TheftTime[playerid] =
						TheftCount[playerid] =
						TheftCarID[playerid] = 0;
						TogglePlayerControllable(playerid, true);
						HidePlayerActionText(playerid);
	    				HidePlayerActionBand(playerid);
					}
				}
			}
		}
	}
	else if(Cuffed[playerid])
	{
	    if(!CuffedTime[playerid])
		{
			if(!pTemp[playerid][BreakTime])
			{
				if(pTemp[playerid][BreakKey] != 0)
				{
					if(PRESSED(pTemp[playerid][BreakKey]))
					{
						pTemp[playerid][BreakCount] ++;
						ShowPlayerActionText(playerid, "~g~Succes!");
	    				ShowPlayerActionBand(playerid, pTemp[playerid][BreakCount], 10);
						if(pTemp[playerid][BreakCount] >= 10)
						{
							DeleteItem(playerid, 558, 1);
							SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно взломали наручники");
							UnCuffPlayer(playerid);
					        if(GotoInfo[playerid][gtGoID]!=INVALID_PLAYER_ID)
					        {
	                            CheckPlayerGoCuff(GotoInfo[playerid][gtGoID]);
								CheckPlayerGoCuff(playerid);
							}
						}
						else pTemp[playerid][BreakTime] = 2;
					}
					else
					{
						pTemp[playerid][BreakTime] = 2;
						ShowPlayerActionText(playerid, "~r~Fail!");
					}
				}
			}
		}
	}

 	if(newkeys & KEY_WALK && !IsPlayerInAnyVehicle(playerid))
	{
		if(CuffedTime[playerid] > 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы обездвижены и не можете двигаться");
	    if(InfoHouse[playerid] != -1) function_InteractionProperty(playerid, 0);
	    if(HouseEntered[playerid] != -1)
	    {
	        new i = HouseEntered[playerid];
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hExit_X], HouseInfo[i][hExit_Y], HouseInfo[i][hExit_Z]))
	        	if(GetPlayerVirtualWorld(playerid) == (i+50)) return callcmd::exit(playerid);
	    }
	    if(InfoBiz[playerid] != -1) function_InteractionProperty(playerid, 0);
	    if(!(BizEntered[playerid] == -1))
	    {
	        new i = BizEntered[playerid];
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, BizData[i][bExit][0], BizData[i][bExit][1], BizData[i][bExit][2]))
				return SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0), UpdatePlayerPos(playerid,BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2]), BizEntered[playerid] = -1;
		}
	}
	if(PRESSED(1032))
	{
	    if(PI[playerid][pShield] > 0)
		{
		    if(!UsingShield{playerid})
			{
			    ResetShield[playerid] = 20;
			    UsingShield{playerid} = true;
			    if(!IsPlayerAttachedSlotUsedEx(playerid, 7))SetPlayerAttachedObject(playerid, 7, 18637, 14, 0.0, 0.0, 0.0, 0.0, 180.0, 180.0);
				ApplyAnimationEx(playerid, "PED", "WEAPON_CROUCH", 4.1, 0, 1, 1, 1, 0, 0);
			}
			else
			{
			    if(!IsPlayerAttachedSlotUsedEx(playerid, 7))SetPlayerAttachedObject(playerid, 7, 18637, 1, 0.15, -0.05, 0.18, 90, 0, 270);
			    UsingShield{playerid} = false;
			    ClearAnimationsEx(playerid);
			}
		}
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new carid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) == 2)
	    {
			if(newkeys & KEY_SUBMISSION)
			{
				switch(VehicleInfo[carid][vJob])
				{
					case 1:
					{
						if(rabden[playerid] == 1) SPD(playerid,RABOTABUS+5,0,"Работодатель","Вы действительно хотите начать?","Да","Нет");
						else SPD(playerid,RABOTABUS+5,0,"Работодатель","Вы действительно хотите завершить?","Да","Нет");
					}
					case 5: callcmd::taxi(playerid,"");
				}
			}
            if(PRESSED(KEY_NO))
			{
				callcmd::engine(playerid);
				return 1;
	    	}
			if(PRESSED(KEY_ACTION)) return callcmd::lights(playerid);
	        if(PRESSED(KEY_SUBMISSION))
	        {
			    if(IsACopCar(carid) && IsACop(playerid))
			    {
				    if(CarStrips[carid] > 0)
				    {
						if(StripCount < 50)
						{
							if(TempStripObject[carid] == -1)
							{
							    TempStripObject[carid] = CreateDynamicObject(2899,0,0,0,0,0,0);
							    AttachDynamicObjectToVehicle(TempStripObject[carid], carid, 0.0, -2.2, -0.3, 0.0, 0.0, 90.0);
								SCM(playerid,COLOR_GREY, !"Сбрасывание шипов...");
								if(IsPlayerInVehicle(playerid, carid))
								{
								    if(CarStrips[carid] > 0)
								    {
										if(StripCount < MAX_STRIPS)
										{
											new Float:X,Float:Y,Float:Z,Float:A;
											GetVehicleShiftPos(carid, 1, X, Y, Z, 3.0);
											GetVehicleZAngle(carid, A);
											DestroyDynamicObject(TempStripObject[carid]);
											TempStripObject[carid] = CreateDynamicObject(2899, X, Y, Z-0.5, 0, 0, A-90);
											TempStripTimer[carid] = CallTimeOutFunction("DestroyTempStrip", 10000, false, "ii", StripCount, carid);
											TStripPos[StripCount][0] = X;
											TStripPos[StripCount][1] = Y;
											TStripPos[StripCount][2] = Z-0.5;
											NoStrip[playerid] = StripCount;
											SetPlayerTimer(playerid,"PlayerUnStrip",1000,false);
											SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы сбросили полосу с шипами");
											PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
											CarStrips[carid] --;
											f(global_str, 100,"[Информация] {FFFFFF}Осталось шипов: %d",CarStrips[carid]);
											SCM(playerid,COLOR_GREY, global_str);
											StripCount ++;
										}
										else
										{
										    DestroyDynamicObject(TempStripObject[carid]);
											SCM(playerid,COLOR_GREY, !"По всему штату становлено более "#StripCount#" шипов, подождите немного...");
										}
									}
									else
									{
										SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}На этом транспорте нет шипов");
										DestroyDynamicObject(TempStripObject[carid]);
									}
								}
								else DestroyDynamicObject(TempStripObject[carid]);
							}
							else SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Интервал сбрасывания полосы с шипами 10 секунд...");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}По всему штату установлено более 50 шипов, подождите немного...");
					}
					else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}На этом транспорте нет шипов");
				}
				return 1;
			}
		}
	}
	else
	{
	    if(PRESSED(KEY_NO))
	    {
			if(TazerPlayer[playerid] != INVALID_PLAYER_ID)
			{
			    new target = TazerPlayer[playerid];
			    if(IsPlayerConnected(target))
			    {
				    if(ProxDetectorS(1.5, playerid, target, 1))
				    {
				        callcmd::cuff(playerid, IntToStr(target));
				        return 1;
				    }
			    }
			    else TazerPlayer[playerid] = INVALID_PLAYER_ID;
			}
         	if(PI[playerid][pHeal] > 0)
	        {
             	if(Healttime[playerid]>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	            if(!PlayerLie{playerid})
	            {
                    for(new i; i < sizeof(HealInfo); i ++)
                    {
		                if(IsPlayerInRangeOfPoint(playerid,1,HealInfo[i][hCP][0],HealInfo[i][hCP][1],HealInfo[i][hCP][2]) && GetPlayerVirtualWorld(playerid)==HealInfo[i][hWorld])
				        {
				            if(!GetString(HealInfo[i][hName],"The State")) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Эта койка занята!");
							f(global_str, 150,"Койка{FF0000} [Занята]\n\n{FF9900}Пациент: {9ACD32}%s", PN(playerid));
							UpdateDynamic3DTextLabelText(HealText[i],COLOR_WHITE,global_str);
							UpdatePlayerPos(playerid,HealInfo[i][hBed][0],HealInfo[i][hBed][1],HealInfo[i][hBed][2]+1);
                            ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 1, 1, 1, 0, 1);
                            SetPlayerFacingAngle(playerid,HealInfo[i][hBed][3]);
                            PlayerBed[playerid] = i;
							PlayerLie{playerid} = true;
							SetString(HealInfo[i][hName],PN(playerid));
							SCM(playerid, COLOR_LIME, "[Информация] {FFFFFF}Вы заняли койку. Чтобы встать с неё нажмите N ещё раз");
							Healttime[playerid]=Global_Time+5;
							break;
				        }
			        }
	            }
	            else
	            {
	                Healttime[playerid]=Global_Time+5;
	                new bed = PlayerBed[playerid];
	                Controllable{playerid} = true;
					TogglePlayerControllable(playerid, true);
					UpdatePlayerPos(playerid,HealInfo[bed][hCP][0],HealInfo[bed][hCP][1],HealInfo[bed][hCP][2]);
     				CheckBed(playerid);
					SetPlayerTimer(playerid, "ClearAnim", (GetPlayerPing(playerid)*2)+100, false);
	            }
	        }
		}
	}
	return 1;
}

stock EnterBiz(playerid, bizid)
{
    if(IsNoEnterBiz(bizid)) 
	{
		if(BizData[bizid][bState] == 32)
		{
			if(!GetString(BizData[bizid][bOwner], PN(playerid)) and !GetString(BizData[bizid][bZam], PN(playerid)))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}Доступно только владельцу и заместителю нефтевышки.");

			return SPDF(playerid, 25365, DIALOG_STYLE_TABLIST, !"{42B02C}Управление нефтевышкой", "{42B02C}-{FFFFFF} Доступно нефти: {42B02C}%0.1f {FFFFFF}/{42B02C} %0.1f{FFFFFF} литров\n{42B02C}-{FFFFFF} Добыча: {42B02C}%0.1f{FFFFFF} литров в час\n \n{42B02C}1. {FFFFFF}Снятие AZ-Coins со счёта бизнеса\n{42B02C}2. {FFFFFF}Покупка бочек\n{42B02C}3. {FFFFFF}Улучшить добычу нефти на 100 литров ( {42B02C}500000 BTC {FFFFFF})\n{42B02C}4. {FFFFFF}Увеличить хранилище нефти на 1000 литров ( {42B02C}500000 BTC {FFFFFF})", !"Далее", !"Отмена", float(BizData[bizid][bProducts]), float(BizData[bizid][bUpgrade][0] * 1000 + 24000), float(BizData[bizid][bUpgrade][1] * 100 + 1000));
		}
		return false;
	}
	else if(BizData[bizid][bLock]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
	else if(GetPlayerVirtualWorld(playerid)) return false; 

	NoEnterPickup[playerid] = 2;
	BizEntered[playerid] = bizid;

	SetPlayerVirtualWorld(playerid, bizid+100), SetPlayerInterior(playerid, BizData[bizid][bInt]);
	UpdatePlayerPos(playerid, BizData[bizid][bExit][0], BizData[bizid][bExit][1], BizData[bizid][bExit][2], -1);
	SetCameraBehindPlayer(playerid);
	return BizData[bizid][bVisit] ++;
}

stock ClearAnimationsEx(playerid)
{
    ClearAnimations(playerid);
    ApplyAnimationEx(playerid, "BD_FIRE", "BD_Fire1", 4.1, 0, 0, 0, 0, 1, 1);
	AnimPlayed{playerid} = false;
	return true;
}

stock IsNoEnterBiz(bizid)
{
	if(BizData[bizid][bExit][0] == 0.0 && BizData[bizid][bExit][1] == 0.0 && BizData[bizid][bExit][2] == 0.0) return 1;
	return 0;
}

public OnPlayerUpdate(playerid)
{
	if(!pTemp[playerid][tAuthorized]) return false;
	else if(pTemp[playerid][tAuthorized] && IsPlayerConnected(playerid))
	{
		if(GetPlayerLauncher(playerid))
			SetPlayerSyncWeapon(playerid, pTemp[playerid][pWeapon]);

		if(PlayerAFKTime[playerid][0] > 10)
		{
			if(PlayerAFKTime[playerid][0] <= MAX_AFK_TIME) f(global_str, 150,"{FFFFFF}Вы простояли в AFK {FF9900}%s.",Convert(PlayerAFKTime[playerid][0]));
			else f(global_str,150,"{FFFFFF}Вы простояли в AFK {FF9900}%s. {FFFFFF}Из них {FF9900}%s{FFFFFF} не засчитаны!",Convert(PlayerAFKTime[playerid][0]), Convert(PlayerAFKTime[playerid][0]-MAX_AFK_TIME));
			SCM(playerid, COLOR_WHITE, global_str);
			SetPlayerChatBubble(playerid, " ", COLOR_WHITE, 30.0, 1);
		}
		PlayerAFK[playerid]++;
		PlayerAFKTime[playerid][0] = 0;
	}
	return true;
}

stock CheckBed(playerid)
{
	if(PI[playerid][pHeal] > 0)
	{
	    if(PlayerLie{playerid})
	    {
	    	new bed = PlayerBed[playerid];
	    	PlayerLie{playerid} = false;
	    	TogglePlayerControllable(playerid,true);
	    	SetString(HealInfo[PlayerBed[playerid]][hName],"The State");
			PlayerBed[playerid] = -1;
			UpdateDynamic3DTextLabelText(HealText[bed],COLOR_WHITE, !"Койка {33AA33}[Свободна]\n{AFAFAF}Нажмите N чтобы занять.\nНеобходимо начать лечение!");
		}
	}
	return 1;
}

stock ShowJobInfo(playerid = INVALID_PLAYER_ID, job = 1)
{
	global_str = "";
    ShowJobID[playerid] = job;
	switch(job)
	{
		case 1:
		{
			strcat(global_str,"{4F943D}Работа 'Водитель автобуса'{FFFFFF}\n");
			strcat(global_str,"Для начала вам надо арендовать свободный автобус. Стоимость его аренды\n");
			strcat(global_str,"зависит от установленой цены губернатором штата.\n");
			strcat(global_str,"После того как вы арендуете автобус ,вам необходимо установить цену за проезд и\n");
			strcat(global_str,"выбрать рейс по какому будете передвигатся. После того как вы выбрали рейс\n");
			strcat(global_str,"вам надо будет ездить по чекпоинтам и останавлеватся на остановках.\n");
			strcat(global_str,"За 1 чекпоинт вы будете получать столько денег, сколько установит губернатор!\n\n");
			strcat(global_str,"Удачной работы!");
		}
		case 3:
		{
			strcat(global_str,"{4F943D}Работа 'Развозчик продуктов'{FFFFFF}\n");
			strcat(global_str,"Для начала вам необходимо найти свободный транспорт для перевозки продуктов, для этого введите /gps - По работе - Продуктовозы.\n");
			strcat(global_str,"После того как вы нашли свободный автомобиль вам необходимо закупить продукты. Закупить их можно на складе фермы - даст возможность развозить продукты по закусочным,\n");
			strcat(global_str,"или на складе разгрузочной станции, что даст возможность развозить продукты по магазинам 24/7 , магазинам аксесуаров, магазинам одежды и другим.\n");
			strcat(global_str,"Стоимость закупки и перепродажи может быть разная, так как их стоимость регулирует губернатор и владельцы бизнесов, которые в свою очередь делают заказы на закупку.\n");
			strcat(global_str,"Чтобы найти заказчика продуктов используйте /orderlist и выберите нужный вам бизнес. Обратите внимание что некоторые бизнесы могут быть не багаты, и они не смогут оплатить\n");
			strcat(global_str,"заказ, по этому следите за состоянием их банка. Так же будьте внимательны, ведь закусочные не принимают груз из разгрузочных станций!\nСледите за выгодой при продажи, ибо вы можете уйти в минус.");
			strcat(global_str,"Для того чтобы заработать еще, закупайте продукты заново и ищите предпринимателей!\n\n");
			strcat(global_str,"Удачной работы!\n");
		}
		case 4:
		{
			strcat(global_str,"{4F943D}Работа 'Механик' - на фирме{FFFFFF}\n");
			strcat(global_str,"Суть работы заключается в починке, ремонте двигателя , а также доставки транспорта в автомастерскую.\n");
			strcat(global_str,"Для того чтобы начать свою работу , вам необходимо добратся в автомастерскую , ее можно найти с \n");
			strcat(global_str,"помощью команды /gps. После того переодеться и ждать клиентов для начала работы.\n");
			strcat(global_str,"При нажатии клавищи ALT у машины в которой сидит игрок , вы начнете ее чинить. Если там не будет игрока,\n");
			strcat(global_str,"то у вас ничего не получится. Ремонт двигателя сбивает пробег автомобиля и уменьшит шанс поломки авто в дальнейшем.\n");
			strcat(global_str,"Для того чтобы чинить двигатель , станьте у капота авто и жмите клавишу ALT.\n");
			strcat(global_str,"С ремонта авто вы получите $1000, за ремонт двигателя $20.000.\n\n");
			strcat(global_str,"{4F943D}Работа 'Механик' - по городу{FFFFFF}\n");
			strcat(global_str,"Суть работы заключается в ремонте и заправке транспорта автомобилям, которые застряли в дороге.\n");
			strcat(global_str,"Для того чтобы начать работу необходимо найти авто махаников, после чего направится в одну из АЗС\n");
			strcat(global_str,"и заключить с ней контракт, продавая бензин в 2 раза дешевле и получая 50 процентов от прибыли.\n\n");
			strcat(global_str,"{4F943D}Команды: /filscar - заправить авто. /repare - отремонтировать авто. /contractfill - заключить контракт на работу\n/azsmonitor - Мониторинг заправок");
		}
		case 5:
		{
			strcat(global_str,"{4F943D}Работа 'Таксист'{FFFFFF}\n");
			strcat(global_str,"Суть работы заключается в развозке игроков в заданую точку.\n");
			strcat(global_str,"Чтобы работать вы должны сесть в 1 из авто такси и ввести трафик.\n");
			strcat(global_str,"После подтверждения все получат сообщение о том, что вы вышли на работу.\n");
			strcat(global_str,"Если игрок закажет такси{FFFFFF} всем таксистам поступит заказ.\n");
			strcat(global_str,"Чтобы принять заказ нужно ввести {10F441}/gotaxi [id игрока]{FFFFFF}.\n");
			strcat(global_str,"После принятия вызова игрок будет отмечен на карте красным маркером.\n");
			strcat(global_str,"Когда игрок сядет к вам в такси вы будете оповещены об этом.\n");
			strcat(global_str,"По ходу перевозке будет начисляться сумма проезда.\n");
			strcat(global_str,"Как только игрок выйдет из такси вы получите деньги.\n\n");
			strcat(global_str,"Удачной работы!");
		}
		case JOB_ADVOKAT:
		{
			strcat(global_str,"{4F943D}Работа 'Адвокат'{FFFFFF}\n");
			strcat(global_str,"Основная цель вашей работы заключается в помощи игрокам которые\n");
			strcat(global_str,"попали в тюрьму. Вы можете помочь им с сокращением срока за определенную\n");
			strcat(global_str,"сумму денег, собственно с этого и идет ваша прибыль. Найти заключенных\n");
			strcat(global_str,"можно в 3 полицейских участках, а именно RCPD, LVPD и SFPD.\n");
			strcat(global_str,"У вас есть возможность просмотреть базу заключенных чтобы узнать уровень\n");
			strcat(global_str,"их преступления (чем выше их уровень преступления тем больше плата за сокращение срока)\n");
			strcat(global_str,"и их местоположение чтобы приехать и помочь им в освобождении.\n\n");
			strcat(global_str,"{E4AE25}База заключенных - /zeks.\nСократить срок заключенному - /free.\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}
		case 8:
		{
			strcat(global_str,"{4F943D}Работа 'Крупье'{FFFFFF}\n");
			strcat(global_str,"Для начала вам надо отправится в само казино,\n");
			strcat(global_str,"найти его можно с помощью /gps развлечения - казино.\n");
			strcat(global_str,"В здании будет раздевалка , где вы сможете начать рабочий день.\n");
			strcat(global_str,"После начала работы , ваша цель будет заключатся в том что , бы\n");
			strcat(global_str,"следить за игроками которые играют в кости( Cтоять у игрального стола ).\n");
			strcat(global_str,"За каждую проведенную игру в кости, вы будете получать деньги которые установит казино.\n");
			strcat(global_str,"Забрать зарплату вы сможете в специальном месте, не подалеку от раздевалки.\n\n");
			strcat(global_str,"Удачной работы!\n\n");
		}
		case 9:
		{
			strcat(global_str,"{4F943D}Работа 'Инкассатор'{FFFFFF}\n");
			strcat(global_str,"Суть работы заключается в сборе денег из определенных точек.\n");
			strcat(global_str,"Чтобы начать работать переоденьтесь и сядьте в один из грузовиков.\n");
			strcat(global_str,"Далее едьте на маркер обозначеный на карте.\n");
			strcat(global_str,"Заберите деньги и положите их в багажник грузовика.\n");
			strcat(global_str,"Далее едьте на маркер обозначеный на карте (Банк).\n");
			strcat(global_str,"Заберие деньги из багажника и отнесите их на чекпоинт.\n");
			strcat(global_str,"Во время работы на вас могут напасть и убить.\n");
			strcat(global_str,"Если это случится, то убийца сможет забрать деньги.\n\n");
			strcat(global_str,"Удачной работы!");
		}
		case 11:
		{
		    strcat(global_str,"{4F943D}Работа 'Дальнобойщик'{FFFFFF}\n");
		    strcat(global_str,"Суть этой работы заключается в перевозке груза из одной точки в другую.\n");
		    strcat(global_str,"Садьте в 1 из грузовиков и подъедьте задом к 1 из трейлеров.\n");
		    strcat(global_str,"Трейлер прицеплен, направляйтесь в точку указаную на карте.\n");
		    strcat(global_str,"Далее отвозите грузовик назад и получаете деньги.\n\n");
		    strcat(global_str,"Удачной работы!");
		}
		case 12:
		{
		    strcat(global_str,"{4F943D}Работа 'Развозчик пиццы'{FFFFFF}\n");
		    strcat(global_str,"Суть этой работы заключается в перевозке пиццы в жилые дома и другие места.\n");
		    strcat(global_str,"Для начала переоденьтесь, а потом возьмите пиццу в пункте выдачи.\n");
		    strcat(global_str,"После сядьте на мопед, положите пиццу в багажник и следуйте указаниям.\n");
		    strcat(global_str,"За каждую отвезенную пиццу вы будете получать зарплату в размере 550$\n\n");
		    strcat(global_str,"Удачной работы!");
		}
		case 13:
		{
		    strcat(global_str,"{4F943D}Работа 'Развозчик металлолома'{FFFFFF}\n");
		    strcat(global_str,"Суть работы заключается в перевозе спресованного металлолома.\n");
		    strcat(global_str,"Сядьте в 1 из эвакуаторов и подъедте задом к металлолому.\n");
		    strcat(global_str,"Отвезите его на отмеченую на карте точку.\n");
		    strcat(global_str,"Удачной работы!");
		}
		case 14:
		{
		    strcat(global_str,"{4F943D}Работа 'Мусоровозчик'{FFFFFF}\n");
		    strcat(global_str,"Суть работы заключается в собирании мусора с контейнеров.\n");
		    strcat(global_str,"Сядьте в 1 из мусоровозов и подъедте задом к контейнеру.\n");
		    strcat(global_str,"Подождите пока пройдет загрузка мусора.\n");
		    strcat(global_str,"Повторяйте это до тех пор пока мусоровоз не заполнится на 100\%.\n");
		    strcat(global_str,"После загрузки направляйтесь на свалку.\n");
		    strcat(global_str,"Удачной работы!");
		}
		case 15:
		{
		    strcat(global_str,"{4F943D}Работа 'Грузчик'{FFFFFF}\n");
	    	strcat(global_str,"Суть работы заключается в переносе груза с одной точки в другую.\n");
			strcat(global_str,"В этой работе не используются команды, все выполняется по чекпоинтам.\n");
			strcat(global_str,"Чтобы начать работу переоденьтесь в раздевалке и идите к вагонам.\n");
			strcat(global_str,"После станьте на пикап и возьмите мешок, который вы должны отнести на склад.\n");
			strcat(global_str,"Чтобы получить заработанные деньги нужно переодеться.\n\n");
			strcat(global_str,"Удачной работы!");
		}
		case 16:
		{
		    strcat(global_str,"{4F943D}Работа 'Налоговая'{FFFFFF}\n");
		    strcat(global_str,"Суть работы заключается в сборе налогов с \n");
		    strcat(global_str,"Недвижемого имущества , Подписания соответствующих документов\n");
		    strcat(global_str,"и оформления выплат.\n");
		    strcat(global_str,"Для начала направляйтесь в первый офис налоговой(/gps/Важные места)\n");
		    strcat(global_str,"После чего вы сможете выбрать работу для себя\n");
		    strcat(global_str,"Удачной работы!");
		}

		case 17:
		{
		    strcat(global_str,"{4F943D}Работа 'Начинающий фермер'{FFFFFF}\n");
	    	strcat(global_str,"В этой работе не используются команды.\n");
			strcat(global_str,"Все выполняется по чекпоинтам.\n");
			strcat(global_str,"Чтобы начать работу переоденьтесь в раздевалке.\n");
			strcat(global_str,"Далее идите на точку обозначеную на мини-карте.\n");
			strcat(global_str,"Ваша цель переносить обработаные продукты на склад нашей\n");
			strcat(global_str,"фермы, для того чтобы развозчики продуктов могли их закупить.\n");
			strcat(global_str,"Чтобы получить заработанные деньги нужно забрать их в здании фермы.\n\n");
			strcat(global_str,"{99E05A}Обратите внимание! Работая здесь, вы можете развить ветку достижений\n");
			strcat(global_str,"и получить доступ к новой работе, под названием тракторист.\n");
			strcat(global_str,"Для этого необходимо заработать 500 очк. работы начинающего фермера.\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}

		case 18:
		{
		    strcat(global_str,"{4F943D}Работа 'Тракторист'{FFFFFF}\n");
	    	strcat(global_str,"Для начала вам надо найти свободный трактор в одном из ангаров фермы.\n");
			strcat(global_str,"После того как вы его найдете ,вам надо будет начать работу и\n");
			strcat(global_str,"передвигатся на показаных вам чекпоинтам на мини-карте.\n");
			strcat(global_str,"С каждого чекпоинта вы будете получать определенную сумму денег, которые\n");
			strcat(global_str,"вы сможете забрать в здании фермы, при окончании работы.\n\n");
  			strcat(global_str,"{99E05A}Обратите внимание! Для доступа к этой работе вам необходисо набрать 500 очк.\n");
			strcat(global_str,"работы фермера, работая начинающим фермером. Набрав 3200 очк. роботы вы откроете доступ\n");
			strcat(global_str,"к новому виду работы на ферме, под названием 'Комбайнер'\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}

		case 19:
		{
		    strcat(global_str,"{4F943D}Работа 'Комбайнер'{FFFFFF}\n");
	    	strcat(global_str,"Для начала вам надо найти свободный комбайн в одном из ангаров фермы.\n");
			strcat(global_str,"После того как вы его найдете ,вам надо будет начать работу и\n");
			strcat(global_str,"передвигатся на показаных вам чекпоинтам на мини-карте.\n");
			strcat(global_str,"С каждого чекпоинта вы будете получать определенную сумму денег, которые\n");
			strcat(global_str,"вы сможете забрать в здании фермы, при окончании работы.\n\n");
			strcat(global_str,"{99E05A}Обратите внимание! Для доступа к этой работе вам необходисо набрать 3200 очк.\n");
			strcat(global_str,"работы фермера, работая начинающим фермером или трактористом. Набрав 7000 очк. роботы вы откроете доступ\n");
			strcat(global_str,"к новому виду работы на ферме, под названием 'Водитель кукурузника'\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}

		case 20:
		{
		    strcat(global_str,"{4F943D}Работа 'Водитель кукурузника'{FFFFFF}\n");
	    	strcat(global_str,"Для начала вам надо найти свободный кукурузник в одном из ангаров фермы.\n");
			strcat(global_str,"После того как вы его найдете ,вам надо будет начать работу и\n");
			strcat(global_str,"передвигатся на показаных вам чекпоинтам на мини-карте, латая над фермами всего штата, удобряя их землю.\n");
			strcat(global_str,"С каждого чекпоинта вы будете получать определенную сумму денег, которые\n");
			strcat(global_str,"вы сможете забрать в здании фермы, при окончании работы.\n\n");
			strcat(global_str,"{99E05A}Обратите внимание! Для доступа к этой работе вам необходисо набрать 7000 очк.\n");
			strcat(global_str,"работы фермера, работая начинающим фермером или трактористом или комбайнером.\n");
			strcat(global_str,"Эта работа является вершиной ветки, работника фермы, и она является самой оплачеваемой в нашем штате.\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}
		case 21:
		{
		    strcat(global_str,"{4F943D}Работа 'Строитель'{FFFFFF}\n");
		    strcat(global_str,"Для начала работы необходимо переодеться в том месте где вы устроились на работу.\n");
	    	strcat(global_str,"Эта работа будет функционировать до тех пор, пока будет идти строительство\n");
			strcat(global_str,"концертного зала. По окончанию его постройки рабочих мест не будет!\n\n");
			strcat(global_str,"Суть вашей работы очень проста, брать материалы и бегать по чекпоинтам,\n");
			strcat(global_str,"если закончились материалы, то вернуться обратно и начать заново.\n");
			strcat(global_str,"Чтобы забрать зарплату, необходимо подойти к месту где вы начинали работу и переодется.\n\n\n");
			strcat(global_str,"{4F943D}Удачной работы!");
		}
		default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы нигде не работаете!");
	}
	SPD(playerid,0,0,"Информация о работе",global_str,"Дальше","");
	return 1;
}

stock ShowUpdateSettings(playerid)
	return SPD(playerid, 26033, DIALOG_STYLE_TABLIST_HEADERS, "{BFBBBA}Личные настройки", "{CCCCCC}Тип параметра\t{CCCCCC}Значение\n{ff6666}[1] {ffffff}Сменить Non-RP ник\n{ff6666}[2] {ffffff}Система промокодов\n{ff6666}[3] {ffffff}История ников\n{ff6666}[4] {ffffff}История наказаний\n{ff6666}[5] {ffffff}{FAAC58}Защита VK / Telegram\t{73B461}[ ПОЛУЧИ НАГРАДУ ]\n{222222}Прочие параметры:\n{73B461}[»] {ffffff}Безопасность аккаунта\n{73B461}[»] {ffffff}Настройки персонажа\n{73B461}[»] {ffffff}Настройки отображения\n{73B461}[»] {ffffff}Настройки управления\n{73B461}[»] {ffffff}Настройки инвентаря\n{73B461}[»] {ffffff}Настройки звука\n{73B461}[»] {ffffff}Кастомизация интерфейса\n{73B461}[»] {ffffff}Настройки телефона", "Выбрать", "Отмена");

stock ShowPointSettings(playerid, listitem)
{
	static const 
		settingNamed[][] = {"Настройки безопасности", "Настройки персонажа", "Настройки отображения", "Настройки управления", "Настройки инвентаря", "Настройки звука", "Настройки интерфейса"},
		gaitTitle[][] = {"Стандартный", "Нормальная", "Нормальная 2", "Гангстерская", "Гангстерская 2", "Старческая", "Старческая 2", "Серьезная", "Женская", "Женская 2", "На пафосе", "На пафосе 2", "С выпрямленой рукой"};
		
	spdList(playerid, 0, listitem);

	switch(listitem)
	{
		case 0:
		{
			global_str = "\
				Тип параметра\tЗначение\n\
				{ff6666}[1] {ffffff}E-mail	{CCCCCC}[ %s ]\n\
				{ff6666}[2] {ffffff}Сменить пароль от аккаунта\n\
				{ff6666}[3] {ffffff}Сменить PIN-код от банковской карты\n\
				{ff6666}[4] {ffffff}Google Authenticator	{CCCCCC}{B83434}[ выключено ]\n\
				{ff6666}[5] {ffffff}Вход через почту\t%s";

			f(global_str, sizeof(global_str), global_str,
				PlayerMail[playerid],
				PI[playerid][pEmailAuth] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"));
		}
		case 1:
		{
			global_str = "\
				Тип параметра\tЗначение\n\
				{ff6666}[1] {ffffff}Отображение кейса в руке\t%s\n\
				{ff6666}[2] {ffffff}Стиль походки\t{CCCCCC}[ %s ]\n\
				{ff6666}[3] {ffffff}Описание персонажа\t{CCCCCC}{CCCCCC}[ нажмите, чтобы изменить ]\n\
				{ff6666}[4] {ffffff}AFK описание персонажа\t{CCCCCC}[ нажмите, чтобы установить ]\n\
				{ff6666}[5] {ffffff}Свечение заточенных аксессуаров\t%s\n\
				{ff6666}[6] {ffffff}Тип ауры под персонажем\n\
				{ff6666}[7] {ffffff}Авто-использование улучшенного бронежилета	{CCCCCC}{9ACD32}[ включено ]{FFFFFF}\n\
				{ff6666}[8] {ffffff}Невидимость на карте от Маски-невидимки	{CCCCCC}{B83434}[ выключено ]{FFFFFF}\n\
				{ff6666}[9] {ffffff}Предложения о продаже/обмене	{CCCCCC}%s\n\
				{ff6666}[10] {ffffff}Отмена показа документов	{CCCCCC}%s\n\
				{ff6666}[11] {ffffff}Место спавна	{CCCCCC}[ изменить ]";

			f(global_str, sizeof(global_str), global_str,
				SettingData[playerid][sdCaseDisplay] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				gaitTitle[PI[playerid][pWalkingInfo][0]],
				SettingData[playerid][sdAccessoryFire] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdActionTrade] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdShowDocuments] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"));
		}
		case 2:
		{
			global_str = "\
				Тип параметра\tЗначение\n\
				{ff6666}[1] {ffffff}Отображение описания персонажей\t%s\n\
				{ff6666}[2] {ffffff}Отображение названия семей над головой\t%s\n\
				{ff6666}[3] {ffffff}Отображение статуса ADD VIP\t%s\n\
				{ff6666}[4] {ffffff}Отображение 'набора текста' над головой\t%s\n\
				{ff6666}[5] {ffffff}Отображение уведомлений указания вашего ника при регистрации\t%s\n\
				{ff6666}[6] {ffffff}Отображение никнеймов	{CCCCCC}%s\n\
				{ff6666}[7] {ffffff}Damage Informer	{CCCCCC}%s\n\
				{ff6666}[8] {ffffff}Hit Informer при попаданиях {ffff00}[NEW]	{CCCCCC}%s\n\
				{ff6666}[9] {ffffff}Отображение иконки уровня 'Premium VIP' над головой	{CCCCCC}{9ACD32}[ включено ]";

			f(global_str, sizeof(global_str), global_str,
				SettingData[playerid][sdShowPlayerDesc] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdShowPlayerFamily] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdShowAddVip] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdShowWriteStatus] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdShowRegisterNick] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdShowName] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdDamageInformer] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdHitInformer] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"));
		}
		case 3:
		{
			global_str = "\
				Тип параметра\tЗначение\n\
				{ff6666}[1] {ffffff}Активации удочки на ПКМ/CTRL\t%s\n\
				{ff6666}[2] {ffffff}Настройки горячих клавиш {777777}[PC]";

			f(global_str, sizeof(global_str), global_str, SettingData[playerid][sdUseFishingRod] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"));
		}
		case 4:
		{
			global_str = "\
				Тип параметра\tЗначение\n\
				{ff6666}[1] {ffffff}Темная тема инвентаря\t%s\n\
				{ff6666}[2] {ffffff}Сбросить настройки инвентаря";

			f(global_str, sizeof(global_str), global_str, (PI[playerid][pInvColors] == 120) ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"));
		}
		case 5:
		{
			global_str = "\
				Тип параметра\tЗначение\n\
				{ff6666}[1] {ffffff}Проигрывание звуков (в городе/интерьерах)\t%s\n\
				{ff6666}[2] {ffffff}Проигрывание звука GPS навигатора\t%s\n\
				{ff6666}[3] {ffffff}Проигрывание звука при авторизации\t%s\n\
				{ff6666}[4] {ffffff}Проигрывание звуков драгрейсинга\t%s\n\
				{ff6666}[5] {ffffff}Параметры голосового чата {ffff00}[NEW]";

			f(global_str, sizeof(global_str), global_str,
				SettingData[playerid][sdPlaySoundInt] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdPlaySoundGPS] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdPlaySoundAuth] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"),
				SettingData[playerid][sdPlaySoundDrag] ? ("{A7C24D}[ включено ]") : ("{88373D}[ выключено ]"));
		}
		case 6:
		{
			global_str = "\
				{CCCCCC}Тип параметра	{CCCCCC}Значение\n\
				{ff6666}[1] {ffffff}Тип диалогов	{CCCCCC}[ %s ]\n\
				{ff6666}[2] {ffffff}Тип спидометра	{CCCCCC}[ %s ]\n\
				{ff6666}[3] {ffffff}Тип худа	{CCCCCC}[ %s ]\n\
				{ff6666}[4] {ffffff}Тип радара	{CCCCCC}[ %s ]\n\
				{ff6666}[5] {ffffff}Тип инвентаря {777777}[Trillogy]	{CCCCCC}[ %s ]\n\
				{ff6666}[6] {ffffff}Прозрачный чат	{CCCCCC}{9ACD32}[ %s ]{FFFFFF}\n\
				{ff6666}[7] {ffffff}Сохранение текста в диалоге	{CCCCCC}{9ACD32}[ %s ]{FFFFFF}\n\
				{ff6666}[8] {ffffff}Чат-комнаты\n\
				{ff6666}[9] {ffffff}Качество отображения диалогов	{CCCCCC}[ %s ]\n\
				{ff6666}[10] {ffffff}Отображение позиции в Discord	{CCCCCC}{9ACD32}[ %s ]{FFFFFF}\n\
				{ff6666}[11] {ffffff}Расстояние видимости 3D-маркера	{CCCCCC}{9ACD32}[ %s ]{FFFFFF}\n\
				{ff6666}[12] {ffffff}Подсказка горячих клавиш	{CCCCCC}{9ACD32}[ %s ]{FFFFFF}\n\
				{ff6666}[13] {ffffff}Kill List (/killlist) {777777}[MOBILE]	{CCCCCC}{9ACD32}[ включено ]{FFFFFF}\n\
				{ff6666}[14] {ffffff}Фоторежим (/hidehud) {777777}[MOBILE]	{CCCCCC}{B83434}[ выключен ]{FFFFFF}\n\
				{ff6666}[15] {ffffff}Язык инвентаря / интерфейсов	{CCCCCC}[ %s ]";

			format(global_str, sizeof(global_str), global_str, \
				customPoint_name[GetCustomName(playerid, 0)][customName],\
				customPoint_name[GetCustomName(playerid, 1)][customName],\
				customPoint_name[GetCustomName(playerid, 2)][customName],\
				customPoint_name[GetCustomName(playerid, 3)][customName],\
				customPoint_name[GetCustomName(playerid, 4)][customName],\
				PI[playerid][pCustomInterface][6] ? "включено" : "отключено",\
				PI[playerid][pCustomInterface][7] ? "включено" : "отключено",\
				customPoint_name[GetCustomName(playerid, 5)][customName],\
				SettingData[playerid][sdDiscordPosition] ? "включено" : "отключено",\
				SettingData[playerid][sdMarker] ? (str_f("%i.0", SettingData[playerid][sdMarker])) : "отключено",\
				PI[playerid][pCustomInterface][8] ? "включено" : "отключено",
				SettingData[playerid][sdLanguage] ? "русский" : "английский");
		}
		case 7: return ShowPhoneMenu(playerid);
	}

	return SPD(playerid, 26034, DIALOG_STYLE_TABLIST_HEADERS, settingNamed[listitem], global_str, !"Выбрать", !"Назад");
}

stock GetCustomName(playerid, interface_type)
{
	for(new i; i < sizeof(customPoint_name); i++) if(customPoint_name[i][customId] == interface_type && customPoint_name[i][customType] == PI[playerid][pCustomInterface][interface_type]) return i;
	return -1;
}

stock ShowImproveSettings(playerid)
{
	global_str = "\
		{AFAFAF}Шумахер [3lvl] \t| %s\n\
		{AFAFAF}Халявщик [4lvl] \t| %s\n\
		{AFAFAF}Бизнесмен [1lvl] \t| %s\n\
    	{AFAFAF}Планшет [1lvl] \t| %s\n\
    	{AFAFAF}Вечный Car Skill [1lvl] \t| %s\n\
    	{AFAFAF}Больше недвижимости \t| %s\n\
    	{AFAFAF}Нет налогам [1lvl] \t| %s\n\
    	{AFAFAF}Семь бизнесов [1lvl]\t| %s\n\
    	{AFAFAF}Семейный сертификат [1lvl]\t| {FF6347}Не имеется ( покупка в страховой компании )\n\
    	{AFAFAF}Пенсионное страхование [1lvl]\t| {FF6347}Не имеется ( покупка в страховой компании )\n\
    	{AFAFAF}Выгодная рассрочка [3lvl]\t| %s\n\
    	{AFAFAF}2 Складских помещения [9lvl]\t| %s\n\
		{AFAFAF}Помощь";

	f(global_str, sizeof(global_str), global_str,
		ImprovementsData[playerid][idSchumacher] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [85000$]"),
		ImprovementsData[playerid][imFreeloader] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [100000$]"),
		ImprovementsData[playerid][idBusinessman] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [2000 AZ Coins]"),
		ImprovementsData[playerid][idTablet] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [2000000$]"),
		ImprovementsData[playerid][idCarSkill] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется ( /donate )"),
		ImprovementsData[playerid][idMoreHouses] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [2000 AZ Coins]"),
		ImprovementsData[playerid][idNoTaxes] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [1500 AZ Coins]"),
		ImprovementsData[playerid][idSevenBusinesses] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [25000.0 BTC]"),
		ImprovementsData[playerid][idInstallment] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [400 000 000$]"),
		ImprovementsData[playerid][idStorageRoom] ? ("{9ACD32}Куплено") : ("{FF6347}Не имеется [10000.0 BTC]")
	);

 	return SPD(playerid, 8743, DIALOG_STYLE_TABLIST, !"Выберите пункт", global_str, !"Выбор", !"Отмена");
}

stock ShowPhoneUpdateSettings(playerid)
{
	global_str = "\
		{AFAFAF}Объявления (/ad/благотворительность/Эдвард)\t\t%s\n\
		{AFAFAF}Рация (/r)\t\t\t%s\n\
		{AFAFAF}Департамент (/d)\t\t%s\n\
		{AFAFAF}Действия админов\t\t%s\n\
    	{AFAFAF}Сообщения об убийствах / розыске\t%s\n\
		{AFAFAF}VIP чат (/vr)\t\t\t%s\n\
		{AFAFAF}Рация семьи\t\t\t%s\n\
		{AFAFAF}Сообщения спавна авто\t%s";

	f(global_str, sizeof(global_str), global_str,
		PhoneImprovementsData[playerid][pdAnnouncements] ? ("{FF6347} [OFF]") : ("{9ACD32} [ON]"),
		PhoneImprovementsData[playerid][pdWalkieTalkie] ? ("{FF6347} [OFF]") : ("{9ACD32} [ON]"),
		PhoneImprovementsData[playerid][pdDepartment] ? ("{FF6347} [OFF]") : ("{9ACD32} [ON]"),
		PhoneImprovementsData[playerid][pdAdminAction] ? ("{FF6347} [OFF]") : ("{9ACD32} [ON]"),
		PhoneImprovementsData[playerid][pdReportsDeath] ? ("{FF6347} [OFF]") : ("{9ACD32} [ON]"),
		PhoneImprovementsData[playerid][pdVIPChat] ? ("{FF6347} [OFF]") : ("{9ACD32} [ON]"),
		PhoneImprovementsData[playerid][pdFamilyChat] ? ("{FF6347} [OFF]") : ("{9ACD32} [ON]"),
		PhoneImprovementsData[playerid][pdSpawnCarMessage] ? ("{FF6347} [OFF]") : ("{9ACD32} [ON]")
	);

    return SPD(playerid, 800, 2, !"Выберите пункт", global_str, !"Выбор", !"Отмена");
}

stock ResetSpawnInfo(playerid, team)
	return SetSpawnInfo( playerid, 255, GetSkinOfPlayer(playerid), SpawnInfo[team][0], SpawnInfo[team][1], SpawnInfo[team][2], SpawnInfo[team][3], 0, 0, 0, 0, 0, 0);

stock IsValidEMail(email[])
{
	new bool:Succes = true, bool:Good;

	for(new i;i < strlen(email);i ++)
	{
	    if(email[i] == '@')
		{
		    if(!Good) Good = true;
		    else
			{
				Good = false;
		    	break;
			}
		}
	    if(!((email[i] >= 'A' && email[i] <= 'Z') || (email[i] >= 'a' && email[i] <= 'z') || (email[i] >= '0' && email[i] <= '9') || (email[i] == '-') || (email[i] == '_') || (email[i] == '@') || (email[i] == '.'))) Succes = false;
	}

	if(!Good) Succes = false;
	if(!TextFind(email,".ru") && !TextFind(email,".com") && !TextFind(email,".ua") && !TextFind(email,".su")) Succes = false;
	if(!TextFind(email,"@")) Succes = false;

  	return Succes;
}

stock CheckPassword(pass[])
{
	for(new i; i < strlen(pass); i++)
	{
	    if((pass[i] >= 'a' && pass[i] <= 'z') || (pass[i] >= 'A' && pass[i] <= 'Z') || (pass[i] >= 'а' && pass[i] <= 'я') || (pass[i] >= 'А' && pass[i] <= 'Я') || (pass[i] >= '0' && pass[i] <= '9')) continue;
		else return false;
	}
	return true;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid && GetPVarInt(playerid, "DialogID") != dialogid) 
		return false;

	static inputtextsave[256];
	global_str = "";

	mysql_escape_string(inputtext, inputtextsave);

	for(new i; i < strlen(inputtextsave); i++)
	{
		switch inputtextsave[i] do
		{
			case 'A'..'Z', 'a'..'z', 'А'..'Я', 'а'..'я', '0'..'9', ' ', '>', '<', '(', ')', '/', '+', '-','_', '?', '!', '.', ',', '@': continue;
			default: inputtextsave[i] = ' ';
		}
	}
	
	for(new i; i < strlen(inputtextsave); i ++)
	{
		if(inputtextsave[i] == '%') inputtextsave[i] = '#';
		else if(inputtextsave[i] == '{' && inputtextsave[i+7] == '}') strdel(inputtextsave, i, i+8);
	}
	
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	DeletePVar(playerid, "DialogOpen"), DeletePVar(playerid, "DialogID");
	switch dialogid do
	{
		case 26900:
		{
			if(!response)
				return false;

			if(listitem == 0 && PI[playerid][pSecurityID] == 0)
				ShowSecurity(playerid, 2); 

			else if(listitem == 1 && PI[playerid][pSecurityID] == 0)
				SPDF(playerid, 26901, DIALOG_STYLE_TABLIST, !"Привязка | VK", "{ff6666}[1] {ffffff}Перейти в официальную группу VK	{ffff00}[ %s ]\n{ff6666}[2] {9ACD32}Ввести код для привязки VK", !"Выбрать", !"Назад", Setting_Server[5]);

			return true;
		}

		case 26901:
		{
			if(!response)
				return false;

			if(listitem == 1 && PI[playerid][pSecurityID] == 0)
				SPDF(playerid, 26902, DIALOG_STYLE_INPUT, !"Привязка защиты | VK", "{ffffff}Чтобы получить код для привязки VK аккаунта:\n\n{ff6666}1. {ffffff}Перейдите в сообщения нашей группы VK: {ffff00}%s\n{ff6666}2. {ffffff}Напишите {ffff00}\"Начать\"{ffffff}\n{ff6666}3. {ffffff}Далее нажмите {ffff00}\"Получить код\"{ffffff}\n{ff6666}4. {ffffff}Введите полученный код ниже:\n\n{ae443d}Чтобы свернуть игру, используйте комбинацию клавиш: ALT + TAB!", !"Принять", !"Назад", Setting_Server[5]);
		
			return true;
		}

		case 26902:
		{
			if(!response)
				return false;

			f(mysql_string, 400, "churikov.ru/vk_connect/get_vk_code.php?code=%i&nickname=%s", strval(inputtextsave), PN(playerid)), GlobalMassive[playerid][1] = 1;
			HTTP(playerid, HTTP_POST, mysql_string, "", "ConnectionCallback");

			return true;
		}

		case 26504:
		{
			if(!response)
				return false;

			new serverInterfaceNamed[][] = {"Старые SAMP диалоги"};

			serverInterfaceSettings[listitem] = !serverInterfaceSettings[listitem];

			if(serverInterfaceSettings[listitem] && listitem == 0)
			{
				foreach(Player, i)
					if(GetPlayerLauncher(i))
						sendPlayerCustom_packet(i, 53, 4);
			}

			return SCMF(playerid, COLOR_BLUE, "[Информация]: %s теперь %s на сервере.", serverInterfaceNamed[listitem], serverInterfaceSettings[listitem] ? "активен" : "неактивен");
		}

		case 3010:
		{
			if(!response)
				return false;

			listitem = gpdList(playerid, 0);

			if(CentralMarket[listitem][crStatusId]) 
				return false;

			if(GetCount(playerid, 1811) < (GetPlayerADDVIP(playerid) ? 0 : 20000))
				return SCM(playerid, COLOR_OLDRED, "[Ошибка]{ffffff} У вас не достаточно BTC.");

			DeleteItem(playerid, 1811, GetPlayerADDVIP(playerid) ? 0 : 20000);
			GameTextForPlayer(playerid, !"successful", 0, 1);

			CentralMarket[listitem][crOwnedId] = playerid;
			CentralMarket[listitem][crStatusId] = 1;
			pTemp[playerid][pCentralMarketId][0] = listitem;

			return SPD(playerid, 3020, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите название вашей лавки.\nИспользуйте до {85E94E}20{FFFFFF} символов!", !"Принять", !"Отменить");
		}

		case 3020:
		{
			if(!response)
				return CentralMarketReject(playerid);

			listitem = pTemp[playerid][pCentralMarketId][0];

			if(strlen(inputtextsave) < 3 || strlen(inputtextsave) > 20)
			 	return SPD(playerid, 3020, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите название вашей лавки.\nИспользуйте до {85E94E}20{FFFFFF} символов!", !"Принять", !"Отменить");

			SetPVarString(playerid, "crName", inputtextsave);
			return SPD(playerid, 3030, DIALOG_STYLE_LIST, !"Выберете цвет", !"{E94E4E}|||||||||||||||||||\n{E94EC0}|||||||||||||||||||\n{B64EE9}|||||||||||||||||||\n{664EE9}|||||||||||||||||||\n{4E9EE9}|||||||||||||||||||\n{4ED7E9}|||||||||||||||||||\n{4EE9A4}|||||||||||||||||||\n{4EE960}|||||||||||||||||||\n{9EE94E}|||||||||||||||||||\n{D2E94E}|||||||||||||||||||\n{E9BD4E}|||||||||||||||||||\n{E9854E}|||||||||||||||||||\n{A63030}|||||||||||||||||||\n{303FA6}|||||||||||||||||||\n{30A641}|||||||||||||||||||\n{FFFFFF}|||||||||||||||||||\n", !"Выбрать", !"Отменить");
		}

		case 3030:
		{
			if(!response)
				return CentralMarketReject(playerid);

			new crId = pTemp[playerid][pCentralMarketId][0], crColor[] = {0xE94E4EFF, 0xE94EC0FF, 0xB64EE9FF, 0x664EE9FF, 0x4E9EE9FF, 0x4ED7E9FF, 0x4EE9A4FF, 0x4EE960FF, 0x9EE94EFF, 0xD2E94EFF, 0xE9BD4EFF, 0xE9854EFF, 0xA63030FF, 0x303FA6FF, 0x30A641FF, 0xFFFFFFFF};

			if(crId == -1)
				return false;

			GetPVarString(playerid, "crName", mysql_string, 20);
			CentralMarket[crId][crStatusId] = 2;
			SetObjectMaterialText(CentralMarket[crId][crObject], mysql_string, 1, 120, "Comic Sans MS", 40, 0, crColor[listitem], 4278190080, 1);

			return SCM(playerid, COLOR_ORANGE, !"[Подсказка] {FFFFFF}Используйте клавишу: 'Действия' для управления товарами!"), SCM(playerid, COLOR_ORANGE, !"[Подсказка] {FFFFFF}У вас есть 3 минуты, чтобы настроить товар, иначе аренда ларька будет отменена.");
		}

		case 3040:
		{
			new crId = pTemp[playerid][pCentralMarketId][0];

			if(!response)
				return CentralMarket[crId][crStatusId] = 2, false;
			
			switch(listitem)
			{
				case 0: OtherInvOpen(playerid, 4, 0.0, 0.0, crId);
                case 1: ShowCentralMarketPurchaseItems(playerid);
				case 2: SPD(playerid, 25665, DIALOG_STYLE_INPUT, !"{FF6666}Поиск товара", !"{FF6666}—{ffffff} Введите наименование товара, который хотите найти и выставить на скупку.\n\n{cccccc}Длина текста не должна быть менее 3 символов и не более 10 символов.\nУказывайте название с заглавной буквы. Пример: Кепка, Tesla и т.д", !"Далее", !"Назад");
				case 3: ShowCentralMarketPurchaseItems(playerid, 0, true);
                case 4: CentralMarketReject(playerid);
				default: print("1");
			}
		}

        case 27136:
		{
			if(!response) return callcmd::bonus(playerid);

			new bonusSelect_id = gpdList(playerid, 0), bonusSelect = gpdList(playerid, listitem), bonusType_databaseName[][] = {"bonusTake_Public", "bonusTake_Member", "bonusTake_Everyday"};

			if(BonusInfo[bonusSelect][bonusTime] > BonusTime[playerid][bonusSelect_id])
				return SCMF(playerid, COLOR_YELLOW, "[Ошибка] {ffffff}Чтобы получить награду \"%s\", вам необходимо провести больше времени в игре.", BonusInfo[bonusSelect][bonusName]);

			if(BonusTake[playerid][bonusSelect_id][bonusSelect])
				return SCMF(playerid, COLOR_YELLOW, "[Ошибка] {ffffff}Награда \"%s\" ранее уже была вами получена!", BonusInfo[bonusSelect][bonusName]);

			BonusTake[playerid][bonusSelect_id][bonusSelect] = 1;

			switch(BonusInfo[bonusSelect][bonusPrize_type])
			{
				case 0: AddItem(playerid, BonusInfo[bonusSelect][bonusPrize], BonusInfo[bonusSelect][bonusPrize_amount], 0, -1, BonusInfo[bonusSelect][bonusPrize_enchant]);
				case 1:
				{
					if(PI[playerid][pVIP][0] >= BonusInfo[bonusSelect][bonusPrize])
						return SCM(playerid, COLOR_YELLOW, "[/bonus] {ffffff}Т.к у вас уровень вип более или равен уровню в бонусе, вы получаете 50 AZ-Рублей"), GiveRoubles(playerid, 50, "Компенсация AZ-Рублей за Вип-статус с /bonus");

					SQL("UPDATE `accounts` SET `VIP` = '%d', `VipTime` = '%d' WHERE `ID` = '%d'", PI[playerid][pVIP][0] = BonusInfo[bonusSelect][bonusPrize], PI[playerid][pVipTime] = Global_Time+(1800*24*60*60), PI[playerid][pID]);
				}
				case 2:
				{
					if(PI[playerid][pAdmin] >= BonusInfo[bonusSelect][bonusPrize])
						return SCM(playerid, COLOR_YELLOW, "[/bonus] {ffffff}Т.к у вас уровень админ-прав более или равен уровню в бонусе, вы получаете 100 AZ-Рублей"), GiveRoubles(playerid, 50, "Компенсация AZ-Рублей за Админ-права с /bonus");

					f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", PN(playerid));
					mysql_tquery(mysql, global_str, "SetAdmin", "isi", playerid, PN(playerid), BonusInfo[bonusSelect][bonusPrize]);
				}
				case 3: GiveRoubles(playerid, BonusInfo[bonusSelect][bonusPrize], "Получение награды с /bonus");
			}

			return SQL("UPDATE `accounts` SET `%s` = '%s' WHERE ID = '%d' LIMIT 1;", bonusType_databaseName[bonusSelect_id], Int_PackMassive(0, BonusTake[playerid][bonusSelect_id]), PI[playerid][pID]), SCMF(playerid, COLOR_YELLOW, "[Информация] {ffffff}Награда была начислена на игровой аккаунт: %s [%d ч.]", BonusInfo[bonusSelect][bonusName], BonusInfo[bonusSelect][bonusTime]);
		}
        case 3050:
        {
            if(!response)
                return false; // открытие меню лавки

            new pageId = gpdList(playerid, 0), item = gpdList(playerid, listitem - 1);

            if(TextFind(inputtext, "Предыдущая страница"))
                ShowCentralMarketPurchaseItems(playerid, pageId <= 0 ? 0 : pageId - 1);

            else if(TextFind(inputtext, "Следующая страница"))
                ShowCentralMarketPurchaseItems(playerid, pageId == 354 ? pageId : pageId + 1);

            else
            {
                if(pTemp[playerid][pCentralMarketId][2])
                {
                    new crCheck = GetMassiveArray(CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][1], item);

                    if(crCheck == -1)
                        return SCM(playerid, -1, "Произошла ошибка. Сообщите разработчику!");

                    SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Товар %s, который вы скупаете успешно удален!", ItemsInfo[CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][1][crCheck]][itemName]);

                    CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][1][crCheck] = 
                    CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][2][crCheck] =
                    CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][3][crCheck] = 0;
                }

                else
                    spdList(playerid, 0, item), SPDF(playerid, 26555, DIALOG_STYLE_INPUT, !"", "{FFFFFF}Введите %s товар ( {57FF6B}%s{FFFFFF} )%s", !"Принять", !"Назад", ItemsInfo[item][itemStack] > 1 ? "количество и цену за один" : "цену за", ItemsInfo[item][itemName], ItemsInfo[item][itemStack] > 1 ? ", через запятую.\nПример: {57FF6B}2,1000.\n" : "");
            }

            return true;
        }

        case 26539:
        {
            new crId = pTemp[playerid][pCentralMarketId][0], slotId = gpdList(playerid, 0), itemInfo[2]; /* 0 - Count, 1 - Cost */

            if(crId == -1 or CentralMarket[crId][crOwnedId] != playerid)
                return false;

            if(!response)
                return CentralMarket[crId][crStatusId] = 2, false;

            if(Inventory[playerid][1][slotId] > 1) 
                sscanf(inputtextsave, "p<,>a<d>[2]", itemInfo);

			else 
                sscanf(inputtextsave, "d", itemInfo[1]), itemInfo[0] = 1;

            for(new i; i < 300; i++)
			{
                if(CentralMarketItems[crId][0][1][i])
                    continue;

                CentralMarketItems[crId][0][0][i] = slotId;
                CentralMarketItems[crId][0][1][i] = Inventory[playerid][0][slotId];
                CentralMarketItems[crId][0][2][i] = itemInfo[1];
                CentralMarketItems[crId][0][3][i] = itemInfo[0];
                InventSlotUse[playerid][slotId] = true;

                InventSlotUpdate(playerid, GetInvID(playerid, slotId, 1), slotId);
                InventSlotOtherUpdate(playerid, GetInvOtherID(i), i, 0, 0, CentralMarketItems[crId][0][1][i]);
                SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Товар %s успешно выставлен на продажу!", ItemsInfo[CentralMarketItems[crId][0][1][i]][itemName]);
                break;
            }

            return true;
        }

        case 26540:
        {
            new crId = pTemp[playerid][pCentralMarketId][0], slotId = gpdList(playerid, 0);

            if(crId == -1 or CentralMarket[crId][crOwnedId] != playerid)
                return false;

            if(!response)
                return CentralMarket[crId][crStatusId] = 2, false;

            InventSlotUse[playerid][CentralMarketItems[crId][0][0][slotId]] = false, InventSlotUpdate(playerid, GetInvID(playerid, CentralMarketItems[crId][0][0][slotId], 1), CentralMarketItems[crId][0][0][slotId]);
            SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Товар %s успешно удален из продажи!", ItemsInfo[CentralMarketItems[crId][0][1][slotId]][itemName]);

            CentralMarketItems[crId][0][0][slotId] =
            CentralMarketItems[crId][0][1][slotId] =
            CentralMarketItems[crId][0][2][slotId] = 
            CentralMarketItems[crId][0][3][slotId] = 0;
            InventSlotOtherUpdate(playerid, GetInvOtherID(slotId), slotId, 0, 0, -1);

            return true;
        }

		case 25665:
		{
			if(!response)
				return false;

            global_str[0] = EOS;

            for(new i, count, countDeleted; i < sizeof(ItemsInfo); i++)
            {
                if(!TextFind(ItemsInfo[i][itemName], inputtextsave) or !ItemsInfo[i][itemTradeable])
                {
                    if(!ItemsInfo[i][itemTradeable])
                        countDeleted++;

                    continue;
                }

                else
                    spdList(playerid, count, i), f(global_str, sizeof(global_str), "%s{FF8888}%i. {cccccc}%s\n", global_str, i - countDeleted, ItemsInfo[i][itemName]), count++;
            }

            if(strlen(global_str) < 3)
                SCM(playerid, -1, "Произошла ошибка. Сообщите разработчику!");

            else
                SPD(playerid, 25666, DIALOG_STYLE_LIST, !"{FF6666}Поиск товара", global_str, !"Далее", !"Назад");

			return true;
		}

        case 26555:
        {
            new crId = pTemp[playerid][pCentralMarketId][0], itemId = gpdList(playerid, 0), itemInfo[2];

            if(!response or crId == -1)
				return false;

            if(ItemsInfo[itemId][itemStack] > 1) 
                sscanf(inputtextsave, "p<,>a<d>[2]", itemInfo);

			else 
                sscanf(inputtextsave, "d", itemInfo[1]), itemInfo[0] = 1;

            for(new i; i < 300; i++)
			{
                if(CentralMarketItems[crId][1][1][i])
                    continue;

                CentralMarketItems[crId][1][1][i] = itemId;
                CentralMarketItems[crId][1][2][i] = itemInfo[1];
                CentralMarketItems[crId][1][3][i] = itemInfo[0];

                SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы начали скупку товара %s в количестве %i шт", ItemsInfo[CentralMarketItems[crId][1][1][i]][itemName], itemInfo[0]);
                break;
            }

            return true;
        }

        case 25666:
        {
            if(!response or pTemp[playerid][pCentralMarketId][0] == -1)
				return false;

            new item = gpdList(playerid, listitem);

            spdList(playerid, 0, item), SPDF(playerid, 26555, DIALOG_STYLE_INPUT, !"", "{FFFFFF}Введите %s товар ( {57FF6B}%s{FFFFFF} )%s", !"Принять", !"Назад", ItemsInfo[item][itemStack] > 1 ? "количество и цену за один" : "цену за", ItemsInfo[item][itemName], ItemsInfo[item][itemStack] > 1 ? ", через запятую.\nПример: {57FF6B}2,1000.\n" : "");

            return true;
        }

		case 26208:
		{
			if(!response or !IsPlayerInAnyVehicle(playerid) or GetVehicleID(GetPlayerVehicleID(playerid)) == -1)
				return false;

			vehicleTuning[GetPlayerVehicleID(playerid)][5] = listitem;
			SaveOwnableCar(GetVehicleID(GetPlayerVehicleID(playerid)));
			SetVehicleBottomColor(GetPlayerVehicleID(playerid), vehicleTuning[GetPlayerVehicleID(playerid)][5]);

			return showDialogEditBottomColor(playerid, GetPlayerVehicleID(playerid));
		}

		case 26216:
		{
			if(!response) return false;

			switch listitem do
			{
				case 0:
				{
					if(!(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) or AnimPlayed{playerid})
						return false;

					PLVEH_destroy(playerid);

					PI[playerid][plveh] = -1;

					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X,Y,Z);

					PI[playerid][plveh] = J_AddStaticVehicleEx(510, X + float(random(10)),Y,Z, 0.0);
					VehicleInfo[PI[playerid][plveh]][vEngine] = true;
					Fuel[PI[playerid][plveh]] = 100.0;
					SetVehicleParamsEx(PI[playerid][plveh], 1, 0,0,0,0,0,0);
					PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
				}

				case 1:
				{
					for(new i; i < 9; i++)
						GivePlayerLic(playerid, i);

					if(!IsValidPassport(playerid))
						PassInfo[playerid][psDateBirth][0] = 7,
						PassInfo[playerid][psDateBirth][1] = 2,
						PassInfo[playerid][psDateBirth][2] = 1995,
						PassInfo[playerid][psDate][0] = 7,
						PassInfo[playerid][psDate][1] = 2,
						PassInfo[playerid][psDate][2] = 2021,
						PassInfo[playerid][psNumber] = 100000 + random(900000),
						PassInfo[playerid][psSeria] = 1000 + random(9000),
						OnRegPass(playerid);
				}
			}

			return SCMF(playerid, COLOR_VALIK, "[Информация]{ffffff} Вы успешно %s", listitem == 1 ? "получили все лицензии" : "взяли велосипед");
		}
		case 25365:
		{
			if(!response)
				return false;

			new bizid = InfoBiz[playerid];

			if(bizid == -1)
				return false;

			SCMF(playerid, -1, "enterBiz ->> onDialogResponse(25365) -> bizid %i | listitem %i", bizid, listitem);

			switch(listitem)
			{
				case 0..2: 
					return EnterBiz(playerid, bizid);

				case 3:
					return SPDF(playerid, 25368, DIALOG_STYLE_INPUT, !"{42B02C}Управление нефтевышкой", "{FFFFFF}На Вашем счёте бизнеса находится {42B02C}%i AZ-Rub{ffffff}, который Вы можете снять.\n\n{AFAFAF}Введите в строку ниже количество AZ-Rub, которое хотите снять со счёт бизнеса:", !"Далее", !"Назад", BizData[bizid][bMoney]);

				case 4:
					return SPDF(playerid, 25367, DIALOG_STYLE_INPUT, !"{42B02C}Управление нефтевышкой", "{FFFFFF}На нефтевышке доступно {42B02C}%d {FFFFFF}бочек для нефти.\nБочки влияют на возможность покупки нефти у Вашей нефтевышки.\n \n{AFAFAF}Введите в строку ниже количество бочек, которое хотите приобрести.\n\n{AFAFAF}Стоимость покупки 1 бочки - 100000 BTC.", !"Далее", !"Назад", BizData[bizid][bUpgrade][2]);
					
				case 5: 
					return SPDF(playerid, 25369, DIALOG_STYLE_MSGBOX, !"{42B02C}Управление нефтевышкой", "{FFFFFF}Вы действительно хотите улучшить добычу нефти?\n\nСтоимость улучшения: {42B02C}500000 {FFFFFF}BTC.\nТекущий уровень улучшения: {42B02C}%i {FFFFFF}уровень.\n\nВ данный момент вышка добывает {42B02C}%0.1f литров {FFFFFF}нефти в час.\nПосле улучшения: {42B02C}%0.1f литров{FFFFFF} нефти в час.\n\n{AFAFAF}Для продолжения используйте кнопку 'Далее'", !"Далее", !"Назад", BizData[bizid][bUpgrade][1], float(BizData[bizid][bUpgrade][1] * 100 + 1000), float(BizData[bizid][bUpgrade][1] * 100 + 1000 + 100));

				case 6:
					return SPDF(playerid, 25370, DIALOG_STYLE_MSGBOX, !"{42B02C}Управление нефтевышкой", "{FFFFFF}Вы действительно хотите увеличить хранилище для нефти?\n\nСтоимость улучшения: {42B02C}500000 BTC{FFFFFF}.\nТекущий уровень улучшения: {42B02C}%i {FFFFFF}уровень.\n \nВ данный момент вышка может хранить {42B02C}%i литров {FFFFFF}нефти.\nПосле улучшения: {42B02C}%i литров {FFFFFF}нефти.\n\n{AFAFAF}Для продолжения используйте кнопку 'Далее'", !"Далее", !"Назад", BizData[bizid][bUpgrade][0], BizData[bizid][bUpgrade][0] * 1000 + 24000, BizData[bizid][bUpgrade][0] * 1000 + 24000 + 1000);
			}
		}

		case 25367:
	    {
	        if(!response and InfoBiz[playerid] != -1)
				 return EnterBiz(playerid, InfoBiz[playerid]);

			new bizid = InfoBiz[playerid], value = strval(inputtextsave);

			if(!value)
			    return SPDF(playerid, 25367, DIALOG_STYLE_INPUT, !"{42B02C}Управление нефтевышкой", "{FFFFFF}На нефтевышке доступно {42B02C}%d {FFFFFF}бочек для нефти.\nБочки влияют на возможность покупки нефти у Вашей нефтевышки.\n \n{AFAFAF}Введите в строку ниже количество бочек, которое хотите приобрести.\n\n{AFAFAF}Стоимость покупки 1 бочки - 100000 BTC.", !"Далее", !"Назад", BizData[bizid][bUpgrade][2]);

			else if(GetCount(playerid, 1811) < value * 100000)
			    return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У вас не достаточно BTC для покупки бочек."), SPDF(playerid, 25367, DIALOG_STYLE_INPUT, !"{42B02C}Управление нефтевышкой", "{FFFFFF}На нефтевышке доступно {42B02C}%d {FFFFFF}бочек для нефти.\nБочки влияют на возможность покупки нефти у Вашей нефтевышки.\n \n{AFAFAF}Введите в строку ниже количество бочек, которое хотите приобрести.\n\n{AFAFAF}Стоимость покупки 1 бочки - 100000 BTC.", !"Далее", !"Назад", BizData[bizid][bUpgrade][2]);

			else if(value > 100)
			    return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}За один раз можно купить не более 100 бочек."), SPDF(playerid, 25367, DIALOG_STYLE_INPUT, !"{42B02C}Управление нефтевышкой", "{FFFFFF}На нефтевышке доступно {42B02C}%d {FFFFFF}бочек для нефти.\nБочки влияют на возможность покупки нефти у Вашей нефтевышки.\n \n{AFAFAF}Введите в строку ниже количество бочек, которое хотите приобрести.\n\n{AFAFAF}Стоимость покупки 1 бочки - 100000 BTC.", !"Далее", !"Назад", BizData[bizid][bUpgrade][2]);

			else if(BizData[bizid][bUpgrade][2] + value > 1000)
			    return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}Данная сумма превышает максимальное кол-во бочек."), SPDF(playerid, 25367, DIALOG_STYLE_INPUT, !"{42B02C}Управление нефтевышкой", "{FFFFFF}На нефтевышке доступно {42B02C}%d {FFFFFF}бочек для нефти.\nБочки влияют на возможность покупки нефти у Вашей нефтевышки.\n \n{AFAFAF}Введите в строку ниже количество бочек, которое хотите приобрести.\n\n{AFAFAF}Стоимость покупки 1 бочки - 100000 BTC.", !"Далее", !"Назад", BizData[bizid][bUpgrade][2]);

			BizData[bizid][bUpgrade][2] += value, DeleteItem(playerid, 1811, -value * 100000);
			return EnterBiz(playerid, bizid), UpdateNeftText(bizid);
		}

		case 25369:
	    {
	        if(!response and InfoBiz[playerid] != -1)
				 return EnterBiz(playerid, InfoBiz[playerid]);

			new bizid = InfoBiz[playerid];

			if(GetCount(playerid, 1811) < 500000)
			    return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У вас не достаточно BTC для улучшения уровня добычи.");

			if(BizData[bizid][bUpgrade][1] == 30)
			     return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У вас уже максимальный уровень добычи нефти."), EnterBiz(playerid, InfoBiz[playerid]);

           	DeleteItem(playerid, 1811, -500000), SCMF(playerid, COLOR_VALIK, "Вы успешно улучшили свою нефтевышку до %i уровня добычи за 500000 BTC.", BizData[bizid][bUpgrade][1] += 1);
			return EnterBiz(playerid, bizid), UpdateNeftText(bizid);
		}

		case 25370:
	    {
			if(!response and InfoBiz[playerid] != -1)
				 return EnterBiz(playerid, InfoBiz[playerid]);

			new bizid = InfoBiz[playerid];

			if(GetCount(playerid, 1811) < 500000)
			    return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У вас не достаточно BTC для улучшения хранилища нефти.");

			if(BizData[bizid][bUpgrade][0] == 30)
			     return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У вас уже максимальный уровень хранилища нефти."), EnterBiz(playerid, InfoBiz[playerid]);

            DeleteItem(playerid, 1811, -500000), SCMF(playerid, COLOR_VALIK, "Вы успешно улучшили свою нефтевышку до %i уровня хранилища за 500000 BTC.", BizData[bizid][bUpgrade][0] += 1);
			return EnterBiz(playerid, bizid), UpdateNeftText(bizid);
		}

		case 25192:
		{
			if(!response)
				return false;

			switch listitem do
			{
				case 0: showFamilyCarsDialog(playerid);
				case 1: SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}В разработке...");
			}

			return true;
		}

		case 25197:
		{
			if(!response)
				return false;

			new Cache:result = mysql_query(mysql, (str_f("SELECT COUNT(*) FROM ownable WHERE family_id = %d AND `Owner` = '%s'", FP_Data[playerid][F_FAMILY_ID], GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name")))), carid = GetPlayerVehicleID(playerid), count, familyCarOwnableIds[20];
			cache_get_value_name_int(0, "COUNT", count);

			if(count >= GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot"))
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вашей семьи недостаточно слотов!");

			if(pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarCarID] == carid)
			    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете перевести транспорт, пока вы торгуете на автобазаре");

			if(GetCount(playerid, 1811) < 1000000)
			    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно BTC. Вы можете обменять их в Центральном банке.");

			Int_UnPackMassive(GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "autopark_car_ownable_id"), familyCarOwnableIds);
			for(new i; i < GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot"); i++)
			{
				if(familyCarOwnableIds[i] != -1) 
					continue;

				familyCarOwnableIds[i] = CarInfo[GetVehicleID(carid)][cID];
				UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`autopark_car_ownable_id` = '%s'", Int_PackMassive(0, familyCarOwnableIds));
				break;
			}

			DeleteItem(playerid, 1811, 1000000);
			ExitCar(playerid), SCMF(playerid, COLOR_VALIK, "Вы успешно сделали личный автомобиль '%s' семейным.", GetVehicleName(carid));
			SetString(CarInfo[GetVehicleID(carid)][cOwner], GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name")), SetString(CarInfo[GetVehicleID(carid)][cKeyer], GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name"));
			SQL("UPDATE `ownable` SET `family_id` = '%i' WHERE `ID` = '%i'", FP_Data[playerid][F_FAMILY_ID], CarInfo[GetVehicleID(carid)][cID]);
			SellCar(carid, true, true), GetNumberCars(playerid, PI[playerid][pCars]);

			return cache_delete(result);
		}

		case 25198:
		{
			if(!response)
				return false;

			if(!IsValidNumberCars(playerid))
				return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш уровень VIP недостаточно высок чтобы иметь столько авто!");
				
			new carid = GetPlayerVehicleID(playerid), familyCarOwnableIds[20];

			if(pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarCarID] == carid)
			    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете перевести транспорт, пока вы торгуете на автобазаре");

			if(GetCount(playerid, 1811) < 1000000)
			    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно BTC. Вы можете обменять их в Центральном банке.");
			    
			Int_UnPackMassive(GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "autopark_car_ownable_id"), familyCarOwnableIds);
			for(new i; i < GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot"); i++)
			{
				if(familyCarOwnableIds[i] != CarInfo[GetVehicleID(carid)][cID]) 
					continue;

				familyCarOwnableIds[i] = -1;
				UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`autopark_car_ownable_id` = '%s'", Int_PackMassive(0, familyCarOwnableIds));
				break;
			}
			DeleteItem(playerid, 1811, 1000000);
			ExitCar(playerid), SCMF(playerid, COLOR_VALIK, "Вы успешно сделали семейный автомобиль '%s' личным.", GetVehicleName(carid));
			SetString(CarInfo[GetVehicleID(carid)][cOwner], PN(playerid));
			SQL("UPDATE ownable SET `family_id` = '-1' WHERE ID = '%i'", CarInfo[GetVehicleID(carid)][cID]);
			destroyFamilyCar(playerid, GetPlayerVehicleFamily(playerid));

			return true;
		}

		case 15219:
		{
			if(!response)
				return false;

			switch(gpdList(playerid, 0) - listitem)
			{
				case -1:
				{
					new count;
					for(new i; i < 20; i++)
					{
						if(FP_Data[playerid][F_FAMILY_IDCAR_CARS][i] == INVALID_VEHICLE_ID && FP_Data[playerid][F_FAMILY_PLAYER_CARS][i] == INVALID_PLAYER_ID or (GetPlayerVehicleID(FP_Data[playerid][F_FAMILY_PLAYER_CARS][i]) == FP_Data[playerid][F_FAMILY_IDCAR_CARS][i] && GetPlayerVehicleSeat(playerid) == 0))
							continue;
                        
						SetString(CarInfo[GetVehicleID(FP_Data[playerid][F_FAMILY_IDCAR_CARS][i])][cOwner], GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name")), SetString(CarInfo[GetVehicleID(FP_Data[playerid][F_FAMILY_IDCAR_CARS][i])][cKeyer], GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name"));
						destroyFamilyCar(playerid, i);
						count++;
					}

					SCMF(playerid, COLOR_VALIK, "[Информация] {ffffff}Вы заспавнили {ffff00}%i ед. {ffffff}незанятого семейного транспорта.", count);
					SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], (str_f("{6495ED}[Family Car] Член семьи %s[%i] заспавнил незанятый семейный транспорт.", PN(playerid), playerid)));
				}
				case 0: SPDF(playerid, 25195, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{ffffff}Вы действительно хотите купить новый слот в семейном паркинге?\n\nЕго стоимость: {ffff00}%i семейной репутации", !"Купить", !"Назад", GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot") * 1000);
				default: spdList(playerid, 0, listitem), SPDF(playerid, 25194, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{ffffff}Вы действительно хотите взять автомобиль '%s'?\n\n{73B461}-{ffffff} Текущая стоимость аренды: {73B461}$%i{ffffff} в 1 минуту.", !"Взять", !"Назад", GetVehicleName(ShowCar[playerid][listitem][1], true));
			}

			return true;
		}

		case 25195:
		{
			if(!response)
				return showFamilyCarsDialog(playerid);

			if(GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "reputation") < (GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot") * 1000))
				return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}У вашей семьи не достаточно репутации.");

			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "reputation = `reputation` - %i", GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot") * 1000);
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "autopark_slot = `autopark_slot` + %i", 1);

			return SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно приобрели +1 слот к семейному автопарку.");
		}

		case 25194:
		{
			if(!response)
				return showFamilyCarsDialog(playerid);

			listitem = gpdList(playerid, 0);
			new Float:position[4], id = FindFreeCarSlot(true);

			switch(FKV_Data_Int[FKV_Data[GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "kv_id")][kvDataId]][kvInterior])
            {
                case 205: position[0] = 1753.8534, position[1] = 436.3352, position[2] = 19.8667, position[3] = 175.6019;//ls
                case 209: position[0] = -2012.0436, position[1] = 427.6310, position[2] = 34.7439, position[3] = 179.8325;//sf
                case 210: position[0] = 2495.0557, position[1] = 2238.4915, position[2] = 10.3994, position[3] = 88.1629;//lv
            }

			FP_Data[playerid][F_FAMILY_IDCAR_CARS][listitem] = J_AddStaticVehicleEx(ShowCar[playerid][listitem][1], position[0], position[1], position[2], position[3], random(126), 0, -1, 0, 0, id);
			VehicleInfo[FP_Data[playerid][F_FAMILY_IDCAR_CARS][listitem]][vFamily] = FP_Data[playerid][F_FAMILY_ID];
			loadVehicleCustomTuning(FP_Data[playerid][F_FAMILY_IDCAR_CARS][listitem], id, ShowCar[playerid][listitem][0], playerid, true);

			SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], (str_f("{6495ED}[Family Car] Член семьи %s[%i] взял '%s' с автопарка семьи.", PN(playerid), playerid, GetVehicleName(ShowCar[playerid][listitem][1], true))));
			SCMF(playerid, COLOR_VALIK, "Вы взяли транспорт '%s'.", GetVehicleName(ShowCar[playerid][listitem][1], true));
			ShowCar[playerid][listitem][0] = ShowCar[playerid][listitem][1] = INVALID_DATA_ID;
			
			SCM(playerid, COLOR_GREY, !"[Подсказка] {ffffff}Если вы будете отсутствовать за рулём более 3 минут, транспорт будет отправлен в семейный паркинг.");

			PutPlayerInVehicle(playerid, FP_Data[playerid][F_FAMILY_IDCAR_CARS][listitem], 0);

			FP_Data[playerid][F_FAMILY_PLAYER_CARS][listitem] = playerid;
			FP_Data[playerid][F_FAMILY_3DTEXT_CARS][listitem] = CreateDynamic3DTextLabel( (str_f("[ Семейный транспорт ]\n%s", GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name"))), FamilyColor[GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "color")][1][0], 0.0000, 0.0000, 0.0500, 5.0000, INVALID_PLAYER_ID, FP_Data[playerid][F_FAMILY_IDCAR_CARS][listitem]);
		}

		case 27023:
		{
			if(!response)
				return false;

			if(listitem != 3) showCustomBannerDialogs(playerid, listitem);
			return true;
		}

		case 27024:
		{
			if(!response)
				return showCustomBannerDialogs(playerid);

			PI[playerid][pBannerInfo][0] = listitem;
			return showCustomBannerDialogs(playerid, 0);
		}

		case 27075:
		{
			if(!response)
				return showCustomBannerDialogs(playerid);

			PI[playerid][pBannerInfo][gpdList(playerid, 0)] = listitem;

			if(gpdList(playerid, 0) == 1 && listitem == 16)
				return showCustomBannerDialogs(playerid, 3);

			return showCustomBannerDialogs(playerid, gpdList(playerid, 0));
		}

		case 27129:
		{
			if(!response)
				return showCustomBannerDialogs(playerid);

			SetString(PI[playerid][pBannerCustomText], inputtextsave);
			return showCustomBannerDialogs(playerid);
		}

		case 26258:
		{
			if(!response)
				return SPD(playerid, 26257, DIALOG_STYLE_LIST, !"Информация", !"[1] Основная информация\n[2] Какой транспорт можно получить?\n[3] Преимущества полученного транспорта", !"Выбрать", !"Закрыть");
		}

		case 26257:
		{
			if(!response)
			    return false;

			switch listitem do
			{
				case 0:
					return SPD(playerid, 26258, DIALOG_STYLE_MSGBOX, !"Основная информация", !"{FFFFFF}На станциях технического обслуживания (СТО) в деревне\nБлюббери и Форт Карсон вы можете обменять 2 сертификата с \n\
						одинаковыми типами транспорта на 1 сертификат уникального авто.\n\nОбмен можно осуществить у автоподборщика на одном из СТО.\nЧтобы найти СТО, используйте /gps > Важные места > Станция тех. обслуживания\n\n\
						Для обмена у вас должно быть:\n- либо 2 сертификата с кастомными грузовиками, \n- либо 2 сертификата с кастомными самолетами, \n- либо 2 сертификата с кастомными автобусами. \n\nМодели сертификатов транспорта могут быть разными,\n\
						главное чтобы они были одного типа.\n\n\n{cccccc}Стоимость одной попытки обмена - 5 000 000$\nШанс на удачный обмен составляет 1%.\n{FFFF00}Важно! {cccccc}Если владелец СТО находится рядом с бизнесом,\nшанс успешного обмена будет составлять 2%!\n\
						Совершить обмен можно в двух СТО, проверьте, \nвозможно на одном из них владелец бизнеса будет рядом.\n\nПосле успешного обмена сертификатов вы сможете получить \nсвой новый транспорт в специальном месте.\n\n{FFFF00}Важно! {cccccc}Если во время получения приза у вас в инвентаре \n\
						не окажется 2 сертификатов старого транспорта,\nтогда получение нового транспорта будет недоступно, \nпри этом потраченные средства на обмен возвращены не будут.\n\nМаксимальное количество попыток обмена в день: 10 шт.", !"Закрыть", !"Назад");

				case 1:
					return SPD(playerid, 26258, DIALOG_STYLE_MSGBOX, !"Какой транспорт можно получить?", !"{FFFF00}При обмене двух сертификатов с типом кастомных грузовиков:\n{FFFFFF}- Volvo FH 12\n- Tesla Semi\n- Western Star\n\n{FFFF00}При обмене двух сертификатов с типом кастомных автобусов:\n{FFFFFF}- Mercedes-Benz Tourismo\n\n{FFFF00}При обмене двух сертификатов с типом кастомных самолетов:\n{FFFFFF}- Spaceflight", !"Закрыть", !"Назад");

				case 2:
					return SPD(playerid, 26258, DIALOG_STYLE_MSGBOX, !"Преимущества полученного транспорта", !"{FFFF00}Преимущества новых кастомных фур:\n{FFFFFF}- Не тратится масло и состояние двигателя;\n- Приносят доход на 20 процентов больше.\n- При доставке груза будет шанс 10 процентов получить рецепт сиропа характеристик.\n- При каждом взвешивании вы будете получать хот дог, который не будет портится.\n- Транспорт можно выставлять на сдачу в аренду бесплатно;\n- В транспорт встроенный улучшенный ремень;\n- В транспорт встроенный увеличенный бак 3 лвл;\n- Транспорт не ломается;\n\n\
						{FFFF00}Преимущества новых кастомных автобусов:\n{FFFFFF}- Не тратится масло и состояние двигателя;\n- Приносят доход на 35 процентов больше.\n- Транспорт можно выставлять на сдачу в аренду бесплатно;\n- В транспорт встроенный улучшенный ремень;\n- В транспорт встроенный увеличенный бак 3 лвл;\n- Транспорт не ломается;\n\n\
						{FFFF00}Преимущества новых кастомных самолетов:\n{FFFFFF}- Приносят доход на 20 процентов больше.\n- С помощью этого самолета можно долететь до Vice City, просто улетев на край карты;\n\n\n\
						{D8F781}Общие преимущества для всех вышеперечисленных типов:\n{FFFFFF}- Расход бензина на 50% меньше;\n- Транспорту не нужна страховка на повреждения (не начисляются минусы);\n- Транспорт нельзя угнать;\n- При получении наземного транспорта вы так же получаете \nуникальные отбойники для данного транспорта.", !"Закрыть", !"Назад");
			}

			return false;
		}

		case 26255:
		{
			if(!response)
			    return SPD(playerid, 26254, DIALOG_STYLE_LIST, !"Выберите тип транспорт", !"{FFFFFF}[1] Грузовик\n[2] Автобус\n[3] Самолет", !"Выбрать", !"Закрыть");

			if(!GetString(autoSelectionWinnerName, "None"))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Сейчас автоподборщик подбирает транспорт другому игроку, попробуйте позже."), 
					SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}На другом СТО тоже есть автоподборщик, возможно там меньше клиентов (/gps > Важное > СТО)");

			new count = -1;

			for(new i, autoSelectionNeedItems[][] = { {3602, 3617, 6675, 6676, 6678}, {3989, 3990, 6672, 6673}, {4807, 4808, 4809, 6679, 6680} }; i < (pTemp[playerid][tSelectionData][1] == 1 ? 4 : 5); i++)
			{
				if(GetCount(playerid, autoSelectionNeedItems[pTemp[playerid][tSelectionData][1]][i]) < 2)
					continue;
					
				count = i;
				break;
			}

			if(count == -1)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Для автоподбора у вас должно быть в наличии 2 сертификата с выбранным типом кастомного транспорта."), 
					SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Они будут заменены на сертификат нового кастомного транспорта, которое подберёт авто-подборщик.");

			SetString(autoSelectionWinnerName, PN(playerid));
			UpdateDynamic3DTextLabelText(autoSelectionText, COLOR_YELLOW, (str_f("[ Подбирает %s для %s ]", autoSelectionName[pTemp[playerid][tSelectionData][1]], autoSelectionWinnerName)));
			return sendPlayerActionBar(playerid, "Автоподбор", 2);
		}

		case 26254:
		{
			if(!response)
			    return false;

			//new bizid = FindNearestBussines(playerid);
//
			//if(!(bizid == 213) && !(bizid == 228))
			//	return false;

			pTemp[playerid][tSelectionData][0] = 1;	

			//if(!GetString(BizData[bizid][bOwner], "The State"))
			//{
			//	new autoServiceOwner = GetPlayerID(BizData[bizid][bOwner]);
//
			//	if(!(autoServiceOwner == INVALID_PLAYER_ID) && IsPlayerInRangeOfPoint(autoServiceOwner, 25.0, BizData[bizid][bEnter][0], BizData[bizid][bEnter][1], BizData[bizid][bEnter][2]))
			//		pTemp[playerid][tSelectionData][0] = 2;
			//}

			pTemp[playerid][tSelectionData][1] = listitem;

			static const selectionName[][] = {"Грузовик", "Автобус", "Самолет"};

			return SPDF(playerid, 26255, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{FFFFFF}Выбранный тип транспорта: {FFFF00}%s{FFFFFF}\nСтоимость автоподбора: {FFFF00}7500000${FFFFFF}\nШанс автоподбора: {FFFF00}%d\n\
				{AFAFAF}Если владелец/заместитель станции технического обслуживания\nбудет рядом с вами, тогда щанс автоподбора будет 2{FFFFFF}\n\nВы действительно хотите воспользоваться автоподбором?", !"Подобрать", !"Назад", selectionName[listitem], pTemp[playerid][tSelectionData][0]);
		}

		case 26253:
		{
			if(!response)
			    return false;

			switch listitem do
			{
				case 0:
					return SPD(playerid, 26254, DIALOG_STYLE_LIST, !"Выберите тип транспорт", !"{FFFFFF}[1] Грузовик\n[2] Автобус\n[3] Самолет\n", !"Выбрать", !"Закрыть");
			
				case 1:
					return SPD(playerid, 26257, DIALOG_STYLE_LIST, !"Информация", !"[1] Основная информация\n[2] Какой транспорт можно получить?\n[3] Преимущества полученного транспорта", !"Выбрать", !"Закрыть");

				case 2:
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !" ", !"{FA5858}Сейчас на территории СТО нет владельца или его заместителей!\n\n{FFFFFF}Если бы владелец или заместитель СТО был на сервисе,\nтогда шанс успешного автоподбора будет равен 2%.", !"Закрыть", !""),
						SCM(playerid, 0xFA5858FF, !"[Автоподборщик] Сейчас на территории СТО нет владельца или его заместителей!"), SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Если бы владелец или заместитель СТО был на сервисе, тогда шанс успешного автоподбора будет равен 2");

				case 3:
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !" ", !"{cccccc}Автоподборщик: {FFFFFF}- На сегодня у вас осталось попыток: 10", !"Закрыть", !""),
						SCM(playerid, COLOR_GREY, !"Автоподборщик: - На сегодня у вас осталось попыток: 10");
			}	

			return false;
		}

		case 25691:
		{
			if(!response)
				return selectInventoryAccesUsed[playerid][0] = false, SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно отменили надевание нашивки.");

			new
				slot = selectInventoryAccesBoost[playerid][0], nslot = selectInventoryAccesSlot[playerid][0], id;

			SCMF(playerid, -1, "slot: %i, nslot: %i", slot, nslot);
			Inventory[playerid][3][slot] = Inventory[playerid][3][nslot];
			ClearItem(playerid, nslot, 1), selectInventoryAccesUsed[playerid][0] = false, SaveInventory(playerid);
		}

		case 25739:
		{
			if(!response) return false;

			spdList(playerid, 0, listitem);
			showHotKeyDialogChange(playerid, listitem);
		}

		case 25740:
		{
			if(!response) 
				return showHotKeyDialogMenu(playerid);

			new id = gpdList(playerid, 0);

			for(new i; i < 11; i++)
				if(PI[playerid][pHotKeyInfo][i] == HotKey_data[listitem + 9][data_KeyID]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Данная клавиша уже используется для другого действия."), showHotKeyDialogChange(playerid, id);

			PI[playerid][pHotKeyInfo][id] = HotKey_data[listitem + 9][data_KeyID];
    		return showHotKeyDialogMenu(playerid), SCM(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Выбранная горячая клавиша была обновлена."), SQL("UPDATE accounts SET HotKeys = '%s' WHERE ID = '%d'", Int_PackMassive(0, PI[playerid][pHotKeyInfo]), PI[playerid][pID]);
		}

		case 3984:
		{
			if(!response)
                return ShowPointSettings(playerid, 6);

			for(new i; i < sizeof(ChatRoom_data); i++)
				if(TextFind(inputtext, ChatRoom_data[i][data_Name])) 
				{ 
					PI[playerid][pChatRoom][i] = !PI[playerid][pChatRoom][i]; 
					showPlayerChatRoom(playerid, !PI[playerid][pChatRoom][i] ? false : true, ChatRoom_data[i][data_CMD], TextFind(inputtext, "Орг. чат") && (PI[playerid][pMember] && TeamDuty{playerid}) && !IsAtGang(playerid) ? TeamColors[GetTeamID(playerid)][0] : ChatRoom_data[i][data_Color], ChatRoom_data[i][data_Info], ChatRoom_data[i][data_Name]);
				}

			SQL("UPDATE accounts SET ChatRoom = '%s' WHERE ID = '%d'", Int_PackMassive(0, PI[playerid][pChatRoom]), PI[playerid][pID]), showPlayerChatRoomDialog(playerid);
		}

		case 8019:
        {
            if(!response) 
				return false;

			switch(listitem)
			{
				case 0: SPD(playerid, 8020, DIALOG_STYLE_MSGBOX, "Точка входной двери", "{FFFFFF}Вы действительно хотите установить точку входа в дом на месте, где стоите?", !"Принять", !"Назад");
				case 1: SPD(playerid, 8020, DIALOG_STYLE_INPUT, "Стоимость дома", "{FFFFFF}Введите стоимтость для нового дома:", !"Принять", !"Назад");
				case 2: SPD(playerid, 8020, DIALOG_STYLE_TABLIST,  "Выбрать класс дома", "{ae433d}[1]{FFFFFF} Класс 1\n{ae433d}[2]{FFFFFF} Класс 2\n{ae433d}[3]{FFFFFF} Класс 3\n{ae433d}[4]{FFFFFF} Класс 4\n{ae433d}[5]{FFFFFF} Класс 5\n{ae433d}[6]{FFFFFF} Класс 6 (Квартира)", !"Выбрать", !"Отмена");
				case 3: SPD(playerid, 8020, DIALOG_STYLE_TABLIST_HEADERS, "Гараж дома", "Название гаража\tМаксимум ед. т/с\n{ae433d}[1]{CCCCCC} Без гаража\n{ae433d}[2]{FFFFFF} Гараж {ae433d}""wplace"" {CCCCCC}[ 1 ед. т/с]\n{ae433d}[3]{FFFFFF} Гараж {ae433d}""prooms"" {CCCCCC}[ 3 ед. т/с]\n{ae433d}[4]{FFFFFF} Гараж {ae433d}""proomo"" {CCCCCC}[ 5 ед. т/с]\n{ae433d}[5]{FFFFFF} Гараж {ae433d}""reenok"" {CCCCCC}[ 2 ед. т/с]\n{ae433d}[6]{FFFFFF} Гараж {ae433d}""sreet"" {CCCCCC}[ 4 ед. т/с]\n", !"Выбрать", !"Отмена");
				case 4: SPD(playerid, 8020, DIALOG_STYLE_MSGBOX, "Точка выезда из гаража", "{FFFFFF}Вы действительно хотите установить точку входа в дом на месте, где стоите?\n{CCCCCC}Примечание: персонаж/транспорт должен быть повернут спиной к воротам гаража.", !"Принять", !"Назад");
				case 5: AddHouseMenu_data[data_HousePos][0] = AddHouseMenu_data[data_HousePos][1] = AddHouseMenu_data[data_HousePos][2] = AddHouseMenu_data[data_HousePos][3] = AddHouseMenu_data[data_GaragePos][0] = AddHouseMenu_data[data_GaragePos][1] = AddHouseMenu_data[data_GaragePos][2] = AddHouseMenu_data[data_GaragePos][3] = 0.0, AddHouseMenu_data[data_Price] = AddHouseMenu_data[data_HouseType] = AddHouseMenu_data[data_GarageType] = 0;
				case 6:
				{
					if(OWNABLEHOUSES+1 > MAX_HOUSES) return SCM(playerid, COLOR_OLDRED, !"House dont suc add, because house int the bigest");
					if(!AddHouseMenu_data[data_HousePos][0]) return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Установить кординаты для создание метки дома.");
        			if(!AddHouseMenu_data[data_HouseType]) return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Установить класс дома.");
        			if(AddHouseMenu_data[data_GarageType] >= 1 && !AddHouseMenu_data[data_GaragePos][0]) return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Установить кординаты для создание гаража для дома. (или уберите гараж)");

					HouseInfo[OWNABLEHOUSES][hID] = OWNABLEHOUSES;
					HouseInfo[OWNABLEHOUSES][hEnter_X] = AddHouseMenu_data[data_HousePos][0];
					HouseInfo[OWNABLEHOUSES][hEnter_Y] = AddHouseMenu_data[data_HousePos][1];
					HouseInfo[OWNABLEHOUSES][hEnter_Z] = AddHouseMenu_data[data_HousePos][2];
					HouseInfo[OWNABLEHOUSES][hKlass] = AddHouseMenu_data[data_HouseType];
					HouseInfo[OWNABLEHOUSES][hCost] = AddHouseMenu_data[data_Price];
					SetString(HouseInfo[OWNABLEHOUSES][hOwner], "Coder");
					HouseInfo[OWNABLEHOUSES][hExit_X] = 267.1;
					HouseInfo[OWNABLEHOUSES][hExit_Y] = 305;
					HouseInfo[OWNABLEHOUSES][hExit_Z] = 999.148;
					HouseInfo[OWNABLEHOUSES][hInt] = 2;
					HouseInfo[OWNABLEHOUSES][hLevel] = 1;
					for(new i; i < 5; i++) HRoomOwner[OWNABLEHOUSES][i] = "The State";

					if(AddHouseMenu_data[data_GarageType] >= 1)
					{
						HouseInfo[OWNABLEHOUSES][hGarage] = AddHouseMenu_data[data_GarageType];
						HouseInfo[OWNABLEHOUSES][hGarage_X] = AddHouseMenu_data[data_GaragePos][0], HouseInfo[OWNABLEHOUSES][hGarage_Y] = AddHouseMenu_data[data_GaragePos][1], HouseInfo[OWNABLEHOUSES][hGarage_Z] = AddHouseMenu_data[data_GaragePos][2];
					}

					f(global_str, 350, "\
						INSERT INTO `houses`(`ID`, `Enter_X`, `Enter_Y`, `Enter_Z`, `Exit_X`, `Exit_Y`, `Exit_Z`, `Owner`, `Cost` , `Klass`, `Interior`, `Level`, `Garage`, `Garage_X`, `Garage_Y`, `Garage_Z`) \
						VALUES (%d, '%.2f', '%.2f', '%.2f', '%.2f', '%.2f', '%.2f', 'Coder', '%d', '%d', '%d', '%d', '%d', '%.2f', '%.2f', '%.2f')", OWNABLEHOUSES, HouseInfo[OWNABLEHOUSES][hEnter_X], HouseInfo[OWNABLEHOUSES][hEnter_Y], HouseInfo[OWNABLEHOUSES][hEnter_Z], HouseInfo[OWNABLEHOUSES][hExit_X], HouseInfo[OWNABLEHOUSES][hExit_Y], HouseInfo[OWNABLEHOUSES][hExit_Z], HouseInfo[OWNABLEHOUSES][hCost], HouseInfo[OWNABLEHOUSES][hKlass], HouseInfo[OWNABLEHOUSES][hInt], HouseInfo[OWNABLEHOUSES][hLevel], HouseInfo[OWNABLEHOUSES][hGarage], HouseInfo[OWNABLEHOUSES][hGarage_X], HouseInfo[OWNABLEHOUSES][hGarage_Y], HouseInfo[OWNABLEHOUSES][hGarage_Z]);

					mysql_tquery(mysql, global_str);
					HouseIcon[OWNABLEHOUSES] = CreateDynamicMapIcon(HouseInfo[OWNABLEHOUSES][hEnter_X], HouseInfo[OWNABLEHOUSES][hEnter_Y], HouseInfo[OWNABLEHOUSES][hEnter_Z], 31, 0);
					House3DText[OWNABLEHOUSES] = CreateDynamic3DTextLabel(" Дом ", 0xE1AE3CFF, HouseInfo[OWNABLEHOUSES][hEnter_X], HouseInfo[OWNABLEHOUSES][hEnter_Y], HouseInfo[OWNABLEHOUSES][hEnter_Z], 10.0);
					UpdateHouseGarage(OWNABLEHOUSES), UpdateHouse(OWNABLEHOUSES);
					OWNABLEHOUSES++;
				}
			}
			spdList(playerid, 0, listitem);
			if(listitem < 5) return false;
			callcmd::addhousemenu(playerid);
        }

		case 8020:
		{
			if(!response)
				return callcmd::addhousemenu(playerid);

			switch gpdList(playerid, 0) do
			{
				case 0: GetPlayerPos(playerid, AddHouseMenu_data[data_HousePos][0], AddHouseMenu_data[data_HousePos][1], AddHouseMenu_data[data_HousePos][2]), GetPlayerFacingAngle(playerid, AddHouseMenu_data[data_HousePos][3]);
				case 1: AddHouseMenu_data[data_Price] = strval(inputtextsave);
				case 2: AddHouseMenu_data[data_HouseType] = listitem;
				case 3: AddHouseMenu_data[data_GarageType] = listitem;
				case 4: GetPlayerPos(playerid, AddHouseMenu_data[data_GaragePos][0], AddHouseMenu_data[data_GaragePos][1], AddHouseMenu_data[data_GaragePos][2]);
			}

			return callcmd::addhousemenu(playerid);
		}

		case 26020:
		{
			if(!response) 
				return false;

			if(GetCount(playerid, 1811) < (!AksSlot[playerid][5][pTemp[playerid][tSlot]] or listitem == 0 ? 100000 : 50000)) 
				return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас недостаточно BTC!");

			if(!AksSlot[playerid][5][pTemp[playerid][tSlot]] or listitem == 0)
				SPD(playerid, 26021, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}Используя ползунки вокруг объекта, установите нужные позиции аксессуара и нажмите кнопку {33AA33}СОХРАНИТЬ{FFFFFF}\nТакже рядом с кнопкой СОХРАНИТЬ есть возможность переключиться на изменения угла поворота объекта\nЧтобы в момент редактирования пользоваться мышкой, зажмите {33AA33}'ПРОБЕЛ'{FFFFFF}\n\n{FF6347}Для отмены редактирования нажмите клавишу ‘CLOSE’.\nУбрать: в момент редактирования пользоваться мышкой,зажмите ‘ПРОБЕЛ’", !"Понял", !"");
			
			else if(AksSlot[playerid][5][pTemp[playerid][tSlot]] && listitem == 1)
				SPD(playerid, 26024, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{FFFFFF}Мы фиксируем старые позиции вашего аксессуара, требуется ваше подтверждение.\n\nПосле подтверждения позиции будут сброшены и с ваш спишется {33AA33}50000 BTC!", !"Готово", !"Назад");
		}

		case 26021:
		{
			if(!response) 
				return false;

			SystemTextDrawHide(playerid), CancelSelectTextDraw(playerid);

			static const 
				BoneId[][] = {"Спина", "Голова", "Плечо левой руки", "Плечо правой руки", "Левая рука", "Правая рука", "Левое бедро", "Правое бедро", "Левая нога", "Правая нога", "Правая голень", "Левая голень", "Левое предплечье", "Правое предплечье", "Левая ключица (плечо)", "Правая ключица (плечо)", "Шея", "Челюсть"};

			for(new i; i < sizeof(BoneId); i++)
				strcat(global_str, (str_f("{%s}[%i] %s\n", ItemsInfo[pTemp[playerid][tItemId]][itemAttachInfo][0]-1 == i ? "EBB02D" : "FFFFFF", i+1, BoneId[i])));

			SPD(playerid, 26022, DIALOG_STYLE_LIST, !"Выберите кость", global_str, !"Выбрать", !"Отмена");
		}

		case 26022:
		{
			if(!response) 
				return ShowInvent(playerid);

			if(ItemsInfo[pTemp[playerid][tItemId]][itemCustom] == 2 && GetPlayerLauncher(playerid))
			{
				new BitStream:bs = BS_New();

				BS_WriteValue(bs, 
					PR_UINT32, -pTemp[playerid][tSlot]-1);

				PR_SendRPC(bs, playerid, 116), BS_Delete(bs);
			}
			else EditAttachedObject(playerid, pTemp[playerid][tSlot]);
		}

		case 26023, 26024:
		{
			if(!response) 
				return playerEditAccessories_clear(playerid);

			listitem = (dialogid == 26023 ? 100000 : 50000);

			if(dialogid == 26024)
				playerEditAccessories_clear(playerid);

			else 
			{
				new slot = pTemp[playerid][tSlot];

				AksSlot[playerid][5][slot] = true;
				SavePlayerAccessory(playerid);
				SQL("INSERT INTO `edit_accessories`(`ID`, `Slot`, `SkinId`, `ItemId`, `BoneId`, `Attach`) VALUES ('%i', '%i', '%i', '%i', '%i', '%s')", PI[playerid][pID], slot, playerEditAccessories_data[playerid][slot][0], playerEditAccessories_data[playerid][slot][1], playerEditAccessories_data[playerid][slot][2], Float_PackMassive(0, playerEditAccessories_attach[playerid][slot]));
				SCMF(playerid, COLOR_VALIK, "Поздравляем! Теперь аксессуар '%s' всегда будет выглядить так!", ItemsInfo[playerEditAccessories_data[playerid][slot][1]][itemName]);
				SCM(playerid, COLOR_VALIK, !"Вы можете повторно обратиться в магазин аксессуаров, чтобы изменить позиции этого аксессуара!");
			}
			
			DeleteItem(playerid, 1811, listitem);
		}

		case 25315:
		{
			if(!response)
				return true;

			new rentVehicleInfo[3];
			if(sscanf(inputtext, "P<,>a<i>[3]", rentVehicleInfo)) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}Не правильный формат ввода!");
			if(rentVehicleInfo[0] == INVALID_PLAYER_ID or !pTemp[rentVehicleInfo[0]][tAuthorized]) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}Этот игрок не в игре или еще не авторизирован.");
			if(!ProxDetectorS(5.0, playerid, rentVehicleInfo[0])) return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Вы должны быть рядом с игроком!");
			if(PI[rentVehicleInfo[0]][pLevel] < 10) return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Сдавать транспорт в аренду можно игрокам выше 10-го уровня!");
		}
		
		case 26820:
		{
			if(!response)
				return true;

			switch listitem do
			{
				case 0: return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"{BFBBBA}Информация о VIP статусе", "{FFFFFF}VIP-статус: \t{FFFF00}%s\n{ffffff}Дополнение VIP-аккаунта: \t{FFFF00}%s\n", !"Назад", !"", VipNames[PI[playerid][pVIP]], !PI[playerid][pAddVIP] ? "Ни разу не активировано" : PI[playerid][pAddVIP] == FOREVER ? "Навсегда" : (str_f("до %s", UNIX_TO_DATE(PI[playerid][pAddVIP]))));
				case 1: return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{BFBBBA}Информация о Premium VIP", !"{ff6666}Открытые привилегии Premium VIP (0 уровень):\n \n{FF6347}1. Возможность телепортировать к себе личный транспорт через приложение трезвого водителя в телефоне. \nТакже на ваш личный транспорт больше не будут начисляться налоги!;\n \n{FF6347}2. При смерти и использовании, ваши аксессуары не будут терять очков прочности. \nТакже улучшения для оружия, такие как цевьё, компенсатор и приклад будут ломаться в 2 раза реже;\n \n{FF6347}3. Время на призыв охранника будет снижено до 3-х секунд, \nа время на улучшение аксессуаров в мастерской одежды будет уменьшено в 2 раза. \nВ качестве подарка при открытии улучшения Вы получите скин Мидас (ID: 806), \nс которым каждые 2 часа будете получать случайный эликсир;\n \n{FF6347}4. Возможность устанавливать до 2-х точек для спавна при входе в игру. \nДополнительно появится возможность устанавливать названия этим местам. \nТакже Вы будете получать на 15% больше AZ на праздничных квестах;\n \n{FF6347}5. Расширение лимита на +3 слота для домов, +10 слотов для транспорта и +1 слот для бизнеса. \nЦвет сообщений в VIP чате будет изменен на золотой. \nПомимо этого ожидание перевода авто в сертификат для острова Vice City составит всего 30 сек. вместо 1 часа;\n \n{FF6347}6. Увеличение стака ресурсов у данных предметов в инвентаре: \nлен, хлопок, камень, металл, бронза, серебро, золото, алюминий и уголь, будут вмещаться со стаком 1000 ед. \nДля древесины высшего качества, куска редкой ткани и дров, стак будет увеличен в 3 раза. \nПомимо этого будет доступна +1 страница инвентаря;\n \n{FF6347}7. Персонаж будет терять уровень сытости в 2 раза медленнее. \nЕсли у вас будет малый уровень сытости, то вы все равно сможете бегать быстро. \nВ качестве подарка при открытии данного бонуса вы получите авто Porsche 992 Off-Road с 3500 HP и вечным нитро;\n \n{FF6347}8. Шанс успешного крафта всех предметов и шанс успешной заточки предметов будет увеличен на +1 процент. \nТакже появится возможность использовать команду /admins и видеть количество администрации онлайн;\n \n{FF6347}9. Возможность получать +3 AZ-Coins в PayDay. \nПомимо этого вы сможете получать увеличенный дроп при открытии ларцов, рулеток и NFT контейнеров на 15 процентов;\n \n{FF6347}10. Доступна возможность собирать воздушный шар и дельтаплан в зеленой зоне, их сборка будет проходить в 2 раза быстрее. \nДополнительно вы получите уникальный Паспорт Vice City. \nОн будет давать возможность полететь с острова Vice City на любой другой сервер (/help - Межсерверные перелеты);", !"Назад", !"");
			}
		}

		case 25765:
		{
			if(!response)
                return false;

			switch(listitem)
			{
				case 0: { }
				case 1:
				{
					if(!GetCount(playerid, 7035)) return SCM(playerid, COLOR_RED, "У Вас нет разрешения на получение номера!"), SCM(playerid, COLOR_VALIK, "[Подсказка] {ffffff}Получить разрешение можно у сотрудника любого полицейского департамента.");

					switch GetPlayerLauncher(playerid) do
					{
						case 1: 
						{
							executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"CarNumbers\"]');");
							executeEvent(playerid, 0, "window.executeEvent('event.carNumbers.initializeUSAPrice', '[{\"type\":\"regular\",\"value\":50000}]');");
							executeEvent(playerid, 0, "window.executeEvent('event.carNumbers.initializeCISPrice', '[{\"type\":\"regular\",\"value\":50000}]');");
							executeEvent(playerid, 0, "window.executeEvent('event.carNumbers.setErrorMessage', '[\"\"]');");
							cursorPlayer(playerid, 0, true);
						}
						case 2: cursorPlayer(playerid, 51, true);
					}
				}
				case 2:
				{
					global_str = "{CCCCCC}Номерной знак\t{CCCCCC}Страна\t{CCCCCC}Регион\n";

					for(new i, id; i < PI[playerid][pInvCell]; i ++)
					{
					    if(Inventory[playerid][0][i] == 7034)
					    {
					        id ++;
					        spdList(playerid, id, i);
					        strcat(global_str, (str_f("{ff6666}[%i] {ffffff}%s\t{CCCCCC}[ %s ]\t{CCCCCC}[ %s ]\n", id, InventoryNumber[playerid][0][i], countryNumber[Inventory[playerid][3][i]], InventoryNumber[playerid][1][i])));
					    }
					}
					SCM(playerid, COLOR_VALIK, !"[Подсказка] {ffffff}Выберите номерной знак, который хотите вернуть. Вы получите: {42B02C}100.000$");
					return SPD(playerid, 26481, DIALOG_STYLE_TABLIST_HEADERS, !"{BFBBBA}Возврат номерного знака", global_str, !"Вернуть", !"Назад");
				}
			}
		}

		case 26481:
	    {
	        if(response && GetCount(playerid, 7034) && listitem >= 0)
	        {
	            new id = gpdList(playerid, listitem+1);
				SCMF(playerid, COLOR_VALIK, "[Информация] {ffffff}Вы успешно вернули номерной знак {ff6666}%s[%s] (%s) {ffffff}за {33AA33}10.000 BTC", InventoryNumber[playerid][0][id], countryNumber[Inventory[playerid][3][id]], InventoryNumber[playerid][1][id]);
				return ClearItem(playerid, id, 1), GiveMoney(playerid, 100000);
	        }
	    }

		case 26186:
		{
			if(!response)
				return true;

			switch listitem do
			{
				case 3: callcmd::settings(playerid);
				case 4: 
				{
					if(!PI[playerid][pBankPass])
                    	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}Вы не можете воспользоватся банком/банкоматом.{FFFFFF}\nУ вас нет банковской карты. Получить ее можно в\nбанковском отделении Las Venturas ,или у сотрудника банка!", !"Закрыть", !"");

					if(!PI[playerid][pKlogin])
						return SPD(playerid, 991, DIALOG_STYLE_INPUT, !"", !"{929290}Вы должны подтвердить свой PIN-код к карточке.\nВведите свой код в ниже указаную строку.", !"Принять", !"Закрыть");
					
					return SPD(playerid, 6565, DIALOG_STYLE_LIST, !"", !"{FFFFFF}1. Состояние основного счета\n2. Состояние {DBEF2A}личных {FFFFFF}счетов\n3. Перевести деньги с основного счета\n4. Пополнить счет {DBEF2A}SIM{FFFFFF}", !"Принять", !"Отмена");
				}
				case 7: SPDF(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"{BFBBBA}Курс валют (USD)", "{ffff00}Обновлено 5 минут назад\t \t \nBitcoin (BTC):\t$%d\t{31B404}[ У вас есть: %d BTC ]\n{cccccc}Litecoin (LTC):\t{cccccc}$1\t \n{cccccc}Ethereum (ETH):\t{cccccc}$1\t \nЕВРО (euro):\t$%d\t", !"Закрыть", !"", bankbuybitcoin, GetCount(playerid, 1811), GLS[69]);
				case 8: callcmd::report(playerid);
				case 9:
				{
					global_str = "№ дома\tДо завершения\tТекущая цена\tМинимальная ставка\n";
					
					for(new i; i < MAX_HOUSES; i++)
					{
						if(HouseInfo[i][hAuction])
							f(global_str, sizeof(global_str), "%sДом №%d\t%s\t$%d\t$%d\n", global_str, i, Convert(HouseInfo[i][hAuctionTime]), HouseInfo[i][hAuctionMoney], HouseInfo[i][hAuctionCost][1]);
					}
						
					return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"Дома на аукционе", global_str, !"Закрыть", !"");
				}
				case 11: 
				{
					SCM(playerid, 0x6495EDFF, "[Подсказка] {FFFFFF}Номера телефонов государственных служб:");
					SCM(playerid, -1, "1.{6495ED} 111 - {FFFFFF}Проверить баланс телефона");
					SCM(playerid, -1, "2.{6495ED} 060 - {FFFFFF}Служба точного времени");
					SCM(playerid, -1, "3.{6495ED} 911 - {FFFFFF}Полицейский участок");
					SCM(playerid, -1, "4.{6495ED} 912 - {FFFFFF}Скорая помощь");
					SCM(playerid, -1, "5.{6495ED} 914 - {FFFFFF}Механик");
					SCM(playerid, -1, "6.{6495ED} 8828 - {FFFFFF}Справочная центрального банка");
					SCM(playerid, -1, "7.{6495ED} 997 - {FFFFFF}Служба по вопросам жилой недвижимости (узнать владельца дома)");
				}
				default: SCM(playerid, -1, "Не достпуно по тех. причинам!");
			}

			return true;
		}

		case 25756:
		{
			if(!response)
                return false;

			if(!(2 <= strlen(inputtextsave) <= 23))
				return SPD(playerid, 25756, DIALOG_STYLE_INPUT, !"{AAAAAA}Имя спутника", !"{FFFFFF}Введите имя вашего будущего спутника", !"Выбрать", !"Отмена");

			return SPDF(playerid, 25757, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{ffffff}Вы уверены что хотите назвать своего охранника %s ?\n\n{dcb329}Сменить имя охраннику возможно будет только за 500 AZ Coins", !"Выбрать", !"Назад", inputtextsave), SetPVarString(playerid, "name_bodyguard", inputtextsave), spdList(playerid, 0, gpdList(playerid, 0));
		}

		case 25757:
		{
			if(!response)
                return SPD(playerid, 25756, DIALOG_STYLE_INPUT, !"{AAAAAA}Имя спутника", !"{FFFFFF}Введите имя вашего будущего спутника", !"Выбрать", !"Отмена");

			if(IsPlayerHaveBodyguard(playerid) > 3)
				return SCM(playerid, COLOR_OLDRED, !"Вы не можете иметь больше 4-х спутников");

			new name_bg[24];
			GetPVarString(playerid, "name_bodyguard", name_bg, 24);

			listitem = gpdList(playerid, 0);

			for(new i; i < sizeof(BodyGuardInfo); i++) 
				if(BodyGuardInfo[i][0] == listitem) 
					SQL("INSERT INTO bodyguard (`ItemId`, `Owner`, `Name`, `Health`, `Armour`, `Phrases`) VALUES ('%i', '%s', '%s', '%0.1f', '0.0', 'Не нужно трогать меня или моего хозяина! | Ну всё! ты напросился! А ну, хватай его! | Если ты ещё раз тронешь моего хозяина, тебе капец! | А я предупреждал! Щемись сынок! | Ай, мне больно, не надо! | Шеф, я на месте! | Супер! Теперь гады не пробьют меня | Не поздоровится тому, кто тебя тронет | Ништяк! Сейчас подкрепимся | Немного воды, мне не помешает | Оо вот это по нашему, будь здоров | Наркотааа, круто | Я голоден! Дай мне покушать | Мне нехорошо, дай мне аптечку | Я умею и так! | На меня нет места')", listitem, PN(playerid), name_bg, float(BodyGuardInfo[i][4]));

			SCM(playerid, 0xA7BB4DFF, !"[Информация] {FFFFFF}Вы успешно активировали сертификат охранника!"), SCMF(playerid, 0xA7BB4DFF, "[Информация] {FFFFFF}Ваш новый спутник с именем %s был создан!", name_bg),
			SCM(playerid, 0xA7BB4DFF, !"[Информация] {FFFFFF}Вы можете начать управлять им в специальной вкладке в инвентаре!"), CallTimeOutFunction("@LoadPlayerBodyguards", 500, false, "d", playerid);

			return DeleteItem(playerid, listitem), DeletePVar(playerid, "name_bodyguard");
		}
		
		case 25762:
		{
		    if(!response)
                return false;

			new slot = gpdList(playerid, 0);

			switch listitem do
			{
			    case 0:
			    {
			        if(!Bodyguard_playerData[playerid][slot][bg_Spawn])
			        {
						for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
						{
							if(Bodyguard_playerData[playerid][i][bg_Spawn])
							{
								if(ImprovementsData[playerid][idCallTwoBodyguard] && pTemp[playerid][tBodyguardSpawnCount] < 2) continue;
								else return SCMF(playerid, COLOR_OLDRED, "Вы не можете одновременно спавнить больше %i охранников!", ImprovementsData[playerid][idCallTwoBodyguard] ? 2 : 1);
							}

							if(Bodyguard_playerData[playerid][i][bg_Timer])
								return SCM(playerid, COLOR_OLDRED, !"Вы уже вызываете личного охранника!");
						}

                        Bodyguard_playerData[playerid][slot][bg_Timer] = 5;

						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Призыв спутника", !"\
							{ffffff}Идёт призыв спутника!\n\n{ff5733}Не пытайтесь сбить анимацию и покинуть место призыва,\nспутник может быть не призван!", !"Выход", !"");

                        SetPlayerAttachedObject(playerid, 6, 18868, 6, 0.12, 0.01, 0.0, 90.0, 190.0, 0.0, 1.0, 1.0, 1.0);
                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					}
					else
					{
						Bodyguard_playerData[playerid][slot][bg_Spawn] = !Bodyguard_playerData[playerid][slot][bg_Spawn];
       					BodyguardDelete(playerid, slot);
						pTemp[playerid][tBodyguardSpawnCount]--;
					}
				}

				case 1: Show_bodyguardDialog(playerid, 2, slot);

				case 3:
				{
					if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1129.0880, -1432.3135, 15.7970))
				        return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Продать можно только на центральном рынке!");

					SPD(playerid, 25763, DIALOG_STYLE_INPUT, !"Продажа охранника", !"{ffffff}\
						Введите ID игрока и цену через запятую (в долларах)\nПример: {9acd32}6,1000000{ffffff}\nЦена может быть от 0 до 1.000.000.000", !"Выбрать", !"Отмена");
				}

				case 4: if(Bodyguard_playerData[playerid][slot][bg_Spawn]) Show_bodyguardDialog(playerid, 1, slot); else return SCM(playerid, COLOR_RED, "[Ошибка] {ffffff}Данный пункт доступен только когда охранник заспавнен.");

				case 6: 
				{
					if(Bodyguard_playerData[playerid][slot][bg_Spawn])
                        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Для начала выгрузите вашего охранника!");

                    SQL("DELETE FROM `bodyguard` WHERE `Owner` = '%s' AND `ID` = '%d' LIMIT 1", PN(playerid), Bodyguard_playerData[playerid][slot][bg_Id]);
					CallTimeOutFunction("@LoadPlayerBodyguards", 500, false, "d", playerid);
				}
			}
		}

		case 25781:
		{
			new slot = gpdList(playerid, 0);

			if(!response)
			    return SPDF(playerid, 25762, DIALOG_STYLE_LIST, (str_f("%s", Bodyguard_playerData[playerid][slot][bg_Name])), "{%s}[1] %s\n{%s}[2] Воспроизвести анимацию\n[3] Изменить имя спутника {FFD700}[500 AZ Coins]{FFFFFF}\n[4] Продать другому игроку\n[5] Изменить реплики\n{FFFFFF}[6] Сдать охранника в аренду\n{FFFFFF}[7] Распрощаться (выбросить)", !"Выбрать", !"Отмена", Bodyguard_playerData[playerid][slot][bg_Timer] > 0 ? "BFBBBA" : "FFFFFF", Bodyguard_playerData[playerid][slot][bg_Spawn] ? "Спрятать" : "Заспавнить рядом с собой", Bodyguard_playerData[playerid][slot][bg_Spawn] ? "FFFFFF" : "BFBBBA");
		
			global_str = "";

			for(new i, count, clearSelect[] = {29, 62, 73, 91, 99, 112, 123}; i < sizeof(AnimInfo); i++)
			{
				if(AnimInfo[i][anim_CategoryID] != (listitem + 1)) continue;
				strcat(global_str, (str_f("{AAAAAA}Анимация: %s	{C5B469}[/pedanims %i]\n", AnimInfo[i][anim_Named], AnimInfo[i][anim_SelectID])));
				count++;
				if(AnimInfo[i][anim_SelectID] - clearSelect[listitem] != count && count == clearSelect[listitem]) strcat(global_str, !"\n{D8B930}>>> Следующая страница");
			}

			if(GlobalMassive[playerid][9]) strcat(global_str, !"\n{C5B469}<<< Предыдущая страница");
			SPD(playerid, 25782, DIALOG_STYLE_TABLIST, !"Выберите анимацию", global_str, !"Выбрать", !"Назад");
			spdList(playerid, 1, listitem+1);
		}

		case 25782:
		{
			new slot = gpdList(playerid, 0), category = gpdList(playerid, 1), clearSelect[] = {0, 29, 62, 73, 91, 99, 112, 123};

			if(!response)
				return Show_bodyguardDialog(playerid, 2, slot);

			if(TextFind(inputtext, ">>> Следующая страница") or TextFind(inputtext, ">>> Предыдущая страница"))
				return false;

			return spdList(playerid, 1, listitem + clearSelect[category - 1]), SPDF(playerid, 25783, DIALOG_STYLE_LIST, (str_f("Анимация: %s", AnimInfo[listitem + clearSelect[category - 1]][anim_Named])), "- Воспроизвести\n- %s\n \n{FFE986}Для быстрого доступа используйте /pedanims %i", !"Выбрать", !"Назад", Bodyguard_animationFavorite[playerid][slot][listitem + clearSelect[category - 1]] ? "Убрать из избранного" : "Добавить в избранное", listitem + clearSelect[category - 1] + 1);
		}

		case 25783:
		{
			new slot = gpdList(playerid, 0), animID = gpdList(playerid, 1);

			if(!response)
				return false;

			if(!Bodyguard_playerData[playerid][slot][bg_Spawn])
				return SCM(playerid, COLOR_OLDRED, "[Ошибка]{ffffff} Охранник не призван!");

			setAnimPed(Bodyguard_npcData[playerid][slot][bgnpc_NPC], AnimInfo[animID][anim_Library], AnimInfo[animID][anim_Name], 4.1, 0, 0, 0, 0, 0);
			SCM(playerid, COLOR_VALIK, !"[Подсказка]{Ffffff} Вы можете использовать /pedanims для быстрого доступа!");
		}

		case 25753:
		{
			if(!response)
			    return false;

			new slot = gpdList(playerid, 0);

            SPDF(playerid, 25754, 1, !"Изменить реплики спутника", "\
				{ffffff}%s\n\
				{73b461}- %s{ffffff}\n\n\
				{bfbbba}Введите реплику которую хотите указать", !"Выбрать", !"Назад", Bodyguard_phrasesData[playerid][slot][listitem], Bodyguard_phrasesCondition[listitem]);

			spdList(playerid, 0, slot);
			spdList(playerid, 1, listitem);
		}

		case 25754:
		{
			new slot = gpdList(playerid, 0);

			if(!response)
				Show_bodyguardDialog(playerid, 1, slot);

			listitem = gpdList(playerid, 1);

			if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 32) 
				return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Длина реплики слишком короткое или слишком большое!");

			SetString(Bodyguard_phrasesData[playerid][slot][listitem], inputtextsave);

			SQL("UPDATE `bodyguard` SET `Phrases` = '%s' WHERE Owner = '%s' AND Name = '%s';", String_PackMassive(0, Bodyguard_phrasesData[playerid][slot]), Bodyguard_playerData[playerid][slot][bg_Owner], Bodyguard_playerData[playerid][slot][bg_Name]);

			return SCM(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы успешно изменили реплику своему охраннику."), Show_bodyguardDialog(playerid, 1, slot);
		}

		case 25644:
		{
			if(!response)
				return true;

			new count = gpdList(playerid, 0),
				index = gpdList(playerid, 1),
				input = strval(inputtextsave),
				cost = (DonateInfo_data[index][data_Rub] ? PI[playerid][pRoubles] : PI[playerid][pVirMoney]);
			
			if(count > 1 && !(1 <= input <= 100))
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{FF6666}Ошибка", !"{FF6666}- {FFFFFF}Допустимое количество: от 1 до 100", !"Закрыть", !"");

			if(cost < DonateInfo_data[index][data_Cost])
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{FF6666}Ошибка", !"{FF6666}- {FFFFFF}У вас не хватает денег на счету", !"Закрыть", !"");

			if(DonateInfo_data[index][data_Rub]) GiveRoubles(playerid, -DonateInfo_data[index][data_Cost] * (count > 1 ? input : 1) );
			else GiveDonate(playerid, -DonateInfo_data[index][data_Cost] * (count > 1 ? input : 1) );

			AddItem(playerid, DonateInfo_data[index][data_Give], (count > 1 ? input : 1), 0, -1, 0, IsAAks(DonateInfo_data[index][data_Give]) or IsASkinInv(DonateInfo_data[index][data_Give]) ? 100 : 0);

			if(GetPlayerLauncher(playerid) == 1) executeEvent(playerid, 0, ( str_f("window.executeEvent('event.donationshop.ShopCountDonate', '[[ %i ]]');", PI[playerid][pVirMoney])) );
			else eventMobile(playerid, {42, 0}, IntToStr(PI[playerid][pVirMoney]));
		}

		case 25677:
		{
			if(!response)
				return true;

			listitem = gpdList(playerid, 0);

			if(PI[playerid][pVirMoney] < (!listitem ? 500 : listitem == 1 ? 1000 : listitem == 2 ? 2000 : listitem == 3 ? 4000 : listitem == 4 ? 8000 : listitem == 5 ? 9100 : 11100))
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{FF6666}Ошибка", !"{FF6666}- {FFFFFF}У вас не хватает денег на счету", !"Закрыть", !"");

			GiveMoney(playerid, !listitem ? 10500000 : listitem == 1 ? 21400000 : listitem == 2 ? 43600000 : listitem == 3 ? 89600000 : listitem == 4 ? 184000000 : listitem == 5 ? 24000000 : 60000000, "покупка пака в донате");

			if(listitem < 2) AddItem(playerid, 557, (!listitem ? 5 : 10));
			if(listitem < 5) AddItem(playerid, BoxInfo_data[random(sizeof(BoxInfo_data))][data_ItemID], (!listitem ? 10 : listitem == 1 ? 20 : listitem == 2 ? 45 : listitem == 3 ? 95 : 175));

			if(listitem >= 5)
			{
				AddItem(playerid, 5701, 1);

				if(PI[playerid][pVIP][0] < 6)
					PI[playerid][pVIP][0] = 6,
					PI[playerid][pVipTime] = Global_Time+(1800*24*60*60);

				if(listitem == 6) 
					SetImprovementsData(playerid, idBusinessman, !ImprovementsData[playerid][idBusinessman]),
					SetImprovementsData(playerid, idMoreHouses, !ImprovementsData[playerid][idMoreHouses]);
			}

			GiveDonate(playerid, !listitem ? -500 : listitem == 1 ? -1000 : listitem == 2 ? -2000 : listitem == 3 ? -4000 : listitem == 4 ? -8000 : listitem == 5 ? -9100 : -11100);

			if(GetPlayerLauncher(playerid) == 1) executeEvent(playerid, 0, ( str_f("window.executeEvent('event.donationshop.ShopCountDonate', '[[ %i ]]');", PI[playerid][pVirMoney])) );
			else eventMobile(playerid, {42, 0}, IntToStr(PI[playerid][pVirMoney]));
		}

		case 25995, 25996:
		{
			if(!response)
				return false;

			new index = gpdList(playerid, 0);

			if(PI[playerid][pVirMoney] < DonateInfo_data[index][data_Cost])
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{FF6666}Ошибка", !"{FF6666}- {FFFFFF}У вас не хватает денег на счету", !"Закрыть", !""), sendPlayerNotification(playerid, 2, "Донат", "У вас не хватает денег на счету", 2);

			if(dialogid == 25995)
				AddItem(playerid, DonateInfo_data[index][data_Give], DonateInfo_data[index][data_ID] == 11 or DonateInfo_data[index][data_ID] == 0 ? 10 : 1);

			GiveDonate(playerid, -GetDonateCostAppliedDiscount(index));

			if(GetPlayerLauncher(playerid) == 1) executeEvent(playerid, 0, ( str_f("window.executeEvent('event.donationshop.ShopCountDonate', '[[ %i ]]');", PI[playerid][pVirMoney])) );
			else eventMobile(playerid, {42, 0}, IntToStr(PI[playerid][pVirMoney]));
		}

		case 26180:
		{
			if(!response)
				return false;

			if(!listitem)
				return ShowDonate(playerid);

			ShowProdsDonateDialog(playerid, 0, listitem - 1);
			spdList(playerid, 0, listitem - 1);
		}

		case 26181:
		{
			if(!response)
				return ShowDonate(playerid);

			new selectType = gpdList(playerid, 0);

			if(listitem == 25)
				return ShowProdsDonateDialog(playerid, DonatePlayerPage[playerid] + 1, selectType);
			
			else if(listitem == 26)
				return ShowProdsDonateDialog(playerid, (DonatePlayerPage[playerid] == 0 ? 0 : DonatePlayerPage[playerid] - 1), selectType);

			switch selectType do
			{
				case 0, 4:
					ShowDonateDialog(playerid, (!selectType ? listitem + 2 : (!listitem ? 0 : 1)), listitem);

				case 1, 2, 3, 5..10:
					ShowDonateDialog(playerid, selectType == 1 ? 8 : 6, listitem + ShowProductsDonate(selectType) + DonatePlayerPage[playerid] * 25);

				case 11:
					ShowDonateDialog(playerid, 7, listitem + ShowProductsDonate(selectType) + DonatePlayerPage[playerid] * 25);
			}
		}

		case 26695:
		{
			if(!response) return false;

			if(PI[playerid][pMoney] < pTemp[playerid][tSalonCartMoney])
				return SCM(playerid, COLOR_RED, "[Ошибка] {ffffff}У вас недостаточно денег.");

			GiveMoney(playerid, -pTemp[playerid][tSalonCartMoney]);
			GiveBizMoney(305, pTemp[playerid][tSalonCartMoney]/2);

		    return tuningStationSetAndSave(playerid, GetPlayerVehicleID(playerid));
	    }
		
		case 25200:
		{
			if(!response) return false;

			if(PI[playerid][pMoney] > 50000000)
				return SendDonateLink(playerid);

			if(GetPlayerAvailableSklad(playerid) == -1)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас уже имеется максимальное количество складов.");

			new id = GlobalMassive[playerid][7], pass;

			for (new i; i < 12; i++)
				pass = pass * 10 + random(10);

			if(pass < 0)
				pass = -pass;

			SCMF(playerid, COLOR_VALIK, "[Информация]{ffffff} Вы успешно приобрели склад №%i в складском помещении №%i", id - 50 * (GetPlayerVirtualWorld(playerid) - 1), GetPlayerVirtualWorld(playerid));
			SCMF(playerid, COLOR_YELLOW, "Только что сгенерированный код доступа к складу: %i", pass);

			SetString(SkladInfo[id][sklad_Owner], PN(playerid));
			PI[playerid][pSkladID][GetPlayerAvailableSklad(playerid)] = id;

			SQL("UPDATE `sklads` SET `Owner` = '%s', `Password` = '%i' WHERE `ID` = '%i'", SkladInfo[id][sklad_Owner], SkladInfo[id][sklad_Password] = pass, id);
			UpdatePlayerDataStr(playerid, "SkladID", Int_PackMassive(0, PI[playerid][pSkladID]));
			UpdateSkladText(id, GetPlayerVirtualWorld(playerid));
		}

		case 25201:
		{
			if(!response) return false;
			
			new id = GlobalMassive[playerid][7];

			if(strlen(inputtextsave) < 1 || strlen(inputtextsave) > 12)
			    return false;

			if(strval(inputtextsave) == SkladInfo[id][sklad_Password])
			{
				switch GlobalMassive[playerid][8] do
				{
					case 1:
					{
						SkladInfo[id - 1][sklad_door_open] = true;
						MoveDynamicObject(SkladInfo[id - 1][sklad_door], sklad_door_position[id - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][0], sklad_door_position[id - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][1], sklad_door_position[id - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][2]+4, 4, sklad_door_position[id - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][3], sklad_door_position[id - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][4], sklad_door_position[id - 50 * (GetPlayerVirtualWorld(playerid) - 1) - 1][5]);
					}

					case 2: SCMF(playerid, -1, "menu | id %i", id);
				}
			}
			else SetPVarInt(playerid, "sklad_repeatpass", Global_Time + 60), SCM(playerid, COLOR_OLDRED, "[Ошибка]{ffffff} Вы ввели неправильный код доступа! Попробывать еще раз можно через 1 минуту.");
		}

		case 25555:
		{
			if(!response) return false;
			ShowScreensDialog(playerid, 1, listitem);
		}
		
		case 25556:
		{
			if(!response || listitem < 2) return ShowScreensDialog(playerid, 0);
   			ShowScreensDialog(playerid, 2);
		}
		
		case 25557:
		{
		    if(!response || listitem > 0) return ShowScreensDialog(playerid, 1);
		    ShowScreensDialog(playerid, 3);
		}
		
		case 25558:
		{
			if(!response)
				return ShowScreensDialog(playerid, 2);

			if(strlen(inputtext) < 1 || ScreenInfo_data[0][data_Status])
				destroyBrowser_object(0);

			for(new i; i < strlen(inputtext); i++)
			{
				if(inputtext[i] == 'v' && inputtext[i - 1] == '?')
				{
					strdel(inputtext, 0, i + 2);
					break;
				}
			}

            SetString(ScreenInfo_data[0][data_VideoLink], inputtext);
            ScreenInfo_data[0][data_Status] = true;
            SetString(ScreenInfo_data[0][data_LastEditName], PlayerName[playerid]);
            
            new hour, minute, day, month, year;
            gettime(hour, minute, _), getdate(year, month, day);
            ScreenInfo_data[0][data_LastEditTime] = Global_Time + ((hour * minute) / (year * month * day));
            
            HTTP(playerid, HTTP_GET, (str_f("churikov.ru/video_duration.php?videoUrl=%s", ScreenInfo_data[0][data_VideoLink])), "", "GetVideoDuration");
            ShowScreensDialog(playerid, 4);
		}

		case 1610:
		{
			if(!response) 
				return ShowPointSettings(playerid, 6);
			
			new type = gpdList(playerid, 1);

			if(listitem == PI[playerid][pCustomInterface][type])
				return showPlayerInterfaceDialog(playerid, type);

			switch type do
			{
				case 1:
				{
					if(1 <= listitem <= 2 && (GetPlayerLauncher(playerid) == 1 or GetPlayerLauncher(playerid) != 2))
						return SCM(playerid, -1, !"Данный тип спидометра доступен только пользователям мобильного лаунчера"), showPlayerInterfaceDialog(playerid, type);

					if(3 <= listitem <= 4 && GetPlayerLauncher(playerid) != 1)
						return SCM(playerid, -1, !"Данный тип худа доступен только пользователям ПК лаунчера!"), showPlayerInterfaceDialog(playerid, type);

					if(GetPlayerState(playerid) == 2)
						SpeedometrSetting(playerid);
				}
				case 2:
				{
					if(1 <= listitem <= 2 or listitem == 6 && (GetPlayerLauncher(playerid) == 1 or GetPlayerLauncher(playerid) != 2))
						return SCM(playerid, -1, !"Данный тип худа доступен только пользователям мобильного лаунчера!"), showPlayerInterfaceDialog(playerid, type);

					if(listitem == 3)
						return SCM(playerid, -1, !"Данный тип худа устанавливается автоматически в PUBG!"), showPlayerInterfaceDialog(playerid, type);

					if(4 <= listitem <= 5 && GetPlayerLauncher(playerid) != 1)
						return SCM(playerid, -1, !"Данный тип худа доступен только пользователям ПК лаунчера!"), showPlayerInterfaceDialog(playerid, type);
				}
				case 3: 
				{
					if(1 <= listitem <= 2 && !GetPlayerLauncher(playerid))
						return SCM(playerid, -1, !"Данный тип радара доступен только пользователям лаунчера!"), showPlayerInterfaceDialog(playerid, type);

					if(listitem == 3 && GetPlayerLauncher(playerid) != 1)
						return SCM(playerid, -1, !"Данный тип худа доступен только пользователям ПК лаунчера!"), showPlayerInterfaceDialog(playerid, type);
				}
			}
			PI[playerid][pCustomInterface][type] = listitem;
			playerUpdateInterface(playerid, type), SaveLauncherSettings(playerid);
			showPlayerInterfaceDialog(playerid, type);
		}

		case 26033:
		{
			if(!response) 
				return false;

			switch listitem do
			{
				case 0: 
				{
					if(PI[playerid][pRank] == 10)
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер не может сменить ник!");

					if(PI[playerid][pAdmin] > 0)
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Админ не может сменить ник!");

					if(IsARPPN(PN(playerid)))
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете сменить РП ник!");

					SPD(playerid, 224, DIALOG_STYLE_INPUT, "{BFBBBA}Смена ника", "{FFFFFF}Вы хотите сменить свой {E9F451}Non-RP{FFFFFF} ник\nВведите новый ник в окно\nЗатем нажмите '{E9F451}Сменить{FFFFFF}'", "Сменить", "Отмена");
				}
				case 1:
				{
				    if(PI[playerid][pLevel] < 10)
						return SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Создать промо-код можно от 10 игрового уровня!");

					f(global_str, 150, "SELECT * FROM `promo` WHERE owner = '%s' LIMIT 1", PN(playerid));
					new Cache:result = mysql_query(mysql, global_str);

					if(!cache_num_rows())
						SPD(playerid, 9470, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}У вас нету собственного промо-кода, хотите создать?", !"Выбрать", !"Отмена");
					else
						SPD(playerid, 9463, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Любой игрок может ввести ваш промо-код в личном меню,\n{FFD476}(/mm > Промо-код){FFFFFF} если уровень игрока\nсоответствует требованиям вашего промо-кода, то игрок\nполучит бонус, вы в свою очередь будете получать\nпроцент от доната игрока в виде {FFD476}реферальных монет{FFFFFF}\n\n{D2772C}Уровень - {FFFFFF}Уровень промо-кода, при повышении которого,\nповышается бонус при использовании, процент с доната\nна максимальном (10) уровне снижается требование по\nуровню игрока с 6 до 5\n\n{D2772C}Бонус при использовании - {FFFFFF}деньги, который получит\nигрок после активации промо-кода, сумма бонуса зависит\nот уровня вашего промо-кода.\n\n{D2772C}Требования по уровню игрока - {FFFFFF}уровень, с которого\nигрок сможет активировать промо-код.\n\n{D2772C}Реферальные монеты - {FFFFFF}Общая сумма полученных монет\nот доната игроков, активировавших ваш промо-код\n\n{D2772C}Позиция в рейтинге{FFFFFF} - в первую очередь зависит от\n{FFD476}уровня промо-кода{FFFFFF} потом от {FFD476}количество активаций{FFFFFF}\nи в конце от {FFD476}баланса реферальных монет{FFFFFF}", !"Выбрать", !"Назад");

					cache_delete(result);
				}
				case 2:
				{
					f(global_str, 100, "SELECT * FROM `nickname_history` WHERE `nh_owner` = '%d'", PI[playerid][pID]);
					mysql_tquery(mysql, global_str, "CheckHistoryName", "d", playerid);
				}
				case 3:
				{
					f(global_str, 150, "SELECT %s, msg FROM history WHERE Name = '%s' ORDER BY Date DESC LIMIT 10;", "DATE_FORMAT(`Date`, '[%Y-%m-%d %H:%i:%S]')", PlayerName[playerid]);
					mysql_tquery(mysql, global_str, "show_ANL", "d", playerid);
				}
				case 4: return PlayerDialogVK(playerid);
				case 6..13: return ShowPointSettings(playerid, listitem-6);
			} 

			return ShowUpdateSettings(playerid);
		}

		case 26034:
		{
			if(!response) return ShowUpdateSettings(playerid);

			switch gpdList(playerid, 0) do
			{
				case 0:
				{
					switch listitem do
					{
						case 0:
						{
							if(strcmp("-", PlayerMail[playerid], true)!=0)	return SPD(playerid, 8851, DIALOG_STYLE_LIST, !"{BFBBBA}", !"{D1FD4D}<<{FFFFFF} Я имею доступ к старой почте!\n{FD4D58}>>{FFFFFF} У меня нет доступа к старой почте!", !"Дальше", !"Отмена");
							return SPD(playerid, 160, 1, !"", !"{70ff86}- Привязать E-mail\n\n{FFFFFF}Напишите свой активный эл.адрес ниже, после вы сможете\nвоспользоваться восстановлением пароля через сайт.", !"Я уверен", !"Не хочу");
						}
						case 1: return callcmd::passwd(playerid, "");
						case 2: 
						{
							if(!PI[playerid][pBankPass]) return SPD(playerid, 0, 0, !"", !"{929090} У вас нет банковской карты!", !"Закрыть", !"");
							else return SPD(playerid, 883, 1, !"", !"Введите {B83434}текущий{FFFFFF} PIN-код от банковской карты", !"Далее", !"Отмена");
						}
						case 3:
						{
							if(PI[playerid][pLevel] < 2) {
								return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Установить защиту могут только игроки старше 1-го уровня!");
							}
							if(strcmp("-", PlayerMail[playerid], true) == 0) {
								return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете подключить Google Authenticator, так как у вас не привязан е-мейл!");
							}
							if(strcmp("0", PI[playerid][pGoogle], true) == 0) {
								return SPD(playerid, 871, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Приложение Google Authenticator используется для создания кодов двухэтапной\nаутенфикации на вашем телефоне. Двухэтапная аутенфикация обеспечивает\nболее надежную защиту вашего аккаунта: чтобы войти в него,\nпотребуется не только пароль, но и код подтверждения.\n\nПриложение работает на устройствах Android, IOS и как дополнение в Google Chrome.\nНайти и загрузить приложение вы можете в {FDC459}Play Market и App Store.\n\n{FFFFFF}При подключенном Google Authenticator при каждой авторизации вам нужно будет вводить код,\nкоторый будет выводится непосредственно в вашем приложении.\n\n{B0FD59}Нажмите: 'Enter', чтобы получить инструкции по подключению.\n\n", !"Дальше", !"Отмена");
							}
							else
							{
								if(GoogleOpen{playerid})
								{
									f(global_str, sizeof(global_str), "1. Код аккаунта: {FC4C4C}%s.\n2. Сколько людей установило защиту?\n3. Удалить Google Authenticator.", PI[playerid][pGoogle]);
									return SPD(playerid, 870, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
								}
								else
									return SPD(playerid, 869, DIALOG_STYLE_INPUT, !"Подтверждение", !"\n\n{FFFFFF}Введите в строку код из приложения {F1FC4C}Google Authenticator {FFFFFF}у вас на телефоне\nили из дополнения Google, для подтверждения аккаунта.\n\n", !"Принять", !"Отмена");
							}
						}
						case 4: PI[playerid][pEmailAuth] = !PI[playerid][pEmailAuth];
					}
				}
				case 1:
				{
					switch listitem do
					{
						case 0:
						{
							SetSettingData(playerid, sdCaseDisplay, !SettingData[playerid][sdCaseDisplay]);

							if(IsPlayerAttachedSlotUsedEx(playerid, 7)) 
								RemovePlayerAttachedObject(playerid, 7);

							SetPlayerAttachedObject(playerid, 8, 1276, 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.3900, 0, 0);
						}
						case 1:
						{
							f(global_str, 600, "Выберите стиль походки: (текущий навык: {9ACD32}%d ед.)",PI[playerid][pWalkingInfo][1]);
							return SPD(playerid, 3763, DIALOG_STYLE_TABLIST_HEADERS, global_str, !"\
								№. Название стиля\tНеобходимый навык\n\
								{FFFF00}Стандартный\t0\n\
								{FFFEFF}Нормальная\t150\n\
								Нормальная 2\t200\n\
								Гангстерская\t300\n\
								Гангстерская 2\t400\n\
								Старческая\t600\n\
								Старческая 2\t700\n\
								Серьзная\t900\n\
								Женская\t1100\n\
								Женская 2\t1200\n\
								На пафосе\t1500\n\
								На пафосе 2\t1600\n\
								С выпрямленой рукой\t1800", !"Выбрать", !"Назад");
						}
						case 2:
						{
							if(strlen(PI[playerid][pOpisanie]) < 3) SPD(playerid, 15016, DIALOG_STYLE_INPUT, !"{BFBBBA}Описание персонажа", !"{ffffff}Напишите краткое описание вашего персонажа:\n{ffff00}(символ {ff0000}/ {ffff00}переносит строку)\n\n{cccccc}(это описание будет отображено на скине вашего персонажа)", !"Применить", !"Назад");
							else {
							f(global_str, 400, "{ffffff}Сейчас у вас установлено описание:\n{cccccc}%s\n\n{ffffff}Вы хотите его удалить?",PI[playerid][pOpisanie]);
							return SPD(playerid, 15017, DIALOG_STYLE_MSGBOX, !"{BFBBBA}Описание персонажа", global_str, !"Удалить", !"Назад"); }
						}
						case 3: return ShowAFKSettingDialog(playerid);
						case 4: SetSettingData(playerid, sdAccessoryFire, !SettingData[playerid][sdAccessoryFire]);
						case 5: return showSelectAuraDialog(playerid);
						case 8: SetSettingData(playerid, sdActionTrade, !SettingData[playerid][sdActionTrade]);
						case 9: SetSettingData(playerid, sdShowDocuments, !SettingData[playerid][sdShowDocuments]);
						case 10: return callcmd::setspawn(playerid);
					}
				}
				case 2:
				{
					switch listitem do
					{
						case 0: SetSettingData(playerid, sdShowPlayerDesc, !SettingData[playerid][sdShowPlayerDesc]);
						case 1: SetSettingData(playerid, sdShowPlayerFamily, !SettingData[playerid][sdShowPlayerFamily]);
						case 2: SetSettingData(playerid, sdShowAddVip, !SettingData[playerid][sdShowAddVip]);
						case 3: SetSettingData(playerid, sdShowWriteStatus, !SettingData[playerid][sdShowWriteStatus]);
						case 4: SetSettingData(playerid, sdShowRegisterNick, !SettingData[playerid][sdShowRegisterNick]);
						case 5:
						{
							SetSettingData(playerid, sdShowName, !SettingData[playerid][sdShowName]);
							foreach(new i: Player) ShowPlayerNameTagForPlayer(playerid, i, SettingData[playerid][sdShowName]);
						}
						case 6: SetSettingData(playerid, sdDamageInformer, !SettingData[playerid][sdDamageInformer]);
						case 7: SetSettingData(playerid, sdHitInformer, !SettingData[playerid][sdHitInformer]);
					}
				}
				case 3:
				{
					switch listitem do
					{
						case 0: SetSettingData(playerid, sdUseFishingRod, !SettingData[playerid][sdUseFishingRod]);
						case 1: return showHotKeyDialogMenu(playerid);
					}
				}
				case 4:
				{
					switch listitem do
					{
						case 0:
						{
							if(PI[playerid][pInvColors] != 120) PI[playerid][pInvColors] = 120;
							else PI[playerid][pInvColors] = 0;
							PI[playerid][pColorInv] = InventColor[120][1];
							PI[playerid][pSelectTD] = InventColor[120][2];
							UpdatePlayerDataInt(playerid, "pInvColors", PI[playerid][pInvColors]);
						}
						case 1:
						{
							PI[playerid][pColorInv] = InventColor[0][1];
							PI[playerid][pSelectTD] = InventColor[0][2];

							UpdatePlayerDataInt(playerid, "pInvColors", PI[playerid][pInvColors] = 0);

							if(InventoryOpen{playerid})
								HideInvent(playerid), ShowInvent(playerid);

							SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вы успешно сбросили настройки инвентаря!");
						}
					}
				}
				case 5:
				{
					switch listitem do
					{
						case 0: SetSettingData(playerid, sdPlaySoundInt, !SettingData[playerid][sdPlaySoundInt]);
						case 1: SetSettingData(playerid, sdPlaySoundGPS, !SettingData[playerid][sdPlaySoundGPS]);
						case 2: SetSettingData(playerid, sdPlaySoundAuth, !SettingData[playerid][sdPlaySoundAuth]);
						case 3: SetSettingData(playerid, sdPlaySoundDrag, !SettingData[playerid][sdPlaySoundDrag]);
					}
				}
				case 6:
				{
					switch listitem do
					{
						case 1..3: return spdList(playerid, 1, listitem), showPlayerInterfaceDialog(playerid, listitem);

						case 0,4..6: PI[playerid][pCustomInterface][listitem > 4 ? listitem + 1 : listitem] = !PI[playerid][pCustomInterface][listitem > 4 ? listitem + 1 : listitem];

						case 7: return showPlayerChatRoomDialog(playerid);

						case 8: { PI[playerid][pCustomInterface][5]++; if(PI[playerid][pCustomInterface][5] > 2) PI[playerid][pCustomInterface][5] = 0; }
						case 9: SetSettingData(playerid, sdDiscordPosition, !SettingData[playerid][sdDiscordPosition]);
						case 10: { }

						case 11: PI[playerid][pCustomInterface][8] = !PI[playerid][pCustomInterface][8];
						case 14: SetSettingData(playerid, sdLanguage, !SettingData[playerid][sdLanguage]);
					}
					playerUpdateInterface(playerid, listitem), SaveLauncherSettings(playerid);
				}
			}

			return ShowPointSettings(playerid, gpdList(playerid, 0));
		}

		case 26312:
		{
			if(!response) 
				return ShowPointSettings(playerid, 1);

			SetSettingData(playerid, sdCustomAura, listitem);
			GetPlayerAura(playerid);

			return showSelectAuraDialog(playerid);
		}

	    case 3728:
	    {
	        if(!response) return false;
	        
			global_str = "";
			for(new i; i < MAX_SELLCARS; i++) ShowSellCar[playerid][i] = 0;
	        switch listitem do
	        {
	            case 0..4:
	            {
	            	new idx;

					for(new i; i < SELLCARS; i++)
					{
						if(!(SellInfo[i][scType] == listitem + 1)) continue;
						f(global_str, 2048, "%s{FFFFFF}%s ($ %d) - %d\n", global_str, GetVehicleName(SellInfo[i][scModel], true), GetCarPrice(SellInfo[i][scModel]), SellInfo[i][scCount]);
						ShowSellCar[playerid][idx] = i;
						idx++;
					}
					if(!idx) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Машин не обнаружено!");
					SPD(playerid, 3729, DIALOG_STYLE_LIST, "{B83434}Список транспорта", global_str, "Выбрать", "Закрыть");
				}
			}
		}
		case 3729:
		{
		    if(response)
		    {
		        SetPVarInt(playerid, "SellCar", ShowSellCar[playerid][listitem]);
		        f(global_str, 300, "Укажите количество доступного транспорта модели %s\nтекущее количество %d,\nстоимость %d", GetVehicleName(SellInfo[ShowSellCar[playerid][listitem]][scModel], true), SellInfo[ShowSellCar[playerid][listitem]][scCount], GetCarPrice(SellInfo[ShowSellCar[playerid][listitem]][scModel]));
		        SPD(playerid, 3730, DIALOG_STYLE_INPUT, "{B83434}Колличество", global_str, "Отправить", "Закрыть");
		    }
		}
		
		
		case 3730:
		{
		    if(response)
			{
			    new id = Int_GetPlayerData(playerid, "SellCar");
			    new count = strval(inputtextsave);
			    if(count < 0 || count > 200)
			    {
					SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Количество транспорта не больше 300!");
                    f(global_str, 300, "Укажите количество доступного транспорта модели %s\nтекущее количество %d,\nстоимость %d", GetVehicleName(SellInfo[id][scModel], true), SellInfo[id][scCount], GetCarPrice(SellInfo[id][scModel]));
		        	SPD(playerid, 3730, DIALOG_STYLE_INPUT, "{B83434}Колличество", global_str, "Отправить", "Закрыть");
		        	SetPVarInt(playerid, "SellCar", id);
		        	return 1;
				}
				f(global_str, 110 + 2, "Вы установили модели %s новые лимит %d", GetVehicleName(SellInfo[id][scModel], true), count);
				SCM(playerid, -1, global_str);
				SellInfo[id][scCount] = count;
				SaveSellCar(id);
			}
		}
		
		case 3735:
		{
			if(!response) 
				return false;
			
			return SendkladProgress(playerid, 0, random(6));
		}
		
		case 3736:
		{
			if(!response)
				return false;
			
			new id = pTemp[playerid][kladID];
			
			if(!KladInfo[id][kladStatus])
				return false;
			
			if(!strcmp(captcha_klad[KladInfo[id][kladCaptcha]][1], inputtextsave, true) && !isnull(inputtextsave))
			{
				SCM(playerid, COLOR_VALIK, !"[Hitch-System]{FFFFFF} Поздравляем! Вы успешно взломали замок клада.");
				SCM(playerid, COLOR_VALIK, !"[Hitch-System]{FFFFFF} Выберите призы, которые хотите взять из клада.");
				
				KladInfo[id][kladStatus] = false;
				KladInfo[id][kladOpen] = false;
				
				for(new i; i < 3; i++)
				{
					if(IsValidDynamicObject(KladInfo[id][kladObject][i]))
						DestroyDynamicObject(KladInfo[id][kladObject][i]);
						
					KladInfo[id][kladObject][i] = INVALID_OBJECT_ID;
				}
				
				ShowPlayerKlad(playerid);
				
				for(new i, prizeId, klad_pos; i < 3; i++)
				{
					prizeId = random(sizeof prize_klad);
					
					pTemp[playerid][kladPrize][i] = prizeId;
					
					CreateKladTD(playerid, i, prize_klad[prizeId][0]);
					
					if(random(99) > 85)
					{
						klad_pos = random(sizeof position_klad);
			
						CreateKlad(Iter_Free(Klad), position_klad[klad_pos][0], position_klad[klad_pos][1], position_klad[klad_pos][2]);
					}
				}
				
				return Iter_Remove(Klad, id);
			}
			else
			{
				SCM(playerid, COLOR_VALIK, !"[Hitch-System]{FFFFFF} Ответ неправильный! Вы не смогли взломать замок");
				
				SPDF(playerid, 3736, DIALOG_STYLE_INPUT, !"{FFFFFF}Взлом | {DC4747}Клад", "{FFFFFF}\n\nДля того, чтобы взломать замок,\nвам необходимо ответить на вопрос-загадку!\n\nВопрос:\n%s\n\nВведите ответ в пустое контекстное поле:\n\n", !"»", !"x", captcha_klad[KladInfo[id][kladCaptcha]][0]);
			}
			
			return true;
		}
		
		// Phone BANK 

		case 6565:
		{
			if(!response)
				return false;
		
			switch listitem do
			{
				case 0:
					return SCMF(playerid, -1, "Текущее состояние счета: {B83434}$%d, {FFFFFF}состояние депозита: {B83434}$%d", PI[playerid][pBank], PI[playerid][pDepositInfo][0]);

				case 2:
					return SPD(playerid, 37, DIALOG_STYLE_INPUT, !"Введите ID", !"{FFFFFF}Введите ID/Ник игрока которому хотите перевести деньги\nКомиссия на переводы:\nот {5ebf70}100 000${FFFFFF} 1 процент\nот {4ac24a}1 000 000${FFFFFF} 2 процента\nот {3a9e3a}10 000 000${FFFFFF} 3 процента\nот {d4904c}100 000 000${FFFFFF} 4 процента", !"Выбор", !"Отмена");
				
				case 3:
					return SPD(playerid, 119, DIALOG_STYLE_INPUT, !"Пополнить баланс", !"\n\n{FFFFFF}Введите сумму для пополнение на баланс своего телефона\n\n", !"Оплатить", !"Отмена");
			}
		}

		// MAING SYSTEM
		
		case 25036:
		{
			if(!response)
				return false;

			new cardPos = gpdList(playerid, 0), hId = HouseEntered[playerid], cardOutput = floatround(MiningBTC[hId][cardPos][card_balance], floatround_floor);

			if(hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]))
				return false;

			else if(cardOutput < 1)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Выводить можно только если на счету карты больше 1 BTC.");

			MiningBTC[hId][cardPos][card_balance] -= float(cardOutput);

			AddItem(playerid, 1811, cardOutput);

			SCMF(playerid, COLOR_YELLOW, "Вы вывели {ffffff}%d BTC{ffff00}, осталось на счету видеокарты: {ffffff}%f BTC.", cardOutput, MiningBTC[hId][cardPos][card_balance]);

			return SaveMiningBTC(hId);
		}

		case 25035:
		{
			if(!response)
				return false;

			new cardPos = gpdList(playerid, 0), hId = HouseEntered[playerid];

			if(hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]))
				return false;
			
			GetMiningCard(playerid, hId, cardPos);

			return SaveMiningBTC(hId);
		}

		case 25034:
		{
			if(!response)
				return false;

			new cardPos = gpdList(playerid, 0), hId = HouseEntered[playerid];

			if(hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]))
				return false;

			switch listitem do
			{
				case 0:
				{
					MiningBTC[hId][cardPos][card_status] = !MiningBTC[hId][cardPos][card_status];

					MiningBTC[hId][cardPos][card_last_update] = Global_Time; 

					ShowSheltMiningForPlayer(playerid, HouseEntered[playerid]);
				}
				case 1:
					return SPDF(playerid, 25036, DIALOG_STYLE_MSGBOX, !"Вывод прибыли видеокарты", "{cccccc}На выбранной видеокарте сейчас добыто {FFFF00}%f BTC.\n{ffffff}Поскольку выводить можно только целую часть прибыли,\nвы можете вывести сейчас только {ffff00}%d BTC{ffffff}.\n\nВы действительно хотите вывести столько BTC?", !"Вывод", !"Назад", MiningBTC[hId][cardPos][card_balance], floatround(MiningBTC[hId][cardPos][card_balance], floatround_floor));

				case 2:
				{
					if(!GetCount(playerid, 1810))
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{ffffff} У вас нет охлождающей жидкости для видеокарты!");
					
					DeleteItem(playerid, 1810);
					
					MiningBTC[hId][cardPos][card_percent] = (MiningBTC[hId][cardPos][card_percent] + 50.0 > 100.0) ? 100.0:MiningBTC[hId][cardPos][card_percent] + 50.0;

					SCMF(playerid, COLOR_VALIK, "Вы залили 50%% охлаждающей жидкости в видеокарту, состояние системы охлаждения восстановлено до %.1f %%", MiningBTC[hId][cardPos][card_percent]);
					
					if(!MiningBTC[hId][cardPos][card_status])
						SCM(playerid, COLOR_GREY, !"[Подсказка] Не забудьте запустить видеокарту");
				}

				case 3:
				{
					if(MiningBTC[hId][cardPos][card_balance] > 1.0)
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Чтобы достать видеокарту, необходимо вывести всю прибыль, которую принесла эта видеокарта.");

					if(!(MiningBTC[hId][cardPos][card_balance] == 0.0))
						return SPDF(playerid, 25035, DIALOG_STYLE_MSGBOX, !"Достать видеокарту", "{cccccc}На выбранной видеокарте сейчас добыто {FFFF00}%f AZ-RUB.\n{FFFFFF}Если вы сейчас достанете видеокарту, то прибыль на ней будет утеряна.\n\nВы действительно хотите достать видеокарту и потерять %f AZ-RUB{ffffff}?", !"Достать", !"Назад", MiningBTC[hId][cardPos][card_balance], MiningBTC[hId][cardPos][card_balance]);
					else
						GetMiningCard(playerid, hId, cardPos);
				}
			}

			return SaveMiningBTC(hId);
		}

		case 25033:
		{
			if(!response)
				return false;

			new cardPos = gpdList(playerid, listitem), hId = HouseEntered[playerid];

			if(hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]))
				return false;

			switch listitem do
			{
				case 0..3:
				{
					if(!MiningBTC[hId][cardPos][card_level])
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} На этой полке не установлена видеокарта."); 

					spdList(playerid, 0, cardPos);

					return SPDF(playerid, 25034, DIALOG_STYLE_LIST, (str_f("Стойка №%d | Полка №%d", floatround(cardPos / 4, floatround_ceil) + 1, cardPos % 4 + 1)), "%s\n{FFFFFF}Забрать прибыль (%f BTC)\nЗалить охлаждающую жидкость\n{FFFFFF}Достать видеокарту", !"Выбрать", !"Назад", !MiningBTC[hId][cardPos][card_status] ? "{73B461}Запустить видеокарту":"{FF6347}Остановить видеокарту", MiningBTC[hId][cardPos][card_balance]);
				}

				case 8: // забрать всю прибыль
				{
					new cardOutput;

					for(new i; i < 4; i++)
					{
						cardPos = gpdList(playerid, i);

						if(MiningBTC[hId][cardPos][card_level])
						{
							cardOutput = floatround(MiningBTC[hId][cardPos][card_balance], floatround_floor);

							MiningBTC[hId][cardPos][card_balance] -= float(cardOutput);

							PI[playerid][pRoubles] += cardOutput;
						}
					}

					UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles]);
				}

				case 9: // Включить все видюхи
				{
					for(new i; i < 4; i++)
					{
						cardPos = gpdList(playerid, i);

						if(MiningBTC[hId][cardPos][card_level] && MiningBTC[hId][cardPos][card_percent])
							MiningBTC[hId][cardPos][card_status] = true;
					}
				}

				case 10: // Залить жидкость всем видюхам
				{
					for(new i; i < 4; i++)
					{
						cardPos = gpdList(playerid, i);

						if(MiningBTC[hId][cardPos][card_level] && MiningBTC[hId][cardPos][card_percent] < 99.0)
						{
							if(GetCount(playerid, 1809) < 1)
							{
								SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нету охлаждающей жидкости для видеокарты!");
								break;
							}

							DeleteItem(playerid, 1809);
							MiningBTC[hId][cardPos][card_percent] += 50.0;
							
							if(MiningBTC[hId][cardPos][card_percent] > 100.0)
								MiningBTC[hId][cardPos][card_percent] = 100.0;
						}
					}
				}
			}

			return ShowSheltMiningForPlayer(playerid, hId), SaveMiningBTC(hId);
		}

		case 25032:
		{
			if(!response)
				return false;

			new hId = HouseEntered[playerid], item = gpdList(playerid, 0), sheltId = gpdList(playerid, 1), cardPos = listitem + 4 * sheltId;

			if(hId == INVALID_PLAYER_ID or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]))
				return false;
		
			else if(MiningBTC[hId][cardPos][card_level])
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} На этой полке уже установлена видеокарта.");

			else if(!(Inventory[playerid][0][item] == 1810) && !(Inventory[playerid][0][item] == 5995))
				return false;

			MiningBTC[hId][cardPos][card_status] = false;
			MiningBTC[hId][cardPos][card_percent] =
			MiningBTC[hId][cardPos][card_balance] = 0.0;

			MiningBTC[hId][cardPos][card_level] = Inventory[playerid][3][item];

			MiningBTC[hId][cardPos][card_last_update] = Global_Time;

			ClearItem(playerid, item, 1);
			
			return SaveMiningBTC(hId), SCM(playerid, COLOR_VALIK, !"Вы установили видеокарту. Для управления используйте компьютером рядом со стойкой.");
		}

		case 25031:
		{
			if(!response)
				return false;

			new slot = gpdList(playerid, 0);
			
			if(!(Inventory[playerid][0][slot] == 1810) && !(Inventory[playerid][0][slot] == 5995))
				return false;

			return UpdateCardLevelPlayer(playerid, slot, Inventory[playerid][3][slot]);
		}

		case 25030:
		{
			if(!response)
				return false;
			
			new hId = HouseEntered[playerid];

			if(HouseInfo[hId][hMainingInstalling])
				return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме уже есть подвал с вентиляцией!");

			else if(PI[playerid][pMoney] < 1000000)
				return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

			HouseInfo[hId][hMainingInstalling] = 1;
			HouseInfo[hId][hMainingInstalling_time] = 12;

			GiveMoney(playerid, -1000000);
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы начали строительство подвала с вентиляцией стоимостью 1 000 000$.");
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Строительство займёт 12 часов (время идёт пока вы находитесь в онлайне)");                    

			return SQL("update houses SET MainingInstalling = 1, MainingInstalling_time = 12 WHERE ID = %d;", hId);
		}

		// ahelp
		
		case 25021:
		{
			if(!response)
				return false;

			listitem++;
			spdList(playerid, 0, listitem);

			return print_AdminCommand(playerid, listitem);
		}

		case 25022:
		{
			new level = gpdList(playerid, 0), page = gpdList(playerid, 1);

			if(!response)
			{
				if(page)
					return print_AdminCommand(playerid, level, page - 1);
				else
					return callcmd::ahelp(playerid);
			}

			if(!(page + 1 == GetMaxAmountAHelp(level)))
				page ++;

			return print_AdminCommand(playerid, level, page);
		}
		
		// ahelp

		case 25020: // ShowDopStatsForItem30DaysCRPrice
		{
			if(!response)
				return false;

			new type = gpdList(playerid, 1), itemId = gpdList(playerid, listitem);

			if(listitem <= 1)
			{
				
				int_TRANSIT_PLAYER_DATA += listitem ? 1:-1;

				if(int_TRANSIT_PLAYER_DATA < 0)
					int_TRANSIT_PLAYER_DATA = 0;

				mysql_tquery(mysql, (str_f("SELECT itemId, SUM(sumAll) AS Summa, SUM(sumAllCount) AS Count FROM main_shop WHERE type = %d GROUP BY itemId ORDER BY Count DESC LIMIT %d, %d;", listitem, int_TRANSIT_PLAYER_DATA * 25, (int_TRANSIT_PLAYER_DATA + 1) * 25)), "@show_main_shop_price", "dd", playerid, listitem);
			}
			else
			{
				mysql_tquery(mysql, (str_f("SELECT %s, `sumAllCount`, `sumCenter` FROM main_shop WHERE type = %d AND itemId = %d ORDER by dateCreate DESC;", "DATE_FORMAT(`dateCreate`, '%Y-%m-%d')", type, itemId)), "@show_main_shop_price_stats", "ddd", playerid, type, itemId);

				return true;
			}
		}
		
	    case 4355:
	    {
	        if(!response) return 1;
			new i = TrailerEnter[playerid];
			if(!IsValidTrailer(i)) return 1;
	        new Float:X, Float:Y, Float:Z, Float:fZ;
	        GetVehicleZAngle(TrailerInfo[i][tIDcar], fZ);
	        GetVehiclePos(TrailerInfo[i][tIDcar], X, Y, Z);
	        new tt, Float:tt2;
			switch(TrailerInfo[i][tType])
			{
			    case 2:
			    {
			        tt = 2;
					tt2 = 0.2;
				}
			    case 3:
			    {
					tt = 13;
					tt2 = 0.45;
				}
			}
	        GetXYInFrontOfVehicle(TrailerInfo[i][tIDcar], X, Y, fZ+109+tt, 1.6+tt2);
			UpdatePlayerPos(playerid, X, Y, Z+0.2);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			TrailerEnter[playerid] = -1;
		}
	    case 4343:
	    {
	        if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
			        new i = PI[playerid][pTrailerKey];
			        if(IsTrailerAttachedToVehicle(TrailerVeh[playerid]))
			        {
			            if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы должны быть за рулём");
                        if(!IsPlayerInHisVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Это не ваш транспорт");
                        if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы не прицепили трейлер!");
                        if(IsPlayerInRangeOfPoint(playerid, 200.0, -2137.9033,-2462.0083,30.6250)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В городе нельзя парковать трейлер!");
                        if(IsPlayerInFbArea(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В городе нельзя парковать трейлер!");
						new Float:fX, Float:fY, Float:fZ, Float:X, Float:Y, Float:Z;
                        GetVehicleRot(TrailerVeh[playerid], fX, fY, fZ);
                        GetVehiclePos(TrailerInfo[i][tIDcar], X, Y, Z);
					    TrailerInfo[i][tParked] = 1;
						TrailerInfo[i][tPos_X] = X;
						TrailerInfo[i][tPos_Y] = Y;
						TrailerInfo[i][tPos_Z] = Z-1.2;
						TrailerInfo[i][tPos_rX] = fX-fX-fX;
						TrailerInfo[i][tPos_rY] = fY-fY-fY;
						TrailerInfo[i][tPos_rZ] = fZ+180;
						DestroyVehicleIter(TrailerInfo[i][tIDcar]);
						CreateTrailer(i);
						Streamer_Update(playerid);
						GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
						GetCoordBonnetVehicle(GetPlayerVehicleID(playerid), X, Y, Z, 4.0);
						SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			            SCM(playerid, COLOR_WHITE, !"Вы припарковали свой трейлер.");
						SCM(playerid, COLOR_ORANGE, !"[ Подсказка ] {FFFFFF}Трейлер будет находится тут всегда, пока вы его не возьмете на сцепку с машиной.");
                        SaveTrailer(i);
                        TrailerTime{playerid} = 0;
                        TrailerVeh[playerid] = INVALID_VEHICLE_ID;
					}
			        else
			        {
			            if(!TrailerInfo[PI[playerid][pTrailerKey]][tParked])
			            {
				            if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы должны быть за рулём");
	                        if(!IsPlayerRegCar(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Это не ваш транспорт!");
	                        new Float:X,Float:Y,Float:Z;
							GetVehiclePos(TrailerInfo[PI[playerid][pTrailerKey]][tIDcar],X,Y,Z);
						    if(!IsPlayerInRangeOfPoint(playerid, 9.0, X,Y,Z)) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы должны подъехать задней частью своего автомобиля к передней части трейлера!");
							AttachTrailerToVehicle(TrailerInfo[PI[playerid][pTrailerKey]][tIDcar],GetPlayerVehicleID(playerid));
						}
						else
						{
						    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы должны быть за рулём");
	                        if(!IsPlayerRegCar(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Это не ваш транспорт!");
	                        new Float:X,Float:Y,Float:Z;
       						GetDynamicObjectPos(TrailerInfo[PI[playerid][pTrailerKey]][tObjPark],X,Y,Z);
						    if(!IsPlayerInRangeOfPoint(playerid, 9.0, X,Y,Z)) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы должны подъехать задней частью своего автомобиля к передней части трейлера!");
							StartBlack(playerid, 2);
						}
					}
				}
				case 1:
				{
				    if(!TrailerInfo[PI[playerid][pTrailerKey]][tParked])
				    {
				        if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Вы должны быть за рулём");
                        if(!IsPlayerInHisVehicle(playerid)) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Это не ваш транспорт!");
                        if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SCM(playerid,COLOR_ORANGE,!"Ошибка: {FFFFFF}Этот транспорт не прикреплен к вашему трейлеру!");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						TrailerTime{playerid} = 40;
					}
					else
					{
					    if(TrailerEnter[playerid] == PI[playerid][pTrailerKey])
					    {
					        TrailerInfo[PI[playerid][pTrailerKey]][tLocks] = !TrailerInfo[PI[playerid][pTrailerKey]][tLocks];
						    UpdateTrailer(PI[playerid][pTrailerKey]);
						    GameTextForPlayer(playerid, TrailerInfo[PI[playerid][pTrailerKey]][tLocks] ? ("~r~DOOR TRAILER CLOSE") : ("~g~DOOR TRAILER OPEN"), 1000, 3);
						    callcmd::trmenu(playerid);
						}
						else
						{
						    if(!IsPlayerInRangeOfPoint(playerid, 6.0, TrailerInfo[PI[playerid][pTrailerKey]][tPos_X], TrailerInfo[PI[playerid][pTrailerKey]][tPos_Y], TrailerInfo[PI[playerid][pTrailerKey]][tPos_Z])) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы не возле своего трейлера!");
							TrailerInfo[PI[playerid][pTrailerKey]][tLocks] = !TrailerInfo[PI[playerid][pTrailerKey]][tLocks];
						    UpdateTrailer(PI[playerid][pTrailerKey]);
						    GameTextForPlayer(playerid, TrailerInfo[PI[playerid][pTrailerKey]][tLocks] ? ("~r~DOOR TRAILER CLOSE") : ("~g~DOOR TRAILER OPEN"), 1000, 3);
						    callcmd::trmenu(playerid);
						}
					}
				}
                case 2:
				{
				    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Эта функция работает только на личном автомобиле.");
                    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2106.0000,-2418.8154,30.6250)) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Для продажи трейлера диллеру нужно находится у салона трейлеров.");
				    SPD(playerid, 4348, 0, "Продажа трейлера", "{FFFFFF}Обратите внимание, что после продажи трейлера, вы получаете половину от его гос.стоимости\nВы уверены, что хотите продать {FF6347}трейлер?", "Да", "Закрыть");
				}
				case 3: SPD(playerid,4351,1,"","{FFFFFF}Введите ид игрока и цену через запятую, без пробела.\nПример: {9ACD32}6,1000000.","Далее", !"Отмена");
				case 4:
				{
				    if(!TrailerInfo[PI[playerid][pTrailerKey]][tParked])
				    {
				        if(TrailerInfo[PI[playerid][pTrailerKey]][tObj] == INVALID_STREAMER_ID) return SCM(playerid, COLOR_ORANGE, "Ошибка: {FFFFFF}Вы не забрали трейлер!");
				        new Float:X, Float:Y, Float:Z;
				        GetVehiclePos(TrailerInfo[PI[playerid][pTrailerKey]][tIDcar], X, Y, Z);
				        EnableGPSForPlayer(playerid, X, Y, Z);
				        return 1;
					}
					EnableGPSForPlayer(playerid, TrailerInfo[PI[playerid][pTrailerKey]][tPos_X],TrailerInfo[PI[playerid][pTrailerKey]][tPos_Y],TrailerInfo[PI[playerid][pTrailerKey]][tPos_Z]);
				}
				case 5:
				{
					if(TrailerInfo[PI[playerid][pTrailerKey]][tNalog] > 0)
					{
						if(PI[playerid][pMoney] < TrailerInfo[PI[playerid][pTrailerKey]][tNalog]) return SCM(playerid, COLOR_ORANGE, "Ошибка: {FFFFFF}У вас недостаточно средств!");
						f(global_str, 100, "[ Оплата налогов ] {FFFFFF}Вы оплатили налоги за трейлер, сумма: %d$", TrailerInfo[PI[playerid][pTrailerKey]][tNalog]);
						SCM(playerid, COLOR_ORANGE, global_str);
						SCM(playerid, COLOR_ORANGE, "[ Подсказка ] {FFFFFF}Если вы не будете оплачивать налоги 10 дней, трейлер будет изъят без возврата имущества.");
					}
					else
					{
						f(global_str, 80, "Информация: {FFFFFF}На трейлер №%d не выставлено налогов!", PI[playerid][pTrailerKey]);
	    				SCM(playerid, COLOR_ORANGE, global_str);
					}
				}
			}
		}
		case 4344:
		{
			if(!response || !PI[playerid][pAdmin]) return false;
			
			new targetid = gpdList(playerid, listitem);
			
			if(targetid == INVALID_PLAYER_ID || PI[targetid][pAdmin] < 6) return false;
			
			new random_int; SetPVarInt(playerid, "QueryCode", random_int = random(889999) + 111111);
			
			//f(mysql_string, 400, "vk_id=%d&list=8&msg=%d&nickname=%s", PI[targetid][pVkontakte], random_int, PN(playerid));
			//SendVK(playerid, mysql_string, 0);
			
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}На электронный адрес администратора было отправлено письмо с кодом,\nпосле того как вы получите код от администратора используйте команду\n/queryacceptadmin [код] для авторизации админ команд.", !"Закрыть", !"");
		}
		
		case 2755: 
		{
			if(!response)
				return false;
			
			if(Int_GetPlayerData(playerid, "PromoCodeKD") > Global_Time)
				return false;

			Int_SetPlayerData(playerid, "PromoCodeKD", Global_Time + 20);

			format(mysql_string, 200, "SELECT * FROM nubopromo_usage WHERE promo = '%s' AND playerId = '%d' LIMIT 1;", inputtextsave, PI[playerid][pID]);
			mysql_tquery(mysql, mysql_string, "checkpromousage", "ds", playerid, inputtextsave);

			return true;
		}

		case 2756:
		{
			if(!response)
				return callcmd::vipmenu(playerid);
			
			if(!(strlen(inputtextsave) == 6))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Неправильно введен HEX код цвета");
				
			SetString(PI[playerid][pVipName], (str_f("{%s}[%s]", inputtextsave, String_GetPlayerData(playerid, "InputNameVIP", 0))));
			
			UpdatePlayerDataStr(playerid, "VipName", PI[playerid][pVipName]);
			
			return SCMF(playerid, -1, "Вы успешно установили себе префикс \'%s{FFFFFF}\' для вип.", PI[playerid][pVipName]), DPlayerData(playerid, "InputNameVIP0");
		}
		
		case 2757:
		{
			if(!response)
				return callcmd::vipmenu(playerid);
				
			SetString(PI[playerid][pVipName], (str_f("{%s}[%s]", VipMenuColors[listitem], String_GetPlayerData(playerid, "InputNameVIP", 0))));
			
			UpdatePlayerDataStr(playerid, "VipName", PI[playerid][pVipName]);
			
			return SCMF(playerid, -1, "Вы успешно установили себе префикс \'%s{FFFFFF}\' для вип.", PI[playerid][pVipName]), DPlayerData(playerid, "InputNameVIP0");
		}
	
		case 2758:
		{
			if(!response)
				return callcmd::vipmenu(playerid);
				
			if(PI[playerid][pVIP][0] < (listitem ? 8:7))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Не хватает доступа!");
				
			switch listitem do
			{
				case 0:
				{
					global_str = "";
					
					for(new i; i < sizeof(VipMenuColors); i++)
					{
						strcat(global_str, (str_f("{%s}Хочу этот цвет\n", VipMenuColors[i])));
					}
					
					return SPD(playerid, 2757, DIALOG_STYLE_LIST, !"", global_str, !"Выбрать", !"Закрыть");
					
				}
				case 1:
					return SPD(playerid, 2756, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите HEX цвет из 6 символов!\n\nПример: FF0000 - красный цвет\nПолучить HEX код цвета можно на сайте:\nhtmlcolorcodes.com\n ", !"Ввести", !"Закрыть");
			}
		}
		
		case 2759:
		{	
			if(!response)
				return callcmd::vipmenu(playerid);
			
			if(!(3 <= strlen(inputtextsave) <= 50))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} От 3 до 50 символов!");
				
			String_SetPlayerData(playerid, "InputNameVIP", 0, inputtextsave);
			
				
			return SPD(playerid, 2758, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите", !"\
			{FFFFFF}Функция\t{FFFFFF}Доступ\n\
			{FFFFFF}Выбрать цвет из предложенных\t{fe4e4e}SUPREME\n\
			{FFFFFF}Ввести свой HEX цвет\t{9758fc}BlastHack\n", !"Далее", "Закрыть");
		}
		
		case 2760:
		{
			if(!response)
				return false;
			
			if(PI[playerid][pVIP][0] < VipMenu_Data[listitem][vipmenu_Vip])
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вашего уровня VIP недостаточно для выполнения этого действия.");
			
			new
				Float:X, Float:Y, Float:Z, Float:A, car = GetPlayerVehicleID(playerid), PLAYER_STATE = GetPlayerState(playerid);
						
			switch listitem do
			{
				case 0:
				{
					if(Int_GetPlayerData(playerid, "VIPHP") > Global_Time)
						return false;
					
					Int_SetPlayerData(playerid, "VIPHP", Global_Time + 300);
					
					return UpdatePlayerHealth(playerid, 100), SendAdminsMessage(COLOR_YELLOW, (str_f("Игрок %s[%d] пополнил свое здоровье с помощью преимущества вип", PN(playerid), playerid)));	
				}
				
				case 1:
					return SPD(playerid, 2759, DIALOG_STYLE_INPUT, (str_f("{ffffff}Arizona %s | {9758fc}VIP{ffffff} MENU", Setting_Server[7])), !"{FFFFFF}Введите название вашей вип в поле ниже:\n \n ", !"Далее", !"Закрыть");
				
				case 2:
				{
					if(!(PLAYER_STATE == PLAYER_STATE_DRIVER))
						return false;
					
					Fuel[car] = 95;
					
					return SCM(playerid, COLOR_VALIK, !"Транспорт успешно заправлен."), SendAdminsMessage(COLOR_YELLOW, (str_f("Игрок %s[%d] заправил свой автомобиль с помощью преимущества вип", PN(playerid), playerid)));				
				}
				
				case 3:
				{
					if(!(PLAYER_STATE == PLAYER_STATE_DRIVER))
						return false;
					
					GetVehiclePos(car, X, Y,Z);
					GetVehicleZAngle(car, A);
					SetVehiclePos(car, X, Y, Z+1.0);
					SetVehicleZAngle(car, A);
					J_RepairVehicle(car);
					
					return SCM(playerid, COLOR_VALIK, !"Транспорт успешно flipnut."), SendAdminsMessage(COLOR_YELLOW, (str_f("Игрок %s[%d] флипнул свой автомобиль с помощью преимущества вип", PN(playerid), playerid)));					
				}
				
				case 4:
				{
					GetPlayerPos(playerid, X, Y, Z);
					GetPlayerFacingAngle(playerid, A);
					
					PLVEH_destroy(playerid);

					if(AnimPlayed{playerid}) 
						return SCM(playerid, COLOR_GREY, !"В анимации нельзя");

					PI[playerid][plveh] = J_AddStaticVehicleEx(522, X, Y, Z, A, random(127), random(127));
					PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
					
					VehicleInfo[PI[playerid][plveh]][vStyle] = true;
					
					return SetEngineStatus(PI[playerid][plveh], true, playerid), SendAdminsMessage(COLOR_YELLOW, (str_f("Игрок %s[%d] выдал себе NRG-500 с помощью преимущества вип", PN(playerid), playerid)));		
				}
				
				case 5:
				{
				    if(PI[playerid][pVIPMenu][0] > Global_Time)
						return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Телепортироваться по карте можно раз в 10 минут.");
						
				    new minute;
					gettime(_, minute, _);
					
					if(minute >= 0 && minute < 3)
					    return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Использовать данную функцию можно только после 3-х минут спустя PAYDAY.");
						
					if(!pTemp[playerid][pPosVIP][0])
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Установите метку на карте.");
						
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
					
			  		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					  	SetVehiclePos(GetPlayerVehicleID(playerid), pTemp[playerid][pPosVIP][0], pTemp[playerid][pPosVIP][1], pTemp[playerid][pPosVIP][2] + 2.0);

					else
						SetPlayerPosAirX(playerid, pTemp[playerid][pPosVIP][0], pTemp[playerid][pPosVIP][1]);
			    	
			    	HouseEntered[playerid] = -1;
					
     				SAMF(COLOR_YELLOW, "[A] Игрок %s[%d] телепортировался с помощью VipMenu.", PN(playerid), playerid);
					PI[playerid][pVIPMenu][0] = Global_Time + 600;
     				return UpdatePlayerDataStr(playerid, "VIPMenu", Int_PackMassive(0, PI[playerid][pVIPMenu]));
				}
				
				case 6:
				{
					if(PI[playerid][pVIPMenu][1] > Global_Time)
						return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Получить следующий предмет вы сможете через %s", Convert(PI[playerid][pVIPMenu][0] - Global_Time));

					PI[playerid][pVIPMenu][1] = Global_Time + 10800;
					UpdatePlayerDataStr(playerid, "VIPMenu", Int_PackMassive(0, PI[playerid][pVIPMenu]));

					return AddItem(playerid, random(sizeof(ItemsInfo)), 1);
				}
				
				case 7:
					return PlayerSpawn(playerid), SendAdminsMessage(COLOR_YELLOW, (str_f("Игрок %s[%d] заспавнился с помощью преимущества вип", PN(playerid), playerid)));
	
				case 8:
				{
					for(new i; i < PI[playerid][pInvCell]; i++) 
						ClearItem(playerid, i, Inventory[playerid][1][i]);

					SCM(playerid,-1,!"Вы успешно очистили себе инвентарь!");
					return SaveInventory(playerid), SendAdminsMessage(COLOR_YELLOW, (str_f("Игрок %s[%d] очистил себе инвентарь с помощью преимущества вип", PN(playerid), playerid)));
			  	}
			}
		}

		case 492:
		{
		    if(!response) return false;
		    SendBotMessage(playerid, !"Хорошего дня!");

			f(mysql_string, 1024, "INSERT INTO `family` (`ownerid`, `ownername`, `rank`) VALUES ('%d', '%s', 'The State, The State, The State, The State, The State, The State, The State, The State, The State, The State')", PI[playerid][pID], PN(playerid));
			mysql_tquery(mysql, mysql_string, "CreateFamilyBase", "d", playerid);

			SQL("UPDATE accounts SET FamilyRang = 9 WHERE ID = %d;", PI[playerid][pID]);

			GiveMoney(playerid, -3000000);
         	GameTextForPlayer(playerid, !"Successful", 0, 1);
		    return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы успешно создали семью!\n{DF553A}Используйте /fammenu для регистрации и установки настроек.", !"Принять", !"");
		}
		
		case 493,2920,2921:
		{
	 		if(!response) return false;
	 		new list;
	 		switch dialogid do
	 		{
	 		    case 493: list = 1;
	 		    case 2920: list = 2;
	 		    case 2921: list = 3;
	 		}
	 		return ShowFamilyDialog(playerid, list, FP_Data[playerid][F_FAMILY_ID], listitem);
		}
		
		case 2928:
		{
			if(!response) 
				return false;
		
			return callcmd::faminvite(playerid, inputtextsave);
		}
		
		case 2930:
		{
			if(!response) 
				return false;
				
			return callcmd::famuninvite(playerid, inputtextsave);
		}
		
		case 2922:
		{
		    if(!response) return callcmd::fammenu(playerid);
		    new int = strval(inputtextsave);
			if(!(1 <= int <= 30)) return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Произошла ошибка, возможно вы что-то делаете не так!");

			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`color` = %d", int);
			format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}Изменил цвет чата/статуса семьи!", FamilyColor[int][0], PN(playerid), playerid);
			SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], global_str);
			
			foreach(Player, i)
			{
				if(FP_Data[playerid][F_FAMILY_ID] == FP_Data[i][F_FAMILY_ID])
					UpdateFamilyText(i, FP_Data[playerid][F_FAMILY_ID]);
			}
		}
		
		case 7677:
		{
			if(!response)
				return false;
			
			return SetPlayerPos(playerid, 1487.6162, 1519.0647, 1601.0859 +  3.5938 * listitem);
		}
		
		case 3998:
		{
			if(!response) 
				return false;
			
			new fam = FP_Data[playerid][F_FAMILY_ID];
			
			switch listitem do
			{
				case 5:
				{
					new count = GetCount(playerid, 522);
					
					if(!count)
						return false;
						
					SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)] %s[%d]:{FFFFFF} обменял %d талонов на %d очков репутации для семьи!", FamilyColor[GetFamilyDataInt(fam, "color")][0], PN(playerid), playerid, count, count * 10)) );
					
					UpdateFamilyData(fam, "reputation = `reputation` + %d", count * 10);
					
					DeleteItem(playerid, 522, count);
					
					return SendBotMessage(playerid, !"Хорошая сделка!");
				}
			}
		}
		
		case 2763:
		{
			if(!response) return false;
			
			new fam = FP_Data[playerid][F_FAMILY_ID], id = GetFamilyDataInt(fam, "kv_id"), fam_rep = GetFamilyDataInt(fam, "reputation"), access_fam = GetFamilyAcces(PN(playerid), fam);
			
			switch listitem do
			{
				case 0:
				{
					format( global_str, 300, "\
						{FFFFFF}\n\nСтоимость квартиры: {9AACEB}10000{FFFFFF} репутации.\n\
						Денег на складе: {9AACEB}%d${FFFFFF}\n\
						Семейных монет на складе: {9AACEB}0{FFFFFF} шт.\n\
						Аптечек на складе: {9AACEB}%d{FFFFFF} шт.\n\
						Бронежилетов на складе: {9AACEB}%d{FFFFFF} шт.\n\n",
						
						FKV_Data[id][kvMoney],
						FKV_Data[id][kvHealths],
						FKV_Data[id][kvArmours]
					);
					for(new i; i < sizeof(FamilyLevel); i++)
					{
						strcat(global_str, ( str_f("%s %s\n", FKV_Data[id][kvLevel][i] ? "{FFFFFF}+":"{D7DAD9}-", FamilyLevelName[i]) ) );
					}
					
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
				}
				case 1:
				{
					FKV_Data[id][kvStatus] = !FKV_Data[id][kvStatus];
					
					SQL("UPDATE family_kv SET status = %d WHERE ID = %d;", FKV_Data[id][kvStatus], FKV_Data[id][kvSqlId]);
					
					SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)] %s[%d]:{FFFFFF} %s", FamilyColor[GetFamilyDataInt(fam, "color")][0], PN(playerid), playerid, FKV_Data[id][kvStatus] ? "закрыл семейную квартиру!":"открыл семейную квартиру!")) );
					
					return UpdateFamilyKV(id);
				}
				
				case 2:
				{
					if(fam_rep < 50)
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вашей семьи недостаточно репутации");
					
					SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)]{FFFFFF} Лидер/Заместитель семьи купил 50 аптечек для семьи!", FamilyColor[GetFamilyDataInt(fam, "color")][0])) );
					
					UpdateFamilyData(fam, "reputation = `reputation` - 50", 0);
					
					return SQL("UPDATE family_kv SET healths = %d WHERE ID = %d;", FKV_Data[id][kvHealths] += 50, FKV_Data[id][kvSqlId]);
				}
				
				case 3:
				{
					if(fam_rep < 100)
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вашей семьи недостаточно репутации");
					
					SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)]{FFFFFF} Лидер/Заместитель семьи купил 20 бронежилетов для семьи!", FamilyColor[GetFamilyDataInt(fam, "color")][0])) );
					
					UpdateFamilyData(fam, "reputation = `reputation` - 100", 0);
					
					return SQL("UPDATE family_kv SET armours = %d WHERE ID = %d;", FKV_Data[id][kvArmours] += 20, FKV_Data[id][kvSqlId]);
				}
				
				case 4:
					return SPD(playerid, 2764, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите положить\nна склад семейной квартиры.\n\nОб вашем пополнении узнает вся семья.\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
				
				case 5:
				{
					if(!access_fam)
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");
					
					return SPD(playerid, 2765, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите снять\nсо склада семейной квартиры.\n\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
				}
				
				case 6:
					return SPD(playerid, 15215, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}семейных монет{FFFFFF}, которые хотите положить на склад семейной квартиры.\nСейчас на складе семейный монет: 0шт.\n\nОб вашем пополнении узнает вся семья.\nСемейные монеты семьи можно будет потратить на премию {F2C36C}членам семьи{FFFFFF}!\n\n", !"Принять", !"Отмена");

				case 7:
				{
					if(!access_fam)
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");
					
					return SPD(playerid, 15216, DIALOG_STYLE_INPUT, !"", "{FFFFFF}\n\nВведите количество {9AACEB}семейных монет{FFFFFF}, которые хотите снять со склад семейной квартиры.\nСейчас на складе семейный монет: 0шт.\n\nСемейные монеты семьи можно будет потратить на премию {F2C36C}членам семьи{FFFFFF}!\n\n", !"Принять", !"Отмена");
				}
				
				case 8:
				{
					global_str = "";
					
					for(new i, len; i < sizeof(FamilyLevel); i++)
					{
						len = strlen(FamilyLevelName[i]);
						
						if(strlen(FamilyLevelName[0]) >= len + 14)
							mysql_string = "\t\t\t";
							
						else if(strlen(FamilyLevelName[0]) >= len + 6)
							mysql_string = "\t\t";
							
						else if(strlen(FamilyLevelName[0]) >= len + 3)
							mysql_string = "\t";
						
						else
							mysql_string = "\t";

						strcat(global_str, (str_f("%d. %s%s[%s{FFFFFF}]\t%d репутации\n", i + 1, FamilyLevelName[i], mysql_string, FKV_Data[id][kvLevel][i] ? "{82D79F}ЕСТЬ":"{D36782}НЕТ", FamilyLevel[i])));
					}
					
					strcat(global_str, "{FFFF00}Информация об улучшениях");
					
					return SPD(playerid, 2769, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
				}
				
				case 9:
					return SPDF(playerid, 15247, DIALOG_STYLE_INPUT, !"Оплата налога на семейную квартиру", "{ffffff}Сейчас налог на квартиру составляет {ffff00}$%d{ffffff}.\nПри налоге свыше $1.2млн квартиру забирает государство.\n\nСколько вы хотите оплатить за налог?", !"Оплатить", !"Назад", FKV_Data[id][kvNalog]);
				
				case 10:
				{
					if(!access_fam)
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");
				}

				case 11: 
				{
					if(!access_fam)
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");

					new carid = GetPlayerVehicleID(playerid);

					if(!IsAOwnableCar(carid) || !GetString(CarInfo[GetVehicleID(carid)][cOwner], PN(playerid)))
						return SCM(playerid, COLOR_GREY, !"Вы должны сидеть в личном транспорте");

					return SPDF(playerid, 25197, DIALOG_STYLE_MSGBOX, !"Перевод личного транспорта в семейный", "{ffffff}Вы действительно хотите сделать свой личный транспорт семейным?\nТранспорт: {ffff00}%s\n{ffffff}Стоимость перевода: {ffff00}1.000.000 BTC", !"Выполнить", !"Назад", GetVehicleName(carid));
				}

				case 12:
				{
					if(!access_fam)
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");

					new carid = GetPlayerVehicleID(playerid);

					if(VehicleInfo[carid][vFamily] == -1 or GetPlayerVehicleFamily(playerid) == -1)
						return SCM(playerid, COLOR_GREY, !"Вы должны сидеть в семейном транспорте");

					return SPDF(playerid, 25198, DIALOG_STYLE_MSGBOX, !"Перевод семейного транспорта в личный", "{ffffff}Вы действительно хотите сделать семейный транспорт личным?\nТранспорт: {ffff00}%s\n{ffffff}Стоимость перевода: {ffff00}1.000.000 BTC", !"Выполнить", !"Назад", GetVehicleName(carid));
				}
				
				case 13, 14:
				{
					if(!(access_fam == 2))
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру семьи!");
				}
			}
		}
		
		case 2764:
		{
			if(!response)
				return false;
			
			new fam = FP_Data[playerid][F_FAMILY_ID], id = GetFamilyDataInt(fam, "kv_id"), moneyInput = strval(inputtextsave);
			
			if(10000 > moneyInput)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Минимальное число пополнение, 10 000$"), SPD(playerid, 2764, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите положить\nна склад семейной квартиры.\n\nОб вашем пополнении узнает вся семья.\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
			
			else if(PI[playerid][pMoney] < moneyInput)
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]"), SPD(playerid, 2764, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите положить\nна склад семейной квартиры.\n\nОб вашем пополнении узнает вся семья.\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
			
			GiveMoney(playerid, -moneyInput, "пополнение склада семьи");
			
			SQL("UPDATE family_kv SET money = %d WHERE ID = %d;", FKV_Data[id][kvMoney] += moneyInput, FKV_Data[id][kvSqlId]);
			
			return SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)] %s[%d]:{FFFFFF} Пополнил склад семьи на %d$", FamilyColor[GetFamilyDataInt(fam, "color")][0], PN(playerid), playerid, moneyInput)) );
		}
		
		case 2765:
		{
			if(!response)
				return false;
			
			new fam = FP_Data[playerid][F_FAMILY_ID], id = GetFamilyDataInt(fam, "kv_id"), moneyOutPut = strval(inputtextsave);
			
			if(1 > moneyOutPut)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Минимальное число снятия, 1$"), SPD(playerid, 2765, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите снять\nсо склада семейной квартиры.\n\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");

			else if(FKV_Data[id][kvMoney] < moneyOutPut)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Не достаточно денег на семейной квартире."), SPD(playerid, 2765, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите количество {9AACEB}денег{FFFFFF}, которые хотите снять\nсо склада семейной квартиры.\n\nДеньги семьи можно будет потратить на различные {F2C36C}улучшения{FFFFFF}!\n\n", !"Принять", !"Отмена");
			
			SQL("UPDATE family_kv SET money = %d WHERE ID = %d;", FKV_Data[id][kvMoney] -= moneyOutPut, FKV_Data[id][kvSqlId]);
			
			GiveMoney(playerid, moneyOutPut, "снятие с семейной квартиры");
			
			return SendFamilyMessage(fam, (str_f("{%s}[Семья (Новости)] %s[%d]:{FFFFFF} Снял %d$ со склада семьи", FamilyColor[GetFamilyDataInt(fam, "color")][0], PN(playerid), playerid, moneyOutPut)) );
		}
		
		case 2769:
		{
			if(!response) return false;
			
			if(listitem == sizeof FamilyLevel)
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"",  !"{EE9764}1.{FFFFFF} Дополнительный респект - Все члены семьи начнут получать дополнительные\n{EEDB64}1-2{FFFFFF} опыта каждый PAYDAY.\n{EE9764}2.{FFFFFF} Успех в работе - Каждый член семьи будет получать дополнительный {EEDB64}талон{FFFFFF}\nпри выполнении семейных заданий.\n{EE9764}3.{FFFFFF} Бизнесмены в долгy - Участники семьи смогут {EEDB64}бесплатно{FFFFFF} входить\nна евент: Собиратели.\n{EE9764}4.{FFFFFF} Неузнаваемый - Время действия маски каждого участника семьи\nв {EEDB64}2-а{FFFFFF} раза больше.\n{EE9764}5.{FFFFFF} Медики в долгу - Члены семьи смогут покупать аптечки {EEDB64}без рецепта{FFFFFF} врача.\n{EE9764}6.{FFFFFF} Белый список - Участники семьи платят {EEDB64}в 3 раза меньше штраф{FFFFFF} за\nпревышение скорости перед радаром.\n\n{EE9764}7.{FFFFFF} Банковские махинации - Участники семьи могут держать ставку в банке до {EEDB64}200 000 000${FFFFFF} и получать до 200 000$ каждый payday.\n{EE9764}8.{FFFFFF} Мародёры - Члены семьи смогут воровать патроны и ингридиенты у {EEDB64}армий{FFFFFF} без состояния в банде или мафии.\n{EE9764}9.{FFFFFF} Рыбный цех - Члены семьи смогут бесплатно кушать у {EEDB64}холодильника{FFFFFF} семейной квартиры.\n{EE9764}10.{FFFFFF} Третий заместитель - Даёт возможность установить {EEDB64}3-го заместителя {FFFFFF}семьи.\n{EE9764}11.{FFFFFF} Быстрые налоги - Позволяет членам семьи оплачивать сразу все свои налоги в банке.\n{EE9764}12.{FFFFFF} Вместительные фургоны - Увеличивает максимальный объем ресурсов фургона в два раза", !"Закрыть", !"");
				
			else if(listitem >= sizeof FamilyLevel)
				return false;
			
			if(!GetFamilyAcces(PN(playerid), FP_Data[playerid][F_FAMILY_ID]))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта панель доступна только лидеру и заместителю!");
			
			new id = GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "kv_id");
			
			if(FamilyLevel[listitem] > GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "reputation"))
				return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Для покупки этого улучшения необходимо %d репутации.", FamilyLevel[listitem]);
			
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "reputation = `reputation` - %d", FamilyLevel[listitem]);
			
			FKV_Data[id][kvLevel][listitem] = true;
			
			global_str = "";
			
			for(new i; i < sizeof(FamilyLevel); i++)
				strcat(global_str, (str_f("%d,", FKV_Data[id][kvLevel][i])));
				
			SQL("UPDATE family_kv SET family_level = '%s' WHERE ID = %d;", global_str, FKV_Data[id][kvSqlId]);
			
			return SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], (str_f("{%s}[Семья (Новости)] %s[%d]: {FFFFFF}купил новое улучшение для семьи!", FamilyColor[GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "color")][0], PN(playerid), playerid)));
		}
		
		case 15247:
		{
			if(!response)
				return callcmd::fammenu(playerid);
			
			new fam = FP_Data[playerid][F_FAMILY_ID], id = GetFamilyDataInt(fam, "kv_id"), moneyPay = strval(inputtextsave);
			
			if(!(1 <= moneyPay <= FKV_Data[id][kvNalog]))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы указали сумму меньше $1 или свыше текущего налога на квартиру."), SPDF(playerid, 15247, DIALOG_STYLE_INPUT, !"Оплата налога на семейную квартиру", "{ffffff}Сейчас налог на квартиру составляет {ffff00}$%d{ffffff}.\nПри налоге свыше $1.2млн квартиру забирает государство.\n\nСколько вы хотите оплатить за налог?", !"Оплатить", !"Назад", FKV_Data[id][kvNalog]);
			
			else if(PI[playerid][pMoney] < moneyPay)
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]"), SPDF(playerid, 15247, DIALOG_STYLE_INPUT, !"Оплата налога на семейную квартиру", "{ffffff}Сейчас налог на квартиру составляет {ffff00}$%d{ffffff}.\nПри налоге свыше $1.2млн квартиру забирает государство.\n\nСколько вы хотите оплатить за налог?", !"Оплатить", !"Назад", FKV_Data[id][kvNalog]);
			
			GiveMoney(playerid, -moneyPay, "пополнение счета на оплату налогов семейной кв");
			
			SQL("UPDATE family_kv SET nalog = %d WHERE ID = %d;", FKV_Data[id][kvNalog] -= moneyPay, FKV_Data[id][kvSqlId]);
			
			SendFamilyMessage(fam, (str_f("{cccccc}[Family]{FFFFFF} Член семьи %s внёс $%d в счёт за оплату налога за семейную квартиру.", PN(playerid), moneyPay)) );
			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы оплатили {cccccc}$%d{FFFFFF} в счёт налога за квартиру вашей семьи.", moneyPay );
			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Теперь налог на квартиру составляет: $%d", FKV_Data[id][kvNalog] );
		}
		
		case 15232:
		{
			ShowFamilyMenu(playerid, true, 2);
			
			if(!response)
				return false;
				
			new count = strval(inputtextsave);
			
			if(!(1 <= count <= 10000))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество семейных монет должно быть не менее 1шт и не более 10тыс шт.");
			
			else if(GetCount(playerid, 1722) < count)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет столько семейных монет.");
			
			return true;
		}
		
		case 15234:
		{
			ShowFamilyMenu(playerid, true, 2);
			
			if(!response)
				return false;
				
			new id = gpdList(playerid, 0), cost = FamilyShop[id][F_S_Cost], ItemId = FamilyShop[id][F_S_ItemId];
			
			if(GetCount(playerid, 1722) < cost)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет столько семейных монет.");
			
			DeleteItem(playerid, 1722, cost);
			AddItem(playerid, ItemId, 1);
			
			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно купили предмет \'%s\' за %d семейных монет.", ItemsInfo[ItemId][itemName], cost);
		}
		
		case 2994:
		{
		    if(!response) return callcmd::fammenu(playerid);
		    if(!(10 <= strlen(inputtext) <= 64)) return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Произошла ошибка, возможно вы что-то делаете не так!");
            UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`discord` = '%s'", inputtextsave);
            return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nВы успешно установили {D1FD4D}Discord{FFFFFF} для вашей семьи!\nТеперь каждый член семьи, сможет узнать {D1FD4D}ваш{FFFFFF} сервер!\n\n\n{D1FD4D}Убедитесь, что номер указан верно!\n\n", !"Понял", !"");
		}
		
		case 2925, 2924, 2124:
		{
			callcmd::fammenu(playerid);
		    
			if(!response) 
				return false;
				
			if(!(GetFamilyAcces(PN(playerid), FP_Data[playerid][F_FAMILY_ID]) == 2))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только лидеру семьи!");

		    new int = strval(inputtextsave);
			
			if(int < 0 || int > MAX_PLAYERS || !pTemp[int][tAuthorized])
			    return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Произошла ошибка, возможно вы сделали что-то не так!");
			    
			else if(int == playerid) 
				return false;
				
			else if(!(FP_Data[playerid][F_FAMILY_ID] == FP_Data[int][F_FAMILY_ID]))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Человек которого вы хотите сделать заместителем, не состоит в вашей семье!");
				
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], dialogid >= 2924 ? (dialogid == 2924 ? "`zam_1` = '%s'":"`zam_3` = '%s'"):"`zam_2` = '%s'", PN(int));
		}

		case 9425:
		{
		    if(!response) return false;
			if(PI[playerid][pVirMoney] < 500) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно AZ Coins!");
			else if(!(15 <= strlen(inputtextsave) <= 40)) return SPD(playerid, 9425, DIALOG_STYLE_INPUT, !"", "\n\n{FFFFFF}Введите слоган вашей семьи.\n\n{F2A425}Критерии:\n\n{FFFFFF}1.{DDA64D} Длина слогана 15 до 40 символов.\n{FFFFFF}2.{DDA64D} Слоган(Девиз) нельзя нарушать.\n{FFFFFF}3.{DDA64D} Не должно быть ненормативной лексики\n\n{FFFFFF}Примеры:\n\n1.{DDA64D} Семья, долг, честь\n{FFFFFF}2.{DDA64D} Непреклонные, несгибаемые, несдающиеся\n{FFFFFF}3.{DDA64D} Мудрость и сила\n\n{FFFFFF}Стоимость: {FF6D33}500 AZ Coins ", !"Принять", !"Отмена");
			GiveDonate(playerid, -500);
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`slogan` = '%s'", inputtextsave);
		}
		
		case 7521:
		{
			if(!response)
				return true;
			
			new need_level[7] = {0, 10, 20, 30, 40, 75, 100};
			
			if(GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "level") < need_level[listitem])
				return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Чтобы установить этот тип семьи, уроверь семьи должен быть выше %d-го!", need_level[listitem]);
			
			
			
			return true;
		}

		case 25340..25350:
		{
			if(!response)
				return (dialogid == 25340 ? 0:ShowLombardMenu(playerid));
			
			new biz = BizEntered[playerid], data = GetDataPawnShopId(biz);

			if(data == INVALID_DATA_ID or biz == INVALID_DATA_ID or !GetString(BizData[biz][bOwner], PlayerName[playerid]))
				return false;

			return ApplyLombardAction(playerid, listitem, dialogid, inputtextsave, biz, data);
		}


		case 15072:
		{
			if(!response)
				return false;

			if(PI[playerid][pVIP][0] < 6)
				return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{ff0000}Ошибка", !"{ffffff}Доступ к средним ценам и количеству операций на рынке за последние 30 дней есть только у владельцев PREMIUM VIP (/donate)", !"Закрыть", !"");


			mysql_tquery(mysql, (str_f("SELECT itemId, SUM(sumAll) AS Summa, SUM(sumAllCount) AS Count FROM main_shop WHERE type = %d GROUP BY itemId ORDER BY Count DESC;", listitem)), "@show_main_shop_price", "dd", playerid, listitem);
		}

		case 15018:
		{
			if(!response)
				return false;
				
			new id = FP_Data[playerid][F_FAMILY_ID], percent = strval(inputtextsave);
				
			foreach(Player, i)
			{
				if(FP_Data[i][F_FAMILY_ID] == id)
				{
					SCM(i, 0xB9C1B8FF, !" ");
					SCMF(i, 0xB9C1B8FF, "[Family] Теперь с каждого зачисления на ваш депозит %d %% будет идти в бюджет семьи.", percent);
					FP_Data[playerid][F_FAMILY_PERCENT_DEPOSIT] = percent;
				}
			}
						
			return UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`percent_deposit` = '%d'", percent);
		}
		case 15022:
		{
			if(!response)
				return false;
			
			spdList(playerid, 0, listitem);
				
			return SPDF(playerid, 15023, DIALOG_STYLE_INPUT, !"Название ранга", "{ffffff}Выбран {ffff00}ранг №%d \"%s\".\n\n{cccccc}Установите новое название для этого ранга: (максимум 30 символов)", !"Изменить", !"Назад", listitem + 1, String_GetPlayerData(playerid, "listitem", listitem));
		}
		
		case 15023:
		{
			if(!response)
				return false;
			
			new id = gpdList(playerid, 0);
			
			if(!(1 <= strlen(inputtextsave) <= 30))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Нельзя меньше 1 символа и больше 30!"), SPDF(playerid, 15023, DIALOG_STYLE_INPUT, !"Название ранга", "{ffffff}Выбран {ffff00}ранг №%d \"%s\".\n\n{cccccc}Установите новое название для этого ранга: (максимум 30 символов)", !"Изменить", !"Назад", id + 1, String_GetPlayerData(playerid, "listitem", id));
				
			f(mysql_string, 128, "SELECT `rank` FROM family WHERE ID = %d", FP_Data[playerid][F_FAMILY_ID]);
			
			new Cache:result = mysql_query(mysql, mysql_string);
			
			cache_get_value_name(0, "rank", SQL_STRING);
			
			sscanf(SQL_STRING, "p<,>a<s[128]>[10]", SQL_GET_ROW_STR);
			
			cache_delete(result);
			
			global_str = "";
			 
			for(new i; i < 10; i++)
				strcat(global_str, (str_f("%s%s", i == id ? inputtextsave:SQL_GET_ROW_STR[i], i == 9 ? "":",")));
			
			SQL("UPDATE family SET rank = '%s' WHERE ID = %d;", global_str, FP_Data[playerid][F_FAMILY_ID]);
			
			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили новое название для ранга №%d (было: \"%s\", стало: \"%s\")", id+1, String_GetPlayerData(playerid, "listitem", id), inputtextsave);
		}

		case 1924:
		{
			if(!response) return false;
			else if(PI[playerid][pVirMoney] < 2000) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно AZ Coins!");

			new index = strval(inputtext);
			
			if(index == playerid) 
				return false;

			else if(!IsPlayerOnline(index)) 
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не найден.");

			else if(!(FP_Data[playerid][F_FAMILY_ID] == FP_Data[index][F_FAMILY_ID]))
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не из вашей семьи");

			format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}передал лидерство семьи в руки %s[%d].", FamilyColor[GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "color")][0], PN(playerid), playerid, PN(index), index);
            SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], global_str);

			GiveDonate(playerid, -2000);

			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`ownername` = '%s'", PN(index));
		}

		case 494:
        {
			if(!response) return callcmd::fammenu(playerid);
			else if(!(5 <= strlen(inputtextsave) <= 15)) return SPD(playerid, 494, DIALOG_STYLE_INPUT, "", "\n\n{FFFFFF}Введите будущее название вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина названия от 5-ти до 15 символов.\n{FFFFFF}2. {dda64d}Название семьи должно быть в именительном падеже.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}При нарушении этих правил, ваша семья будет удалена!\n\n", "Принять", "Отмена");
            else if(strfind(inputtextsave, " ", true) != -1) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В названии семьи запрещены пробелы!"), SPD(playerid, 494, DIALOG_STYLE_INPUT, "", "\n\n{FFFFFF}Введите будущее название вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина названия от 5-ти до 15 символов.\n{FFFFFF}2. {dda64d}Название семьи должно быть в именительном падеже.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}При нарушении этих правил, ваша семья будет удалена!\n\n", "Принять", "Отмена");
			
			format(global_str, 128, "SELECT * FROM family WHERE name = '%s'", inputtextsave);
			new Cache:result = mysql_query(mysql, global_str);
			
			if(cache_num_rows()) SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Такое название фамы уже существует!");
			else
			{
				SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы успешно установили название вашей семьи. Теперь ваша семья будет называться: %s", inputtextsave);
				
				UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`name` = '%s'", inputtextsave);

				callcmd::fammenu(playerid);
			}
			cache_delete(result);
		}
		
   		case 495:
        {
            if(!response) return callcmd::fammenu(playerid);
		    if(!(15 <= strlen(inputtextsave) <= 40)) return SPD(playerid, 495, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}Введите слоган вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина слогана от 15 до 40 символов.\n{FFFFFF}2. {dda64d}Слоган (Девиз) нельзя нарушать.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}Примеры: \n\n1. {dda64d}Семья, долг, честь\n{FFFFFF}2. {dda64d}Непресклонные, несгибаемые, несдающиеся\n{FFFFFF}3. {dda64d}Мудрость и сила\n\n", !"Принять", !"Отмена");
			UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`slogan` = '%s'", inputtextsave);
			UpdateFamilyText(playerid, FP_Data[playerid][F_FAMILY_ID]);
			callcmd::fammenu(playerid);
        }

		case 8890:
		{
			if(!response) return callcmd::fammenu(playerid);
			if(PI[playerid][pMoney] < 50000000) return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Недостаточно денежных средст!");
			new id = FP_Data[playerid][F_FAMILY_ID];
			
			format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}купил галочку для нашей семьи!", FamilyColor[GetFamilyDataInt(id, "color")][0], PN(playerid), playerid);
            SendFamilyMessage(id, global_str);
			
			UpdateFamilyData(id, "`jackdaw` = %d", 1);
			
			foreach(Player, i)
			{
				if(FP_Data[i][F_FAMILY_ID] == id)
					UpdateFamilyText(i, id);
			}
			
			return GiveMoney(playerid, -50000000, "покупка галочки для семьи");
		}
        case 8889:
		{
			if(!response) return callcmd::fammenu(playerid);
			if(PI[playerid][pMoney] < 80000000) return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Недостаточно денежных средст!");
			new id = FP_Data[playerid][F_FAMILY_ID];
			
			format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}купил бренд для нашей семьи!", FamilyColor[GetFamilyDataInt(id, "color")][0], PN(playerid), playerid);
            SendFamilyMessage(id, global_str);
			
			UpdateFamilyData(id, "`brend` = %d", 1);
			
			foreach(Player, i)
			{
				if(FP_Data[i][F_FAMILY_ID] == id)
					UpdateFamilyText(i, id);
			}
			
			GiveMoney(playerid, -80000000);
		}

		case 8885:
		{
			if(!response)
				return false;
			
			if(!CheckAdminCommand(playerid, "sletmenu"))
				return false;

			new hour, minut, type, number;

			sscanf(inputtextsave, "p<,>dddd", number, type, hour, minut);

			if(type > 1 or type < 0)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Тип слетаемого имущества должен быть от 0 до 1 || 0 - дом,  1 - бизнес.");

			else if ((type && OWNABLEBIZES < number) or (!type && OWNABLEHOUSES < number))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Ошибка ID слетающего имущества.");

			new id = gpdList(playerid, 0);

			if(AutoSlet[id][as_Status])
				return false;

			AutoSlet[id][as_Hour] = hour;
			AutoSlet[id][as_Min] = minut;
			SetString(AutoSlet[id][as_Owner], PN(playerid));
			AutoSlet[id][as_Status] = true;
			AutoSlet[id][as_ID] = number;
			AutoSlet[id][as_Type] = type;

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} %s №%d поставлен на автослет, время слета - %d:%d.", type ? "Бизнес":"Дом", number, hour, minut);
		}

		case 8886:
		{
			if(!response)
				return false;

			if(!CheckAdminCommand(playerid, "sletmenu"))
				return false;

			if(AutoSlet[listitem][as_Status])
			{
				AutoSlet[listitem][as_Hour] = 0;
				AutoSlet[listitem][as_Min] = 0;
				SetString(AutoSlet[listitem][as_Owner], "");
				AutoSlet[listitem][as_Status] = false;
				AutoSlet[listitem][as_ID] = 0;
				AutoSlet[listitem][as_Type] = 0;

				return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Бизнес/Дом был снят со слета.");
			}

			spdList(playerid, 0, listitem);

			return SPD(playerid, 8885, DIALOG_STYLE_INPUT, !"{FFFFFF}Автоматический слет | {ae433d}@skill.high", !"{FFFFFF}Для того чтобы добавить имущество на слет введите параметры по примеру:\nПример: {ae433d}(ID дома/биза) (Тип 0/1) (Время слета)\n\n{FFFFFF}Где (ID дома/биза) - ид дома/бизнеса который хотите поставить на слет\n(Тип 0/1) - тип слетаемого, 0 - дом, 1 - бизнес\n(Время слета) - когда хотите чтобы слетело поставленное имущество\n\nПолный пример: {ae433d}205 0 17 40{FFFFFF}, при вводе таких параметров\nслетит дом №205 в 17:40 по МСК.\n\nВведите параметры для слета:", !"Выставить", !"Выйти");
		}

		case 8887:
		{
			if(!response)
				return false;
				
			new id = FP_Data[playerid][F_FAMILY_ID];

			foreach(Player, i) { 

				if(!(FP_Data[i][F_FAMILY_ID] == -1) && id == FP_Data[i][F_FAMILY_ID])
				{
					SCM(playerid, COLOR_OLDRED, !"[Информация]{FFFFFF} Семья в которой вы состояли, была расформирована!");

					UpdatePlayerDataInt(i, "Family", FP_Data[i][F_FAMILY_ID] = -1);
			
					if(FamilyText[i])
						DestroyDynamic3DTextLabel(FamilyText[i]),
						FamilyText[i] = Text3D:false;
				}

			}

			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n \n{42B02C}Вы успешно расформировали вашу семью!\n ", !"Принять", !"");
	
			return SQL("DELETE FROM family WHERE ownername = BINARY('%s') LIMIT 1;", PN(playerid));
		}

		case 8888:
		{
			if(!response) return callcmd::fammenu(playerid);
			
			new id = FP_Data[playerid][F_FAMILY_ID];
			
			format(global_str, 256, "{%s}[Cемья (Новости)] %s[%d]: {B9C1B8}самостоятельно покинул семью!", FamilyColor[GetFamilyDataInt(id, "color")][0], PN(playerid), playerid);
			SendFamilyMessage(id, global_str);
			
			SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", "\n\n{FFFFFF}Вы успешно покинули семью: {d0d026}%s.\n\n\n", !"Принять", !"", GetFamilyDataString(id, "name"));
			UpdatePlayerDataInt(playerid, "Family", FP_Data[playerid][F_FAMILY_ID] = -1);
			
			if(FamilyText[playerid])
				DestroyDynamic3DTextLabel(FamilyText[playerid]),
				FamilyText[playerid] = Text3D:false;
		}

		case 15230:
   		{
			if(!response)
				return DeletePVar(playerid, !"zoneFamilySelect");

			new id = GetPVarInt(playerid, !"zoneFamilySelect"), month;

			if(GangZoneInfo[id][familyAttackId] != -1) 
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Встреча уже забита!");

			getdate(_, month, _);

			for(new i; i < 3; i++) 
				GangZoneInfo[id][familyTimeStart][i] = gpdList(playerid, i);

			GangZoneInfo[id][familyAttackId] = FP_Data[playerid][F_FAMILY_ID];
			SendFamilyMessage(FP_Data[playerid][F_FAMILY_ID], (str_f("{%s}[Family War] Семья %s назначила встречу семье %s на территории №%i, дата встречи %i %s %i:%02i", FamilyColor[GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "color")][0], GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name"), GetFamilyDataString(GangZoneInfo[id][familyOwnerId], "name"), id - 130, GangZoneInfo[id][familyTimeStart][0], mtext[month - 1][1], GangZoneInfo[id][familyTimeStart][1], GangZoneInfo[id][familyTimeStart][2])));
			DeletePVar(playerid, !"zoneFamilySelect"), SaveGangZone(id);
   		}

		case 12513:
        {
			if(!response)
				return DeletePVar(playerid, !"zoneFamilySelect");

            new day, hour, minute, id = GangZoneInfo[GetPVarInt(playerid, !"zoneFamilySelect")][familyOwnerId];

            sscanf(inputtextsave, "p<:>ii", hour, minute);
			getdate(_, _, day);

			if(id != -1)
			{
				SPDF(playerid, 15230, DIALOG_STYLE_MSGBOX, !"Подтвердите встречу", "{cccccc}Территории {ffff00}№%i {cccccc}принадлежит семье {%s}%s\n", !"Далее", !"Отмена", GetPVarInt(playerid, !"zoneFamilySelect")-130, FamilyColor[GetFamilyDataInt(id, "color")][0], GetFamilyDataString(id, "name"));
				spdList(playerid, 0, day), spdList(playerid, 1, hour), spdList(playerid, 2, minute);
			}

			return true;
		}

		case 12512: 
		{
			if(!response)
				return DeletePVar(playerid, !"zoneFamilySelect");

			return SPD(playerid, 12513, DIALOG_STYLE_INPUT, !"Укажите время встречи", !"{ffffff}Введите время в формате{F3FF02}час:минуты{ffffff}(через двоеточие)\n\n{C3C3C3} - проводить встречи для выяснений отношений можно с 14:00 до 21:00\n - семья может защищаться 3 раза в день\n - нападать 3 раза в день\n - семья может проводить разборки с интервалом 1 час до встречи и после встречи", !"Далее", !"Отмена");
		}

		case 15210:
		{
			if(!response)
				return DeletePVar(playerid, !"zoneFamilySelect");

			switch(listitem)
			{
				case 0:
				{
                    new id = GetPVarInt(playerid, !"zoneFamilySelect");
					EnableGPSForPlayer(playerid, ZonesInfo[id][zone_min][0], ZonesInfo[id][zone_min][1], ZonesInfo[id][zone_max][0]);
                    SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили метку на семейную территорию №%i", id-130);
				}
				case 1:
				{
					new day, month, minuite, hour;
					getdate(_, month, day), gettime(hour, minuite, _);

					for(new i; i < 3; i++)
						strcat(global_str, (str_f("%i %s\n", day + i, mtext[month - 1][1])));

					SPD(playerid, 12512, DIALOG_STYLE_LIST, !"Выберите дату встречи", global_str, "Выбрать", "Отмена");
				}
			}

			return true;
        }

		case 15209:
		{
			if(!response)
				return ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 11);
		}

		case 15208:
		{
			if(!response) 
				return callcmd::fammenu(playerid);
			
			else if(GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "level") < 20 && listitem <= 3)
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта функция доступна, если у вашей семьи минимум 20 уровень.");

			new count = 0, month;

			switch listitem do
			{
				case 0: 
					return showFamilyCaptureTD(playerid);

				case 1, 2:
				{
					getdate(_, month, _);

					global_str = "{ffff00}Дата\t{ffff00}Территория\t{ffff00}Встреча\n";
					
					for(new i = 131; i < 286; i++)
					{
						if(listitem == 1 && (GangZoneInfo[i][familyOwnerId] != FP_Data[playerid][F_FAMILY_ID] or GangZoneInfo[i][familyAttackId] == -1)) continue;
						if(listitem == 2 && (GangZoneInfo[i][familyAttackId] == -1 or GangZoneInfo[i][familyOwnerId] == -1)) continue;
						strcat(global_str, ( str_f( "[%i %s %i:%i]\t№%i\t {%s}%s{FFFFFF} vs {%s}%s{FFFFFF}\n", GangZoneInfo[i][familyTimeStart][0], mtext[month - 1][1], GangZoneInfo[i][familyTimeStart][1], GangZoneInfo[i][familyTimeStart][2], i + 1, FamilyColor[GetFamilyDataInt(GangZoneInfo[i][familyOwnerId], "color")][0], GetFamilyDataString(GangZoneInfo[i][familyOwnerId], "name"), FamilyColor[GetFamilyDataInt(GangZoneInfo[i][familyAttackId], "color")][0], GetFamilyDataString(GangZoneInfo[i][familyAttackId], "name") ) ) );
						count++;
					}

					if(count != 0) SPD(playerid, 15209, DIALOG_STYLE_TABLIST_HEADERS, (str_f("Список всех предстоящих встреч%s", listitem == 1 ? " вашей семьи" : "")), global_str, !"Закрыть", !"Назад");
					else SPD(playerid, 15209, DIALOG_STYLE_MSGBOX, !"Уведомление", (str_f("{ffffff}У %s нет предстоящих встреч!", listitem == 1 ? "вашей семьи" : "семей")), !"Закрыть", !"Назад");
				}

				case 3:
				{
					global_str = "{ffff00}№ территории\t{ffff00}Семейные монеты\t{ffff00}Деньги\n";
					count = 1;

					for(new i = 131; i < 286; i++)
					{
						if(GangZoneInfo[i][familyOwnerId] != FP_Data[playerid][F_FAMILY_ID]) continue;
						strcat(global_str, ( str_f ("[%i] Территория №%i\t0 монет\t$0\n", count, i + 1 ) ) );
						count++;
					}

					if(count != 1) SPD(playerid, 15209, DIALOG_STYLE_TABLIST_HEADERS, !"Список территорий вашей семьи", global_str, !"Закрыть", !"Назад");
					else SPD(playerid, 15209, DIALOG_STYLE_MSGBOX, "Уведомление", "{ffffff}У вашей семьи нет территорий!", !"Закрыть", !"Назад");
				}

				case 4:
					return SPD(playerid, 15209, DIALOG_STYLE_MSGBOX, !"Полезная информация", !"{D45B5B}Войны за семейные территории\n\n{ffffff}По всему городу Las Venturas расставлены специальные зоны - семейные территории, всего их {ffff00}156 штук{ffffff}.\nНайти территорию можно с помощью команды {ffff00}/findfamzone{ffffff}.\n\nКаждая семья которая имеет семейную квартиру в одном из жилых комплексов может участвовать в войнах за территории.\nДля того чтобы начать войну за территорию, лидеру нужно зайти в меню семьи и выбрать пункт - Война за Территории.\n\nПеред вами откроется специальная карта всех территории, \nна этой карте вы сможете выбрать любую территорию и узнать какая семья в данный момент ей владеет.\nДля того чтобы объявить войну и попробовать забрать территорию себе, \nвам нужно нажать на территорию и выбрать пункт - Отобрать территорию. \nДалее вам нужно указать удобное для вашей семьи время {ffff00}(с 14:00 до 21:00){ffffff}, \nкогда наибольшее количество членов вашей семьи смогут принять участие в битве.\nПосле утверждения времени битвы вам остается только тщательно к ней подготовиться, оповестить всех членов семьи и дождаться самой битвы.\n\nГлавная суть битвы - перестрелка. \nТерритория достанется той семье которая убьет наибольшее количество противников во время схватки.\nВремя 1 битвы - 10 мин.\n\n\n{D45B5B}Заработок с территорий:\n\n{ffffff}Каждый PayDay на баланс территории начисляется {ffff00}$8000 средств, а так же 8 семейных монет{ffffff}. \nДля того чтобы данные ресурсы зачислились на баланс вашей семьи вам нужно будет перевозить их на специальных фургонах!\n\nКаждая семья может купить до 6 фургонов. Сделать это можно у каждого ЖК.\nСтоимость фургонов начинается от 2.000 и достигает 12.000 семейной репутации.\n\nДля того чтобы перевезти ресурсы с территории вам нужно взять фургон на специальном пикапе у ЖК и отправиться к себе на территорию.\nНа самой территории вы сможете заметить специальный пикап (доллар), \nдля того чтобы погрузить все ресурсы в фургон вам нужно просто посигналить рядом с ним.\nПосле сигнала все доступные для перевозки ресурсы будут загружены в ваш фургон. \nПосле этого вам нужно отправиться обратно к ЖК и у специального места произвести разгрузку.\nЗа доставку ресурсов на счет семьи будет зачислено 75% от привезенного количества, \nа остальные 25% достанутся тому человеку который производил транспортировку.\n\n{D45B5B}Обратите внимание! {cccccc}Во время перевозки ресурсов ваш семейный фургон могут ограбить, для его ограбления нужно попросту его взорвать. \nВ случае ограбления все средства что будут находиться в фургоне на момент взрыва рассыпятся в виде пачек с деньгами на дорогу. \nЭти пачки сможет подобрать любой игрок, а сложить обратно и доставить в ЖК их уже не получится.\nПодробнее об ограблении - /help > Ограбление фургонов", !"Закрыть", !"Назад");
			
				case 5:
                {
					if(!GetFamilyAcces(PN(playerid), FP_Data[playerid][F_FAMILY_ID]))
				    	return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Эта функция доступна только лидеру и заместителям!");

					new rank = GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "rank_capture");

                    if(rank == 9) rank = 0;
                    rank++;

                    SQL("UPDATE `family` SET `rank_capture` = '%i' WHERE `ID` = '%d'", rank, FP_Data[playerid][F_FAMILY_ID]);
                   	return SPDF(playerid, 15208, DIALOG_STYLE_LIST, "Война за территории", "{FFFFFF}Карта территорий\n{E65075}Предстоящие встречи\n{FFFFFF}Список всех встреч\nНаши территории\n{cccccc}Полезная информация\nРазрешено ходить на встречи с %i-го ранга", "Выбрать", "Назад", rank);
                }
			}
		}
		
		case 978, 25382:
		{
			if(!response or Int_GetPlayerData(playerid, "NeftInPlayer")) 
				return DeletePVar(playerid, "NeftBizID");

			new 
				biz = Int_GetPlayerData(playerid, "NeftBizID"),
				money = (dialogid == 25382 ? 100000 : floatround(BizData[biz][bEnterPrice] * 200.0));
			
			if(dialogid == 978 && PI[playerid][pMoney] < money) 
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

			else if(dialogid == 25382 && GetCount(playerid, 1811) < money)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У вас не достаточно BTC для покупки бочки!");

			SetPVarInt(playerid, "NeftInPlayer", true);
			BizData[biz][bProducts] -= (dialogid == 25382 ? 500 : 200);
			GiveBizMoney(biz, dialogid == 25382 ? 100 : money*50);

			CarryAnim(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerAttachedObject(playerid, 7, 3632, 6, 0.0170, 0.1470, -0.2220, -16.6000, 0.0000, 0.0000, 0.6430, 0.6110, 0.7090);
			
			SCMF(playerid, COLOR_VALIK, "Вы успешно купили бочку. Погрузите её в %s!", dialogid == 25382 ? "автомобиль" : "лодку");
			if(dialogid == 25382)
				SCM(playerid, COLOR_ORANGE, !"[ВАЖНО]{FFFFFF} Вы можете погрузить бочки через клавишу N подойдя к задней части!"),
				SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Чтобы разместить бочку найдите свободное место (свободные места подсвечиваются прозрачным)"),
				DeleteItem(playerid, 1811, 100000);

			else GiveMoney(playerid, -money);

			return UpdateNeftText(biz), DeletePVar(playerid, "NeftBizID");
		}

		case 4348:
		{
		    if(!response) return 1;
		    new i = PI[playerid][pTrailerKey];
		    if(TrailerInfo[i][tParked])
		    {
		    	DestroyDynamicObject(TrailerInfo[i][tObjPark]);
		    	DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
		    	DestroyDynamicPickup(TrailerInfo[i][tPickup]);
		    	TrailerInfo[i][tObjPark] = INVALID_STREAMER_ID;
		    	switch(TrailerInfo[i][tType])
		    	{
					case 1: GiveMoney(playerid, 75000000/2);
					case 2: GiveMoney(playerid, 100000000/2);
					case 3: GiveMoney(playerid, 150000000/2);
				}
		    	PI[playerid][pTrailer] = 0;
		    	PI[playerid][pTrailerKey] = -1;
		    	SetString(TrailerInfo[i][tOwner], "The State");
		    	SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно продали трейлер, наши сотрудники эвакуировали трейлер.");
			}
			else
			{
			    DestroyDynamicObject(TrailerInfo[i][tObj]);
		    	DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
		    	SetString(TrailerInfo[i][tOwner], "The State");
		    	DestroyVehicleIter(TrailerInfo[i][tIDcar]);
		    	TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
		    	TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
		    	PI[playerid][pTrailerKey] = -1;
		    	switch(TrailerInfo[i][tType])
		    	{
					case 1: GiveMoney(playerid, 75000000/2);
					case 2: GiveMoney(playerid, 100000000/2);
					case 3: GiveMoney(playerid, 150000000/2);
				}
				SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно продали трейлер, наши сотрудники эвакуировали трейлер.");
		    	PI[playerid][pTrailer] = 0;
			}
			if(PI[playerid][pDCTime] == 4) PI[playerid][pDCTime] = 0;
			SaveAccount(playerid);
			SaveTrailer(i);
			TrailerTime{playerid} = 0;
			TrailerVeh[playerid] = INVALID_VEHICLE_ID;
		}
	    case 1399:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: {
						if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");
						if(PI[playerid][pTrailerKey] != -1) return SendBotMessage(playerid, "У Вас уже есть трейлер");
                        IDDialog[playerid] = 1;
                        SPD(playerid, 1400, 0, "Подтверждение покупки", "{FFFFFF}Вы хотите купить трейлер №1 за {FF6347}75000000$?", "Купить", "Отмена");
					}
					case 1: {
					    if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");

                        if(PI[playerid][pTrailerKey] != -1) return SendBotMessage(playerid, "У Вас уже есть трейлер");
                        IDDialog[playerid] = 2;
                        SPD(playerid, 1400, 0, "Подтверждение покупки", "{FFFFFF}Вы хотите купить трейлер №2 за {FF6347}100000000$?", "Купить", "Отмена");
					}
					case 2: {
					    if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");

                        if(PI[playerid][pTrailerKey] != -1) return SendBotMessage(playerid, "У Вас уже есть трейлер");
						IDDialog[playerid] = 3;
                        SPD(playerid, 1400, 0, "Подтверждение покупки", "{FFFFFF}Вы хотите купить трейлер №3 за {FF6347}150000000$?", "Купить", "Отмена");
					}
				}
			}
		}

		case 15424:
		{
			if(!response)
				return false;
			
			new vehicle = GetPlayerVehicleID(playerid), mechanic_data[4] = {50, 42, 268, 8};

			if(vehicle == INVALID_VEHICLE_ID)
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы должны находится в автомобиле который следует починить!");

			else if(AutoService[int_TRANSIT_PLAYER_DATA][asStatus] == false)
				return SendErrorMessage(playerid);

			AutoService[int_TRANSIT_PLAYER_DATA][asStatus] = false;

			TogglePlayerControllable(playerid, false);

			for(new i; i < sizeof(mechanic_data); i++)
				CreateMechanicActorByVehicle(playerid, vehicle, mechanic_data[i], i, int_TRANSIT_PLAYER_DATA);

			Streamer_Update(playerid);
			CallTimeOutFunction("@RepairCallBackCar", 25000, 0, "dddd", int_TRANSIT_PLAYER_DATA, vehicle, playerid, 100000);
			return SCM(playerid, COLOR_GREY, !"Механики начали ремонтировать ваш автомобиль, дождитесь завершения.");
		}

		case 1400:
		{
			if(response)
			{
			    switch(IDDialog[playerid])
			    {
			        case 1:
			        {
			            if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");
			            new cars = PI[playerid][pCars];
			            if(cars==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет личного транспорта!");
      					if(GetTrailer(playerid) != -1 || PI[playerid][pTrailer]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У Вас уже куплен трейлер!");
			            if(PI[playerid][pMoney] < 75000000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег для покупки трейлера!");
			            SCM(playerid, COLOR_WHITE, !"Поздравляем Вас с покупкой трейлера!");
						SCM(playerid, COLOR_ORANGE, !"[ Подсказка ]{FFFFFF} Забрать его можно на личном автомобиле в гараже нашего салона (на улице, метка на радаре)");
						EnableGPSForPlayer(playerid,-2105.8459,-2418.9871,30.6250);
						GiveMoney(playerid, -75000000);
						PI[playerid][pTrailer] = IDDialog[playerid];
						ctrailers--;
					}
					case 2:
			        {
			            if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");
			            new cars = PI[playerid][pCars];
			            if(cars==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет личного транспорта!");
      					if(GetTrailer(playerid) != -1 || PI[playerid][pTrailer]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У Вас уже куплен трейлер!");
			            if(PI[playerid][pMoney] < 100000000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег для покупки трейлера!");
			            SCM(playerid, COLOR_WHITE, !"Поздравляем Вас с покупкой трейлера!");
						SCM(playerid, COLOR_ORANGE, !"[ Подсказка ]{FFFFFF} Забрать его можно на личном автомобиле в гараже нашего салона (на улице, метка на радаре)");
						EnableGPSForPlayer(playerid,-2105.8459,-2418.9871,30.6250);
						GiveMoney(playerid, -100000000);
						PI[playerid][pTrailer] = IDDialog[playerid];
						ctrailers--;
					}
					case 3:
			        {
			            if(!ctrailers)
							return SendBotMessage(playerid,"Извините, но трейлеры закончились.");
			            new cars = PI[playerid][pCars];
			            if(cars==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет личного транспорта!");
      					if(GetTrailer(playerid) != -1 || PI[playerid][pTrailer]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У Вас уже куплен трейлер!");
			            if(PI[playerid][pMoney] < 150000000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает денег для покупки трейлера!");
			            SCM(playerid, COLOR_WHITE, !"Поздравляем Вас с покупкой трейлера!");
						SCM(playerid, COLOR_ORANGE, !"[ Подсказка ]{FFFFFF} Забрать его можно на личном автомобиле в гараже нашего салона (на улице, метка на радаре)");
						EnableGPSForPlayer(playerid,-2105.8459,-2418.9871,30.6250);
						GiveMoney(playerid, -150000000);
						PI[playerid][pTrailer] = IDDialog[playerid];
						ctrailers--;
					}
				}
			}
		}
		case 1401:
		{
		    if(!response) return 1;
		    if(!IsPlayerInAnyVehicle(playerid)) return 0;
		    if(!IsACar(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}На этом автомобиле нельзя перевозить трейлеры.");
		    if(GetTrailer(playerid) != -1)
			{
				if(TrailerInfo[GetTrailer(playerid)][tShtraf] != 0)
				{
					if(PI[playerid][pMoney] < TrailerInfo[GetTrailer(playerid)][tShtraf]) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вам не хватает денег на оплату штрафа.");
					GiveMoney(playerid, -TrailerInfo[GetTrailer(playerid)][tShtraf]);
					SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно оплатили штраф и забрали трейлер.");
					TrailerInfo[GetTrailer(playerid)][tShtraf] = 0;
				}
				if(TrailerInfo[GetTrailer(playerid)][tParked] || TrailerInfo[GetTrailer(playerid)][tIDcar] != INVALID_VEHICLE_ID) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы уже забрали свой трейлер.");
			}
			if(!IsPlayerRegCar(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}Вы должны находиться в личном транспорте");
            if(!PI[playerid][pTrailer] && GetTrailer(playerid) == -1) return SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}У Вас нет трейлера!");
			TrailerInstall(playerid);
		}
	    case 7893: //Уолтер
		{
			if(response)
			{
				switch(listitem)
				{
				case 0: SendBotMessage(playerid,"Привет, я недалеко от сюда живу, подрабатываю охранником этой аренды!");
				case 1: SendBotMessage(playerid,"У меня нет для тебя заданий!");
				}
			}
		}
	    case 1467:
	    {
	        if(!response) return 1;
	        switch(listitem)
	        {
	            case 0: SendBotMessage(playerid, "Привет, я работник одной из служб которая поможет городу подготовиться к новому году.\nЕсли у вас есть свободное время, вы можете в любое время подходить ко мне чтобы получить задание,\nза которое я вам дам очень интересные вознаграждения.");
				case 1: SendBotMessage(playerid, "Выполнять мои поручения вы можете только 1 раз.");
				case 2: SendBotMessage(playerid, "У меня довольно много таки интересных вещей, ну это как повезет, может вы получите\nденюжку, а может и что-то по круче, например новогодние аксессуары, которые больше негде достать.");
				case 3:
				{
				    if(PI[playerid][pLevel] < 10) return SPD(playerid, 0, 0, "", "{FFFFFF}Выполнять Новогодние задания, можно с 10-го уровня!", "Понял", "");
					SendBotMessage(playerid, "У меня нет для тебя заданий!");
				}
			}
		}
		case 6939:
		{
			if(!response) return 1;
			
			new biz = ShowPBiz[playerid];
			
	        switch listitem do
	        {
	            case 0:
	            {
	                if(!IsHisBiz(playerid, biz)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш бизнес!");
			        BizData[biz][bLock] = !BizData[biz][bLock];
		 			ShowBizSettings(playerid, biz);
				}
				case 1:
				{
				    if(!GetString(BizData[biz][bOwner], PN(playerid))) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш бизнес!");
				    SPD(playerid, 6940, DIALOG_STYLE_INPUT, "Подтверждение", "{FFFFFF}Введите ниже ID игрока, которого\nхотите назначить заместителем.\n{FF6347}Если вы хотите убрать заместителя\nто оставьте поле пустым.", "Принять", "Отмена");
				}
				case 2: if(GetString(BizData[biz][bOwner], PN(playerid)) || GetString(BizData[biz][bZam], PN(playerid))) 
						return ShowWeekBiz(playerid, biz);
						
				case 3: 
					return SCM(playerid, -1, "РЕКЛАМА!!");
				
				case 4:
					return ShowDialogEditName(playerid, 1);
					
				case 5:
					return spdList(playerid, 0, 1), SPDF(playerid, 2434, DIALOG_STYLE_LIST, !"Предметы недвижимости", "{FFFFFF}Предметы на улице:\t\tустановлено %d из %d\nПредметы в интерьере:\tустановлено %d из %d\n", !"Выбрать", !"Назад", GetCountUsedObj(biz, 1), BizData[biz][bObjectCount][0], GetCountUsedObj(biz, 1, 1), BizData[biz][bObjectCount][1]);
				
				
				default:
				{
					switch listitem do
					{	
						case 6:
						{
							switch BizData[biz][bState] do
							{
							
								case 1:
								{
									format(global_str, 500, "\
									{FFFFFF}Вы хотите повысить уровень улучшения игры {FFFF00}\"Орёл и Решка\"{FFFFFF}?\n\
									Стоимость повышения: {FFFF00}20.000.000 BTC{FFFFFF}\n\n\
									Текущий уровень: {FFFF00}%d/%d (максимальная ставка: %d BTC){FFFFFF}\n\
									Каждый уровень повышает максимальную ставку на {FFFF00}10.000.000 BTC",
									BizData[biz][bUpgrade][0], MAX_UP_BIZ(BizData[biz][bState]), GetCostUpgradeBar(BizData[biz][bUpgrade][0]));
								}
								
								case 23:
								{
									f(global_str, 500, "\
									{FFFFFF}Вы хотите повысить уровень улучшения нефтевышки?\n\
									Стоимость повышения: {FFFF00}%d$\n\
									{FFFFFF}Текущий уровень: {FFFF00}%d/%d\n\n\
									{FFFFFF}Характеристики:\n\
									* Скорость выкачивания у нефтевышки: {FFFF00}%d секунд(ы)\n\
									{FFFF00}* За раз нефтевышка качает: от {FFFF00}%.01f до %.01f литров\n\n\
									{9c8a5d}С каждым уровнем повышается добываемый объём с нефтевышки\n\
									Каждый 20 уровень снижается время добачи на 1 секунду.",
									(1000000+50000*BizData[biz][bUpgrade][0]),
									BizData[biz][bUpgrade][0], MAX_UP_BIZ(BizData[biz][bState]),
									GetNeftSecond(BizData[biz][bUpgrade][0]),
									68.0+(1.13*(BizData[biz][bUpgrade][0]-1)), 82.0+(1.13*(BizData[biz][bUpgrade][0]-1)));
								}
							}
							
							return SPD(playerid, 6943, DIALOG_STYLE_MSGBOX, !"Подтверждение", global_str, !"Повысить", !"Назад");
						}
					}
				}
			}
		}
		
		case 6943:
		{
			if(!response) return 0;
			new id = ShowPBiz[playerid];
			if(id == -1) return 0;
			
			switch BizData[id][bState] do
			{
				case 1:
				{
					if(BizData[id][bUpgrade][0] == MAX_UP_BIZ(BizData[id][bState])) 
						return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас максимальный уровень прокачки игры \"Орёл и Решка\"");
					
					if(GetCount(playerid, 1811) < 20000000)
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно BTC. Вы можете обменять их в Центральном банке.");
				
					DeleteItem(playerid, 1811, 20000000);
					
					mysql_string = "[Информация]{FFFFFF} Вы купили %d уровень улучшения игры \"Орёл и Решка\" для своего бара.";
				}
				
				case 23:
				{
					if(BizData[id][bUpgrade][0] == MAX_UP_BIZ(BizData[id][bState])) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас максимальный уровень прокачки нефтевышки.");
					if(PI[playerid][pMoney] < 1000000 + 50000*BizData[id][bUpgrade][0]) return SCM(playerid, COLOR_OLDRED, ">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
				
					GiveMoney(playerid, -(1000000+50000*BizData[id][bUpgrade][0]), "улучшение нефтевышки");
					
					mysql_string = "[Информация]{FFFFFF} Вы купили %d уровень улучшения нефтевышки.";
				}
				
				default: return false;
			}
			
			
		
			
			BizData[id][bUpgrade][0]++;
			
			
			SCMF(playerid, COLOR_VALIK, mysql_string, BizData[id][bUpgrade][0]);			
			
			if(BizData[id][bState] == 23)
				UpdateNeftText(BizData[id][bID]);
			
			return SQL("UPDATE `businesses` SET `Upgrade` = '%s' WHERE `ID` = '%d'", Int_PackMassive(0, BizData[id][bUpgrade]), BizData[id][bID]);
		}
		
		case 6940:
		{
		    if(!response) return 1;
		    if(!IsHisBiz(playerid, ShowPBiz[playerid])) return 1;
		    if(!strlen(inputtextsave))
		    {
		        if(!GetString(BizData[ShowPBiz[playerid]][bZam], "none"))
				{
				    if(GetPlayerID(BizData[ShowPBiz[playerid]][bZam]) != INVALID_PLAYER_ID) SCM(GetPlayerID(BizData[ShowPBiz[playerid]][bZam]), COLOR_RED, "[Информация] {FFFFFF}Вы были сняты с поста заместителя в бизнесе!");
				}
		        SetString(BizData[ShowPBiz[playerid]][bZam], "none");
		        SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно сняли заместителя с поста");
		        return 1;
			}
			new i = strval(inputtextsave);
			if(!ProxDetectorS(5.0, playerid, i)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока, который будет заместителем!");
			if(GetString(BizData[ShowPBiz[playerid]][bZam], PN(i))) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Он уже заместитель!");
			if(!GetString(BizData[ShowPBiz[playerid]][bZam], "none"))
			{
			    if(GetPlayerID(BizData[ShowPBiz[playerid]][bZam]) != INVALID_PLAYER_ID) SCM(GetPlayerID(BizData[ShowPBiz[playerid]][bZam]), COLOR_RED, "[Информация] {FFFFFF}Вы были сняты с поста заместителя в бизнесе!");
			}
			SetString(BizData[ShowPBiz[playerid]][bZam], PN(i));
			SCM(i, COLOR_ORANGE, !"Информация: {FFFFFF}Вы были назначены заместителем в бизнесе!");
			SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы успешно назначили этого игрока заместителем!");
			ShowBizSettings(playerid, ShowPBiz[playerid]);
		}
		case 6941:
		{
		    if(response)
		    {
		        SCM(playerid, COLOR_ORANGE, !"Информация: {FFFFFF}Вы были убраны с поста заместителя в этом бизнесе");
		        SetString(BizData[ShowPBiz[playerid]][bZam], "none");
			}
		}

	    case 9992:
	    {
	        if(response) callcmd::bizinfo(playerid);
	        else callcmd::bizinfo(playerid);
		}

	    case 4332:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0: eatcheeps(playerid);
					case 1: callcmd::jfish(playerid);
					case 2:
					{
						if(GetCount(playerid, 778) < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет оленины!");
						DeleteItem(playerid, 778, 1);
						f(global_str,50, "%s скушал(а) оленину", PN(playerid));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						if(Fullness[playerid] <= 90) GiveFullness(playerid,15);
						else SetFullness(playerid, 100);
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
					}
				}
			}
		}
		
	    case 3724:
		{
			if(!response) 
				return callcmd::or_cancel(playerid);
			
			else if(OrelName[playerid] == INVALID_PLAYER_ID)
				return false;
			
		    else if(GetCount(playerid, 1811) < OrelMoney[playerid])
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У кого-то из вас не хватает денег!");
			
			f(global_str, 256 ,"Началась игра Орёл и Решка между %s(%s) и %s(%s).",PN(playerid),StatusMoneta[playerid],PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
			ProxDetector(25,playerid,global_str,COLOR_DOCHAT);
			f(global_str, 50 ,"%s подкинул(а) монетку..",PN(playerid));
			ProxDetector(25,playerid,global_str,COLOR_ME);
			return CallTimeOutFunction("OrelTimer", 2000, 0, "d", playerid);
		}
	    

	    case 8383:
	    {
	        if(response)
	        {
	            SPD(playerid, 8384, 0, "{FFFFFF}Магнус ( Менеджер ) | {9d3b34}Контейнеры", "\n\n{FFFFFF}У нас существует 2 различных типа контейнеров,\nу каждого из которых есть минимальная цена для покупки:\n- Обычный [Usual]. Начальная цена: 150000000 $\n- Ультра [Ultra]. Начальная цена: 200000000 $\n{FFFFFF}Каждый час начинается аукцион контейнеров\n\n", "»", "«");
			}
		}
		case 8384:
	    {
	        if(response)
	        {
	            return 1;
			}
			else
			{
			    f(global_str, 400, "\n\n{FFFFFF}Привет, как к тебе обращаться? Очень приятно, %s.\nМеня зовут Магнус, как и эти контейнеры, я родом из Германии.\nЯ постоянно торчу тут и работаю в одиночку.\nК сожалению, я очень устал, мне все это надоело.\nи, вообще, в языке я вашем не силен.\nДавай я по-быстрому тебе расскажу все и буду дальше отдыхать.\n\n", PN(playerid));
	        	SPD(playerid, 8383, 0, "{FFFFFF}Магнус ( Менеджер ) | {9d3b34}Контейнеры", global_str, "»", "X");
			}
		}
		case 8386:
		{
		    if(response)
		    {
		        showitemscontainer(playerid);
			}
		}
	   
		case 2392:
		{
			if(response)
			{
				new id;
                if(sscanf(inputtextsave, "u",id)) return 0;
                f(global_str,500,"{FFFFFF}%s[%d]: {33CCFF}%d",PN(id),id,PI[id][pPhoneInfo][0]);
				if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не в сети!");
				if(PI[id][pPhoneInfo][0]==0)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого игрока нет мобильного телефона!");
				SetPlayerChatBubble(playerid, "смотрит телефонную книгу", COLOR_PURPLE, 10.0, 5000);
				SCM(playerid,-1,global_str);
			}
		}
		case 9871:
		{
			if(!response) return 0;
			switch(listitem)
			{
				case 2: CreateShopTD(playerid, 5);
			}
		}

		case 1727:
		{
			if(!response) return 0;
			new biz = NeftBizID[0][listitem];
			EnableGPSForPlayer(playerid, BizData[biz][bEnter][0], BizData[biz][bEnter][1], BizData[biz][bEnter][2]);
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Нефтевышка была отмечена на карте маркером!");
		}

		case 3082:
		{
            if(!response)
                return false;

            new value = Int_GetPlayerData(playerid, "ShopMas"), slotId = gpdList(playerid, 0), crId = pTemp[playerid][pCentralMarketId][1], count = (value == 100 && pTemp[playerid][pCentralMarketSelectId] == 1 && GetCount(playerid, CentralMarketItems[crId][1][1][slotId]) == 1 ? 1 : strval(inputtextsave));

            if(!strlen(inputtextsave))
                count = 1;

            if(value == 100)
            {
                new crOwnerId = CentralMarket[crId][crOwnedId];

                if(!shopopen{playerid} or crOwnerId == INVALID_PLAYER_ID or crOwnerId == playerid)
                    return false;

                if(CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId])
                {
                    if(PI[pTemp[playerid][pCentralMarketSelectId] == 1 ? crOwnerId : playerid][pInvCell] - GetInvSet(pTemp[playerid][pCentralMarketSelectId] == 1 ? crOwnerId : playerid) <= count/ItemsInfo[CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId]][itemStack]) 
                        return SCMF(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У %s не хватает места в инвентаре!", pTemp[playerid][pCentralMarketSelectId] == 1 ? "игрока" : "вас");

                    if(count > CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][3][slotId])
                        return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}У продавца или у вас нет такого количества!");

                    if(GetCount(pTemp[playerid][pCentralMarketSelectId] == 1 ? crOwnerId : playerid, 1811) < CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] * count or CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] * count <= 0) 
                        return SCM(playerid, COLOR_OLDRED, pTemp[playerid][pCentralMarketSelectId] == 1 ? ">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]" : "[Ошибка] {ffffff}У продавца нет денег на покупку товара.");

                    if(CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][3][slotId] - count <= 0)
                        count = CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][3][slotId];

                    CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][3][slotId] -= count;
                    ClearItem(pTemp[playerid][pCentralMarketSelectId] == 1 ? playerid : crOwnerId, CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId], count);

                    DeleteItem(pTemp[playerid][pCentralMarketSelectId] == 1 ? crOwnerId : playerid, 1811, CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] * count);
                    GiveBizMoney(230, (CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] * count) / 100 * (GetPlayerADDVIP(crOwnerId) ? 2 : 4));

                    SCMF(playerid, COLOR_YELLOW, "Вы успешно %s %s (%d шт.) %s %s%s %i BTC%s", pTemp[playerid][pCentralMarketSelectId] == 1 ? "продали" : "купили", ItemsInfo[CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId]][itemName], count, pTemp[playerid][pCentralMarketSelectId] == 1 ? "торговцу" : "у", PN(crOwnerId), pTemp[playerid][pCentralMarketSelectId] == 1 ? ", с продажи получили" : " за", CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] * count, pTemp[playerid][pCentralMarketSelectId] == 1 ? (str_f(" (комиссия %i процент(а))", GetPlayerADDVIP(crOwnerId) ? 2 : 4)) : "");
                    
					if(pTemp[playerid][pCentralMarketSelectId] == 0)
						AddItem(playerid, CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId], count, Inventory[crOwnerId][2][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]], Inventory[crOwnerId][3][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]], Inventory[crOwnerId][4][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]], Inventory[crOwnerId][5][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]], Inventory[crOwnerId][6][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]], (str_f("%s|%s|%s", InventoryNumber[crOwnerId][0][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]], InventoryNumber[crOwnerId][1][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]], InventoryNumber[crOwnerId][2][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]]))),
						f(global_str, 144, "%s купил у вас %s%s, вы получили %i BTC от продажи (комиссия %i процент(а))", PN(playerid), ItemsInfo[CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId]][itemName], count >= 2 ? (str_f(" (%d шт.)", count)) : "", (CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] * count) / 100 * (GetPlayerADDVIP(crOwnerId) ? 98 : 96), GetPlayerADDVIP(crOwnerId) ? 2 : 4);
                    else
						DeleteItem(playerid, CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId], count),
						f(global_str, 144, "Вы купили %s (%i шт.) у игрока %s за %i BTC", ItemsInfo[CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId]][itemName], count, PN(playerid), CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] * count);
					
					SCM(crOwnerId, COLOR_GREY, global_str);
					AddItem(pTemp[playerid][pCentralMarketSelectId] == 1 ? playerid : crOwnerId, 1811, (CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] * count) / 100 * (GetPlayerADDVIP(crOwnerId) ? 98 : 96));

                    if(CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][3][slotId] <= 0)
                        InventSlotOtherUpdateAll(crId, 4, CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId] = 0, GetInvOtherID(slotId), slotId), CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId] = CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][2][slotId] = CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][3][slotId] = 0, InventSlotUse[crOwnerId][CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][0][slotId]] = false;

                    return true;
                }
            }
            else
            {
                if((Int_GetPlayerData(playerid, "ShopAntiDeBug") != BizEntered[playerid]) && BizEntered[playerid] == -1) 
                    return false;

                new bizId = BizEntered[playerid], itemId = ShopData[value][shopItem][slotId];

                if(PI[playerid][pInvCell] - GetInvSet(playerid) <= floatround(count / ItemsInfo[itemId][itemStack]))
						return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
					
				else if(!(1 <= count <= 100))
					return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы ввели некорректное количество!");
				
				if(!(bizId == -1) && BizData[bizId][bState] == 22 && !(count == 1))
					return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Покупать можно только по одному!");
				
				if(_:(!ShopData[value][shopType] or ShopData[value][shopType] == 2 ? PI[playerid][pMoney] : GetCount(playerid, ShopData[value][shopType] == 1 ? 522 : 1819)) < (!ShopData[value][shopType] ? BizData[bizId][bItem][slotId] : ShopData[value][shopCost][slotId]))
					return SCMF(playerid, COLOR_OLDRED, ">>>>{FFFFFF} - У вас недостаточно %s%s", !ShopData[value][shopType] or ShopData[value][shopType] == 2 ? "денег" : ShopData[value][shopType] == 1 ? "семейных талонов" : "бандитских респектов", !ShopData[value][shopType] or ShopData[value][shopType] == 2 ? ". Вы можете пополнить свой баланс [/donate]" : ShopData[value][shopType] == 1 ? ". Вы можете купить их в специальном магазине [/donate]" : ".");

                AddItem(playerid, itemId, count);
                SPDF(playerid, 0, 0, !"", "{FFFFFF}Вы успешно купили {73B461}%s{FFFFFF} за {73B461}%s", !"Окей", !"", ItemsInfo[itemId][itemName], GetShopCost(slotId, value, bizId, true));
                GameTextForPlayer(playerid, !"successful", 0, 1);

                if(!ShopData[value][shopType])
						GiveBizMoney(bizId, (BizData[bizId][bItem][slotId] * count) / 10),
						GiveMoney(playerid, -BizData[bizId][bItem][slotId] * count),
						BizData[bizId][bProducts] -= 5;

                else if(ShopData[value][shopType] == 2) 
                {
                    GiveMoney(playerid, -ShopData[value][shopCost][slotId]);
                        
                    if(!(bizId == -1))
                        GiveBizMoney(bizId, ShopData[value][shopCost][slotId] / 5),
                        BizData[bizId][bProducts] -= 5;
                }

                else DeleteItem(playerid, ShopData[value][shopType] == 1 ? 522 : 1819, ShopData[value][shopCost][slotId]);

                static const botMessage[][] = { "Спасибо за покупку, приходите еще.", "Спасибо за покупку. Всего вам наилучшего!", "Покупая в нашем магазине, 5 процентов уходит\nна благотворительный фонд штата.", "Хорошего вам дня" };

                SendBotMessage(playerid, (str_f("Кассир:\n{FFFFFF}%s", botMessage[random(sizeof(botMessage))])));
            }
		}
		
	   	case 9321:
		{
			if(!response) return 1;
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			switch listitem do
			{
					case 0:
					{
						BizData[OWNABLEBIZES][bExit][0] = 2585.81;
						BizData[OWNABLEBIZES][bExit][1] = 1437.58;
						BizData[OWNABLEBIZES][bExit][2] = 1800.97;
						BizData[OWNABLEBIZES][bInt] = 16;
						BizData[OWNABLEBIZES][bCost] = 2000000;
						BizData[OWNABLEBIZES][bState] = 2;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин 24/7");
					}
					case 1:
					{
						BizData[OWNABLEBIZES][bExit][0] = 1085.87;
						BizData[OWNABLEBIZES][bExit][1] = 1005.05;
						BizData[OWNABLEBIZES][bExit][2] = 1601;
						BizData[OWNABLEBIZES][bInt] = 9;
						BizData[OWNABLEBIZES][bCost] = 3750000;
						BizData[OWNABLEBIZES][bState] = 7;
						SetString(BizData[OWNABLEBIZES][bName],"Закусочная");
					}
					case 2:
					{
						BizData[OWNABLEBIZES][bExit][0] = 671.702;
						BizData[OWNABLEBIZES][bExit][1] = -578.987;
						BizData[OWNABLEBIZES][bExit][2] = 1700.74;
						BizData[OWNABLEBIZES][bInt] = 3;
						BizData[OWNABLEBIZES][bCost] = 3000000;
						BizData[OWNABLEBIZES][bState] = 6;
						SetString(BizData[OWNABLEBIZES][bName],"АЗС/Магазин механики");
					}
					case 3:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 5250000;
						BizData[OWNABLEBIZES][bState] = 8;
						SetString(BizData[OWNABLEBIZES][bName],"Аренда транспорта");
					}
					case 4:
					{
						BizData[OWNABLEBIZES][bExit][0] = -2636.7;
						BizData[OWNABLEBIZES][bExit][1] = 1403.1;
						BizData[OWNABLEBIZES][bExit][2] = 906.5;
						BizData[OWNABLEBIZES][bInt] = 17;
						BizData[OWNABLEBIZES][bCost] = 3750000;
						BizData[OWNABLEBIZES][bState] = 1;
						SetString(BizData[OWNABLEBIZES][bName],"Бар");
					}
					case 5:
					{
						BizData[OWNABLEBIZES][bExit][0] = 285.4;
						BizData[OWNABLEBIZES][bExit][1] = -41.228;
						BizData[OWNABLEBIZES][bExit][2] = 1001.52;
						BizData[OWNABLEBIZES][bInt] = 1;
						BizData[OWNABLEBIZES][bCost] = 4250000;
						BizData[OWNABLEBIZES][bState] = 0;
						SetString(BizData[OWNABLEBIZES][bName],"Амуниция");
					}
					case 6:
					{
						BizData[OWNABLEBIZES][bExit][0] = 207.011;
						BizData[OWNABLEBIZES][bExit][1] = -140.115;
						BizData[OWNABLEBIZES][bExit][2] = 1003.51;
						BizData[OWNABLEBIZES][bInt] = 3;
						BizData[OWNABLEBIZES][bCost] = 1750000;
						BizData[OWNABLEBIZES][bState] = 3;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин одежды");
					}
					case 7:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 8000000;
						BizData[OWNABLEBIZES][bState] = 4;
						SetString(BizData[OWNABLEBIZES][bName],"Предприятие");
					}
					case 8:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 5500000;
						BizData[OWNABLEBIZES][bState] = 5;
						SetString(BizData[OWNABLEBIZES][bName],"Тюнинг салон");

					}
					case 9:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 15000000;
						BizData[OWNABLEBIZES][bState] = 10;
						SetString(BizData[OWNABLEBIZES][bName],"Автобазар");
					}
					case 10:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 1500000;
						BizData[OWNABLEBIZES][bState] = 13;
						SetString(BizData[OWNABLEBIZES][bName],"Ларёк с уличной едой");
					}
					case 11:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 1500000;
						BizData[OWNABLEBIZES][bState] = 12;
						SetString(BizData[OWNABLEBIZES][bName],"Шахта");
					}
			        case 12:
     				{
			            BizData[OWNABLEBIZES][bInt] = 0;
			            BizData[OWNABLEBIZES][bCost] = 10000000;
			            BizData[OWNABLEBIZES][bState] = 19;
			            BizData[OWNABLEBIZES][bPickup] = 1;
			            SetString(BizData[OWNABLEBIZES][bName],"Автосалон эконом класса");
			        }
			        case 13:
     				{
			            BizData[OWNABLEBIZES][bInt] = 0;
			            BizData[OWNABLEBIZES][bCost] = 100000000;
			            BizData[OWNABLEBIZES][bState] = 20;
			            BizData[OWNABLEBIZES][bPickup] = 1;
			            SetString(BizData[OWNABLEBIZES][bName],"Автосалон среднего класса");
			        }
			        case 14:
     				{
			            BizData[OWNABLEBIZES][bInt] = 0;
			            BizData[OWNABLEBIZES][bCost] = 100000000;
			            BizData[OWNABLEBIZES][bState] = 21;
			            BizData[OWNABLEBIZES][bPickup] = 1;
			            SetString(BizData[OWNABLEBIZES][bName],"Автосалон элитного класса");
			        }
			        case 15:
					{
						BizData[OWNABLEBIZES][bExit][0] = 1086.9647;
						BizData[OWNABLEBIZES][bExit][1] = 1521.3962;
						BizData[OWNABLEBIZES][bExit][2] = 1716.0868;
						BizData[OWNABLEBIZES][bInt] = 16;
						BizData[OWNABLEBIZES][bCost] = 2000000000;
						BizData[OWNABLEBIZES][bState] = 22;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин тюнинга LS");
					}
					case 16:
					{
      					BizData[OWNABLEBIZES][bExit][0] = 1086.9647;
						BizData[OWNABLEBIZES][bExit][1] = 1521.3962;
						BizData[OWNABLEBIZES][bExit][2] = 1716.0868;
						BizData[OWNABLEBIZES][bInt] = 17;
						BizData[OWNABLEBIZES][bCost] = 2000000000;
						BizData[OWNABLEBIZES][bState] = 22;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин тюнинга LV");
					}
					case 17:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 20000000;
						BizData[OWNABLEBIZES][bState] = 23;
						BizData[OWNABLEBIZES][bMapIcon] = 56;
						BizData[OWNABLEBIZES][bUpgrade][0] = 
						BizData[OWNABLEBIZES][bPickup] = 1;
						SetString(BizData[OWNABLEBIZES][bName], "Нефтевышка");
					}
					case 18:
					{
						BizData[OWNABLEBIZES][bInt] = 7;
						BizData[OWNABLEBIZES][bCost] = 30000000;
						BizData[OWNABLEBIZES][bState] = 24;
						BizData[OWNABLEBIZES][bMapIcon] = 46;
						BizData[OWNABLEBIZES][bExit][0] = 1548.1310;
						BizData[OWNABLEBIZES][bExit][1] = 1645.8317;
						BizData[OWNABLEBIZES][bExit][2] = 10.8203;
						SetString(BizData[OWNABLEBIZES][bName],"Мастерская одежды");
					}
					case 19:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 16000000;
						BizData[OWNABLEBIZES][bState] = 4;
						SetString(BizData[OWNABLEBIZES][bName],"Отель");
					}
					case 20:
					{
						BizData[OWNABLEBIZES][bInt] = 3;
						BizData[OWNABLEBIZES][bCost] = 45000000;
						BizData[OWNABLEBIZES][bState] = 26;
						BizData[OWNABLEBIZES][bExit][0] = -1064.6100;
						BizData[OWNABLEBIZES][bExit][1] = -1208.4700;
						BizData[OWNABLEBIZES][bExit][2] = 1729.8284;
						SetString(BizData[OWNABLEBIZES][bName],"Сельскохозяйственный магазин");
					}
					case 21:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 35000000;
						BizData[OWNABLEBIZES][bState] = 27;
						SetString(BizData[OWNABLEBIZES][bName],"Аренда сельхоз техники");
					}
					case 22:
					{
						BizData[OWNABLEBIZES][bInt] = 3;
						BizData[OWNABLEBIZES][bCost] = 18000000;
						BizData[OWNABLEBIZES][bState] = 9;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин аксессуаров");
					}
					case 23:
					{
						BizData[OWNABLEBIZES][bInt] = 12;
						BizData[OWNABLEBIZES][bCost] = 30000000;
						BizData[OWNABLEBIZES][bState] = 28;
						BizData[OWNABLEBIZES][bExit][0] = 1393.5865;
						BizData[OWNABLEBIZES][bExit][1] = -21.8601;
						BizData[OWNABLEBIZES][bExit][2] = 1000.9183;
						SetString(BizData[OWNABLEBIZES][bName],"Магазин видеокарт");
					}

					case 24:
					{
						BizData[OWNABLEBIZES][bInt] = 30;
						BizData[OWNABLEBIZES][bCost] = 50000000;
						BizData[OWNABLEBIZES][bState] = 29;
						BizData[OWNABLEBIZES][bExit][0] = 1529.6322;
						BizData[OWNABLEBIZES][bExit][1] = 1561.9554;
						BizData[OWNABLEBIZES][bExit][2] = 10.9252;

						SetString(BizData[OWNABLEBIZES][bName], "Секнод хенд");
					}
					
					case 25:
					{
						BizData[OWNABLEBIZES][bInt] = 0;
						BizData[OWNABLEBIZES][bCost] = 20000000;
						BizData[OWNABLEBIZES][bState] = 30;
						SetString(BizData[OWNABLEBIZES][bName], "Авто Сервис");
					}
			}
			BizData[OWNABLEBIZES][bID] = OWNABLEBIZES;
			SetString(BizData[OWNABLEBIZES][bOwner],"The State");
			SetString(BizData[OWNABLEBIZES][bZam], "none");
			BizData[OWNABLEBIZES][bEnter][0] = X;
			BizData[OWNABLEBIZES][bEnter][1] = Y;
			BizData[OWNABLEBIZES][bEnter][2] = Z;
			BizData[OWNABLEBIZES][bProducts] = 100000;
   			f(global_str, 600, "\
		    INSERT INTO `businesses` \
		    (`ID`, `State`, `Name`, `Owner`, `Zam`, `Enter`, `Exit`, \
		    `Cost`, `Interior`, `Products`, `Upgrade`) \
		    VALUES ('%d', '%d', '%s', 'The State', 'none', '%s', '%s', '%d', '%d',\
		    '%d', '%s')",
		    OWNABLEBIZES,
		    BizData[OWNABLEBIZES][bState],
		    BizData[OWNABLEBIZES][bName],
		    Float_PackMassive(0, BizData[OWNABLEBIZES][bEnter]),
			Float_PackMassive(1, BizData[OWNABLEBIZES][bExit]),
			BizData[OWNABLEBIZES][bCost],
			BizData[OWNABLEBIZES][bInt],
			BizData[OWNABLEBIZES][bProducts],
			Int_PackMassive(2, BizData[OWNABLEBIZES][bUpgrade]));
			mysql_tquery(mysql, global_str);
			CreateBiz(OWNABLEBIZES);
			f(global_str, 144, "Вы создали бизнес №%d (Тип: %s)",OWNABLEBIZES, BizData[OWNABLEBIZES][bName]);
			SCM(playerid, -1, global_str);
			OWNABLEBIZES++;
		}
	    case 7238:
		{
			if(response)
			{
				if(listitem > 31) return false;
				new house = ShowHouse[playerid][listitem];
				switch Int_GetPlayerData(playerid, "typeHouseDialog") do
				{
					case 0:
					{
						PI[playerid][pDCTime]=1;
						f(global_str, 400,"» {BE2D2D}[Информация] {FFFFFF}Вы установили дом [{FFD700}%d{ffffff}] местом спавна!", house);
						SCM(playerid,-1,global_str);
						PI[playerid][pHouseKey] = house;
						UpdatePlayerDataInt(playerid, "HouseKey", PI[playerid][pHouseKey]);
						callcmd::setspawn(playerid);
					}
					
				    case 1:
				    {
						if(!HouseInfo[house][hNalog]) return SendBotMessage(playerid,"На этот дом налога не выставлено.");
						if(PI[playerid][pMoney] < HouseInfo[house][hNalog])return SendBotMessage(playerid,"Извините, но у вас нет нужной суммы денег!");
						f(global_str, 150, "оплата коммуналки на дом idh:%d", house);
						GiveMoney(playerid, ImprovementsData[playerid][imFreeloader] ? -HouseInfo[house][hNalog]/2:-HouseInfo[house][hNalog], global_str);
						OrgInfo[GLS[13]][oBank] += HouseInfo[house][hNalog];
						SaveOrg(GLS[13]);
						HouseInfo[house][hNalog] = 0;
						SaveHouse(house);
						SCM(playerid,COLOR_GREEN, !"Вы успешно погасили неоплаченые счета за коммунальные услуги");
						if(!!ImprovementsData[playerid][imFreeloader]) SCM(playerid,COLOR_GREEN, !"Обратите внимание что имея улучшение халявщик, вы будете платить в 2 раза меньше!");
   						SendBankBot(playerid);
				    }
					
				    case 2:
				    {
	                    if(PI[playerid][pMoney] < 500) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег!");
	                  	GiveMoney(playerid, -500);
	                  	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Ваш дом отмечен на миникарте!\n\n", !"Принять", !"");
	                    EnableGPSForPlayer(playerid, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]);
				    }
					
					case 3:
					{
						if(!GetString(HouseInfo[house][hOwner], PN(playerid)))
							return false;
						
						foreach(Player, i)
						{
							if(!(FP_Data[playerid][F_FAMILY_ID] == FP_Data[i][F_FAMILY_ID])) continue;
							FP_Data[i][F_FAMILY_SPAWN_DATA] = house;
							FP_Data[i][F_FAMILY_SPAWN_TYPE] = 1;
						}
						
						UpdateFamilyData(FP_Data[playerid][F_FAMILY_ID], "`spawn_type` = 1, `spawn_data` = %d", house);
						
						return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили дом №%d местом спавна вашей семьи.", house);
					}
				}
				DeletePVar(playerid, "typeHouseDialog");
			}
		}
	    case 2108:
	    {
	        if(response)
	        {
				if(!strlen(inputtextsave)) return 0;
				foreach(Player,i)
				{
					if(IsPlayerInRangeOfPoint(i,30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
				    {
					    StopAudioStreamForPlayerFix(i);
						PlayAudioStreamForPlayerFix(i, inputtextsave, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2], 30.0, 1);
					}
				}
			}
		}
		case 23045:
        { 
 			if(!response || !Int_GetPlayerData(playerid, "captchaOpen")) return DestroyCaptcha_BOT(playerid);
			
			new captcha[5], type, ms = GetTickCount() - Int_GetPlayerData(playerid, "lsd");
			
			GetPVarString(playerid, "CaptchaAPIstr", global_str, sizeof global_str);
			sscanf(global_str, "p<,>ds[6]", type, captcha);
			
			if(!strlen(inputtextsave) || !GetString(inputtextsave, captcha)) {
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Ответ неверный!");
				return DestroyCaptcha_BOT(playerid);
			}
			
			switch type do
			{
			    case 1:
				{
			        new house = InfoHouse[playerid];
					if(house != Int_GetPlayerData(playerid, "CaptchAntiDeBug")) return DestroyCaptcha_BOT(playerid);
			        if(!strcmp(HouseInfo[house][hOwner], "The State"))
			        {
				        HouseEntered[playerid] = house;
	                    HouseInfo[house][hNoOwner] = 0;
				     	InfoHouse[playerid] = -1;
				     	PI[playerid][pDCTime] = 1;
				     	SCM(playerid, -1, !">> {FF6347} Местом спавна автоматически назначен ваш дом. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
				     	if(HouseInfo[house][hType] != 1)
				     		{ if(GetCount(playerid, 551)) GiveMoney(playerid, -HouseInfo[house][hCost]/2, (str_f("покупка дома ID: %d за %.2f ms (%s | %s)", house, float(ms)/1000,captcha,inputtextsave))), DeleteItem(playerid, 551, 1);
				     			else GiveMoney(playerid, -HouseInfo[house][hCost], (str_f("покупка дома ID: %d за %.2f ms (%s | %s)", house, float(ms)/1000,captcha,inputtextsave))); }

						else PI[playerid][pVirMoney] -= HouseInfo[house][hCost],UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
				     	PI[playerid][pHouseKey] = house;
						foreach(new i: Player)
						{
							if(HouseNalog[i] == house)
							{
							    callcmd::stopjob(i, "");
								SCM(i, COLOR_RED, !"[Информация] {FFFFFF}Дом над которым вы работаете был выкуплен. Начните работу заново.");
							}
						}
				     	SetPlayerInterior(playerid, HouseInfo[house][hInt]);
					    SetPlayerVirtualWorld(playerid, house + 50);
					    UpdatePlayerPos(playerid, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]);
					    SetString(HouseInfo[house][hOwner], PN(playerid));
					    UpdateHouse(house);
				     	
						SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Теперь этот дом ваш!");
				     	
						PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
						
						f(global_str, 300,"%s [%d] купил дом ID: %d по гос. цене за %.2f ms! Капча: (%s | %s)",
						PN(playerid),playerid, house, float(ms)/1000,captcha,inputtextsave);
						SendAdminsMessage(COLOR_OLDRED, global_str);
			        }
			        else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот дом уже куплен!");
  				}
				
			    case 2:
				{
                    new biz = InfoBiz[playerid];
					if(biz != Int_GetPlayerData(playerid, "CaptchAntiDeBug")) return DestroyCaptcha_BOT(playerid);
                    if(!strcmp(BizData[biz][bOwner], "The State"))
                    {
			     	    switch BizData[biz][bCostType] do
			     	    {
			     	    	case 1: UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney] -= BizData[biz][bCost]);
			     	    	default: GiveMoney(playerid, -BizData[biz][bCost], (str_f("покупка бизнеса ID: %d за %.2f ms (%s | %s)", biz, float(ms)/1000,captcha,inputtextsave)));
			     	    }

		     	        BizData[biz][bLevel] = 0;
				        SetString(BizData[biz][bOwner], PN(playerid));
			     	    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Теперь этот бизнес ваш!");
						f(global_str, 300,"%s [%d] купил бизнес ID: %d по гос. цене за %.2f ms! Капча: (%s | %s)",
						PN(playerid),playerid, biz, float(ms)/1000,captcha,inputtextsave);
						SendAdminsMessage(COLOR_OLDRED, global_str);
						PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			     	    UpdateBusinessText(biz, 1);
		     	    }
		     	    else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот бизнес уже кем то куплен");
			    }
			    case 3:
			    {
			        f(global_str, 144, "Информация: {FFFFFF}Вы успешно ввели капчу за %d мс!", ms);
			        SCM(playerid, COLOR_YELLOW, global_str);
				}
			}
			
			if(PI[playerid][pLevel] > 7)
				SQL("INSERT INTO captchadata (`captcha`, `type`, `MS`, `ownerId`, `ownerName`) VALUES ('%s', '%d', '%d', '%d', '%s') ", captcha, type, ms, PI[playerid][pID], PlayerName[playerid]);

			return DestroyCaptcha_BOT(playerid);
        }

       	case 3337:
	    {
	        if(response)
	        {
				new money, players;
				sscanf(inputtextsave,"p<,>dd",money,players);
				if(RazdStatus != 0) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Раздача денег уже идёт!");
				if(money < 0 || money > 2100000000 || money > PI[playerid][pMoney]) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Неверное значение денег.");
				if(money < money/players) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Введите сумму, которое можно разделить на нужное кол-во игроков.");
				if(players > 100 || players < 1) return SendBotMessage(playerid, "Вы не можете сделать раздачу для игроков меньше чем 10 или больше 100!");
				RazdStatus = 1;
				RazdPlayers = players;
				RazdMoney = money/players;
				SetString(RazdName,PN(playerid));
				GiveMoney(playerid, -money);
				f(global_str,256,"\
				Раздача средств для малоимущих\n\
				\tХватит ещё на {9ACD32}%d{FFFFFF} игроков\n\
				\tКаждому по {9ACD32}%d${FFFFFF}\n\
				Организатор: {42B02C}%s",RazdPlayers,RazdMoney,RazdName);
				RazdText = CreateDynamic3DTextLabel(global_str,-1,2107.1008,789.9330,1027.1191+1.2,3.0);
				SCM(playerid, 0xFF9966FF, "[Подсказка]{FFFFFF} Вы успешно начали раздачу средств для малоимущих!");
				SCM(playerid, -1, "Вы можете сделать рекламу раздачи, чтобы привлечь больше игроков: '/ad'");
	        }
	    }
		case 3763:
		{
			if(!response) return 1;
			new cena;
			switch(listitem)
			{
				case 0: cena = 0;
				case 1: cena = 150;
				case 2: cena = 200;
				case 3: cena = 300;
				case 4: cena = 400;
				case 5: cena = 600;
				case 6: cena = 700;
				case 7: cena = 900;
				case 8: cena = 1100;
				case 9: cena = 1200;
				case 10: cena = 1500;
				case 11: cena = 1600;
				case 12: cena = 1800;
			}
			if(cena > PI[playerid][pWalkingInfo][1]) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас не хватает очков опыта для данного стиля.");
			PI[playerid][pWalkingInfo][0] = listitem;
			UpdatePlayerDataStr(playerid, "WalkingInfo", Int_PackMassive(0, PI[playerid][pWalkingInfo]));
		}

		case 15016:
		{
			if(!response)
				return false;

			if(!strlen(inputtextsave) or IsAIP(inputtextsave))
				return ShowUpdateSettings(playerid);
			
			else if(10 > strlen(inputtextsave) < 80)
				return SCM(playerid, COLOR_OLDRED, !"Используйте не меньше 10 и не больше 80 символов!");

			else if(srlenchar(inputtextsave, '/') >= 5)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Нельзя делать более 5 переносов строки.");
			
			for(new i; i < strlen(inputtextsave); i++)
			{
				if(inputtextsave[i] == '{' || inputtextsave[i] == '}') inputtextsave[i] = ' ';
				if(inputtextsave[i] == '/') inputtextsave[i] = '\n';
			}
			
			SetString(PI[playerid][pOpisanie], inputtextsave);
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы создали описание персонажа:");
			SCM(playerid, COLOR_GREY, PI[playerid][pOpisanie]);
			f(global_str, 400, "{FFFFFF}Вы создали описание для вашего персонажа!\n\n{AFAFAF}%s",PI[playerid][pOpisanie]);
			SPD(playerid, 0, 0, "Описание персонажа",global_str,"Закрыть","");
			UpdatePlayerDataStr(playerid, "Opisanie", inputtextsave);
			
			return CreateOpisanie(playerid);
		}

		case 15017:
		{
			if(!response) return 0;
			DeleteOpisanie(playerid);
			SetString(PI[playerid][pOpisanie],"");
			UpdatePlayerDataStr(playerid, "Opisanie", PI[playerid][pOpisanie]);
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы удалили описание своего персонажа");
		}

		case 15276:
		{
			if(!response) return false;

			switch listitem do
			{
				case 0: return BTC_Dialog_Sell(playerid);
				case 1: return BTC_Dialog_Buy(playerid);
			}
		}
		case 15277:
		{
			if(!response) 
				return SPD(playerid, 15276, DIALOG_STYLE_LIST, !"Выберите операцию", !"Продать BTC\nКупить BTC", !"Выбрать", !"Закрыть");

			new count = strval(inputtextsave);

			if(!(1 <= count <= 1000)) 
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество должно быть от 1 до 1000 BTC."), BTC_Dialog_Sell(playerid);

			else if(GetCount(playerid, 1811) < count) 
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет столько BTC."), BTC_Dialog_Sell(playerid);

			bankbitcoin += count;
			GiveMoney(playerid, count*bankbuybitcoin, "Продажа BTC");
			DeleteItem(playerid, 1811, count);

			return BitCoin_Update();
		}
		case 15279:
		{
			if(!response) 
				return SPD(playerid, 15276, DIALOG_STYLE_LIST, !"Выберите операцию", !"Продать BTC\nКупить BTC", !"Выбрать", !"Закрыть");

			new count = strval(inputtextsave);

			if(!(1 <= count <= 1000)) 
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество должно быть от 1 до 1000 BTC."), BTC_Dialog_Buy(playerid);

			else if(bankbitcoin < count) 
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У штата нет столько BTC."), BTC_Dialog_Buy(playerid);

			else if(banksellbitcoin*count > PI[playerid][pMoney]) 
				return false;

			bankbitcoin -= count;
			AddItem(playerid, 1811, count);
			GiveMoney(playerid, -count * banksellbitcoin, "Покупка BTC");

			return BitCoin_Update();
		}

		case 3765:
		{
			if(!response) return DeletePVar(playerid, "eurolist");
			if(Int_GetPlayerData(playerid, "eurolist"))
			{
				DeletePVar(playerid, "eurolist");
				if(GLS[69] > 2100000000) return 1;
				if(strval(inputtextsave) < 0 || strval(inputtextsave) > 20000) return true;
				if(strval(inputtextsave) > GetCount(playerid, 1080)) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У вас недостаточно EURO");
				GiveMoney(playerid,strval(inputtextsave)*GLS[69]);
				GLS[70] += strval(inputtextsave);
				DeleteItem(playerid, 1080, strval(inputtextsave));
			}
			else
			{
				DeletePVar(playerid, "eurolist");
				if(GLS[69] < 0 || GLS[69] > 80000) return true;
				
				if(!(1 <= strval(inputtextsave) <= 20000)) return false;
				if(strval(inputtextsave)*GLS[69]*10 > PI[playerid][pMoney]) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У вас недостаточно денег.");
				if(strval(inputtextsave) > GLS[70]) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У штата недостаточно EURO");
				GiveMoney(playerid,-strval(inputtextsave)*GLS[69]*10,"покупка евро в банке");
				GLS[70] -= strval(inputtextsave);
				AddItem(playerid, 1080, strval(inputtextsave));
			}
		}
		case 3766:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: BackToBolka(playerid);
					case 1:
					{
						if(PI[playerid][pMoney] < 40000) return BackToBolka(playerid);
						new Float:X, Float:Y, Float:Z, kolvo = 1;
						GetPlayerPos(playerid, X,Y,Z);
						Streamer_Update(playerid);
						SCM(playerid,0xf55427FF,"Ожидайте врачей. (( если их не будет в течении 5 минут, вы автоматически окажетесь в больнице ))");
						DeathText[playerid] = CreateDynamic3DTextLabel("(( ТЯЖЕЛО РАНЕН ))\n/cure", 0xf55427FF, X,Y, Z+0.2, 5.0);
      					pTemp[playerid][tReturnDeath] = 300;
						DeathTimer[playerid] = CallTimeOutFunction("DeathRP", 1000, true, "dd", playerid, kolvo);
					}
				}
			}
			else BackToBolka(playerid);
		}
		case 3767:
		{
			if(!response) return 1;
			if(PI[playerid][pMoney] < 100000) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас не хватает денег на занятие.");
			if(Int_GetPlayerData(playerid, "TimerDance")) return 0;
			SetPVarInt(playerid, "TimerDance", 180);
			for(new i; i < 4; i++) DanceKey[playerid][i] = random(3);
			CheckDanceTimer[playerid] = CallTimeOutFunction("CheckDance",1000, true, "d",playerid);
			DanceTimer[playerid] = CallTimeOutFunction("SchoolDance",100,true,"d",playerid);
			GiveMoney(playerid, -100000);
			GiveBizMoney(BizEntered[playerid], 100000);
			switch(random(3))
			{
				case 0: UpdatePlayerPos(playerid, 1762.2983,-304.2903,1654.5376);
				case 1: UpdatePlayerPos(playerid, 1756.8829,-307.7861,1654.5376);
				case 2: UpdatePlayerPos(playerid, 1751.3748,-307.9007,1654.5376);
			}
			SetPlayerFacingAngle(playerid, 180.00);
			SPD(playerid, 0, 0, "Тренировка", "{FFFFFF}Нажимайте соответствующие стрелочки на клавиатуре в то время когда они проходят через круг в центре экрана.\n\n{AFAFAF}Длительность тренировки: {9ACD32}3{AFAFAF}минуты.\nЧтобы завершить тренировку раньше времени, нажмите повторно [{42B02C}пробел/шифт{AFAFAF}] после начала тренировки.", "Закрыть", "");
			TogglePlayerControllable(playerid, false);
		}
		case 3768:
		{
			if(!response) return 1;
			ResetDanceForPlayer(playerid);
		}
		
		case 3771:
		{
			if(!response) return 1;
			if(!craftopen{playerid}) return 1;
			if(1 > strval(inputtextsave) ||  strval(inputtextsave) > 10) return 1;
			SetPVarInt(playerid, "CraftScore", strval(inputtextsave));
			UpdateCraftCounts(playerid);
			SetInfoCraftPlayer(playerid);
		}
		case 3772:
		{
			if(!response) return 1;
			new Float:pos[3],world,interior;
			switch listitem do
			{
				case 0: pos[0] = 1527.5154, pos[1] = 1335.3561, pos[2] = 10.9787, world = 1, interior = 220;
				case 1: pos[0] = 1489.7007,pos[1] = -1259.8154,pos[2] = 113.8044, world = 2, interior = 0;
				case 2: pos[0] = 1999.9302, pos[1] = 1121.5923, pos[2] = 1038.6824, world = 2, interior = 2;
			}
			SetPlayerVirtualWorld(playerid, world);
			SetPlayerInterior(playerid, interior);
			UpdatePlayerPos(playerid, pos[0],pos[1],pos[2]);
		}
		case 8249:
		{
			if(!response) return false;

			new slot = PickInvent[playerid], count = strval(inputtextsave);

			if(!(1 <= count <= Inventory[playerid][1][slot])) 
				return SPD(playerid, 8249, DIALOG_STYLE_INPUT, !"Торговля", !"{FFFFFF}Введите количество, которое хотите передать", !"Выбрать", !"Отмена");

			for(new idx; idx < 10; idx++)
			{
				if(TradeInfo[playerid][tradeItem][idx] == -1)
				{
					TradeInfo[playerid][tradeItem][idx] = slot;
					TradeInfo[playerid][tradeItemCount][idx] = count;
					InventSlotUse[playerid][slot] = true;
					InventSlotUpdate(playerid, PickInventSlot[playerid], slot);
					return TradeSlotUpdate(playerid, idx, Inventory[playerid][0][slot], slot);
				}
			}
		}
		
		case 8257:
		{
			if(!response) return false;
		
			spdList(playerid, 0, listitem);
			
			switch listitem do
			{
				case 0:
					return SPDF(playerid, 8253, DIALOG_STYLE_INPUT, !"Торговля", "{FFFFFF}Введите количество, которое хотите передать\n{73B461}Доступно: $%d", !"Выбрать", !"Назад", PI[playerid][pMoney]);
				
				case 1: 
					return SPDF(playerid, 8253, DIALOG_STYLE_INPUT, !"Торговля", "{FFFFFF}Введите количество, которое хотите передать\n{73B461}Доступно: %d ЕВРО", !"Выбрать", !"Назад", GetCount(playerid, 1080));
				
				case 2: 
					return SPDF(playerid, 8253, DIALOG_STYLE_INPUT, !"Торговля", "{FFFFFF}Введите количество, которое хотите передать\n{73B461}Доступно: %d BTC", !"Выбрать", !"Назад", GetCount(playerid, 1811));
			}
		}

		case 8253:
		{
			if(!response or !tradeopen{playerid}) 
				return false;

			new id = gpdList(playerid, 0);
			
			new count = strval(inputtext), target = GetDataTrade(playerid, tradePlayer);

			if ( ( !id && !(1 <= count <= PI[playerid][pMoney]) or count > 150000000 ) or (id == 1 && !(1 <= count <= GetCount(playerid, 1080) ) ) or (id == 2 && !(1 <= count <= GetCount(playerid, 1811) ) ) )
				return SPDF(playerid, 8257, DIALOG_STYLE_TABLIST_HEADERS, !"Торговля", "{FFFFFF}Валюта\t{73B461}Баланс\t{cccccc}Комиссия (с варном)\nВвести сумму в валюте $$$$\t{73B461}$%d\t{cccccc}6% (10%)\nВвести сумму в валюте ЕВРО\t{73B461}%d ЕВРО\t{cccccc}3% (5%)\nВвести сумму в валюте BTC\t{73B461}%d BTC\t{cccccc}0% (0%)", !"Выбрать", !"Отмена", PI[playerid][pMoney], GetCount(playerid, 1080), GetCount(playerid, 1811));
			
			SetDataTrade(playerid, tradeSendId, id);
			SetDataTrade(playerid, tradeSEND, count);

			f(global_str, sizeof(global_str), "%s%s", id == 0 ? "$" : "", separationInt(count));

			for(new i, textdrawId[] = {6, 13, 7, 14}; i < 4; i++)
			{
				PlayerTextDrawColor(i % 2 ? target : playerid, TradeTD[i % 2 ? target : playerid][textdrawId[i]], id == 0 ? 0x67B355FF : 0xB3AB55FF);

				if(i < 2)
					PlayerTextDrawSetString(i % 2 ? target : playerid, TradeTD[i % 2 ? target : playerid][textdrawId[i]], id == 0 ? !"_" : id == 1 ? !"EURO" : !"BTC");

				if(i > 2)
					PlayerTextDrawSetString(i % 2 ? target : playerid, TradeTD[i % 2 ? target : playerid][textdrawId[i]], global_str);

				ShowPlayerTD(i % 2 ? target : playerid, TradeTD[i % 2 ? target : playerid][textdrawId[i]]);
			}
			
			return true;
		}
		
        case 2393:
		{
			if(response)
			{
				if(!strval(inputtextsave)) return SPD(playerid,2393,1,"Введите цвет","{FFFFFF}Введите цвет 1 и цвет 2 через запятую\n{9ACD32}- Пример: {0AD6FF}132,132","Далее", !"Отмена");
				new color_1, color_2;
				sscanf(inputtextsave,"p<,>dd",color_1,color_2);
				SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Подойдите к машине и переодически жмите левую клавишу мышки , для того чтобы ее покрасить!");
				SCMF(playerid, COLOR_GOLD, "[Информация] {FFFFFF}Узнать цвета можно на форуме %s", Setting_Server[4]);
				_GiveGun(playerid, 41, 300);
				SetPVarInt(playerid,"balon",color_1);
				SetPVarInt(playerid,"balon1",color_2);
				DeleteItem(playerid, 7332, 1);
			}
		}
		case 9870:
		{
			static Name[MAX_PLAYER_NAME]; 
			Name[0] = EOS;
			GetPVarString(playerid, "AdmIDPM", Name, sizeof Name);
			if(GetPlayerID(Name) == INVALID_PLAYER_ID) return 0;
			f (global_str, 150, "[PM] Игрок %s[%d] прочитал ваш ответ и закрыл диалог.", PN(playerid), playerid);
			SCM(GetPlayerID(Name), COLOR_LIGHTBLUE, global_str);
			DeletePVar(playerid, "AdmIDPM");
		}
		case 9898:
		{
			if(!response) return SendBotMessage(playerid, !"Ну как знаешь!");
			new count = strval(inputtext);
			//
			if(ValidIntNum(1, 10000, inputtextsave, count)) return false;
			
			if(count*50000 > PI[playerid][pMoney]) return false;
			//
			GiveMoney(playerid, -count*50000);
			GiveDonate(playerid, count);
			f(global_str, 100, "{FFFFFF}Вы успешно обменяли {D5E93D}%d{FFFFFF}$ на {D5E93D}%d{FFFFFF} AZ Coins.", count*50000, count); 
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "", global_str, "Понял", "");
			SCM(playerid, -1, global_str);
		}
		
		case 9999:
	    {
	        if(response)
			{
			    switch(listitem)
			    {
			        case 0: SPD(playerid, 10000, DIALOG_STYLE_INPUT, "Ввод", "{FFFFFF}Введите количество денег, которые хотите положить", !"Принять", !"Отмена");
			        case 1: SPD(playerid, 10001, DIALOG_STYLE_INPUT, "Ввод", "{FFFFFF}Введите количество денег, которые хотите снять", !"Принять", !"Отмена");
				}
			}
		}

		case 9929:
		{
			if(!response)
				return false;

			switch listitem do
			{
				case 0: global_str = "SELECT * FROM captchadata WHERE data >= DATE_SUB(NOW(), INTERVAL 1 HOUR) ORDER BY MS LIMIT 30;";
				case 1: global_str = "SELECT * FROM captchadata WHERE data >= DATE_SUB(NOW(), INTERVAL 1 DAY) ORDER BY MS LIMIT 30;";
				case 2: global_str = "SELECT * FROM captchadata WHERE data >= DATE_SUB(NOW(), INTERVAL 7 DAY) ORDER BY MS LIMIT 30;";
				case 4: format(global_str, 200, "SELECT * FROM captchadata WHERE ownerId = %d ORDER BY MS LIMIT 30;", PI[playerid][pID]);
				default: global_str = "SELECT * FROM captchadata WHERE data >= DATE_SUB(NOW(), INTERVAL 1 MONTH) ORDER BY MS LIMIT 50;";
			}
			mysql_tquery(mysql, global_str, "@captchatop", "d", playerid);
		}

		case 9925:
		{
			if(!response)
				return false;

			if(PI[playerid][pRoubles] < (ADonateInfo[listitem][adonatePrice] * XDonate))
				return SendDonateLink(playerid);

			switch(ADonateInfo[listitem][adonateItem_type])
			{
				case 0: AddItem(playerid, ADonateInfo[listitem][adonateItem], ADonateInfo[listitem][adonateItem_amount], 0, -1, ADonateInfo[listitem][adonateItem_enchant]);
				case 1:
				{
					global_str = "{FFFF00}Действие\t{FFFF00}Стоимость\n";

					for(new i, vip_info[] = { 250, 500 }; i < 2; i++)
						strcat(global_str, (str_f("\n{FFFF00}%d. {ffffff}Приобрести вип-статус %s\t{FFFF00}%i AZ-Рублей (%i руб.)", i + 1, VipNames[i + 7], vip_info[i] * XDonate, vip_info[i])));

					strcat(global_str, (str_f("\n \n{FF0000}НА САЙТЕ ДЕЙСВУЕТ X%i ПОПОЛНЕНИЕ СЧЕТА (1 руб. = %i AZ-RUB).", XDonate, 1 * XDonate)));
					return spdList(playerid, 0, 2), SPD(playerid, 9930, DIALOG_STYLE_TABLIST_HEADERS, "{BFBBBA}Покупка вип-статуса", global_str, "Купить", "Закрыть");
				}
				case 2: 
				{
					global_str = "{FFFF00}Действие\t{FFFF00}Стоимость\n";

					for(new i, admin_Info[] = { 150, 250, 350, 500, 700, 850, 1500 }; i < 7; i++)
						strcat(global_str, (str_f("\n{FFFF00}%d. {ffffff}Приобрести админку %i уровня\t{FFFF00}%i AZ-Рублей (%i руб.)", i + 1, i + 1, admin_Info[i] * XDonate, admin_Info[i])));

					strcat(global_str, (str_f("\n \n{FF0000}НА САЙТЕ ДЕЙСВУЕТ X%i ПОПОЛНЕНИЕ СЧЕТА (1 руб. = %i AZ-RUB).", XDonate, 1 * XDonate)));
					return spdList(playerid, 0, 1), SPD(playerid, 9930, DIALOG_STYLE_TABLIST_HEADERS, "{BFBBBA}Покупка админ-прав", global_str, "Купить", "Закрыть");
				}
				case 3: GiveDonate(playerid, ADonateInfo[listitem][adonateItem], "Обмен рублей на AZ /adonate");
				case 4:
				{
					switch(ADonateInfo[listitem][adonateItem_enchant])
					{
						case 0:
						{
							if(!PI[playerid][pMuteTime])
								return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас не имеется мута на аккаунте!");
								
							UpdatePlayerDataInt(playerid, !"MuteTime", PI[playerid][pMuteTime] = 0);
							SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сняли мут с аккаунта!");
							SAMF(COLOR_GREY, !"[A] Игрок %s[%d] досрочно снял мут через /adonate", PN(playerid), playerid);
						}
						case 1:
						{
							if(PI[playerid][pInvCell] >= 144)
								return SCM(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} У вас уже есть 4-ый лист.");

							UpdatePlayerDataInt(playerid, !"InvCell", PI[playerid][pInvCell] = 144);
							SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вы приобрели 4-ый лист инвентаря!");
						}
						case 4: AddItem(playerid, BodyGuardInfo[random(sizeof(BodyGuardInfo))][0], 1);
						case 5:
						{
							if(PI[playerid][pRainbowBuyed] >= 1)
								return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У вас уже есть радужный ник!");
					  
    				  		SQL("UPDATE `accounts` SET `RainbowBuyed` = '%i' WHERE `ID` = '%d'", PI[playerid][pRainbowBuyed] = 1, PI[playerid][pID]);
    				  		SCM(playerid, COLOR_GREEN, "{FFFF00}[Rainbow] Вы приобрели переливающийся никнейм. /rainbow");
						}
                        case 6:
                        {
                            global_str = "{FFFF00}Действие\t{FFFF00}Стоимость\n";

                            for(new i = 1; i < MAX_ORGS; i++)
                                strcat(global_str, (str_f("\n{FFFF00}%d. {ffffff}%s {%s}(%s)\t{FFFF00}%i AZ-Рублей (%i руб.)", i, OrgInfo[i][oName], !GetString(OrgInfo[i][oLeader], "Свободна") ? "ff6666" : "ffffff", OrgInfo[i][oLeader], 150 * XDonate, 150)));

                            strcat(global_str, (str_f("\n \n{FF0000}НА САЙТЕ ДЕЙСВУЕТ X%i ПОПОЛНЕНИЕ СЧЕТА (1 руб. = %i AZ-RUB).", XDonate, 1 * XDonate)));
                            return spdList(playerid, 0, 3), SPD(playerid, 9930, DIALOG_STYLE_TABLIST_HEADERS, "{BFBBBA}Покупка лидерки", global_str, "Купить", "Закрыть");
                        }
                        case 7: 
                        {
                            global_str = "{FFFF00}Действие\t{FFFF00}Стоимость\n", SQL_STRING = "";

                            static const setAcsName[][] = { "Красный сет", "Синий сет", "Зеленый сет", "Марвел сет" }, vehicleLimitedItem[] = {2312, 6011, 6012, 6013, 6014, 6015, 6016, 6426, 6427, 6428, 6429, 6446, 6986, 7296, 7474, 7684, 7810, 7814, 7815, 7816}, otherItems[] = {6516, 7758};

                            for(new i; i < (!ADonateInfo[listitem][adonateItem] ? sizeof(setAcsName) : ADonateInfo[listitem][adonateItem] == 1 ? sizeof(vehicleLimitedItem) : sizeof(otherItems)); i++)
                            {
                                if(!ADonateInfo[listitem][adonateItem]) f(global_str, sizeof(global_str), "%s{FFFF00}%d. {ffffff}%s\t{FFFF00}%i AZ-Рублей (%i руб.)\n", global_str, i + 1, setAcsName[i][0], 400 * XDonate, 400);
                                else f(global_str, sizeof(global_str), "%s{FFFF00}%d. {ffffff}%s\t{FFFF00}%i AZ-Рублей (%i руб.)\n", global_str, i + 1, ItemsInfo[ADonateInfo[listitem][adonateItem] == 1 ? vehicleLimitedItem[i] : otherItems[i]][itemName], (ADonateInfo[listitem][adonateItem] == 1 ? 150 : 300) * XDonate, (ADonateInfo[listitem][adonateItem] == 1 ? 150 : 300));
                            }

                            strcat(global_str, (str_f("\n \n{FF0000}НА САЙТЕ ДЕЙСВУЕТ X%i ПОПОЛНЕНИЕ СЧЕТА (1 руб. = %i AZ-RUB).", XDonate, 1 * XDonate)));
                            return spdList(playerid, 0, 4), spdList(playerid, 1, ADonateInfo[listitem][adonateItem]), SPD(playerid, 9930, DIALOG_STYLE_TABLIST_HEADERS, "{BFBBBA}Покупка уникальных вещей", global_str, "Купить", "Закрыть");
                        }
                    }
				}
			}

			UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] -= (ADonateInfo[listitem][adonatePrice] * XDonate));
			SCMF(playerid, COLOR_RED, "[Информация]{FFFFFF} У вас со счета списано: {cccccc}%d{FFFFFF} AZ-RUB. Спасибо за покупку.", ADonateInfo[listitem][adonatePrice] * XDonate);
		}

        case 9930:
        {
            if(!response)
				return callcmd::adonate(playerid);

            new adonateType = gpdList(playerid, 0), adonateCost[][] = { {150, 250, 350, 500, 700, 850, 1500}, {250, 500} };

            if(PI[playerid][pRoubles] < (adonateType == 3 ? 150 : adonateType == 4 ? (gpdList(playerid, 1) == 1 ? 300 : !gpdList(playerid, 1) ? 400 : 150) : adonateCost[adonateType == 4 ? 2 : adonateType - 1][listitem]) * XDonate)
				return SendDonateLink(playerid);

            else if(adonateType == 3 && !GetString(OrgInfo[listitem + 1][oLeader], "Свободна") or adonateType == 2 && PI[playerid][pVIP][0] > listitem+7 or adonateType == 1 && PI[playerid][pAdmin] == listitem + 1)
				return SCM(playerid, COLOR_OLDRED, adonateType == 2 ? !"[Ошибка]{ffffff} Ваш уровень вип-статуса выше того что вы хотите купить!" : adonateType == 1 ? !"[Ошибка]{ffffff} Ваш уровень админ-прав выше того что вы хотите купить!" : !"[Ошибка]{ffffff} Лидерка организации, что Вы хотите купить, занята другим игроком!");
        
            switch(adonateType)
            {
                case 1: 
                {
                    mysql_tquery(mysql, (str_f("SELECT * FROM admin WHERE name = '%s'", PN(playerid))), "SetAdmin", "dsdd", -1, PN(playerid), PI[playerid][pAdmin] = listitem+1);
                    SetString(AdminInfo[playerid][admTag], "Support"), SetString(AdminInfo[playerid][admTagColor], "00FFFF");
                    UpdatePlayerDataStr(playerid, "AdminTag", AdminInfo[playerid][admTag]), UpdatePlayerDataStr(playerid, "AdminTagColor", AdminInfo[playerid][admTagColor]);

                    SCMF(playerid, COLOR_VALIK, "[Информация]{ffffff} Поздравляем вас с приобретением {ffff00}'Админ-прав' (%i - LVL)", listitem+1);
                }

                case 2: UpdatePlayerDataInt(playerid, "VIP", PI[playerid][pVIP][0] = listitem + 7), SCMF(playerid, COLOR_YELLOW, "[Информация]{ffffff} Поздравляем вас с приобретением {ffff00}'Вип-статуса %s' (%i - LVL)", VipNames[listitem+7], listitem+7);
                
                case 3:
                {
                    PI[playerid][pMember][0] = PI[playerid][pMember][1] = listitem + 1, PI[playerid][pRank] = 10;
                    SetString(OrgInfo[listitem+1][oLeader], PN(playerid));
                    ResetSpawnInfo(playerid, listitem+1);
		            PlayerSpawn(playerid);
		            SaveOrg(listitem+1);
                    SaveAccount(playerid);
                    SCMF(playerid, COLOR_YELLOW, "[Информация]{ffffff} Поздравляем вас с приобретением {ffff00}'Лидерки организации %s'.", OrgInfo[listitem + 1][oName]);
                }

                case 4:
                {
                    static const 
                        setAcsName[][] = { "Красный сет", "Синий сет", "Зеленый сет", "Марвел сет" }, vehicleLimitedItem[] = {2312, 6011, 6012, 6013, 6014, 6015, 6016, 6426, 6427, 6428, 6429, 6446, 6986, 7296, 7474, 7684, 7810, 7814, 7815, 7816}, otherItems[] = {6516, 7758};

                    switch(gpdList(playerid, 1))
                    {
                        case 0:
                        {
                            static const setItem[][][] = {
                                {{5928, 5925, 4300, 6313, 5781, 3998, 6563, 6270}, 1}, 
                                {{5928, 5925, 4300, 6313, 5786, 4003, 6567, 6269}, 7}, 
                                {{5928, 5925, 4300, 6313, 5785, 4009, 6559, 6271}, 5}, 
                                {{4004, 5925, 4001, 6313, 5780, 4009, 6562, 6267}, 0}
                            };

                            for(new i; i < 8; i++)
                                AddItem(playerid, setItem[listitem][0][i], 1, setItem[listitem][1][0], 0, 13, 100);

                            SCMF(playerid, COLOR_YELLOW, "[Информация]{ffffff} Поздравляем вас с приобретением {ffff00}'Уникального сета +13 (%s)'!", setAcsName[listitem]);
                        }
                        default: AddItem(playerid, gpdList(playerid, 1) == 1 ? vehicleLimitedItem[listitem] : otherItems[listitem], 1), SCMF(playerid, COLOR_YELLOW, "[Информация]{ffffff} Поздравляем вас с приобретением {ffff00}'%s'", ItemsInfo[gpdList(playerid, 1) == 1 ? vehicleLimitedItem[listitem] : otherItems[listitem]][itemName]);
                    }
                }
            }

            return GiveRoubles(playerid, -(adonateType == 3 ? 150 : adonateType == 4 ? (gpdList(playerid, 1) == 1 or gpdList(playerid, 1) == 2 ? 300 : !gpdList(playerid, 1) ? 400 : 150) : adonateCost[adonateType - 1][listitem]) * XDonate, "покупка /adonate");
        }

		case 9904:
		{
			if(!response or !AirDrop[air_Status] or !AirDrop[air_Open])
				return false;

			else if(!AirDrop[air_InventoryCount][listitem])
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество выбранного вами предмета исчерпано.");
			
			else if(AirDrop[air_InventoryLastTake][listitem] > Global_Time)
				return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Забрать данный предмет можно будет через %s.", Convert(AirDrop[air_InventoryLastTake][listitem] - Global_Time)); 
			
			AirDrop[air_InventoryCount][listitem] --;
			AirDrop[air_InventoryLastTake][listitem] = Global_Time + 15;

			AddItem(playerid, AirDrop[air_Inventory][listitem], AirDrop[air_InventoryReCount][listitem]);
			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы забрали %s в количестве %d. Из ящика контрабанды.", ItemsInfo[AirDrop[air_Inventory][listitem]][itemName], AirDrop[air_InventoryReCount][listitem]);

			return ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, false, false, false, false, false, true);
		}

		case 9907:
		{
			if(!response)
				return false;

			else if(!IsOsnovatel(playerid)) 
				return false;

			new seconds = strval(inputtextsave), id = gpdList(playerid, 0);

			if(seconds < 0 or listitem > 60)
				return SendErrorMessage(playerid);

			AdminCommandList[id][adminAntiSlivTime] = seconds;

			SQL("update command SET timeout = %d WHERE command = '%s';'", seconds, AdminCommandList[id][adminCommand]);

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили %d секунд анти-слив защиты для команды (%s)", seconds, AdminCommandList[id][adminCommand]);
		}

		case 9908:
		{
			if(!response)
				return false;

			else if(!IsOsnovatel(playerid)) 
				return false;

			new id = gpdList(playerid, 0);

			AdminCommandList[id][adminAccess] = listitem;

			SQL("update command SET access = %d WHERE command = '%s';", listitem, AdminCommandList[id][adminCommand]);

			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили дополнительную защиту (%s{FFFFFF}) для команды %s.", Admin_Command_Type[listitem], AdminCommandList[id][adminCommand]);

			return SPD(playerid, 9907, DIALOG_STYLE_INPUT, (str_f("{FFFFFF} Система Анти-Слива | {ae433d}%s", AdminCommandList[id][adminCommand])), !"{FFFFFF}Введите количество секунд для перезапуска команды ( через какое время смогут использовать её вновь )\n \nmin: 0, max: 60 seconds\n \nПоле для ввода:", !"Сохранить", !"Закрыть");
		}

		case 9909:
		{
			if(!response)
				return false;

			else if(!IsOsnovatel(playerid)) 
				return false;

			new level = listitem + 1, id = gpdList(playerid, 0);

			if(level < 1 or level > 8)
				return SendErrorMessage(playerid);

			AdminCommandList[id][adminLevel] = level;

			SQL("update command SET level = %d WHERE command = '%s';", level, AdminCommandList[id][adminCommand]);

			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили %d уровень админки для команды %s.", level, AdminCommandList[id][adminCommand]);

			return SPD(playerid, 9908, DIALOG_STYLE_LIST, (str_f("{FFFFFF} Выберите Access | {ae433d}%s", AdminCommandList[id][adminCommand])), !"{ae433d}-\n{FFFF00}FullDostup\n{FF0000}Only Coder & Drakula", !"Далее", !"Закрыть");
		}

		case 9910:
		{
			if(!response)
				return false;

			else if(!IsOsnovatel(playerid)) 
				return false;

			//
			new id = spdList(playerid, 0, gpdList(playerid, listitem));
					
			return SPD(playerid, 9909, DIALOG_STYLE_LIST, (str_f("{FFFFFF} Выберите уровень | {ae433d}%s", AdminCommandList[id][adminCommand])), !"1 уровень\n2 уровень\n3 уровень\n4 уровень\n5 уровень\n6 уровень\n7 уровень\n8 уровень", !"Далее", !"Закрыть");
			//
		}
		
		case 276: {
			if(!response)
				return callcmd::apanel(playerid);

			switch(listitem) {
				case 0: {
					AdminInfo[playerid][admInfoNewPlayer] = !AdminInfo[playerid][admInfoNewPlayer];
			        f(global_str, 100, "UPDATE admin SET a_infonewpl = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admInfoNewPlayer], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 1: {
					AdminInfo[playerid][admKillList] = !AdminInfo[playerid][admKillList];
			        f(global_str, 100, "UPDATE admin SET akilllist = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admKillList], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 2: {
					AdminInfo[playerid][admIP] = !AdminInfo[playerid][admIP];
			        f(global_str, 100, "UPDATE admin SET aip = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admIP], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 3: {
					AdminInfo[playerid][admGoto] = !AdminInfo[playerid][admGoto];
			        f(global_str, 100, "UPDATE admin SET agoto = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admGoto], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 4: {
					AdminInfo[playerid][admGethere] = !AdminInfo[playerid][admGethere];
			        f(global_str, 100, "UPDATE admin SET agethere = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admGethere], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
				case 5: {
					AdminInfo[playerid][admSpectate] = !AdminInfo[playerid][admSpectate];
			        f(global_str, 100, "UPDATE admin SET aspectate = %i WHERE admid = %i LIMIT 1", AdminInfo[playerid][admSpectate], AdminInfo[playerid][admID]);
					mysql_tquery(mysql, global_str, "", "");
				}
			}
			if(PI[playerid][pAdmin] < 5)
			{
				f(global_str, 300, "\
				{FFFF00}Функция\t{FFFF00}Статус\n\
				{ffffff}Информация о новых игроках\t %s\n\
				{ffffff}КиллЛист\t %s\n\
				{ffffff}IP адреса в сообщениях\t %s",
				(AdminInfo[playerid][admInfoNewPlayer]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admKillList]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admIP]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"));
				SPD(playerid, 276, DIALOG_STYLE_TABLIST_HEADERS, !"Настройки администратора", global_str, !"Выбрать", !"Назад");
			}
			else
			{
				f(global_str, 350, "\
				{FFFF00}Функция\t{FFFF00}Статус\n\
				{ffffff}Информация о новых игроках\t %s\n\
				{ffffff}КиллЛист\t %s\n\
				{ffffff}IP адреса в сообщениях\t %s\n\
				{ffffff}Телепорт к себе\t %s\n\
				{ffffff}Телепорт себя\t %s\n\
				{ffffff}Слежка за собой\t %s",
				(AdminInfo[playerid][admInfoNewPlayer]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admKillList]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admIP]) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
				(AdminInfo[playerid][admGoto]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
				(AdminInfo[playerid][admGethere]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
				(AdminInfo[playerid][admSpectate]) ? ("{F04245}Запрещена") : ("{63BD4E}Разрешена"));
				SPD(playerid, 276, DIALOG_STYLE_TABLIST_HEADERS, !"Настройки администратора", global_str, !"Выбрать", !"Назад");
			}
		}
		case 2375: 
		{
			if(!response) return callcmd::apanel(playerid);
			
			if(!strlen(inputtextsave))
				return SPD(playerid, 2375, DIALOG_STYLE_INPUT, !"Статистика администратора", "{FFFFFF}Чтобы посмотреть статистику какого-либо администратора\nнеобходимо указать его ник", !"Принять", !"Назад");

			f(global_str, 100, "SELECT * FROM admin WHERE name = '%s' LIMIT 1", inputtextsave);
			mysql_tquery(mysql, global_str, "OnCheckStatsAdmin", "is", playerid, inputtextsave);
		}
		case 232: {
			if(!response) {
				return 1;
			}
  		    new zkp = strval(inputtextsave);
		    if(zkp > 0)
		    {
			    if(PI[playerid][pVirMoney] >= (zkp*3))
			    {
			        if((PI[playerid][pZKP]+zkp)<=100)PI[playerid][pZKP] += zkp;
			        else
			        {
			            SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Законопослушность не может быть выше 100 очков!");
			            return 0;
			        }
					GiveDonate(playerid, -(zkp*3));
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно купили законопослушность");
				}
			}
		}
		case 901:
	    {
			if(response)
	  		{
	  		    if(!strlen(inputtextsave))
				  	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Ошибка.", !"Закрыть", !"");

		        new
					money = strval(inputtextsave);
                if(money < 1 || money > 100) return SPD(playerid,0,0,"",!"Ошибка.","Закрыть","");
		        if(money >= 1 && PI[playerid][pVirMoney] >= money*40)
		        {
		            if(money < 101)
					{
						global_str = "";
						AddItem(playerid, 522, money);
						GiveDonate(playerid, -money*40);
						f(global_str, 300, "\n\n{FFFFFF}Вы успешно обменяли {42B02C}%d{FFFFFF} az coin's на {42B02C}%d семейных талонов.\n{FFFFFF}На миникарте будет отмечено место, где можно обменять талоны!\n\n", money*40, money);
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
						EnableGPSForPlayer(playerid, 1770.2777, 423.8289, 20.1436);
					}
					else SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно az coin's.\n", !"Закрыть", !"");
		        }
		        else SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно az coin's.\n", !"Закрыть", !"");
			}
		}
		case 4690:
	    {
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SPD(playerid, 4691, DIALOG_STYLE_LIST, !"{9ACD32}» {FFFFFF}Выберите действие", !"{FFFFFF}Телепортироваться на текущую позицию\nУстановить новую позицию", !"Выбрать", !"Назад");
					}
					case 1:
					{
						f(global_str, 300, "{FFFFFF}Текущее сообщение:\n{AFAFAF}''%s''{ffffff}\n\nЧтобы изменить сообщение, введите его ниже: (20-100 символов)", MPName);
						SPD(playerid, 4692, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Сообщение при открытии телепорта", global_str, !"Изменить", !"Назад");
					}
					case 2:
				    {
						f(global_str, 300, "{FFFFFF}Текущее значение: {AFAFAF}%d HP{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (1-100 HP)", MPHealth);
						SPD(playerid, 4693, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Выдача HP при телепорте", global_str, !"Изменить", !"Назад");
				    }
					case 3:
				    {
						f(global_str, 300, "{FFFFFF}Текущее значение: {AFAFAF}%d брони{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (0-100 брони)", MPArmour);
						SPD(playerid, 4694, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Выдача брони при телепорте", global_str, !"Изменить", !"Назад");
				    }
					case 4:
				    {
				        MPWeapon = !MPWeapon;
			            callcmd::eventmenu(playerid);
				    }
					case 5:
				    {
				        if(!MPTeleport)
				        {
				            MPTeleport = 1;
				            callcmd::eventmenu(playerid);
						}
						else
						{
						    MPTeleport = 0;
						    foreach(new i: Player)
						    {
								MPTeleportPlayer{i} = false;
						    }
				            callcmd::eventmenu(playerid);
						}
				    }
					case 6:
				    {
						f(global_str, 300, "{FFFFFF}Текущий лимит игроков: {AFAFAF}%d{FFFFFF}\n\nЧтобы изменить, введите ниже новое значение: (1-1000 игроков)", MPPlayerLimit);
						SPD(playerid, 4695, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Лимит игроков для телепорта", global_str, !"Изменить", !"Назад");
				    }
					case 7:
				    {
						f(global_str, 300, "{FFFFFF}Текущее время действия(после запуска): {AFAFAF}%d сек{FFFFFF}\n\nЧтобы изменить, введите ниже новое значение: (10-1200 сек)", MPTimeStatic);
						SPD(playerid, 4696, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Время действия телепорта", global_str, !"Изменить", !"Назад");
				    }
					case 8:
				    {
						if(TeleportFloat[0] == 0 || TeleportFloat[1] == 0 || TeleportFloat[2] == 0)
						{
							SCM(playerid, COLOR_LIGHTBLUE, !"[Teleport Event]{FFFFFF} Позиция для телепорта отсутствует!");
							callcmd::eventmenu(playerid);
						 	return 1;
						}
						if(Teleport == 1)
						{
							Teleport = 0;
						    MPTime = 60;
							f(global_str, 300, "[Teleport Event]{FFFFFF} Администратор %s досрочно де-активировал телепорт на мероприятие.", PN(playerid));
							SCMALL(COLOR_RED, global_str);
						    for(new i; i < 14; i++) TextDrawHideForAll(TeleportEvent[i]);
							return 1;
						}

						MPPlayersLimit = MPPlayerLimit;
						MPTime = MPTimeStatic;
						Teleport = 1;
						
						SCMALL(0x40FF00FF, (str_f("[Начало Мероприятия]{ffffff} %s. (%s)", MPName, PN(playerid))));
						
						f(global_str,50,"%s_~W~-_/GOTP",Convert(MPTime));
						TextDrawSetString(TeleportEvent[1], global_str);
					    foreach(Player, i) MPTeleportPlayer{i} = false;
					    SetTimer("BotGOTP", random(2000)+2000, false);
					    for(new i; i < 14; i++) TextDrawShowForAll(TeleportEvent[i]);
				    }
				}
			}
		}
		
		case 7625:
		{
			if(!response) return false;

			switch listitem do
			{
				case 10:
				{
					if(PI[playerid][pMoney] < 500000)
						return SCM(playerid, COLOR_OLDRED, !">>>> {FFFFFF}- У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

					GiveMoney(playerid, -500000, "очистка розыска у Гурама");
    				return SetPlayerWantedLevel(playerid, PI[playerid][pWanted] = 0);
				}
				case 12:
					return SendBotMessage(playerid, !"Этот предмет защитит тебя от утери наркотиков\nи патронов при попадении в больницу или тюрьму.\n((Сумка исчезает при перезаходе в игру))");
			}
		}

		case 7655:
		{
			TogglePlayerControllable(playerid, false);
			CancelSelectTextDraw(playerid);
		}

		case 4691:
	    {
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					    callcmd::eventmenu(playerid);
						if(TeleportFloat[0] == 0 || TeleportFloat[1] == 0 || TeleportFloat[2] == 0)
							return SCM(playerid, COLOR_LIGHTBLUE, !"[Teleport Event]{FFFFFF} Позиция для телепорта отсутствует!");
					    SetPlayerInterior(playerid, TeleportInfoq[1]);
						SetPlayerVirtualWorld(playerid, TeleportInfoq[0]);
						UpdatePlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]);
					}
					case 1:
					{
						SCM(playerid, COLOR_LIGHTBLUE, "[Teleport Event]{FFFFFF} Вы установили новую позицию для телепорта.");
						GetPlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]); // Записываем координаты
						TeleportInfoq[0] = GetPlayerInterior(playerid); // Записываем интерьер
						TeleportInfoq[1] = GetPlayerVirtualWorld(playerid); // Записываем виртуальный мир	Teleport = 1;
						callcmd::eventmenu(playerid);
					}
				}
			}
			else callcmd::eventmenu(playerid);
		}
		case 4692:
	    {
			if(response)
			{
				if(strlen(inputtextsave) < 20 || strlen(inputtextsave) > 100)
				{
					f(global_str, 300, "{FFFFFF}Текущее сообщение:\n{AFAFAF}''%s''{ffffff}\n\nЧтобы изменить сообщение, введите его ниже: (20-100 символов)\n\n{FF1C05}Ошибка:{ffffff} Слишком мало либо много символов!", MPName);
					SPD(playerid, 4692, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Сообщение при открытии телепорта", global_str, !"Изменить", !"Назад");
					return 0;
				}
				SCM(playerid, COLOR_LIGHTBLUE, !"[Teleport Event]{FFFFFF} Вы изменили сообщение для всех при открытии телепорта на мероприятие!");
				strmid(MPName, inputtextsave, 0, 256);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 4693:
	    {
			if(response)
			{
				if(strval(inputtextsave) < 1 || strval(inputtextsave) > 100)
				{
					f(global_str, 300, "{FFFFFF}Текущее значение: {AFAFAF}%d HP{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (1-100 HP)\n\n{FF1C05}Ошибка:{ffffff} Слишком маленькое либо большое значение!", MPHealth);
					SPD(playerid, 4693, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Выдача HP при телепорте", global_str, !"Изменить", !"Назад");
					return 0;
				}
				MPHealth = strval(inputtextsave);
				f(global_str, 100, "[Teleport Event]{FFFFFF} Вы изменили выдачу HP на: %d", MPHealth);
				SCM(playerid, 0x40FF00FF, global_str);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 4694:
	    {
			if(response)
			{
				if(strval(inputtextsave) < 0 || strval(inputtextsave) > 100)
				{
					f(global_str, 300, "{FFFFFF}Текущее значение: {AFAFAF}%d брони{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (0-100 брони)\n\n{FF1C05}Ошибка:{ffffff} Слишком маленькое либо большое значение!", MPArmour);
					SPD(playerid, 4694, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Выдача брони при телепорте", global_str, !"Изменить", !"Назад");
					return 0;
				}
				MPArmour = strval(inputtextsave);
				f(global_str, 100, "[Teleport Event]{FFFFFF} Вы изменили выдачу брони на: %d", MPArmour);
				SCM(playerid, 0x40FF00FF, global_str);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 4695:
	    {
			if(response)
			{
				if(strval(inputtextsave) < 1 || strval(inputtextsave) > 1000)
				{
					f(global_str, 300, "{FFFFFF}Текущий лимит игроков: {AFAFAF}%d{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (1-1000 игроков)\n\n{FF1C05}Ошибка:{ffffff} Слишком маленькое либо большое значение!", MPPlayerLimit);
					SPD(playerid, 4695, DIALOG_STYLE_INPUT, "{9ACD32}» {FFFFFF}Лимит игроков для телепорта",global_str,"Изменить", "Назад");
					return 0;
				}
				MPPlayerLimit = strval(inputtextsave);
				f(global_str, 150, "[Teleport Event]{ffffff} Вы изменили лимит количества игроков для телепорта: %d игроков", MPPlayerLimit);
				SCM(playerid, 0x40FF00FF, global_str);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 2333:
		{
			if(response)
			{
				if(!strlen(inputtextsave)) return SPD(playerid,0,0,!"",!"Ошибка.", !"Закрыть","");
				new money = strval(inputtextsave);
				if(money >= 1 && PI[playerid][pVirMoney] >= money)
				{
					if(money<3000)
					{
						GiveMoney(playerid, money*500);
						//aml(51, playerid, "", "донат",money*2300);
						f(global_str,150,"{FFFFFF}Вы успешно обменяли {FF6347}%d{FFFFFF} AZ-монет на {FF6347}%d${FFFFFF}.",money,money*5000);
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
						zakrito[playerid] = 0;
					}
					else
					{
						GiveMoney(playerid, money*500);
						//aml(51, playerid, "", "донат",money*2300);
						f(global_str,300,"{FFFFFF}Вы успешно обменяли {FF6347}%d{FFFFFF} AZ-монет на {FF6347}%d$.{FFFFFF}\n\n{FF6347}Внимание!\n\n{FFFFFF}За обмен который составляет выше {FF6347}3000{FFFFFF} AZ-монет вы\nполучаете дополнительный бонус {FF6347}250{FFFFFF} AZ-монет.",money,money*500);
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
						PI[playerid][pVirMoney]+=250;
						UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
						//aml(53, playerid, "", "выигрыш через обмен подарков", 250);
						zakrito[playerid] = 0;
					}
					PI[playerid][pVirMoney]-=money;
					UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
					zakrito[playerid] = 0;
					//aml(54, playerid, "", "покупка денег", money);
				}
				else SPD(playerid,0,0,!"",!"{FF6347}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-монет.\n", !"Закрыть",""), zakrito[playerid] = 0;
			}
			else zakrito[playerid] = 0;
		}
		case 4696:
	    {
			if(response)
			{
				if(strval(inputtextsave) < 1 || strval(inputtextsave) > 1200)
				{
					f(global_str,300, "{ffffff}Текущее время действия(после запуска): {AFAFAF}%d сек{ffffff}\n\nЧтобы изменить, введите ниже новое значение: (10-1200 сек)\n\n{FF1C05}Ошибка:{ffffff} Слишком маленькое либо большое значение!", MPTimeStatic);
					SPD(playerid, 4696, DIALOG_STYLE_INPUT, !"{9ACD32}» {FFFFFF}Время действия телепорта", global_str, !"Изменить", !"Назад");
					return 0;
				}
				MPTimeStatic = strval(inputtextsave);
				f(global_str, 100, "[Teleport Event]{ffffff} Вы изменили время действия телепорта: %d сек", MPTimeStatic);
				SCM(playerid, 0x40FF00FF, global_str);
				callcmd::eventmenu(playerid);
			}
			else callcmd::eventmenu(playerid);
		}
		case 4697:
		{
		    if(response)
		    {
		        if(!MPWeapon) {
					_ResetGun(playerid);
					SCM(playerid, COLOR_LIGHTBLUE, !"[Мероприятие] {FFFFFF}Вы телепортированы на мероприятие.");
					SCM(playerid, COLOR_LIGHTBLUE, !"[Мероприятие] {FFFFFF}По правилам мероприятия ваше оружие изьято.");
				}
				
				UpdatePlayerArmour(playerid, MPArmour);
				UpdatePlayerHealth(playerid, MPHealth);
			    SetPlayerInterior(playerid, TeleportInfoq[1]);
				SetPlayerVirtualWorld(playerid, TeleportInfoq[0]);
				UpdatePlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]);
				
				MPPlayersLimit --;
				if(!MPPlayersLimit)
				{
				    SCMALL(0x40FF00FF, !"[Мероприятие]{ffffff} Телепорт на мероприятие закрыт, лимит игроков закончился.");
					Teleport = 0;
					MPTime = 60;
				   	for(new i; i < 14; i++) TextDrawHideForAll(TeleportEvent[i]);
				}
				if(MPTeleport == 1)
					MPTeleportPlayer{playerid} = true;

				return 1;
		    }
		}
		
		case 13000:
		{
		    if(response)
		    {
		        if(PickInvent[playerid] == InventoryMaxSlot+1)
					return false;

		        new IDS = Inventory[playerid][0][PickInvent[playerid]];
		        new id2 = AksSlot[playerid][0][6];
			    
			    SetPlayerAccessory(playerid, AksSlot[playerid][0][6] = IDS, 6);
			    ApplyAnimationEx(playerid,"goggles","goggles_put_on",4.1,0,0,0,0,0,1);
			
				InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
				timeaks[playerid] = -1;
				UpdateInventoryAcessory(playerid, 6);
				
		        for(new i; i < PI[playerid][pInvCell]; i++)
		    	{
				    if(Inventory[playerid][0][i]) continue;
		          	Inventory[playerid][0][i] = id2;
				    Inventory[playerid][1][i] = 1;
				    InventSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
				    return PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
		  		}
			}
			else
				ColorSlotReset(playerid), InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
		}
		case 12219:
	    {
	        if(!response) 
				return InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
			
			else if(PickInvent[playerid] == InventoryMaxSlot+1)
				return 0;
				
			new id = Inventory[playerid][0][PickInvent[playerid]];
			if(strval(inputtextsave) < 1 || strval(inputtextsave) > Inventory[playerid][1][PickInvent[playerid]])
				 return SPD(playerid, 12219, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите использовать", !"Принять", !"Отмена");
			
			switch id do
			{
				case 798: AddItem(playerid, 731, strval(inputtextsave)*2);
				case 731: GiveDonate(playerid, strval(inputtextsave));
				case 730, 5991: PI[playerid][pExp] += strval(inputtextsave), CheckNextLevel(playerid);
				default: 
				{
					if(GetPlayerGZ(playerid))
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не можете достать оружие в зелёной зоне");
				}
			}

			if(770 <= id <= 776 or id == 7317 or id == 1077 or id == 7323 or id == 6368 or id == 5480 or id == 1210 or id == 5829) 
				return SetPlayerAccessoryWeapon(playerid, id, strval(inputtextsave));

			else
			{
				switch id do
				{
					case 731: f(global_str, 50, "[Информация] {FFFFFF}Вам начислено %d AZ",strval(inputtextsave));
					case 730, 5991: f(global_str, 50, "[Информация] {FFFFFF}Вам начислено %d EXP",strval(inputtextsave));
				}
				InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
			}
			if(strlen(global_str) > 3) SCM(playerid, COLOR_VALIK, global_str);
			DeleteItem(playerid, id, strval(inputtextsave));
		}

		case 2221:
		{
			if(!response) return false;
		    new 
				i = pTemp[playerid][pSellCar], carid = autoBazarInfo[i][autoBazarCarID];
			
		    if(GetCount(playerid, 1811) < autoBazarInfo[i][autoBazarCost])
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно BTC. Вы можете обменять их в Центральном банке.");

			if(autoBazarInfo[i][autoBazarplayerid] == INVALID_PLAYER_ID)
			    return false;

			if(!IsPlayerRegCar(autoBazarInfo[i][autoBazarplayerid], carid))
				return false;

            if(IsValidNumberCars(playerid))
            {		
				AddItem(autoBazarInfo[i][autoBazarplayerid], 1811, autoBazarInfo[i][autoBazarCost]);
				DeleteItem(playerid, 1811, autoBazarInfo[i][autoBazarCost]);
			    SetCarOwner(carid, PN(playerid));
			    GetNumberCars(playerid, PI[playerid][pCars]);
			    GetNumberCars(autoBazarInfo[i][autoBazarplayerid], PI[playerid][pCars]);
				CarInfo[carid][cShtrafer] = 0;
				
				GameTextForPlayer(playerid, !"successful", 0, 1);
				SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляем с приобретением транспортного средства");
				GameTextForPlayer(autoBazarInfo[i][autoBazarplayerid], !"successful", 0, 1);
			    SCM(autoBazarInfo[i][autoBazarplayerid], COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляем с продажей транспортного средства.");
			    RemovePlayerFromVehicle(autoBazarInfo[i][autoBazarplayerid]);
   				
				FirstGiveBizMoney(-2127.9028,-750.8856,32.0234, autoBazarInfo[i][autoBazarCost]/10);
		        
				autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
		        autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
		        
				DestroyDynamicArea(autoBazarInfo[i][autoBazarArea]);
				DestroyDynamic3DTextLabel(autoBazarInfo[i][autoBazarText]);
				for(new z; z < 4; z++) 
					DestroyDynamicObject(autoBazarInfo[i][autoBazarObject][z]);
		        
		    	if(autoBazarInfo[i][autoBazarType])
		    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
		    	else 
					UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
		    	
				PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
				SaveOwnableCar(GetVehicleID(carid));
			}
		    else
			{
				SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш уровень VIP недостаточно высок чтобы иметь столько авто!");
				SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Возможно у вас нет дома, он даст вам +1 слот к авто");
    			PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			}
		}
	    case 2220:
	    {
	        if(!response)
	            return 1;

	        new i = pTemp[playerid][pSellCar];

	        autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
	        autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
			DestroyDynamic3DTextLabel(autoBazarInfo[i][autoBazarText]);
	        for(new z; z < 4; z++) DestroyDynamicObject(autoBazarInfo[i][autoBazarObject][z]);
	        DestroyDynamicArea(autoBazarInfo[i][autoBazarArea]);
	    	if(autoBazarInfo[i][autoBazarType] == 1) {
	    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
	    	}
	    	else {
	    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
	    	}
			i = 0;
	    }
	    case 2219:
	    {
	        if(!response)
	            return 1;

			new carid = GetPlayerVehicleID(playerid);
			if(!IsPlayerRegCar(playerid, carid)) return SendErrorMessage(playerid);
	        new i = pTemp[playerid][pSellCar];

	        f(global_str, 100, "Вы успешно выставили ваш транспорт на продажу за %d BTC.", autoBazarInfo[i][autoBazarCost]);
	        SCM(playerid, COLOR_VALIK, global_str);

	        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Чтобы снять его с продажи, повторно нажмите на 'H' (сигнал)");
	        autoBazarInfo[i][autoBazarCarID] = carid;
	        autoBazarInfo[i][autoBazarplayerid] = playerid;
	        if(!IsAVelik(carid))
				SetEngineStatus(carid, false, playerid);
	        SetVehiclePos(carid, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ]);
			
			new Float:x, Float:y, Float:z;
			SetVehicleZAngle(carid, autoBazarInfo[i][autoBazarZAngle]);
			GetCoordBonnetVehicle(carid, x, y, z, 2.5, autoBazarInfo[i][autoBazarZAngle]);
			
			// object code
			static color_table_sync[7][24] = {"greendirt1", "bluedirt1",  "reeedgrad32", "yellograd32", "purpledirt1", "reddirt1", "oranggrad32"};
			static library_table_sync[7][24] = {"mattubes", "mattubes", "sampicons", "sampicons", "mattubes", "mattubes", "sampicons"};
			new Float:pos_x, Float:pos_y = Table_Bazar_X[i], Float:rot_z, col = random(7), Float:anti_de_bug;
			//
			if(i < 34) 
				pos_x = -2135.912841,
				rot_z = -360.000000,
				anti_de_bug = 1.47998;
			
			else if(i >= 34 && i < 66) 
				pos_x = -2144.512939,
				rot_z = 180.000000,
				anti_de_bug = 1.080079;
			
			else 
				pos_x = -2120.369628,
				rot_z = 180.000000,
				anti_de_bug = 1.080079;
				
			autoBazarInfo[i][autoBazarObject][0] = CreateDynamicObject(18663, pos_x-anti_de_bug, pos_y, 31.691607, 0.000000, 25.000000, rot_z, -1, -1, -1, STREAMER_OBJECT_SD, 150.0); // 1
			f(global_str, 150, "%s\n{5FC470}%d BTC\n\n \n", GetVehicleName(carid), autoBazarInfo[i][autoBazarCost]);
			SetDynamicObjectMaterialText(autoBazarInfo[i][autoBazarObject][0], 0, global_str, 140, "Ariel", 40, 1, 0xFFFFFFFF, 0, 1);
			
			global_str = "";
			autoBazarInfo[i][autoBazarObject][1] = CreateDynamicObject(18663, pos_x-anti_de_bug, pos_y, 31.691607, 0.000000, 25.000000, rot_z, -1, -1, -1, STREAMER_OBJECT_SD, 150.0); // 1
			f(global_str, 150, "\n\n\%s\n\nВладелец: %s\n{999999}id: %d", GetCarCount(carid, 578) ? "\n\n{B800FF}Twin Turbo{FFFFFF}":"", PN(playerid), carid);
			SetDynamicObjectMaterialText(autoBazarInfo[i][autoBazarObject][1], 0, global_str, 140, "Ariel", 30, 1, 0xFFFFFFFF, 0, 1);
			//
			autoBazarInfo[i][autoBazarObject][2] = CreateDynamicObject(19980, pos_x, pos_y, 29.304466, -25.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0); // 3
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][2], 2, 19655, library_table_sync[col], color_table_sync[col], 0);
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][2], 1, 16640, "a51", "banding9_64HV", 0);
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][2], 0, 16640, "a51", "banding9_64HV", 0);
			//
			autoBazarInfo[i][autoBazarObject][3] = CreateDynamicObject(19980, pos_x-2.560059, pos_y, 29.304466, -25.000000, 0.000000, -90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0); // 3
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][3], 2, 19655, library_table_sync[col], color_table_sync[col], 0);
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][3], 1, 16640, "a51", "banding9_64HV", 0);
			SetDynamicObjectMaterial(autoBazarInfo[i][autoBazarObject][3], 0, 16640, "a51", "banding9_64HV", 0);
			//
	        PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
			//3dtextlabel
			autoBazarInfo[i][autoBazarText] = CreateDynamic3DTextLabel(!"Для покупки нажмите N", -1, pos_x + (rot_z == 180.0 ? -0.5:-2.0), pos_y, 31.0, 5.0);
			//
			f(global_str, 100, "Место для продажи {aa3f33}[Занято]\n\n{9ACD32}%s", PN(playerid));
			UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, global_str);
			autoBazarInfo[i][autoBazarArea] = CreateDynamicSphere(autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ], 6.5, 0, 0, -1);
			autoBazarInfo[i][autoBazarBuyPosX] = pos_x + (rot_z == 180.0 ? -0.5:-2.0);
			autoBazarInfo[i][autoBazarBuyPosY] = pos_y; 
			autoBazarInfo[i][autoBazarBuyPosZ] = 31.0;
			//
			f(global_str, 350, "Игрок <a href=../pages/user?id=%d>%s</a> выставил авто <a href=../pages/carlog.php?id=%d>№%d</a> на продажу за %d$", PI[playerid][pID], PN(playerid), CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cID], autoBazarInfo[i][autoBazarCost]);
			aml(global_str, 0, "", "");
		}
	    case 2218:
	    {
	        if(!response)
	            return 1;

			if(!IsPlayerInAnyVehicle(playerid))
			    return 0;

			new i = pTemp[playerid][pSellCar];
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ]))
			    return 0;

	        if(strval(inputtextsave) < 10000)
	            return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Слишком маленькая цена! [ Минимум 10.000 BTC ]");

	        if(IsACar(GetPlayerVehicleID(playerid)) && strval(inputtextsave) > (CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cCost]*8))
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Цена может быть не больше чем в 8 раз от гос. стоимости.");

			autoBazarInfo[i][autoBazarCost] = strval(inputtextsave);
	        f(global_str, 100, "{FFFFFF}Вы хотите выставить свой транспорт на продажу за %d BTC?", strval(inputtextsave));
	        SPD(playerid, 2219, DIALOG_STYLE_MSGBOX, !"", global_str, !"Выбрать", !"Отмена");
	    }
   		case 6370:
		{
		    new id = ReportID[playerid];
		    GetPVarString(id, "ReportMessage", global_str, 128);
			if(!IsPlayerConnected(id))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок вышел с игры");
				ReportID[playerid] = -1;
				return 1;
			}
		    if(response)
		    {
	 			if(!strlen(inputtextsave) || strlen(inputtextsave) > 70)
				{
					f(global_str, 300, "{FFFFFF}Жалоба/Вопрос от: %s[%i]\n\n{c8e464}%s\n\n", PN(id), id, global_str);
			        SPD(playerid, 6370, DIALOG_STYLE_INPUT, !"", global_str, !"Принять", !"Отмена");
				    SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Много символов, или нет символов");
				    return 1;
				}
				f(global_str, 400, "{FFFFFF}Вам ответил администратор!\n\n{FFFFFF}Ваш вопрос: {c8e464}%s\n{FFFFFF}%s: {c8e464}%s\n\n", global_str, PN(playerid), inputtextsave);
		        SPD(id, 6375, DIALOG_STYLE_MSGBOX, !"", global_str, !"Спасибо", !"");
				f(global_str, 300, "Администратор %s[%d]: {FFFFFF}%s", PN(playerid), playerid, inputtextsave);
				SCM(id, COLOR_RED, global_str);
				ReportSend{id} =
				ReportSlot{id} =
				ReportON{id} = false;
				SetPVarString(playerid, "TextReportAdmin", inputtextsave);
				f(global_str, 400, "Администратор %s[%d] ответил игроку %s[%d]:{ffffff} %s", PN(playerid), playerid, PN(id), id, inputtextsave);
				SendAdminsMessage(COLOR_ORANGE, global_str);
				SPD(playerid, 6377, DIALOG_STYLE_LIST, !"Быстрый ответ", !"Нет, это временный ответ\nДа, этот ответ может использоватся как быстрый ответ", !"Принять", !"Отмена");
	    		//
				GetPVarString(id, "ReportMessage", global_str, 128);
				f(global_str, 400, "Администратор <a href=../pages/user?name=%s>%s</a> ответил на репорт <a href=../pages/user?name=%s>%s</a>. Вопрос: %s Ответ: %s",
				PN(playerid), PN(playerid), PN(id), PN(id), global_str, inputtextsave);
				aml(global_str, 5, "","");
				//
			}
	    	else
	    	{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не ответили игроку! Ваша репутация понижена!");
				f(global_str, 300, "[Информация]{FFFFFF} Администратор %s[%d] отказался отвечать на вашу жалобу. Ожидайте ответа!", PN(playerid), playerid);
				SCM(id, COLOR_RED, global_str);
				ReportID[playerid] = -1;
				PI[playerid][pAdmRep] --;
				TotalReport ++;
				ReportSlot{id} = false;
		        return 1;
	    	}
		}
		case 6377:
		{
		    switch listitem do
		    {
		        case 0:
					SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вы выбрали временный ответ");
		      
		        case 1:
		        {
		        	GetPVarString(ReportID[playerid], "ReportMessage", SQL_GET_ROW_STR[0], 128);
					GetPVarString(playerid, "TextReportAdmin", global_str, 70);
		        	
					SQL("INSERT INTO `reports` (`rText`, `rOtvet`) VALUE ('%s', '%s')", SQL_GET_ROW_STR[0], global_str);
					
					SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Вы выбрали как быстрый ответ");
		        }
		    }
		    DeletePVar(ReportID[playerid], "ReportMessage");
			DeletePVar(playerid, "TextReportAdmin");
		    ReportID[playerid] = -1;
		}
		case 6375:
		{
		    if (!response)
		    {
		        SPD(playerid, 6371, DIALOG_STYLE_LIST, !"Оцените работу админа!", !"Хороший ответ!\nПлохой ответ!", !"Выбрать", !"Отмена");
		        return 1;
		    }
			SPD(playerid, 6371, DIALOG_STYLE_LIST, !"Оцените работу админа!", !"{BFE54C}Хороший ответ!\n{D94040}Плохой ответ!", !"Выбрать", !"Отмена");
   		}
		case 6371:
		{
			if(!response)
			    return 1;

			new id = ReportID[playerid];
			if(id != -1){
			switch(listitem)
			{
			    case 0:
			    {
					PI[id][pAdmRep] ++;
				}
			    case 1:
				{
					PI[id][pAdmRep] --;
				}
			}}
			SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Спасибо за ваш отзыв!");
			ReportID[playerid] = -1;
			return 1;
		}
	    case 3392:
	    {
			if(!response)
			    return 1;

			switch(listitem) {
				case 0: return SPD(playerid, 233, DIALOG_STYLE_TABLIST_HEADERS, "", "Название\tТребование\t\n{FAAC58}Механик\t3-ий уровень{FFFFFF}\n{FC660F}Таксист\t1-вый уровень{FFFFFF}\nКрупье\t5-тый уровень\nРаботник Налоговой\t10-ый уровень\nИнкассатор\t6-ой уровень\nДальнобойщик\t5-тый уровень\nМеталлоломщик\t4-тый уровень\nМусорщик\t3-ий уровень\n{FAAC58}Водитель автобуса\t2-ой уровень{FFFFFF}\nРазвозчик продуктов\t4-тый уровень\nАдвокат\t7-ой уровень\n{ff0066}Пожарный\t3-ий уровень\n{ff0066}Пилот\t6-й уровень\n{FF0066}Водитель трамвая\t8-й уровень\n{FF0066}Машинист электропоезда\t8-й уровень\n{FFFFFF}Главный фермер\t\t15-й уровень\n{FFFFFF}Руководитель грузчиков\t15-й уровень\n{FFFFFF}Руководитель завода\t\t15-й уровень\n{FFFFFF}Ремонтник дорог\t\t10-й уровень\n{FFFFFF}Продавец хотдогов\t\t5-й уровень", "Выбор", "Отмена");
				case 1: callcmd::quitjob(playerid);
			}
	    }
		case 7471:
		{
			if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[5][3] = 
			{
				{0.0, 0.0, 0.0},
				{2695.59375,-1704.6901855469,11.843799591064},
				{-1748.255859375,136.7400970459,3.5546998977661},
				{132.92889404297,-260.85501098633,4.4103999137878},
				{-1376.8391113281,-2171.0029296875,22.512100219727}
			};
			if(!listitem) return callcmd::findcollectors(playerid);
			else listitem--;
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 7431:
		{
			if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[5][3] = 
			{
				{1773.0909423828,-1892.1120605469,13.551600456238},
				{2211.7722167969,-1143.0029296875,25.808099746704},
				{1324.6468505859,286.98458862305,20.0452003479},
				{-2521.6315917969,-17.47260093689,25.610799789429},
				{1289.1011962891,-1273.8745117188,13.542200088501}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 7845:
	    {
	        if(!response)
	            return 1;

            switch(listitem)
            {
    			case 0:
    		    {
					SendBotMessage(playerid, !"Привет, меня зовут Мартин.\nМероприятие: 'Собиратели' начинается ровно 20.15 и длится до 21.00.");
				}
    			case 1:
    		    {
					SendBotMessage(playerid, !"В течении определенного времени, на узком участке, вы сможете собирать халявные подарки.\nЧем больше людей на мероприятии, тем больше подарков будет спавниться,\nа так-же вы будете получить больше времени на участие.\nОбменять собранные подарки можно у Эдварда, он находится у Центрального банка в ЛС.");
				}
    			case 2:
    		    {
    		        new
    		            num = 0;
    		        foreach(new i: Player)
    		        {
    		            if(PI[i][pEventTime])
    		            {
    		            	num ++;
    		            }
    		        }
    		        f(global_str, 100, "Сейчас в мероприятии: 'Собиратели' учавствует %d человек.", num);
    		        SendBotMessage(playerid, global_str);
				}
    			case 3:
    		    {
					new
						hour,
						minuite;
					gettime(hour, minuite, _);
					if((hour < 20 || minuite < 15) || hour > 21)
					    return SendBotMessage(playerid, !"Мероприятие начинает работать с 20.15 по 21.00!");
			        if(PI[playerid][pMoney] < 30000)
						return SendBotMessage(playerid, !"У вас недостаточно денег!");
				    if(PI[playerid][pEvent])
				        return SendBotMessage(playerid, !"Это мероприятие уже не доступно! Попробуйте завтра.");
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n\
						{ffffff}Добро пожаловать на мероприятие: 'Собиратели'\n\
						У вас есть {DC9728}несколько {ffffff}минут, чтобы собрать подарки.\n\
						Подарки появляются каждые {DC9728}40{ffffff} секунд и каждый из участников хочет заполучить\n\
						больше подарков, чем остальные. {F54C4C}Обратите внимание, что это мероприятие\n\
						доступно только 1-ин раз в день с 20.15 до 21.00.\n\n\
						{FF9100}Хорошего улова!", !"Принять", !"");
					UpdatePlayerPos(playerid, -2268.2046,168.7968,35.1641);
					SetPlayerFacingAngle(playerid, 92.3241);
					SetPlayerVirtualWorld(playerid, 1);
					SetPlayerAttachedObject(playerid,3,19078,1,-0.880999,-0.154000,0.000000,0.000000,0.499998,-7.699995,5.534998,7.175994,6.535998);
					GiveMoney(playerid,-30000);
					PI[playerid][pEvent] = 1;
					PI[playerid][pEventTime] = 900;
					f(global_str,30,"Time: %s",ConvertTD(PI[playerid][pEventTime]));
					EventTimeTD[playerid][0] = CreatePlayerTextDraw(playerid, 58.000000, 396.000000, global_str);
					PlayerTextDrawLetterSize(playerid, EventTimeTD[playerid][0], 0.270000, 1.899999);
					PlayerTextDrawTextSize(playerid, EventTimeTD[playerid][0], 1280.000000, 1280.000000);
					PlayerTextDrawAlignment(playerid, EventTimeTD[playerid][0], 0);
					PlayerTextDrawColor(playerid, EventTimeTD[playerid][0], 0xFFFFFFFF);
					PlayerTextDrawUseBox(playerid, EventTimeTD[playerid][0], 0);
					PlayerTextDrawBoxColor(playerid, EventTimeTD[playerid][0], 0x80808080);
					PlayerTextDrawSetShadow(playerid, EventTimeTD[playerid][0], 2);
					PlayerTextDrawSetOutline(playerid, EventTimeTD[playerid][0], 1);
					PlayerTextDrawBackgroundColor(playerid, EventTimeTD[playerid][0], 0x000000FF);
					PlayerTextDrawFont(playerid, EventTimeTD[playerid][0], 2);
					PlayerTextDrawSetProportional(playerid, EventTimeTD[playerid][0], 1);
					PlayerTextDrawSetSelectable(playerid, EventTimeTD[playerid][0], 0);
					ShowPlayerTD(playerid, EventTimeTD[playerid][0]);
				}
			}
		}
	
	   	case 834:
	   	{
			if(!response)
			    return Kick(playerid);

			if(!strlen(inputtextsave))
			    return Kick(playerid);

            if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
				return Kick(playerid);

			OnPlayerLogin(playerid);
	   	}
	   	case 833:
	   	{
			if(!response)
			    return 1;

			if(!strlen(inputtextsave))
			    return 1;

            if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
				return 0;

			PI[playerid][pEmailAuth] = 0;
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Вход через почту", !"\n\n{FFFFFF}Вы {FF5E50}выключили {FFFFFF}подтверждение\nвхода через почту. Теперь при\nавторизации с другого {FF5E50}ПК{FFFFFF}, не будет\nзапрашиваться подтверждение!\n\n", !"Закрыть", !"");
	   	}
	   	case 866:
	   	{
			if(!response)
			    return 1;

			if(!strlen(inputtextsave))
			    return 1;

            if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
				return 0;

			PI[playerid][pEmailAuth] = 1;
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Вход через почту", !"\n\n{FFFFFF}Вы {6CCE3A}включили {FFFFFF}подтверждение\nвхода через почту. Теперь при\nавторизации с другого {FFEE50}ПК{FFFFFF}, будет\nзапрашиваться подтверждение!\n\n", !"Закрыть", !"");
	   	}
	   	case 865:
	   	{
			if(!response)
			    return 1;

            if(Int_GetPlayerData(playerid, !"remailmail") > Global_Time)
            {
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Попробуйте через 60 секунд!");
				return ShowUpdateSettings(playerid);
			}
	        SPD(playerid, 866, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
	        new code = 1000 + random(9000);
	        f(global_str, 80, "Код для подтверждения: %d", code);
	        SendMail(PlayerMail[playerid], Setting_Server[1], "ARIZONA-RP подтверждение входа", "Arizona Role Play Supreme", global_str);
	        SetPVarInt(playerid, !"authcode", code);
	        SetPVarInt(playerid, !"remailmail", Global_Time + 60);
	   	}
	   	case 870:
	   	{
			if(!response)
			    return 1;

			switch(listitem)
			{
			    case 0:
			    {
			    	f(global_str, 256, "1. Код аккаунта: {FC4C4C}%s.\n2. Сколько людей установило защиту?\n3. Удалить Google Authenticator.", PI[playerid][pGoogle]);
					return SPD(playerid, 870, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
			    }
			    case 1:
			    {
			        f(global_str, 256, "\n\n{FFFFFF}Приложение {F1FC4C}Google Authenticator {FFFFFF}уже подключили {F1FC4C}%i {FFFFFF}игроков!\n\n", GLS[66]);
			        return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Понял", !"");
			    }
			    case 2:
			    {
			        PI[playerid][pGoogle] = 0;
			        GLS[66] --;
			        SaveInformation();
			        GoogleOpen{playerid} = false;
			        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно отключили {F1FC4C}Google Authenticator {FFFFFF}от вашего аккаунта.\nРекомендуем вернуть его, чтобы обезопасить игровой аккаунт.\n\n", !"Понял", !"");
			    }
			}
	   	}
	   	case 869:
	   	{
			if(!response)
			    return 1;

			new
				heh = GoogleAuthenticatorCode(PI[playerid][pGoogle], Global_Time);
			if(strval(inputtextsave) != heh)
			{
			    return SPD(playerid, 869, DIALOG_STYLE_INPUT, !"Подтверждение", !"\n\n{FFFFFF}Введите в строку код из приложения {F1FC4C}Google Authenticator {FFFFFF}у вас на телефоне\nили из дополнения Google, для подтверждения аккаунта.\n{FC4C4C}Неверный код!\n", !"Принять", !"Отмена");
			}
			GoogleOpen{playerid} = true;
			f(global_str, 256, "1. Код аккаунта: {FC4C4C}%s.\n2. Сколько людей установило защиту?\n3. Удалить Google Authenticator.", PI[playerid][pGoogle]);
			return SPD(playerid, 870, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
	   	}
		case 5060:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						global_str = "{FFFFFF}Название\t {FF9966}Награда\t {AFAFAF}Прогресс\n";
						for(new i; i < MAX_REWARD; i++)
						{
							if(GetString(Reward[i][rewType],"TempQuest"))
							{
								if(Reward[i][rewCount] == RewardProgress[playerid][i]) 	f(global_str, 2800,"%s%s\t{facd5a}Талон: +1 AZ-coins (%d шт)\t{efaf40}%d из %d (100%%)\n",global_str,Reward[i][rewOpis],Reward[i][rewPrize],RewardProgress[playerid][i],Reward[i][rewCount]);
								else f(global_str, 2800,"%s%s\t{facd5a}Талон: +1 AZ-coins (%d шт)\t{AFAFAF}%d из %d (%d%%)\n",global_str, Reward[i][rewOpis],Reward[i][rewPrize],RewardProgress[playerid][i],Reward[i][rewCount],100/Reward[i][rewCount]*RewardProgress[playerid][i]);
							}
						}
						SPD(playerid,0,DIALOG_STYLE_TABLIST_HEADERS,"Достижения",global_str,"Выбрать","Назад");
					}
					case 1..4: return SCM(playerid, COLOR_GREY, "Скоро появится....");
				}
			}
		}
		case 4837:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
	                    if(ferman[playerid] >= 40)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 731, 1000);
	                        ferman[playerid] = 0;
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
					case 1:
	                {
	                    if(questman[playerid] >= 5)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 731, 500);
	                        questman[playerid] = 0;
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
					case 2:
	                {
	                    if(GetCount(playerid, 600) >= 2)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 731, 500);
	                        DeleteItem(playerid, 600, 2);
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
					case 3:
	                {
	                    if(GetCount(playerid, 596) >= 2)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 731, 500);
	                        DeleteItem(playerid, 596, 2);
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
					case 4:
	                {
	                    if(GetCount(playerid, 599) >= 2)
	                    {
	                        SCM(playerid, COLOR_BLUE, !"Вы успешно забрали награду!");
	                        AddItem(playerid, 731, 500);
	                        DeleteItem(playerid, 599, 2);
						}
						else SCM(playerid, COLOR_BLUE, !"Это задание не выполнено!");
					}
				}
  	 		}
		}
		case 10006:
	    {
	        if(response)
	        {
	            new count = GetCount(playerid, 778);
	            f(global_str, 256, "{FFFFFF}1. {73B461}Продать одну тушку оленя за 100.000$.\n{FFFFFF}2.{FAAC58}Обменять 150 тушек оленя на очки ночного видения\n{FFD700}У вас в наличии %d тушек оленя", count);
	            SPD(playerid, 10007, DIALOG_STYLE_LIST, !"Джозеф", global_str, !"Принять", !"Отмена");
	            SendBotMessage(playerid, "Давай выбирай.");
			}
		}
		case 10007:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
	                    if(GetCount(playerid, 778) <= 0) return SendBotMessage(playerid, "Извини, но без тушек оленя я не обменяю тебе этот аксессуар!");
	                    GiveMoney(playerid, 100000);
	                    SendBotMessage(playerid, "Спасибо!");
	                    DeleteItem(playerid, 778, 1);
					}
					case 1:
					{
					    if(GetCount(playerid, 778) <= 150) return SendBotMessage(playerid, "Извини, но без тушек оленя я не обменяю тебе этот аксессуар!");
					    AddItem(playerid, 766, 1);
	                    SendBotMessage(playerid, "Спасибо!");
	                    DeleteItem(playerid, 778, 150);
					}
				}
			}
		}
       	case 1981:
       	{
			if(!response) return false;
			new carid = GetPlayerVehicleID(playerid), i = ParkingEntered[playerid];
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z])) return false;
			switch listitem do
			{
			    case 0:
				{
					{
						SetPlayerInterior(playerid, parking[i][pVInterior]);
						SetPlayerVirtualWorld(playerid, parking[i][pVWorld]);
						
						if(carid)
						{
							SetVehiclePos(carid, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z] + 1.0);
							SetVehicleZAngle(carid, parking[i][pExit_a]);
							LinkVehicleToInterior(carid, parking[i][pVInterior]);
							SetVehicleVirtualWorld(carid, parking[i][pVWorld]);
						}
						else UpdatePlayerPos(playerid, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z] + 1.0, parking[i][pExit_a]);
						
						ParkingEntered[playerid] = i;
					}
				}
			    case 1:
				{
					SetPlayerInterior(playerid, parking[i][pVInterior]);
					SetPlayerVirtualWorld(playerid, parking[i][pVWorld]);
					if(carid)
					{
						SetVehiclePos(carid, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z] + 1.0);
						SetVehicleZAngle(carid, parking[i][pVExit_a]);
						LinkVehicleToInterior(carid, parking[i][pVInterior]);
						SetVehicleVirtualWorld(carid, parking[i][pVWorld]);
					}
					else UpdatePlayerPos(playerid, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z] + 1.0, parking[i][pVExit_a]);
					ParkingEntered[playerid] = i;
				}
			}
	   	}
	    case 9982:
	    {
	        if(!response)
				return false;

	        if(PI[playerid][pMoney] < 900) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас недостаточно денег!");
	        switch(listitem)
	        {
	            case 0: SetPlayerVirtualWorld(playerid, 1);
	            case 1: SetPlayerVirtualWorld(playerid, 2);
	            case 2: SetPlayerVirtualWorld(playerid, 3);
	        }
            UpdatePlayerPos(playerid, 1.6695, 24.3364, 1199.5938);
            SetPlayerFacingAngle(playerid, 0.2490);
            SetPlayerInterior(playerid, 1);
            _GiveGun(playerid, 46, 1);
	    }

		case 3214:
		{
			if(!response)
				return false;

			if(!strval(inputtextsave) || strval(inputtextsave) < 0 || strlen(inputtextsave) > 9) return 1;
			listitem = GetPVarInt(playerid, "listitemid");
			switch(GetPVarInt(playerid, "BuyFarmSt"))
			{
				case 0:
				{
					switch(listitem)
					{
						case 0,1:
						{
							new id;
							switch(listitem)
							{
								case 0: id = 594;
								case 1: id = 595;
							}
							if(GetCount(playerid, id) < strval(inputtextsave)) return 1;
							DeleteItem(playerid, id, strval(inputtextsave));
							AddItem(playerid, 1811, strval(inputtextsave)*fermalen[listitem]);
							FirstGiveBizMoney(-250.5787,-1362.2162,9.3715,strval(inputtextsave)*fermalen[listitem]/10);
						}
					}
				}
				case 1:
				{
					switch(listitem)
					{
						case 0..4:
						{
							new id;
							switch(listitem)
							{
								case 0: id = 596;
								case 1: id = 597;
								case 2: id = 598;
								case 3: id = 599;
								case 4: id = 600;
							}
							if(GetCount(playerid, id) < strval(inputtextsave)) return 1;
							DeleteItem(playerid, id, strval(inputtextsave));
							AddItem(playerid, 1811, strval(inputtextsave)*shafta[listitem]);
							FirstGiveBizMoney(516.3154,854.0743,-41.6358,strval(inputtextsave)*shafta[listitem]/10);
						}
					}
				}
			}
			DeletePVar(playerid, "listitemid");
			DeletePVar(playerid, "BuyFarmSt");
		}

        case 3212:
        {
			if(!response)
				return false;

			switch GetPVarInt(playerid, "BuyFarmSt") do
			{
				case 0:
				{
					switch listitem do
					{
						case 0,1:
						{
							f(global_str, 400,"\
							{FFFFFF}Введите какое количество предмета ''%s{FFFFFF}'' хотите продать Эмилио\n\
							{42B02C}Эмилио предлагает вам %d BTC за 1 штуку",
							(listitem) ? ("{ffcd66}Лён") : ("{ffcd66}Хлопок"),fermalen[listitem]);
							SPD(playerid, 3214, 1, "Какое количество вы хотите продать", global_str, "Выбрать", !"Отмена");
						}
						case 2:
						{
							if(PI[playerid][pMoney] < 4000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нету денег на покупку инструмента у Эмилио!");
							if(OBJECT_RAKE[playerid]) return SCM(playerid, COLOR_RED, "[Ошибка] У вас уже есть инструмент!");
							OBJECT_RAKE[playerid] = 1;
							GiveMoney(playerid, -4000);
							SetPlayerAttachedObject(playerid, 0, 18890, 6,0.079999,-0.054999,-0.121999,-179.600082,0.000000,176.700012,1.000000,1.000000,0.483000);
							SendBotMessage(playerid, "Отлично! Держи инструмент, с помощью него\nты сможешь собирать лён и хлопок на поле");
							SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы собрать урожай, дождитесь созревания урожая");
							SCM(playerid, COLOR_GREEN, !"[Подсказка] После того как урожай созреет, подойдите к грядке и нажмите ALT!");
							FirstGiveBizMoney(-250.5787,-1362.2162,9.3715,4000);
						}
					}
				}
				case 1:
				{
					switch(listitem)
					{
						case 0,1,2,3,4:
						{
							switch(listitem)
							{
								case 0: global_str ="{ffcd66}Камень";
								case 1: global_str ="{ffcd66}Металл";
								case 2: global_str ="{ffcd66}Бронза";
								case 3: global_str ="{ffcd66}Серебро";
								case 4: global_str ="{ffcd66}Золото";
							}
							f(global_str, 400,"\
							{FFFFFF}Введите какое количество предмета ''%s{FFFFFF}'' хотите продать Лари\n\
							{42B02C}Лари предлагает вам %d BTC за 1 штуку",
							global_str,shafta[listitem]);
							SPD(playerid, 3214, 1, "Какое количество вы хотите продать", global_str, "Выбрать", !"Отмена");
						}
						case 5:
						{
							if(PI[playerid][pMoney] < 4000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нету денег на покупку инструмента у Эмилио!");
							if(OBJECT_SLEGAN[playerid]) return SCM(playerid, COLOR_RED, "[Ошибка] У вас уже есть инструмент!");
							OBJECT_SLEGAN[playerid] = 1;
							GiveMoney(playerid, -4000);
							SetPlayerAttachedObject(playerid,0,19631,6,0.066999,0.029999,0.068000,-86.099990,-91.900001,0.500000,0.852000,0.483000,1.307000);
							SendBotMessage(playerid, "Отлично! Держи инструмент, с помощью него\nты сможешь добыть камень, металл и другие полезные ископаемые на месторождениях");
							SCM(playerid, COLOR_GREEN, !"[Подсказка] Чтобы добыть полезные ископаемые, подойдите к месторождению и нажмите ALT!");
							FirstGiveBizMoney(516.3154,854.0743,-41.6358,4000);
						}
					}
				}
			}
			SetPVarInt(playerid, "listitemid", listitem);
        }
	    
	    case 6681:
	    {
	        if(!response) return false;
			else if(COMPLAINTS + 1 > MAX_COMPLAINTS) return false;

	        if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 60)
				return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Жалоба должна состоять с 6 до 60 символов!");

	        f(global_str, 256, "\n{8FF591}%s{FFFFFF}: %s", PN(playerid), inputtextsave);
	        strcat(zalobi[COMPLAINTS], global_str);
	        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно оставили жалобу для Мэра!");
	        GameTextForPlayer(playerid, !"Successful", 0, 1);
		    COMPLAINTS ++;
		    SetPVarInt(playerid, !"zaloba", Global_Time + 3600);
	    }
	    case 6682:
	    {
			if(!response) return false;
			switch listitem do
			{
				case 0:
				{
                    if(Int_GetPlayerData(playerid, !"zaloba") > Global_Time) return SCM(playerid, COLOR_VALIK, !"[Ошибка] {FFFFFF}Оставлять жалобы, можно 1 раз в час!");
                    SPD(playerid, 6681, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}Опишите жалобу в нескольких словах!\nВсе жалобы проверяются мэром и его заместителем\n{8FF591}Максимальная длина жалобы 60 символов!\n\n", !"Принять", !"Отмена");
				}
				case 1:
				{
					global_str = "\n\n\n{FFFFFF}";
					
					for(new i; i < COMPLAINTS; i++)
						strcat(global_str, zalobi[i]);
					
					strcat(global_str, "\n\n\n");
				    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Жалобы", global_str, !"Закрыть", !"");
				}
			}
	    }

	    case 9989:
		{
			if(!response)
				return false;
			
			new hId = HouseEntered[playerid];

			if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[hId][hExit_X], HouseInfo[hId][hExit_Y], HouseInfo[hId][hExit_Z]))
				 return false;

			switch listitem do
			{
				case 0:
				{
					SetPlayerVirtualWorld(playerid, HouseInfo[hId][hType] != 2 ? 0 : HouseInfo[hId][hkvInt]), SetPlayerInterior(playerid, 0);
					UpdatePlayerPos(playerid, HouseInfo[hId][hEnter_X], HouseInfo[hId][hEnter_Y], HouseInfo[hId][hEnter_Z], -1);
					HouseEntered[playerid] = -1;
				}
				
				case 1:
				{
				    if(!HouseInfo[hId][hPodval]) 
						return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В этом доме нет подвала, его нужно построить!");
				    
					UpdatePlayerPos(playerid, 1079.0709, 937.4053, 1604.8663, 373.3650);
				}
				
				case 2:
				{
					if(!HouseInfo[hId][hMainingInstalling]) 
						return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В этом доме нет подвала с вентиляцией, его нужно построить!");
					
					else if(HouseInfo[hId][hMainingInstalling_time] > 0)
						return SCMF(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Подвал этого дома находится в строительстве! (Осталось примерно: %d час(ов))", HouseInfo[hId][hMainingInstalling_time]);

					SetPlayerInterior(playerid, 231), SetPlayerVirtualWorld(playerid, hId + 50);

					return UpdatePlayerPos(playerid, -1660.4015, -246.5375, 14.1484, 269.0527);
				}

				case 3:
				{
					if(!HouseInfo[hId][hGarage])
						return false;

					SetPlayerVirtualWorld(playerid, hId + 50), SetPlayerInterior(playerid, GaragesInteriors[HouseInfo[hId][hKlass] - 1][e_GARAGE_INTERIOR_INT]);

				    UpdatePlayerPos(
						playerid,
						GaragesInteriors[HouseInfo[hId][hKlass] - 1][e_GARAGE_INTERIOR_X],
						GaragesInteriors[HouseInfo[hId][hKlass] - 1][e_GARAGE_INTERIOR_Y],
						GaragesInteriors[HouseInfo[hId][hKlass] - 1][e_GARAGE_INTERIOR_Z] + 1.0,
						-1
					);
					
					GarageEntered[playerid] = hId;
				}
			}
		}

	    case 8172:
	    {
			if(!response) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1172.6415, -1323.3395, 15.4030)) return 1;
			switch(listitem)
			{
				case 0:
				{
					UpdatePlayerPos(playerid, -1770.4873, -2017.3481, 1500.7853);
					SetPlayerFacingAngle(playerid, 282.9354);
					SetPlayerInterior(playerid, 2);
					SetPlayerVirtualWorld(playerid, 1);
				}
				case 1:
				{
				    if(PI[playerid][pLevel] < 20 && !IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вип отделение доступно с 20 лет в штате!");
					UpdatePlayerPos(playerid, -1312.6182, 20.8936, 1597.6073);
					SetPlayerInterior(playerid, 2);
					SetPlayerFacingAngle(playerid, 182.6985);
					SetPlayerVirtualWorld(playerid, 1);
				}
			}
	    }
	    case 8173:
	    {
			if(!response) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1607.4197, 1815.2408, 10.8203)) return 1;
			switch(listitem)
			{
				case 0:
				{
					UpdatePlayerPos(playerid, -1770.4873, -2017.3481, 1500.7853);
					SetPlayerFacingAngle(playerid, 282.9354);
					SetPlayerInterior(playerid, 3);
					SetPlayerVirtualWorld(playerid, 2);
				}
				case 1:
				{
				    if(PI[playerid][pLevel] < 20 && !IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вип отделение доступно с 20 лет в штате!");
					UpdatePlayerPos(playerid, -1312.6182, 20.8936, 1597.6073);
					SetPlayerInterior(playerid, 3);
					SetPlayerFacingAngle(playerid, 182.6985);
					SetPlayerVirtualWorld(playerid, 2);
				}
			}
	    }
	    case 8174:
	    {
			if(!response) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, -2668.8684, 640.1640, 14.4531)) return 1;
			switch(listitem)
			{
				case 0:
				{
					UpdatePlayerPos(playerid, -1770.4873, -2017.3481, 1500.7853);
					SetPlayerFacingAngle(playerid, 282.9354);
					SetPlayerInterior(playerid, 3);
					SetPlayerVirtualWorld(playerid, 3);
				}
				case 1:
				{
				    if(PI[playerid][pLevel] < 20 && !IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вип отделение доступно с 20 лет в штате!");
					UpdatePlayerPos(playerid, -1312.6182, 20.8936, 1597.6073);
					SetPlayerInterior(playerid, 3);
					SetPlayerFacingAngle(playerid, 182.6985);
					SetPlayerVirtualWorld(playerid, 3);
				}
			}
	    }
		case DIALOG_ANTICHEAT_SETTINGS: // Главное меню настроек анти-чита
        {
            if(!response) // Если игрок закрыл диалог
            {
                pAntiCheatSettingsPage{playerid} = 0; // Присваиваем значение 0 переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
                return 1; // Закрываем диалог
            }

            if(!strcmp(inputtextsave, AC_DIALOG_NEXT_PAGE_TEXT)) // Если игрок нажал на кнопку перелистывания на следующую страницу
            {
                pAntiCheatSettingsPage{playerid} ++; // Инкрементируем (прибавляем 1) значение переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
            }
            else if(!strcmp(inputtextsave, AC_DIALOG_PREVIOUS_PAGE_TEXT)) // Если игрок нажал на кнопку перелистывания на предыдущую страницу
            {
                pAntiCheatSettingsPage{playerid} --; // Декрементируем (убавляем 1) значение переменной, хранящей номер страницы настроек анти-чита, на которой находится игрок
            }
            else // Если игрко выбрал какой-либо из кодов анти-чита
            {
                pAntiCheatSettingsEditCodeId[playerid] = pAntiCheatSettingsMenuListData[playerid][listitem]; // Присваиваем переменной, хранящей номер кода анти-чита, который редактирует игрок, номер кода, который он выбрал
                return ShowPlayer_AntiCheatEditCode(playerid, pAntiCheatSettingsEditCodeId[playerid]); // Показываем игроку диалог настройки кода анти-чита
            }
            return ShowPlayer_AntiCheatSettings(playerid); // Относится к выбору следующей и предыдущей страницы. Заново показываем игроку главное меню настройки анти-чита.
        }
        case DIALOG_ANTICHEAT_EDIT_CODE: // Меню настройки определённого кода анти-чита
        {
            if(!response) // Если игрок закрыл диалог
            {
                pAntiCheatSettingsEditCodeId[playerid] = -1; // Присваиваем переменной, хранящей идентификатор (ID) кода анти-чита, который редактирует игрок, занчение -1
                return ShowPlayer_AntiCheatSettings(playerid); // Показываем игроку главное меню настроек анти-чита
            }

            new
	            item = pAntiCheatSettingsEditCodeId[playerid]; // Создаём локальную переменную item, которая примет значение кода анти-чита, который редактирует игрок

            if(AC_CODE_TRIGGER_TYPE[item] == listitem) // Если игрок пытается присвоить коду уже присвоенный ему тип срабатывания
                return ShowPlayer_AntiCheatSettings(playerid); // Показываем главное меню настроек анти-чита

            if(AC_CODE_TRIGGER_TYPE[item] == AC_CODE_TRIGGER_TYPE_DISABLED && listitem != AC_CODE_TRIGGER_TYPE_DISABLED)
                EnableAntiCheat(item, 1);

            else if(listitem == AC_CODE_TRIGGER_TYPE_DISABLED)
                EnableAntiCheat(item, 0);

            AC_CODE_TRIGGER_TYPE[item] = listitem; // Если же игрок выбрал другой тип срабатывания - присваиваем его переменной

            // Форматируем запрос об обновлении данных указаного кода анти-чита в базу данных
            f(global_str, 100, "UPDATE "AC_TABLE_SETTINGS" SET `"AC_TABLE_FIELD_TRIGGER"` = '%d' WHERE `"AC_TABLE_FIELD_CODE"` = '%d'",
                listitem,
                item);

            mysql_tquery(mysql, global_str); // Отправляем запрос в базу данных
            return ShowPlayer_AntiCheatSettings(playerid); // Показываем главное меню настроек анти-чита
        }
		case 203:
		{
			if(!response) return false;

		    if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
				return 0;

			GetPVarString(playerid, "rePassword", global_str, 50);
			
			SQL("UPDATE `accounts` SET `Password` = '%s' WHERE `ID` = '%d' LIMIT 1", MD5_Hash(global_str), PI[playerid][pID]);
			
		    DPlayerData(playerid, "rePassword");
			
			return SCM(playerid, COLOR_LIGHTBLUE, !"Пароль изменен!");
		}
		case 9463:
		{
			if(!response) return callcmd::menu(playerid);
			
			return ShowPromoMenu(playerid);
		}
		case 9464, 9465, 9467, 9466, 9469, 9471..9473: PromoMenu(playerid, dialogid, listitem, response, inputtextsave);
		case 9470:
		{		
			new PromoName[30] = "#";
			
			SetString(global_str, PN(playerid));
	
			for(new i; i < strlen(global_str); i++)
			{
				if(global_str[i] == '_') strdel(global_str, i , i + 1);
				if(global_str[i] > 64 && global_str[i] < 91) global_str[i] += 32;
			}
			
			strcat(PromoName, global_str);
			strcat(PromoName, IntToStr(random(900) + 100));
			
			f(global_str, 500, "INSERT INTO `promo` (`code`,`level`,`money`,`ludi`,`ownerid`, `owner`) VALUES ('%s','1','0','0','%d', '%s')", PromoName, PI[playerid][pID], PN(playerid));
            mysql_tquery(mysql, global_str);
			
			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно создали собственный промо-код {73B461}%s{FFFFFF}. Сообщите его вашим друзьям!", PromoName);
			
			return SPD(playerid, 9463, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Любой игрок может ввести ваш промо-код в личном меню,\n{FFD476}(/mm > Промо-код){FFFFFF} если уровень игрока\nсоответствует требованиям вашего промо-кода, то игрок\nполучит бонус, вы в свою очередь будете получать\nпроцент от доната игрока в виде {FFD476}реферальных монет{FFFFFF}\n\n{D2772C}Уровень - {FFFFFF}Уровень промо-кода, при повышении которого,\nповышается бонус при использовании, процент с доната\nна максимальном (10) уровне снижается требование по\nуровню игрока с 6 до 5\n\n{D2772C}Бонус при использовании - {FFFFFF}деньги, который получит\nигрок после активации промо-кода, сумма бонуса зависит\nот уровня вашего промо-кода.\n\n{D2772C}Требования по уровню игрока - {FFFFFF}уровень, с которого\nигрок сможет активировать промо-код.\n\n{D2772C}Реферальные монеты - {FFFFFF}Общая сумма полученных монет\nот доната игроков, активировавших ваш промо-код\n\n{D2772C}Позиция в рейтинге{FFFFFF} - в первую очередь зависит от\n{FFD476}уровня промо-кода{FFFFFF} потом от {FFD476}количество активаций{FFFFFF}\nи в конце от {FFD476}баланса реферальных монет{FFFFFF}", !"Выбрать", !"Назад");
		}
		case 1: 
		{
			if(!response) 
				return ShowRegisterDialog(playerid, pTemp[playerid][tRegisterStage] < 0 ? 0 : pTemp[playerid][tRegisterStage]--);

			switch(pTemp[playerid][tRegisterStage])
			{
				case 0: 
				{
					if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 30 && !CheckPassword(inputtextsave))
						return ShowRegisterDialog(playerid, 0);

					SetString(PI[playerid][pRegistrationPass], inputtextsave);
					pTemp[playerid][tRegisterStage]++, ShowRegisterDialog(playerid, pTemp[playerid][tRegisterStage]);
				}
				case 1: PI[playerid][pSex] = listitem, pTemp[playerid][tRegisterStage]++, ShowRegisterDialog(playerid, pTemp[playerid][tRegisterStage]);
				case 2: PI[playerid][pRace] = listitem, pTemp[playerid][tRegisterStage]++, ShowRegisterDialog(playerid, pTemp[playerid][tRegisterStage]);
				case 3,4,5:
				{
					if(listitem == 1 && pTemp[playerid][tRegisterStage] == 3) return pTemp[playerid][tRegisterStage]++, ShowRegisterDialog(playerid, pTemp[playerid][tRegisterStage]);
					if(pTemp[playerid][tRegisterStage] == 4) SetString(PI[playerid][pReferalNickName], inputtextsave);
					return ShowCefPublic(playerid, (str_f("registration|%s|%s|%s", PN(playerid), PI[playerid][pRegistrationPass], PI[playerid][pReferalNickName])), "0,0,0");
				}
			}
		}
		case 377:
		{
		    if(response)
		    {
		        if(PI[playerid][pMoney]< SellGzone[playerid])return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		        new zone = GetPlayerGangZone(playerid);
		        GiveMoney(playerid,-SellGzone[playerid]);
		        GiveMoney(SellPGzone[playerid],SellGzone[playerid]);
      			GangZoneHideForAll(GangZone[zone]);
			    GangZoneShowForAll(GangZone[zone], TeamColors[PI[playerid][pMember][0]][0]);
			    new lastgang = GangZoneInfo[zone][gangOwnerId];
			    GangZoneInfo[zone][gangOwnerId] = PI[playerid][pMember][0];
			    SendTeamMessage(PI[playerid][pMember][0],COLOR_VALIK, !"Ваша банда захватила новую территорию");
                UpdateDorm(PI[playerid][pMember][0]);
			    UpdateDorm(lastgang);
			    SaveGangZone(zone);
		    }
		}
        case 556:
        {
        	if(response)
        	{
				new num;
				if(PI[playerid][pMuteTime]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете редактировать объявления, так как у вас бан чата!");
                foreach(new i: Player)
                {
                    if(AddTimeMessages[i] > 0)
                    {
                		if(num == listitem)
  						{
  						    new time = Global_Time - AddTimeMessages[i];
  						    AddId[playerid] = i;
							if(TimeMessage[playerid] > Global_Time) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Обрабатывать объявления можно раз в 10 секунд!");
  						    AddTimeMessages[AddId[playerid]] = 0;
							f(global_str, 256,"{FFFFFF}Объявление от {FFD700}%s, спустя %dc.\n{FFFFFF}Сообщение:\t{33AA33}%s\n\n{FFFFFF}Отредактируйте рекламу в нужный формат.",PN(i),time,AddMessages[i]);
							SPD(playerid,557,1,"Редактирование",global_str,"Отправить","Отклонить");
							break;
  						}
  						num ++;
					}
				}
			}
			return 1;
		}
		case 557:
		{
		    if(response)
        	{
        	    if(vipob[AddId[playerid]] > 0)
        	    {
	                foreach(new i: Player)
	                {
						if(!pTemp[AddId[playerid]][tAuthorized])return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок который отправил Объявление вышел из игры!");
						if(PI[AddId[playerid]][pPhoneInfo][0]<=0) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок который отправил Объявление вышел из игры!");
	                    if(PhoneImprovementsData[i][pdAnnouncements]==0)
	                    {
				            switch(PI[playerid][pMember][0])
				            {
				                case TEAM_RADIO: global_str = "LS";
				                case TEAM_RADIOSF: global_str = "SF";
				                case TEAM_RADIOLV: global_str = "LV";
				                default: global_str = "";
				            }
			        	    f(global_str, 400,"{FCAA4D}[VIP] Объявление: %s. Отправил: %s[%d] Тел. %d",inputtextsave,PN(AddId[playerid]),AddId[playerid],PI[AddId[playerid]][pPhoneInfo][0]);
							SCM(i,COLOR_WHITE,global_str);
							f(global_str, 400,"{C17C2D}				Отредактировал сотрудник СМИ [ %s ] : %s[%d]",global_str,PN(playerid),playerid);
							SCM(i,COLOR_WHITE,global_str);
						}
					}
					GiveMoney(playerid,GLS[20]);
					OrgInfo[PI[playerid][pMember][0]][oBank]+=GLS[20];
					f(global_str, 80,"Вы получили $%d за отредактированое вами объявление.",GLS[20]);
	                SCM(playerid,COLOR_RED,global_str);
	                AddTimeMessages[AddId[playerid]] = 0;
	                vipob[AddId[playerid]] = 0;
					if(PI[AddId[playerid]][pMoney]<GLS[20])
					{
						PI[AddId[playerid]][pCredit]+=GLS[20];
						f(global_str, 125,"[Подсказка] {FFFFFF}На ваш кредитный счет начислено %d$ т.к. у вас недостаточно средств на оплату.",GLS[20]);
						SCM(AddId[playerid],COLOR_GREY,global_str);
					}
					else GiveMoney(AddId[playerid],-25000);
					callcmd::Newsredak(playerid, "");
					TimeMessage[playerid]=Global_Time+10;
        	    }
        	    else
        	    {
	                //if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 60) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Объявление должно состоять с 6 до 60 символов!");
	                foreach(new i: Player)
	                {
						if(pTemp[AddId[playerid]][tAuthorized])return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок который отправил Объявление вышел из игры!");
						if(PI[AddId[playerid]][pPhoneInfo][0]<=0) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок который отправил Объявление вышел из игры!");
	                    if(PhoneImprovementsData[i][pdAnnouncements]==0)
	                    {
				            switch(PI[playerid][pMember][0])
				            {
				                case TEAM_RADIO: global_str = "LS";
				                case TEAM_RADIOSF: global_str = "SF";
				                case TEAM_RADIOLV: global_str = "LV";
				                default: global_str = "";
				            }
			        	    f(global_str, 400,"Объявление: %s. Отправил: %s[%d] Тел. %d",inputtextsave,PN(AddId[playerid]),AddId[playerid],PI[AddId[playerid]][pPhoneInfo][0]);
							SCM(i,COLOR_VALIK,global_str);
							f(global_str, 400,"				Отредактировал сотрудник СМИ [ %s ] : %s[%d]",global_str,PN(playerid),playerid);
							SCM(i,COLOR_VALIK,global_str);
						}
					}
					GiveMoney(playerid,GLS[19]);
					OrgInfo[PI[playerid][pMember][0]][oBank]+=20;
					f(global_str,80,"Вы получили $%d за отредактированое вами объявление.",GLS[19]);
	                SCM(playerid,COLOR_RED,global_str);
	                AddTimeMessages[AddId[playerid]] = 0;
					if(PI[AddId[playerid]][pMoney]<GLS[19])
					{
						PI[AddId[playerid]][pCredit]+=GLS[19];
						f(global_str,125,"[Подсказка] {FFFFFF}На ваш кредитный счет начислено %d$ т.к. у вас недостаточно средств на оплату.",GLS[19]);
						SCM(AddId[playerid],COLOR_GREY,global_str);
					}
					else GiveMoney(AddId[playerid],-5000);
					callcmd::Newsredak(playerid, "");
					TimeMessage[playerid]=Global_Time+10;
				}
			}
			else
			{
			    AddTimeMessages[AddId[playerid]] = 0;
			    SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы отклонили объявление!");
			    f(global_str,150,"[Информация] {FFFFFF}Ваше объявление на редакцию СМИ , отклонено редактором: %s[%d].",PN(playerid),playerid);
			    SCM(AddId[playerid],COLOR_RED,global_str);
			    callcmd::Newsredak(playerid, "");
			}
		}
		case 9663:
		{
    		if(response)
			{
			 	new carid = GetPlayerVehicleID(playerid);
			    switch(listitem)
				{
				    case 0:
				    {
				        if(IsPlayerInRangeOfPoint(playerid, 20.0, -8.7326,-368.3789,5.5178))
					    {
				        	if(FactoryMats<2000) return SPD(playerid,0,0,!"","{928989}На заводе недостаточно материалов!\n\n{E11C1C}Необходимо 20000.", !"Закрыть","");
				        	if(CarMusorCount[carid] >= 100) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
				        	SPD(playerid,0,0,!"","{928989}Вы успешно загрузили вертолет.\nВведите /carm для того чтобы выбрать организацию\nв которую надо отвезти материалы.", !"Закрыть","");
				        	CarMusorCount[carid] = 100;
				        	FactoryMats-=2000;
             				f(global_str, 256, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
							UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
							f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
							DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] >= 100) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
						    SPD(playerid,0,0,!"","{928989}Для разгрузки материалов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,-8.7326,-368.3789,5.5178); //завод
						}
				    }
					case 1:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2767.6021,-2366.5049,13.6478))
					    {
					        if(GLS[25] >= 200000) return SPD(playerid,0,0,!"","{928989}Склад армии переполнен!", !"Закрыть","");
					        if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете недостаточно материалов!", !"Закрыть","");
					        SPD(playerid,0,0,!"","{928989}Вы успешно доставили груз с материалами для изготовления оружия.", !"Закрыть","");
							GLS[25] += CarMusorCount[carid]*200;
							SaveInformation();
							CarMusorCount[carid] = 0;
					        f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
							SPD(playerid,0,0,!"","{928989}Для разгрузки материалов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
          					EnableGPSForPlayer(playerid,2767.6021,-2366.5049,13.6478);
						}
					}
					case 2:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 309.2398,2041.5328,17.6406))
					    {
					        if(GLS[26] >= 200000) return SPD(playerid,0,0,!"","{928989}Склад армии переполнен!", !"Закрыть","");
					        if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете недостаточно материалов!", !"Закрыть","");
							GLS[26] += CarMusorCount[carid]*200;
							SaveInformation();
							SPD(playerid,0,0,!"","{928989}Вы успешно доставили груз с материалами для изготовления оружия.", !"Закрыть","");
							CarMusorCount[carid] = 0;
					        f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
							SPD(playerid,0,0,!"","{928989}Для разгрузки материалов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
          					EnableGPSForPlayer(playerid,309.2398,2041.5328,17.6406);
						}
					}
					case 3:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, -1456.9603,501.4638,17.9381))
					    {
					        if(GLS[43] >= 200000) return SPD(playerid,0,0,!"","{928989}Склад армии переполнен!", !"Закрыть","");
					        if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете недостаточно материалов!", !"Закрыть","");
							GLS[43] += CarMusorCount[carid]*200;
							SaveInformation();
							SPD(playerid,0,0,!"","{928989}Вы успешно доставили груз с материалами для изготовления оружия.", !"Закрыть","");
							CarMusorCount[carid] = 0;
					        f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SPD(playerid,0,0,!"","{928989}В вертолете на достаточно места!", !"Закрыть","");
							SPD(playerid,0,0,!"","{928989}Для разгрузки материалов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
          					EnableGPSForPlayer(playerid,-1456.9603,501.4638,17.9381);
						}
					}
				}

			}
		}
		case 9653:
		{
			if(response)
			{
			    new carid = GetPlayerVehicleID(playerid);
				if(GetVehicleModelEx(GetPlayerVehicleID(playerid)) != 433) return    SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не в матовозе!");
				switch(listitem)
				{
					case 0:
					{
      					if(OrgInfo[PI[playerid][pMember][0]][oMats] < 2000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В организации недостаточно патронов!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2736.0249,-2465.7607,13.6484) || IsPlayerInRangeOfPoint(playerid, 20.0, 145.9202,1915.0007,18.9003) || IsPlayerInRangeOfPoint(playerid, 20.0, -1545.2085,451.3773,7.0315))
					    {
         					if(CarMusorCount[carid] >= 100) return SCM(playerid, 0xAFAFAFFF, "[Информация] {FFFFFF}Матовоз уже переполнен!");
					        SPD(playerid,0,0,!"","{928989}Вы успешно загрузили грузовик.\nВведите /carm для того чтобы выбрать организацию\nв которую надо отвезти патроны.", !"Закрыть","");
					        CarMusorCount[carid] = 100;
					        OrgInfo[PI[playerid][pMember][0]][oMats] -= 2000;
				        	f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
                            DisablePlayerRaceCheckpoint(playerid);
                            foreach(new i: Player)
                            {
                                if(IsAtMafia(i) || IsAtGang(i))
								{
								    if(PI[playerid][pMember][0]==TEAM_ARMY) SCM(i,COLOR_BLUE, !"Со склада Армии ЛС выехал матовоз!");
									if(PI[playerid][pMember][0]==TEAM_ARMYLV) SCM(i,COLOR_BLUE, !"Со склада Армии LV выехал матовоз!");
									if(PI[playerid][pMember][0]==TEAM_ARMYSF) SCM(i,COLOR_BLUE, !"Со склада Армии SF выехал матовоз!");
								}
                            }
					    }
						else
						{
						    if(CarMusorCount[carid] >= 100) return SCM(playerid, 0xAFAFAFFF, "[Информация] {FFFFFF}Матовоз уже переполнен, отвезите эти патроны!");
						    SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						if(PI[playerid][pMember][0]==TEAM_ARMY) EnableGPSForPlayer(playerid,2736.0249,-2465.7607,13.6484);
       						if(PI[playerid][pMember][0]==TEAM_ARMYSF) EnableGPSForPlayer(playerid,-1545.2085,451.3773,7.0315);
       						if(PI[playerid][pMember][0]==TEAM_ARMYLV) EnableGPSForPlayer(playerid,145.9202,1915.0007,18.9003);
						}
					}
					case 1:
					{
					    if(OrgInfo[TEAM_LSPD][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 1591.2311,-1607.0784,13.8266))
					    {
					        if(OrgInfo[TEAM_LSPD][oMats] > 30000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Склад организации переполнен!");
					        if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
					        f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад Полиции ЛС.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_LSPD][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_LSPD][oBank] -= GLS[17];
							SaveOrg(TEAM_LSPD);
							CarMusorCount[carid] = 0;
					        f(global_str, 80, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
    						RemovePlayerMapIcon(playerid, 98);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Информация] {FFFFFF}В вашем матовозе недостаточно патронов!");
							SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
          					EnableGPSForPlayer(playerid,1591.2311,-1607.0784,13.8266);
						}
					}
					case 2:
					{
					    if(OrgInfo[TEAM_RCPD][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 633.8635,-571.5131,16.7726))
					    {
					        if(OrgInfo[TEAM_RCPD][oMats] > 30000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Склад организации переполнен!");
					        if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
							f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад RCPD.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_RCPD][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_RCPD][oBank] -= GLS[17];
							SaveOrg(TEAM_RCPD);
							CarMusorCount[carid] = 0;
					        f(global_str, 50, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
    						RemovePlayerMapIcon(playerid, 98);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Информация] {FFFFFF}В вашем матовозе недостаточно патронов!");
    						SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,633.8635,-571.5131,16.7726);
						}
					}
					case 3:
					{
					    if(OrgInfo[TEAM_FBI][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 289.8648,-1630.2656,33.7695))
					    {
					        if(OrgInfo[TEAM_FBI][oMats] > 30000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Склад организации переполнен!");
          					if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
							f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад FBI.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_FBI][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_FBI][oBank] -= GLS[17];
							SaveOrg(TEAM_FBI);
							CarMusorCount[carid] = 0;
					        f(global_str, 50, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
							DisablePlayerRaceCheckpoint(playerid);
							RemovePlayerMapIcon(playerid, 98);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
    						SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,289.8648,-1630.2656,33.7695);
						}
					}
					case 4:
					{
					    if(OrgInfo[TEAM_SFPD][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, -1570.3193,663.1941,7.1875))
					    {
					        if(OrgInfo[TEAM_SFPD][oMats] > 30000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Склад организации переполнен!");
					        if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
							f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад SFPD.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_SFPD][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_SFPD][oBank] -= GLS[17];
							SaveOrg(TEAM_SFPD);
							CarMusorCount[carid] = 0;
					        f(global_str, 50, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
    						SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,-1570.3193,663.1941,7.1875);
						}
					}
					case 5:
					{
					    if(OrgInfo[TEAM_LVPD][oBank] < GLS[17]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Организация не может принять/оплатить вашу работу!");
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2234.3909,2453.2590,10.5299))
					    {
					        if(OrgInfo[TEAM_LVPD][oMats] > 30000) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}Склад организации переполнен!");
					        if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
							f(global_str,80,"[Информация] {FFFFFF}Вы получили премию в размере: $%d",GLS[17]);
							SCM(playerid, COLOR_VALIK, global_str);
							SPD(playerid,0,0,!"","{928989}Вы успешно перевезли 2 000 патронов на склад LVPD.", !"Закрыть","");
							GiveMoney(playerid,GLS[17]);
							OrgInfo[TEAM_LVPD][oMats] += CarMusorCount[carid]*20;
							OrgInfo[TEAM_LVPD][oBank] -= GLS[17];
							SaveOrg(TEAM_LVPD);
							CarMusorCount[carid] = 0;
					        f(global_str, 50, "Загружено: %d%/100%", CarMusorCount[carid]);
							UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
    						DisablePlayerRaceCheckpoint(playerid);
						}
						else
						{
						    if(CarMusorCount[carid] < 1) return SCM(playerid, 0xAFAFAFFF, "[Ошибка] {FFFFFF}В вашем матовозе недостаточно патронов!");
    						SPD(playerid,0,0,!"","{928989}Для разгрузки патронов отправляйтесь по красному чекпоинту и  введите /carm ,\nПосле чего и выберите нужный вам пункт!", !"Закрыть","");
       						EnableGPSForPlayer(playerid,2234.3909,2453.2590,10.5299);
						}
					}
				}
			}
		}
		case 2:
		{
			if(!response) return SPD(playerid, 7722, DIALOG_STYLE_LIST, !"{FFFFFF}Контекст | {ae433d}Авторизация", !"{FFFFFF}1. {ae433d}Покинуть игру\n{FFFFFF}2. Восстановить аккаунт | {4c75a3}ВКонтакте\n{FFFFFF}3. Восстановить аккаунт | {ae433d}Почта", !"Выбрать", !"Назад");
			if(!strlen(inputtextsave)) return ShowPlayerIdAuthorization(playerid, 0, true);
			ShowCefPublic(playerid, (str_f("authorization|%s|%s", PN(playerid), inputtextsave)), "0,0,0");
		}
		case 7721:
		{
			if(!response)
				return ShowRegisterDialog(playerid, pTemp[playerid][tRegisterStage]);
			
			return SCM(playerid, -1, "Регистрация аккаунта прервана. Вы были отключены от сервера"), Kick(playerid);
		}
		case 7722:
		{
			if(!response) return ShowPlayerIdAuthorization(playerid, GetPlayerLauncher(playerid), true);
			switch listitem do
			{
				case 0:
				{
					SCM(playerid, -1, "Авторизация аккаунта прервана. Вы были отключены от сервера");
					Kick(playerid);
				}
				case 1: 
				{
					return PlayerDialogVK(playerid, 4);
				}
				case 2:
				{
					if(strcmp("-", PlayerMail[playerid], true) == 0) ShowPlayerIdAuthorization(playerid, GetPlayerLauncher(playerid), true), SCM(playerid, -1, "К данной странице не привязана почта");
					else
					{
						new code = random(999999)+100000;
						SetPVarInt(playerid, "backAccount", code);
						f(global_str, 256, "Данный адрес эл.почты указали при регистрации на %s.\nКод: %d\nАккаунт:%s\nСервер:%s", Setting_Server[3], code, PN(playerid), Setting_Server[7]);
						SendMail(PlayerMail[playerid], Setting_Server[1], Setting_Server[7], "Arizona Role Play Supreme", global_str);
						return SPD(playerid, 7725, DIALOG_STYLE_INPUT, "{FFFFFF}Восстановление | {ae433d}Почта", "\n{ffffff}Через почтовый сервис Вам на почту\n{4c75a3}был {ffffff}отправлен {ae443d}код{ffffff},\nкоторый необходимо ввести в строку ниже.\n\n{ae443d}Чтобы свернуть игру и зайти в браузер,\nиспользуйте комбинацию клавиш: ALT + TAB!\n\n", "»", "«");
					}
				}
			}
			return false;
		}
		case 381:
		{
		    if(response)
			{
				switch(listitem)
				{
				    case 0:
				    {
						dilo[playerid]=1;
				        SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы выбрали пункт: ремонт транспорта. Нажимайте клавишу ALT , чтобы ремонтировать авто!");
			 			SetPlayerChatBubble(playerid, "Взял инструменты для ремонта транспорта", COLOR_PURPLE, 10.0, 5000);
				    }
				    case 1:
				    {
            			dilo[playerid]=2;
				        SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы выбрали пункт: ремонт двигателя. Нажимайте клавишу ALT , чтобы ремонтировать двигатель!");
				        SetPlayerChatBubble(playerid, "Взял инструменты для ремонта двигателя", COLOR_PURPLE, 10.0, 5000);
				    }
				}
			}
		}
		case 982:
		{
		    if(response)
			{
			    if(PlayerJob[playerid] != JOB_NALOG) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не работаете в Налоговой");
			    new num;
    			for(new houseid; ++houseid < MAX_HOUSES;)
				{
				    if(HouseInfo[houseid][hNalog2] < 200 || strcmp(HouseInfo[houseid][hOwner],"The State",true) == 0 ) continue;
				    if(num == listitem)
				    {
						HouseNalog[playerid] = houseid;
						HouseNalogState2[playerid] = 1;
				        EnableGPSForPlayer(playerid, HouseInfo[houseid][hEnter_X], HouseInfo[houseid][hEnter_Y], HouseInfo[houseid][hEnter_Z]);
				        SPD(playerid,0,0,"Налоговая","Отправляйтесь по отметке на карте для выдачи счета на оплату комунальных услуг", !"Принять","");
	       				return 1;
					}
					num++;
				}
			}
		}
		case 784:
		{
		    if(response)
			{
			    new biz = ShowPBiz[playerid];
				if(PI[playerid][pMoney] < BizData[biz][bLevel])return SendBotMessage(playerid,"Извините, но у вас нет нужной суммы денег!");
				f(global_str, 150, "оплата налога на бизнес idb:%d", biz);
				GiveMoney(playerid, ImprovementsData[playerid][imFreeloader] ? -BizData[biz][bLevel]/2:-BizData[biz][bLevel], global_str);
				OrgInfo[GLS[13]][oBank] += BizData[biz][bLevel];
				SaveOrg(GLS[13]);
				BizData[biz][bLevel] = 0;
       			SCM(playerid,COLOR_GREEN, !"Вы успешно погасили неоплаченые счета за бизнес.");
       			SaveBusiness(biz);
       			if(!ImprovementsData[playerid][imFreeloader])SCM(playerid,COLOR_GREEN, !"Обратите внимание что имея улучшение халявщик, вы будете платить в 2 раза меньше!");
       			SendBankBot(playerid);
   				return 1;
			}
		}
		case 713:
    	{
			if(response)
	  		{
		    	new para1 = PanelPlayerID[playerid];
	    		switch(listitem)
				{
					case 0:
					{
						if(GetTeamID(playerid) == TEAM_BANK && PI[playerid][pRank]>=6)
					 	{
					        if(PI[para1][pCredit] == 0)
							{
								SPD(playerid,227,1,"Кредит","{FFFFFF}Какую сумму вы хотите выдать?\n\nПримечание: максимальная сумма от $5000 до $100000","Далее", !"Отмена");
	       						f(global_str, 80, "%s достал банковские документы!", PN(playerid));
								ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
							}
							else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого человека уже есть задолженность в банке!");

				 		}
				 		else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Либо вы не состоите в банке ,либо ваш ранг ниже 6-го!");
			 		}
					case 1:
					{
						if(GetTeamID(playerid) == TEAM_BANK)
					 	{
						 	f(global_str,150,"{FFFFFF}Долг(кредит) игрока: %s составляет: {33CCFF}%d\n",PN(para1),PI[para1][pCredit]);
							SPD(para1,0,0,"Банк",global_str, !"Принять","");
							SPD(playerid,0,0,"Банк",global_str, !"Принять","");
							f(global_str, 50, "%s что то показывает ", PN(playerid));
							ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						}
					}
					case 2:
					{
						if(GetTeamID(playerid) == TEAM_BANK)
					 	{
						 	f(global_str, 150,"{FFFFFF}На Cчету: {33CCFF}%d\n",PI[para1][pBank]);
							SPD(para1,0,0,"Банк",global_str, !"Принять","");
							SPD(playerid,0,0,"Банк",global_str, !"Принять","");
							f(global_str, 150, "%s что то показывает ", PN(playerid));
							ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						}
					}
					case 3:
					{
						if(PI[para1][pBankPass] !=0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека уже есть банковская карта!");
						if(PI[para1][pMoney]<3000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека недостаточно средств! [3 000$]");
						SPD(playerid,0,0,!"","{A99E9E}Вы успешно показали(а) форму оформления банковской карты.", !"Закрыть","");
						SPD(para1,779,0,"","{FFFFFF}Вы действительно хотите получить банковскую карту?\nПри получении банковской карты вы принимаете все условия в использовании наших услуг.\nВы установите пароль на карту, чтобы защитить ее от злоумышлеников,\nа следующие подробности вы можете узнать в работников банка.", !"Принять", !"Отмена");
   						f(global_str, 300, "%s передал документы для получения банковской карты игроку %s!", PN(playerid),PN(para1));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                        PanelPlayerID[para1]=playerid;
					}
					case 4:
					{
					    if(PI[para1][pBankPass] ==0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека нет банковской карты!");
					    if(PI[para1][pMoney]<30000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека недостаточно средств! [30 000$]");
						///
						if(!ProxDetectorS(3.0, playerid, para1, 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока!");
					    f(global_str, 300, "%s предложил %s восстановить пароль на получение банковской карты", PN(playerid),PN(para1));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						SPD(playerid,0,0,!"","{73B461}Вы успешно отправили предложение на смену пароля.", !"Закрыть","");
						PanelPlayerID[para1]=playerid;
						f(global_str,300,"{FFFFFF}Банкир {73B461}%s{FFFFFF} , предложил вам восстановить пароль от банковской карты.\n\t\t\t\tСтоимость услуги: {73B461}30 000${FFFFFF}.",PN(playerid));
						SPD(para1,887,0,"",global_str, !"Принять", !"Отмена");
					}
					case 5:
					{
					    if(PI[para1][pBankPass] == 0)
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого человека нет банковской карты!");
						if(!ProxDetectorS(3.0, playerid, para1, 1))
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
					    f(global_str, 300, "%s предложил %s положить деньги на депозит", PN(playerid), PN(para1));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						SPD(para1, 55, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 5 000 000$ {FFFFFF}для пополнения депозита\n\n[{FFF700}i] {FFFFFF}Пополнять депозит можно 1-ин раз в час!\n[{FFF700}i] {FFFFFF}После пополнения депозита, вы не сможете снять с него деньги,\nв течение 5-ти игровых часов!\n[{FFF700}i] {FFFFFF}Ежечасовой процент зависит от вашей влиятельности ((VIP))\n\n", !"Далее", !"Отмена");
					}
					case 6:
					{
					    if(PI[para1][pBankPass] == 0)
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого человека нет банковской карты!");
						if(!ProxDetectorS(3.0, playerid, para1, 1))
							return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
						if(PI[para1][pDepositInfo][2])
						{
						    f(global_str, 325, "[Ошибка] {FFFFFF}Данному человеку еще нельзя снимать деньги с депозита, ему осталось %i часов!", PI[para1][pDepositInfo][2]);
							return SCM(playerid, COLOR_RED, global_str);
						}
					    f(global_str, sizeof(global_str), "%s предложил %s забрать деньги с депозита", PN(playerid), PN(para1));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						SPD(para1, 57, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 5 000 000$ {FFFFFF}для получения денег со своего депозита.\n\n", !"Далее", !"Отмена");
					}
				}
			}
	 	}
   		case 1651:
	 	{
	 	    if(response)
	  		{
				static NName[20]; new para1 = PanelPlayerID[playerid];
				if(para1==-1)return 0;
				if(GetTeamID(playerid) == TEAM_LICENSERS) NName = "Лицензер";
				else if(PI[playerid][pAdmin] > 0) NName = "Администратор";
				switch(Ingatre[playerid])
				{
                    case 1:
				    {
			            if(PI[playerid][pMoney]<1000)return 0;
						GivePlayerLic(playerid, 0);
						GiveMoney(playerid,-1000);
						GiveMoney(para1,1000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на авто игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);

						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на авто со стоимостью 1000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
				 	}
				 	case 2:
					{
					    if(PI[playerid][pMoney]<2000)return 0;
						GivePlayerLic(playerid, 1);
						GiveMoney(playerid,-2000);
						GiveMoney(para1,2000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на мото игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);
						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на мото со стоимостью 2000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
				 	}
				 	case 3:
					{
					    if(PI[playerid][pMoney]<1000)return 0;
						GivePlayerLic(playerid, 4);
						GiveMoney(playerid,-1000);
						GiveMoney(para1,1000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на рыбалку игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);
						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на рыбалку со стоимостью 1000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
					}
				  	case 4:
					{
					    if(PI[playerid][pMoney]<5000)return 0;
						GivePlayerLic(playerid, 3);
						GiveMoney(playerid,-5000);
						GiveMoney(para1,5000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на плавание игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);
						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на плавание со стоимостью 5000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
					}
				 	case 5:
					{
					    if(PI[playerid][pMoney]<10000)return 0;
						GivePlayerLic(playerid, 5);
						GiveMoney(playerid,-10000);
						GiveMoney(para1,10000);
						f(global_str, 256,"[Информация] {FFFFFF}Вы успешно продали лицензию на оружие игроку %s.",PN(playerid));
						SCM(para1,COLOR_VALIK,global_str);
						f(global_str, 300,"[Информация] {FFFFFF}%s %s выдал вам лицензию на оружие со стоимостью 10000$",NName,PN(para1));
						SCM(playerid,COLOR_VALIK,global_str);
					}
					default: return 0;
				}
				PanelPlayerID[para1]=-1;
				PanelPlayerID[playerid]=-1;
			}
	 	}
		case 6:
	    {
			if(response)
	  		{
	  		    new para1 = PanelPlayerID[playerid];
				static NName[20];
				if(GetTeamID(playerid) == TEAM_LICENSERS) NName = "Лицензер";
				else if(PI[playerid][pAdmin] > 0) NName = "Администратор";
				switch(listitem)
			 	{
				    case 0:
				    {
				        if(!GetPlayerLicense(para1, 0))
				        {
				            Ingatre[para1]=1;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на авто за 1000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на вождение за {52A32A}1000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на авто.");
				 	}
				 	case 1:
					{
					    if(!GetPlayerLicense(para1, 1))
					    {
				            Ingatre[para1]=2;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на мото за 2000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на мото за {52A32A}2000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на мото.");
				 	}
				 	case 2: return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Министерство безопасности штата All, запретила продажу лицензий на полеты. Получить лицензию можно в авиашколе!");
				 	case 3:
					{
					    if(!GetPlayerLicense(para1, 4))
					    {
							Ingatre[para1]=3;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на рыбалку за 1000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на рыбалку за {52A32A}1000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на рыбалку");
					}
				  	case 4:
					{
					    if(!GetPlayerLicense(para1, 3))
					    {
							Ingatre[para1]=4;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на плавание за 5000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на плавание за {52A32A}5000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на водный транспорт");
					}
				 	case 5:
					{
					    if(!GetPlayerLicense(para1, 5))
					    {
							Ingatre[para1]=5;
							f(global_str, 256,"[Информация] {FFFFFF}Вы предложили %s купить лицензию на оружие за 10000$.",PN(para1));
				            SCM(playerid,COLOR_GREY,global_str);
				            f(global_str, 300,"{FFFFFF}Лицензер: {52A32A}%s{FFFFFF} предлагает вам купить у него лицензию на оружие за {52A32A}10000${FFFFFF}.",PN(playerid));
				            SPD(para1,1651,0,"",global_str,"Согласен","Нет");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока уже есть лицензия на оружие");
					}
					default: return 0;
				}
			}
			return 1;
		}
		case 8:
		{
		    if(!response) return 1;
	        new invite = InviteOffer[playerid];
	        if(invite != INVALID_PLAYER_ID)
	        {
		        PI[playerid][pMember][0] = GetTeamID(invite);
		        PI[playerid][pDCTime] = 2;
		        SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена организация. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
		        PI[playerid][pRank] = 1;
		        PI[playerid][pFWarns] = 0;
		        f(global_str, 256, "[Информация] {FFFFFF}%s принял ваше предложение вступить к вам в организацию.", PN(playerid));
		        SCM(invite, COLOR_VALIK, global_str);
		        f(global_str, 256, "[Информация] {FFFFFF}Вы приняли предложение %s вступить в организацию.", PN(invite));
		        SCM(playerid, COLOR_VALIK, global_str);
		        f(global_str, 300, "Приветствуем нового члена нашей организации %s, которого пригласил: %s[%d].", PN(playerid), PN(invite), invite);
		        SendTeamMessage(GetTeamID(playerid), COLOR_VALIK, global_str);
		        InviteOffer[playerid] = INVALID_PLAYER_ID;
				ResetSpawnInfo(playerid, GetTeamID(invite));
				if(IsAtGang(invite))
				{
				    TeamDuty{playerid} = true;
				    SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
				    SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
				    TogglePlayerControllable(playerid, true);
				}
				else if(IsAtMafia(invite))
				{
				    SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
				    TeamDuty{playerid} = true;
				    SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
				    TogglePlayerControllable(playerid, true);
				}
		    }
		    else
		    {
		        if(invite != INVALID_PLAYER_ID)
		        {
			        f(global_str, 256, "[Информация] {FFFFFF}%s отклонил ваше предложение вступить к вам в организацию.", PN(playerid));
			        SCM(invite, COLOR_VALIK, global_str);
			        f(global_str, 256,"[Информация] {FFFFFF}Вы отклонили предложение %s вступить к нему в организацию.", PN(invite));
			        SCM(playerid, COLOR_VALIK, global_str);
					InviteOffer[playerid] = INVALID_PLAYER_ID;
					InviteOffer[invite] = INVALID_PLAYER_ID;
				}
		    }
		    return 1;
		}
		case 11:
		{
		    new carid = GetPlayerVehicleID(playerid);
			if(response)
			{
       			if(IsASellCar(carid))
			    {
			        if(IsValidPassport(playerid))
			        {
					    if(PI[playerid][pMoney] >= GetCarPrice(GetVehicleModelEx(carid)))
					    {
					        if(IsValidNumberCars(playerid))
							{
								new Float:x, Float:y, Float:z, model = GetVehicleModelEx(carid);
								GetCoordBonnetVehicle(carid, x, y, z, 6.0);
								SetVehiclePos(carid, x, y, z);
								PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
								SPD(playerid,0,0,!"","			---------( {FF2121}Обратите внимание!{FFFFFF})---------\n\nЕсли вы не припаркуете свою машину, то в течение определенного времени её отвезут на штрафстоянку!\n{d7d27f}Для того чтобы припарковать машину используйте: /park.{FFFFFF}\nКогда вы припаркуете машину, она будет спавнится в том месте, после каждого входа в игру.\nРекомендуем парковать машину:\n\n     {A7A7A4}-Возле дома\n     -На парковке\n     -В гараже.{a25552}\n\nМашины запрещено парковать в общественных местах!", !"Принять","");
								SCM(playerid,-1, !"{73B461}Поздравляем! Теперь этот транспорт принадлежит вам!");
								SCM(playerid,-1, !"Чтобы вставить/вытащить ключи в зажигание введите {73B461}/key");
								SCM(playerid,-1, !"Для управления своим транспортом используйте {73B461}/cars");
								
								switch GetCarSalon(model) do
								{
									case 1:	FirstGiveBizMoney(-479.3823,-542.8606,25.5634, GetCarPrice(model)), global_str = "Эконом";
									case 2:	FirstGiveBizMoney(959.6949,2089.2361,10.8409, GetCarPrice(model)), global_str = "Премиум";
									case 3:	FirstGiveBizMoney(-2666.3237,12.3889,4.3339, GetCarPrice(model)), global_str = "Элитного";
									case 4:	FirstGiveBizMoney(-553.85,2593.81,53.9, GetCarPrice(model)), global_str = "Luxe";
									default: global_str = "None";
								}
								
								f(global_str, 150,"[A] %s[%d] купил транспорт по госу (%s), цена: %d$, салон: Автосалон %s класса", PN(playerid), playerid, GetVehicleName(carid), GetCarPrice(model), global_str);
								SendAdminsMessage(COLOR_GREEN,global_str);
					            f(global_str, 200, "%s[%i] словил автомобиль по гос. цене: %d$", PN(playerid), playerid, GetCarPrice(model));
					            ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
									
							    if(!IsAOwnableCar(carid))
								{
									SetNull(model);
									SellCard[carid] = -1;
									
									new ID = FindFreeCarSlot();
									CarInfo[ID][cModel] = model;
									CarInfo[ID][cColor_1] = 1;
									CarInfo[ID][cColor_2] = 1;
									CarInfo[ID][cParkedInPark] = 1;
									CarInfo[ID][cCost] = GetCarPrice(model);
									CarInfo[ID][cInterior] = GetPlayerInterior(playerid);
									CarInfo[ID][cVirtualWorld] = GetPlayerVirtualWorld(playerid);
									VehicleInfo[carid][vID] = ID;
									GiveMoney(playerid, -CarInfo[ID][cCost]);
									SetString(CarInfo[ID][cOwner], PN(playerid));
									SetString(CarInfo[ID][cKeyer], "The State");
									OwnableCar[ID] = carid;
									
									f(global_str, 2000, "INSERT INTO `ownable` (`Model`, `Owner`,`Cost`,`Keyer`, `Milage`, `Shtraf`, `VirtualWorld`, `Interior`, `ParkedInGarage`, `ParkedInParking`, `Color_1`, `Color_2`) VALUES ('%d', '%s','%d','%s', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d')",
									model,
									CarInfo[ID][cOwner],
									CarInfo[ID][cCost],
									CarInfo[ID][cKeyer],
									CarInfo[ID][cMilage],
									CarInfo[ID][cShtraf],
									CarInfo[ID][cVirtualWorld],
									CarInfo[ID][cInterior],
									CarInfo[ID][cParkedInGarage],
									CarInfo[ID][cParkedInParking],
									CarInfo[ID][cColor_1],
									CarInfo[ID][cColor_2]);
									
									new Cache:result = mysql_query(mysql, global_str);
	
									CarInfo[ID][cID] = cache_insert_id();
									
									cache_delete(result); 
									
									GetNumberCars(playerid, PI[playerid][pCars]);
									UpdateCarInfo(carid);
								}
								else
								{
								    new numberd = GetVehicleID(carid);
								  
							        SetCarOwner(carid, PN(playerid));
									SetCarKeyer(carid, "The State");
									SaveOwnableCar(numberd);
									
									GetNumberCars(playerid, PI[playerid][pCars]);
									GiveMoney(playerid, -CarInfo[numberd][cCost]);
									UpdateCarInfo(carid);
									CarInfo[numberd][cParkedInPark] = 1;
								}
								
								
								amlf("[%d] словил автомобиль <a href=../pages/carlog.php?id=%d>%d</a> по гос. цене: %d$", 0, PN(playerid), "", playerid, CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cCost]);
							}
							else
							{
							    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
								SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш уровень VIP недостаточно высок чтобы иметь столько авто!");
								SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Возможно у вас нет дома, он даст вам +1 слот к авто");
								RemovePlayerFromVehicle(playerid);
							}
					    }
					    else
					    {
					        PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
					        SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
					        RemovePlayerFromVehicle(playerid);
					    }
				    }
				    else
					{
					    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
					    SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет паспорта для покупки этого транспорта, получить его можно в мэрии.");
						RemovePlayerFromVehicle(playerid);
					}
			    }
			    else
				{
				    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				    SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Этот транспорт не для продажи.");
					RemovePlayerFromVehicle(playerid);
				}
			}
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				RemovePlayerFromVehicle(playerid);
			}
			return 1;
		}

		case 9619:
		{
			if(!response) return false;
			return ShowEnchantWork(playerid, listitem);
		}
		
		case 8510:
		{
			if(!response) 
				return false;
			
			new biz = BizEntered[playerid];
			
			if(biz == -1 or !(BizData[biz][bState] == 24))
				return false;
				
			if(PI[playerid][pMoney] < BizData[biz][bItem][1])
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
			GiveBizMoney(biz, BizData[biz][bItem][1]);
			GiveMoney(playerid, -BizData[biz][bItem][1], "ремонт аксессуара в точильне");
			
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Прочность предмета успешно восстановлена!"), Inventory[playerid][5][PickInvent[playerid]] = 100;
			
			return InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
		}
			
		case 8999, 8997: if(response) return BuyVIP(playerid, dialogid, dialogid == 8999 ? 5 : 6);
		
		//map
		case 7787:
		{
			if(!response or !CheckAdm(playerid, 7)) 
				return false;
				
			switch listitem do
			{
				case 0:
					return SPD(playerid, 7788, DIALOG_STYLE_INPUT, !"Создание нового объекта", !" Введите ID модели объекта:", !"Далее", !"Назад");
					
				case 2:
					return SelectObject(playerid);
					
				case 3:
					return AdminMapping_ListObject(playerid, 0);
					
				case 4:
					return AdminMapping_ListObject(playerid, 0, 1);
					
				case 5:
					return SPD(playerid, 7790, DIALOG_STYLE_LIST, !"Admin Mapping", !"- удалить свои объекты\n- удалить объекты администратора\n- удалить все объекты", !"Выбрать", !"Назад");
					
			}
		}
		
		case 7788:
		{
			if(!response)
				return false;
				
			else if(!strval(inputtextsave))
				return SPD(playerid, 7788, DIALOG_STYLE_INPUT, !"Создание нового объекта", !" Введите ID модели объекта:", !"Далее", !"Назад"); 
				
			spdList(playerid, 0, strval(inputtextsave));
			
			return SPD(playerid, 7789, DIALOG_STYLE_INPUT, !"Создание нового объекта", !" Введите краткое описание объекта: *не более 32 символов*\n(для чего он создан, праздник какой-то или еще что-то)", !"Создать", !"Назад");
		}
		
		case 7789:
		{
			if(!response)
				return false;
				
			else if(!(1 <= strlen(inputtextsave) <= 32))
				return SPD(playerid, 7789, DIALOG_STYLE_INPUT, !"Создание нового объекта", !" Введите краткое описание объекта: *не более 32 символов*\n(для чего он создан, праздник какой-то или еще что-то)", !"Создать", !"Назад");
		
			return AdminMapping_Create(playerid, gpdList(playerid, 0), inputtextsave);
		}
		
		case 7790:
		{
			if(!response)
				return false;
				
			switch listitem do
			{
				case 0:
					return SPD(playerid, 7791, DIALOG_STYLE_MSGBOX, !"", !"Вы подтверждаете удаление всех объектов, которые вы создали?", !"Удалить", "Отмена");
					
				case 1:
					return SPD(playerid, 7794, DIALOG_STYLE_INPUT, !"", !"Введите UID администратора чьи объекты хотите удалить:", !"Удалить", "Отмена");
			}
		}
		
		case 7791:
		{
			if(!response)
				return false;
				
			return SCMF(playerid, -1, "[Admin Mapping] Все вами созданные объекты удалены. Количество: %d.", AdminMapping_Remove( PI[playerid][pID] ));
		}
		
		case 7792:
		{
			if(!response)
				return false;
			
			if(listitem < 25)
				return AdminMapping_Edit(playerid, gpdList(playerid, listitem) );
					
			else if(listitem == 25)
				return AdminMapping_ListObject(playerid, AdminMapping_List[playerid][0] + 1, AdminMapping_List[playerid][1]);
		
			return true;
		}
		
		case 7793:
		{
			if(!response)
				return false;
				
			new idx = gpdList(playerid, 0);
			
			switch listitem do
			{
				case 0:
					return AdminMapping_ListObject(playerid, 0);
					
				case 1:
					return UpdatePlayerPos(playerid, AdminMapping[idx][AM_Pos][0], AdminMapping[idx][AM_Pos][1], AdminMapping[idx][AM_Pos][2]);
					
				case 2:
				{
					SCMF(playerid, -1, "[Admin Mapping] {FFFFFF}Вы удалили объект (%d*%d).", idx, AdminMapping[idx][AM_UID]);
					
					DestroyDynamicObject(AdminMapping[idx][AM_Object]), AdminMapping[idx][AM_Object] = INVALID_STREAMER_ID;
					
					SQL("DELETE FROM map_objects WHERE ID = '%d'", AdminMapping[idx][AM_UID]);
					
					AdminMapping[idx][AM_Pos][0] =
					AdminMapping[idx][AM_Pos][1] =
					AdminMapping[idx][AM_Pos][2] =
					AdminMapping[idx][AM_Rot][0] =
					AdminMapping[idx][AM_Rot][1] =
					AdminMapping[idx][AM_Rot][2] = 0.0;
					
					return AdminMapping[idx][AM_UID] = 0;
				}
				
				case 10:
					return EditDynamicObject(playerid, AdminMapping[idx][AM_Object]);
			}
		}
		
		case 7794:
		{
			if(!response or !CheckAdm(playerid, 7)) 
				return false;
				
			new count = strval(inputtextsave);
			
			if(!count) 
				return SPD(playerid, 7794, DIALOG_STYLE_INPUT, !"", !"Введите UID администратора чьи объекты хотите удалить:", !"Удалить", "Отмена");
				
			return SCMF(playerid, -1, "[Admin Mapping] Все созданные объекты удалены UID: %d. Количество: %d.", count, AdminMapping_Remove( count )); 
		}
		
		case 7777:
		{
			if(!response) return false;
			switch listitem do
			{
				case 1:
				{
					if(!PI[playerid][pVkontakte])
						PlayerDialogVK(playerid, 1);
					else
						PlayerDialogVK(playerid, 2);
				}
				default: PlayerDialogVK(playerid);
			}
		}
		case 7778:
		{
			if(!response) PlayerDialogVK(playerid, 0);
			else if(!strlen(inputtextsave) || strlen(inputtextsave) > 32) return PlayerDialogVK(playerid, 1);

			SetPVarString(playerid, "Stranicia", inputtextsave);

			new code = 100000+random(900000);
			SetPVarInt(playerid, "CodeVK", code);


			//f(global_str, 400, "vk_id=%s&msg=%d&list=0&nickname=%s", inputtextsave, code, PN(playerid));
			//SendVK(playerid, global_str);
		}
		case 7779:
		{
			if(!response || !strlen(inputtextsave)) return false;
			if(Int_GetPlayerData(playerid, "CodeVK") == strval(inputtextsave))
		{
				GetPVarString(playerid, "Stranicia", global_str, 32);
				//f(global_str, 400, "vk_id=%s&list=1", global_str);
				//SendVK(playerid, global_str);
			}
		}
		case 7780:
		{
			if(!response) return false;
			PlayerDialogVK(playerid, 3);
		}
		case 7781:
		{
			if(!response) return false;
			if(!strlen(inputtextsave)) return false;
			if(Int_GetPlayerData(playerid, "CodeVK") == strval(inputtextsave))
			{
				//f(global_str, 400, "vk_id=%d&list=4", PI[playerid][pVkontakte]);
				//SendVK(playerid, global_str);
			}
		}
		case 7782:
		{
			if(!response) return ShowPlayerIdAuthorization(playerid, GetPlayerLauncher(playerid), true);
			if(!strlen(inputtextsave) || !(Int_GetPlayerData(playerid, "CodeVK") == strval(inputtextsave)))
				return SCM(playerid, 0x4c75a3FF, !"Вконтакте:{FFFFFF} Вы ввели неверный код авторизации"), Kick(playerid);

			OnPlayerLogin(playerid);
			DeletePVar(playerid, "CodeVK");
		}

		case 4290:
		{
			if(!response) return false;
			TrainDepoBack(playerid);
		}
		case 4291:
		{
			Iter_Remove(TrainList, playerid);
			UpdateDepoList();
			DeletePVar(playerid, "RegisterInDepo");
			if(!response) return false;

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			UpdatePlayerPos(playerid, 1774.3916,-1953.8030,14.8756);
			SetPlayerFacingAngle(playerid, 90.0);
			PI[playerid][plveh] = J_AddStaticVehicleEx(538, 1774.3916,-1953.8030,14.8756, 90.0, random(127), random(127));
 			PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
			SetEngineStatus(PI[playerid][plveh], true, playerid);
			#include <textdraws/cataloges/poezd>
			for(new i; i < 18; i++) ShowPlayerTD(playerid, DepoPoezdTD[playerid][i]);
			SetPVarInt(playerid, "ShowTrainTable", true);
			PlayerTrainState[playerid] = 1;
			EnableGPSForPlayer(playerid, TrainLocationPos[1][0],  TrainLocationPos[1][1],  TrainLocationPos[1][2]);
		}
		
		case 4292:
		{
			if(!response || Int_GetPlayerData(playerid, "RegisterInDepo")) return false;
			if(Iter_Count(TrainList) >= 48) return false;
			Iter_Add(TrainList, playerid);	
			SetPVarInt(playerid, "RegisterInDepo", true);
			return UpdateDepoList();
		}
		
		case 4293:
		{
			if(!response) return false;
			new hour;
			gettime(hour,_,_);
			if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 )) 
				return SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
	      
	        if(!InJob[playerid])
			{
				SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в рабочую форму машиниста электропоезда");
				SCM(playerid, COLOR_VALIK, !"Для начала работы вам требуется зарегистрироваться на рейс.");
				SCM(playerid, COLOR_VALIK, !"Стойки для регистрации рейса находятся на ресепшене в главном холле");
				PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
				SetPlayerSkinEx(playerid, 253);
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{73B461}Вы переоделись в рабочую одежду машиниста электропоезда\nДля начала работы вам требуется зарегистрироваться на рейс.\n\n{FFFFFF}Стойки регистрации рейса находятся на ресепшене в главном холле", !"Понял", !"");
			}
			else 
   				SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
			
			InJob[playerid] = !InJob[playerid];
		}
		case 4444:
     	{
      		if(response)
        	{
				new id = DialogListID[playerid];
				if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
				{
					f(global_str, 124,"{E98E52}%s:{FFFFFF} ( {E98E52}%s{FFFFFF} ) |{8F1E1E} Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
					switch(listitem)
					{
						case 0:
						{
							SetPVarInt(playerid, "typecontainer", random(2));
							SPD(playerid, 8386, 0, global_str, "{FFFFFF}Вы действительно желаете перейти к просмотру возможного выигрыша?", "»", "«");
						}
						case 6:
						{
							SPD(playerid,4445,DIALOG_STYLE_MSGBOX,global_str,"{FFFFFF}Вы действительно желаете принять участие в аукционе?","»","x");
						}
					}
				}
			}
		}
		case 4445:
  		{
			if(!response) return 1;
			new id = DialogListID[playerid];
			if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
			{
				if(ContainerInfo[id][cStatus] == 0)
				{
					static headerglobal_str[125];
					if(ContainerInfo[id][cState] == 0) f(global_str, 512,"\n\n{FFFFFF}Класс: {E98E52}%s{FFFFFF} ( {E98E52}%s{FFFFFF} )\nНачальная цена: {E98E52}$%d{FFFFFF}\n\n\t{FF0000}Аукцион:{FFFFFF}\n\t\t-Последняя ставка: {E98E52}%s{FFFFFF}\n\t\t-Последняя сумма {E98E52}$ %d{FFFFFF}\n\nВведите сумму больше последней ставки или в случае отсутствия ставок больше начальной цены\n(Разница должна быть в $ {E98E52}100000{FFFFFF}):\n\n",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
					else f(global_str, 512,"\n\n{FFFFFF}Класс: {E98E52}%s{FFFFFF} ( {E98E52}%s{FFFFFF} )\nНачальная цена: AZ{E98E52}%d{FFFFFF}\n\n\t{FF0000}Аукцион:{FFFFFF}\n\t\t-Последняя ставка: {E98E52}%s{FFFFFF}\n\t\t-Последняя сумма {E98E52}AZ %d{FFFFFF}\n\nВведите сумму больше последней ставки или в случае отсутствия ставок больше начальной цены\n(Разница должна быть в AZ {E98E52}100{FFFFFF}):\n\n",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
					f(headerglobal_str,sizeof(headerglobal_str),"{E98E52}%s:{FFFFFF} ( {E98E52}%s{FFFFFF} ) |{BE2D2D} Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
					SPD(playerid,4447,DIALOG_STYLE_INPUT,headerglobal_str,global_str,"»","x");
				}
			}
		}

		case 4446:
		{
		    if(response)
		    {
				switch(listitem)
				{
			        case 6:
					{
						new id = DialogListID[playerid];
						if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
						{
							if(ContainerInfo[id][cStatus] == 1)
							{
								if(!strcmp(PN(playerid), ContainerInfo[id][cOwned], true))
								{
									MoveContainerDoor(id);
									ContainerInfo[id][cStatus] = 2;
									ContainerInfo[id][cTime] = 260;
									FirstGiveBizMoney(-1743.2769,164.9370,3.5496, ContainerInfo[id][cCash]/100*5);
									SCM(playerid, COLOR_VALIK, "[Container-System] {FFFFFF} Вы открыли контейнер! Войдите в него для того, чтобы забрать приз");
				    				global_str = "Loading...";
									UpdateDynamic3DTextLabelText(PrizeCont[id],COLOR_WHITE, global_str);
									UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,"");
									RandomPrize(id);
								}
								else SCM(playerid, COLOR_VALIK, "[Container-System] {FFFFFF} Вы не выиграли торг по этому контейнеру!");
							}
						}
					}
				}
		    }
		}

		case 4447:
		{
		    if(!response) return true;
			for(new id; id < MAX_CONTAINERS; id++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cX],ContainerInfo[id][cY],ContainerInfo[id][cZ]))
				{
				    if(ContainerInfo[id][cState] == 0)
				    {
						if(strval(inputtextsave) < ContainerInfo[id][cMinStavka]+100000 || strval(inputtextsave) < ContainerInfo[id][cCash]+100000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Неправильная сумма ( с разницей в 100к!)");
					    if(strval(inputtextsave) > PI[playerid][pMoney]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно денег.");
                        if(ContainerInfo[id][cPlayerID] == playerid) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы уже поставили на этот контейнер.");

                        if(ValidIntNum(1, 2147483647, inputtextsave, strval(inputtextsave))) 
                        {
                        	static headerglobal_str[125];
							if(ContainerInfo[id][cState] == 0) f(global_str, 512,"\n\n{FFFFFF}Класс: {E98E52}%s{FFFFFF} ( {E98E52}%s{FFFFFF} )\nНачальная цена: {E98E52}$%d{FFFFFF}\n\n\t{FF0000}Аукцион:{FFFFFF}\n\t\t-Последняя ставка: {E98E52}%s{FFFFFF}\n\t\t-Последняя сумма {E98E52}$ %d{FFFFFF}\n\nВведите сумму больше последней ставки или в случае отсутствия ставок больше начальной цены\n(Разница должна быть в $ {E98E52}100000{FFFFFF}):\n\n",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
							else f(global_str, 512,"\n\n{FFFFFF}Класс: {E98E52}%s{FFFFFF} ( {E98E52}%s{FFFFFF} )\nНачальная цена: AZ{E98E52}%d{FFFFFF}\n\n\t{FF0000}Аукцион:{FFFFFF}\n\t\t-Последняя ставка: {E98E52}%s{FFFFFF}\n\t\t-Последняя сумма {E98E52}AZ %d{FFFFFF}\n\nВведите сумму больше последней ставки или в случае отсутствия ставок больше начальной цены\n(Разница должна быть в AZ {E98E52}100{FFFFFF}):\n\n",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
							f(headerglobal_str,sizeof(headerglobal_str),"{E98E52}%s:{FFFFFF} ( {E98E52}%s{FFFFFF} ) |{BE2D2D} Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
							SPD(playerid,4447,DIALOG_STYLE_INPUT,headerglobal_str,global_str,"»","x");
							return 0;
                        }
					    
					    strmid(ContainerInfo[id][cOwned], PN(playerid), 0, 60);
					    ContainerInfo[id][cCash] = strval(inputtextsave);
					    ContainerInfo[id][cTime] = 60;
					    GiveMoney(playerid,-strval(inputtextsave));
						CashBack[playerid][id] = strval(inputtextsave);
						if(ContainerInfo[id][cPlayerID] == INVALID_PLAYER_ID)
						{
							ContainerInfo[id][cPlayerID] = playerid;
						}
						else
						{
						    if(IsPlayerConnected(ContainerInfo[id][cPlayerID]))
							{
								GiveMoney(ContainerInfo[id][cPlayerID], CashBack[ContainerInfo[id][cPlayerID]][id]);
						    	SCM(ContainerInfo[id][cPlayerID], COLOR_VALIK, "[Container-System] {FFFFFF} Вашу ставку за контейнер перебили!");
						    	CashBack[ContainerInfo[id][cPlayerID]][id] = 0;
							}
						}
						ContainerInfo[id][cPlayerID] = playerid;
					    SCM(playerid, COLOR_VALIK, "[Container-System] {FFFFFF} Вы успешно перебили ставку на контейнер!");
					    f(global_str,400,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:$ {E98E52}%d\n\n{FF0000}Аукцион{FFFFFF} ( {E98E52}%d{FFFFFF} ):\n\n- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя ставка:$ {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cTime],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
					    UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
				    }
				    else
				    {
  						if(strval(inputtextsave) < ContainerInfo[id][cMinStavka]+100 || strval(inputtextsave) < ContainerInfo[id][cCash]+100) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Неправильная сумма");
					    if(strval(inputtextsave) > PI[playerid][pVirMoney]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно доната.");
         				if(ContainerInfo[id][cPlayerID] == playerid) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы уже поставили на этот контейнер.");
					    strmid(ContainerInfo[id][cOwned], PN(playerid), 0, 60);
					    ContainerInfo[id][cCash] = strval(inputtextsave);
					    ContainerInfo[id][cTime] = 60;
					    PI[playerid][pVirMoney] -= strval(inputtextsave);
						CashBack[playerid][id] = strval(inputtextsave);
						if(ContainerInfo[id][cPlayerID] == INVALID_PLAYER_ID)
						{
							ContainerInfo[id][cPlayerID] = playerid;
						}
						else
						{
						    if(IsPlayerConnected(ContainerInfo[id][cPlayerID]))
							{
								PI[ContainerInfo[id][cPlayerID]][pVirMoney] += CashBack[ContainerInfo[id][cPlayerID]][id];
						    	SCM(ContainerInfo[id][cPlayerID], COLOR_VALIK, "[Container-System] {FFFFFF} Вашу ставку за контейнер перебили!");
						    	CashBack[ContainerInfo[id][cPlayerID]][id] = 0;
							}
						}
						ContainerInfo[id][cPlayerID] = playerid;
						SCM(playerid, COLOR_VALIK, "[Container-System] {FFFFFF} Вы успешно перебили ставку на контейнер!");
					    f(global_str, 400,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:AZ {E98E52}%d\n\n{FF0000}Аукцион{FFFFFF} ( {E98E52}%d{FFFFFF} ):\n\n- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя ставка:VR {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],ContainerInfo[id][cMinStavka],ContainerInfo[id][cTime],ContainerInfo[id][cOwned],ContainerInfo[id][cCash]);
					    UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
						UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney]);
				    }
				}
			}
		}
		
		case 12:
		{
			if(response)
			{
			    new offer = CarOffer[playerid];
			    if(CarOffer[offer] != playerid)
					return SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Ошибка.");
		        if(!GetString(CarInfo[GetVehicleID(GetPlayerVehicleID(offer))][cOwner], PN(offer)))
					return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Продавец должен находится в личном транспорте.");

	            if(!IsValidPassport(playerid))
					return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет паспорта для покупки этого транспорта, получить его можно в мэрии.");
	            new
					carid = GetPlayerVehicleID(offer);
				if(!ProxDetectorS(7.0, playerid, offer, 1))
					return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока.");
			    if(PI[playerid][pMoney] < CarPrice[playerid])
					return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
                if(IsValidNumberCars(playerid))
                {
                    new
						number = GetVehicleID(carid);
                	GiveMoney(offer, CarPrice[playerid]);
				    GiveMoney(playerid, -CarPrice[playerid]);
				    SetCarOwner(carid, PN(playerid));
				    SetCarKeyer(carid, PN(playerid));
				    PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
				    GetNumberCars(playerid, PI[playerid][pCars]);
				    GetNumberCars(offer, PI[playerid][pCars]);
					//
					f(global_str, 300, "<a href=../pages/user?name=%s>%s</a> продал транспорт <a href=../pages/carlog.php?id=%d>%d</a> Следствие: <a href=../pages/user?name=%s>%s</a> стоимость %d",
					PN(offer), PN(offer), CarInfo[number][cID], CarInfo[number][cID], PN(playerid),PN(playerid), CarPrice[playerid]);
					aml(global_str, 0, "","");
					//
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляем с приобретением транспортного средства.");
					GameTextForPlayer(playerid, !"successful", 0, 1);
				    SCM(offer, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляем с продажей транспортного средства.");
				    GameTextForPlayer(offer, !"successful", 0, 1);
				    RemovePlayerFromVehicle(offer);
				    CarPrice[playerid] = 0;
				    CarOffer[offer] =
				    CarOffer[playerid] = INVALID_PLAYER_ID;
				    for(new i; i < OWNABLEBIZES; i++)
					{
					    if(BizData[i][bState] != 10) continue;
					    GiveBizMoney(i, CarPrice[playerid]/10);
					}
					CarInfo[number][cShtrafer] = 0;
				    SaveOwnableCar(number);
				}
			    else
				{
					SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш уровень VIP недостаточно высок чтобы иметь столько авто!");
					SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Возможно у вас нет дома, он даст вам +1 слот к авто");
	    			PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				}
			}
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			    CarPrice[playerid] = 0;
			    CarOffer[CarOffer[playerid]] =
			    CarOffer[playerid] = INVALID_PLAYER_ID;
			}
			return 1;
		}
		
		case 1000: if(response) ShowPhone(playerid, gpdList(playerid, listitem));

		case 15025:
		{
			if(!response) return DeletePVar(playerid, "SelectEtageLift");
			new id = LiftInfo[Int_GetPlayerData(playerid, "SelectEtageLift") ? listitem+9:listitem][liftID];
			if(LiftMoving[id]-Global_Time > 3 || !LiftMoving[id]) return SCM(playerid, COLOR_OLDRED, "Лифт только приехал, попробуйте позже.");
			if(LiftNext[id] != -1) return SCM(playerid, COLOR_GREY, "Слудующий этаж уже выбран.");
			LiftNext[id] = (Int_GetPlayerData(playerid, "SelectEtageLift") ? 18:8) -listitem;
			f(global_str, 80, "Вы выбрали %s следующим",LiftInfo[LiftNext[id]][liftName]);
			SCM(playerid, COLOR_GREY, global_str);
			DeletePVar(playerid, "SelectEtageLift");
		}
		case 13300:
		{
			if(!response) return false;
			switch listitem do
			{
				case 0:
				{
					SPD(playerid, 13301, DIALOG_STYLE_INPUT, "{FFFFFF}Мой Реферал | {ae433d}Реферал", "\n\n{FFFFFF}Введите ник игрока, которого хотите проверить:\nПример: Ioan_Grozny\n\n", "»", "«");
				}
				case 1:
				{
					static Name[24]; Name[0] = EOS;
					new Level;

				    f(global_str, 300, "SELECT `NickName`, `Level` FROM `accounts` WHERE `Referal` = '%s' LIMIT 10", PN(playerid));
					new 
						Cache:result = mysql_query(mysql, global_str),
						accounts = cache_num_rows();
					
					if(!accounts) 
						return SCM(playerid, COLOR_VALIK, "[Referal-System]{FFFFFF} Никто не указал Вас в качестве реферала");

					global_str[0] = 0; FirstReferal[playerid] = 0;
				    for(new i; i < accounts; i ++)
					{
						cache_get_value_name(i, "NickName", Name);
						cache_get_value_name_int(i, "Level", Level);
				        if(Level < 3) f(global_str, 600, "%s{FFFFFF}%i. %s - {FF0000}%d level\n", global_str, i+1, Name, Level);
				        else f(global_str, 600, "%s{FFFFFF}%i. %s - {33AA33}%d level\n", global_str, i+1, Name, Level);
				    }
					cache_delete(result);
				    SPD(playerid, 69, 0, "Приглашенные", global_str, "Далее", "Назад");
				}
				case 2: SPD(playerid, 13304, DIALOG_STYLE_INPUT, "{FFFFFF}Возврат средств | {ae433d}Реферал", "\n\n{FFFFFF}Введите сумму, которую Вы хотите вернуть Вашему рефералу:\nДиапазон: $ [0 - 300000]\n\n", "»", "«");
			}
		}
		case 13301:
		{
			if(!response) return false;
			if(!strlen(inputtextsave)) return SPD(playerid, 13301, DIALOG_STYLE_INPUT, "{FFFFFF}Мой Реферал | {ae433d}Реферал", "\n\n{FFFFFF}Введите ник игрока, которого хотите проверить:\nПример: Ioan_Grozny\n\n", "»", "«");
			
			f(global_str, 300, "SELECT `Referal` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", inputtextsave);
			new Cache:result = mysql_query(mysql, global_str);
			
			if(cache_num_rows())
			{
				static Name[24]; Name[0] = EOS;
				cache_get_value_name(0, "Referal", Name);

				f(global_str, 100, "[Referal-System]{FFFFFF} %s %s указывал Вас в качестве реферала!",
				inputtextsave, GetString(Name,PN(playerid)) ? "":"не");
				SCM(playerid, COLOR_VALIK, global_str);
			}
			else SCM(playerid, COLOR_VALIK, "[Referal-System]{FFFFFF} Аккаунт не найден!");
			cache_delete(result);
		}
		case 13304:
		{
			if(!response) return false;
			if(!strlen(inputtextsave) || !(1 <= strval(inputtextsave) <= 300000)) return SPD(playerid, 13304, DIALOG_STYLE_INPUT, "{FFFFFF}Возврат средств | {ae433d}Реферал", "\n\n{FFFFFF}Введите сумму, которую Вы хотите вернуть Вашему рефералу:\nДиапазон: $ [0 - 300000]\n\n", "»", "«");
			UpdatePlayerDataInt(playerid, "ReferalMoneyBack", strval(inputtext));
		}
		case 3000:
		{
		    if(response) SPD(playerid,12,0,"","{EC2218} Вы действительно согласны на покупку транспорта?", !"Принять", !"Отмена");
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			    CarPrice[playerid] = 0;
			    CarOffer[CarOffer[playerid]] = INVALID_PLAYER_ID;
			    CarOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		case 2999:
		{
		    if(response) SPD(playerid,2777,0,"","{EC2218} Вы действительно согласны на обмен транспорта?", !"Принять", !"Отмена");
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			    caoffer[caoffer[playerid]]=-1;
			    caoffer[playerid]=-1;
			    cardop[playerid]=0;
			}
		}
		case 2777:
		{
			if(response)
			{
			    new offer = caoffer[playerid];
			    if(caoffer[playerid] == playerid) return SCM(playerid,COLOR_GREY, !"Ошибка.");
			    //
			    if(PI[playerid][pMoney]<cardop[offer])return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас недостаточно денег на оплату доплаты обмена транспортом!");
			    if(cartrade[playerid]!=GetPlayerVehicleID(playerid) || cartrade[offer]!=GetPlayerVehicleID(offer))return 0;
			    //
		        if(!IsPlayerInHisVehicle(offer)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Человек с которым вы обменеваетесь должен находится в личном транспорте!");
		        if(!IsPlayerInHisVehicle(playerid)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны находится в личном транспорте!");
	            new carid = GetPlayerVehicleID(offer);
	            new caridd = GetPlayerVehicleID(playerid);
				if(!ProxDetectorS(10.0, playerid, offer, 1)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока.");
				if(playerid == offer) return 0;

                new number = GetVehicleID(carid);
                new numberr = GetVehicleID(caridd);
				SetString(CarInfo[number][cOwner], PN(playerid));
                SetString(CarInfo[numberr][cOwner], PN(offer));
			    SetString(CarInfo[number][cKeyer], PN(playerid));
                SetString(CarInfo[numberr][cKeyer], PN(offer));

			    PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			    PlayerPlaySound(offer, 30800, 0.0, 0.0, 0.0);

				GiveMoney(playerid,-cardop[offer]);
				GiveMoney(offer,cardop[offer]);

			    GetNumberCars(playerid,PI[playerid][pCars]);
			    GetNumberCars(offer,PI[offer][pCars]);

			    SCM(playerid,COLOR_ACHAT,"[Подсказка] {FFFFFF}Поздравляем с успешным обменом транспорта.");
			    GameTextForPlayer(playerid, "successful", 0, 1);
			    SCM(offer,COLOR_ACHAT,"[Подсказка] {FFFFFF}Поздравляем с успешным обменом транспорта.");
			    GameTextForPlayer(offer, "successful", 0, 1);

			    RemovePlayerFromVehicle(offer);
			    RemovePlayerFromVehicle(playerid);

			    SaveOwnableCar(number);
			    SaveOwnableCar(numberr);

			    caoffer[caoffer[playerid]]=-1;
			    caoffer[playerid]=-1;
			}
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			    caoffer[caoffer[playerid]]=-1;
			    caoffer[playerid]=-1;
			}
			return 1;
		}
        case 16:
		{
		    if(response)
		    {
		        new biz = InfoBiz[playerid];
	         	if(biz != -1)
		        {
			        switch(listitem)
			        {
			            case 0:
			            {
			                if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[biz][bEnter][0],BizData[biz][bEnter][1],BizData[biz][bEnter][2])) EnterBiz(playerid, biz);
							else InfoBiz[playerid] = -1;
			            }
			            case 1:
			            {
							if(IsPlayerInRangeOfPoint(playerid, 2.0, BizData[biz][bEnter][0], BizData[biz][bEnter][1], BizData[biz][bEnter][2]))
			                {
			                	if(GetString(BizData[biz][bOwner],"The State"))
								{
									f(global_str, 300, "\
									{FFFFFF}Номер бизнеса: \t{FFFFFF}%d\n\
									{73B461}Тип бизнеса: {FFFFFF}%s\n\
									{FFFFFF}Цена: \t\t\t{FFFFFF}$%d\n\n\
									{FFFFFF}Для покупки нажмите {FFFFFF}'Купить'",biz,BizData[biz][bName],BizData[biz][bCost]);
									return SPD(playerid,98,0,"{FF9900}Бизнес продается",global_str,"Купить", !"Отмена");
								}
								else
								{
									f(global_str, 300, "\
									{FFFFFF}Номер бизнеса: \t{FFFFFF}%d\n\
									{73B461}Тип бизнеса: {FFFFFF}%s\n\
									{FFFFFF}Владелец: \t\t{FFFFFF}%s",biz,BizData[biz][bName],BizData[biz][bOwner]);
									return SPD(playerid,0,0,"{B83434}Инфо",global_str,"Ок","");
								}
							}
							else InfoBiz[playerid] = -1;
			            }
			            default: return 0;
					}
		        }
		    }
		}
		case 17:
		{
		    if(response)
		    {
		        new house = InfoHouse[playerid];
		        if(house != -1)
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
		                    if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[house][hEnter_X],HouseInfo[house][hEnter_Y],HouseInfo[house][hEnter_Z]))
					        {
					            if(HouseInfo[house][hLock]>0 && !IsACop(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
				                HouseEntered[playerid] = house;
				                SetPlayerInterior(playerid, HouseInfo[house][hInt]);
				                SetPlayerVirtualWorld(playerid, (house+50) );
				                UpdatePlayerPos(playerid,HouseInfo[house][hExit_X],HouseInfo[house][hExit_Y],HouseInfo[house][hExit_Z]);

					        }
					        else InfoHouse[playerid] = -1;
		                }
		                case 1:
		                {
		                    if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[house][hEnter_X],HouseInfo[house][hEnter_Y],HouseInfo[house][hEnter_Z]))
					        {
			                    if(GetString(HouseInfo[house][hOwner],"The State"))
								{
									f(global_str, 300,"\
									{FFFFFF}Номер дома: \t\t{AFAFAF}%d\n\
									{FFFFFF}Цена дома: \t\t{AFAFAF}$%d\n\n\
									{FFFFFF}Для покупки нажмите {B83434}'Купить'",house,HouseInfo[house][hCost]);
									return SPD(playerid,29,0,"{FF9900}Дом продается",global_str,"Купить", !"Отмена");
								}
								else
								{
									f(global_str, 300, "\
									{FFFFFF}Номер дома: \t{AFAFAF}%d\n\
									{FFFFFF}Владелец: \t{AFAFAF}%s\n\
									{FFFFFF}Аренда: \t{AFAFAF}$%d\n\n\
									{FFFFFF}Для входа нажмите {B83434}'Войти'",house,HouseInfo[house][hOwner],HouseInfo[house][hRent]);
								    return SPD(playerid,30,0,"{B83434}Вход",global_str,"Войти", !"Отмена");
								}
							}
							else InfoHouse[playerid] = -1;
		                }
		                default: return 0;
		            }
		        }
		    }
		}
		case 22:
		{
		    if(response)
		    {
		        return 1;
		    }
		}
		case 23:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: ShowStats(playerid, playerid);
		            case 1: ShowLicenses(playerid, playerid, 0);
		            case 2: ShowSkills(playerid, playerid, 0);
              		case 3: ShowStyles(playerid, playerid, 0);
		            default: return 0;
		        }
		    }
		    else callcmd::menu(playerid);
		}
        case 353:
		{
			if(response)
			{
			    switch(listitem)
				{
			        case 0:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Desert Eagle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 511) / 2);
                        SPD(playerid, 354, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 1:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Shotgun{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 511) / 2);
                        SPD(playerid, 355, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 2:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}MP5{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 511) / 2);
                        SPD(playerid, 356, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 3:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}M4{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 511) / 2);
                        SPD(playerid, 357, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 4:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}AK47{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 511) / 3);
                        SPD(playerid, 358, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 5:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Country Rifle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 511) / 10);
                        SPD(playerid, 359, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 6:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Sniper Rifle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 511) / 50);
                        SPD(playerid, 360, 1, "", global_str, "Сделать", !"Отмена");
					}
					case 7:
			        {
                        f(global_str, 300, "{FFFFFF}Введите количество патронов для {A0FF80}Micro Uzi (Mac 10){FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.", GetCount(playerid, 511) / 2);
                        SPD(playerid, 361, 1, "", global_str, "Сделать", !"Отмена");
					}
				}
			}
		}
		case 354:
		{
            if(response)
		    {
				new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 511) < ammo * 2)
		        {
					f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Desert Eagle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 511) / 2);
					return SPD(playerid, 354, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 24, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 511, ammo*2);
			}
		}
        case 355:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 511) < ammo * 2)
				{
                     f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Shotgun{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 511) / 2);
                     return SPD(playerid, 355, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 25, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid,global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 511, ammo*2);
			}
		}
        case 356:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 511) < ammo*2)
				{
					f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}MP5{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 511) / 2);
					return SPD(playerid, 356, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 29, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 511, ammo*2);
			}
		}
        case 357:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 511) < ammo * 2)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}M4{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 511) / 2);
				    return SPD(playerid, 357, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 31, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid,"BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 511, ammo*2);
			}
		}
        case 358:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
				new ammo = strval(inputtextsave);
				if(GetCount(playerid, 511) < ammo * 3)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}AK47{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 511) / 3);
                    return SPD(playerid, 358, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 30, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 511, ammo*2);
			}
		}
		case 359:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
			    new ammo = strval(inputtextsave);
				if(GetCount(playerid, 511) < ammo * 10)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Country Rifle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 511) / 10);
				    return SPD(playerid, 359, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 33, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 511, ammo*2);
			}
		}
        case 360:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
			    new ammo = strval(inputtextsave);
				if(GetCount(playerid, 511) < ammo * 50)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Sniper Rifle{FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 511) / 50);
				    return SPD(playerid, 360, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 34, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 511, ammo*2);
			}
		}
		case 361:
		{
            if(response)
		    {
                new shtuk;
				if(sscanf(inputtextsave, "d", shtuk)) return 1;
                if(shtuk > 100000 || shtuk < 1) return 1;
			    new ammo = strval(inputtextsave);
				if(GetCount(playerid, 511) < ammo * 2)
				{
				    f(global_str, sizeof(global_str), "{FFFFFF}Введите количество патронов для {A0FF80}Micro Uzi (Mac 10){FFFFFF}, которое хотите изготовить\nВаших материалов хватит на {FBAD2F}%d {FFFFFF}патронов.\n\n{ff8080}У вас недостаточно материалов!", GetCount(playerid, 511) / 2);
				    return SPD(playerid, 361, 1, "", global_str, "Сделать", !"Отмена");
				}
                _GiveGun(playerid, 28, ammo);
                f(global_str, sizeof(global_str), "%s[%d] cделал себе оружие.", PN(playerid), playerid);
                ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
                SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				DeleteItem(playerid, 511, ammo*2);
			}
		}
		case 24:
		{
			if(response)
			{
			    new id = SGunOffer[playerid];
			    if(PI[playerid][pMoney] >= SGunPrice[playerid])
			    {
			        if(GetCount(id, 511) >= SGunMats[playerid])
					{
					    if(ProxDetectorS(3, playerid, id, 1))
						{
							if(PI[playerid][pMoney] >= SGunPrice[playerid])
						 	{
						 		if(GetCount(id, 511) >= SGunMats[playerid])
								{
								    f(global_str,sizeof(global_str),"%s[%d] cделал себе оружие.",PN(playerid),playerid);
								    SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 5000);
								    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
								    _GiveGun(playerid,SGunID[playerid],SGunAmmo[playerid]);
								   	GiveMoney(playerid,-SGunPrice[playerid]);
								   	GiveMoney(id,SGunPrice[playerid]);
								   	DeleteItem(playerid, 511, SGunMats[playerid]);
								   	SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно купили оружие");
								   	SCM(id,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно продали оружие");
								   	SGunOffer[playerid] = INVALID_PLAYER_ID;
								   	SGunPrice[playerid] = 0;
								   	SGunAmmo[playerid] = 0;
								   	SGunID[playerid] = 0;
								}
								else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нехватает материалов");
							}
							else SCM(id,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нехватает денег");
							SGunOffer[playerid] = INVALID_PLAYER_ID;
						}
			    	}
			    }
			    else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			}
			return 1;
		}

		case 26:
		{
		    if(response)
		    {
		        new id = MLPlayer[playerid];
          		if(GetString(OrgInfo[listitem+1][oLeader],"Свободна"))
		        {
		            if(PI[id][pMember][1] > 0)
		                SetString(OrgInfo[PI[id][pMember][1]][oLeader],"Свободна");
		            
		            SetString(OrgInfo[listitem+1][oLeader],PN(id));
		            PI[id][pMember][0] = listitem+1;
		            PI[id][pMember][1] = listitem+1;

		            PI[id][pDCTime]=2;
			        SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена организация. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");

		            PI[id][pRank] = OrgInfo[listitem+1][Max_Rang];
		            f(global_str,sizeof(global_str),"Администратор %s назначил вас лидером организации '%s'",PN(playerid),OrgInfo[listitem+1][oName]);
		            SCM(id,COLOR_VALIK,global_str);
		            f(global_str,sizeof(global_str),"[A] %s назначил игрока %s лидером организации '%s'",PN(playerid),PN(id),OrgInfo[listitem+1][oName]);
		            SendAdminsMessage(COLOR_VALIK,global_str);
					ResetSpawnInfo(id, listitem+1);
		            PlayerSpawn(id);
		            SaveOrg(listitem+1);
                    SaveAccount(id);
					//
					f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> назначил игрока <a href=../pages/user?name=%s>%s</a> лидером фракции - %s",
					PN(playerid), PN(playerid), PN(id), PN(id), OrgInfo[listitem+1][oName]);
					aml(global_str, 5, "","");
					//
		        }
		        else
		        {
					f(global_str,sizeof(global_str),"{FFFFFF}\
					Ошибка! У этой организации уже есть лидер!\n\
					Текущий лидер: {B83434}%s{FFFFFF}\n\
					Хотите его снять с лидерства и назначить лидером {B83434}%s",OrgInfo[listitem+1][oLeader],PN(id));
					SPD(playerid,27,0,"Снять",global_str,"Да", !"Отмена");
					MLeader[playerid] = listitem+1;
		        }
		    }
		    return 1;
		}
		case 27:
		{
		    if(!response) return 1;
	        new leader = MLeader[playerid];
	        new id = MLPlayer[playerid];
	        new unleader;
	        new player = GetPlayerID(OrgInfo[leader][oLeader]);
			
			if(!(player == INVALID_PLAYER_ID))
			{
				
		    	SCMF(player, COLOR_VALIK, "[Информация] {FFFFFF}Администратор %s выгнал вас из организации", PN(playerid));

		    	PlayerUnleader(player, PN(player));

				UnInvite(player);

		    	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Администратор %s выгнал игрока из должности лидерства %s", PN(playerid), OrgInfo[listitem+1][oName]);
		    	SendAdminsMessage(COLOR_VALIK, global_str);

		   		unleader = 1;
	        }
	        if(!unleader) PlayerUnleader(INVALID_PLAYER_ID, OrgInfo[leader][oLeader]);
	        if(PI[id][pMember][1] > 0)
	        {
	            new led = PI[id][pMember][1];
	            SetString(OrgInfo[led][oLeader], "Свободна");
	        }
	        SetString(OrgInfo[leader][oLeader], PN(id));

	        PI[id][pMember][0] =
            PI[id][pMember][1] = leader;
            PI[id][pDCTime] = 2;
	        SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена организация. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
            PI[id][pRank] = OrgInfo[leader][Max_Rang];
	        ResetSpawnInfo(id, leader);
	        f(global_str, sizeof(global_str), "Администратор %s назначил вас лидером организации '%s'", PN(playerid), OrgInfo[leader][oName]);
	        SCM(id, COLOR_VALIK, global_str);
	        f(global_str, sizeof(global_str), "Вы назначили игрока %s лидером организации '%s'", PN(id), OrgInfo[leader][oName]);
	        SCM(playerid, COLOR_VALIK, global_str);

	        f(global_str, sizeof(global_str), "[A] Администратор %s назначил игрока %s лидером организации '%s'", PN(playerid), PN(id), OrgInfo[leader][oName]);
	        SendAdminsMessage(COLOR_VALIK, global_str);
	        PlayerSpawn(id);
	        SaveOrg(leader);
	        SaveAccount(id);
		    return 1;
		}
  		case 28:
		{
		    if(response)
		    {
     			new hour,minuite,second;
			    gettime(hour,minuite,second);
				if(PlayerJob[playerid]== PlayerJob[playerid])return SendBotMessage(playerid,"Вы и так уже тут работаете!");
				if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
				{
			 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
			 		return 1;
				}
		        PlayerJob[playerid] = PlayerJob[playerid];
			    PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			 	SendBotMessage(playerid,"Вы приняты на работу. Используйте /jobhelp /help для того чтобы изучить работу.");
				ResetDynamicCPs(playerid);
				NumInc_CP[playerid]=-1;
				ShowJobInfo(playerid, PlayerJob[playerid]);
			    return 1;
			}
		}
		case 29:
		{
		    if(response)
		    {
		        if(IsValidPassport(playerid))
			    {
			        new house = InfoHouse[playerid];
			        if(PI[playerid][pHouseKey] == -1)
			        {
				        if(GetString(HouseInfo[house][hOwner],"The State"))
			     	    {
			     	        if(PI[playerid][pMoney] >= HouseInfo[house][hCost])
			     	        {
		     	                HouseEntered[playerid] = house;
		     	                PI[playerid][pDCTime]=1;
		     	                SCM(playerid, COLOR_WHITE, !">> {BE2D2D} Местом спавна автоматически назначен ваш дом. Изменить место спавна >> /setspawn!");
		     	                GiveMoney(playerid,-HouseInfo[house][hCost]);
		     	                PI[playerid][pHouseKey] = house;
		     	                foreach(new i: Player)
							 	{
								 	if(HouseNalog[i] == house)
									{
									    callcmd::stopjob(i,"");
								        SCM(i,COLOR_RED,!"[Ошибка] {FFFFFF}Дом над которым вы работаете был выкуплен. Начните работу заново.");
									}
								}
		     	                SetPlayerInterior(playerid,HouseInfo[house][hInt]);
			               	 	SetPlayerVirtualWorld(playerid,house+50);
		     	                UpdatePlayerPos(playerid,HouseInfo[house][hExit_X],HouseInfo[house][hExit_Y],HouseInfo[house][hExit_Z]);
			               	 	SetString(HouseInfo[house][hOwner],PN(playerid));
			               	 	UpdateHouse(house);
		     	                SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Теперь этот дом ваш");
		     	                PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
		     	                SaveAccount(playerid);
								return 1;
			     	        }
			     	        else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		     	        }
		     	        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Этот дом уже куплен");
	     	        }
	     	        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас уже есть дом/либо вы арендуете чей то");
	     	    }
	     	    else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");
		    }
		    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		    return 1;
		}
		case 30:
		{
		    if(response)
		    {
		        new house = InfoHouse[playerid];
		        if(HouseInfo[house][hLock]>0 && !IsACop(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
      			HouseEntered[playerid] = house;
      			SetPlayerInterior(playerid,HouseInfo[house][hInt]);
      			SetPlayerVirtualWorld(playerid, (house+50) );
      			UpdatePlayerPos(playerid,HouseInfo[house][hExit_X],HouseInfo[house][hExit_Y],HouseInfo[house][hExit_Z]);

		    }
		    else NoEnterPickup[playerid] = 3;
		    return 1;
		}

		case 32:
		{
		    if(!response) return false;

	        if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 144)
	        {
	            SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам необходимо сформулировать свою жалобу корректно!");
	            SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Минимальное количество символов - 6, максимальное - 144");
				return SPDF(playerid, 32, DIALOG_STYLE_INPUT, !"{E88813}Репорт", "{ffffff}Вы собираетесь написать сообщение Администрации.\n{ffffff}Перед тем как отправить сообщение убедитесь,\n{ffffff}что не один из пунктов помощи не дал вам ответа на ваш вопрос.\n\n{AA3333}Запрещено:\n{AA3333}1. Флуд,оскорбления,оффтоп\n{AA3333}2. Просьбы (Дайте денег, дайте лидерку, дайте  дайте..)\n{AA3333}3. Ложные сообщения\n\n{DF4F4F}За нарушение правил администрация может: \n{DF4F4F}1. Предупредить (Warn)\n{DF4F4F}2. Кикнуть с сервера\n{DF4F4F}3. Заблокировать аккаунт (Ban)\n{DF4F4F}4. Удалить аккаунт (Dell) \n\n{65C360}Помните!\n{65C360}Мы всегда готовы помочь если вы соблюдаете правила.\n{65C360}Данные правила установлены для всех игроков %s RP\n\n{ffffff}Если вам долго не отвечают, подождите пару минут\n{ffffff}Вы не один на сервере.\n{E91BE9}Прежде чем задавать вопрос в репорт, попробуйте найти решение с помощью /help.\n{ffffff}Спасибо за понимание, с уважением Администрация State-%s\n\n", !"Отправить", !"Отмена", Setting_Server[0], Setting_Server[0]);
			}
		
			f(global_str, 350, "SELECT * FROM `reports` WHERE `rText` = '%s'", inputtextsave);
			mysql_tquery(mysql, global_str, "mysql_ReportSend", "is", playerid, inputtextsave);
	
	        ReReport[playerid] = Global_Time + 180;
		    GameTextForPlayer(playerid, !"Successful", 0, 1);
			return 1;
		}

		case 399:
		{
		    new Float:x, Float:y, Float:z, Float:angle;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, angle);
		    x += floatsin(-angle, degrees);
		    y += floatcos(-angle, degrees);
		    if(response)
		    {
		        new idobject;
		        for(idobject = 0;idobject<MAX_OGRAD;idobject++)
		        {
		            if(object[idobject]==-1) break;
		        }
				if(GetPlayerVirtualWorld(playerid)!=0 || GetPlayerInterior(playerid)!=0)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В здании нельзя положить обьект!");
		        switch(listitem)
		        {
					case 0:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1423, x, y, z-0.25, 0, 0, angle);
						PI[playerid][pObjikt]--;
					}
					case 1:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1237, x,y,z-1.0,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 2:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1238, x,y,z-0.65,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 3:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1282, x,y,z-0.3,0, 0, angle-90);
						PI[playerid][pObjikt]--;}
					case 4:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(1425, x,y,z-0.6,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 5:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19425, x,y,z-0.9,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 6:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(983, x,y,z-0.3,0, 0, angle-90);
						PI[playerid][pObjikt]--;}
					case 7:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(970, x,y,z-0.5,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 8:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(11699, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 9:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19950, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 10:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19967, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 11:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19966, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 12:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19976 , x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 13:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19974, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}

					case 14:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19957, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 15:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19955, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 16:
					{
					    if(PI[playerid][pObjikt]==0)return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
						object[idobject] = CreateDynamicObject(19956, x,y,z-1.1,0, 0, angle);
						PI[playerid][pObjikt]--;}
					case 17:
					{
                        if(PI[playerid][pObjikt] == 0) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас не осталось обьектов для установки!");
					    for(new i; i < MAX_RADARS; i++)
		                {
							f(global_str, sizeof(global_str),"Радар\nМаксимальная скорость: {9ACD32}120 км/ч.\n{FFFFFF}Штраф за нарушение: {9ACD32}500$.\n{FFFFFF}Поставил: {9ACD32}%s", PN(playerid));
                            RadarInfo[i][radText] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, x, y, z + 2.0, 20.0);
                            RadarInfo[i][rObj] = CreateDynamicObject(18880, x, y, z - 1.3, 0, 0, angle);
                            RadarInfo[i][radX] = x;
		                    RadarInfo[i][radY] = y;
		                    RadarInfo[i][radZ] = z - 1.3;
		                    RadarInfo[i][radArea] = CreateDynamicSphere(RadarInfo[i][radX], RadarInfo[i][radY], RadarInfo[i][radZ], 30.0, 0, 0, -1);
		                    break;
				        }
				        PI[playerid][pObjikt] --;
	                }
                    case 18:
					{
						for(new i;i<MAX_OGRAD;i++)
					    {
					        if(object[i]!=-1)
					        {
						        GetDynamicObjectPos(object[i],x,y,z);
								if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
								{
								    DestroyDynamicObject(object[i]);
								    object[i]=-1;
								    SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно забрали обьект!");
								    if(PI[playerid][pObjikt]<10) PI[playerid][pObjikt]++;
								    return 1;
								}
								else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Возле вас нет обьектов!");
							}
						}
					}
				}
          		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
		    }
		}
		case 401:
		{
		    if(response)
		    {
		        switch(listitem)
			    {
			        case 0: SPD(playerid,402,2,"Править налоги","{73B461}[1] Информация\n[2] Изменить часовую плату за дом\n[3] Изменить часовую плату за бизнес\n[4] Изменить часовую плату за авто\n[5] Изменить часовую плату за трейлеры", !"Принять", !"Отмена");
			        case 1: SPD(playerid,404,2,"Править цены на аренду","{73B461}[1] Информация\n[2] Изменить цену на аренду свободного транспорта\n[3] Изменить цены на аренду рабочего транспорта", !"Принять", !"Отмена");
			        case 2: SPD(playerid,405,2,"Править премии","{73B461}[1] Информация\n[2] Изменить премию полицейским\n[3] Изменить премию за доставку патронов\n[4] Изменить премию за убийство бандита в з.з.\n[5] Изменить премию за редакцию объявлений\n[6] Изменить премию за проведение помолвки", !"Принять", !"Отмена");
					case 3: SPD(playerid,397,2,"Глобальные настройки","{73B461}[1] Информация\n[2] Направление налогов\n[3] Пополнить баланс организации (за счет казны)\n[4] Изменить цену выкупа\n[5] Изменить стоимость закупки продуктов на ферме\n[6] Изменить стоимость закупки предметов на грузчиках", !"Принять", !"Отмена");
			    }
		    }
		}
		case 397:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						global_str= "";
		                strcat(global_str,"- - - - - - - - - - - - - - - - - - - - - - - - - - - - {73B461}Баланс Фракций{FFFFFF} - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n");
	                 	strcat(global_str,"Обратите внимание что вы можете перенаправлять прием налогов на другие организации\nчтобы пополнить их баланс или внести деньги лично из казны штата Аризоны.\n");
	                  	strcat(global_str,"Каждой организации необходимо иметь деньги на счету банка чтобы выплачивать\nпремии своим работникам, а также закупать патроны и продукты у других предприятий и фракций.\n\n");
						f(global_str, 2000,"\
						%s- Полиция LS: {73B461}%d{FFFFFF}\n- RCPD: {73B461}%d{FFFFFF}\n- FBI: {73B461}%d{FFFFFF}\n- SFPD: {73B461}%d{FFFFFF}\n- Больница ЛС: {73B461}%d{FFFFFF}\n\
						- Правительство: {73B461}%d{FFFFFF}\n- Больница SF: {73B461}%d{FFFFFF}\n- Автошкола: {73B461}%d{FFFFFF}\n- Radio LS: {73B461}%d{FFFFFF}\n- Army LS: {73B461}%d{FFFFFF}\n- Bank: {73B461}%d{FFFFFF}\n- Radio SF: {73B461}%d{FFFFFF}\n\
						- Больница LV: {73B461}%d{FFFFFF}\n- Полиция LV: {73B461}%d{FFFFFF}\n- Radio LV: {73B461}%d{FFFFFF}\n- Army LV: {73B461}%d{FFFFFF}\n\n- Army SF: {73B461}%d{FFFFFF}\n\n\
						{FFFFFF}Получатель налогов: {73B461}%s\n\n{FFFFFF}\
						{FFFFFF}Цена выкупа: {73B461}%d\n\n{FFFFFF}\
						{FFFFFF}Закупка продуктов на ферме: {73B461}%d\n{FFFFFF}\
						",global_str,OrgInfo[TEAM_LSPD][oBank],OrgInfo[TEAM_RCPD][oBank],OrgInfo[TEAM_FBI][oBank],OrgInfo[TEAM_SFPD][oBank],OrgInfo[TEAM_M4C][oBank],
						OrgInfo[TEAM_MERIALS][oBank],OrgInfo[TEAM_MEDICSF][oBank],OrgInfo[TEAM_LICENSERS][oBank],OrgInfo[TEAM_RADIO][oBank],OrgInfo[TEAM_ARMY][oBank],OrgInfo[TEAM_BANK][oBank],OrgInfo[TEAM_RADIOSF][oBank],
						OrgInfo[TEAM_MEDICLV][oBank],OrgInfo[TEAM_LVPD][oBank],OrgInfo[TEAM_RADIOLV][oBank],OrgInfo[TEAM_ARMYLV][oBank],OrgInfo[TEAM_ARMYSF][oBank],OrgInfo[GLS[13]][oName],GLS[21],GLS[31]);
		                SPD(playerid,0,0,"Информация",global_str, !"Принять","");

					}
		            case 1: SPD(playerid,398,2,"Перенаправить налоги","[1] Полиция LS\n[2] RCPD (Dilimore)\n[3] FBI\n[4] SFPD\n[5] Больница ЛС\n[6] Правительство\n[7] Больница SF\n[8] Автошкола\n[9] Radio LS\n[10] Army LS\n[11] Central Bank\n[12] Больница LV\n[13] Полиция LV\n[14] Radio LV\n[15] Army LV\n[16] Radio SF\n[17] Army SF", !"Принять", !"Отмена");
					case 2: SPD(playerid,396,2,"Пополнить баланс","[1] Полиция LS\n[2] RCPD (Dilimore)\n[3] FBI\n[4] SFPD\n[5] Больница ЛС\n[6] Правительство\n[7] Больница SF\n[8] Автошкола\n[9] Radio LS\n[10] Army LS\n[11] Central Bank\n[12] Больница LV\n[13] Полиция LV\n[14] Radio LV\n[15] Army LV\n[16] Radio SF\n[17] Army SF", !"Принять", !"Отмена");
					case 3:
					{
					    f(global_str,sizeof(global_str),"Обратите внимание что изменение выкупа из кпз\nможет повлиять на развитие штата.\n\n{73B461}Введите в строку число от 1 до 90000.");
		                SPD(playerid,425,1,"Изменить цену выкупа",global_str, !"Принять", !"Отмена");
					}
					case 4:
					{
					    f(global_str,sizeof(global_str),"Обратите внимание что изменение цены на закупку продуктов\nможет повлиять на развитие штата.\n\n{73B461}Введите в строку число от 1 до 10.");
		                SPD(playerid,426,1,"Изменить стоимость закупки продуктов",global_str, !"Принять", !"Отмена");
					}
					case 5:
					{
					    f(global_str,sizeof(global_str),"Обратите внимание что изменение цены на закупку предметов\nможет повлиять на развитие штата.\n\n{73B461}Введите в строку число от 1 до 15.");
		                SPD(playerid,427,1,"Изменить стоимость закупки предметов",global_str, !"Принять", !"Отмена");
					}
		        }
			}
		}
		case 396:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
          			case 0: selfrac[playerid]=1;
		            case 1: selfrac[playerid]=2;
		            case 2: selfrac[playerid]=3;
		            case 3: selfrac[playerid]=4;
		            case 4: selfrac[playerid]=5;
		            case 5: selfrac[playerid]=6;
		            case 6: selfrac[playerid]=8;
		            case 7: selfrac[playerid]=9;
		            case 8: selfrac[playerid]=10;
		            case 9: selfrac[playerid]=20;
		            case 10: selfrac[playerid]=21;
		            case 11: selfrac[playerid]=22;
		            case 12: selfrac[playerid]=23;
		            case 13: selfrac[playerid]=24;
		            case 14: selfrac[playerid]=7;
		            case 15: selfrac[playerid]=TEAM_RADIOSF;
		            case 16: selfrac[playerid]=TEAM_ARMYSF;
		        }
		        f(global_str,sizeof(global_str),"{73B461}Вы действительно хотите пополнить баланс %s ?\nКазна мэрии : {FFFFFF}%d\n\n{FFFFFF}Введите в строку число от {FFFFFF}1 до %d",OrgInfo[selfrac[playerid]][oName],OrgInfo[TEAM_MERIALS][oBank],OrgInfo[TEAM_MERIALS][oBank]);
          		SPD(playerid,395,1,"Пополнить баланс организации",global_str, !"Принять", !"Отмена");
			}
		}
		case 395:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || OrgInfo[TEAM_MERIALS][oBank]<money) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете перевести такую сумму!");
				OrgInfo[selfrac[playerid]][oBank]+=money;
				SaveOrg(selfrac[playerid]);
				OrgInfo[TEAM_MERIALS][oBank]-=money;
				SaveOrg(TEAM_MERIALS);
				f(global_str,sizeof(global_str),"Губернатор: %s[%d] пополнил баланс организации: %s на %d",PN(playerid),playerid,OrgInfo[selfrac[playerid]][oName],money);
				SendGosMessage(0x73B461FF,global_str);
				selfrac[playerid]=0;
		    }
		}
		case 398:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: GLS[13] = 1;
		            case 1: GLS[13] = 2;
		            case 2: GLS[13] = 3;
		            case 3: GLS[13] = 4;
		            case 4: GLS[13] = 5;
		            case 5: GLS[13] = 6;
		            case 6: GLS[13] = 8;
		            case 7: GLS[13] = 9;
		            case 8: GLS[13] = 10;
		            case 9: GLS[13] = 20;
		            case 10: GLS[13] = 21;
		            case 11: GLS[13] = 22;
		            case 12: GLS[13] = 23;
		            case 13: GLS[13] = 24;
		            case 14: GLS[13] = 7;
		            case 15: GLS[13] = TEAM_RADIOSF;
		            case 16: GLS[13] = TEAM_ARMYSF;
				}
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} перенаправил прием платежей с налогов на {FFFFFF}%s",PN(playerid),playerid,OrgInfo[GLS[13]][oName]);
				SendGosMessage(0x73B461FF,global_str);
			}
		}
		case 402:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                f(global_str,sizeof(global_str),"{FFFFFF}Получатель налогов: {73B461}%s\nСостояние организации получателя: {FFFFFF}%d{FFFFFF}\n\n\n{73B461}-{FFFFFF} Налог на дом: {73B461}%d{FFFFFF}\n{73B461}-{FFFFFF} Налог на бизнес: {73B461}%d{FFFFFF}\n{73B461}-{FFFFFF} Налог на авто: {73B461}%d{FFFFFF}\nНалог на бизнес: {73B461}%d",OrgInfo[GLS[13]][oName],OrgInfo[GLS[13]][oBank],GLS[2],GLS[3],GLS[1], GLS[68]);
		                SPD(playerid,0,0,"Информация о налогах штата",global_str, !"Принять","");
		            }
		            case 1:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение налогов на дома может повлиять на дальнейшее\nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 3000.");
		                SPD(playerid,406,1,"Изменить часовую плату за дом",global_str, !"Принять", !"Отмена");
		            }
		            case 2:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение налогов на бизнес может повлиять на дальнейшее\nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2500.");
		                SPD(playerid,407,1,"Изменить часовую плату за бизнес",global_str, !"Принять", !"Отмена");
		            }
		            case 3:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение налогов на авто может повлиять на дальнейшее\nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2500.");
		                SPD(playerid,408,1,"Изменить часовую плату за авто",global_str, !"Принять", !"Отмена");
		            }
		            case 4:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение налогов на трейлеры может повлиять на дальнейшее\nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2500.");
		                SPD(playerid,409,1,"Изменить часовую плату за трейлеры",global_str, !"Принять", !"Отмена");
		            }
		        }
		    }
		    else callcmd::ekonom(playerid,"");
		}
		case 118:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >PI[playerid][pMoney]) return SendBotMessage(playerid,"Уважаемый! Пытайтесь ввести все символы правильно!");
				OrgInfo[PI[playerid][pMember][0]][oBank]+=money;
				GiveMoney(playerid,-money);
				f(global_str,sizeof(global_str),"{FFFFFF}%s {73B461}пополнил счет организации на {FFFFFF}%d$",PN(playerid),money);
				SendTeamMessage(PI[playerid][pMember][0],0x73B461FF,global_str);
				SaveOrg(PI[playerid][pMember][0]);
				SendBankBot(playerid);
		    }
		}
		case 406:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money > 6000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такой налог!");
				GLS[2] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в налоги на оплату дома. Теперь почасовая плата за дом составляет: {FFFFFF}%d",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 409:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >2500) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такой налог!");
				GLS[68] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в налоги на оплату трейлера. Теперь почасовая плата составляет: {FFFFFF}%d",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 407:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money > 6000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такой налог!");
				GLS[3] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в налоги на оплату бизнеса. Теперь почасовая плата составляет: {FFFFFF}%d",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 408:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >2500) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такой налог!");
				GLS[1] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в налоги на оплату авто. Теперь почасовая плата составляет: {FFFFFF}%d",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 404:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                f(global_str,sizeof(global_str),"{73B461}Получатель налогов: %s\n{73B461}Состояние организации получателя: {FFFFFF}%d{FFFFFF}\n\n\n- Свободный транспорт: {73B461}%d{FFFFFF}\n- Автобусы: {73B461}%d{FFFFFF}",OrgInfo[GLS[13]][oName],OrgInfo[GLS[13]][oBank],GLS[14],GLS[15]);
		                SPD(playerid,0,0,"Информация о аренде",global_str, !"Принять","");
		            }
		            case 1:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение цен на аренду транспорта может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 25000.");
		                SPD(playerid,418,1,"Изменить цены на аренду транспорта",global_str, !"Принять", !"Отмена");
		            }
		            case 2:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение цен на аренду транспорта может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2000.");
		                SPD(playerid,419,1,"Изменить цены на аренду р.транспорта",global_str, !"Принять", !"Отмена");
		            }
		        }
			}
			else callcmd::ekonom(playerid,"");
		}
		case 418:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >25000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену на аренду!");
				GLS[14] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в аренду транспорта. Теперь стоимость аренды составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 419:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >2000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену на аренду!");
				GLS[15] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в аренду рабочего транспорта. Теперь стоимость аренды составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}
		case 405:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                f(global_str,sizeof(global_str),"{73B461}Получатель налогов: %s\n{73B461}Состояние организации получателя: {FFFFFF}%d{FFFFFF}\n\n\n- Премия за поимку преступника: {73B461}%d{FFFFFF}\n- Премия за доставку патронов: {73B461}%d{FFFFFF}\n- Премия за убийство бандита в з.з.: {73B461}%d{FFFFFF}\n- Премия за обработку объявлений: {73B461}%d{FFFFFF}\n- Премия за проведение помолвки: {73B461}%d{FFFFFF}",OrgInfo[GLS[13]][oName],OrgInfo[GLS[13]][oBank],GLS[16],GLS[17],GLS[18],GLS[19],GLS[20]);
						SPD(playerid,0,0,"Информация о премиях штата",global_str, !"Принять","");
		            }
		            case 1:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2500.");
		                SPD(playerid,420,1,"Изменить премию в полиции",global_str, !"Принять", !"Отмена");
		            }
		            case 2:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 1000.");
		                SPD(playerid,421,1,"Изменить премию в армии",global_str, !"Принять", !"Отмена");
		            }
		            case 3:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 1000.");
		                SPD(playerid,422,1,"Изменить премию в армии",global_str, !"Принять", !"Отмена");
		            }
		            case 4:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 500.");
		                SPD(playerid,423,1,"Изменить премию за обработку объявлений",global_str, !"Принять", !"Отмена");
		            }
		            case 5:
		            {
		                f(global_str,sizeof(global_str),"Обратите внимание что изменение премии может быть слишком большое\nдля бюджета организации и может повлиять на \nразвитие штата.\n\n{73B461}Введите в строку число от 1 до 2000.");
		                SPD(playerid,424,1,"Изменить премию за проведения помолвки",global_str, !"Принять", !"Отмена");
		            }
				}
			}
			else callcmd::ekonom(playerid,"");
		}
		case 420:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >2500) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую премию!");
				GLS[16] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию полицейских. Теперь их премия за арест человека составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 421:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >1000) return SCM(playerid,COLOR_RED,!"Вы не можете установить такую премию!");
				GLS[17] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию Army LS. Теперь их премия за доставку патронов составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 422:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >1000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую премию!");
				GLS[18] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию Army LS. Теперь премия за убийство бандита составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 423:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >500) return SCM(playerid,COLOR_RED,!"Вы не можете установить такую премию!");
				GLS[19] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию CNN. Теперь их премия за обработку объявлений составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 424:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >2000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую премию!");
				GLS[20] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в премию за проведение помолвки. Теперь их премия составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SendGosMessage(0x73B461FF,global_str);
		    }
		}
		case 425:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >90000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену выкупа!");
				GLS[21] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в выкуп из КПЗ. Теперь ее стоимость составляет: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
		    }
		}

		case 426:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >10) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену для закупки!");
				GLS[31] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в стоимость закупки продуктов на ферме. Теперь ее стоимость: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
				f(global_str, sizeof(global_str), "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
				UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);
		    }
		}
		case 427:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money >15) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену для закупки!");
				GLS[29] = money;
				SaveInformation();
				f(global_str,sizeof(global_str),"Губернатор: {FFFFFF}%s[%d]{73B461} внес изменения в стоимость закупки предметов на грузчиках. Теперь ее стоимость: {FFFFFF}%d$",PN(playerid),playerid,money);
				SCMALL(0x73B461FF,global_str);
				f(global_str, sizeof(global_str), "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
				UpdateDynamic3DTextLabelText(FactoryText[2], COLOR_WHITE, global_str);
		    }
		}
		case 429:
		{
		    if(!response) return false;
		    
			if(Int_GetPlayerData(playerid, "antiFloodProducts") > Global_Time)
			{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы слишком часто загружаете продукты!");
				return SCMF(playerid, -1, "Попробуйте через {FF6347}%d{FFFFFF} секунд.", Int_GetPlayerData(playerid, "antiFloodProducts")-Global_Time);
			}
			
			new count = strval(inputtextsave), money = count*GLS[31], list = VehicleInfo[GetPlayerVehicleID(playerid)][vListID];
			
			if(!(1 <= count <= 500-CarproductCount[list])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете закупить столько продуктов!");
			else if(PI[playerid][pMoney] < money) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			else if(GLS[27] < count) return SCM(playerid,COLOR_RED,!"На складе фермы недостаточно продуктов!");
			
			CarproductCount[list] += count;
			GiveMoney(playerid, -money, "покупка продуктов на ферме");
			GiveBizMoney(BIZ_ELECTRO_LS, money/2);
			GLS[27] -= count;
			SaveInformation();
			//CarproductType[GetPlayerVehicleID(playerid)] = 1;
			SCM(playerid,COLOR_LIGHTBLUE,"Вы успешно загрузили машину. Используйте /orderlist чтобы найти заказчика продуктов!");
			
			f(global_str, 150 ,"{D78787}Развозчик продуктов\n{FFFFFF}Загружено: %d",CarproductCount[list]);
			UpdateDynamic3DTextLabelText(CarProductText[list], 0xFFFFFFFF, global_str);
			
			SetPVarInt(playerid, "antiFloodProducts", Global_Time+300);
			f(global_str, sizeof(global_str), "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
			return UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);
		}
  		
		case 9612:
		{
		    if(response)
		    {
		        global_str = "";
		        switch(listitem)
				{
				    case 0:
				    {
				        global_str = "Лесопилке";
				        SetPVarInt(playerid,"warplace",1);
				    }
				    case 1:
				    {
				        global_str = "Заброшенном аэродроме";
				        SetPVarInt(playerid,"warplace",2);
				    }
				    case 2:
				    {
				        global_str = "Ферме Fort Carson";
				        SetPVarInt(playerid,"warplace",3);
				    }
					case 3:
					{
					    global_str = "Заброшенной деревне";
				        SetPVarInt(playerid,"warplace",4);
					}
				}
				f(global_str, 400,"{FFFFFF}Вы хотите начать войну за этот бизнес?\n\nЕсли вы согласитесь вам придётся провести переговоры на %s, взяв собой более 4 человек!\nПосле чего ждать 10 минут пока все соберутся и если на точке соберутся по 4 человека с каждой мафии ,вы начнете войну!",global_str);
				SPD(playerid,591,0,"Информация",global_str,"Да","Нет");
		    }
		}
		case 591:
		{
		    if(response)
		    {
				if(BizWarState > 0)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже устроили стрелу!");
		        new num; static placewar[64]; placewar = "";
				foreach(new i: Player)
				{
				    if(GetTeamID(i)== BizData[ClickBiz[playerid]][bKrasher]) num++;
				}
				if(num<4)return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}В мафии , которой вы хотите устроить стрелу , в онлайне меньше 4 человек!");
				if(Int_GetPlayerData(playerid,"warplace")==0)return 0;
				PlaceWar = Int_GetPlayerData(playerid,"warplace");
				BizTime[0] = 10;
    			BizWarState = 1; //ожидание
				BizAtack = GetTeamID(playerid);
				BizDeff = BizData[ClickBiz[playerid]][bKrasher];
				switch(PlaceWar)
				{
				    case 1: placewar = "лесопилке";
				    case 2: placewar = "заброшеном аэродроме";
				    case 3: placewar = "ферме Fort Carson";
				    case 4: placewar = "заброшенной деревне";
				}
				SendTeamMessage(GetTeamID(playerid),COLOR_VALIK, !"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
				f(global_str,sizeof(global_str),"Ваша мафия назначила стрелу вражеской мафии на %s, в эту точку вы должны прибыть в течение 10-ти минут.",placewar);
		        SendTeamMessage(GetTeamID(playerid),COLOR_VALIK,global_str);
		        SendTeamMessage(GetTeamID(playerid),COLOR_VALIK, !"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
		        SendTeamMessage(BizData[ClickBiz[playerid]][bKrasher],COLOR_VALIK, !"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
		        f(global_str,sizeof(global_str),"Вам назначили стрелу на %s, вы должны появится там за 10 минут.",placewar);
		        SendTeamMessage(BizData[ClickBiz[playerid]][bKrasher],COLOR_VALIK,global_str);
		        SendTeamMessage(BizData[ClickBiz[playerid]][bKrasher],COLOR_VALIK, !"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
                f(global_str,sizeof(global_str),"Игрок %s назначил стрелу на %s",PN(playerid),placewar);
				BizWar = ClickBiz[playerid];
				foreach(new i: Player)
				{
				    if(PI[i][pMember][0] == BizAtack || PI[i][pMember][0] == BizDeff)
					{
					    switch(PlaceWar)
						{
							case 1: EnableGPSForPlayer(i,-553.5379,-189.4500,78.4063);
							case 2: EnableGPSForPlayer(i,400.7428,2505.4106,16.4844);
							case 3: EnableGPSForPlayer(i,331.5244,1116.4584,11.2496);
							case 4: EnableGPSForPlayer(i,-1297.4867,2551.0503,87.1012);
						}
					}
				}
		    }
			else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы отказались воевать за этот бизнес!");
		}
		case 33:
		{
		    if(!response) return 1;
			if(!IsAtBankomat(playerid,10.0))
			{
				switch listitem do
				{
					case 0:
					{
						f(global_str, sizeof(global_str), "{FFFFFF}Текущее состояние счета: {B83434}$%d, {FFFFFF}состояние депозита: {B83434}$%d", PI[playerid][pBank], PI[playerid][pDepositInfo][0]);
						SendBotMessage(playerid, global_str);
					}
					case 1:
					{
						if(!IsAtBankomat(playerid,10.0)) SPD(playerid, 35, DIALOG_STYLE_INPUT, !"Введите сумму", !"{FFFFFF}Введите сумму для снятия\nКомиссия на снятие: {FCBE52}2{FFFFFF} процента", !"Далее", !"Отмена");
						else SPD(playerid, 35, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму для снятия\n{F69B2C}При снятии денег в банкомате вы теряете 1 процент за услуги нашей компании.\n", !"Далее", !"Отмена");
					}
					case 2: SPD(playerid, 34, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму для пополнения\n\n", !"Далее", !"Отмена");
					case 3:
					{
						if(PI[playerid][pLevel] >= 3) SPD(playerid, 37, DIALOG_STYLE_INPUT, !"Введите ID", !"{FFFFFF}Введите ID/Ник игрока которому хотите перевести деньги\nКомиссия на переводы:\nот {5ebf70}100 000${FFFFFF} 1 процент\nот {4ac24a}1 000 000${FFFFFF} 2 процента\nот {3a9e3a}10 000 000${FFFFFF} 3 процента\nот {d4904c}100 000 000${FFFFFF} 4 процента", !"Выбор", !"Отмена");
						else SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Переводить деньги можно только с 3-го уровня");
					}
					case 4:
					{
					/* 	if(!CheckFamilyLevel(playerid, 10))
							return false; */
						
						new cost = 0;
						
						global_str = "{FFFFFF}";
						
						for(new i; i < MAX_VEHICLES; i++)
						{
							if(!(OwnableCar[i] == INVALID_VEHICLE_ID))
							{
								new carid = OwnableCar[i];
								if(IsPlayerHaveCar(playerid, carid) && CarInfo[i][cShtrafer])
								{
									cost += CarInfo[i][cShtrafer];
									strcat(global_str, (str_f("Транспорт %s: $%d\n", GetVehicleName(carid), CarInfo[i][cShtrafer])));
								}
							}

							if(i < OWNABLEHOUSES && (GetString(HouseInfo[i][hOwner],PN(playerid)) or IsPlayerTenant(playerid, i)) && HouseInfo[i][hNalog])
							{
								cost += HouseInfo[i][hNalog];
								strcat(global_str, (str_f("Дом №%d: $%d\n", i, HouseInfo[i][hNalog])));
							}
							
							if(i < OWNABLEBIZES && (GetString(BizData[i][bOwner], PN(playerid)) or GetString(BizData[i][bZam], PN(playerid))) && BizData[i][bLevel])
							{
								cost += BizData[i][bLevel];
								strcat(global_str, (str_f("Бизнес №%d (%s): $%d\n", i, BizData[i][bName], BizData[i][bLevel])));
							}
							
						}
						
						SetPVarInt(playerid, "AllNalogBank", cost);
						
						strcat(global_str, (str_f("{ffffff}\n\n\n{ffffff}В сумме за всё: {ffff00}$%d%s\n\n{ffffff}Вы хотите оплатить все вышеперечисленные налоги?", cost, ImprovementsData[playerid][imFreeloader] ? (str_f("\n{42B02C}Но по скольку вы имеете улучшение \'Халявщик\', сумма снижена в два раза:\n{ffffff}Сумма оплаты налогов: {ffff00}$%d", cost/2)):"")));
						
						return SPD(playerid, 15252, DIALOG_STYLE_MSGBOX, !"Оплата всех налогов", global_str, !"Оплатить", !"Отмена");
					}
					case 5:
					{
						static str[250]; str = ""; new cars;
						foreach(Vehicle, i)
						{
							if(OwnableCar[i] == INVALID_VEHICLE_ID) continue;
							new carid = OwnableCar[i];
							if(IsPlayerHaveCar(playerid, carid))
							{
								if(CarInfo[i][cShtrafer] > 0)
								{
									ShowCar[playerid][cars][0] = carid;
									f(global_str, sizeof(global_str), "%s %s(%d)\n", global_str, GetVehicleName(carid), carid);
									cars ++;
									if(cars > 0) SPD(playerid, 881, DIALOG_STYLE_LIST, !"Мой транспорт", global_str, !"Выбор", !"Отмена");
								}
								else
								{
									f(str, 250, "На транспорт: %s(%d) не выставлено налогов!\n", GetVehicleName(carid), carid);
									SCM(playerid, COLOR_GREY, str);
								}
							}
						}
						if(cars == 0) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нет налога на личный транспорт!");
					}
					case 6:
					{
						if(PI[playerid][pDepositInfo][1]) return SendBotMessage(playerid, !"Класть деньги на депозит, можно 1-ин раз в час!");
						SPD(playerid, 55, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 5 000 000$ {FFFFFF}для пополнения депозита\n\n[{FFF700}i] {FFFFFF}Пополнять депозит можно 1-ин раз в час!\n[{FFF700}i] {FFFFFF}После пополнения депозита, вы не сможете снять с него деньги,\nв течение 5-ти игровых часов!\n[{FFF700}i] {FFFFFF}Ежечасовой процент зависит от вашей влиятельности ((VIP))\n\n", !"Далее", !"Отмена");
					}
					case 7:
					{
						if(PI[playerid][pDepositInfo][2]) return SendBotMessage(playerid, !"Снимать деньги с депозита, можно\nчерез 5 часов, после последнего пополнения!");
						SPD(playerid, 57, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 5 000 000$ {FFFFFF}для получения денег со своего депозита.\n\n", !"Далее", !"Отмена");
					}
					case 8:
					{
						global_str = "";
						new cars;
						foreach(Vehicle, i)
						{
							if(OwnableCar[i] == INVALID_VEHICLE_ID) continue;
							new carid = OwnableCar[i];
							if(IsPlayerHaveCar(playerid, carid))
							{
								if(CarInfo[i][cShtraf] > 0)
								{
									ShowCar[playerid][cars][0] = carid;
									f(global_str, 1024, "%s{FFFFFF}%s(%d)\n",global_str, GetVehicleName(carid), carid);
									cars ++;
									if(cars > 0) SPD(playerid, 171, DIALOG_STYLE_LIST, !"Мой транспорт", global_str, !"Выбор", !"Отмена");
								}
							}
						}
						if(!cars) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нет транспорта, который стоит на штрафстоянке!");
					}
					case 9:
					{
						f(global_str,350,"{FFFFFF}Вы хотите приобрести ЕВРО?\n\nСтоимость 1-й купюры: {10F441}%d${FFFFFF}\nВ наличии {10F441}%d{FFFFFF} ЕВРО\n{AFAFAF}Введите в строку нужное количество валюты!",GLS[69]*10,GLS[70]);
						SPD(playerid,3765,DIALOG_STYLE_INPUT,"",global_str,"Обмен","Отмена");
					}
					case 10:
					{
						f(global_str,350,"{FFFFFF}Вы хотите продать ЕВРО?\n\nСтоимость 1-й купюры: {10F441}%d${FFFFFF}\nУ вас {10F441}%d{FFFFFF} ЕВРО\n{AFAFAF}Введите в строку нужное для продаже количество валюты!",GLS[69], GetCount(playerid, 1080));
						SPD(playerid,3765,DIALOG_STYLE_INPUT,"",global_str,"Продать","Отмена");
						SetPVarInt(playerid, "eurolist",1);
					}
					case 12: SPD(playerid, 35, DIALOG_STYLE_INPUT, !"Введите сумму", !"{FFFFFF}Введите сумму для снятия", !"Далее", !"Отмена"),SetPVarInt(playerid, "SwitchBankMy", 1);
					case 13: SPD(playerid, 34, DIALOG_STYLE_INPUT, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму для пополнения\n\n", !"Далее", !"Отмена"),SetPVarInt(playerid, "SwitchBankMy", 1);
				}
			}
			else
			{
				switch(listitem)
				{
					case 0:
					{
						f(global_str, 125, "{FFFFFF}Текущее состояние счета: {B83434}$%d, {FFFFFF}состояние депозита: {B83434}$%d", PI[playerid][pBank], PI[playerid][pDepositInfo][0]);
						SendBotMessage(playerid, global_str);
					}
					case 1:
					{
						SPD(playerid, 35, DIALOG_STYLE_INPUT, !"Введите сумму", !"{FFFFFF}Введите сумму для снятия\n{F69B2C}При снятии денег вы теряете 6 процентов за услуги нашей компании.\n", !"Далее", !"Отмена");
					}
				}
			}
			if(listitem == GlobalMassive[playerid][14]) 
				ShowHouseDialog(playerid, 1);
			
			else if(listitem == GlobalMassive[playerid][15])
			{
			    if(GetPlayerBiz(playerid) == -1) return SCM(playerid, COLOR_GREY, !"У вас нет бизнеса");
			    new bizs;
			    global_str = "";
			    for(new i = 0; i < OWNABLEBIZES;i++)
				{
					if(GetString(BizData[i][bOwner], PN(playerid)) || GetString(BizData[i][bZam], PN(playerid)))
					{
						if(BizData[i][bLevel] > 0)
						{
						    ShowBiz[playerid][bizs] = i;
						    f(global_str, 1024, "%s{FFFFFF}%s {E5AB2E}(%d){FFFFFF} Налог: {D44F23}%d$\n", global_str, BizData[i][bName], i, BizData[i][bLevel]);
						    bizs ++;
						}
					}
				}
				if(strlen(global_str) > 0) SPD(playerid, 9762, DIALOG_STYLE_LIST, !"Оплата налога", global_str, !"Выбор", !"Отмена");
				else SendBotMessage(playerid, !"На данный момент, вам не надо платить налог за бизнес!");
			}
			else if(listitem == GlobalMassive[playerid][16])
			{
			    if(!PI[playerid][pMember][0]) return 0;
			    f(global_str, sizeof(global_str), "\n\n{FFFFFF}Введите сумму для пополнение на счет организации {73B461}%s\n\n", OrgInfo[GetTeamID(playerid)][oName]);
			    SPD(playerid, 118, DIALOG_STYLE_INPUT, !"Пополнение счета организации", global_str, !"Оплатить", !"Отмена");
			}
			else if(listitem == GlobalMassive[playerid][17])
			{
			    if(!PI[playerid][pPhoneInfo][0]) return 0;
			    SPD(playerid, 119, DIALOG_STYLE_INPUT, !"Пополнить баланс", !"\n\n{FFFFFF}Введите сумму для пополнение на баланс своего телефона\n\n", !"Оплатить", !"Отмена");
			}
		}
		case 55:
		{
		    if(!response)
		        return ShowBankMenu(playerid);
			if(!strlen(inputtextsave))
			    return SPD(playerid, 55, DIALOG_STYLE_MSGBOX, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 5 000 000$ {FFFFFF}для пополнения депозита\n\n[{FFF700}i] {FFFFFF}Пополнять депозит можно 1-ин раз в час!\n[{FFF700}i] {FFFFFF}После пополнения депозита, вы не сможете снять с него деньги,\nв течение 5-ти игровых часов!\n[{FFF700}i] {FFFFFF}Ежечасовой процент зависит от вашей влиятельности ((VIP))\n", !"Далее", !"Отмена");
		    if(PI[playerid][pDepositInfo][0] > 100000000)
		        return SendBotMessage(playerid, !"На вашем депозитном счету, больше 100 миллионов,\n положить больше нельзя, дабы снять это ограничение вам нужно состоять в семье\nимеющийю улучшение 'Банковские махинации'");
			new
			    money = strval(inputtextsave);
			if(money >= 1 && PI[playerid][pMoney] >= money && money <= 5000000)
			{
				PI[playerid][pDepositInfo][0] += money;
				GiveMoney(playerid, -money);
				f(global_str, sizeof(global_str), "Вы положили на свой депозитный счет $%d", money);
				SendBotMessage(playerid, global_str);
				PI[playerid][pDepositInfo][1] = 1;
				PI[playerid][pDepositInfo][2] = 5;
				GameTextForPlayer(playerid, !"Successful", 0, 1);
			}
			else
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\nУважаемый! Пытайтесь ввести все символы правильно!\nМинимальная сумма для пополнения {EE772D}10 000$\n{FFFFFF}Максимальная сумма для пополнения {EE772D}5 000 000$\n\n", !"Понял", !"");
		}
		case 57:
		{
		    if(!response)
		        return ShowBankMenu(playerid);
			if(!strlen(inputtextsave))
			    return SPD(playerid, 57, DIALOG_STYLE_MSGBOX, !"Введите сумму", !"\n\n{FFFFFF}Введите сумму от {B7D22C}10 000$ до 5 000 000$ {FFFFFF}для получения денег со своего депозита.\n\n", !"Далее", !"Отмена");
			new
			    money = strval(inputtextsave);
			if(money >= 1 && PI[playerid][pMoney] >= money && money <= 5000000 && PI[playerid][pDepositInfo][0] >= money)
			{
				PI[playerid][pDepositInfo][0] -= money;
				GiveMoney(playerid, money);
                f(global_str, sizeof(global_str), "Вы сняли со своего депозитного счета $%d", money);
				SendBotMessage(playerid, global_str);
				GameTextForPlayer(playerid, !"Successful", 0, 1);
			}
			else
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\nУважаемый! Пытайтесь ввести все символы правильно!\nМинимальная сумма для снятия {EE772D}10 000$\n\n", !"Понял", !"");
		}
		case 34:
		{
		    if(!response) return ShowBankMenu(playerid);

		    if(!strlen(inputtextsave)) return SPD(playerid, 34, DIALOG_STYLE_INPUT, !"Введите сумму", !"Введите сумму для пополнения", !"Далее", !"Отмена");

	        new money = strval(inputtextsave);

			if(money > 200000000) return SendBotMessage(playerid, !"Приносим извинения, но пополнять счет можно только до 200.000.000$");

			if(PI[playerid][pBank]+money >= 1800000000) return SendBotMessage(playerid, !"Приносим извинения, но в нашем банке ячейки не позволяют\nзапихнуть в них больше 1.8 миллиардов!");
	        if(!Int_GetPlayerData(playerid, "SwitchBankMy"))
			{
				if(money >= 1 && PI[playerid][pMoney] >= money)
				{
					PI[playerid][pBank] += money;
					GiveMoney(playerid, -money);
					f(global_str, sizeof(global_str),"[Информация] {FFFFFF}Вы положили на свой банковский счет $%d", money);
					SCM(playerid, COLOR_VALIK, global_str);
					SendBankBot(playerid);
				}
				else  SendBotMessage(playerid, !"Уважаемый! Пытайтесь ввести все символы правильно!");
			}			
			DeletePVar(playerid, "SwitchBankMy");
			return 1;
		}
		case 35:
		{
		    if(response)
		    {
		        if(!strlen(inputtextsave)) return SPD(playerid,35,1,"Введите сумму","{FFFFFF}Введите сумму для снятия\nКомиссия на снятие: {FCBE52}2{FFFFFF} процента","Далее", !"Отмена");
		        new money = strval(inputtextsave);
				if(!Int_GetPlayerData(playerid, "SwitchBankMy"))
				{
					if(money >= 1 && PI[playerid][pBank] >= money)
					{
						new moni;
						if(!IsAtBankomat(playerid,10.0))  moni = money/50;
						else moni = money/100*6;
						PI[playerid][pBank] -= money;
						GiveMoney(playerid,(money-moni));
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы сняли со своего банковского счета $%d",money);
						SCM(playerid,COLOR_VALIK,global_str);
						SendBankBot(playerid);
					}
					else SendBotMessage(playerid,"Уважаемый! Пытайтесь ввести все символы правильно!");
				}
				DeletePVar(playerid, "SwitchBankMy");
			}
			else ShowBankMenu(playerid);
			return 1;
		}
		case 37:
		{
		    if(!response)
		        return ShowBankMenu(playerid);

	        if(!strlen(inputtextsave))
				return SPD(playerid, 37, DIALOG_STYLE_INPUT, !"Введите ID", !"{FFFFFF}Введите ID игрока которому хотите перевести деньги", !"Выбор", !"Отмена");

	        sscanf(inputtextsave, "u", TransferPlayer[playerid]);
	        if(PI[TransferPlayer[playerid]][pLevel] < 2)
	            return SendBotMessage(playerid, !"Переводить деньги, можно игрокам старше 1-го уровня!");

	        if(IsPlayerConnected(TransferPlayer[playerid]))
	        {
		        f(global_str, sizeof(global_str), "{FFFFFF}Введите сумму которую хотите перевести игроку {B83434}%s", PN(TransferPlayer[playerid]));
		        SPD(playerid, 41, DIALOG_STYLE_INPUT, !"Введите сумму", global_str, !"Готово", !"Отмена");
	        }
	        else
			{
				SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не в сети");
				ShowBankMenu(playerid);
			}
		    return 1;
		}
	 	case 39:
	    {
	    	if(response)
	    	{
	    		new id = PI[playerid][pMember][0];
				if(strval(inputtextsave) >= 1 && OrgInfo[id][oBank] >= strval(inputtextsave))
				{
	    			OrgInfo[id][oBank] -= strval(inputtextsave);
	    			GiveMoney(playerid,strval(inputtextsave));
	    			f(global_str, sizeof(global_str), "Вы сняли $%d со счёта вашей организации.Теперь на счету вашей организации $%d",strval(inputtextsave),OrgInfo[id][oBank]);
	   				SPD(playerid,0,0,"Банк",global_str,"ОК","");
	   				f(global_str,sizeof(global_str),"{ECB534}%s снял с организации %d$",PN(playerid),strval(inputtextsave));
	   				SendTeamMessage(PI[playerid][pMember][0],-1,global_str);
	    			SaveOrg(id);
	    			SendBankBot(playerid);
	    		}
			    else
			    {
			    	SendBotMessage(playerid,"Извините, но на счету вашей организации нет столько денег!");
			    	return 1;
			    }
			}
			else ShowBankMenu(playerid);
			return 1;
		}
		case 41:
		{
		    if(!response)
		        return SPD(playerid, 37, DIALOG_STYLE_INPUT, !"Введите ID", !"{FFFFFF}Введите ID игрока которому хотите перевести деньги", !"Выбор", !"Отмена");

	        new
				id = TransferPlayer[playerid],
	            money = strval(inputtextsave);
	        if(!strlen(inputtextsave))
			{
	        	f(global_str, sizeof(global_str), "{FFFFFF}Введите сумму которую хотите перевести игроку {B83434}%s", PN(TransferPlayer[playerid]));
	        	SPD(playerid, 41, DIALOG_STYLE_INPUT, !"Введите сумму", global_str, !"Готово", !"Отмена");
	        	return 1;
	        }
	        //if(id == playerid)
				//return 0;
			if(money > 200000000) return SendBotMessage(playerid, !"Приносим извинения, но переводить можно только до 200.000.000$!");
            if(PI[id][pBank]+money >= 1800000000) return SendBotMessage(playerid, !"Приносим извинения, вместе с вашим переводом у этого человека получится\nбольше 1.8 миллиардов, которые мы не можем поместить в его ячейку!");
	        if(money >= 1 && PI[playerid][pBank] >= money)
	        {
	            PI[playerid][pBank] -= money;
	            if(money <= 100000) money -= money/100;
				else if(money <= 1000000) money -= money/50;
				else if(money <= 10000000) money -= money/100*3;
				else if(money >= 100000000) money -= money/100*4;
				//
				f(global_str, 350, "Игрок <a href=../pages/user?id=%d>%s</a> [IP: %s] перевел %d$ игроку <a href=../pages/user?id=%d>%s</a> [IP: %s] (Money: %d)", PI[playerid][pID], PN(playerid), PlayerIp[playerid], money, PI[id][pID], PN(id), PlayerIp[id], PI[id][pBank]);
				aml(global_str, 0, "", "");
				//
				PI[id][pBank] += money;
	            f(global_str, sizeof(global_str), "Игрок %s[%d] [IP: %s] перевел игроку %s[%d] [IP: %s] на счет $%d [$%d]", PN(playerid), playerid, PlayerIP(playerid), PN(id), id, PlayerIP(id), money, PI[id][pBank]);
				if(money > 3000) SendAdminsMessage(COLOR_OLDRED, global_str);
				f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы перевели $%d игроку %s(%d) на счет", money, PN(id), id);
		        SCM(playerid ,COLOR_YELLOW, global_str);
		        f(global_str, sizeof(global_str), "Вам поступил перевод на ваш счет в размере $%d от жителя %s(%d)", money, PN(playerid), playerid);
		        SCM(id, COLOR_YELLOW, global_str);
		        SendBankBot(playerid);
	        }
	        else SendBotMessage(playerid, !"Уважаемый! Пытайтесь ввести все символы правильно!");
			return 1;
		}
		case 3920:
		{
		    if(response)
			{
			    f(global_str,sizeof(global_str),"{D38A37}- EasterBoard Farm. Часть 2{FFFFFF}\n\nВ чем же отличие между работами и должностями на ферме, или зачем вобще нужна ферма?\nБлагодаря нашей ферме, развозчики продуктов могут поставлять товары на склады городов.\nОтличие работ, в их перспективности, интересе работы, а также прибылью.\nПо скольку в нашем штате не так много пилотов, то работа водителя кукурузника на данный момент, самая прибыльная, перед ней идет комбайнер, а там уже и тракторист.");
       			SPD(playerid,0,0,!"",global_str, !"Закрыть","");
			}
		}
		case 3919:
		{
		    if(response)
			{
			    new hour,minuite,second;
			    gettime(hour,minuite,second);
			    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
				{
			 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
			 		return 1;
				}
			    switch(listitem)
			    {
			        case 0:
			        {
			            f(global_str,sizeof(global_str),"{D38A37}- EasterBoard Farm.{FFFFFF}\n\nЯвляется самым большим предприятием в нашем штате.\nздесь вы сможете начать работу самым обычным фермером, исполняющим самую простую работу и\nзакончить полётами на кукурузнике. С самого начала вы имеете 1 уровень фермера.\nПоработав немного начинающим фермером, вы сможете устроиться трактористом,\nпозже вы получите еще опыта в работе и доступ к комбайну и кукурузнику.\n{D38A37}/ffarm -навык фермера\n\nУдачной работы");
			            SPD(playerid,3920,0,"",global_str,"Читать еще", !"Закрыть");
			        }
			        case 1:
			        {
			            if(PlayerJob[playerid]!= 17 && PlayerJob[playerid]!= 18 && PlayerJob[playerid]!= 19 && PlayerJob[playerid]!= 20)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы здесь не работаете!");
			            if(PlayerJob[playerid]==17)
			            {
			                if(InJob[playerid]==0)
			                {
			                    PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	                            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 133);
								if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 131);
								InJob[playerid]=1;
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в форму начинающего фермера!");
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Отправляйтесь по красному маркеру и переносите сено на склад!");
								EnableGPSForPlayer(playerid, -121.0891,113.6472,3.1172);
								ferman[playerid]=0;
							}
							else
							{
							    InJob[playerid]=0;
							    SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
							    SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно закончили работу, если вы не получили зарплату ее можно забрать в соседней комнате!");
							    for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], false);
								if(InJob[playerid]==3) RemovePlayerAttachedObject(playerid, 7);
							}
			            }
			            if(PlayerJob[playerid]==18)
			            {
			                if(InJob[playerid]==0)
			                {
			                    PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	                            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 158);
								if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 201);
								InJob[playerid]=1;
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в форму тракториста!");
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Введите /jobhelp для подробного описания работы!");
			                }
			                else
							{
							    InJob[playerid]=0;
							    SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
							    SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно закончили работу, получить зарплату можно в соседней комнате!");

							}
						}
						if(PlayerJob[playerid]==19)
			            {
			                if(InJob[playerid]==0)
			                {
			                    PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	                            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 161);
								if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 198);
								InJob[playerid]=1;
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в форму комбайнера!");
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Введите /jobhelp для подробного описания работы!");
			                }
			                else
							{
							    InJob[playerid]=0;
							    SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
							    SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно закончили работу, получить зарплату можно в соседней комнате!");
							}
						}
						if(PlayerJob[playerid]==20)
			            {
			                if(InJob[playerid]==0)
			                {
			                    PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	                            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 128);
								if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 198);
								InJob[playerid]=1;
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы переоделись в форму водителя кукурузника!");
								SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Введите /jobhelp для подробного описания работы!");
			                }
			                else
							{
							    InJob[playerid]=0;
							    SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
							    SCM(playerid,COLOR_VALIK, !"[Информация]{FFFFFF} Вы успешно закончили работу, получить зарплату можно в соседней комнате!");
							}
						}
			        }
			        case 2:
			        {
			            if(InJob[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для начала, закончите нынешнюю работу!");
			            if(PlayerJob[playerid]==17)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже работаете начальным фермером!");
			            ferman[playerid]=0;
			            PlayerJob[playerid]=17;
			            ShowJobInfo(playerid, PlayerJob[playerid]);
			            SCM(playerid,COLOR_VALIK, !"Вы успешно устроились на должность начинающего фермера. Для того чтобы начать работу, выберите пункт Переодеться!");
			            SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
			            //SPD(playerid,3919,2,"","{73B461}-{FFFFFF} Информация\n{73B461}-{FFFFFF} Переодеться\n{73B461}-{FFFFFF} Начать работу на ферме\n{73B461}-{FFFFFF} Получить доступ к работе тракториста\n{73B461}-{FFFFFF} Получить доступ к работе комбайнера\n{73B461}-{FFFFFF} Получить доступ к работе водителя кукурузника", !"Принять", !"Отмена");

			        }
			        case 3:
			        {
			            if(InJob[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для начала, закончите нынешнюю работу!");
			            if(PlayerJob[playerid]==18)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже работаете трактористом!");
			            if(PI[playerid][pContractTime]<500)
						{
						    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете устроиться трактористом, так как ваш навык фермера недостаточно высок!");
						    SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						    return 0;
						}
						ferman[playerid]=0;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно устроились на должность тракториста. Для того чтобы начать работу, выберите пункт Переодеться!");
						SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						//SPD(playerid,3919,2,"","{73B461}-{FFFFFF} Информация\n{73B461}-{FFFFFF} Переодеться\n{73B461}-{FFFFFF} Начать работу на ферме\n{73B461}-{FFFFFF} Получить доступ к работе тракториста\n{73B461}-{FFFFFF} Получить доступ к работе комбайнера\n{73B461}-{FFFFFF} Получить доступ к работе водителя кукурузника", !"Принять", !"Отмена");
			            PlayerJob[playerid]=18;
			            ShowJobInfo(playerid, PlayerJob[playerid]);
			        }
			        case 4:
			        {
						if(InJob[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для начала, закончите нынешнюю работу!");
			            if(PlayerJob[playerid]==19)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже работаете комбайнером!");
			            if(PI[playerid][pContractTime]<3200)
						{
							SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете устроиться комбайнером, так как ваш навык фермера недостаточно высок!");
						 	SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						    return 0;
						}
						ferman[playerid]=0;
						SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно устроились на должность комбайнера. Для того чтобы начать работу, выберите пункт Переодеться!");
						SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						//SPD(playerid,3919,2,"","{73B461}-{FFFFFF} Информация\n{73B461}-{FFFFFF} Переодеться\n{73B461}-{FFFFFF} Начать работу на ферме\n{73B461}-{FFFFFF} Получить доступ к работе тракториста\n{73B461}-{FFFFFF} Получить доступ к работе комбайнера\n{73B461}-{FFFFFF} Получить доступ к работе водителя кукурузника", !"Принять", !"Отмена");
			            PlayerJob[playerid]=19;
			            ShowJobInfo(playerid, PlayerJob[playerid]);
			        }
			        case 5:
			        {
			            if(InJob[playerid]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для начала, закончите нынешнюю работу!");
			            if(PlayerJob[playerid]==20)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже работаете водителем кукурузника!");
			            if(PI[playerid][pContractTime]<7000)
						{
							SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете устроиться водителем кукурузника, так как ваш навык фермера недостаточно высок!");
						 	SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
						    return 0;
						}
      					ferman[playerid]=0;
						SCM(playerid,COLOR_VALIK, !"Вы успешно устроились на должность водителя кукурузника. Для того чтобы начать работу, выберите пункт Переодеться!");
						SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Основные комманды которые помогут вам в изучения фермы: '/jobhelp | /ffarm | /help'");
			            PlayerJob[playerid]=20;
                        ShowJobInfo(playerid, PlayerJob[playerid]);
			        }
			    }
			}
		}
		case 3331:
		{
		    if(response)
			{
			    if(PI[playerid][pMoney]<20000) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				SPD(playerid, 771, 0, "", "{FFFFFF}Тест представляет из себя 7 вопросов, которые вы можете прочитать (( /help ))\nЕсли вы провалите тест деньги вам не вернут. ( 20 000$ )\nНу ,а если вы пройдете тест, вам дадут следующие указания.\n{9FC084}Нажмите кнопку 'Далле' чтобы начать собеседование.", "Далее", !"Отмена");
			}
		    else
		    {
		        CarTest[playerid] = -1;
		        FlyivingTest[playerid] = 0;
		    }
		}
		case 771:
		{
      		if(response)
		    {
				GiveMoney(playerid,-20000);
		        new question = TestFASKMassive[playerid][0];
		        SPD(playerid,3339,QueFInfo[question][dDialog],QueFInfo[question][dQuestion],QueFInfo[question][dAnswers],"Далее", !"Отмена");
		    }
		    else
		    {
		        CarTest[playerid] = -1;
		        FlyivingTest[playerid] = 0;
		    }
		}
		case 46:
		{
			if(response)
			{
				if(PI[playerid][pMoney] < 1000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостачно денег!");
				GiveMoney(playerid, -1000);
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно получили разрешение на экзамен мото-транспорта! Для того чтобы приступить к");
                SCM(playerid,COLOR_WHITE, !"следующей части экзамена, выйдите на улицу и сядьте в одно из учебных мотоциклов. Внимательно читайте");
			    SCM(playerid,COLOR_WHITE, !"все подсказки, которые видите на экране!");
                EnableGPSForPlayer(playerid,-2073.93, -121.46, 35.34);
				MotoTest[playerid] = 0;
			}
		}
		case 47:
		{
			if(response)
			{
	            switch(listitem)
				{
					case 0:
					{
		                if(GetPlayerLicense(playerid, 0)) 
							return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас уже есть водительские права");
						
		             	if(DrivingTest[playerid] == 0 && CarTest[playerid] == -1)
		              	{
            				SPD(playerid,48,0,"Вступление","{FFFFFF}\n\nВас приветствует школа вождения {fbad2f}San-Fierro{FFFFFF}\nДля продолжения нажмите 'Далее\n\nСтоимость экзамена: {A0FF80}Бесплатно\n\n","Далее", !"Отмена");
	            			DrivingTest[playerid] = 1;
            				Question[playerid] = 0;
		            		Errors[playerid] = 0;
		             		TestASKMassive[playerid] = { 0, 1, 2, 3 };
		            		RandomMassive(TestASKMassive[playerid], 4);
		            	}
					}
					case 1:
					{
                        if(GetPlayerLicense(playerid, 1)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас уже есть права мото-транспорта");
		             	if(MotoTest[playerid] == -1) SPD(playerid,46,0,"Вступление","{FFFFFF}\n\nВас приветствует школа вождения {FAAC58}San-Fierro{FFFFFF}\nДля продолжения нажмите 'Далее\n\nСтоимость экзамена: {FAAC58}1000$\n\n","Далее", !"Отмена");
					}
					case 2:
					{
                        SPD(playerid,0,0,"Информация","\n\n{FFFFFF}Получить права на полеты можно в городе {fbad2f}Las Venturas\n\
						{FFFFFF}в специально выделенной авиашколе, которую можно найти\n\
						с помощью {fbad2f}GPS -> Важные места\n\n","Понял","");
					}
					case 3:
					{
                        SPD(playerid,0,0,"Информация","\n\n{FFFFFF}Получить лицензию на оружие можно в любого {fbad2f}лицензера{FFFFFF} в этом здании.\n\
						Такие лицензии можно только купить, а их стоимость может постоянно меняться!\n\
						Узнать стоимость лицензии можно у {fbad2f}лицензеров\n\n","Понял","");
					}
				}
			}
		}
		case 48:
		{
		    if(response) SPD(playerid, 49, 0, "Вступление", "{FFFFFF}В ходе теста вам будет задано 4 вопроса по правилам дорожного движения.\nПосле ответа на ВСЕ вопросы система выдаст количество правильных ответов.\nЧтобы приступить к практической части необходимо ответить правильно на все вопросы!\n\n\n{A7FC00}Для продолжения нажмите 'Далее'.", "Далее", !"Отмена");
		    else
		    {
		        CarTest[playerid] = -1;
		        DrivingTest[playerid] = 0;
		    }
		}
		case 49:
		{
		    if(response)
		    {
		        new question = TestASKMassive[playerid][0];
		        SPD(playerid,70,QueInfo[question][dDialog],QueInfo[question][dQuestion],QueInfo[question][dAnswers],"Далее", !"Отмена");
		    }
		    else
		    {
		        CarTest[playerid] = -1;
		        DrivingTest[playerid] = 0;
		    }
		}
		case 51:
		{
		    if(response) PddState[playerid] ++;
		    else PddState[playerid] --;
		    new pdd = PddState[playerid];
		    switch(pdd)
		    {
			    case 1:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 2: Общие обязанности водителей ____|");
			    	SCM(playerid, COLOR_WHITE, !" 2.1. Водитель механического транспортного средства обязан:");
			        SCM(playerid, COLOR_WHITE, !" 2.1.1. Иметь при себе и по требованию сотрудников полиции передавать им для проверки:");
					SCM(playerid, COLOR_WHITE, !" - Паспорт гражданина SA и водительское удостоверение на право управления тс соответствующей категории.");
			        SCM(playerid, COLOR_WHITE, !" 2.1.2. Предоставлять транспортное средство:");
			        SCM(playerid, COLOR_WHITE, !" сотрудникам полиции, федеральному бюро расследований, национальной гвардии в случаях, предусмотренных законодательством;");
			        SCM(playerid, COLOR_WHITE, !" медицинским и фармацевтическим работникам для перевозки граждан в ближайшее лечебно-профилактическое учреждение в случаях, угрожающих их жизни.");
			        SCM(playerid, COLOR_WHITE, !" 2.1.3. Право остановки транспортных средств для проверки документов предоставлено: Полиции, ФБР,");
			        SCM(playerid, COLOR_WHITE, !" Национальной Гвардии (только в случаях военного положения), а выписывать квитанции за нарушение ПДД только сотрудникам полиции.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 2:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 3: Применение специальных сигналов ____|");
			    	SCM(playerid, COLOR_WHITE, !" 3.1. При приближении транспортного средства с включенными проблесковым маячком синего и красного цвета и специальным");
			        SCM(playerid, COLOR_WHITE, !" звуковым сигналом водители обязаны уступить");
			        SCM(playerid, COLOR_WHITE, !" дорогу для обеспечения беспрепятственного проезда указанного транспортного средства, ");
			        SCM(playerid, COLOR_WHITE, !" а также сопровождаемого им транспортного средства (сопровождаемых транспортных средств).");
			        SCM(playerid, COLOR_WHITE, !" заведениям. (полицейские, скорые, пожарные машины, машины из картинга, трюковые самолеты, такси, военные хаммеры и т.д.)");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 3:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 4: Обязаности пешеходов ____|");
			    	SCM(playerid, COLOR_WHITE, !" 4.1. Пешеходы должны двигаться по тротуарам или пешеходным дорожкам, а при их отсутствии - по обочинам.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 4:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 5: Обязаности пассажиров ____|");
			    	SCM(playerid, COLOR_WHITE, !" 5.1. Пассажиры обязаны:");
			        SCM(playerid, COLOR_WHITE, !" посадку и высадку производить со стороны тротуара или обочины и только после полной остановки транспортного средства.");
			        SCM(playerid, COLOR_WHITE, !" Если посадка и высадка невозможна со стороны тротуара или обочины, она может осуществляться со стороны проезжей части при условии, ");
			        SCM(playerid, COLOR_WHITE, !" что это будет безопасно и не создаст помех другим участникам движения.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 5:
			    {
           			ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 6: Начало движения, маневрирование ____|");
			    	SCM(playerid, COLOR_WHITE, !" 6.1. Перед началом движения, перестроением, поворотом (разворотом) и остановкой водитель обязан ");
			        SCM(playerid, COLOR_WHITE, !" осмотреться и убедится в отсутствии помех для движения тс.");
			        SCM(playerid, COLOR_WHITE, !" 6.2. Разворот запрещается:");
			        SCM(playerid, COLOR_WHITE, !" на пешеходных переходах; в тоннелях; на мостах, путепроводах, эстакадах и под ними; на железнодорожных переездах;");
			        SCM(playerid, COLOR_WHITE, !" в местах с видимостью дороги хотя бы в одном направлении менее 100 м;");
			        SCM(playerid, COLOR_WHITE, !" 6.3. При повороте налево или развороте вне перекрестка водитель безрельсового транспортного");
			        SCM(playerid, COLOR_WHITE, !" средства обязан уступить дорогу встречным транспортным средствам.");
			        SCM(playerid, COLOR_WHITE, !" 6.4. Если встречный разъезд затруднен то, водитель, на стороне которого имеется препятствие, должен уступить дорогу. ");
			        SCM(playerid, COLOR_WHITE, !" А на уклонах, движущегося на спуск.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 6:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 7: Расположение транспортных средств на проезжей части ____|");
			    	SCM(playerid, COLOR_WHITE, !" 7.1. Запрещается движение транспортных средств по разделительным полосам и обочинам, тротуарам и пешеходным дорожкам");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 7:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 8: Скорость движения ____|");
			    	SCM(playerid, COLOR_WHITE, !" 8.1. Водитель должен вести транспортное средство со скоростью, не превышающей установленного ограничения,");
			        SCM(playerid, COLOR_WHITE, !" учитывая при этом интенсивность движения, особенности и состояние транспортного средства и груза, дорожные и метеорологические условия,");
			        SCM(playerid, COLOR_WHITE, !" в частности видимость в направлении движения. Скорость должна обеспечивать водителю возможность постоянного контроля за движением");
			        SCM(playerid, COLOR_WHITE, !" выполнения требований Правил.");
			        SCM(playerid, COLOR_WHITE, !" При возникновении опасности для движения, которую водитель в состоянии обнаружить, он должен принять ");
			        SCM(playerid, COLOR_WHITE, !" возможные меры к снижению скорости вплоть до остановки транспортного средства.");
			        SCM(playerid, COLOR_WHITE, !" 8.2. В населенных пунктах разрешается движение транспортных средств со скоростью не более 60 км/ч.");
			        SCM(playerid, COLOR_WHITE, !" 8.3. Вне населенных пунктов разрешается движение транспортных средств со скоростью не более 120 км/ч.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 8:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 9: Обгон, встречный разъезд ____|");
			   		SCM(playerid, COLOR_WHITE, !" 9.1. Обгон запрещен:");
			        SCM(playerid, COLOR_WHITE, !" на перекрестках с выездом на полосу встречного движения; на пешеходных переходах при наличии на них пешеходов;");
			        SCM(playerid, COLOR_WHITE, !" на железнодорожных переездах и ближе чем за 100 м перед ними; транспортного средства, производящего обгон или объезд:");
			        SCM(playerid, COLOR_WHITE, !" в конце подъема и на других участках дорог с ограниченной видимостью с выездом на полосу встречного движения.");
			        SCM(playerid, COLOR_WHITE, !" 9.2. Обгон разрешен:");
			        SCM(playerid, COLOR_WHITE, !" Если тс стоит на проезжей части или движется со скоростью менее 10 км/ч.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 9:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 10: Остановка и стоянка ____|");
			    	SCM(playerid, COLOR_WHITE, !" 10.1.Остановка запрещается:");
			        SCM(playerid, COLOR_WHITE, !" на железнодорожных переездах, в тоннелях, а также на эстакадах, мостах, путепроводах (если для движения ");
			        SCM(playerid, COLOR_WHITE, !" в данном направлении имеется менее трех полос) и под ними;");
			        SCM(playerid, COLOR_WHITE, !" 10.2. Стоянка с целью длительного отдыха, ночлега и тому подобное вне населенного пункта");
			        SCM(playerid, COLOR_WHITE, !" разрешается только на предусмотренных для этого площадках или за пределами дороги.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 10:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 11: Проезд перекрестков ____|");
			    	SCM(playerid, COLOR_WHITE, !" 11.1. На перекрестке равнозначных дорог водитель безрельсового транспортного средства ");
			        SCM(playerid, COLOR_WHITE, !" обязан уступить дорогу транспортным средствам, приближающимся справа.");
			        SCM(playerid, COLOR_WHITE, !" 11.2. На перекрестке неравнозначных дорог водитель безрельсового транспортного средства обязан уступить дорогу транспортным средствам, ");
			        SCM(playerid, COLOR_WHITE, !" приближающимся по главной дороге.");
			        SCM(playerid, COLOR_WHITE, !" 11.3. Запрещается выезжать на перекресток или пересечение проезжих частей, если образовался затор, ");
			        SCM(playerid, COLOR_WHITE, !" который вынудит водителя остановиться, создав препятствие для движения транспортных средств в поперечном направлении");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 11:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 12: Пешеходные переходы и места остановок маршрутных транспортных средтсв ____|");
			    	SCM(playerid, COLOR_WHITE, !" 12.1. Водитель транспортного средства обязан уступить дорогу пешеходам, переходящим проезжую часть, по нерегулируемому* пешеходному переходу.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 12:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 13: Движение по автомагистралям ____|");
			    	SCM(playerid, COLOR_WHITE, !" 13.1. На автомагистралях запрещается:");
			        SCM(playerid, COLOR_WHITE, !" движение, велосипедов, мопедов, тракторов и самоходных машин, иных транспортных средств,");
			        SCM(playerid, COLOR_WHITE, !" скорость которых по технической характеристике или их состоянию менее 40 км/ч;");
			        SCM(playerid, COLOR_WHITE, !" движение грузовых автомобилей далее второй полосы; остановка вне специальных площадок для стоянки:");
			        SCM(playerid, COLOR_WHITE, !" разворот и въезд в технологические разрывы разделительной полосы; движение задним ходом; учебная езда.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 13:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 14: Буксировка механических транспортных средств ____|");
			    	SCM(playerid, COLOR_WHITE, !" 15.1. При буксировке запрещается перевозка людей в буксируемом транспортном средстве и в кузове буксируемого грузового автомобиля");
			        SCM(playerid, COLOR_WHITE, !" 15.2. Буксировка запрещается:");
			        SCM(playerid, COLOR_WHITE, !" - двух и более транспортных средств;");
			        SCM(playerid, COLOR_WHITE, !" - транспортных средств с недействующей тормозной системой, если их фактическая масса ");
			        SCM(playerid, COLOR_WHITE, !" более половины фактической массы буксирующего транспортного средства;");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Далее\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 14:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "|____ Параграф 16: Перевозка людей ____|");
					SCM(playerid, COLOR_WHITE, !" 16.1. Водитель обязан осуществлять посадку и высадку пассажиров только после полной остановки транспортного средства,");
			        SCM(playerid, COLOR_WHITE, !" а начинать движение только с закрытыми дверями и не открывать их до полной остановки.");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Выход\" или \"Назад\"", "Далее", "Назад");
			    }
			    case 15:
			    {
			        ClearChatForPlayer(playerid);
			        SCM(playerid, COLOR_YELLOW, "Поздравляем! Вы прочли Правила дорожного движения!");
			        SPD(playerid, 51, 0, "Правила дорожного движения", "{FFFFFF}Используйте кнопки \"Выход\" или \"Назад\"", "Выход", "Назад");
			    }
			    default: return 0;
		    }
		}

        case 1449:
		{
		    if(!response)
				return false;

			switch listitem do
			{
			    case 0: SendBotMessage(playerid,"Я приехал из другого города искать работу, и тут наткнулся на это.\nПостараюсь проработать тут все лето, а дальше посмотрим.\nЕсли что, я занимаюсь обменом подарков на шкатулки, так что подходи. {FFFEFE}*Улыбается*");
        		case 1: SendBotMessage(playerid,"Для обмена необходимо 20 подарков,\nкоторые можно найти по всему штату. Собственно они\nпоявляются раз в 20 минут, так что найти их будет не просто!\n");
        		case 2: SendBotMessage(playerid,"В штате стали возникать проблемы с экономикой, вот и какой-то засранец\nрешил побаловаться, дав вам шанс подзаработать.");
				case 3:
				{	
					if(GetCount(playerid, 552) < 20)
						return SendBotMessage(playerid,"Дружище, я обменяю тебе шкатулку, только если ты принесешь 20 подарков!");

					new randompresent = random(55);

					if(randompresent >= 31 && randompresent <= 42)
					{
						if(PlayerTimerItem[playerid][6] > Global_Time)
							return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Вы не смогли получить AZ Roubles из-за лимита, до сброса лимита осталось %s.", Convert(PlayerTimerItem[playerid][6] - Global_Time) ); 

						PlayerTimerItem[playerid][6] = Global_Time + 1800;

						SaveMasiveTimer(playerid);
					}

					switch randompresent do	
					{
							case 0..10:
							{
							    GiveMoney(playerid,5000);
							    SendBotMessage(playerid,"Что-то то нормальное да будет.\nДержи свои 5 штук!");
							    DeleteItem(playerid, 552, 20);
							}

							case 11..12:
							{
							    GiveMoney(playerid,5000);
							    SendBotMessage(playerid,"Что-то то нормальное да будет.\nДержи свои 5 штук!");
							    DeleteItem(playerid, 552, 20);
							}
							
							case 13..14:
							{
								if(ImprovementsData[playerid][idSchumacher] == 0)
								{
									SetImprovementsData(playerid, idSchumacher, !ImprovementsData[playerid][idSchumacher]);
									SendBotMessage(playerid,"Ну хоть что-то. Теперь круче ездить будешь!");
									SPD(playerid,0,0, !"", !"Вы получили умение 'Шумахер'.\n{752121}Введите /mm - улучшение и посмотрите информацию.", !"Закрыть", !"");
								}
								else SendBotMessage(playerid,"Брат, ты бы мог получить навык шумахер, но уж так получается он у тебя уже есть\nВозращаю твои 30 подарков обратно!");
							}

							case 15..17:
							{
							    AddItem(playerid, 510, 50);
           						SendBotMessage(playerid,"Чувак, да мне это в руках страшно держать, вот забирай быстрей свою траву!");
           						SPD(playerid,0,0,!"","Вы получили 50г наркотиков.\n{752121}Введите /stats - чтобы посмотреть свой инвентарь.", !"Закрыть","");
           						DeleteItem(playerid, 552, 20);
							}

							case 18..25:
							{
							    GiveMoney(playerid,3000);
							    SendBotMessage(playerid,"Что-то то нормальное да будет.\nДержи свои 3 штуки!");
							    DeleteItem(playerid, 552, 20);
							}

							case 26..30:
							{
							    GiveMoney(playerid,50000);
							    SendBotMessage(playerid,"Еперный бабай!!\nДа у меня таких денег сроду не было!");
							    DeleteItem(playerid, 552, 20);
							}

                            case 31..34:
                            {
                                UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 4);

                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?");
                                SPD(playerid,0,0,!"","Вам удалось получить 4 Az roubles.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
                                DeleteItem(playerid, 552, 20);
                            }

                            case 35..37:
                            {
                            	UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 8);

                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?");
                                SPD(playerid,0,0,!"","Вам удалось получить 8 Az roubles.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
                                DeleteItem(playerid, 552, 20);
                            }

                            case 38..40:
                            {
                                UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 10);

                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?\nНе может быть!");
                                SPD(playerid,0,0,!"","Вам удалось получить 10 Az roubles.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
                                foreach(new i: Player) {
                                	if(!PhoneImprovementsData[i][pdAnnouncements]) {
		                                f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил 10 A-Z roubles!",PN(playerid));
										SCM(i, COLOR_ORANGE,global_str);
                                	}
                                }
								DeleteItem(playerid, 552, 20);
                            }

                            case 41..42:
							{ 
								UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += 15);

                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?\nНе может быть!");
                                SPD(playerid,0,0,!"","Вам удалось получить 15 Az roubles.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
                                foreach(new i: Player) {
                                	if(!PhoneImprovementsData[i][pdAnnouncements]) {
		                                f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил 15 AZ roubles!",PN(playerid));
										SCM(i, COLOR_ORANGE,global_str);
                                	}
                                }
								DeleteItem(playerid, 552, 20);
                            }
							
                            case 43:
                            {
								if(PI[playerid][pVIP][0]>=3)
								{
								    PI[playerid][pVirMoney]+=150;
	                                SendBotMessage(playerid,"Вох вох вох!\nДа ты везучий черт подери. Что это?\nНе может быть!");
	                                SPD(playerid,0,0,!"","Вам удалось получить 150 Az coins.\nНе забудьте запечатлить этот момент, нажав клавишу F8.", !"Закрыть","");
	                                foreach(new i: Player) {
	                                	if(!PhoneImprovementsData[i][pdAnnouncements]) {
			                                f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил 150 A-Z coins!",PN(playerid));
											SCM(i, COLOR_ORANGE,global_str);
	                                	}
	                                }
									DeleteItem(playerid, 552, 20);
								}
								else
								{
	                            	PI[playerid][pVIP][0] = 3;
	                            	PI[playerid][pVipTime] = Global_Time+(30*24*60*60);
	                                SendBotMessage(playerid,"Вот это да!\nЭто же самая ценная вещь из шкатулки!");
	                                SPD(playerid,0,0,!"","Вам удалось получить самый ценный предмет из шкатулки!\nНе забудьте запечатлить этот момент, нажав клавишу F8.\n\n\n{C79B9B}Теперь вы будете получать х2 EXP и 1 az coins каждый payday.", !"Закрыть","");
	                                foreach(new i: Player) {
	                                	if(!PhoneImprovementsData[i][pdAnnouncements]) {
			                                f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил Platinum VIP",PN(playerid));
											SCM(i, COLOR_ORANGE,global_str);
	                                	}
	                                }
									DeleteItem(playerid, 552, 20);
								}
                            }

							case 44:
							{
							    f(global_str,sizeof(global_str),"Открыв СУНДУК с подарками, игрок %s получил Уникальный чемодан для хранения денег!",PN(playerid));
								SCMALL(COLOR_ORANGE,global_str);
							    SendBotMessage(playerid,"Ёп-макарёк, вот это ты втащил, держи свой чемодан!\n((В донат шопе он стоит 450 az coins))");
							    SPD(playerid,0,0,!"","Вам удалось получить уникальный чемодан для хранения денег!\nНе забудьте запечатлить этот момент, нажав клавишу F8.\n\n\n{C79B9B}Теперь если у вас на руках будет больше 5 000 000$, место стандартного\nкейса у вас будет красивый чемодан.", !"Закрыть","");
							    if(IsPlayerAttachedObjectSlotUsed(playerid, 9))RemovePlayerAttachedObject(playerid,9);
							}

							case 45..54:
							{
							    GiveMoney(playerid,5000);
							    SendBotMessage(playerid,"Что-то то нормальное да будет.\nДержи свои 5 штук!");
							    DeleteItem(playerid, 552, 20);
							}
						}
				}
				case 4: return SPD(playerid, 8672, DIALOG_STYLE_TABLIST_HEADERS, !"", !"Ценный товар\tКоличество гражданских талонов\n{ffff00}1. Х4 Пополнение счета: \t{cccccc}150\n{ffff00}2. Скидочный талон \t{cccccc}250\n{ffff00}3. Все лицензии на 1 год \t{cccccc}450\n{ffff00}4. 10 AZ Coins \t{cccccc}40\n5. 10 фейерверков \t{cccccc}30\n6. Устрица на спину \t{cccccc}800\n7. Сердце на грудь \t{cccccc}800\n8. Черепаха на спину \t{cccccc}800\n9. Рубашка на грудь \t{cccccc}800\n10. Череп на грудь \t{cccccc}800\n11. Замок на грудь \t{cccccc}800\n12. Бутылка на спину \t{cccccc}800\n13. Сувенирная шляпа мага \t{cccccc}100\n14. Сувенирная шляпа фермера \t{cccccc}100\n15. Сувенирная кепка развозчика пиццы \t{cccccc}100\n16. Шляпа полицейского \t{cccccc}100\n17. Сувенирная кепка рабочего \t{cccccc}100\n{ffff00}18. Платиновая рулетка \t{cccccc}45\n19. Сумка-барыжка из кожи \t{cccccc}1200\n20. Сумка-барыжка чёрно-красная \t{cccccc}1200\n21. Сумка-барыжка бело-красная \t{cccccc}1200\n22. Сумка-барыжка фиолетовая \t{cccccc}1200\n23. Сумка-барыжка красная \t{cccccc}1200\n24. Сумка-барыжка белая с узорами \t{cccccc}1200\n25. Сумка-барыжка синяя \t{cccccc}1200\n26. Рюкзак-панцырь белый \t{cccccc}1400\n27. Рюкзак черно-серый \t{cccccc}1400\n28. Маска черная \t{cccccc}1500\n29. Чёрный чемодан \t{cccccc}1500\n30. Бардовый чемодан \t{cccccc}1500\n31. Маска для сварки \t{cccccc}1600\n32. Шапка олень \t{cccccc}1800\n33. Штурвал за спиной \t{cccccc}2000\n34. Переносная лавка \t{cccccc}2300\n35. Ранец мяч регби \t{cccccc}2300\n36. Рюкзак доставки \t{cccccc}2300\n37. Ранец охотники на приведений \t{cccccc}2400\n38. Ранец шокер \t{cccccc}2500\n39. Копье-шокер \t{cccccc}2500\n40. Щит \t{cccccc}2600\n41. Крылья ангела \t{cccccc}2700\n42. Экзоскилет \t{cccccc}2800\n43. Ранец вертолёт \t{cccccc}3000\n44. Реактивный ранец 1 \t{cccccc}3000\n45. Реактивный ранец 2 \t{cccccc}3000\n46. Карамельная бита \t{cccccc}4500\n47. Желтая бита на спине \t{cccccc}4500\n48. Бита-бутылка на спине \t{cccccc}4500\n49. Меч фиолетовый \t{cccccc}3000\n50. Меч оранжевый \t{cccccc}3000\n51. Меч розовый \t{cccccc}3000\n52. Меч синий \t{cccccc}3000\n53. Меч зеленый \t{cccccc}3000\n54. Меч желтый \t{cccccc}3000\n55. Модификация Праздник (на все скины) \t{cccccc}15000\n56. Модификация Пират (на скин: 96) \t{cccccc}15000\n57. Модификация Волшебник (на скин: 189) \t{cccccc}15000\n58. Модификация (на транспорт: Squallo) \t{cccccc}30000\n59. Модификация (на транспорт: Speeder) \t{cccccc}30000\n60. Модификация (на транспорт: Dinghy) \t{cccccc}30000\n61. Модификация (на транспорт: Jetmax) \t{cccccc}30000\n62. Модификация (на транспорт: Tropic) \t{cccccc}30000", !"Принять", !"Отмена");
			}
		}
		case 1339:
		{
		    if(response)
			{
				switch(listitem)
				{
				    case 0: SendBotMessage(playerid,"Приехал я с другого города на заработки, вот и жду тут автобус.\nКстати, где-то сейчас он должен подьехать, если лень ждать, там велики на прокат стоят!");
        			case 1: SendBotMessage(playerid,"Говорили тут на ферме можно подзаработать, а можно и карьеру сделать,\nдумаю первое время там, а потом на права, паспорт и тому подобное.");
        			case 2: SendBotMessage(playerid,"По-моему тебе должны были выдать GPS, вот его и советую использовать,\nСчитай благодаря ему тут только можно освоиться.");
        			case 3: SendBotMessage(playerid,"Даа не беда, в Аризоне тут проблем нет, в мэрии можно получить его бесплатно\nно учти, что во второй раз тебе его выдавать не будут,\nполиция может задержать и бог знает что будет!");
        			case 4: SendBotMessage(playerid,"Я вот когда получал сдал со 2 раза, чтобы сдать на права не надо платить.\nСоветую подготовить теорию, она там играет важную роль!");
        			case 5: SendBotMessage(playerid,"По всему штату куча отелей, я например с 1-го дня поселился.\nИ недорого, знаешь, всего лишь 5 000 и все.");
        			case 6: SendBotMessage(playerid,"Нуу даже не знаю, тут много где его можно купить, например\nчерез дорогу есть магазин, но не думаю что у тебя хватит денег на его покупку.");
        			case 7: SendBotMessage(playerid,"Тут какой то бизнесмен завелся, всех приезжих бесплатно кормит.\nА что ты спрашиваешь, разве это плохо?");
        			case 8: SendBotMessage(playerid,"Думаю в больничке, если сейчас там есть доктора.\nКстати, тебе мед.карта понадобится при поступлении в армию.");
				}
			}
		}
		case 133:
		{
			if(!response)
				return 1;

			switch(listitem)
			{
		        case 0: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		        case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		        case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		        case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		        case 4: ApplyAnimationEx(playerid, !"DANCING", !"DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 0);
		        case 5: ApplyAnimationEx(playerid, !"DANCING", !"dnce_M_a", 4.1, 1,0, 0, 0, 0, 0);
		        case 6: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"wave_loop", 4.1, 1, 1, 1, 0, 0);
		        case 7: ApplyAnimationEx(playerid, !"BEACH", !"bather", 4.0, 1, 0, 0, 0, 0);
		        case 8: ApplyAnimationEx(playerid, !"ped", !"endchat_03", 4.1, 1, 0, 0, 0, 0, 0);
		        case 9: ApplyAnimationEx(playerid, !"benchpress", !"gym_bp_celebrate", 4.0, 0, 0, 0, 0, 0);
				case 10: ApplyAnimationEx(playerid, !"PED", !"COWER", 4.1, 0, 0, 0, 0, 0, 1);
				case 11: ApplyAnimationEx(playerid, !"SHOP", !"ROB_SHIFTY", 4.1, 0, 0, 0, 0, 0, 1);
				case 12: ApplyAnimationEx(playerid, !"SHOP", !"ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 0, 1);
				case 13: ApplyAnimationEx(playerid, !"COP_AMBIENT", !"Coplook_loop", 4.0, 0, 1, 1, 1, -1);
				case 14: ApplyAnimationEx(playerid, !"FOOD", !"EAT_VOMIT_P", 4.1, 0, 0, 0, 0, 0, 1);
				case 15: ApplyAnimationEx(playerid, !"FOOD", !"EAT_BURGER", 4.1, 0, 0, 0, 0, 0, 1);
				case 16: ApplyAnimationEx(playerid, !"DEALER", !"DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
				case 17: ApplyAnimationEx(playerid, !"CRACK", !"CRCKDETH2", 4.1, 0, 0, 0, 0, 0, 1);
				case 18: ApplyAnimationEx(playerid, !"LOWRIDER", !"M_SMKLEAN_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 19: ApplyAnimationEx(playerid, !"LOWRIDER", !"F_SMKLEAN_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 20: ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_M_loop", 4.0, 0, 0, 0, 1, 1, 1);
				case 21: ApplyAnimationEx(playerid, !"PARK", !"Tai_Chi_Loop",4.0,1,0,0,0,0,1);
				case 22: ApplyAnimationEx(playerid, !"BAR", !"dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
				case 23: ApplyAnimationEx(playerid, !"DANCING", !"DAN_RIGHT_A", 4.1, 0, 0, 0, 0, 0, 1);
				case 24: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_DEF_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 25: ApplyAnimationEx(playerid, !"MISC", !"PLYR_SHKHEAD", 4.1, 0, 0, 0, 0, 0, 1);
				case 26: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
				case 27: ApplyAnimationEx(playerid, !"CAMERA", !"camstnd_cmon", 4.0, 0, 0, 0, 0, 0);
				case 28: ApplyAnimationEx(playerid, !"SHOP", !"SHP_ROB_HANDSUP", 4.1, 0, 0, 0, 0, 0, 1);
				case 29: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE2", 4.1, 0, 0, 0, 0, 0, 1);
				case 30: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE4", 4.1, 0, 0, 0, 0, 0, 1);
				case 31: ApplyAnimationEx(playerid, !"DEALER", !"DEALER_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
				case 32: ApplyAnimationEx(playerid, !"GANGS", !"LEANIDLE", 4.1, 0, 0, 0, 0, 0, 1);
				case 33: ApplyAnimationEx(playerid, !"GANGS", !"SHAKE_CARSH", 4.1, 0, 0, 0, 0, 0, 1);
				case 34: ApplyAnimationEx(playerid, !"GANGS", !"SMKCIG_PRTL", 4.1, 0, 0, 0, 0, 0, 1);
				case 35: ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_W_loop", 3.0, 0, 1, 1, 1, 0);
				case 36: ApplyAnimationEx(playerid, !"INT_HOUSE", !"LOU_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 37: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_BORED_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 38: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_IDLE_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 39: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_TYPE_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 40: ApplyAnimationEx(playerid, !"INT_SHOP", !"SHOP_SHELF", 4.1, 0, 0, 0, 0, 0, 1);
				case 41: ApplyAnimationEx(playerid, !"JST_BUISNESS", !"girl_02", 4.1, 0, 0, 0, 1, 1, 1);
				case 42: ApplyAnimationEx(playerid, !"KISSING", !"GF_STREETARGUE_02", 4.1, 0, 0, 0, 0, 0, 1);
				case 43: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0, 1);
				case 44: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0, 1);
				case 45: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_02", 4.0, 0, 0, 0, 0, 0, 1);
				case 46: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_B_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 47: ApplyAnimationEx(playerid, !"MEDIC", !"CPR", 4.0, 0, 0, 0, 0, 0);
				case 48: ApplyAnimationEx(playerid, !"MISC", !"BITCHSLAP", 4.1, 0, 0, 0, 0, 0, 1);
				case 49: ApplyAnimationEx(playerid, !"MISC", !"BNG_WNDW", 4.1, 0, 0, 0, 0, 0, 1);
				case 50: ApplyAnimationEx(playerid, !"MISC", !"KAT_THROW_K", 4.1, 0, 0, 0, 0, 0, 1);
				case 51: ApplyAnimationEx(playerid, !"MISC", !"SEAT_LR", 4.1, 0, 0, 0, 0, 0, 1);
				case 52: ApplyAnimationEx(playerid, !"PED", !"SEAT_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
				case 53: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"LKUP_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 54: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"POINTUP_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 55: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"PANIC_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 56: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"SHOUT_02", 4.1, 0, 0, 0, 0, 0, 1);
				case 57: ApplyAnimationEx(playerid, !"GHANDS", !"gsign1LH", 4.0, 0, 0, 0, 0, 1, 1);
				case 58: ApplyAnimationEx(playerid, !"PED", !"IDLE_taxi", 4.0, 0, 0, 0, 0, 0);
				case 59: ApplyAnimationEx(playerid, !"POLICE", !"DOOR_KICK", 4.1, 0, 0, 0, 0, 0, 1);
				case 60: ApplyAnimationEx(playerid, !"POLICE", !"COPTRAF_STOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 61: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_ANGRY_B", 4.1, 0, 0, 0, 0, 0, 1);
				case 62: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
				case 63: ApplyAnimationEx(playerid, !"SWAT", !"GNSTWALL_INJURD", 4.1, 0, 0, 0, 0, 0, 1);
				case 64: ApplyAnimationEx(playerid, !"SWEET", !"SWEET_INJUREDLOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 65: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
				case 66: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN2", 4.1, 0, 0, 0, 0, 0, 1);
				case 67: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN4", 4.1, 0, 0, 0, 0, 0, 1);
				case 68: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN5", 4.1, 0, 0, 0, 0, 0, 1);
				case 69: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE1", 4.1, 0, 0, 0, 0, 0, 1);
				case 70: ApplyAnimationEx(playerid, !"SPRAYCAN", !"spraycan_full", 4.0, 0, 0, 0, 0, 0);
				case 71: ApplyAnimationEx(playerid, !"GRAFFITI", !"SPRAYCAN_FIRE", 4.1, 0, 0, 0, 0, 0, 1);
				case 72: ApplyAnimationEx(playerid, !"SMOKING", !"M_SMKSTND_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 73: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_CHANT", 4.1, 0, 0, 0, 0, 0, 1);
				case 74: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_PUNCHES", 4.1, 0, 0, 0, 0, 0, 1);
				case 75: ApplyAnimationEx(playerid, !"PED", !"fucku", 4.0, 0, 0, 0, 0, 0, 1);
				case 76: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
				case 77: ApplyAnimationEx(playerid, !"CAR", !"FIXN_CAR_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 78: ApplyAnimationEx(playerid, !"CAR_CHAT", !"CAR_TALKM_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
				case 79: ApplyAnimationEx(playerid, !"CRACK", !"BBALBAT_IDLE_01", 4.1, 0, 0, 0, 0, 0, 1);
				case 80: ApplyAnimationEx(playerid, !"CRACK", !"BBALBAT_IDLE_02", 4.1, 0, 0, 0, 0, 0, 1);
				case 81: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN1", 4.0, 0, 0, 0, 0, 1, 1);
				case 82: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN3", 4.0, 0, 0, 0, 0, 1, 1);
				case 83: ApplyAnimationEx(playerid, !"GRAVEYARD", !"mrnF_loop", 4.1, 0, 1, 1, 0, 0);
				case 84: ApplyAnimationEx(playerid, !"MISC", !"scratchballs_01", 4.0, 0, 0, 0, 0, 0);
				case 85: ApplyAnimationEx(playerid, !"INT_HOUSE", !"LOU_In", 4.1, 0, 0, 0, 1, 1, 1);
				case 86: ApplyAnimationEx(playerid, !"SUNBATHE", !"Lay_Bac_in", 3.0, 0, 1, 1, 1, 0);
				case 87: ApplyAnimationEx(playerid, !"BEACH", !"SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
				case 88: ApplyAnimationEx(playerid, !"PED", !"DLE_armed", 4.1, 0, 1, 1, 1, 1, 1);
				case 89: ApplyAnimationEx(playerid, !"PED", !"Gun_stand", 4.1, 0, 1, 1, 1, 1, 1);
				case 90: ApplyAnimationEx(playerid, !"KISSING", !"gfwave2", 4.1, 0, 1, 1, 0, 0);
				case 91: ApplyAnimationEx(playerid, !"PED", !"BIKE_fall_off", 4.1, 0, 1, 1, 1, 1, 1);
				case 92: ApplyAnimationEx(playerid, !"PED", !"BIKE_pickupL", 4.1, 0, 0, 0, 0, 0, 1);
				case 93: ApplyAnimationEx(playerid, !"GANGS", !"hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				case 94: ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				case 95: ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa_swt", 4.0, 0, 0, 0, 0, 0, 1);
				case 96: ApplyAnimationEx(playerid, !"GANGS", !"shake_carK", 4.0, 0, 0, 0, 0, 0);
				case 97: ApplyAnimationEx(playerid, !"GANGS", !"shake_cara", 4.0, 0, 0, 0, 0, 0);
				case 98: ApplyAnimationEx(playerid, !"PED", !"KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
				case 99: ApplyAnimationEx(playerid, !"PED", !"EV_DIVE", 4.0, 0, 1, 1, 1, 0);
				case 100: ApplyAnimationEx(playerid, !"PED", !"BIKE_fallR", 4.0, 0, 1, 1, 1, 0);
				case 101: ApplyAnimationEx(playerid, !"GYMNASIUM", !"GYMshadowbox", 4.0, 1, 1, 1, 1, 0);
				case 102: ApplyAnimationEx(playerid, !"PED", !"gang_gunstand", 3.0, 0, 1, 1, 1, 0);
			}
			AnimPlayed{playerid} = true;
			TextDrawShowForPlayer(playerid, StopAnimation);
		}
		case 134:
		{
			if(response)
			{
				switch(listitem)
				{
				    case 0:
				    {
				        if(IsPlayerInRangeOfPoint(playerid,1,1285.9365,-1270.2250,13.5939))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже на 1 этаже!");
				        UpdatePlayerPos(playerid,1285.9365,-1270.2250,13.5939);
				    }
				    case 1:
				    {
				        if(IsPlayerInRangeOfPoint(playerid,1,1287.2783,-1261.7417,20.6199))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы и так уже на 2 этаже!");
				        UpdatePlayerPos(playerid,1287.2783,-1261.7417,20.6199);
					}
				    case 2:
				    {
						UpdatePlayerPos(playerid,1289.0641,-1271.5160,13.5400);
					}
				}
			}
		}
		case 56:
		{
			if(response)
			{
			    new tarif; static name[30];
				sscanf(inputtextsave, "p<,>is[30]", tarif, name);
				new carid = GetPlayerVehicleID(playerid);
				if(tarif > 0 && tarif <= 70)
				{
				    if(strlen(name) <= 30)
				    {
						TaxiTarif[playerid] = tarif;
						ShowPlayerTD(playerid,TaxiDraw[playerid]);
						TextDrawShowForPlayer(playerid, BoxTaxi1);
			            TextDrawShowForPlayer(playerid, BoxTaxi2);
			            TextDrawShowForPlayer(playerid, Taximonitor);
			            TextDrawShowForPlayer(playerid, TaxiServ);
			            TextDrawShowForPlayer(playerid, TaxiDol);
						f(global_str,sizeof(global_str),"\n{B83434}%s\n{FFFFFF}Тариф: %d", name, tarif);
						UpdateDynamic3DTextLabelText(TaxiText[carid], COLOR_WHITE, global_str);
					}
					else SPD(playerid,56,1,"Тариф","{FFFFFF}Введите ваш тариф и слоган через запятую\n\n{9ACD32}- Тариф не менее $1 и не более $70\nСлоган не более 30-и символов","Ок", !"Отмена");
				}
				else SPD(playerid,56,1,"Тариф","{FFFFFF}Введите ваш тариф и слоган через запятую\n\n{9ACD32}- Тариф не менее $1 и не более $70\nСлоган не более 30-и символов","Ок", !"Отмена");
			}
			return 1;
		}
	  	case 58:
		{
	 		if(response)
			{
			    switch(listitem)
			    {
					case 0:
					{
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Обычный'");
		        		return 1;
		    		}
					case 1:
					{
						if(!PI[playerid][pSkillFight][0])
						{
							SCM(playerid, COLOR_GREY, !"* Вы не знаете этот стиль");
							return 1;
						}
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Boxing'");
		        		return 1;
		 			}
		    		case 2:
					{
						if(!PI[playerid][pSkillFight][1])
						{
							SCM(playerid, COLOR_GREY, !"* Вы не знаете этот стиль");
							return 1;
						}
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Kungfu'");
		        		return 1;
		    		}
		    		case 3:
					{
						if(!PI[playerid][pSkillFight][2])
						{
							SCM(playerid, COLOR_GREY, !"* Вы не знаете этот стиль");
							return 1;
						}
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Kneehead'");
		        		return 1;
		    		}
		    		case 4:
					{
						if(!PI[playerid][pSkillFight][3])
						{
							SCM(playerid, COLOR_GREY, !"* Вы не знаете этот стиль");
							return 1;
						}
		        		SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		        		SCM(playerid, COLOR_VALIK, !"* Вы изменили стиль боя на {AA3333}'Elbow'");
		        		return 1;
		    		}
		    		case 5:
		    		{
					    f(global_str, 700,"\
						\t{73B461}Для изучения стиля боя, вы должны отправиться в спортзал, найти его можно в /gps [Важные места]\n\
						\t{73B461}Дальше вам нужно переодеться и начать тренировку. Бейте грушу чтобы улучшить навык владения стилем борьбы.\n\n\n\
						\t{1874cd}- Бокс{FFFFFF}- 5000 очк.\n\
						\t{1874cd}- Кунг-фу{FFFFFF}- 10000 очк.\n\
						\t{1874cd}- Kneehead{FFFFFF}- 20000 очк.\n\
						\t{1874cd}- Кикбоксинг{FFFFFF}- 30000 очк.");
						return SPD(playerid,0,0,"Помощь", global_str, !"Принять","");
		    		}
		    		default: return 0;
	    		}
	    	}
	    }
		case 64:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						strcat(global_str,"01. Где мне получить паспорт? - Паспорт можно получить в мэрии.\n");
		                strcat(global_str,"02. Как мне заработать немного денег? - Вы можете поработать на заводе/ферме/грузчиках.\n");
		                strcat(global_str,"03. Где мне найти то или иное место? - /gps.\n");
		                strcat(global_str,"04. Как сменить пароль? - /mm > Настройки > Смена Пароля.\n");
		                strcat(global_str,"05. Как изменить настройки аккаунта? - /mm > Настройки.\n");
		                strcat(global_str,"06. На этом сервере выдают деньги, лвл? - Нет, каждый игрок должен начинать с 0.\n");
		                f(global_str, 1500,"%s07. Какой сайт у сервера? - %s\n", global_str, Setting_Server[3]);
		                strcat(global_str,"08. Как посмотреть список команд сервера? - /help\n");
		                strcat(global_str,"09. Как быстро прокачать скилл оружия? - Самый быстрый способ - Тир.\n");
		                strcat(global_str,"10. Где найти мэрию? - /gps -> Важные места\n");
		                strcat(global_str,"11. Почему нет машин на авторынке? - На сервере единый оборот автомобилей , они там появляются если кто-то не оплатит налог!\n");
		                strcat(global_str,"12. Что такое недошедшие счета? - Это счета за дом которые вам еще не доставили . За недошедшие счета платить не надо!\n");
		                strcat(global_str,"13. Где получить медкарту? - Ее можно получить , пройдя мед. осмотр у врачей! \n");
		                strcat(global_str,"14. Продаются ли на сервере админки? - Нет не продаются! \n");
                        SPD(playerid,184,0,"Часто задаваемые вопросы",global_str, !"Принять","");
					}
			        case 1:
			        {
			            if(CheckPhones(playerid))
			            {
                			SPD(playerid,184,0,"Команды (Телефон)","{FFFFFF}\
							/phone - Управление телефоном", !"Принять","");
						}
						else SPD(playerid, 184, 0, "Команды (Телефон)", "{AFAFAF}У вас нет телефона", !"Принять", "");
			        }
			        case 2:
			        {
			            switch(PlayerJob[playerid])
			            {
				            case JOB_GUNDEALER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
       						/quitjob - Уволиться с работы", !"Принять","");
				            case JOB_DETECTIVE: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
        			  		case JOB_CARJACKER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/orderlist{FFFFFF} - Найти бизнес для перепродажи продуктов\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
				            case JOB_MECHANIC: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
				            {73B461}/gomechanik{FFFFFF} - Принять вызов\n\
				            {73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
       						case JOB_GUIDE: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_TAXI: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/gotaxi{FFFFFF} - Принять вызов\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/rt{FFFFFF} - Рация для таксистов\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
				            case JOB_ADVOKAT: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/zeks{FFFFFF} - База заключенных\n\
							{73B461}/free{FFFFFF} - Сократить срок заключенному\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_MINER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
       						case JOB_PORTER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_COLLECTOR: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_DRUGDEALER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/selldrugs{FFFFFF} - Продать наркотики\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_TRUCKER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/rt{FFFFFF} - Рация для дальнобойщик\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_PIZZA: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
                            {73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/stopjob{FFFFFF} - Закончить работу ( по желанию )\n\
							{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
       						case JOB_SCRAPER: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
							case JOB_NALOG: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/stopjob{FFFFFF} - Закончить работу ( по желанию )\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
       						case JOB_MUSOR: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 17: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 18: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 19: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 20: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");

       						case 21: SPD(playerid,184,0,"Команды (Работа)","{FFFFFF}\
							{73B461}/jlock{FFFFFF} - Закрыть служебный тс.\n\
							{73B461}/jobhelp{FFFFFF} - Помощь по работе\n\
       						{73B461}/quitjob{FFFFFF} - Уволиться с работы", !"Принять","");
				            default: SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы нигде не работаете!");
			            }
			        }
            		case 3:
			        {
			            if(GetTeamID(playerid) > 0)
			            {
							if(IsACop(playerid))
							{
							    strcat(global_str,"{73B461}/su{FFFFFF} - Объявить игрока в розыск\n");
							    strcat(global_str,"{73B461}/find{FFFFFF} - Найти игрока\n");
							    strcat(global_str,"{73B461}/clear{FFFFFF} - Очистить розыск игрока\n");
							    strcat(global_str,"{73B461}/take{FFFFFF} - Отобрать что либо\n");
							    strcat(global_str,"{73B461}/frisk{FFFFFF} - Обыскать игрока\n");
							    strcat(global_str,"{73B461}/cuff{FFFFFF} - Надеть/Снять наручиники\n");
							    strcat(global_str,"{73B461}/putobject{FFFFFF} - Поставить ограждение/предмет\n");
							    strcat(global_str,"{73B461}/incar{FFFFFF} - Затащить игрока в транспорт\n");
							    strcat(global_str,"{73B461}/wanted{FFFFFF} - Список разыскиваемых\n");
							    strcat(global_str,"{73B461}/ticket{FFFFFF} - Выписать штраф\n");
							    strcat(global_str,"{73B461}/arrest{FFFFFF} - Арестовать преступников\n");
							    strcat(global_str,"{73B461}/unmask{FFFFFF} - Стянуть маску с игрока\n");
							    strcat(global_str,"{73B461}/m{FFFFFF} - Мегафон (В транспорте)\n");
							    strcat(global_str,"{73B461}/strafs{FFFFFF} - Поставить машину на штрафстоянку\n");
							    strcat(global_str,"{73B461}/tow{FFFFFF} - Прицепить машину (в эвакуаторе)\n");
							    strcat(global_str,"{73B461}/demoute{FFFFFF} (9-11) [FBI] - Уволить гос.служащего\n");
							    strcat(global_str,"{73B461}/d{FFFFFF} - Гос. чат\n");
							    strcat(global_str,"{73B461}/bot{FFFFFF} - Отобрать скрепки\n");
							    strcat(global_str,"{73B461}/gotome{FFFFFF} - Вести игрока за собой\n");
							}
							if(GetTeamID(playerid) == TEAM_FBI) strcat(global_str,"{73B461}/scutes{FFFFFF} - Прикрепить жучек на мобильный\n");
							else if(GetTeamID(playerid) == TEAM_M4C || GetTeamID(playerid) ==  TEAM_MEDICLV)
							{
							    strcat(global_str,"{73B461}/medcard{FFFFFF} - Выдать мед. карту\n");
							    strcat(global_str,"{73B461}/heal{FFFFFF} - Вылечить пациента\n");
							    strcat(global_str,"{73B461}/recept{FFFFFF} - выдать рецепт на лекарство\n");
							}
							else if(GetTeamID(playerid) == TEAM_MERIALS)
							{
								strcat(global_str,"{73B461}/demoute{FFFFFF} (9-10) - Уволить гос.служащего\n");
								strcat(global_str,"{73B461}/ekonom{FFFFFF} - Управление экономикой\n");
							}
							else if(GetTeamID(playerid) == TEAM_MEDICSF)
							{
							    strcat(global_str,"{73B461}/medcard{FFFFFF} - Выдать мед. карту\n");
							    strcat(global_str,"{73B461}/heal{FFFFFF} - Вылечить пациента\n");
							}
							else if(GetTeamID(playerid) == TEAM_BANK)
							{
								strcat(global_str,"{73B461}/bankmenu{FFFFFF} - Банковкое меню\n");
								strcat(global_str,"{73B461}/credit{FFFFFF} - Изменить кредитную ставку\n");
							}
							else if(GetTeamID(playerid) == TEAM_LICENSERS) strcat(global_str,"{73B461}/givelicense{FFFFFF} - Выдать лицензию\n");
							else if(IsANews(playerid))
							{
								strcat(global_str,"{73B461}/live{FFFFFF} - Взять интервью у игрока\n");
								strcat(global_str,"{73B461}/endlive{FFFFFF} - Окончить интервью с игроком\n");
								strcat(global_str,"{73B461}/news{FFFFFF} - Говорить в чат News\n");
							}
							else if(IsAMeria(playerid)) if(PI[playerid][pRank] >= 4) strcat(global_str,"{73B461}/wedding{FFFFFF} - Провести помолвку\n");
							if(IsAtFrakcia(playerid))
							{
							    if(PI[playerid][pMember][1]>0)
							    {
		         					strcat(global_str,"{73B461}/blacklist{FFFFFF} - Добавить игрока в ЧС\n");
			        				strcat(global_str,"{73B461}/unblacklist{FFFFFF} - Удалить игрока из ЧС\n");
							    }
			        			if(PI[playerid][pRank]>8)strcat(global_str,"{73B461}/gov{FFFFFF} - Подать государственную новость\n");
							}
							else if(IsAtFrakcia(playerid))strcat(global_str,"{73B461}/blackplayers{FFFFFF} - Черный список закона\n");
							else if(IsAtMafia(playerid))
							{
							    strcat(global_str,"{73B461}/f{FFFFFF} - Чат семьи\n");
							    strcat(global_str,"{73B461}/mbiz{FFFFFF} - Бизнесы\n");
							    strcat(global_str,"{73B461}/minvite{FFFFFF} - Пригласить работать попрошайкой\n");
							    strcat(global_str,"{73B461}/bizwar{FFFFFF} - Начать войну за Биз.\n");
							    strcat(global_str,"{73B461}/givebiz{FFFFFF} - Добровольно отдать бизнес.\n");
							    strcat(global_str,"{73B461}/createbomb{FFFFFF} - Сделать бомбу\n");
							    strcat(global_str,"{73B461}/bomb{FFFFFF} - Заложить бомбу.\n");
							    strcat(global_str,"{73B461}/stuff{FFFFFF} - Набить татуировку.\n");
							}
							else if(IsAtGang(playerid))
							{
							    strcat(global_str,"{73B461}/f{FFFFFF} - Чат семьи\n");
						     	strcat(global_str,"{73B461}/drug{FFFFFF} - Посадить наркотик\n");
						 		strcat(global_str,"{73B461}/capture{FFFFFF} - Захватить зону\n");
						 		strcat(global_str,"{73B461}/sellgun{FFFFFF} - Сделать и продать оружие\n");
						 		strcat(global_str,"{73B461}/creategun{FFFFFF} - Сделать себе оружие\n");
						 		strcat(global_str,"{73B461}/sellgangzone{FFFFFF} - Продать территорию\n");
						 		if(PI[playerid][pRank]>=9)
						 		{
						 		    strcat(global_str,"{73B461}/getmoney{FFFFFF} - Забрать деньги с наркопритона\n");
						 		    strcat(global_str,"{73B461}/putmoney{FFFFFF} - Положить деньги на баланс наркопритона\n");
						 		    strcat(global_str,"{73B461}/setdsell{FFFFFF} - Установить стоимость продажи наркотиков\n");
						 		    strcat(global_str,"{73B461}/setdbuy{FFFFFF} - Установить стоимость продажи наркотиков\n");
						 		}
							}
							if(!IsAtGang(playerid) && !IsAtMafia(playerid)) strcat(global_str,"{73B461}/r{FFFFFF} - Чат организации\n");
							strcat(global_str,"{73B461}/opengate{FFFFFF} - Открыть ворота организации\n");
							strcat(global_str,"{73B461}/invite{FFFFFF} - Принять игрока в организацию\n");
							strcat(global_str,"{73B461}/uninvite{FFFFFF} - Выгнать игрока из организации\n");
							strcat(global_str,"{73B461}/giverank{FFFFFF} - Выдать игроку ранг\n");
							strcat(global_str,"{73B461}/fwarn{FFFFFF} - Дать игроку выговор\n");
							strcat(global_str,"{73B461}/unfwarn{FFFFFF} - Снять игроку выговор\n");
							strcat(global_str,"{73B461}/fmute{FFFFFF} - Заглушить игрока\n");
							strcat(global_str,"{73B461}/funmute{FFFFFF} - Снять мут игроку\n");
			                SPD(playerid,184,0,"Команды (Организация)",global_str, !"Принять","");
			            }
			            else SPD(playerid,184,0,"Команды (Организация)","{AFAFAF}Вы не состоите ни в одной из организаций", !"Принять","");
			        }
			        case 4:
			        {
			            if(PI[playerid][pHouseKey] != -1)
	            		{
			                SPD(playerid, 184, DIALOG_STYLE_MSGBOX, !"Команды (Дом)", "{73B461}/house{FFFFFF} - Управление домом\n{73B461}/exit{FFFFFF} - Выйти из дома\n", !"Закрыть", !"");
			            }
			            else SPD(playerid, 184, DIALOG_STYLE_MSGBOX, !"Команды (Дом)", !"{AFAFAF}У вас нет дома и вы не арендуете дом", !"Принять", !"");
					}
					case 5:
			        {
						strcat(global_str,"{73B461}/BizData{FFFFFF} - Управление бизнесом\n\n");
						strcat(global_str,"{FFFFFF}Изначально вы можете владеть 2-мя бизнесами, если\n");
						strcat(global_str,"вы хотите стать владельцем и крупным предпринимателем, можете\n");
						strcat(global_str,"приобрести улучшение, которое даст возможность стать владельцем 5-ми бизнесами.\n\n");
						strcat(global_str,"/mm - Действия персонажа - Улучшения - Бизнесмен\n");
						SPD(playerid,184,0,"Команды (Бизнес)",global_str, !"Принять","");
					}
					case 6:
			        {
			            GetNumberCars(playerid,PI[playerid][pCars]);
			            if(PI[playerid][pCars] > 0)
			            {
							strcat(global_str,"{73B461}/cars{FFFFFF} - Управление вашим транспортом\n");
							strcat(global_str,"{73B461}/carpass{FFFFFF} - Показать паспорт на авто\n");
							strcat(global_str,"{73B461}/key{FFFFFF} - Вставить/Вытащить ключи\n");
							strcat(global_str,"{73B461}/balon{FFFFFF} - Покрасить машину\n");
							strcat(global_str,"{73B461}/sellcar{FFFFFF} - Продать транспорт на рынок\n");
							strcat(global_str,"{73B461}/sellcarto{FFFFFF} - Продать транспорт игроку\n");
							strcat(global_str,"{73B461}/park{FFFFFF} - Припарковать транспорт\n");
							strcat(global_str,"{73B461}/lock{FFFFFF} - Закрыть/Открыть транспорт\n");
							strcat(global_str,"{73B461}/findcar{FFFFFF} - Искать транспорт\n");
							strcat(global_str,"{73B461}/alarm{FFFFFF} - Включить/Выключить сигнализацию\n");
							strcat(global_str,"{73B461}/tradecar{FFFFFF} - Обменятся транспортом\n");
							strcat(global_str,"{73B461}/givekey{FFFFFF} - Дать ключи от транспорта\n");
							if(PI[playerid][pVIP][0] >= STATUS_VIP)strcat(global_str,"{73B461}/deltun{FFFFFF} - Удалить тюнинг с транспорта\n");
							if(PI[playerid][pVIP][0] >= 3)strcat(global_str,"{73B461}/fixmycar{FFFFFF} - Зареспавнить транспорт\n");
			                SPD(playerid,184,0,"Команды (Личный транспорт)",global_str, !"Принять","");
			            }
			            else SPD(playerid,184,0,"Команды (Личный транспорт)","{AFAFAF}У вас нет ни одного личного транспорта", !"Принять","");
			        }
			        case 7:
			        {
			            SPD(playerid,184,0,"Команды (Транспорт)","{FFFFFF}\
						{73B461}/engine{FFFFFF} - Завести/Заглушить дивигатель\n\
						{73B461}/repcar{FFFFFF} - Починить транспорт набором для починки\n\
						{73B461}/fill{FFFFFF} - Заправить транспорт\n\
						{73B461}/fillcar{FFFFFF} - Заправить транспорт с канистры\n\
						{73B461}/lights{FFFFFF} - Включить/Выключить фары", !"Принять","");

					}
					case 8: SPD(playerid,184,0,"Команды (Анимации)","{FFFFFF}/anims - Список анимаций", !"Принять","");
					case 9:
			        {
			            SPD(playerid,184,0,"Команды (Чаты)","/c - Сказать шепотом\n\
						/ad - Реклама\n/s - Кричать\n\
						/b - Нон-РП чат\n/r - Командный чат\n/m - Говорить в мегафон\n/d - Говорить в департамент", !"Принять","");
			        }
			        case 10: callcmd::ahelp(playerid);
					case 11:
					{
					    strcat(global_str,"{73B461}/incar - Затащить игрока в транспорт\n");
					    strcat(global_str,"{73B461}/eject - Выкинуть игрока из транспорта\n");
					    SPD(playerid,184,0,"Команды (Похищение)",global_str, !"Принять","");
					}
					case 12:
			        {
						strcat(global_str,"{73B461}/todo{FFFFFF} - Разговор совмещан с действием\n");
						strcat(global_str,"{73B461}/me{FFFFFF} - Действие игрока\n");
						strcat(global_str,"{73B461}/do{FFFFFF} - Разговор от 3-го лица\n");
						strcat(global_str,"{73B461}/satiety{FFFFFF} - Состояние голода\n");
						strcat(global_str,"{73B461}/killme{FFFFFF} - Самоубийство\n");
						strcat(global_str,"{73B461}/leaders{FFFFFF} - Список лидеров онлайн\n");
						strcat(global_str,"{73B461}/pay{FFFFFF} - Передать деньги игроку\n");
						strcat(global_str,"{73B461}/hi{FFFFFF} - Поздороваться с игроком\n");
						strcat(global_str,"{73B461}/smoke{FFFFFF} - Курить\n");
						strcat(global_str,"{73B461}/drink{FFFFFF} - Пить что либо\n");
						strcat(global_str,"{73B461}/mask{FFFFFF} - Одеть/Снять маску\n");
						strcat(global_str,"{73B461}/usebad{FFFFFF} - Использовать таблетку для наркозав.\n");
						strcat(global_str,"{73B461}/bail{FFFFFF} - Заплатить залог за игрока\n");
						strcat(global_str,"{73B461}/throwfish{FFFFFF} - Выбросить рыбу\n");
						strcat(global_str,"{73B461}/fishes{FFFFFF} - Список рыбы\n");
						strcat(global_str,"{73B461}/eat{FFFFFF} - Есть чипсы.\n");
						strcat(global_str,"{73B461}/beer{FFFFFF} - Пить пиво.\n");
						strcat(global_str,"{73B461}/sprunk{FFFFFF} - Пить спранк.\n");
						strcat(global_str,"{73B461}/number{FFFFFF} - Телефоная книга.\n");
						strcat(global_str,"{73B461}/break{FFFFFF} - Вскрыть наручники.\n");
						strcat(global_str,"{73B461}/radio{FFFFFF} - Включить радио.\n");
						strcat(global_str,"{73B461}/armour{FFFFFF} - Одеть бронежилет.\n");
						strcat(global_str,"{73B461}/usemed{FFFFFF} - Использовать аптечку.\n");
						strcat(global_str,"{73B461}/setspawn{FFFFFF} - Сменить место спавна.\n");
                        strcat(global_str,"{73B461}/giveweapon{FFFFFF} - Передать оружие игроку\n");
                        strcat(global_str,"{73B461}/dropgun{FFFFFF} - Положить оружие на землю\n");
                        strcat(global_str,"{73B461}/getitem{FFFFFF} - Подобрать предмет\n");
                        strcat(global_str,"{73B461}/sellcard{FFFFFF} - Продать SIM карту\n");
                        strcat(global_str,"{73B461}/flowers{FFFFFF} - Подарить цветы\n");
    	 				strcat(global_str,"{73B461}/kiss{FFFFFF} - Поцеловать человека\n");
    	 				strcat(global_str,"{73B461}/advokats{FFFFFF} - Адвокаты онлайна\n");
    	 				strcat(global_str,"{73B461}/setradio{FFFFFF} - Выбрать радиостанцию\n");
    	 				strcat(global_str,"{73B461}/quest{FFFFFF} - Ваши квесты\n");
    	 				strcat(global_str,"{73B461}/delldrugs{FFFFFF} - Выкинуть наркотики\n");
			            SPD(playerid,184,0,"Команды (Другое)",global_str, !"Принять","");
					}
					case 13:
			        {
			            SPD(playerid,184,0,"FAQ (Скиллы оружий)","{FFFFFF}\
						{FFFFFF}У каждого оружия есть свой скилл для его прокачки.\n\
						Чтобы лучше стрелять вам нужно повышать его.\n\
						Скилл можно прокачать сходив в тир который вы можете найти с помощью ((/gps))\n\
						И уже там вы узнаете все подробности его прокачки\nПосмотреть навык стрельбы можно с помощью команды: /skill", !"Закрыть","");
					}
					case 14: callcmd::jobhelp(playerid);
					case 15: ShowRules(playerid);
					case 16:
					{
						strcat(global_str,"\n{52A1FF}Преимущества VIP статуса{ffffff}\n");
						strcat(global_str,"1)Больше процент в банке\n");
						strcat(global_str,"2)Каждую 5-ю ЗП +1 респект\n");
						strcat(global_str,"3)Удаление тюнинга с личного транспорта\n");
						strcat(global_str,"4)Возможность иметь 2 авто\n");
						strcat(global_str,"5)Срок действия {FFE741}30{ffffff} дней\n");
						strcat(global_str,"\n{52FFBB}Преимущества Gold статуса{ffffff}\n");
						strcat(global_str,"1)Все преимущества VIP статуса\n");
						strcat(global_str,"2)Каждую 4-ю ЗП +1 респект\n");
						strcat(global_str,"3)Возможность иметь 2 авто\n");
						strcat(global_str,"4)Лечение в больнице проходит в 2 раза быстрее.\n");
						strcat(global_str,"5)Испытывать чувство голода вы будете в 2 раза реже.\n");
						strcat(global_str,"6)Срок действия {FFE741}30{ffffff} дней\n");
						strcat(global_str,"\n{5EFF52}Преимущества PLATINUM статуса{ffffff}\n");
						strcat(global_str,"1)Каждый PayDay +2EXP\n");
						strcat(global_str,"2)Каждый payday вы будете получать 1 AZ-Монет (donat очки)\n");
						strcat(global_str,"3)Возможность иметь 3 авто\n");
						strcat(global_str,"4)Лечение в больнице проходит в 2 раза быстрее.\n");
						strcat(global_str,"5)Испытывать чувство голода вы будете в 2 раза реже.\n");
						strcat(global_str,"6)Прокачка скиллов в тире в 2 раза быстрей.\n");
						strcat(global_str,"7)Возможность респавнить личный транспорт /fixmycar.\n");
						strcat(global_str,"8)Срок действия {FFE741}30{ffffff} дней\n");
						strcat(global_str,"\n{D5FF52}Преимущества Diamond статуса{ffffff}\n");
						strcat(global_str,"1)Каждый PayDay +2EXP\n");
						strcat(global_str,"2)Каждый payday вы будете получать 2 AZ-Монет (donat очки)\n");
						strcat(global_str,"3)Возможность иметь 4 авто\n");
						strcat(global_str,"4)На много больше процент депозита в банке.\n");
						strcat(global_str,"5)Лечение в больнице проходит в 2 раза быстрее.\n");
						strcat(global_str,"6)При подборе подарка у вас будет шанс получить больше 3 подарков.\n");
						strcat(global_str,"7)Испытывать чувство голода вы будете в 2 раза реже.\n");
						strcat(global_str,"8)Прокачка скиллов в тире в 2 раза быстрей.\n");
						strcat(global_str,"9)Возможность респавнить личный транспорт /fixmycar.\n");
						strcat(global_str,"10)Срок действия {FFE741}30{ffffff} дней\n");
						strcat(global_str,"\n{FFB252}Преимущества Titan статуса{ffffff}\n");
						strcat(global_str,"1)Каждый payday вы будете получать 3 AZ-Монет (donate очки)\n");
						strcat(global_str,"1)Возможности всех VIP.\n");
						strcat(global_str,"2)VIP Чат (Для всех богачей сервера) (/vr)\n");
						strcat(global_str,"3)VIP статус не нужно продлевать( {FFE741}Неограниченный срок действия{ffffff} )\n");
						strcat(global_str,"5)Больше процент в банке.\n");
						strcat(global_str,"6)В банке можно хранить больше 40 миллионов.\n");
						strcat(global_str,"7)Вы можете иметь 5 автомобилей/мото и вертолетов\n");
						strcat(global_str,"\n{FFB252}Преимущества PREMIUM статуса{ffffff}\n");
						strcat(global_str,"1)Каждый payday вы будете получать 20 AZ-Монет (donate очки)\n");
						strcat(global_str,"1)Возможности всех VIP.\n");
						strcat(global_str,"7)Вы можете иметь 10 автомобилей/мото и вертолетов\n");
						SPD(playerid,184,0,"FAQ (Преимущества VIP/Gold)",global_str, !"Принять","");
					}
					case 17:
					{
					    strcat(global_str,"{73B461}\t\t____________ Однорукий бандит ____________\n");
						strcat(global_str,"{FFFFFF}Для игры в эту игру вам необходимо найти казино, найти его можно\n");
						strcat(global_str,"{FFFFFF}с помощью /gps - казино. После подойти к свободному автомату и нажать клавишу {73B461}'ALT'{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Там вы сможете посмотреть шанс победы и начать игру , вставив в автомат фишки , которые\n");
						strcat(global_str,"{FFFFFF}вы можете купить в обменнике в самом казино.");
						SPD(playerid,184,0,"Информация",global_str, !"Принять","");
					}
					case 18:
					{
						f(global_str, 200,"{FFFFFF}Наш сайт: %s{FFFFFF}\n{FFFFFF}Наш Форум: {73B461}%s{FFFFFF}\nГруппа Вконтакте: {73B461}%s{FFFFFF}", Setting_Server[3], Setting_Server[4], Setting_Server[5]);
						SPD(playerid,184,0,"Информация",global_str, !"Принять","");
					}
					case 19:
					{
     					strcat(global_str,"{73B461}- Авиашкола \n");
					    strcat(global_str,"{FFFFFF}Можно ли садиться на зданиях? -{73B461}В особых местах{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Разрешено ли буксировать другие транспортные средства? -{73B461}Нет{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Какая дистанция должна быть между двумя летящими вертолётам/самолетами? -{73B461}Необходимая для безопасного пролета{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Полет между зданиями -{73B461}Запрещен{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Летать разрешено -{73B461}За исключением военных объектов{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Покидать кабину летательного аппарата разрешено -{73B461}После остановки двигателя{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Перед взлетом необходимо проверить -{73B461}Уровень реактивного топлива{FFFFFF}\n\n");
						strcat(global_str,"{73B461}- Автошкола\n");
						strcat(global_str,"{FFFFFF}Максимальная скорость в городе: -{73B461} 60 Км/ч{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Максимальная скорость вне города: -{73B461} 120 Км/ч{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Разрешена ли парковка на тротуаре? -{73B461} Только в экстренных ситуациях{FFFFFF}\n");
						strcat(global_str,"{FFFFFF}Что нужно делать при тумане? -{73B461} Снизить скорость и включить фары{FFFFFF}\n");
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 20:
					{
					    strcat(global_str,"{73B461}- Воровство материалов{FFFFFF} \n");
					    ///
					    strcat(global_str,"{8B8181}Для начала вам надо запастись терпением и силой воли, ведь вам придётся воровать\n");
					    strcat(global_str,"{8B8181}ингредиенты прямо из территории армии LS или LV. Будьте осторожны когда это будете делать!\n");
					    strcat(global_str,"{8B8181}В Армии LS склад с ингредиентами расположен на корабле, а в армии LV в специально отведенных зданиях.\n");
					    ///
					    strcat(global_str,"{8B8181}Для того чтобы из ингредиентов изготовить патроны, а затем оружие , вам\nнеобходимо отправится на завод /gps - работы для новичков - завод\n");
					    strcat(global_str,"{8B8181}И найти там чекпоинт в котором можно обменять ингредиенты.\n");
					    strcat(global_str,"{8B8181}Затем у вас появятся патроны и из них можно сделать оружие командой /sellgun.\n");
					    strcat(global_str,"\n{73B461}Приятной игры");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 21:
					{
					    strcat(global_str,"{73B461}- Ферма и ее влияние на штат{FFFFFF} \n");
					    strcat(global_str,"Это предприятие предназначено в основном для игроков 1-го уровня, которые хотят выбится в люди, с помощью карьеры на ферме.\n");
					    strcat(global_str,"EasterBoard Farm производит продукты, которые закупают развозчики продуктов и поставляют на склады. После чего владельцы бизнесов\n");
					    strcat(global_str,"там закупают продукты для своих закусочных и баров. На ферме можно прокачать навык и уже не просто носить мешки с сеном, а заниматся\n");
					    strcat(global_str,"чем-то лучше. Например получив 500 очк. новыка вы можете работать трактористом, зарабатывая больше и получая удовольствие от работы.\n");
					    strcat(global_str,"Когда вы накопите 3200 очк. навыка, вы получите возможность работать комбайнером, при этом еще больше зарабатывая на своём труде.\n");
					    strcat(global_str,"При достижении следующей работы, вы сможете бесплатно получить лицензию на авиа транспорт, не проходя экзамен в авиашколе, который\n");
					    strcat(global_str,"очень дорогой и сложный. Как вы получите лицензию для работы, у вас будет возможность работать водителем кукурузника.\n\n");
					    strcat(global_str,"Используйте /ffarm для того чтобы узнать свой навык.\nИспользуйте /GPS - работы для новичков - Ферма.");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 22:
					{
					    strcat(global_str,"{73B461}- Банковская карта{FFFFFF} \n");
					    strcat(global_str,"Получить банковскую карту вы можете в Центральном банке LS , найти его можно с помощью /gps - важные, места у сотрудника банка выше 8-го ранга.\n");
					    strcat(global_str,"Если же в банке нет человека который мог бы вам ее выдать, вы можете отправится в банковское отделение Las Venturas , в котором сами ее получите.\n");
					    strcat(global_str,"Для получения банковской карты необходимо с собой иметь 1 000$. После того как вы добрались к месту назначения, внимательно перечитайте условия банка.\n");
					    strcat(global_str,"Обратите внимание, если вы не правильно введете пароль, при регистрации банковской карты, его можно будет восстановить у сотрудника банка, за кругленькую сумму.\n");
					    strcat(global_str,"Так же вы можете в любой момент сменить свой пароль в /mm - Настройки - сменить пароль [ Банковская карта ].\n");
					    strcat(global_str,"Вы не сможете пользоватся банком/банкоматом не имея банковской карты или пароля к ней! Вводить пароль вам придётся только 1 раз, при\n");
					    strcat(global_str,"первой попытке воспользоватся денежными средствами в вашем банке, в дальнейшем вам не придётся его вводить до перезахода в игру.\n");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 23:
					{
					    strcat(global_str,"{73B461}- Рыболовля и заработок на ней{FFFFFF} \n");
					    strcat(global_str,"Для того чтобы иметь возможность ловить рыбу, вам необходима удочка и черви, в качестве наживки.\n");
					    strcat(global_str,"Купить это все можно в любом магазине 24/7, его можно найти с помощью /gps - найти ближайший 24/7.\n");
					    strcat(global_str,"Максимум вы можете с собой переносить 5 разных рыб, до 20 кг. в общем весе.\n");
					    strcat(global_str,"Каждая рыба имеет свою стоимость, и ее можно продать в любой магазин в котором вы покупали удочку или наживку.\n");
					    strcat(global_str,"Рыба достаточно дорогая, а значит вы можете на этом зарабатывать. Удачной рыболовли.\n");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 24:
					{
					    strcat(global_str,"{73B461}- Ограбление матовозов{FFFFFF} \n");
					    strcat(global_str,"Грузовики в армии ( матовозы ), практически не убиваемые, в одиночку вам его точно не ограбить.\n");
					    strcat(global_str,"чтобы ограбить матовоз и забрать весь его груз, достаточно сделать так чтобы он взорвался, при этом в нем сидел водитель.\n");
					    strcat(global_str,"При взрыве с грузовика вылетят ящики, в которых по 500 готовых патронов, из которых уже можно сделать оружие.\n");
					    strcat(global_str,"Совершить ограбление может абсолютно каждый, для этого достаточно собрать нужное количество людей и взятся за работу.\n");
					    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 25:
					{
					    strcat(global_str,"{73B461}- Багажник{FFFFFF} \n\n");
					    strcat(global_str,"Багажник необходим для хранения и перевозки различных предметов.\n");
					    strcat(global_str,"Открыть багажник вашей личной машины не может никто кроме вас, а организационной\n");
                        strcat(global_str,"могут только те, кто состоит в вашей организации. Если вы оставите багажник открытым,\n");
                        strcat(global_str,"то вас могут обчистить, забрав все добро с него. Багажник транспорта который не принадлежит\n");
                        strcat(global_str,"организации или вам, может открыть любой игрок!\n\n");
                        strcat(global_str,"{73B461}Открыть багажник можно с помощью L.ALT.\n");
                        SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 26:
					{
						strcat(global_str,"{73B461}- Наркопритоны{FFFFFF} \n\n");
						strcat(global_str,"Это одно из средств заработка денег, а также закупки наркотиков для любых целей.\n");
						strcat(global_str,"В наркопритоне ограничены как средства, так и товар, поэтому банды имеют возможность их контролировать,\n");
						strcat(global_str,"а именно банда которая держит территорию наркопритона, может управлять его ресурсами и\n");
						strcat(global_str,"сажать семена в огороде. Семена могут созревать от 1-го до 2-ух часов, поэтому\n");
						strcat(global_str,"очень важным этапом в выращивании товара есть охрана территории наркопритона, дабы вражесские банды\n");
						strcat(global_str,"не своровали наркотики или не испортили саженец. Семена можно найти вне города, которые\n");
						strcat(global_str,"растут у больших деревьев. Посадить наркотик можно в огороде наркопритона, командой /drug.\n");
                        SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 27:
					{
						strcat(global_str,"{73B461}- Здоровье{FFFFFF} \n\n");
						strcat(global_str,"В статистике персонажа можно найти пункт который отображает статус вашего здоровья, если оно\n");
						strcat(global_str,"будет ниже 2-ух очков то ваш персонаж будет спавнится с низким уровнем ХП, до тех пор пока\n");
						strcat(global_str,"его не вылечит медик или он не использует аптечку по рецепту выданным в больнице штата. \n");
						strcat(global_str,"Здоровье будет понижаться в случае попадения в больницу или от страдания голодом. \n");
						strcat(global_str,"Чтобы избежать проблем необходимо правильно питаться и быть осторожным в плане ранений.\n");
                        SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
					case 28:
					{
					    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Команды (Семья)", !"{FFFFFF}/fammenu - Панель семьи", !"Принять", !"");
					}
				}
		    }
		}
		case 69:
		{
		    if(response) FirstReferal[playerid] += 10;
		    else
		    {
		        if(FirstReferal[playerid] >= 10) FirstReferal[playerid] -= 10;
		        else return 1;
		    }
		    static Name2[24]; Name2 = ""; new Level;
		    f(global_str, 180, "SELECT `NickName`, `Level` FROM `accounts` WHERE `Referal` = '%s' LIMIT %i, 10", PN(playerid), FirstReferal[playerid]);
		    new Cache:result = mysql_query(mysql, global_str);
			global_str= "";
      		new accounts = cache_num_rows();
      		if(accounts == 0) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Больше вас никто не указывал как реферала");
      		for(new i; i < accounts; i ++)
      		{
				cache_get_value_name(i, "NickName", Name2);
				cache_get_value_name_int(i, "Level", Level);

      			if(Level < 3) f(global_str, sizeof(global_str), "%s{FFFFFF}%i. %s - {FF0000}%d level\n", global_str, i+FirstReferal[playerid]+1, Name2, Level);
      			else f(global_str, sizeof(global_str), "%s{FFFFFF}%i. %s - {33AA33}%d level\n", global_str, i+FirstReferal[playerid]+1, Name2, Level);
      		}
      		cache_delete(result);
  			SPD(playerid, 69, 0, "Приглашенные", global_str, "Далее", "Назад");
		}
		///////авиашкола
		case 3339:
		{
		    if(response)
		    {
		        if(FlyivingTest[playerid] != 0)
		        {
		            new que, question;
		            que = Question[playerid];
		            question = TestFASKMassive[playerid][que];
		            if(QueFInfo[question][dSuccesQwe] != -1 && listitem != QueFInfo[question][dSuccesQwe]) Errors[playerid] ++;
		            Question[playerid] ++;
		            que = Question[playerid];
		            if(que < 7)
		            {
		                question = TestFASKMassive[playerid][que];
		          		SPD(playerid,3339,QueFInfo[question][dDialog],QueFInfo[question][dQuestion],QueFInfo[question][dAnswers],"Далее", !"Отмена");
					}
					else
					{
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Правильных ответов: %d/7",7-Errors[playerid]);
						SCM(playerid,COLOR_VALIK,global_str);
						if(!Errors[playerid])
						{
						    SPD(playerid,0,0,!"","{999393} Вы успешно прошли собеседование и можете приступать к практической части, а именно управление самолётом.\nДля того чтобы ее начать доберитесь до старого аэродрома ( отмечен на карте красной меткой ).\nСадитесь в один из учебных самолётов ( дальнейшее подсказки вы получите позже ).", !"Закрыть","");
							CarTest[playerid] = 0;
							FlyivingTest[playerid] = 0;
							Question[playerid] = 0;
							EnableGPSForPlayer(playerid,396.5388,2530.4644,16.5490);
						}
						else
						{
						    SPD(playerid,0,0,!"","{C03F3F}Вы провалили тест, ответы на вопросы вы можете найти на форуме или в авиашколе!", !"Закрыть","");
							FlyivingTest[playerid] = 0;
							CarTest[playerid] = -1;
						}
					}
				}
			}
			else
			{
				SPD(playerid,0,0,!"","{C03F3F}Вы провалили тест, ответы на вопросы вы можете найти на форуме или в авиашколе!", !"Закрыть","");
				FlyivingTest[playerid] = 0;
			}
			return 1;
		}
		case 70:
		{
		    if(response)
		    {
		        if(DrivingTest[playerid] != 0)
		        {
		            new que, question;
		            que = Question[playerid];
		            question = TestASKMassive[playerid][que];
		            if(QueInfo[question][dSuccesQwe] != -1 && listitem != QueInfo[question][dSuccesQwe]) Errors[playerid] ++;
		            Question[playerid] ++;
		            que = Question[playerid];
		            if(que < 4)
		            {
		                question = TestASKMassive[playerid][que];
		          		SPD(playerid,70,QueInfo[question][dDialog],QueInfo[question][dQuestion],QueInfo[question][dAnswers],"Далее", !"Отмена");
					}
					else
					{
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Правильных ответов: %d/4",4-Errors[playerid]);
						SCM(playerid,COLOR_ORANGE,global_str);
						if(!Errors[playerid])
						{
							SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно ответили на все заданы вопросы! Для того чтобы приступить к");
							SCM(playerid,COLOR_WHITE, !"следующей части экзамена, выйдите на улицу и сядьте в одно из учебных автомобилей. Внимательно читайте");
							SCM(playerid,COLOR_WHITE, !"все подсказки, которые видите на экране!");
							SPD(playerid,0,0,!"","Вы успешно ответили на все заданы вопросы. \nДля того чтобы приступить к следующей части экзамена \nвыйдите на улицу и сядьте в одно из учебных авто. \n\n{A7FC00}Следуйте Подсказкам которые вы увидите на экране!", !"Закрыть","");
                            EnableGPSForPlayer(playerid,-2073.93, -121.46, 35.34);
							CarTest[playerid] = 0;
							DrivingTest[playerid] = 0;
							Question[playerid] = 0;
						}
						else
						{
							SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Вы провалили тест. Необходимо ответить на все вопросы правильно!");
							DrivingTest[playerid] = 0;
							CarTest[playerid] = -1;
						}
					}
				}
			}
			else
			{
				SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Вы провалили тест");
				DrivingTest[playerid] = 0;
			}
			return 1;
		}
		case 86:
		{
	        if(!response)
			{
				new id = HouseOffer[playerid];
			    SCM(id, -1, !">> {BE2D2D} Игрок отказался от покупки вашего дома.");
			    HouseOffer[id] =
	        	HouseOffer[playerid] = INVALID_PLAYER_ID;
	        	HousePrice[playerid] = 0;
			}

			SetPVarInt(playerid, !"antinaebdom", Global_Time + 5);
			SPD(playerid, 92, DIALOG_STYLE_MSGBOX, !"", !" {FFFFFF}Вы действительно согласны на покупку дома?\n{EC2218}Для вашей безопасности, принять покупку\nможно спустя 5 секунд с момента предложения", !"Принять", !"Отмена");
		}
		case 92:
		{
		    if(!response)
		    {
		    	new id = HouseOffer[playerid];

		    	if(!(!IsPlayerOnline(id)))
			   		SCM(id, -1, !">> {BE2D2D} Игрок отказался от покупки вашего дома."),
			    	HouseOffer[id] = INVALID_PLAYER_ID;
	        	
	        	HouseOffer[playerid] = INVALID_PLAYER_ID;
	        	HousePrice[playerid] = 0;	
	        	DeletePVar(playerid, !"antinaebdom");
			}

            if(Int_GetPlayerData(playerid, !"antinaebdom") > Global_Time)
                return SPD(playerid, 92, DIALOG_STYLE_MSGBOX, !"", !" {FFFFFF}Вы действительно согласны на покупку дома?\n{EC2218}Для вашей безопасности, принять покупку\nможно спустя 5 секунд с момента предложения", !"Принять", !"Отмена");
            
			DeletePVar(playerid, !"antinaebdom");

            SPD(playerid, 94, DIALOG_STYLE_MSGBOX, !"", !"{EC2218} Вы действительно согласны на покупку дома?", !"Принять", !"Отмена");
		}
		case 94:
		{
		    new id = HouseOffer[playerid];
			if(response)
			{
		        if(!(HouseOffer[playerid] == INVALID_PLAYER_ID) && HouseOffer[id] == playerid)
		        {
		            new house = GetPlayerInHouseID(id);

		            if(!(house == -1) && GetString(HouseInfo[house][hOwner], PN(id)))
		            {
		                if(PI[playerid][pMoney] >= HousePrice[playerid])
		                {
				            GiveMoney(playerid, -HousePrice[playerid]);
				            GiveMoney(id, HousePrice[playerid]);
				        	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы купили дом у игрока %s за $%d", PN(id), HousePrice[playerid]);
				        	SCM(playerid, COLOR_LIGHTBLUE, global_str);
				        	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Игрок %s купил у вас дом за $%d", PN(playerid), HousePrice[playerid]);
							SCM(id, COLOR_LIGHTBLUE, global_str);
				            //
							f(global_str, 250, "<a href=../pages/user?name=%s>%s</a> продал дом <a href=../pages/houselog?id=%d>%d</a> игроку <a href=../pages/user?name=%s>%s</a> [Цена:%d]", PN(id), PN(id), house, house, PN(playerid), PN(playerid), HousePrice[playerid]);
							aml(global_str, 0, "", "");
							//
							PI[id][pDCTime] = 0;
							SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
				        	PI[playerid][pDCTime] = 1;
				        	SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ваш дом. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
				        	SetString(HouseInfo[house][hOwner], PN(playerid));
				        	UpdateHouse(house);
				        	PI[playerid][pHouseKey] = house;
				        	foreach(new i: Player)
							{
							    if(HouseNalog[i] == house)
							    {
								    callcmd::stopjob(i, "");
							        SCM(i, COLOR_RED, !"[Информация] {FFFFFF}Дом над которым вы работаете был выкуплен. Начните работу заново.");
							     }
							}
				        	PI[id][pHouseKey] = -1;
							SaveAccount(playerid);
							SaveAccount(id);
					    }
					}
					
					HouseOffer[id] =
				    HouseOffer[playerid] = INVALID_PLAYER_ID;
				    HousePrice[playerid] = 0;
				}
			}
			else
			{
			    SCM(id, COLOR_WHITE, !">> {BE2D2D} Игрок отказался от покупки вашего дома.");
			    HouseOffer[id] =
	        	HouseOffer[playerid] = INVALID_PLAYER_ID;
	        	HousePrice[playerid] = 0;
	       }
		}
		case 87:
		{
		    if(response)
		    {
		        if(ProxDetectorS(5,playerid,TicketOffer[playerid], 1))
		        {
		            if(PI[playerid][pMoney] >= TicketPrice[playerid])
		            {
		            	GiveMoney(playerid,-TicketPrice[playerid]);
		            	GiveMoney(TicketOffer[playerid],TicketPrice[playerid]);
		            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s оплатил штраф в размере $%d",PN(playerid),TicketPrice[playerid]);
		            	SCM(TicketOffer[playerid],COLOR_VALIK,global_str);
		            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы оплатили штраф полицейскому %s в размере $%d",PN(TicketOffer[playerid]),TicketPrice[playerid]);
		            	SCM(playerid,COLOR_VALIK,global_str);
		            	TicketPrice[playerid] = 0;
		            	TicketOffer[playerid] = INVALID_PLAYER_ID;
		            }
		        }
		    }
		}
		case 88:
		{
		    if(response)
		    {
		        if(ProxDetectorS(2.0,playerid,TakeOffer[playerid], 1) || listitem == 3)
		        {
		            new id = TakeOffer[playerid];
		            if(Cuffed[id] || CuffedTime[id] > 0 || listitem == 3)
		            {
						switch(listitem)
						{
				            case 0:
				            {
				                f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы отобрали наркотики у %s",PN(id));
				            	SCM(playerid,COLOR_VALIK,global_str);
				            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Полицейский %s отобрал у вас наркотики",PN(playerid));
				            	SCM(id,COLOR_RED,global_str);
				            	TakeOffer[playerid] = INVALID_PLAYER_ID;
				            }
				            case 1:
				            {
				                f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы отобрали патроны у %s",PN(id));
				            	SCM(playerid,COLOR_VALIK,global_str);
				            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Полицейский %s отобрал у вас патроны",PN(playerid));
				            	SCM(id,COLOR_RED,global_str);
				            	DeleteItem(playerid, 511, GetCount(playerid, 511));
				            	TakeOffer[playerid] = INVALID_PLAYER_ID;
				            }
				            case 2:
				            {
				                f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы отобрали оружие у %s",PN(id));
				            	SCM(playerid,COLOR_VALIK,global_str);
				            	f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Полицейский %s отобрал у вас оружие",PN(playerid));
				            	SCM(id,COLOR_RED,global_str);
				            	_ResetGun(id);
				            	TakeOffer[playerid] = INVALID_PLAYER_ID;
				            }
				            case 3: SPD(playerid,89,2,"Что отобрать","Лицензию на авто\nЛицензию на мото\nЛицензию на полеты\nЛицензию на ловлю рыбы\nЛицензию на плавание\nЛицензию на оружие","Отобрать", !"Отмена");
						}
					}
					else SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Человек должен быть обездвижен");
		        }
		        else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
			}
		}
		case 89:
		{
		    if(response)
		    {
		        new id = TakeOffer[playerid];
		        static Zak[20];
		        if(IsACop(playerid)) Zak = "Полицейский";
		        else if(GetTeamID(playerid) == TEAM_LICENSERS) Zak = "Лицензер";
		        switch listitem do
		        {
					case 0:
					{
					    if(!GetPlayerLicense(id, 0)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на авто");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на авто игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на авто",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][0] = 0;
					}
					case 1:
					{
					    if(!GetPlayerLicense(id, 1)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на мото");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на мото игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на мото",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][1] = 0;
					}
					case 2:
					{
					    if(!GetPlayerLicense(id, 2)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на полеты");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на полеты игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на полеты",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][2] = 0;
					}
					case 3:
					{
					    if(!GetPlayerLicense(id, 4)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на рыбалку");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на ловлю рыбы игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на ловлю рыбы",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][4] = 0;
					}
					case 4:
					{
					    if(!GetPlayerLicense(id, 3)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на плавиние");
					  
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на плавание игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на плавание",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][3] = 0;
					}
					case 5:
					{
					    if(!GetPlayerLicense(id, 5)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У этого игрока нет лицензии на оружие");
					    
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы обнулили лицензию на оружие игрока %s",PN(id));
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s %s обнулил вашу лицензию на оружие",Zak,PN(playerid));
						SCM(id,COLOR_RED,global_str);
						TakeOffer[playerid] = INVALID_PLAYER_ID;
						
						PI[id][LicensesData][5] = 0;
					}
				}
				SavePlayerLicense(id);
			}
			else if(IsACop(playerid)) SPD(playerid,88,2,"Что забрать","Наркотики\nПатроны\nОружие\nЛицензию","Забрать", !"Отмена");
		}
		case 91:
		{
		    if(response)
		    {
		        if(PI[playerid][pAdmin] >= 4)
		        {
				    if(IsBannedName(UnbanName[playerid]))
				    {
				        UnBanName(UnbanName[playerid]);
				        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Игрок разбанен");
						global_str = "";
						GetPVarString(playerid, "ReasonBanString", global_str, 64);
						if(strlen(global_str)) f(global_str, 256 ," Администратор %s разбанил игрока %s, причина: %s", PN(playerid), UnbanName[playerid], global_str);
				        else f(global_str, 256 ," Администратор %s разбанил игрока %s", PN(playerid), UnbanName[playerid]);
				        SendAdminsMessage(COLOR_YELLOW, global_str);
						ANL(UnbanName[playerid], global_str);
						
						GetPVarString(playerid, "ReasonBanString", global_str, 64);
						amlf("Администратор <a href=../pages/user?name=%s>%s</a> разбанил игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PN(playerid), PN(playerid), UnbanName[playerid], UnbanName[playerid], global_str);
						DeletePVar(playerid, "ReasonBanString");
						
						f(global_str, sizeof(global_str), "62.109.24.40/api/manager/unbanlog.php?name=%s", UnbanName[playerid]);
						HTTP(0, HTTP_POST, global_str, "", "");
					}
				    else SCM(playerid, COLOR_GREY, !"Игрок уже разбанен");
		        }
		    }
		}
  		case 96:
		{
			if(response)
			{
			    if(listitem == 20 || listitem == 21) CheckBanned(playerid,listitem);
       			else
			    {
			        strmid(UnbanName[playerid], inputtextsave, 0, strlen(inputtextsave) );
			        if(GetString(inputtextsave, "<<< Назад")) return CheckBanned(playerid,21);
			        new seconds; static reason[100], admin[24], Name[24]; reason = ""; admin = ""; Name = "";
				    f(global_str, 256, "SELECT * FROM `bannames` WHERE BINARY `Name` = '%s' LIMIT 1", UnbanName[playerid]);
					new Cache:result = mysql_query(mysql, global_str);
					if(cache_num_rows() > 0)
					{
						cache_get_value_name(0, "Name", Name);
						cache_get_value_name(0, "BanAdmin", admin);
						cache_get_value_name(0, "BanReason", reason);
						cache_get_value_name_int(0, "BanSeconds", seconds);

						new times = Global_Time;

						new dima;
						if(floatround((seconds-times)/60/60/24)> 1)
						{
							global_str = "дней";
							dima =floatround((seconds-times)/60/60/24,floatround_ceil);
						}
						else
					 	{
				 			global_str = "час(ов)";
				 			dima = floatround((seconds-times)/60/60,floatround_ceil);
						}

					    f(global_str, 150,"\
						{FFFFFF}Блокиратор: \t{FF0000}%s\n\
						{FFFFFF}Причина: \t{FF0000}%s\n\
						{FFFFFF}До разблокировки: \t\t{FF0000}%d %s",
						admin, reason, dima, global_str);
						SPD(playerid,91,0,UnbanName[playerid],global_str,"Разбан", !"Отмена");
					}
					else
				    {
				        f(global_str, 150, "Игрок %s не забанен", UnbanName[playerid]);
				        SCM(playerid, COLOR_GREY, global_str);
				    }
				    cache_delete(result);
			    }

			}
		}
	    case 98:
	    {
	        if(response)
		    {
		        new biz = InfoBiz[playerid];
		        if(GetPlayerBizes(playerid))
		        {
			        if(GetString(BizData[biz][bOwner],"The State"))
		     	    {
		     	        if(PI[playerid][pMoney] >= BizData[biz][bCost])
		     	        {
	     	                GiveMoney(playerid,-BizData[biz][bCost]);
	     	                BizData[biz][bLevel]=0;
		               	 	SetString(BizData[biz][bOwner],PN(playerid));
	     	                SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Теперь этот бизнес ваш!");
	     	                PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
	     	                UpdateBusinessText(biz,1);
	     	                SaveAccount(playerid);
		     	        }
	     	        }
	     	    }
	     	    else SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
		    }
		    else NoEnterPickup[playerid] = 3;
		    return 1;
	    }
	    case 99:
	    {
	        if(response)
	        {
		        new i = InfoBiz[playerid];
				if(!IsNoEnterBiz(i))
				{
					if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[i][bExit][0],BizData[i][bExit][1],BizData[i][bExit][2]))
					{
					    BizEntered[playerid] = -1;
					    SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						UpdatePlayerPos(playerid,BizData[i][bEnter][0],BizData[i][bEnter][1],BizData[i][bEnter][2]);
					}
				}
			}
			else NoEnterPickup[playerid] = 3;
			return 1;
	    }
		case 103:
		{
			if(response)
			{
			    switch(listitem)
				{
				    case 0: CreateShopTD(playerid, 0);
				    case 1: SPD(playerid,104,2,"Что продать?","Рыбу","Выбор", !"Отмена");
				    case 2:
				    {
				        PI[playerid][pVID] = !PI[playerid][pVID];
					    f(global_str, sizeof(global_str), "{42B02C}-{FFFFFF} Купить\n{42B02C}-{FFFFFF} Продать\n{42B02C}- {FFFFFF}Оплата: %s", PI[playerid][pVID] ? ("{E5D02D}Кредиткой") : ("{E5D02D}Наличкой"));
						SPD(playerid, 103, DIALOG_STYLE_LIST, !"", global_str, !"Выбор", !"Отмена");
				    }
			    }
			}
		}
		case 104:
		{
			if(response)
			{
			    switch(listitem)
				{
				    case 0: SPD(playerid,105,2,"Что продать?","Всю рыбу","Выбор", !"Отмена");
			    }
			}
			else {
			    f(global_str, sizeof(global_str), "{42B02C}-{FFFFFF} Купить\n{42B02C}-{FFFFFF} Продать\n{42B02C}- {FFFFFF}Оплата: %s", PI[playerid][pVID] ? ("{E5D02D}Кредиткой") : ("{E5D02D}Наличкой"));
				SPD(playerid, 103, DIALOG_STYLE_LIST, !"", global_str, !"Выбор", !"Отмена");
			}
		}
  		case 105:
		{
			if(response)
			{
			    switch(listitem)
				{
				   	case 0:
				    {
				        new cost;
				        for(new i; i < 5; i ++)
				        {
				            new fish = PlayerFish[playerid][i];
				            if(fish != 0) cost += FishMassa[playerid][i] * FishCost[fish];
				        }
				        if(cost < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Рыбу менее чем на $1 не принимаем");
                        for(new i; i < 5; i ++)
				        {
				            PlayerFish[playerid][i] = 0;
				            FishMassa[playerid][i] = 0;
				        }
				        GiveMoney(playerid, cost);
				        f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы продали всю рыбу за {73B461}$%d", cost);
				        SCM(playerid, COLOR_VALIK, global_str);
					}
			    }
			}
			else SPD(playerid,104,2,"Что продать?","Рыбу","Выбор", !"Отмена");
		}
		case 111:
		{
			if(response)
			{
				if(pTemp[playerid][SPECTPLAYER]==true) SpecPl(playerid,false);
			}
		}
  		case 115:
		{
		    if(!response) return callcmd::apanel(playerid);
			
			new number = listitem + 1, id = GetPlayerID(OrgInfo[number][oLeader]);
		    if(GetString(OrgInfo[number][oLeader],"Свободна")) return SCM(playerid,COLOR_GREY, !"Эта лидерка и так свободна");
			
			if(!(id == INVALID_PLAYER_ID)) 
				SCMF(id, COLOR_WHITE, "** Администратор %s снял вас с поста лидера", PN(playerid)),
				f(global_str,200,"Вы сняли игрока %s с поста лидера", PN(id));
			else
				f(global_str,200,"Вы сняли игрока %s с поста лидера", OrgInfo[number][oLeader]);
			
			SCM(playerid,COLOR_WHITE,global_str);

			f(global_str,200," Администратор %s выгнал игрока из должности лидерства '%s'",PN(playerid), OrgInfo[number][oName]);
			SendAdminsMessage(COLOR_WHITE,global_str);
            
            PlayerUnleader(id, OrgInfo[number][oLeader]);
			SetString(OrgInfo[number][oLeader],"Свободна");
            SaveOrg(number);
		}
		case 116:
		{
			if(response)
			{
				switch(listitem)
				{
	            	case 0:OrgInfo[TEAM_LSPD][oMats]+=50000;
	             	case 1:OrgInfo[TEAM_RCPD][oMats]+=50000;
	             	case 2:OrgInfo[TEAM_FBI][oMats]+=50000;
	            	case 3:OrgInfo[TEAM_SFPD][oMats]+=50000;
	               	case 4:OrgInfo[TEAM_M4C][oMats]+=50000;
	            	case 5:OrgInfo[TEAM_MERIALS][oMats]+=50000;
	             	case 6:OrgInfo[TEAM_ARMYLV][oMats]+=50000;
	               	case 7:OrgInfo[TEAM_MEDICSF][oMats]+=50000;
                    case 8:OrgInfo[TEAM_LICENSERS][oMats]+=50000;
		            case 9:OrgInfo[TEAM_RADIO][oMats]+=50000;
	               	case 10:OrgInfo[TEAM_GROOVE][oMats]+=50000;
	              	case 11:OrgInfo[TEAM_VAGOS][oMats]+=50000;
	             	case 12:OrgInfo[TEAM_BALLAS][oMats]+=50000;
            		case 13:OrgInfo[TEAM_CORONOS][oMats]+=50000;
	            	case 14:OrgInfo[TEAM_RIFA][oMats]+=50000;
              		case 15:OrgInfo[TEAM_RM][oMats]+=50000;
            		case 16:OrgInfo[TEAM_YAKUZA][oMats]+=50000;
            		case 17:OrgInfo[TEAM_LCN][oMats]+=50000;
            		case 18:OrgInfo[TEAM_BIKERS][oMats]+=50000;
	            	case 19:OrgInfo[TEAM_ARMY][oMats]+=50000;
	              	case 20:OrgInfo[TEAM_BANK][oMats]+=50000;
	             	case 21:OrgInfo[TEAM_MEDICLV][oMats]+=50000;
	              	case 22:OrgInfo[TEAM_LVPD][oMats]+=50000;
            		case 23:OrgInfo[TEAM_RADIOLV][oMats]+=50000;
					case 24:OrgInfo[TEAM_WOLFS][oMats]+=50000;
				    case 25:OrgInfo[TEAM_RADIOSF][oMats]+=50000;
				    case 26:OrgInfo[TEAM_ARMYSF][oMats]+=50000;
             	}
                for(new i = 1;i < 27;i ++)
                {
				    UpdateDorm(i);
				}
				SCM(playerid,COLOR_GREY, !"Вы успешно пополнили склад");
                SaveOrgs();
				global_str = "";
				for(new x = 1; x < MAX_ORGS; x++)
				{
					f(global_str, 500, "%s{FFFFFF}%s:\t{9ACD32}%d материалов\n",global_str, OrgInfo[x][oName], OrgInfo[x][oMats]);
				}
				SPD(playerid, 116, DIALOG_STYLE_LIST, !"Пополнение складов", global_str, !"Выбрать", !"Отмена");
			}
			else callcmd::apanel(playerid);
		}
		case 124:
		{
      		if(response)
		    {
				if(!CheckAdminCommand(playerid, "warn"))
					return false;

		        if(SERIU[playerid][sID]==-1)return SCM(playerid,COLOR_RED,!"ОШИБКА!");
			    if(!strlen(inputtextsave)) return SPD(playerid,124,1,"","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку причину.\n", !"Принять", !"Отмена");
			    f(global_str,sizeof(global_str),"%d %s",SERIU[playerid][sID],inputtextsave);
			    callcmd::warn(playerid, global_str);
		    }
		}
		case 125:
		{
		    if(response)
		    {
				if(!CheckAdminCommand(playerid, "ban"))
					return false;

	         	if(SERIU[playerid][sID]==-1) return SCM(playerid,COLOR_RED,!"ОШИБКА!");
		        if(!strlen(inputtextsave)) return SPD(playerid,125,1,"","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,Чит )\n\nМаксимум 30 символов!", !"Принять", !"Отмена");
		        new time;
				sscanf(inputtextsave,"p<,>ds[30]",time,global_str);
                f(global_str,256,"%d %d %s",SERIU[playerid][sID],time,global_str);

			    callcmd::ban(playerid, global_str);
		    }
		}
		case 126:
		{
			if(!CheckAdminCommand(playerid, "banip"))
					return false;

		    if(response)
		    {
		        if(SERIU[playerid][sID]==-1)return SCM(playerid,COLOR_RED,!"ОШИБКА!");
			    if(!strlen(inputtextsave)) return SPD(playerid,126,1,"Введите причину","{73B461}Внимание!\n\n{FFFFFF}Введите причину бана IP","Ок", !"Отмена");
			    f(global_str,sizeof(global_str),"%d %s",SERIU[playerid][sID],inputtextsave);
			    callcmd::banip(playerid, global_str);
		    }
		}
		case 129:
		{
		    if(response)
		    {
				if(!CheckAdminCommand(playerid, "jail"))
					return false;

		        if(SERIU[playerid][sID]==-1)return SCM(playerid,COLOR_RED,!"ОШИБКА!");
		        if(!strlen(inputtextsave)) return SPD(playerid,129,1,"","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,ДМ )\n\nМаксимум 30 символов!","Посадить", !"Отмена");
		        new time;
				sscanf(inputtextsave,"p<,>ds[30]",time,global_str);
                f(global_str,256,"%d %d %s",SERIU[playerid][sID],time,global_str);
			    callcmd::jail(playerid,global_str);
			}
		}
		case 137:
	    {
			if(response)
			{
				if(!CheckAdminCommand(playerid, "mute"))
					return false;

				if(SERIU[playerid][sID]==-1)return SCM(playerid,COLOR_RED, !"ОШИБКА!");
				if(!strlen(inputtextsave)) return SPD(playerid,137,1,"MUTE","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,Чит )\n\nМаксимум 30 символов!","Принять","Отмена");
				new time;
				sscanf(inputtextsave,"p<,>ds[30]",time,global_str);
				f(global_str,400,"%d %d %s",SERIU[playerid][sID],time,global_str);
				callcmd::mute(playerid,global_str);
			}
	    }
		case 131:
		{
		    if(!response) return 1;
	        if(HealOffer[playerid] != INVALID_PLAYER_ID)
	        {
	            new offer = HealOffer[playerid];
	            HealOffer[playerid] = INVALID_PLAYER_ID;
	            if(ProxDetectorS(5, playerid, offer, 1))
	            {
				    if(PI[playerid][pMoney] >= 400)
				    {
			        	UpdatePlayerHealth(playerid, 100);
			        	PI[playerid][pHospital] = 25;
			        	GiveMoney(playerid, -400);
			        	GiveMoney(offer, 200);
			        	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы вылечили %s за $400.", PN(playerid));
			        	SCM(offer, COLOR_VALIK, global_str);
			        	f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вас вылечил медик %s за $400", PN(offer));
			        	SCM(playerid, COLOR_VALIK, global_str);
		        	}
	        	}
	        }
		}
		case 659:
		{
			if(response)
			{
				InJob[playerid] = 1;
				PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
				if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 50);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 198);
				SCM(playerid,0x0c9ea8FF, !"Вы надели форму механика и заступили на смену.");
				dilo[playerid]=0;
				mehan[playerid]=2;
			}
		}
		case 660:
		{
			if(response)
			{
				InJob[playerid] = 0;
				SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
	 			f(global_str, 100,"[Подсказка] {FFFFFF}Вы завершили смену. Ваша зарплата: {42B02C}%d$.",ferman[playerid]*7000);
				SCM(playerid,0x0c9ea8FF,global_str);
				ferman[playerid]=0;
				dilo[playerid]=0;
				mehan[playerid]=0;
			}
		}
		case 661:
		{
			if(response)
			{
				InJob[playerid] = 1;
				PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
				if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 50);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 198);
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX,"{AFAFAF}Работа механика СТО","\
				{cc9349}Для начала работы вам нужно занять свободную платформу! Сделать это можно,\n\
				подойдя к одной из платформ и нажав клавишу 'H' после чего вы будете готовы\n\
				принимать клиентов и у вас появится возможность управлять воротами и платформой!\n\n\
				Для управления воторами и платформой, подойдите к панели управления и\n\
				используя клавиши:\n\n\
				\t{edb872}ALT - чтобы поднять\n\
				\tH - чтобы опустить.\n\
				\tДля остановки механизма отпустите клавишу.\n\n\
				{bd8aa9}Внимание! Соблюдайте меры безопасности!!\n\
				Обслуживать большие модели транспорта на платформе запрещено! Вы можете\n\
				сломать платформу, в таком случае вы будете оштрафованы!\n\n\
				Если размеры транспорта большие (более 3 метров в ширину или 7 метров в длину) вы\n\
				можете обслужить клиентов вне СТО, не заезжая на платформу.","Понял","");
				dilo[playerid]=0;
				mehan[playerid]=2;
			}
		}
		case 663:
		{
		    if(response)
	        {
	            InJob[playerid] = 1;
	            PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 171);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 11);
				SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы переоделись!");
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Используйте /help если вы впервые здесь!");
	        }
		}
		case 664:
		{
		    if(response)
	        {
	        	InJob[playerid] = 0;
	            SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
	            SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы переоделись. Напоминаем, что забрать зарплату нужно у специального места!");
	        }
		}
		case 665:
		{
		    if(response)
	        {
	            switch(listitem)
	            {
                    case 0: SPD(playerid, 668, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {acee4a}фишек{FFFFFF}, которое хотите приобрести.\n\tСтоимость 1-ой фишки: {acee4a}90 BTC\t ", !"Принять", !"Отмена");
					case 1: SPD(playerid, 669, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {acee4a}фишек{FFFFFF}, которое хотите продать.\n\tСтоимость продажи 1-ой фишки: {acee4a}85 BTC\t ", !"Принять", !"Отмена");
	            }
				return 1;
			}
		}
		case 668:
		{
            if(response)
	        {
                if(strval(inputtextsave) < 1)
					return SPD(playerid, 668, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {FBAD2F}фишек{FFFFFF}, которое хотите приобрести.\n\tСтоимость 1-ой фишки: {FBAD2F}90 BTC\t ", !"Принять", !"Отмена");

                if(GetCount(playerid, 1811) < strval(inputtextsave) * 90)
					return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно BTC. Вы можете обменять их в Центральном банке.");
					
				if(strval(inputtextsave) > 100000) return 1;
				
               	AddItem(playerid, 530, strval(inputtextsave));
                DeleteItem(playerid, 1811, strval(inputtextsave) * 90);
                f(global_str, sizeof(global_str), "{FFFFFF}Информация:\n\nВы успешно купили {acee4a}%d {FFFFFF}фишек для игры в казино.\nУ вас уже: {acee4a}%d{FFFFFF} фишек.", strval(inputtextsave), GetCount(playerid, 530));
                SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
			}
		}
		case 669:
		{
			if(response)
			{
                if(strval(inputtextsave) < 1)
					return SPD(playerid, 669, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {FBAD2F}фишек{FFFFFF}, которое хотите продать.\n\tСтоимость продажи 1-ой фишки: {FBAD2F}85 BTC\t ", !"Принять", !"Отмена");

				if(GetCount(playerid, 530) < strval(inputtextsave))
					return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно фишек в инвентаре!");
					
                if(strval(inputtextsave) > 100000) return 1;
                
				DeleteItem(playerid, 530, strval(inputtextsave));
				AddItem(playerid, 1811, strval(inputtextsave) * 85);
				f(global_str, sizeof(global_str), "{FFFFFF}Информация:\n\nВы успешно продали {acee4a}%d {FFFFFF}фишек для игры в казино.\nВы получили {acee4a}%d BTC.", strval(inputtextsave), strval(inputtextsave) * 85);
                SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
			}
		}
	    case 7551:
	    {
	        if(!response) {
				return 1;
			}

            switch(listitem)
            {
                case 0:
                {
                    if(!TeamDuty{playerid})
					{
						if(GetSkinInfo(PI[playerid][pSkin][0]) != GetPlayerSkin(playerid))
							return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Вы не в своей одежде!", !"Закрыть", !"");				       

					    TeamDuty{playerid} = true;
					    f(global_str, sizeof(global_str), " %s переодевается в рабочую одежду.", PN(playerid));
						ProxDetector(25, playerid, global_str, COLOR_PURPLE);
						SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
						SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
						TogglePlayerControllable(playerid, true);
					}
					else
					{
					    TeamDuty{playerid} = false;
					    SetPlayerSkinEx(playerid, PI[playerid][pSkin][0]);
					    TogglePlayerControllable(playerid, true);
					    f(global_str, sizeof(global_str), " %s переодевается в гражданскую одежду.", PN(playerid));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
		         		SetPlayerColor(playerid, 0xFDFCFC15);
					    if(IsACop(playerid) || IsAArmy(playerid))
						{
						    UpdatePlayerArmour(playerid, 0);
						    PI[playerid][pShield] = 0.0;
							if(UsingShield{playerid}) RemovePlayerAttachedObject(playerid, 7);
						 	_ResetGun(playerid);
						}
					}
                }
                case 1:
                {
                    if(!IsACop(playerid) || !TeamDuty{playerid}) return 0;
                    if(PI[playerid][pRank] < 6)return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{A31919}\n\nДоступ к гардеробу S.W.A.T. имеют доступ только работники выше 6-го ранга!\n\n", !"Принять", !"");
                    if(GetPlayerSkin(playerid) == 285) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{A31919}\n\nВы и так уже одеты в форму S.W.A.T.\n\n", !"Принять", !"");
                    SetPlayerSkinEx(playerid, 285);

					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nВы успешно переоделись в форму S.W.A.T.\n\n", !"Принять", !"");
                }
            }
	    }
		case 581:
		{
		    if(!response) return 1;
		    new team = GetTeamID(playerid);
		    switch(listitem)
			{
				case 0:
				{
				    if(!TeamDuty{playerid}) SPD(playerid, 7551, DIALOG_STYLE_LIST, !"", !"- Переодется в {31853A}рабочую{FFFFFF} форму.", !"Принять", !"Отмена");
					else
					{
					    if(IsACop(playerid)) SPD(playerid, 7551, DIALOG_STYLE_LIST, !"", !"- Переодется в {31853A}свою{FFFFFF} одежду.\n- Переодется в {31853A}S.W.A.T.{FFFFFF} форму.", !"Принять", !"Отмена");
					    else SPD(playerid, 7551, DIALOG_STYLE_LIST, !"", !"- Переодется в {31853A}свою{FFFFFF} одежду.", !"Принять", !"Отмена");
					}
				}
				case 1:
				{
				    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не на службе!");
					if(!IsACop(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете пользоваться этим разделом!");
					//
					#include <textdraws/cataloges/mats>
					selectgun[playerid] = 0;
					PlayerTextDrawSetString(playerid, FillUp[playerid][0], IntToStr(OrgInfo[team][oMats]));
					for(new i; i < 18; i++) {
					if(i < 5) ShowPlayerTD(playerid, FillUp[playerid][i]);
					TextDrawShowForPlayer(playerid, GetGunTD[i]); }
					UpdateGetGunOrg(playerid);
					SelectTextDraw(playerid, 0xFF0000FF);
					SetPVarInt(playerid, "openGetGun", true);
				}
			}
		}
		case 746:
		{
			if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[44][3] = 
			{
				{2200.9934082031,-1977.1193847656,13.557600021362},
				{178.40989685059,1101.4073486328,16.449800491333},
				{398.82760620117,2529.3464355469,16.567499160767},
				{150.91070556641,-1812.6412353516,3.7416000366211},
				{-48.852401733398,26.721599578857,3.1171998977661},
				{1976.6340332031,-2029.4699707031,13.546899795532},
				{-2154.3662109375,-970.68151855469,32.023399353027},
				{2020.8898925781,1007.6807250977,10.820300102234},
				{-2466.212890625,2250.1025390625,4.8010001182556},
				{642.80242919922,-1357.0797119141,13.569000244141},
				{1126.9204101563,-1414.6187744141,13.58510017395},
				{-2517.0375976563,-17.665800094604,25.61720085144},
				{1756.9465332031,390.8323059082,20.040300369263},
				{-2049.5986328125,453.73150634766,35.171901702881},
				{2461.4653320313,2245.1494140625,10.820300102234},
				{-116.68399810791,-320.32391357422,1.4219000339508},
				{258.71200561523,1406.5225830078,10.512800216675},
				{-2192.0756835938,1000.9943847656,79.894401550293},
				{1234.3270263672,212.02520751953,19.153799057007},
				{2318.3989257813,528.98272705078,-0.61599999666214},
				{-318.67330932617,1048.234375,20.340299606323},
				{1451.5230712891,-2285.0314941406,13.546899795532},
				{-1409.1265869141,-298.16369628906,14.148400306702},
				{1672.6857910156,1447.67578125,10.787699699402},
				{-172.73480224609,2494.8181152344,23.262699127197},
				{1863.4688720703,-1382.6910400391,13.483269691467},
				{384.55261230469,-2031.7219238281,7.8358998298645},
				{2154.9140625,1493.4940185547,10.820300102234},
				{1961.9449462891,-2191.8337402344,13.546899795532},
				{-256.77661132813,-1362.8541259766,9.442099571228},
				{523.81097412109,848.26959228516,-42.918899536133},
				{2303.8288574219,-16.137100219727,26.484399795532},
				{-1988.2272949219,1039.0130615234,55.726600646973},
				{-255.14109802246,2603.1325683594,62.858200073242},
				{2356.55078125,-653.95642089844,128.05470275879},
				{1836.5142822266,-1443.0063476563,13.596199989319},
				{2537.9396972656,1115.6510009766,10.820300102234},
				{-1779.716796875,1208.8760986328,25.125},
				{407.53930664063,2507.9985351563,16.484399795532},
				{-2960.904296875,509.62649536133,-1.2704999446869},
				{1019.5399780273,226.57679748535,35.425300598145},
				{602.32177734375,-1572.896484375,16.15239906311},
				{-2285.7902832031,582.73828125,35.164100646973},
				{2394.6628417969,2062.5549316406,10.820300102234}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
	   	case 745:
	    {
		    if(response)
		    {
				switch(listitem)
				{
					case 0: EnableGPSForPlayer(playerid,1308.3258,379.0888,19.5625);
					case 1: EnableGPSForPlayer(playerid,1037.2845,-1028.2238,32.1016);
					case 2: EnableGPSForPlayer(playerid,1839.9128,-1442.9911,13.5607);
					case 3: EnableGPSForPlayer(playerid,1933.6646,-1862.0732,13.5619);
				}
		    }
			else callcmd::gps(playerid);
		}
		case 747:
	    {
		    if(!response) return callcmd::gps(playerid);
			new number;
			
			switch listitem do
			{
				case 1..23: number = listitem-1;
				default:
				{
					new Float:nowS, Float:minS, Float:pX, Float:pY, Float:pZ;
					GetPlayerPos(playerid, pX, pY, pZ);
					minS = PointToPoint(pX, pY, pZ, OtelInfo[0][otEnter_X], OtelInfo[0][otEnter_Y], OtelInfo[0][otEnter_Z]);
					
					for(new i; i < MAX_OTELS; i++) {
						nowS = PointToPoint(pX, pY, pZ, OtelInfo[i][otEnter_X], OtelInfo[i][otEnter_Y], OtelInfo[i][otEnter_Z]);
						if(nowS < minS)
						minS = nowS,
						number = i;
					}
				}
			}
			EnableGPSForPlayer(playerid, OtelInfo[number][otEnter_X], OtelInfo[number][otEnter_Y], OtelInfo[number][otEnter_Z]);
		}
		case 6446:
		{
			if(response)
			{
				if(pSportZal[playerid])
				{
					SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже переоделись");
					return 1;
				}
				pSportZal[playerid] = 1;
	   			PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
				if(PI[playerid][pSex]==1) SetPlayerSkinEx(playerid, 80);
				else SetPlayerSkinEx(playerid,192);
				SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Вы начали тренировку, бейте по грушам для прокачки своего навыка.");
				SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Используйте клавиши PKM+F для того чтобы бить грушу.");
			}
			else
			{
				if(pSportZal[playerid])
				{
					pSportZal[playerid] = 0;
					SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
					SCM(playerid, COLOR_LIGHTBLUE, "[Ошибка] {FFFFFF}Вы закончили тренировку!");
				}
				else SCM(playerid, COLOR_LIGHTBLUE, "[Ошибка] {FFFFFF}Вы не начинали тренировку!");
			}
		}
		case 749:
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: EnableGPSForPlayer(playerid,2193.1531,1676.9701,12.3672);
				    case 1: EnableGPSForPlayer(playerid,2021.8496,1007.7031,10.8203);
				    case 2: EnableGPSForPlayer(playerid,2235.3843,1285.6902,10.8203);
				    case 3: EnableGPSForPlayer(playerid,2087.3521,1450.7063,10.8203);
				    case 4: EnableGPSForPlayer(playerid,2331.9592,2162.7727,10.8260);
				    case 5: EnableGPSForPlayer(playerid,2637.4163,2349.4236,10.6719);
				}
			}
			else callcmd::gps(playerid);
		}
		case 748:
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: EnableGPSForPlayer(playerid,2088.9707,-1905.5059,13.5469);
					case 1: EnableGPSForPlayer(playerid,876.6775,-1567.1252,13.5391);
					case 2: EnableGPSForPlayer(playerid,2177.6282,961.0814,10.8203);
					case 3: EnableGPSForPlayer(playerid,-206.7107,1086.9602,19.7422);
				}
			}
		}
		case 2545://////syda
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0:EnableGPSForPlayer(playerid,2166.9863,-1672.4226,15.0754);
				    case 1:EnableGPSForPlayer(playerid,2175.9934,-1503.9364,23.9520);
				    case 2:EnableGPSForPlayer(playerid,1814.4722,-1995.8588,13.5544);
				    case 3:EnableGPSForPlayer(playerid,2286.6912,-2012.8440,13.5447);
				    case 4:EnableGPSForPlayer(playerid,2333.4478,-1922.6251,12.2991);
				}
			}
			else callcmd::gps(playerid);
		}
		case 2544:
		{
			if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[11][3] =
			{
				{2186.734375,-1765.5979003906,13.046600341797},
				{2463.9794921875,-1661.3422851563,12.970000267029},
				{2796.646484375,-1599.3337402344,10.600799560547},
				{2000.4107666016,-1114.4927978516,26.450099945068},
				{2501.9011230469,-2010.0476074219,12.971300125122},
				{-2190.5993652344,-2349.5346679688,30.625},
				{-2463.4748535156,131.76249694824,35.171901702881},
				{1515.0059814453,2773.2885742188,10.345600128174},
				{941.92401123047,1731.5308837891,8.5204000473022},
				{2473.169921875,-1422.2637939453,28.839700698853},
				{544.56988525391,-587.86987304688,23.117399215698}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 2541:
		{
		    if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[3][3] =
			{
				{1789.5806884766,-1701.6502685547,13.289500236511},
				{-1740.2028808594,1090.9868164063,45.445301055908},
				{1977.3474121094,2040.6439208984,10.812999725342}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 705:
	    {
     		if(!response) return false;
			switch listitem do
			{
				case 0: SPD(playerid, 706, DIALOG_STYLE_LIST, "Важные места", "{FFC93E}[Реклама]{FFFFFF} Тут может быть ваша реклама!\n[LS] Мэрия\n[{7DF054}LS{FFFFFF}] Центр занятости/раздачи/благотворительности\n[{7DF054}SF{FFFFFF}] Центр занятости/раздачи/благотворительности\n[{7DF054}LV{FFFFFF}] Центр занятости/раздачи/благотворительности\n[LS] Больница\n[SF] Больница\n[SF] Автошкола\n[LS] Вокзал (Unity Station)\n[LS] Пирс\n[LS] Центральный банк\n[LS] Штрафстоянка (Забрать машину)\n[LS] Военкомат\n[LV] Военкомат\n[LS] Черный рынок\n{FFF66C}[LV] Спортивный зал{FFFFFF}\n[LV] Покупка колец\n[LV] Церковь\n[RC] Полицейский участок\n[LS] Лотерейный магазин\n{FFAB00}[SF] Пирс/Скупка нефти\n{73B461}Следующая страница:", "Выбор", "Отмена");
				case 1: SPD(playerid, 707, DIALOG_STYLE_LIST, "Трудоустройство", "[1] Найти близлежащую работу\n{FDB24A}[2] Фермерское предприятие (ФЕРМА)\n{FFFFFF}[3] Производственный цех (ЗАВОД)\n[4] Разгрузочная станция (ГРУЗЧИКИ)\n{FDB24A}[5] Развозчики пиццы LS\n{FDB24A}[6] Развозчики пиццы LV\n{90EE49}[7] Рыболов ( Подработка )\n{70B63A}[8] Железный порт ( Нужна лицензия на лодку )\n{70B63A}[9] Автозавод ( Работа для механиков )\n[10] Найти другую работу (ДРУГИЕ РАБОТЫ)\n", "Выбор", "Отмена");
				case 2: SPD(playerid, 708, DIALOG_STYLE_LIST, "По работе", "[LS] Мусоровозы\n[LV] Мусоровозы\n[LS] Металловозы\n[LV] Металловозы\n[LS] Дальнобойщики (Гандиллер)\n[LV] Дальнобойщики (Бензовозчики)\n{F0D331}[LS]{FFFFFF} Таксопарк\n{F0D331}[LV]{FFFFFF} Таксопарк\n[LS] Стоянка инкассаторов\n[LV] Стоянка инкассаторов\n[LS] Продуктовозы\n[LV] Продуктовозы\n[LS] Пристань для рыбалки\n[LS] Офис налоговой службы\n{73B461}Следующая страница:", "Выбор", "Отмена");
				case 3: SPD(playerid, 709, DIALOG_STYLE_LIST, "Транспорт", !"{8E908E}[LS] Автосалон Эконом класса\n{26B260}[LV] Автосалон Среднего класса\n{EDAD2E}[SF] Автосалон Премиум класса/мототранспорт\n{ffff00}[LV] Автосалон Luxe класса\n{DD564D}[LV] Авиарынок\n{D63227}[LS] Лодочная\nСалон трейлеров\n[LV] Авторынок поддельных авто", "Выбор", "Отмена");
				case 4:
				{
					global_str = "Номер\tНазвание\tКоличество звезд\t\n{FFFFFF}1.\tНайти ближайший отель\t{FFB03F}???{FFFFFF}\n";
					
					for(new idx; idx < MAX_OTELS;idx++)
					{
						switch OtelInfo[idx][otLevel] do
						{
							case 5: mysql_string = "{66FF3F}*****{FFFFFF}";
							case 4: mysql_string = "{FFB03F}****{FFFFFF}";
							case 3: mysql_string = "{FF433F}***{FFFFFF}";
						}
						
						f ( mysql_string, 150, "%d.\t%s\t%s\n", idx + 2, OtelInfo[idx][otName], mysql_string);
						strcat(global_str, mysql_string);
					}
					
					return SPD(playerid, 747, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Выбрать", !"Закрыть");
				}
				case 5: SPD(playerid, 746, DIALOG_STYLE_LIST, "Разное", "[LS] Свалка\n[LV] Свалка\n[LV] Старый аэродром\n[LS] Лодочная\n{DF8721}[LS] Склад фермы\n{DF8721}[LS] Склад разгрузочной станции\n{892626}[SF] Автобазар\n[LV] Казино 4 дракона\n[LV] Авторынок поддельных авто\n{3085D5}[LS] Концертный ЗАЛ{FFFFFF}\n{2F9928}[LS] Центральный рынок\n{2F9928}[SF] Рынок SF\n{2F9928}[LS] ЖК Аксиома {FFFFFF}( Семьи )\n{2F9928}[SF] ЖК Ультра {FFFFFF}( Семьи )\n{2F9928}[LV] ЖК Авантаж {FFFFFF}( Семьи ) {FF0000}( new )\n{FFFFFF}[LS] Загрузка патронов( Дальнобойщики )\n{FFFFFF}[LV] Загрузка топлива( Дальнобойщики )\n{CEE948}[SF] Аренда суперкаров\n{CEE948}[RC] Магазин велосипедов\n{FFFFFF}[LV] Лодочный рынок\n{FFFFFF}[LV] Психиатрическая больница\n{FFFFFF}[LS] Прыжки с парашютом\n{FFFFFF}[SF] Прыжки с парашютом\n{FFFFFF}[LV] Прыжки с парашютом\n{4CF24C}[LV] Военный поселок\n[LS] Аренда велосипедов\n[LS] Колесо обозрения\n[LV] Студия: 'Arizona SHOW'\n[LS] Аренда вертолётов\n[LS] Ферма [{A2F777}Добыча ресурсов{FFFFFF}]\n[LV] Шахта [{A2F777}Добыча ресурсов{FFFFFF}]\n[LS] Магазин ""Все для дома""\n[SF] Магазин ""Все для дома""\n[LV] Магазин ""Все для дома""\n[LS] Джозеф [{A2F777}Обмен тушек оленя{FFFFFF}]\n{A2F777}[LS]{FFFFFF} Магазин Автозапчастей\n{A2F777}[LV]{FFFFFF} Магазин Автозапчастей\n{A2F777}[SF]{FFFFFF} Магазин Автозапчастей\n{A2F777}[LV]{FFFFFF} Парковка самолётов (Без налога)\n{A2F777}[SF]{FFFFFF} Парковка лодок (Без налога)\n{A2F777}[LS]{FFFFFF} Тренировочный полигон\n{A2F777}[LS]{FFFFFF} Школа танцев\n{A2F777}[SF]{FFFFFF} Школа танцев\n{A2F777}[LV]{FFFFFF} Школа танцев", "Выбор", "Отмена");
				case 6: SPD(playerid, 2541, DIALOG_STYLE_LIST, "Автомастерские", "[LS] Автомастерская\n[SF] Автомастерская\n[LV] Автомастерская", "Выбор", "Отмена");
				case 7:
				{
					global_str = "Ферма\tКоличество заданий\tКоличество рабочих\tСредняя зарплата\n";
					
					for(new id; id < sizeof(FarmData); id++)
						format(global_str, 1024, "%sФерма №%d\t%d\t%d из 30\t-1$\n", global_str, id + 1, FarmData[id][farmJobCount], FarmData[id][farmJobPlayer]);
				
					strcat(global_str, "\t \t \t \n{31B404}Найти бизнес\t(аренда сельхоз. техники)\t \t \n{31B404}Найти водокачку\t(набор воды для ферм)\t \t \n{31B404}Найти дядю Сэма\t(городской барыга)\t \t ");
					return SPD(playerid, 15160, DIALOG_STYLE_TABLIST_HEADERS, !"GPS | Фермы", global_str, !"Выбрать", !"Назад");
				}
				
				case 8:
				{
					global_str = "{ffff00}Секонд-хенд\t{ffff00}Начало распродажи\t{ffff00}Количество одежды на распродаже\n";

					for(new i; i < sizeof(SecondHand); i++)
						format(global_str,  1024, "%sСеконд-хенд №%d\t{ffff00}%d:00\t%d ед. товара\n", global_str,  i + 1, SecondHand[i][secondTime], BizData[SecondHand[i][secondBID]][bProducts]);
					
					strcat(global_str, "\n \n{cccccc}Склад комиссионной одежды\t{cccccc}работает с 10:00\t{cccccc}до 11:00");

					return SPD(playerid, 15339, DIALOG_STYLE_TABLIST_HEADERS, "Секонд-хенды", global_str, !"Выбрать", !"Назад");
				}

				case 9: SPD(playerid, 2544, DIALOG_STYLE_LIST, "Положение организаций", "{6666FF}The Rifa\n{009327}Grove Street\n{D1DB1C}Los-Santos Vagos\n{cc00cc}East Side Ballas\n{00FFE2}Varios Los Aztecas\n{BA541D}Warlock MC\n{960202}Yakuza Mafia\n{993366}La Cosa Nostra\n{336699}Russian Mafia\n{A87878}Night Wolves\n{A87878}Яма Братства", "Выбор", "Отмена");
				case 10..17,20,22,23:
				{
					listitem -= 10;
					
				    new Float:pX, 
							Float:pY, 
								Float:pZ,
									Float:Item, Float:minS;
				    new biz;
					
					new 
						TypeBiz[14] = {6,6,2,9,7,3,8,0,-1,-1,13,-1,24,28},
							MinBiz[14] = {19,200,6,100,106,106,106,106,-1,-1,106,-1,210,253};
					
					static text_FIST[14][64] = {"ближайшей АЗС", "ближайшей АЗС на воде", "ближайшего магазина 24/7", "ближайшего магазина аксессуаров",
					"ближайшей закусочной","ближайшего магазина одежды","ближайшей аренды","ближайшего магазина оружия",
					"-1", "-1", "ближайшего ларька", "-1", "ближайшей мастерской одежды", "ближайшего магазина видеокарт"};
					
				    GetPlayerPos(playerid, pX, pY, pZ);
					
					minS = PointToPoint(pX, pY, pZ, BizData[MinBiz[listitem]][bEnter][0], BizData[MinBiz[listitem]][bEnter][1] ,BizData[MinBiz[listitem]][bEnter][2]);
					biz = MinBiz[listitem];
				    
					for(new i = MinBiz[listitem]; i < OWNABLEBIZES; i++)
					{
					    if(BizData[i][bState] == TypeBiz[listitem])
						{
						    Item = PointToPoint(pX, pY, pZ, BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2]);
							if(Item < minS)
								minS = Item,
									biz = i;
						}
					}
					SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Местоположение %s успешно отмечено в вашем GPS.", text_FIST[listitem]);
					EnableGPSForPlayer(playerid, BizData[biz][bEnter][0], BizData[biz][bEnter][1], BizData[biz][bEnter][2]);
					return false;
				}
				case 18:
				{
                    new Float:pX, Float:pY, Float:pZ;
					new Float:Item, Float:minS;
					new Posi;
					GetPlayerPos(playerid, pX, pY, pZ);
					for(new i = 0; i < sizeof(Bankomats); i++) minS = PointToPoint(pX, pY, pZ, Bankomats[i][0], Bankomats[i][1], Bankomats[i][2]);
					Posi = 56;
					for(new i = 0; i < sizeof(Bankomats); i++)
					{
						Item = PointToPoint(pX, pY, pZ, Bankomats[i][0], Bankomats[i][1], Bankomats[i][2]);
						if(Item < minS)
						{
						    minS = Item;
						    Posi = i;
						}
					}
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Местоположение ближайшего банкомата успешно отмечено в вашем GPS.");
					EnableGPSForPlayer(playerid, Bankomats[Posi][0], Bankomats[Posi][1], Bankomats[Posi][2]);
					return 1;
				}
				case 19:
				{
                    new Float:pX, Float:pY, Float:pZ;
					new Float:Item, Float:minS;
					new Posi;
					GetPlayerPos(playerid, pX, pY, pZ);
					for(new i = 0; i < sizeof(parking); i++) minS = PointToPoint(pX, pY, pZ, parking[i][pEnter_y], parking[i][pEnter_y], parking[i][pEnter_z]);
					Posi = 39;
					for(new i = 0; i < sizeof(parking); i++)
					{
						Item = PointToPoint(pX, pY, pZ, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z]);
						if(Item < minS)
						{
						    minS = Item;
						    Posi = i;
						}
					}
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Местоположение ближайшего паркинга успешно отмечено в вашем GPS.");
					EnableGPSForPlayer(playerid, parking[Posi][pEnter_x], parking[Posi][pEnter_y], parking[Posi][pEnter_z]);
					return 1;
				}
				case 21:
				{
				    new Float:pX, Float:pY, Float:pZ;
					new Float:Item, Float:minS;
					new Posi;
					GetPlayerPos(playerid, pX, pY, pZ);
					for(new i = 0; i < MAX_MUSORS; i++) minS = PointToPoint(pX, pY, pZ, MusorPos[i][0], MusorPos[i][1], MusorPos[i][2]);
					Posi = 39;
					for(new i = 0; i < MAX_MUSORS; i++)
					{
						Item = PointToPoint(pX, pY, pZ, MusorPos[i][0], MusorPos[i][1], MusorPos[i][2]);
						if(Item < minS)
						{
						    minS = Item;
						    Posi = i;
						}
					}
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Местоположение ближайшей мусорки успешно отмечено в вашем GPS.");
					EnableGPSForPlayer(playerid, MusorPos[Posi][0], MusorPos[Posi][1], MusorPos[Posi][2]);
				}
				case 24: return SPD(playerid, 7471, DIALOG_STYLE_LIST, "", "{FFFFFF}1. Собиратели (Ежедневное) [{ECA63C}20.15{FFFFFF} до {ECA63C}21.00{FFFFFF}]\n{FFFFFF}2. Захват корабля (Для мафий) [{ECA63C}09.00{FFFFFF} до {ECA63C}22.00{FFFFFF}]\n{ffcc66}3. Дерби {ffffff}(Ежедневное) [{ECA63C}18.15{FFFFFF} до {ECA63C}20.00{FFFFFF}]\n\n{ffcc66}4. Контейнеры {ffffff}(Ежедневное) [{ECA63C}12.00, 15.00, 19.00{FFFFFF}]\n{ffcc66}5. Заброшенные контейнеры {ffffff}(Ежедневное) [{ECA63C}11.00 - 22.00{FFFFFF}]\n{8E1414}6. Зловещий дворец {ffffff}(Для семей) [{ECA63C}20.00 - 20.15{FFFFFF}]", "Выбор", "Отмена");
				case 25: return EnableGPSForPlayer(playerid, 1420.4176, -1685.8624, 13.5469);
				case 26: return ShowHouseDialog(playerid, 2);
				case 27: return 1;
				case 28: return SPD(playerid, 7431, DIALOG_STYLE_LIST, "", "{FFFFFF}1. Джереми ({F8ED58}Обучение новичков{FFFFFF})\n2. Федерико ({F8ED58}Обучение новичков{FFFFFF})\n3. Майкл ({F89558}2-ой Квестовый персонаж{FFFFFF})\n4. Джон ({F89558}3-ий Квестовый персонаж{FFFFFF})\n5. Николай (Горячие вакансии)", "Принять", "Отмена");
				case 29: callcmd::oillist(playerid);
				case 30:
				{
					if(InJob[playerid]) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете отключать gps во время выполнения работы!");
                    return DisablePlayerRaceCheckpoint(playerid), DisablePlayerCheckpoint(playerid);
				}
			}

			return true;
	    }
	  	case 706:
	    {
		    if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[20][3] =
			{
				{1495.1422,-1287.5870,14.5099},
				{1289.0641,-1271.5160,13.5400},
				{-1492.1320800781,920.1572265625,7.1875961853},
				{1879.1920166016,2290.5412597656,10.979900360107},
				{1178.1593017578,-1323.1184082031,14.106300354004},
				{1178.1593017578,-1323.1184082031,14.106300354004},
				{-2027.4399414063,-73.713302612305,34.876800537109},
				{1755.9361572266,-1893.2239990234,13.556599617004},
				{369.86041259766,-2042.5201416016,7.6718997955322},
				{1481.0374755859,-1768.9549560547,18.792900085449},
				{1537.9470214844,-1015.9631958008,24.078100204468},
				{307.34271240234,-67.054496765137,1.4297000169754},
				{1168.6148681641,1364.8786621094,10.812569754},
				{2539.2019042969,-1461.4838867188,24.020700454712},
				{2095.5288085938,2493.2524414063,14.83899974823},
				{2520.1364746094,918.45281982422,11.023400306702},
				{2491.4992675781,918.45318603516,11.023400306702},
				{631.92181396484,-571.94848632813,16.335899353027},
				{1414.7395019531,-1701.5489501953,13.539500236511},
				{-2079.8149414063,1341.7283935547,7.1209001541138}
			};
	    	if(listitem == 21) return SPD(playerid, 766, DIALOG_STYLE_LIST, "Важные места", "{BCE951}[RC]{FFFFFF} Станция тех. обслуживания\n{BCE951}[LV]{FFFFFF} Cтанция тех. обслуживания\n[LV] Вокзал\n[LV] Больница\n[LV] Штрафстоянка (Забрать машину)\n[LV] Полицейский участок\n[LV] Радиостанция\n[LV] Банковское отделение\n[LV] Авиашкола\n[SF] Вокзал\n[SF] Полицейский участок\n[LS] Военная база\n[SF] Авианосец\n[LV] Тюрьма строгого режима\n[LS] Радиостанция\n[SF] Радиостанция\n[SF] Информационный центр\n[SF] Военкомат\n[SF] Штрафстоянка\n[LS] Полицейский участок\n[LS] Салон ""Сотовая связь""\n[SF] Банковское отделение\n[LS] Апартаменты ""SIGNATURE""\n[LS] Апартаменты ""LS TOWER""\n{73B461}Предыдущая страница", "Выбор", "Отмена");
			else if(!listitem) return false;
			listitem--;
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 766:
	    {
		    if(!response) return false;
			static const Float:GpsCoord[24][3] =
			{
				{191.10350036621,-240.41760253906,1.5780999660492},
				{-298.43121337891,1198.0184326172,19.74220085144},
				{2798.6843261719,1313.4533691406,10.75085144},
				{1641.8848876953,1833.5285644531,10.850799560547},
				{2474.7954101563,2513.2712402344,10.805600166321},
				{2286.8361816406,2427.5805664063,10.820300102234},
				{2615.0793457031,1172.7882080078,10.762399673462},
				{2375.5925292969,2308.5747070313,8.1406002044678},
				{2423.1008300781,1662.2064208984,10.820300102234},
				{-1994.0474853516,100.20559692383,27.539100646973},
				{-1629.0847167969,726.17401123047,14.130599975586},
				{2716.5886230469,-2404.9147949219,13.468700408936},
				{-1529.7744140625,484.69509887695,7.1796998977661},
				{-18.530500411987,2066.5546875,17.44529914856},
				{1627.8331298828,-1722.0529785156,13.53719997406},
				{-1941.4007568359,459.77709960938,35.171901702881},
				{-2240.7253417969,576.07562255859,35.171901702881},
				{-1517.865234375,810.97180175781,7.1875702881},
				{-1732.33203125,991.3623046875,17.589199066162},
				{1550.7995605469,-1675.6131591797,15.567500114441},
				{562.11181640625,-1506.6832275391,14.549300193787},
				{-1705.4897460938,788.49200439453,24.890600204468},
				{1791.9835205078,-1290.6491699219,13.577799797058},
				{283.56469726563,-1630.4208984375,33.320999145508}
			};
	    	if(listitem == 24) return SPD(playerid, 706, DIALOG_STYLE_LIST, "Важные места", "{FFC93E}[Реклама]{FFFFFF} Тут может быть ваша реклама!\n[LS] Мэрия\n[{7DF054}LS{FFFFFF}] Центр занятости/раздачи/благотворительности\n[{7DF054}SF{FFFFFF}] Центр занятости/раздачи/благотворительности\n[{7DF054}LV{FFFFFF}] Центр занятости/раздачи/благотворительности\n[LS] Больница\n[SF] Больница\n[SF] Автошкола\n[LS] Вокзал (Unity Station)\n[LS] Пирс\n[LS] Центральный банк\n[LS] Штрафстоянка (Забрать машину)\n[LS] Военкомат\n[LV] Военкомат\n[LS] Черный рынок\n{FFF66C}[LV] Спортивный зал{FFFFFF}\n[LV] Покупка колец\n[LV] Церковь\n[RC] Полицейский участок\n[LS] Лотерейный магазин\n{FFAB00}[SF] Пирс/Скупка нефти\n{73B461}Следующая страница:", "Выбор", "Отмена");
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 707:
	    {
		    if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[10][3] =
			{
				{-27.382999420166,163.9575958252,2.4367001056671},
				{-77.759696960449,90.219398498535,3.1171998977661},
				{-86.189300537109,-305.86080932617,1.4219000339508},
				{1970.6949462891,-1964.2099609375,13.574199676514},
				{667.287109375,-1578.3436279297,14.402600288391},
				{1735.5614013672,2209.4924316406,10.820300102234},
				{388.85879516602,-2072.7680664063,7.8358998298645},
				{2868.9406738281,-1969.8216552734,11.109399795532},
				{1621.3892822266,699.46148681641,12.502300262451},
				{1289.0640869141,-1271.5159912109,13.539999961853}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 708:
		{
			if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[14][3] =
			{
				{2234.3591308594,-2215.4282226563,13.546899795532},
				{2235.5808105469,2773.1962890625,10.686499595642},
				{2484.4130859375,-2541.2255859375,13.574600219727},
				{1070.3298339844,1944.0189208984,10.820300102234},
				{-235.2993927002,-242.94920349121,1.4219000339508},
				{292.42068481445,1410.4541015625,10.143199920654},
				{1107.1778564453,-1740.9813232422,13.398400306702},
				{2167.4365234375,983.27941894531,10.674799919128},
				{1390.4061279297,-1649.0325927734,13.373299598694},
				{2420.4074707031,2285.1882324219,10.820300102234},
				{925.67218017578,-1222.4194335938,16.977100372314},
				{1608.1821289063,2282.4753417969,10.826600074768},
				{369.89660644531,-2042.3088378906,7.6718997955322},
				{1530.5771484375,-1072.1591796875,25.06255322}
			};
			if(listitem == 14) return SPD(playerid, 2762, DIALOG_STYLE_LIST, "GPS Навигатор", "{F0D331}[SF]{FFFFFF} Таксопарк\n[SF] Стоянка автобусов\n[SF] Стоянка мусоровозов\n[SF] Свалка\n{95D753}[LS] Машины механиков\n[SF] Машины механиков\n[LV] Машины механиков\n[LV] Точка инкасации\n[LS] Точка инкасации\n[SF] Точка инкасации\n{ff0066}[LS] Пожарный департамент\n[SF] Пожарный департамент\n[LV] Пожарный департамент\n[LS] Аэропорт\n[SF] Аэропорт\n[LV] Аэропорт\n\n[LS] Стоянка автобусов\n[LV] Стоянка автобусов\n[SF] Трамвайное депо\n[LS] Депо электропоездов\n[LS] Частная ферма\n[LV] Дорожная служба\n{73B461}Предыдущая страница", "Выбор", "Отмена");
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
	 	case 2762:
		{
			if(!response) return false;
			static const Float:GpsCoord[22][3] =
			{
				{-2258.7890625,119.73709869385,34.991199493408},
				{-2198.7729492188,312.14538574219,34.990600585938},
				{-2487.1481933594,369.54339599609,35.121898651123},
				{-1940.5479736328,-1790.3243408203,31.744699478149},
				{1138.5881347656,-1677.6755371094,13.515899658203},
				{-2276.0144042969,181.44230651855,34.78210067749},
				{2134.5986328125,952.666015625,10.411800384521},
				{2439.884765625,2290.2590332031,10.820300102234},
				{1408.0529785156,-1779.716796875,13.546899795532},
				{-2654.1101074219,376.02578735352,4.3334999084473},
				{1728.6527099609,-1478.8383789063,13.466199874878},
				{-2014.4799804688,62.822101593018,29.572799682617},
				{1764.3156738281,2060.9450683594,10.976599693298},
				{1685.0552978516,-2329.7712402344,13.546899795532},
				{-1424.8017578125,-290.17581176758,14.148400306702},
				{1666.9685058594,1421.6363525391,10.787599563599},
				{1244.8747558594,-1831.4915771484,13.39879989624},
				{2789.111328125,1281.4741210938,10.75},
				{-2276.0407714844,535.40997314453,35.109798431396},
				{1743.0686035156,-1943.5728759766,13.569800376892},
				{-301.26361083984,-1364.2897949219,8.5731000900269},
				{1905.5573730469,625.43188476563,10.820300102234}
			};
			if(listitem == 22) return SPD(playerid, 708, DIALOG_STYLE_LIST, "По работе", "[LS] Мусоровозы\n[LV] Мусоровозы\n[LS] Металловозы\n[LV] Металловозы\n[LS] Дальнобойщики (Гандиллер)\n[LV] Дальнобойщики (Бензовозчики)\n{F0D331}[LS]{FFFFFF} Таксопарк\n{F0D331}[LV]{FFFFFF} Таксопарк\n[LS] Стоянка инкассаторов\n[LV] Стоянка инкассаторов\n[LS] Продуктовозы\n[LV] Продуктовозы\n[LS] Пристань для рыбалки\n[LS] Офис налоговой службы\n{73B461}Следующая страница:", "Выбор", "Отмена");
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 709:
	    {
			if(!response) return callcmd::gps(playerid);
			static const Float:GpsCoord[7][3] =
			{
				{-489.66760253906,-567.69702148438,23.939500808716},
				{948.33697509766,2183.1630859375,10.413599967957},
				{-2665.6896972656,-59.878799438477,3.9226999282837},
				{-505.0264,2592.9126,53.4399},
				{278.16738891602,2527.0061035156,16.799900054932},
				{212.73330688477,-1884.9226074219,1.4046000242233},
				{-2071.7485351563,-2445.7189941406,30.625}
			};
			EnableGPSForPlayer(playerid, GpsCoord[listitem][0], GpsCoord[listitem][1], GpsCoord[listitem][2]);
		}
		case 8743:
		{
			if(!response)
				return 1;

			switch listitem do
			{
			    case 0: SPD(playerid, 8745, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"Шумахер\" за $850000?\n\n{cccccc}Имея это умение, Ваша машина не будет глохнуть при столкновении.", !"Купить", !"Отмена");
			    case 1: SPD(playerid, 8746, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"Халявщик\" за $100000?\n\n{cccccc}Ваш персонаж становится везунчиком и платит налоги на дом, и на машину в 2 раза меньше.", !"Купить", !"Отмена");
			    case 2: SPD(playerid, 8747, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"Бизнесмен\" за 2000 az-coins?\n\n{cccccc}Вы сможете владеть 5-ю бизнесами.", !"Купить", !"Отмена");
                case 3: SPD(playerid, 8748, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"Планшет\" за $2000000?\n\n{cccccc}Вы сможете отправлять объявления на редакцию, с любой точки карты.", !"Купить", !"Отмена");
		     	case 4: callcmd::donate(playerid);
			    case 5: SPD(playerid, 8749, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"Больше недвижимости\" за 2000 AZ-коинов?\n\n{cccccc}Вы сможете владеть 4 домами.", !"Купить", !"Отмена");
			    case 6: SPD(playerid, 8750, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"Нет налогам\" за 1500 az-coins?\n\n{cccccc}Вам не придется платить комиссию в банке и банкоматах.", !"Купить", !"Отмена");
			    case 7: SPD(playerid, 8751, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"Семь бизнесов\" за 25000.0 BTC (Bitcoin)?\n\n{cccccc}Вы сможете владеть 7-ю бизнесами.", !"Купить", !"Отмена");
				case 8: SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nВы сможете получать на 15 процентов больше денег с депозита.\n\n{cccccc}Приобрести семейный сертификат можно только у сотрудников страховой компании!\n\n", !"Ок", !"");
				case 9: SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nС помощью него вы сможете получать каждый PayDay по 10000$ (только если вы в браке).\n\n{cccccc}Приобрести семейный сертификат можно только у сотрудников страховой компании!\n\n", !"Ок", !"");
				case 10: SPD(playerid, 8752, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"Выгодная расрочка\" за 400.000.000$?\n\n{cccccc}Имея это улучшение, каждый PayDay вы будете получать 10 AZ-монет.", !"Купить", !"Отмена");
				case 11: SPD(playerid, 8753, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"2 складских помещений\" за 10000.0 BTC (Bitcoin)?\n\n{cccccc}Имея это улучшение, вы сможете владеть 2-мя складскими помещениями.", !"Купить", !"Отмена");
				case 12: SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Помощь", !"\n\n{1874cd}Шумахер {FFFFFF}- Имея это умение, Ваша машина не будет глохнуть при столкновении.\n{1874cd}Халявщик {FFFFFF}- Ваш персонаж становится везунчиком и платит налоги на дом, и на машину в 2 раза меньше.\n{1874cd}Бизнесмен {FFFFFF}- Вы сможете владеть 5-ю бизнесами.\n{1874cd}Больше недвижимости {FFFFFF}- Вы сможете владеть 4 домами.\n{1874cd}Планшет {FFFFFF}- Вы сможете отправлять объявления на редакцию, с любой точки карты.\n{1874cd}Вечный Car Skill {FFFFFF}- Ваш навык вождения, не будет уменьшаться!\n{1874cd}Нет налогам {FFFFFF}- Вам не придется платить комиссию в банке и банкоматах!\n{1874cd}Семь бизнесов {FFFFFF}- Вы сможете владеть 7-ю бизнесами.\n{1874cd}Семейный сертификат {FFFFFF}- Вы сможете получать каждый PayDay по 10000$ (только если вы в браке).\n{1874cd}Пенсионное страхование {FFFFFF}- Вы сможете получать на 15 процентов больше денег с депозита.\n{1874cd}Выгодная рассрочка {FFFFFF}- Вы сможете получать по 10 AZ-монет каждый PayDay.\n{1874cd}2 Складских помещения {FFFFFF}- Вы сможете владеть 2-мя складскими помещениями.\n\n", !"Принять", !"");
			}
		}

		case 8745: {
		    if(!response)
		        return 1;

            if(ImprovementsData[playerid][idSchumacher])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

   			else
      		{
				if(PI[playerid][pMoney] < 85000)
					return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

    			if(PI[playerid][pLevel] < 3)
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"Улучшение можно приобрести с 3 лвл.", !"Ок", !"");

				SetImprovementsData(playerid, idSchumacher, !ImprovementsData[playerid][idSchumacher]);

				GiveMoney(playerid, -85000);

            	ShowImproveSettings(playerid);
    		}
		}

		case 8746: {
		    if(!response)
		        return 1;

			if(ImprovementsData[playerid][imFreeloader])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация","{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

   			else
			{
   				if(PI[playerid][pMoney] < 100000)
					return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

				if(PI[playerid][pLevel] < 4)
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"Улучшение можно приобрести с 4 лвл.", !"Ок", !"");

				SetImprovementsData(playerid, imFreeloader, !ImprovementsData[playerid][imFreeloader]);

				GiveMoney(playerid, -100000);

				ShowImproveSettings(playerid);
			}

		}

		case 8747: {
		    if(!response)
		        return 1;

            if(ImprovementsData[playerid][idBusinessman])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

			else
			{
				if(PI[playerid][pVirMoney] < 2000)
					return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно AZ-Coins. Вы можете пополнить свой баланс [/donate]");


				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nПоздравляем с покупкой улучшения, теперь вы можете\nбыть владельцем 5-ти бизнесов.\n\n", !"Принять", !"");

				f(global_str, sizeof(global_str), "<<< Игрок {FF6347}%s(%d){FFFFFF} купил улучшение {FF6347}'Бизнесмен'{FFFFFF}, теперь он может владеть 5-ми бизнесами.", PN(playerid), playerid);
				SCMALL(COLOR_WHITE, global_str);

				SetImprovementsData(playerid, idBusinessman, !ImprovementsData[playerid][idBusinessman]);

				GiveDonate(playerid, -2000);

				ShowImproveSettings(playerid);

			}
		}

		case 8748: {
		    if(!response)
		        return 1;

        	if(ImprovementsData[playerid][idTablet])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

			else
			{
				if(PI[playerid][pMoney] < 2000000)
					return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

				SetImprovementsData(playerid, idTablet, !ImprovementsData[playerid][idTablet]);

				GiveMoney(playerid, -2000000);

				ShowImproveSettings(playerid);
       		}
		}

		case 8749: {
		    if(!response)
		        return 1;

            if(ImprovementsData[playerid][idMoreHouses])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

			else
			{
				if(PI[playerid][pVirMoney] < 2000)
					return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно AZ-Coins. Вы можете пополнить свой баланс [/donate]");


				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nПоздравляем с покупкой улучшения, теперь вы можете\nбыть владельцем 3-х домов.\n\n", !"Принять", !"");

				f(global_str, sizeof(global_str), "<<< Игрок {FF6347}%s(%d){FFFFFF} купил улучшение {FF6347}'Больше недвижимости'{FFFFFF}, теперь он может владеть 3-я домами.", PN(playerid), playerid);
				SCMALL(COLOR_WHITE, global_str);

                SetImprovementsData(playerid, idMoreHouses, !ImprovementsData[playerid][idMoreHouses]);

				GiveDonate(playerid, -2000);

				ShowImproveSettings(playerid);
			}
		}

		case 8750: {
		    if(!response)
		        return 1;

            if(ImprovementsData[playerid][idNoTaxes])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

			else
			{
				if(PI[playerid][pVirMoney] < 1500)
					return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно AZ-Coins. Вы можете пополнить свой баланс [/donate]");

                SetImprovementsData(playerid, idNoTaxes, !ImprovementsData[playerid][idNoTaxes]);

				GiveDonate(playerid, -1500);

				ShowImproveSettings(playerid);
			}
		}

  		case 8751: {
		    if(!response)
		        return 1;

            if(ImprovementsData[playerid][idSevenBusinesses])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

			else
			{
			    if(GetCount(playerid, 1811) < 25000)
					return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно BTC (Bitcoin)!");

				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nПоздравляем с покупкой улучшения, теперь вы можете\nбыть владельцем 7-ти бизнесов.\n\n", !"Принять", !"");

				f(global_str, sizeof(global_str), "<<< Игрок {FF6347}%s(%d){FFFFFF} купил улучшение {FF6347}'Семь бизнесов'{FFFFFF}, теперь он может владеть 7-и бизнесами.", PN(playerid), playerid);
				SCMALL(COLOR_WHITE, global_str);

				SetImprovementsData(playerid, idSevenBusinesses, !ImprovementsData[playerid][idSevenBusinesses]);

				DeleteItem(playerid, 1811, 25000);

				ShowImproveSettings(playerid);

			}
		}
		
		case 8752: {
			if(!response)
			    return 1;
			    
			if(ImprovementsData[playerid][idInstallment])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

			else
			{
			    if(PI[playerid][pMoney] < 400000000)
					return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nПоздравляем с покупкой улучшения, теперь вы можете\nполучать дополнительных 10 AZ-Coins.\n\n", !"Принять", !"");

				SetImprovementsData(playerid, idInstallment, !ImprovementsData[playerid][idInstallment]);

				GiveMoney(playerid, -400000000);

				ShowImproveSettings(playerid);
			}
		}
		
		case 8753: {
			if(!response)
			    return 1;

			if(ImprovementsData[playerid][idStorageRoom])
				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}\n\nУ вас уже есть это улучшение!\n\n", !"Ок", !"");

			else
			{
			    if(GetCount(playerid, 1811) < 10000)
					return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно BTC (Bitcoin)!");

				SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\nПоздравляем с покупкой улучшения, теперь вы можете\nвладеть 2-мя складскими помещениями.\n\n", !"Принять", !"");
				
				f(global_str, sizeof(global_str), "<<< Игрок {FF6347}%s(%d){FFFFFF} купил улучшение {FF6347}'2 Складских помещения'{FFFFFF}, теперь он может владеть 2-мя складскими помещениями.", PN(playerid), playerid);
				SCMALL(COLOR_WHITE, global_str);

				SetImprovementsData(playerid, idStorageRoom, !ImprovementsData[playerid][idStorageRoom]);

				DeleteItem(playerid, 1811, 10000);

				ShowImproveSettings(playerid);
			}
		}

		case 800:
		{
			if(response)
			{
				switch(listitem)
				{
				    case 0: SetPhoneImprovementsData(playerid, pdAnnouncements, !PhoneImprovementsData[playerid][pdAnnouncements]);
				    case 1: SetPhoneImprovementsData(playerid, pdWalkieTalkie, !PhoneImprovementsData[playerid][pdWalkieTalkie]);
				    case 2: SetPhoneImprovementsData(playerid, pdDepartment, !PhoneImprovementsData[playerid][pdDepartment]);
				    case 3: SetPhoneImprovementsData(playerid, pdAdminAction, !PhoneImprovementsData[playerid][pdAdminAction]);
                    case 4:
				    {
                        if(PI[playerid][pMember]!=TEAM_LSPD && PI[playerid][pMember]!=TEAM_RCPD && PI[playerid][pMember]!=TEAM_LVPD && PI[playerid][pMember]!=TEAM_FBI && PI[playerid][pMember]!=TEAM_SFPD)
							return SCM(playerid,COLOR_RED,!"[Ошибка]{FFFFFF} Эта возможность доступна только полицейским!");

						SetPhoneImprovementsData(playerid, pdReportsDeath, !PhoneImprovementsData[playerid][pdReportsDeath]);
				    }
                    case 5:
				    {
						if(PI[playerid][pVIP][0] < 5)
							return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Эта функция доступна только для владельцев Titan VIP и выше!");

						SetPhoneImprovementsData(playerid, pdVIPChat, !PhoneImprovementsData[playerid][pdVIPChat]);
				    }
                    case 6: SetPhoneImprovementsData(playerid, pdFamilyChat, !PhoneImprovementsData[playerid][pdFamilyChat]);
				    case 7: SetPhoneImprovementsData(playerid, pdSpawnCarMessage, !PhoneImprovementsData[playerid][pdSpawnCarMessage]);
				}
				ShowPhoneUpdateSettings(playerid);
			}
		}
		//
		case 7372:
		{
			if(!response) return AcceptTrade(playerid, false);

			new target = GetDataTrade(playerid, tradePlayer);

			if(IsPlayerConnected(target))
				ShowTrade(target, playerid, 0.0, 0.0), ShowTrade(playerid, target, 0.0, 0.0);
			
			return AcceptTrade(playerid, true);
		}
	    case 722:
	    {
     		if(!response) return 1;
			switch(listitem)
			{
				case 0: SPD(playerid, SHOWACTION, 2, !"Выберите действие", !"{B03131}[1]{FFFFFF} Моя статистика\n{B03131}[2]{FFFFFF} Меню автомобиля\n{B03131}[3]{FFFFFF} Меню дома\n{B03131}[4]{FFFFFF} Меню бизнеса\n{B03131}[5]{FFFFFF} Меню лидера\n{B03131}[6]{FFFFFF} Улучшения\n{B03131}[7]{FFFFFF} Мои лицензии\n{B03131}[8]{FFFFFF} Мой паспорт\n{B03131}[9]{FFFFFF} Квесты\n{B03131}[10]{FFFFFF} Татуировки\n{B03131}[11]{FFFFFF} Меню семьи\n{B03131}[12]{FFFFFF} Сменить Non-RP Nick", !"Выбор", !"Отмена");
				case 1: SPD(playerid, SHOWSKILLS, 2, !"Навыки", !"{B03131}[1]{FFFFFF} Скиллы\n{B03131}[2]{FFFFFF} Стили боя\n{B03131}[3]{FFFFFF} Навык фермера", !"Выбор", !"Отмена");
				case 2: callcmd::report(playerid);
				case 3: callcmd::help(playerid);
				case 4: ShowUpdateSettings(playerid);
				case 5: ShowDonate(playerid);
				case 6: callcmd::phone(playerid);
				case 7: mysql_tquery(mysql, (str_f("SELECT * FROM `nickname_history` WHERE `nh_owner` = '%d'", PI[playerid][pID])), "CheckHistoryName", "d", playerid);
				case 8: mysql_tquery(mysql, (str_f("SELECT %s, msg FROM history WHERE Name = '%s' ORDER BY Date DESC LIMIT 10;", "DATE_FORMAT(`Date`, '[%Y-%m-%d %H:%i:%S]')", PlayerName[playerid])), "show_ANL", "d", playerid);
				case 9:
				{
					new a;
					foreach(Player, i)
					{
						if(PI[i][pVIP][0] == 6)
						{
							a++;
							f(global_str,50,"%d. %s[%d]",a,PN(i),i);
							SCM(playerid, COLOR_GREY, global_str);
						}
					}
				}
                case 10:
				{
					SetString(global_str, GetPlayerUsePromo(playerid));
					
					if(!isnull(global_str)) 
						return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже активировали промокод");
					
					return SPD(playerid, 9469, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите {E9FB4B}промо-код{FFFFFF} пригласившего вас человека!", !"Ввод", !"Назад");
				}
				case 11: SPD(playerid, 26820, DIALOG_STYLE_LIST, "{BFBBBA}Управление VIP статусом", "{ff6666}[1] {ffffff}Посмотреть информацию о текущем VIP статусе\n{ff6666}[2] {ffffff}Посмотреть открытые привилегии Premium VIP статуса", "Выбрать", "Отмена");
			}
			return 1;
	    }
	    case 655:
	    {
	        if(response)
            {
		        if(GetCount(playerid, 530) < strval(inputtextsave))return SPD(playerid,0,0,"Информация!","{B03131}У вас недостаточно фишек!", !"Принять","");
		        if(strval(inputtextsave) < MIN_Bet || strval(inputtextsave) > MAX_Bet)
		        {
		            f(global_str,sizeof(global_str),"{B03131}Вы не можете пополнить игровой автомат таким количеством фишек!\n{FFFFFF}Максимум: %d",MAX_Bet);
		            SPD(playerid,0,0,"Информация!",global_str, !"Принять","");
					return 0;
		        }
    			PutPlayerInSlotMachine(playerid,_,strval(inputtextsave));
		    }
	    }
	    case 1222:
	    {
	        if(response)
	        {
	            new hour,minuite,second;
			    gettime(hour,minuite,second);
			    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
				{
			 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
			 		return 1;
				}
	            if(NumInc_CP[playerid]!=-1)
				{
				    TogglePlayerDynamicCP(playerid, PizzCP[NumInc_CP[playerid]][0], false);
	    			TogglePlayerDynamicCP(playerid, PizzCP[NumInc_CP[playerid]][1], false);
				}
	            SCM(playerid,0xFF9900FF,"[Информация] {FFFFFF}Возьмите пиццу и садитесь на мопед.");
	            PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	            InJob[playerid] = 2;
	            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 155);
				if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 152);
				if(IsPlayerAttachedSlotUsedEx(playerid, 7))RemovePlayerAttachedObject(playerid,7);
				ResetDynamicCPs(playerid);
				DisableAllRaceCPs(playerid);
			}
	    }
	    case 1223:
	    {
	        if(response)
	        {
				if(NumInc_CP[playerid]!=-1)
				{
				    TogglePlayerDynamicCP(playerid, PizzCP[NumInc_CP[playerid]][0], false);
	    			TogglePlayerDynamicCP(playerid, PizzCP[NumInc_CP[playerid]][1], false);
				}

	            InJob[playerid] = 0;
	          	SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);

                if(IsPlayerAttachedSlotUsedEx(playerid, 7))
					RemovePlayerAttachedObject(playerid,7);
	        }
	    }
		case 666:
	    {
	        if(response)
	        {
	            new hour,minuite,second;
			    gettime(hour,minuite,second);
			    if(IsAtFrakcia(playerid, 1) && (hour > 10 && hour < 20 ))
				{
			 		SCM(playerid,COLOR_GREY, !"Гос. организации могут работать после 20.00 до 10.00!");
			 		return 1;
				}
	            SCM(playerid,0xFF9900FF,"[Информация] {FFFFFF}Отправляйтесь к разгрузке вагонов");
	            PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	            InJob[playerid] = 1;
	            SetPlayerSkinEx(playerid, 50);
			}
	    }
	    case 667:
	    {
	        if(response)
	        {
	            InJob[playerid] = 0;
	            SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
				f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы завершили работу и заработали {73B461}$%d",ferman[playerid] * GLS[6]);
				SCM(playerid,COLOR_VALIK,global_str);
 				GiveMoney(playerid, (ferman[playerid] * GLS[6]));
	            TogglePlayerDynamicCP(playerid, PorterDownCP, false);
	            ferman[playerid]=0;
	        }
	    }
		case 142:
		{
		    if(response) return SPD(playerid,0,0,"Ошибочка","{FFFFFF}Данная функция временно не доступна", !"Закрыть","");
			else ShowUpdateSettings(playerid);
		}
		case 143:
		{
		    if(response)
		    {
		        if(GetString(OrgInfo[listitem+1][oLeader],"Свободна"))
		        {
		            f(global_str, sizeof(global_str), "UPDATE `accounts` SET `Leader` = '%d',`Member` = '0',`Rank` = '13' WHERE `NickName` = '%s'", listitem+1,MLName[playerid]);
					mysql_tquery(mysql, global_str);
		            SetString(OrgInfo[listitem+1][oLeader],MLName[playerid]);
		            f(global_str,sizeof(global_str),"Вы назначили игрока %s лидером организации '%s'",MLName[playerid],OrgInfo[listitem+1][oName]);
		            SCM(playerid,COLOR_WHITE,global_str);
		            SaveOrg(listitem+1);
		        }
          		else
		        {
		            if(!GetString(MLName[playerid], OrgInfo[listitem+1][oLeader]))
		            {
						f(global_str,sizeof(global_str),"{FFFFFF}\
						Ошибка! У этой организации уже есть лидер!\n\
						Текущий лидер: {B83434}%s{FFFFFF}\n\
						Хотите его снять с лидерства и назначить лидером %s",OrgInfo[listitem+1][oLeader],MLName[playerid]);
						SPD(playerid,144,0,"Снять",global_str,"Да", !"Отмена");
						MLeader[playerid] = listitem+1;
					}
					else SCM(playerid, COLOR_GREY, !"Этот человек уже лидер этой организации");
		        }
		    }
		    return 1;
		}
		case 144:
		{
		    if(response)
		    {
		        new leader = MLeader[playerid];
		        new unleader;
		        foreach(new i: Player)
		        {
	            	if(GetString(PN(i), OrgInfo[leader][oLeader]) && PI[i][pMember][1] == leader)
	            	{
	            
						UnInvite(i);
					    SCMF(i, COLOR_WHITE, " Администратор %s выгнал вас из организации", PN(playerid));

					    f(global_str, sizeof(global_str), " Администратор %s выгнал игрока %s из должности лидерства", PN(playerid), PN(i));
					    SendAdminsMessage(COLOR_WHITE, global_str);

					   	PlayerSpawn(i);
					   	unleader = 1;
					   	break;
	                }
	            }
		        if(!unleader)
		        {
		            f(global_str, sizeof(global_str), "UPDATE `accounts` SET `Leader` = '0', `Member` = '0', `Rank` = '0', `Skin` = '79' WHERE `NickName` = '%s'", OrgInfo[leader][oLeader]);
					mysql_tquery(mysql, global_str);
		        }
		        SetString(OrgInfo[leader][oLeader], MLName[playerid]);
		        f(global_str, sizeof(global_str), "UPDATE `accounts` SET `Leader` = '%d', `Member` = '0', `Rank` = '13', `Job` = '0' WHERE `NickName` = '%s'", listitem + 1, listitem + 1, OrgInfo[leader][oLeader]);
				mysql_tquery(mysql, global_str);
		        f(global_str, sizeof(global_str), "Вы назначили игрока %s лидером организации '%s'", MLName[playerid], OrgInfo[leader][oName]);
		        SCM(playerid, COLOR_WHITE, global_str);
		        SaveOrg(leader);
		    }
		    return 1;
		}
		case 146:
		{
		    if(response)
		    {
		        if(LiveOfferID[playerid] != INVALID_PLAYER_ID)
		        {
					new id = LiveOfferID[playerid];
					new carid = GetPlayerVehicleID(id);
					if(IsANewsCar(carid))
					{
					    if(IsPlayerInVehicle(playerid, carid))
					    {
							if(LiveOffer[id] == INVALID_PLAYER_ID)
							{
							    LiveOffer[playerid] = id;
							    LiveOffer[id] = playerid;
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s начал беседу с вами",PN(playerid));
							    SCM(id,COLOR_VALIK,global_str);
							    SCM(id,COLOR_VALIK, !"[Информация] {FFFFFF}Введите /endlive чтобы её завершить");
							    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы начали беседу с %s",PN(id));
							    SCM(playerid,COLOR_VALIK,global_str);
							}
						}
					}
		        }
		    }
		}
		case 147:
		{
		    if(response)
		    {
          		PassRegSex[playerid] = listitem + 1;
          		SPD(playerid, 148, 1, "Дата рождения", "{FFFFFF}Введите дату вашего рождения\n{E64444}Пример: 2/5/1992\n\n\n", "Выбор", !"Отмена");
		    }
		}
		case 148:
		{
		    if(response)
	        {
	            new day,month,year,day2,month2,year2;
		        getdate(year, month, day);
                if(sscanf(inputtextsave, "p</>iii", day2, month2, year2))
	            {
	                return SPD(playerid, 148, 1, "Дата рождения", "{FFFFFF}Введите дату вашего рождения\n{E64444}Пример: 2/5/1992\n\n\n", "Выбор", !"Отмена");
	            }
	            new check = year - year2;
				if( check > 50 || check < 1 || day2 > GetMonthDays(year2, month2) || day2 < 1 || month2 > 12 || month2 < 1 )
				{
				    return SPD(playerid, 148, 1, "Дата рождения", "{FFFFFF}Введите дату вашего рождения\n{E64444}Пример: 2/5/1992\n\n\n", "Выбор", !"Отмена");
				}
				if(check<18)return SPD(playerid, 148, 1, "Дата рождения", "{FFFFFF}Введите дату вашего рождения\n{E64444}Пример: 2/5/1992\n{FFFFFF}Вы должны быть старше 18 лет!\n\n", "Выбор", !"Отмена");
				if(month2 > month || (month2 == month && day2 > day) ) check --;
                PI[playerid][pSex] = PassRegSex[playerid];
				new city = GetPlayerVirtualWorld(playerid) + 1;
				if(city < 1) city = 1;
				else if(city > 3) city = 3;
		        PassInfo[playerid][psDateBirth][0] = day2;
		        PassInfo[playerid][psDateBirth][1] = month2;
		        PassInfo[playerid][psDateBirth][2] = year2;
		        PassInfo[playerid][psDate][0] = day;
		        PassInfo[playerid][psDate][1] = month;
		        PassInfo[playerid][psDate][2] = year;
				PassInfo[playerid][psNumber] = 100000 + random(900000);
				PassInfo[playerid][psSeria] = 1000 + random(9000);
				OnRegPass(playerid);
				SendBotMessage(playerid,"Работник мэрии:\n{FFFFFF}Вот, держите. Вы, кстати на фотографии хорошо получились.\nИспользуйте /showpass чтобы показать паспорт!");
	        }
		}
		case 149:
	    {
	        if(response)
	        {
	            if(!InJob[playerid])
			    {
	            	PI[playerid][pOldSkin] = GetPlayerSkin(playerid);
	           	 	InJob[playerid] = 1;
	            	if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 8);
					if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 141);
	            	SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Сядьте в один из инкассаторских грузовиков. Используйте /gps - По работе чтобы найти стоянку грузовиков.");
	            }
	            else
	            {
	                InJob[playerid] = 0;
	                RemovePlayerAttachedObject(playerid, 7);
	            	SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
	            	TogglePlayerControllable(playerid,true);
	            	SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}Вы успешно завершили работу.");
	            	SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
	            	new rand = NumInc_CP[playerid];
					TogglePlayerDynamicCP(playerid, IncCP[rand][0], false);
					TogglePlayerDynamicCP(playerid, IncCP[rand][1], false);
					for(new i;i<4;i++) TogglePlayerDynamicCP(playerid, BankCP[i], false);
	            }
	        }
	    }
		case 8851:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: return SPD(playerid, 889, DIALOG_STYLE_INPUT, "{BFBBBA}", "{70FF86}- Смена E-mail\n\n{FFFFFF}Напишите свой новый эл.адрес ниже, после вы сможете\nвоспользоваться восстановлением пароля через сайт.\n", "Я уверен", "Не хочу");
					case 1: return SPD(playerid, 9669, DIALOG_STYLE_INPUT, "{BFBBBA}", "{70FF86}- Смена E-mail\n\n{FFFFFF}Так как у вас нет доступа к старому E-mail\nВашу заявку будет проверять один из администраторов!\n\n{FF7270}Напишите свой активный эл.адрес ниже. После\nэтого, администрация проверит вашу заявку. Будьте онлайн,\nчтобы вашу заявку обработали!", "Я уверен", "Не хочу");
				}
			}
		}
		case 25211:
		{
			if(!response)
				return false;

			switch listitem do
			{
				case 3:
				{
					return SPD(playerid, 25214, DIALOG_STYLE_MSGBOX, !"Информация", !"{FFFFFF}Когда игрок сворачивает игру, он находится в состоянии AFK, в этот момент над его\nперсонажем отображается текст, который отображает его статус и время как долго он отсутствует\n- отошел {73B461}( 00:00 ){FFFFFF}\n- Кушает {69B1E4}( 5:00+ ){FFFFFF}\n- Вышел на улицу {EC7878}( 50:00+ ){FFFFFF}\nВы можете изменить отображаемый текст на который пожелаете.\n{DD4A48}Если он будет не соответствовать правилам, администрация сервера может очистить\nваши настройки и наложить запрет на изменение!\n\n", !"Отмена", !"");
				}
			}
		}

	 	case 156:
	 	{
	 	    if(response)
	 	    {
	 	        new biz = ShowPBiz[playerid];
	 	        if(biz != -1)
	 	        {
				    switch BizData[biz][bState] do
					{
					    case B_GAS: global_str = "Изменить стоимость 1 литра бензина";
						case 7: global_str = "Изменить стоимость продуктов";
						case 10: global_str = "Изменить вход за въезд";
						case 24: global_str = "Изменить стоимость входа";
						case 23: global_str = "Изменить стоимость 1 литра";
					    default: global_str = "{B71B1B}Недоступно для вашего бизнеса{FFFFFF}";
				    }
				    if(IsAChange(biz))
					{
					    if(BizData[biz][bBuyCost] && BizData[biz][bNeedItem]) f(global_str, 500,"{9ACD32}Дополнительно\n%s\nСнять со счета\nПополнить баланс бизнеса\n{73B461}Отметить в gps{FFFFFF}\nПродать бизнес\nПродать бизнес игроку\n{CAD715}Скупать продукты у развозчиков\n{C85151}Отозвать заказ на скупку продуктов\n{CAD715}Изменить стоимость товаров",global_str);
					    else f(global_str, 500,"{9ACD32}Дополнительно\n%s\nСнять со счета\nПополнить баланс бизнеса\n{73B461}Отметить в gps{FFFFFF}\nПродать бизнес\nПродать бизнес игроку\n{CAD715}Скупать продукты у развозчиков\n{CAD715}Изменить стоимость товаров",global_str);
					}
				    else f(global_str, 500,"{9ACD32}Дополнительно\n{FF6347}%s\nСнять со счета\nПополнить баланс бизнеса\n{73B461}Отметить в gps{FFFFFF}\nПродать бизнес\nПродать бизнес игроку",global_str);

	 	        	SPD(playerid,157,2,"BizInfo",global_str,"Выбор", !"Отмена");
				}
			 }
			 else callcmd::bizinfo(playerid);
		}
		case 157:
	 	{
	 	    if(response)
	 	    {
	 	        new biz = ShowPBiz[playerid];
	 	    	if(biz == -1) return 1;
				switch listitem do
				{
				    case 0: ShowBizSettings(playerid, biz);
				    case 1:
				    {
					    switch BizData[biz][bState] do
						{
						    case B_GAS: global_str = "стоимость 1 литра и входа.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}50${19A725} за один литр.";
						    case 7: global_str = "cтоимость продуктов и входа.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}50${19A725} за один продукт.";
                            case 10: global_str = "cтоимость за въезд.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}50000${19A725}.";
							case 23: global_str = "стоимость 1 литра и входа.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}45${19A725} за один литр.";
							case 24: global_str = "cтоимость за вход.\n{19A725}Используйте число от {FFFFFF}1${19A725} до {FFFFFF}5000${19A725}.";
							default: return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эта функция доступна только для владельцев АЗС, Нефтевышек, автобазара и закусочных!");
					    }
					    f(global_str,400,"\n\n{FFFFFF}Введите %s\n\n",global_str);
				        SPD(playerid,158,1,"",global_str,"Ок", !"Отмена");
				    }
					
					case 2, 3: 
					{
						if(BizData[biz][bState] == 32)
							return SCM(playerid, COLOR_OLDRED, "Недоступно для вашего бизнеса");

						if(PI[playerid][pLevel] < 2)
							return SCMF(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}%s деньги с баланса бизнеса можно со 2-го уровня!", listitem == 2 ? "Брать" : "Ложить");

						SPDF(playerid, listitem == 2 ? 159 : 173, 1, !"", "\n\n{FFFFFF}Введите сумму, которую хотите %s.\n\n", !"Ок", !"Отмена", listitem == 2 ? "снять" : "положить на баланс вашего бизнеса");
				    }
					case 4:
					{
					    EnableGPSForPlayer(playerid, BizData[biz][bEnter][0], BizData[biz][bEnter][1], BizData[biz][bEnter][2]);
					    SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно отметили ваш бизнес в GPS.");
					}
					case 5:
					{
					    f(global_str,sizeof(global_str),"{FFFFFF}Вы точно хотите продать свой бизнес?\n\n{19A725}Обратите внимание что за продажу вашего бизнеса в\nгосударство вы получите полько половину от его гос. стоимости.\nБудете продавать ваш бизнес за {FFFFFF}%d${19A725} ?",BizData[biz][bCost]/2);
						SPD(playerid,161,0,"",global_str,"Да", !"Отмена");
					}
					case 6: SPD(playerid,164,1,"","{FFFFFF}Введите ид игрока и цену через запятую, без пробела.\nПример: {9ACD32}6,1000000.","Далее", !"Отмена");
					case 7:
					{
					    if(BizData[biz][bState] == 7 || BizData[biz][bState] == 1 || BizData[biz][bState] == 2 || BizData[biz][bState] == 3 || BizData[biz][bState] == 9 || IsAChange(biz))
					    {
					        if(BizData[biz][bBuyCost]>0 && BizData[biz][bNeedItem]>0)return  SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже заказали продукты! Если хотите составить заказ заново, отозвите старый!");
					        f(global_str,sizeof(global_str),"{FFFFFF}Обратите внимание на стоимость товара где скупают развозчики! Если\nоплата от вас будет ниже чем на складе, вам никто не привезет груз!\n\nДля магазинов/баров - {51C859}%d${FFFFFF}\nДля закусочных - {51C859}%d${FFFFFF}.",GLS[29],GLS[31]);
					    	f(global_str,sizeof(global_str),"{FFFFFF}В ваш бизнес необходимо закупать товар, который развозят развозчики продуктов!\nВам нужно указать количество товара и его стоимость чтобы они могли его доставить.\nНа балансе всегда должны быть деньги, ибо вы не сможете купить груз!\n\n{CAD715}Введите количество и цену за 1 товар через запятую, без пробела. Пример: 5000,35.\n\n%s",global_str);
							SPD(playerid,182,1,"",global_str,"Далее", !"Отмена");
						}
					}
					case 8:
					{
					    if(BizData[biz][bState] == 7 || BizData[biz][bState] == 1 || BizData[biz][bState] == 2 || BizData[biz][bState] == 3 || BizData[biz][bState] == 9 || BizData[biz][bState] == 0 || BizData[biz][bState] == 13 || BizData[biz][bState] == B_GAS || IsAChange(biz))
					    {
						    if(BizData[biz][bBuyCost]>0 && BizData[biz][bNeedItem]>0)
						    {
                                BizData[biz][bBuyCost]=0;
								BizData[biz][bNeedItem]=0;
								SCM(playerid,COLOR_GREEN, !"Вы успешно отказались от своего заказа на скупку продуктов!");
								callcmd::bizinfo(playerid);
								UpdateBusinessText(biz,0);
						    }
						    else
						    {
						        if(IsAChange(biz))
								{
									global_str = "";
								    for(new i; i < GetMaxItems(BizData[biz][bState]); i++)
									{
								        f(global_str, 1050, "%s{FFFFFF}%s: %d$\n",global_str, GetNameItem(BizData[biz][bState], i), BizData[biz][bItem][i]);
									}
									SPD(playerid,1600,2,"Название",global_str,"Выбор", !"Закрыть");
								}
							}
						}
					}
					case 9:
					{
				    	if(IsAChange(biz))
						{
						    for(new i; i < GetMaxItems(BizData[biz][bState]); i++)
							{
						        f(global_str, 1050, "%s{FFFFFF}%s: %d$\n",global_str,GetNameItem(BizData[biz][bState], i), BizData[biz][bItem][i]);
							}
							SPD(playerid,1600,2,"Название",global_str,"Выбор", !"Закрыть");
						}
					}
				}
	 	    }
		}
		case 1600:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
				if(biz == -1) return 1;
                new maxcost = GetMaxCost(BizData[biz][bState]);
				f(global_str,300,"Введите новую стоимость {0f5cee}%s {FFFFFF}в нашем магазине\nИспользуйте цену от 10$ до %d$\n",GetNameItem(BizData[biz][bState], listitem), maxcost);
				SPD(playerid,1620,1,"",global_str,"Изменить", !"Отмена");
				SetPVarInt(playerid, "Listun", listitem);
			}
		}
		case 1620:
	    {
			if(!response) return 0;
            new biz = ShowPBiz[playerid],
				cost = strval(inputtextsave),
				maxcost = GetMaxCost(BizData[biz][bState]);

			if(!maxcost) return SCM(playerid, COLOR_WHITE, !"{FF0000}[X]{FFFFFF} Макс цена данного товара ровна 0!");
            if(10 > cost || cost > maxcost) return SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Произошла ошибка, пожалуйста проверьте правильность ввода.");
			BizData[biz][bItem][Int_GetPlayerData(playerid, "Listun")] = cost;
			f(global_str,250, "Вы {0edc18}успешно {FFFFFF}изменили стоимость %s на $%d",GetNameItem(BizData[biz][bState], Int_GetPlayerData(playerid, "Listun")),cost);
			SCM(playerid,COLOR_WHITE,global_str);
			UpdateBusinessText(biz, 0);
			SaveBusiness(biz);
        }
		case 182:
		{
		    if(response)
		    {
	            new id,money;
		        sscanf(inputtextsave,"p<,>dd",id,money);
                new bizz = ShowPBiz[playerid];
 				if(!IsPlayerInRangeOfPoint(playerid,20,BizData[bizz][bExit][0], BizData[bizz][bExit][1], BizData[bizz][bExit][2]) && !IsPlayerInRangeOfPoint(playerid,20,BizData[bizz][bEnter][0], BizData[bizz][bEnter][1], BizData[bizz][bEnter][2])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится возле вашего бизнеса!");
 				if(bizz == -1)return 1;
 				if(id < 1 || money < 1)
 				{
			        f(global_str,sizeof(global_str),"{FFFFFF}Обратите внимание на стоимость товара где скупают развозчики! Если\nоплата от вас будет ниже чем на складе, вам никто не привезет груз!\n\nДля магазинов/баров - {51C859}%d${FFFFFF}\nДля закусочных - {51C859}%d${FFFFFF}.",GLS[29],GLS[31]);
			    	f(global_str,sizeof(global_str),"{FFFFFF}В ваш бизнес необходимо закупать товар, который развозят развозчики продуктов!\nВам нужно указать количество товара и его стоимость чтобы они могли его доставить.\nНа балансе всегда должны быть деньги, ибо вы не сможете купить груз!\n\n{CAD715}Введите количество и цену за 1 товар через запятую, без пробела. Пример: 5000,35.\n\n%s",global_str);
					SPD(playerid,182,1,"",global_str,"Далее", !"Отмена");
					return 1;
 				}
				if(id > 10000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете заказать больше 10 000 товара на скупку!");
				if(id < 100) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете заказать меньше 100 товара на скупку!");
				if(BizData[bizz][bState] != 7)
				{
				    if(money < GLS[29])
				    {
					    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить цену на скупку товара, дешевле чем покупают развозчики для магазинов/баров для перепродажи вам!");
					    callcmd::bizinfo(playerid);
					    return 1;
					}
					if((money-GLS[29])<1)
					{
					    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Цена на скупку товара слишком низкая! Попробуйте ее повысить на 1$.");
					    callcmd::bizinfo(playerid);
					    return 1;
					}
					if((money-GLS[29])>10)
					{
					    f(global_str,sizeof(global_str),"[Ошибка] {FFFFFF}Вы не можете установить такую большую цену за товар! Используйте от {FFFFFF}%d${BE2D2D} до {FFFFFF}%d$.{BE2D2D}",(GLS[29]+1),(GLS[29]+10));
					    SCM(playerid,COLOR_RED,global_str);
					    callcmd::bizinfo(playerid);
					    return 1;
					}
				}
				else
				{
				    if(money < GLS[31])
				    {
				        SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить цену на скупку товара, дешевле чем покупают развозчики для магазинов/баров для перепродажи вам!");
					    callcmd::bizinfo(playerid);
					    return 1;
				    }
				    if((money-GLS[31])<1)
					{
					    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Цена на скупку товара слишком низкая! Попробуйте ее повысить на 1$.");
					    callcmd::bizinfo(playerid);
					    return 1;
					}
					if((money-GLS[31])>10)
					{
					    f(global_str,sizeof(global_str),"[Ошибка] {FFFFFF}Вы не можете установить такую большую цену за продукты! Используйте от {FFFFFF}%d${BE2D2D} до {FFFFFF}%d$.{BE2D2D}",(GLS[31]+1),(GLS[31]+10));
					    SCM(playerid,COLOR_RED,global_str);
					    callcmd::bizinfo(playerid);
					    return 1;
					}
				}
				BizData[bizz][bBuyCost]=money;
				BizData[bizz][bNeedItem]=id;
				f(global_str,sizeof(global_str),"Вы успешно составили заказ на скупку {FFFFFF}%d{42B02C} товара для вашего бизнеса, по цене {FFFFFF}%d${FFFFFF}.",BizData[bizz][bNeedItem],BizData[bizz][bBuyCost]);
				SCM(playerid,COLOR_GREEN,global_str);
				UpdateBusinessText(bizz,0);
				callcmd::bizinfo(playerid);
			}
			else callcmd::bizinfo(playerid);
		}
		case 158:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
				new Float:cost = floatstr(inputtextsave);
				new Float:maxcost, State = BizData[biz][bState];
				switch State do
				{
				    case B_GAS,B_CL_BELL: maxcost = 50.0;
				    case 10: maxcost = 50000;
				    case 23: maxcost = 45.0;
				    case 24: maxcost = 5000;
				    default: return SCM(playerid, COLOR_GREY, !"[Ошибка]");
				}
				if(cost < 0.5 || cost > maxcost) return SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Произошла ошибка, пожалуйста проверьте правильность ввода.");
				BizData[biz][bEnterPrice] = cost;
    			switch State do
				{
    				case B_GAS: global_str = "стоимость 1 литра бензина";
					case 7: global_str="стоимость продуктов";
					case 10: global_str="стоимость за въезд";
					case 23: global_str = "стоимость 1 литра";
    			}
    			f(global_str, 100,"Вы успешно изменили %s на $%.1f",global_str,cost);
				SCM(playerid, -1, global_str);
				UpdateBusinessText(biz,1);
				switch State do
				{
					case B_GAS: UpdateFuels(biz); 
					case 23: UpdateNeftText(biz);
				}
				callcmd::bizinfo(playerid);
		    }
		    else callcmd::bizinfo(playerid);
		}
		case 159:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
				new cost = strval(inputtextsave);
				if(cost < 1 || cost > BizData[biz][bMoney]) return SPD(playerid,159,1,"BizInfo","\n\nВведите сумму, которую хотите снять\n\n{D71515}На балансе бизнеса не достаточно средств!","Ок", !"Отмена");
				if(PI[playerid][pMoney]+cost > 2000000000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас получится больше 2 миллиардов!");
				BizData[biz][bMoney] -= cost;
				GiveMoney(playerid,cost);
				UpdateBusinessText(biz,1);
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно сняли деньги со счета.");
				callcmd::bizinfo(playerid);
		    }
		    else callcmd::bizinfo(playerid);
		}
		case 173:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
				new cost = strval(inputtextsave);

				if(cost < 1 || cost > PI[playerid][pMoney])
					return SPD(playerid,173,1,"BizInfo","\n\n{FFFFFF}Введите сумму, которую хотите положить на баланс вашего бизнеса.\n\n{D71515}У вас не достаточно денег чтобы положить эту сумму!","Ок", !"Отмена");
				
				if(ValidIntNum(1, 2147483647, inputtextsave, cost, BizData[biz][bMoney]))
					return SPD(playerid,173,1,"BizInfo","\n\n{FFFFFF}Введите сумму, которую хотите положить на баланс вашего бизнеса.","Ок", !"Отмена");
					
				BizData[biz][bMoney] += cost;
				GiveMoney(playerid,-cost);
				UpdateBusinessText(biz,1);
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно пополнили баланс вашего бизнеса.");
				callcmd::bizinfo(playerid);
		    }
		    else callcmd::bizinfo(playerid);
		}
		case 160:
		{
		    if(response)
		    {
		        if(IsValidEMail(inputtextsave))
		        {
                    if(Int_GetPlayerData(playerid, !"remailmail") > Global_Time)
                    {
						SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Попробуйте через 60 секунд!");
						return ShowUpdateSettings(playerid);
					}
				    SPD(playerid, 169, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
				    SetPVarInt(playerid, !"remailmail2", Global_Time + 60);
				    new code = 1000 + random(9000);
				    f(global_str, sizeof(global_str), "Код для подтверждения почты: %d", code);
				    SendMail(inputtextsave, Setting_Server[1], "ARIZONA-RP подтверждение входа", "Arizona Role Play Supreme", global_str);
				    SetPVarInt(playerid, !"authcode", code);
				    SetPVarInt(playerid, !"remailmail", Global_Time + 60);
				    SetString(ReMail[playerid], inputtextsave);
			    }
			    else SPD(playerid, 160, DIALOG_STYLE_INPUT, !"", !"{70ff86}- Привязать E-mail\n\n{FFFFFF}Напишите свой активный эл.адрес ниже, после вы сможете\nвоспользоваться восстановлением пароля через сайт.", !"Я уверен", !"Не хочу");
		    }
		}
		case 169:
		{
			if(!response)
				return 1;
			if(!strlen(inputtextsave))
				return SPD(playerid, 170, DIALOG_STYLE_INPUT, !"", !"Повторно отправить письмо на эл.почту.", !"Отправить", !"Закрыть");
			if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
			{
				GameTextForPlayer(playerid, !"~r~Error", 0, 1);
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Неверный код!");
			}
			mysql_escape_string(ReMail[playerid], PlayerMail[playerid]);
			GameTextForPlayer(playerid, !"Successful", 0, 1);
			SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно привязали Электронную почту.");
		}
		case 170:
		{
			if(!response)
				return 1;

			if(Int_GetPlayerData(playerid, !"remailmail2") > Global_Time)
				return SCM(playerid, -1, !"Повторно отправить письмо можно раз в 1 минуту.");

            SPD(playerid, 169, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");

            SetPVarInt(playerid, !"remailmail", Global_Time + 30);
			SetPVarInt(playerid, !"remailmail2", Global_Time + 60);
			new code = 1000 + random(9000);
		    f(global_str, sizeof(global_str), "Код для подтверждения почты: %d", code);
		    SendMail(PlayerMail[playerid], Setting_Server[1], "ARIZONA-RP подтверждение входа", "Arizona Role Play Supreme", global_str);
		    SetPVarInt(playerid, !"authcode", code);
		}
		case 889:
		{
		    if(response)
		    {
		        if(IsValidEMail(inputtextsave))
		        {
					SPD(playerid, 890, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш старый {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
					new code = 1000 + random(9000);
					f(global_str, sizeof(global_str), "Код для смены почты: %d", code);
					SendMail(PlayerMail[playerid], Setting_Server[1], "ARIZONA-RP подтверждение входа", "Arizona Role Play Supreme", global_str);
					SetPVarInt(playerid, !"authcode", code);
					SetString(ReMail[playerid], inputtextsave);
			    }
			    else SPD(playerid, 889, DIALOG_STYLE_INPUT, !"", !"{70ff86}- Смена E-mail\n\n{FFFFFF}Напишите свой новый эл.адрес ниже, после вы сможете\nвоспользоваться восстановлением пароля через сайт.", !"Я уверен", !"Не хочу");
		    }
		}
		case 890:
		{
			if(!response) return 1;
			if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Неверный код!");
				return GameTextForPlayer(playerid, !"~r~Error", 0, 1);
			}
			SPD(playerid, 891, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}На ваш новый {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n", !"Отправить", !"Закрыть");
            new code = 1000 + random(9000);
			f(global_str, sizeof(global_str), "Код для смены почты: %d", code);
			SendMail(ReMail[playerid], Setting_Server[1], "ARIZONA-RP подтверждение входа", "Arizona Role Play Supreme", global_str);
			SetPVarInt(playerid, !"authcode", code);
		}
		case 891:
		{
			if(!response) return 1;
			if(Int_GetPlayerData(playerid, !"authcode") != strval(inputtextsave))
			{
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Неверный код!");
				return GameTextForPlayer(playerid, !"~r~Error", 0, 1);
			}
			SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно изменили Электронную почту.");
			mysql_escape_string(ReMail[playerid], PlayerMail[playerid]);
			GameTextForPlayer(playerid, !"Successful", 0, 1);
		}
		case 161:
		{
		    if(response)
		    {
		        new biz = ShowPBiz[playerid];
		        if(biz != -1)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, BizData[biz][bEnter][0],BizData[biz][bEnter][1],BizData[biz][bEnter][2])) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны находится возле свого бизнеса!");
				    if(GetString(BizData[biz][bOwner],PN(playerid)))
				    {
			         	SetString(BizData[biz][bOwner],"The State");
					    GiveMoney(playerid,BizData[biz][bCost]/2);
				     	if(BizData[biz][bProducts] < 0) BizData[biz][bProducts] = 1000;
				     	if(BizData[biz][bMoney] < 0) BizData[biz][bMoney] = 1000;
				     	SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы продали ваш бизнес.");
						UpdateBusinessText(biz,1);
					}
				}
		    }
            else callcmd::bizinfo(playerid);
		}

		case 15252:
		{
			if(!response) return false;

			new cost = Int_GetPlayerData(playerid, "AllNalogBank") / (ImprovementsData[playerid][imFreeloader] ? 2:1);

			if(PI[playerid][pMoney] < cost) 
				return SendBotMessage(playerid,"Извините, но у вас нет нужной суммы денег!");

			GiveMoney(playerid, -cost, "оплата всех налогов через банк");
			
			for(new i; i < MAX_VEHICLES; i++)
			{
				if(!(OwnableCar[i] == INVALID_VEHICLE_ID))
				{
					new carid = OwnableCar[i];
					if(IsPlayerHaveCar(playerid, carid) && CarInfo[i][cShtrafer])
						CarInfo[i][cShtrafer] = 0;
				}

				if(i < OWNABLEBIZES && (GetString(BizData[i][bOwner], PN(playerid)) or GetString(BizData[i][bZam], PN(playerid))) && BizData[i][bLevel])
					BizData[i][bLevel] = 0;

				if(i < OWNABLEHOUSES && (GetString(HouseInfo[i][hOwner],PN(playerid)) or IsPlayerTenant(playerid, i)) && HouseInfo[i][hNalog])
					HouseInfo[i][hNalog] = 0;
			}

			SCMF(playerid, COLOR_VALIK, "Вы оплатили все налоги на сумму:{FFFFFF} $%d", cost);
			return DeletePVar(playerid, "AllNalogBank");
		}
		case 9762:
		{
		    if(response)
		    {
		        new biz = ShowBiz[playerid][listitem];
			    ShowPBiz[playerid]=biz;
			    if(biz != -1)
				{
				    if(!ImprovementsData[playerid][imFreeloader])    f(global_str,sizeof(global_str),"\n\nНа оплату налогов вашего бизнеса выставлено: {42B02C}$%d{FFFFFF}\nВы желаете погасить все счета?\n\n",BizData[biz][bLevel]);
				    else f(global_str,sizeof(global_str),"\n\nНа оплату налогов вашего бизнеса выставлено: {42B02C}$%d{FFFFFF}\nНо по скольку вы имеете улучшение: {42B02C}Халявщик{FFFFFF}, вы должны заплатить только: {42B02C}%d${FFFFFF}\n\nВы желаете погасить все счета?\n\n",BizData[biz][bLevel],BizData[biz][bLevel]/2);
				    SPD(playerid,784,0,"Налоговая",global_str,"Оплатить", !"Отмена");
				}
		    }
		}
		
		case 9761:
		{
		    if(response)
		    {
		    	if(listitem > sizeof(ShowBiz)) return 0;
				else if(listitem == 29)
					return ShowBusinessDialog(playerid, 1);
					
				
		        if(GetPlayerBiz(playerid) == -1) return SCM(playerid, COLOR_GREY, !"У вас нет бизнеса");
			    new biz = ShowBiz[playerid][listitem];
			    if(!GetString(BizData[biz][bOwner], PN(playerid)) && !GetString(BizData[biz][bZam], PN(playerid))) return 0;
			    ShowPBiz[playerid] = biz;
			    global_str = "";
				if(BizData[biz][bState] == B_GAS || BizData[biz][bState] == 7 || BizData[biz][bState] == 23) 
				{
				    switch BizData[biz][bState] do
					{
						case B_GAS: global_str = "Стоимость 1-го литра бензина";
						case 7: global_str = "Стоимость 1-го продукта";
						case 23: global_str = "Стоимость 1-го литра";
          				default: global_str = "";
				    }
					f(global_str,600,"{FFFFFF}%s: {9ACD32}$%.1f\n",global_str,BizData[biz][bEnterPrice]);
				}
				static mafiastr[24];
				switch(BizData[biz][bKrasher])
				{
				    case TEAM_RM: mafiastr = "Русская Мафия";
					case TEAM_YAKUZA: mafiastr = "Якудза";
					case TEAM_LCN: mafiastr = "ЛКН";
					case TEAM_BIKERS: mafiastr = "Байкеры";
					default: mafiastr = "none";
				}
				if(BizData[biz][bState] == B_GAS) f(global_str,600,"%s{FFFFFF}Всего топлива: {9ACD32}%d\n",global_str, BizData[biz][bProducts]);
				else if(BizData[biz][bState] == B_GUNSHOP) f(global_str,600,"%s{FFFFFF}Всего патронов: {9ACD32}%d\n",global_str, BizData[biz][bProducts]);
				else if(BizData[biz][bState] == 7 || BizData[biz][bState] == 2 || BizData[biz][bState] == 1  || BizData[biz][bState] == 1 || BizData[biz][bState] == 3 || BizData[biz][bState] == 9) f(global_str,600,"%s{FFFFFF}Продуктов: {9ACD32}%d\n",global_str,BizData[biz][bProducts]);
			    f(global_str,600,"%s{FFFFFF}Бизнес: {9ACD32}%s( %i )\n\
				{FFFFFF}Банк бизнеса: {9ACD32}$%d\n\
				{FFFFFF}Открыт/Закрыт: %s\n\
				{FFFFFF}Крыша: {9ACD32}%s\n\
				{FFFFFF}Налог к оплате: {9ACD32}%d/250000$\n\
				{FFFFFF}Цена покупки с госа: {9ACD32}%d$\n",
				global_str, BizData[biz][bName], biz,BizData[biz][bMoney],
				BizData[biz][bLock] ? "{FF6347}Закрыт":"{9ACD32}Открыт",
				mafiastr,BizData[biz][bLevel],BizData[biz][bCost]);

				if(BizData[biz][bState] == 7 || BizData[biz][bState] == 1 || BizData[biz][bState] == 2 || BizData[biz][bState] == 3 || BizData[biz][bState] == 9)
				{
				    if(BizData[biz][bBuyCost]>0 && BizData[biz][bNeedItem]>0)
					{
						f(global_str,600,"%s{FFFFFF}Открытый заказ на: {9ACD32}%d товара\n\
						{FFFFFF}Стоимость скупки товара: {9ACD32}%d$\n\n",global_str,BizData[biz][bNeedItem],BizData[biz][bBuyCost]);
					}
				}
				
				if(IS_UP_BIZ(BizData[biz][bState]))
				{
					switch BizData[biz][bState] do
					{
						case 1: mysql_string = "{FFFFFF}Уровень улучшения \"Орёл и Решка\": {9ACD32}%d{FFFFFF}\n\n";
						case 23: mysql_string = "{FFFFFF}Уровень улучшения нефтевышки: {9ACD32}%d{FFFFFF}\n\n";
					}
					
					format(mysql_string, 100, mysql_string, BizData[biz][bUpgrade][0]);
					strcat(global_str, mysql_string);
				}
				
				new TIME;
				gettime(TIME);
				f(global_str, 850, "%s{FFFFFF}Прибыль за сегодня: {61B23D}%d${FFFFFF}\nПосетителей за {61B23D}%d{FFFFFF} часов: {61B23D}%d{FFFFFF} чел.\n",global_str,BizData[biz][bWin], TIME-5, BizData[biz][bVisit]);
				
				if(IsAChange(biz))
				{
					switch BizData[biz][bState] do
					{
						case 1: strcat(global_str, "\nСтоимость товара {FAAC58}в{FFFFFF} баре:\n");
						default: strcat(global_str, "\nСтоимость товара {FAAC58}в{FFFFFF} магазине:\n\n\n");
					}
					
					for(new i; i < GetMaxItems(BizData[biz][bState]); i++)
					{
						f(global_str, 1500, "%s{FFFFFF}%s: %d$\n",global_str,GetNameItem(BizData[biz][bState], i), BizData[biz][bItem][i]);
					}
				}
				
				return SPD(playerid, 156, DIALOG_STYLE_MSGBOX, !"Меню", global_str, "Изменить", !"Отмена");
		    }
		}
		
		case 162:
		{
			if(!response) return false;

			new carid = OnPlayerCarLoad(ShowCar[playerid][listitem][0]), number = GetVehicleID(carid), Cache:result, model = GetVehicleModelEx(carid), load;

			if(!carid) 
			{
				format(SQL_STRING, 128, "SELECT Model, ConnectLoad FROM ownable WHERE ID = %d LIMIT 1;", ShowCar[playerid][listitem][0]);
				result = mysql_query(mysql, SQL_STRING);
				cache_get_value_name_int(0, "Model", model);
				cache_get_value_name_int(0, "ConnectLoad", load);
			}

			ShowVeh[playerid] = ShowCar[playerid][listitem][0];
			
			format(mysql_string, 50, "Инструменты для %s%s", GetVehicleName(model, true), !carid ? "" : (str_f(" (%i)", carid)));
			strcat(global_str, (str_f("%s\n%s", !carid ? "Загрузить машину" : (CarInfo[number][cLock] ? "{FF6347}Открыть" : "{9ACD32}Закрыть"), !carid ? (!load ? "Не загружать при авторизации" : "Загружать при авторизации") : (CarInfo[number][cKeyIN] ? "{9ACD32}Вытащить ключи" : "{FF6347}Вставить ключи"))));
			
			if(carid && IsPlayerHaveCar(playerid, carid))
				f(global_str, sizeof(global_str), \
				"%s\nПрипарковать\nНайти\n%s\n{73B461}Информация о авто (Паспорт)\n%s\n{FFFFFF}Режим езды [ %s{FFFFFF} ]\nСистема ABS  [ {FD4D3D}Отсутствует{FFFFFF} ]\n{FFFFFF}Заспавнить машину [ {9ACD32}1000${FFFFFF} ]\n%s\n{ff0000}Выгрузить\n{cccccc}Сдать в аренду", \
				global_str, \
				CarInfo[number][cAlarmON] ? "{9ACD32}Выключить сигнализацию" : "{FF6347}Включить сигнализацию", \
				IsPlayerRegCar(playerid, carid) ? "{73B461}Очистить список посредников '{FFD700}/keys'" : "{73B461}Вернуть ключи", \
				CarInfo[number][cStyle] ? "{E4A72B}Sport" : "{73B461}Comfort", \
				CarInfo[number][ConnectLoad] ? "Не загружать при авторизации" : "Загружать при авторизации");

			SPD(playerid, 163, DIALOG_STYLE_LIST, mysql_string, global_str, !"Выбор", !"Отмена"), cache_delete(result);
			
		}

		case 163, 26926:
		{
			if(!response) 
				return false;

			UseableCMDCars(playerid, listitem, ShowVeh[playerid], GetVehicleID(OnPlayerCarLoad(ShowVeh[playerid])), dialogid);
		}

		case 164:
		{
		    if(response)
		    {
		        if(PI[playerid][pLevel] >= 2)
		        {
		            new id,money;
			        sscanf(inputtextsave,"p<,>ud",id,money);
			        if(IsPlayerConnected(id))
			        {
			            if(ValidIntNum(1, 2147483647, inputtextsave, strval(inputtextsave))) return 1;
			            if(GetPlayerBizes(id))
			            {
			                if(BizOffer[id] == INVALID_PLAYER_ID)
			                {
				                new bizz = ShowPBiz[playerid];
                 				if(!IsPlayerInRangeOfPoint(playerid,20,BizData[bizz][bExit][0], BizData[bizz][bExit][1], BizData[bizz][bExit][2]) && !IsPlayerInRangeOfPoint(playerid,20,BizData[bizz][bEnter][0], BizData[bizz][bEnter][1], BizData[bizz][bEnter][2])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для передачи прав на бизнес, вы должны находится в его интерьере или у входа в него!");
				                if(ProxDetectorS(5.0, playerid, id, 1))
				                {
				                    BizOffer[playerid] = id;
				                    BizOffer[id] = playerid;
				                    BizPrice[id] = money;
				                    ShowPBiz[id]= bizz;
									f(global_str, sizeof(global_str), "Предлагает %s купить у него бизнес.", PN(id));
									SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
				                    SPD(playerid,0,0,!"","{FFFFFF}\n\nВы успешно предложили игроку продать ваш бизнес.\n\n", !"Принять","");
				                    f(global_str,sizeof(global_str),"{FFFFFF}\n\n%s предлагает вам купить у него бизнес за $%d.\n\n",PN(playerid),money);
				                    SPD(id,165,0,"Покупка бизнеса",global_str,"Купить", !"Отмена");
				                }
				                else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
					        }
					        else SCM(playerid,COLOR_RED,!">>>>{FFFFFF} - Игроку уже предложили покупку бизнеса!");
				        }
				        else
						{
							SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не может купить у вас бизнес! Он не может содержать больше бизнесов чем у него есть сейчас!");
							SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вам предложили купить бизнес, но вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
						}
			        }
		        }
		        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Продавать бизнес другим игрокам можно только со 2-го уровня");
			}
            else callcmd::bizinfo(playerid);
		}
		case 4351:
		{
		    if(response)
		    {
	            new id,money;
		        sscanf(inputtextsave,"p<,>ud",id,money);
		        if(IsPlayerConnected(id))
		        {
		            if(money <1 || id == playerid)return 1;
		            if(GetTrailer(id) || PI[id][pTrailer])
		            {
		                if(BizOffer[id] == INVALID_PLAYER_ID)
		                {
			                new bizz = PI[playerid][pTrailerKey];
	         				if(!IsPlayerInRangeOfPoint(playerid,20,TrailerInfo[bizz][tPos_X], TrailerInfo[bizz][tPos_Y], TrailerInfo[bizz][tPos_Z]) && !IsPlayerInRangeOfPoint(playerid,20,TrailerInfo[bizz][tPos_X], TrailerInfo[bizz][tPos_Y], TrailerInfo[bizz][tPos_Z])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для продажи трейлера вы должны стоять возле него!");
			                if(ProxDetectorS(5.0, playerid, id, 1))
			                {
			                    BizOffer[playerid] = id;
			                    BizOffer[id] = playerid;
			                    BizPrice[id] = money;
			                    ShowPBiz[id]= bizz;
								f(global_str, sizeof(global_str), "Предлагает %s купить у него трейлер.", PN(id));
								SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
			                    SPD(playerid,0,0,!"","{FFFFFF}\n\nВы успешно предложили игроку продать ваш трейлер.\n\n", !"Принять","");
			                    f(global_str,sizeof(global_str),"{FFFFFF}\n\n%s предлагает вам купить у него трейлер за $%d.\n\n",PN(playerid),money);
			                    SPD(id,4352,0,"Покупка трейлера",global_str,"Купить", !"Отмена");
			                }
			                else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
				        }
				        else SCM(playerid,COLOR_RED,!">>>>{FFFFFF} - Игроку уже предложили покупку трейлера!");
					}
			        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не может купить у вас трейлер! У него уже есть трейлер!");
		        }
			}
            else callcmd::trmenu(playerid);
		}
		case 4352:
		{
		    new id = BizOffer[playerid];
		    if(response)
		    {
		        new money = BizPrice[playerid];
		        if(GetString(TrailerInfo[ShowPBiz[playerid]][tOwner], PN(id)))
		        {
			        if(BizOffer[id] == playerid)
			        {
			            if(PI[playerid][pMoney] >= money)
						{
				            if(ProxDetectorS(10.0, playerid, id, 1))
				            {
					            if(GetTrailer(playerid) || PI[playerid][pTrailer])
					            {
									new biz = ShowPBiz[playerid];
									SetString(TrailerInfo[biz][tOwner], PN(playerid));
									PI[id][pTrailerKey] = -1;
									PI[playerid][pTrailerKey] = biz;
									GiveMoney(playerid, -money);
									GiveMoney(id, money);
									BizOffer[playerid] =
									BizOffer[id] = INVALID_PLAYER_ID;
									BizPrice[playerid] = 0;
									SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю вас с приобретением трейлера!");
									SCM(id, COLOR_VALIK, !"[Информация] {FFFFFF}Вы продали свой трейлер");
									PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
									UpdateBusinessText(biz, 1);
									SaveAccount(id);
									SaveAccount(playerid);
									UpdateTrailer(biz);
									SaveTrailer(biz);
									SCM(playerid, -1, !">> {FF6347} Местом спавна автоматически назначен ваш трейлер. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
									PI[playerid][pDCTime] = 4;
									if(PI[id][pDCTime] == 4) PI[id][pDCTime] = 0;
									return 1;
					            }
					            else SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}У вас уже есть трейлер!");
				            }
				            else SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF} Вы далеко от продавца!");
						}
						else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			        }
					else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - ОШИБКА!");
				}
				else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - ОШИБКА!");
		    }
		    else
			{
				SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно отказались от покупки трейлера.");
				SCM(id, COLOR_RED, !"[Информация] {FFFFFF}Игрок отказался от покупки трейлера.");
			}
			BizOffer[playerid] =
			BizOffer[id] = INVALID_PLAYER_ID;
			BizPrice[playerid] = 0;
		}
		case 165:
		{
		    new id = BizOffer[playerid];
		    if(response)
		    {
		        new money = BizPrice[playerid];
		        if(GetString(BizData[ShowPBiz[playerid]][bOwner], PN(id)))
		        {
			        if(BizOffer[id] == playerid)
			        {
			            if(PI[playerid][pMoney] >= money)
						{
				            if(ProxDetectorS(10.0, playerid, id, 1))
				            {
					            if(GetPlayerBizes(playerid))
					            {
									new biz = ShowPBiz[playerid];
									BizData[biz][bLevel] = 0;
									SetString(BizData[biz][bOwner], PN(playerid));
									GiveMoney(playerid, -money);
									GiveMoney(id, money);
									BizOffer[playerid] =
									BizOffer[id] = INVALID_PLAYER_ID;
									BizPrice[playerid] = 0;
									SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю вас с приобретением бизнеса!");
									SCM(id, COLOR_VALIK, !"[Информация] {FFFFFF}Вы продали свой бизнес");
									PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
									UpdateBusinessText(biz, 1);
									SaveAccount(id);
									SaveAccount(playerid);
									return 1;
					            }
					            else SCM(playerid, COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
				            }
				            else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - Вы далеко от продавца!");
						}
						else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			        }
					else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - ОШИБКА!");
				}else SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - ОШИБКА!");
		    }
		    else
			{
				SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно отказались от покупки бизнеса.");
				SCM(id, COLOR_RED, !"[Информация] {FFFFFF}Игрок отказался от покупки бизнеса.");
			}
			BizOffer[playerid] =
			BizOffer[id] = INVALID_PLAYER_ID;
			BizPrice[playerid] = 0;
		}
		case 171:
		{
		    if(!response) return 1;
	        new carid = ShowCar[playerid][listitem][0];
	        if(IsPlayerHaveCar(playerid, carid))
	        {
	            new number = GetVehicleID(carid);
	            ShowVeh[playerid] = number;
	            if(!CarInfo[number][cShtraf]) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот транспорт не стоит на штрафстоянке");
	            f(global_str, sizeof(global_str), "{FFFFFF}Номер транспорта: %s\nСумма залога: $%d", OwnCarNumber(carid), CarInfo[number][cShtraf]);
	            SPD(playerid, 172, DIALOG_STYLE_MSGBOX, !"Подтверждение", global_str, !"Выкупить", !"Отмена");
	        }
	        else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш транспорт!");
		}
		
		case 1781:
		{
		    if(response)
		    {
		        switch listitem do
		        {
		            case 0: callcmd::setspawn(playerid);
		           	
					case 1:
					{
						if(PI[playerid][pFrom] == -1) return SCM(playerid,COLOR_WHITE,">> {BE2D2D} Вы не проживаете в отеле!");
						PI[playerid][pDCTime] = 5;
						SCM(playerid,COLOR_WHITE,">> {BE2D2D} Вы установили отель местом спавна!");
						callcmd::setspawn(playerid);
					}
					
					case 2:
		            {
		                if(IsAArmy(playerid) && PI[playerid][pRank]<4)
						{
						    PI[playerid][pDCTime]=2;
							SCM(playerid,COLOR_WHITE, !">> {BE2D2D} На службе в армии ,вы не можете изменить место спавна!");
							return 0;
						}

						if(HouseOffer[playerid] != INVALID_PLAYER_ID)
							return SendErrorMessage(playerid);

						ShowHouseDialog(playerid);
					}
		            
					case 3:
		            {
		                if(PI[playerid][pMember][0]==0) return SCM(playerid,COLOR_WHITE, !">> {BE2D2D} Вы не состоите в организации!");
		                PI[playerid][pDCTime]=2;
		                SCM(playerid,COLOR_WHITE, !">> {BE2D2D} Вы установили организацию местом спавна!");
		                callcmd::setspawn(playerid);
		            }
					
					case 4:
					{
						SCM(playerid, -1, !">>{BE2D2D} Вы установили семейную квартиру местом спавна!");
				    	PI[playerid][pDCTime] = 6;
				    	callcmd::setspawn(playerid);
					}
					
					case 5:
					{
		                if(IsAArmy(playerid) && PI[playerid][pRank]<4)
						{
						    PI[playerid][pDCTime]=3;
							SCM(playerid,COLOR_WHITE, !">> {BE2D2D} На службе в армии ,вы не можете изменить место спавна!");
							return 0;
						}
		                PI[playerid][pDCTime]=0;
		                SCM(playerid,COLOR_WHITE, !">> {BE2D2D} Вы установили вокзал местом спавна!");
		                callcmd::setspawn(playerid);
					}
					
					case 6:
					{
					    if(PI[playerid][pTrailerKey] == -1) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}У Вас нет трейлера.");
					    f(global_str,400,"» {BE2D2D}[Информация] {FFFFFF}Вы установили трейлер №%d местом спавна!",PI[playerid][pTrailerKey]);
						SCM(playerid,-1,global_str);
						PI[playerid][pDCTime] = 4;
					}
					
				    case 7:
				    {
				    	if(PI[playerid][pVIP][0] < 6 || GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return 0;

				    	GetPlayerPos(playerid, PI[playerid][pPremiumPos][0],PI[playerid][pPremiumPos][1],PI[playerid][pPremiumPos][2]);

				    	//save coords
				    	f(global_str, 50, "%f,%f,%f,",PI[playerid][pPremiumPos][0], PI[playerid][pPremiumPos][1], PI[playerid][pPremiumPos][2]);
				    	UpdatePlayerDataStr(playerid, "PremiumPos", global_str);
				    	//

				    	f(global_str, 125, ">>{BE2D2D} Вы установили позицию %.02f,%.02f,%.02f местом спавна!", PI[playerid][pPremiumPos][0], PI[playerid][pPremiumPos][1], PI[playerid][pPremiumPos][2]);
				    	SCM(playerid, -1, global_str);
				    	PI[playerid][pDCTime] = 7;
				    	callcmd::setspawn(playerid);
				    }
				}
				SaveAccount(playerid);
			}
		}
		
		case 172:
		{
		    if(!response) return 1;
	        new carid = ShowVeh[playerid];
	        if(IsPlayerHaveCar(playerid, OwnableCar[carid]))
	        {
	            if(!CarInfo[carid][cShtraf]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот транспорт не стоит на штрафстоянке!");
	            if(PI[playerid][pMoney] >= CarInfo[carid][cShtraf])
	            {
		            SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно выкупили свой транспорт!");
                   	GiveMoney(playerid, -CarInfo[carid][cShtraf]);
					CarInfo[carid][cShtraf] = 0;
		            SaveOwnableCar(carid);
	            }
	            else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	        }
		}
		case 887:
		{
		    if(response)
		    {
		        if(PI[playerid][pMoney]<30000)return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		        f(global_str,sizeof(global_str),"{FFFFFF}Поздравляем! Ваш пароль востановлен.\n{E52B2B}Обязательно запомните этот пароль и измените его.\n{FFFFFF}Новый пароль: 123456{FFFFFF}.\n");
		        SPD(playerid,0,0,!"",global_str, !"Закрыть","");
		        PI[playerid][pBankPass]=123456;
		        GiveMoney(playerid,-30000);
                GiveMoney(PanelPlayerID[playerid],20000);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~New password: 123456", 30000, 3);
		    }
		    else SCM(PanelPlayerID[playerid],COLOR_GREY, !"[Информация] {FFFFFF}Игрок отклонил ваше предложение о изменении пароля!");
		}
		case 881:
		{
		    if(response)
		    {
		        new carid = ShowCar[playerid][listitem][0];
		        if(IsPlayerHaveCar(playerid,carid))
		        {
		            new number = GetVehicleID(carid);
		            ShowVeh[playerid] = number;
		            if(!ImprovementsData[playerid][imFreeloader]) f(global_str,sizeof(global_str),"\n\n{FFFFFF}Номер транспорта: {42B02C}%s{FFFFFF}\nСумма к оплате: {42B02C}$%d{FFFFFF}\n\n",OwnCarNumber(carid), CarInfo[number][cShtrafer]);
		            else f(global_str,sizeof(global_str),"\n\n{FFFFFF}Номер транспорта: {42B02C}%s{FFFFFF}\nСумма к оплате: {42B02C}$%d{FFFFFF}\nПо скольку у вас имеется улучшение, вам прийдеться заплатить всего лишь {42B02C}%d${FFFFFF}\n\n",OwnCarNumber(carid), CarInfo[number][cShtrafer], CarInfo[number][cShtrafer]/2);
		            SPD(playerid,882,0,"Подтверждение",global_str,"Оплатить", !"Отмена");
		        }
		        else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Это не ваш транспорт");

		    }
		}
		case 4353:
		{
		    if(response)
		    {
	            if(PI[playerid][pMoney] >= TrailerInfo[PI[playerid][pTrailerKey]][tNalog])
	            {
		            SCM(playerid,COLOR_GREEN, !"Вы успешно оплатили налог на трейлер");
		            if(!ImprovementsData[playerid][imFreeloader])SCM(playerid,COLOR_GREEN, !"Обратите внимание что имея улучшение халявщик вы будете платить в 2 раза меньше!");
		            OrgInfo[GLS[13]][oBank]+=TrailerInfo[PI[playerid][pTrailerKey]][tNalog];
		            SaveOrg(GLS[13]);
		            if(ImprovementsData[playerid][imFreeloader]) GiveMoney(playerid,-TrailerInfo[PI[playerid][pTrailerKey]][tNalog]/2);
					else GiveMoney(playerid,-TrailerInfo[PI[playerid][pTrailerKey]][tNalog]);
					TrailerInfo[PI[playerid][pTrailerKey]][tNalog] = 0;
		            SaveTrailer(PI[playerid][pTrailerKey]);
	            }
	            else SCM(playerid,COLOR_ORANGE, !"Ошибка: {FFFFFF}У вас недостаточно денег!");
		    }
		}
		case 882:
		{
		    if(response)
		    {
		        new carid = ShowVeh[playerid];
		        if(IsPlayerHaveCar(playerid,OwnableCar[carid]))
		        {
		            if(PI[playerid][pMoney] >= CarInfo[carid][cShtrafer])
		            {
			            SCM(playerid,COLOR_GREEN, !"Вы успешно оплатили налог на транспорт");
			            if(!ImprovementsData[playerid][imFreeloader])SCM(playerid,COLOR_GREEN, !"Обратите внимание что имея улучшение халявщик вы будете платить в 2 раза меньше!");
			            OrgInfo[GLS[13]][oBank]+=CarInfo[carid][cShtrafer];
			            SaveOrg(GLS[13]);
			            if(ImprovementsData[playerid][imFreeloader])
						{
							GiveMoney(playerid,-CarInfo[carid][cShtrafer]/2);
						}
						else
						{
							GiveMoney(playerid,-CarInfo[carid][cShtrafer]);
						}
						CarInfo[carid][cShtrafer] = 0;
			            SaveOwnableCar(carid);
			            SendBankBot(playerid);
		            }
		            else SendBotMessage(playerid,"Извините, но  у вас недостаточно денег!");
		        }
		    }
		}
		case 804:
  		{
			if(!response) return false;
			new house = PI[playerid][pHouseOpen];
            
			if(!GetString(HouseInfo[house][hOwner],PN(playerid))) return 1;
			SetString(HouseInfo[house][hOwner],"The State");
			if(!(HouseInfo[house][hType] == 1)) GiveMoney(playerid,HouseInfo[house][hCost]/2);
			else PI[playerid][pVirMoney] += HouseInfo[house][hCost]/2;
		    SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы продали ваш дом");
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			UpdatePlayerPos(playerid, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]);
				
			PI[playerid][pDCTime] = 0;
			HouseEntered[playerid] = PI[playerid][pHouseKey] = -1;
			UpdateHouse(house);
			SaveAccount(playerid);
		}
		
  		case 803:
  		{
  			if(!response)
				return false;
				
			new carid = GetPlayerVehicleID(playerid);
			if(!IsAOwnableCar(carid))
				return false;
			
			if(IsPlayerInHisVehicle(playerid))
			{
			   if(IsPlayerRegCar(playerid,carid))
			   {
					new number = GetVehicleID(carid);
					new cost = CarInfo[number][cCost]/2;
					GiveMoney(playerid,cost);
					ExitCar(playerid);
       				
					SellCar(carid);
					
					SCMF(playerid, COLOR_LIGHTBLUE, "[Информация] {FFFFFF}Вы продали ваше транспортное средство за $%d",cost);
					
					GetNumberCars(playerid,PI[playerid][pCars]);
				}
			}
			
			return true;
		}
		
		case 2049:
		{
			return false;
		}
		
		case 195:
		{
		    if(!response)
				return callcmd::house(playerid);
			
			new house = PI[playerid][pHouseOpen];
			
			if(house == -1 or !GetString(HouseInfo[house][hOwner], PN(playerid)))
				return false;
			
			else if(GetString(HRoomOwner[house][listitem], "The State"))
				return SPD_prev(playerid, 174, 1, 9);
			
			spdList(playerid, 0, listitem);
			
			return SPDF(playerid, 200, DIALOG_STYLE_LIST, HRoomOwner[house][listitem], "{FFFFFF}Доступ к складу\t\t\t[{FF6347}Нет{FFFFFF}]\n{FFFFFF}Управление материалов со склада\t[{FF6347}Нет{FFFFFF}]\n{FF6347}Выселить с комнаты", !"Выбрать", !"Отмена", 0);
		}
		
		case 196:
		{
			if(!response)
				return RHouseOffer[playerid] = INVALID_PLAYER_ID;
				
		    new player = RHouseOffer[playerid], hId = gpdList(playerid, 1);
			
			if(!IsPlayerOnline(player))
				return RHouseOffer[playerid] = INVALID_PLAYER_ID;
			
			if(hId == -1)
				return false;
				
			if(!GetString(HouseInfo[hId][hOwner], PN(player)))
				return false;
			
		    global_str = "";
			
			for(new i;i < HouseRooms[GetHouseStyle(hId)]; i++) 
				strcat(global_str, ( str_f("- Комната {42B02C}№%d{FFFFFF}\n", i+1) ) );
	    	
			
			return SPD(playerid, 197, DIALOG_STYLE_LIST, !"", global_str, !"Занять", !"Назад");
		}
		
		case 197:
		{
		    if(!response)
				return RHouseOffer[playerid] = INVALID_PLAYER_ID;
				
			new player = RHouseOffer[playerid], hId = gpdList(playerid, 1), Cost = gpdList(playerid, 2);
			
			if(!IsPlayerOnline(player))
				return RHouseOffer[playerid] = INVALID_PLAYER_ID;
			
			if(hId == -1)
				return false;
				
			if(!GetString(HouseInfo[hId][hOwner], PN(player)))
				return false;
			
			if(GetString(HRoomOwner[hId][listitem], "The State"))
		    {
		    	SetString(HRoomOwner[hId][listitem], PN(playerid));
				HRoomPay[hId][listitem] = Cost;
				
				SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы успешно арендовали комнату в доме игрока %s", PN(player));
				SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Теперь вы будете платить за проживание $%d каждый PayDay", Cost);
				
				SCMF(player, COLOR_GREEN, "%s принял ваше предложение пожить у него в доме!", PN(playerid));
				
				PI[playerid][pHouseKey] = hId;
				RHouseOffer[playerid] = INVALID_PLAYER_ID;

				PI[playerid][pDCTime] = 1;
				SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ваш дом. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");

				SaveAccount(playerid);
				
				SQL("UPDATE houses SET Room_Owner = '%s', Room_Pays = '%s' WHERE ID = %d;", String_PackMassive(0, HRoomOwner[hId]), Int_PackMassive(1, HRoomPay[hId]), hId);
		    }
			else return SPD_prev(playerid, 196, 1, 0);
			
		}
		
		case 198:
		{
		    if(!response)
				return callcmd::house(playerid);
			
			extract inputtextsave -> new player:targetid, cost; else
				return callcmd::house(playerid);
			
			if(!IsPlayerOnline(targetid))
				return false;
				
			else if(!ProxDetectorS(5, playerid, targetid, 1))
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
			
			else if(!GetPlayerHouses(targetid))
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок не может иметь больше домов, чем сейчас!"); 
			
			SCMF(playerid, COLOR_GREEN, "[Информация]{FFFFFF} Вы предлогаете игроку {42B02C}%s{FFFFFF} жить в комнате вашего дома.", PN(targetid));
			SCMF(playerid, COLOR_GREEN, "[Информация]{FFFFFF} Стоимость за PayDay ${42B02C}%d{FFFFFF}.", cost);
			
			RHouseOffer[targetid] = playerid;
			spdList(targetid, 1, PI[playerid][pHouseOpen]);
			spdList(targetid, 2, cost);
			
			return SPDF(targetid, 196, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Игрок {42B02C}%s{FFFFFF} предлогает вам жить в комнате его дома.\nСтоимость за PayDay: $%d", !"Принять", !"Отмена", PN(playerid), cost);
		}
		
		case 200:
		{
			if(!response)
				return false;
			
			new id = gpdList(playerid, 0), house = PI[playerid][pHouseOpen], targetId = GetPlayerID(HRoomOwner[house][id]);
			
			switch listitem do
			{
				case 2:
				{
					if(!(targetId == INVALID_PLAYER_ID))
					{
						PI[targetId][pHouseKey] = -1;
						PI[targetId][pDCTime] = 0;
						
						SCM(targetId, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена улица. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
						SCMF(targetId, COLOR_WHITE, "Владелец дома {42B02C}%s{FFFFFF} выселил вас.", PN(playerid));
						SaveAccount(targetId);
					}
					else 
						SQL("UPDATE `accounts` SET `HouseKey` = '-1', `DropCarTime` = '0' WHERE `NickName` = '%s'", HRoomOwner[house][listitem]);
							
					SCMF(playerid, -1, "Вы выселили игрока {42B02C}%s{FFFFFF} из своего дома.", HRoomOwner[house][id]);
					
					SetString(HRoomOwner[house][id], "The State");
					HRoomPay[house][id] = 0;
					
					SQL("UPDATE houses SET Room_Owner = '%s', Room_Pays = '%s' WHERE ID = %d;", String_PackMassive(0, HRoomOwner[house]), Int_PackMassive(0, HRoomPay[house]), house);
				}
			}
			
			return SPD_prev(playerid, 174, 1, 9);
		}
	
	
		case 2432,2433:
		{
			if(!response) return false;
			else if(!strlen(inputtextsave)) return ShowDialogEditName(playerid, dialogid == 2432 ? 0:1);
			else if(3 > strlen(inputtextsave) ||  strlen(inputtextsave) > 32) return ShowDialogEditName(playerid, dialogid == 2432 ? 0:1);
			
			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно установили название вашего %s.", dialogid == 2432 ? "дома":"бизнеса");
			
			if(dialogid == 2432) 
				f(global_str, 200, "UPDATE `houses` SET `Name` = '%s' WHERE `ID` = '%d'", inputtextsave, PI[playerid][pHouseOpen]),
					CallTimeOutFunction("MysqlRefreshMS", 50, false, "dd", 982, PI[playerid][pHouseOpen]);
			else 
				f(global_str, 200, "UPDATE `businesses` SET `opisanie` = '%s' WHERE `ID` = '%d'", inputtextsave, BizData[ShowPBiz[playerid]][bID]),
					CallTimeOutFunction("MysqlRefreshMS", 50, false, "dd", 583, ShowPBiz[playerid]);
					
			mysql_tquery(mysql, global_str);
		}
		
		case 2431:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseOpen];
				
		        switch listitem do
		        {
					case 0: return ShowDialogEditName(playerid);
					case 1:
		            {
		                if(HouseEntered[playerid] == -1) return 1;
         				SPD(playerid, 185, DIALOG_STYLE_TABLIST_HEADERS, "", "Еда\tНеобходимо продуктов\nКартофель-Фри\t{A5EC67}60\nСэндвич\t{A5EC67}80\nБургер\t{E3EC67}100\nКрылышки\t{ECD667}120\nПицца\t{ECB267}140\nКурица с салатом\t{EC8D67}160\nКомплексный Обед\t{EC6767}300", "Выбор", !"Отмена");
		            }
		            case 2: callcmd::drink(playerid);
					case 3: OtherInvOpen(playerid, 1, 0.0, 0.0, HouseEntered[playerid]);
					
					case 5:
						return spdList(playerid, 0, 0), SPDF(playerid, 2434, DIALOG_STYLE_LIST, !"Предметы недвижимости", "{FFFFFF}Предметы на улице:\t\tустановлено %d из %d\nПредметы в интерьере:\tустановлено %d из %d\n", !"Выбрать", !"Назад", GetCountUsedObj(house), HouseInfo[house][hObjectCount][0], GetCountUsedObj(house, 0, 1), HouseInfo[house][hObjectCount][1]);
						
					case 6:
					{
					    new s = GetHouseStyle(house);//тип дома
     					if(GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, !"владелец не может выселится!");
     					for(new i; i < HouseRooms[s]; i++)// перебираеться количество комнат
						{
							if(GetString(HRoomOwner[house][i], PN(playerid)))//возвращает комнаты
							{
							    SetString(HRoomOwner[house][i], "The State");
	        					SaveHouse(house);
							    PI[playerid][pHouseKey] = -1;
						        PI[playerid][pDCTime] = 0;
						        SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена улица. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
						        SCM(playerid, COLOR_ORANGE, !"[Информация] {FFFFFF}Вы успешно выселились из дома.");
						       	SaveAccount(playerid);
						       	return 1;
							}
						}
						PI[playerid][pHouseKey] = -1;
      					PI[playerid][pDCTime] = 0;
      					SCM(playerid, COLOR_WHITE, !"******* {BE2D2D} Ошибка, отправьте на форум скриншот и мы постараемся исправить, но мы вас выселили!");
				       	SaveAccount(playerid);
					}
		        }
		    }
		    else callcmd::house(playerid);
		}
		
		case 2434:
		{
			if(!response) 
				return false;
			
			if(!gpdList(playerid, 0) && HouseEntered[playerid] == PI[playerid][pHouseOpen] && GetString(HouseInfo[PI[playerid][pHouseOpen]][hOwner], PN(playerid)))
				ShowListUsedObj(playerid, PI[playerid][pHouseOpen], 0, listitem);
			
			else if(ShowPBiz[playerid] && GetString(BizData[ShowPBiz[playerid]][bOwner], PN(playerid)))
				return ShowListUsedObj(playerid, ShowPBiz[playerid], 1, listitem);
			
			return true;
		}
		
		case 2435:
		{
			if(!response) 
				return false;
			
			return SPDF(playerid, 2436, DIALOG_STYLE_MSGBOX, !"Купить дополнительный слот", "{FFFFFF}Стоимость: {FFFF00}20000 AZ-коинов\n\n{FFFFFF}Вы действительно хотите купить дополнительный слот для предмета %s?", !"Купить", !"Назад", gpdList(playerid, 2) ? "в интерьере":"на улице");
		}
		
		case 2436:
		{
			if(!response)
				return false;
				
			if(PI[playerid][pVirMoney] < 20000)
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас не хватает AZ-coins.");
			
			new id = gpdList(playerid, 0), type = gpdList(playerid, 1), type_list = gpdList(playerid, 2);
			
			global_str = "%d,%d";
			
			if(!type)
			{
				if(HouseInfo[id][hObjectCount][type_list] > 20)
					return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Максимальное количество слотов на этом пунке.");
				
				HouseInfo[id][hObjectCount][type_list] ++;
				
				format(global_str, 20, global_str, HouseInfo[id][hObjectCount][0], HouseInfo[id][hObjectCount][1]);
			}
			else
			{
				if(BizData[id][bObjectCount][type_list] > 20)
					return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Максимальное количество слотов на этом пунке.");
				
				BizData[id][bObjectCount][type_list] ++;
				
				format(global_str, 20, global_str, BizData[id][bObjectCount][0], BizData[id][bObjectCount][1]);
				
			}
			
			SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Дополнительный слот успешно приобретен.");
			
			SQL("UPDATE `%s` SET `objectCount` = '%s' WHERE ID = %d;", !type ? "houses":"businesses", global_str, id);
			
			return GiveDonate(playerid, -20000);
		}
		
		case 6698:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseKey];
		        if(house != -1)
				{
					switch(listitem)
					{
					    case 0:
					    {
							if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]) ||
								IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]))
							{
								if(HouseInfo[house][hLock])
								{
									HouseInfo[house][hLock] = 0;
									SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Дверь {9ACD32}открыта");
									UpdateHouse(house);
									SaveHouse(house);
								}
								else
								{
							       	HouseInfo[house][hLock] = 1;
							       	SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Дверь {FF6347}закрыта");
							       	UpdateHouse(house);
							       	SaveHouse(house);
	       						}
    						}
			    			else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не возле своего дома");
			    			callcmd::house(playerid);
						}
						case 1:
						{
							if(!GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!"), callcmd::house(playerid);
							new num = 0;
  					     	for(new s; s < HouseRooms[GetHouseStyle(house)]; s++)
							{
							    if(!GetString(HRoomOwner[house][s], "The State")) num++;
							}
							if(num != 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Для начала выселите квартирантов!");
							SPD(playerid, 177, DIALOG_STYLE_INPUT, "Продажа дома", "{FFFFFF}Введите ид игрока и цену через запятую\nПример: {9ACD32}6,1000000", "Далее", !"Отмена");
						}
					}
				}
			}
		}
		
		case 174:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseOpen];
				
		        if(house != -1)
				{
					switch(listitem)
					{
					    case 0:
					    {
							if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]) ||
								IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]))
							{
								if(HouseInfo[house][hLock])
								{
									HouseInfo[house][hLock] = 0;
									SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Дверь {9ACD32}открыта");
									UpdateHouse(house);
									SaveHouse(house);
								}
								else
								{
							       	HouseInfo[house][hLock] = 1;
							       	SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Дверь {FF6347}закрыта");
							       	UpdateHouse(house);
							       	SaveHouse(house);
	       						}
    						}
			    			else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не возле своего дома");
			    			callcmd::house(playerid);
						}
						case 1:
						{
							global_str = "{42B02C}-{FFFFFF} Изменить название дома\n{42B02C}-{FFFFFF} Холодильник\n{42B02C}-{FFFFFF} Минибар\n{42B02C}-{FFFFFF} Шкаф\n{42B02C}-{FFFFFF} Ежедневное задание\n{42B02C}-{FFFFFF} Предметы недвижимости";
							
							if(!GetString(HouseInfo[house][hOwner], PN(playerid)))
								strcat(global_str, "\n{42B02C}-{FFFFFF} Выселится из дома");
								
							return SPD(playerid, 2431, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Назад");
						}
		    			case 2:
		    			{
		    			    if(!GetString(HouseInfo[house][hOwner], PN(playerid)))
								 return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");

		    			    return SPDF(playerid, 176, DIALOG_STYLE_LIST, !"HouseUpgrade", "{42B02C}-{FFFFFF} Ремонт\n{42B02C}-{FFFFFF} %s\n{42B02C}-{FFFFFF} %s\n{42B02C}-{FFFFFF} %s", !"Выбрать", !"Отмена", HouseInfo[house][hBar] == 1 ? "Минибар {EC6767}[ Имеется ]":"Заказать бар {42B02C}[$5000]", HouseInfo[house][hPodval] ? "Подвал: {EC6767}[ Имеется ]":"Построить подвал {42B02C}[ $ 500 000+ ]", HouseInfo[house][hMainingInstalling] ? "Подвал с вентиляцией: {EC6767}[ Имеется ]":"Построить с вентиляцией {42B02C}[ $1 000 000+ ]");
						}
		    			case 3:
						{
						    if(!GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
						    if(HouseInfo[house][hAuction]) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Ваш дом находится на аукционе.");
						    new num = 0;
					     	for(new s; s < HouseRooms[GetHouseStyle(house)]; s++)
							{
							    if(!GetString(HRoomOwner[house][s], "The State")) num++;
							}
							if(num != 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Для начала выселите квартирантов!");
							SPD(playerid, 804, DIALOG_STYLE_MSGBOX, "Предупреждение", "{FFFFFF}Вы действительно хотите продать свой дом?\nОбратите внимание, что при продаже дома вам дадут только\n{EC6767}50 {FFFFFF}процентов от его гос. стоимости", "Дальше", !"Отмена");
						}
		    			case 4:
		    			{
						    if(!GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
						    if(HouseInfo[house][hAuction]) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Ваш дом находится на аукционе.");
						    new num = 0;
					     	for(new s; s < HouseRooms[GetHouseStyle(house)]; s++)
							{
							    if(!GetString(HRoomOwner[house][s], "The State")) num++;
							}
							if(num != 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Для начала выселите квартирантов!");
		    			    SPD(playerid, 177, DIALOG_STYLE_INPUT, "Продажа дома", "{FFFFFF}Введите ид игрока и цену через запятую\nПример: {9ACD32}6,1000000", "Далее", !"Отмена");
						}
						case 5: 
						{
							if(HouseInfo[house][hAuction]) 
							{
								if(floatround(HouseInfo[house][hAuctionTime] / 3600) < 2) return 0;
								ResetAuctionHouse(house);
								SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы убрали ваш дом с аукциона.");
							}
							else SPD(playerid, 15036, DIALOG_STYLE_INPUT, "{BFBBBA}Выставить дом на аукцион", "{FFFFFF}Введите начальную цену аукциона и минимальную ставку через запятую.\n\nПример: {9ACD32}20000000,100000\n{cccccc}Дом будет выставлен на аукцион с начальной ценой: $20 000 000,\nа повышать ставку можно будет не меньше чем на $100 000 каждый раз", "Далее", "Отмена");
						}
						case 6:
		    			{
		    			    if(!GetString(HouseInfo[house][hOwner], PN(playerid))) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
	    			    	f(global_str, sizeof(global_str), "{FFFFFF}Счет к оплате: {86EC67}%d\n{FFFFFF}Недошедшие счета: {86EC67}%d\n\n{FFFFFF}Внимание если счет к оплате вашего дома выше $104000\nРаботники налоговой могут конфиксовать ваш дом.\nОплатить счета вы можете в центральном банке Arizona!", HouseInfo[house][hNalog], HouseInfo[house][hNalog2]);
				    		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Домашний Счет", global_str, !"Закрыть", "");
						}
						case 7:
		    			{
 			     			f(global_str, sizeof(global_str), "{FFFFFF}Продуктов в доме: {86EC67}%d{FFFFFF}\nПополнив запас продуктов вы сможете покушать или выпить в любое время у себя в доме.\nВзять продукты или выпивку можно у бара и холодильника!\n\n{2E6C8C}Купить продукты для дома можно в любой закусочной штата!", HouseInfo[house][hNoOwner]);
					    	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Меню", global_str, !"Принять", "");
						}
						case 8:
		    			{
		    			    if(!GetString(HouseInfo[house][hOwner], PN(playerid)))
								return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
	    			    	
							return SPD(playerid, 198, DIALOG_STYLE_INPUT , !"Аренда", "{FFFFFF}\n\nВведите {42B02C}ник{FFFFFF} игрока которого хотите подселить к себе в дом...\nи {42B02C}стоимость{FFFFFF} оплаты за PayDay через запятую.\nПример: \"Ioan_Grozny, 777\"\n ", !"Ок", !"Отмена");
						}
		    			case 9:
		    			{
		    			    if(!GetString(HouseInfo[house][hOwner],PN(playerid)))
								return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не владелец этого дома!");
		    			     
							global_str = "{FFFFFF}Владелец комнаты\t{FFFFFF}Оплата за PayDay\n";
							
		    			    for(new i; i < HouseRooms[GetHouseStyle(house)]; i++)
								strcat(global_str, GetString(HRoomOwner[house][i], "The State") ? "- {42B02C}Свободная комната{FFFFFF}\t \n":( str_f("- %s\t$%d\n", HRoomOwner[house][i], HRoomPay[house][i]) ) );
							
		    			    return SPD(playerid, 195, DIALOG_STYLE_TABLIST_HEADERS, !"Список арендаторов", global_str, !"Выбрать", !"Назад");
		    			}
		    			case 10: SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "", "\n\n{FFFFFF}/med чтобы использовать аптечку!\n\n", !"Принять", "");
			    	}
			    }
		    }
		}
		case 77:
		{
			if(response)
		    {
				if(PI[playerid][pHouseKey]==-1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Возможно у вас нет личного жилья!");
				new money = strval(inputtextsave);
				if(money < 1 || 3000-HouseInfo[PI[playerid][pHouseKey]][hNoOwner] < money)
				{
	               	f(global_str,sizeof(global_str),"{FFFFFF}Продуктов в вашем доме: {B03131}%d{FFFFFF}.\nПополнив запас продуктов вы сможете покушать или выпить в любое время у себя в доме.\nВзять продукты или выпивку можно у бара и холодильника!.\n\n{D22C2C}Произошла ошибка, возможно вы пытаетесь купить слишком много продуктов и они не влезут вам в холодильник!",HouseInfo[PI[playerid][pHouseKey]][hNoOwner]);
			    	SPD(playerid,77,1,"Меню",global_str, !"Принять", !"Отмена");
					return 0;
				}
				new price = floatround( money*BizData[BizEntered[playerid]][bEnterPrice], floatround_floor );
				if(BizData[BizEntered[playerid]][bProducts] <= money)return SendBotMessage(playerid,"Приносим свои извинения, но у нас закончились продукты!");
				if(PI[playerid][pMoney]<price)return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				HouseInfo[PI[playerid][pHouseKey]][hNoOwner] += money;
				GiveMoney(playerid,-price);
				GiveBizMoney(BizEntered[playerid],price);
				BizData[BizEntered[playerid]][bProducts]-=money;
				SendBotMessage(playerid,"Спасибо за покупку, у нас всегда качественная еда для наших посетителей!");
		    }
		    else SPD(playerid,2761,2,"","{42B02C}-{FFFFFF} Покушать на месте\n{42B02C}-{FFFFFF} Купить в дом", !"Принять", !"Отмена");
		}
		case 175:
		{
		    if(response)
		    {
		        new house = PI[playerid][pHouseKey];
				switch(listitem)
				{
				    case 0: SPD(playerid,178,2,"Что положить?","Деньги\nНаркотики\nПатроны","Далее", !"Отмена");
				    case 1: SPD(playerid,179,2,"Что достать","Деньги\nНаркотики\nПатроны","Далее", !"Отмена");
				    case 3:
				    {
				        f(global_str,sizeof(global_str),"\
						{FFFFFF}Деньги: {AFAFAF}$%d\n\
						{FFFFFF}Наркотики: {AFAFAF}%d\n\
						{FFFFFF}Патроны: {AFAFAF}%d\n",HouseInfo[house][hMoney],HouseInfo[house][hDrugs],HouseInfo[house][hMats]);
				        SPD(playerid,0,0,"Инфо",global_str, !"Закрыть","");
				    }
				}
		    }
		    else callcmd::house(playerid);
		}
		case 176:
		{
		    if(response)
			{
			    new house = PI[playerid][pHouseKey];
		        if(house != -1)
		        {
					if(!GetString(HouseInfo[house][hOwner], PN(playerid)))
						return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не владелец дома");

				    switch(listitem)
				    {
						case 0:
						{
						    if(IsPlayerInRangeOfPoint(playerid, 90, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]))
							{
							   if(BuyInt[playerid] == -1)
							    {
								    if(PI[playerid][pDCTime] != 1) PI[playerid][pDCTime] = 1;
							        pTemp[playerid][tSkinSelectedId] = -1;
									BuyInt[playerid] = 1;
									if(pTemp[playerid][SPECTPLAYER] == false) SpecPl(playerid, true);
									SCM(playerid, 0xFFFFFFFF, "[Информация] {FFFFFF}Подождите немного ...");
  									CallTimeOutFunction("ChangeInterior", 1000, false, "i", playerid);
								}
								else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже выбираете интерьер");
							}
							else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы должны находиться в доме");
						}
						
						case 1:
						{
						    if(!HouseInfo[house][hBar])
						    {
						    	if(PI[playerid][pMoney] >= 5000)
						    	{
						    		HouseInfo[house][hBar] = 1;
						    		GiveMoney(playerid, -5000);
						    	    SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы купили бар для дома [/drink] (-$5000)");
									SaveHouse(house);
								}
						    	else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
						    }
						    else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме уже есть бар!");
						}

						case 2:
						{
						   	if(!HouseInfo[house][hPodval])
						    {
						    	if(PI[playerid][pMoney] >= 400000)
						    	{
						    	    HouseInfo[house][hPodval] = 1;
						    	    GiveMoney(playerid, -400000);
						    		SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно заказали строительство подвала для вашего дома!");
									SaveHouse(house);
									callcmd::house(playerid);
								}
						    	else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
							}
						    else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме уже есть подвал!");
						}

						case 3:
						{
							if(HouseInfo[house][hMainingInstalling])
								return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме уже есть подвал с вентиляцией!");
							
							return SPD(playerid, 25030, DIALOG_STYLE_MSGBOX, !"Строительство подвала", !"{FFFFFF}Вы действительно хотите построить подвал с вентиляцией?\nСтоимость строительства: {FFD700}1 000 000$\n\n{cccccc}В таком подвале будет доступна установка видеокарт для майнинга криптовалюты.", !"Строить", !"Отмена");
						}
					}
			    }
		    }
		    else callcmd::house(playerid);
		}
		case 177:
		{
		    if(response)
		    {
		        if(!strlen(inputtextsave)) {
					return SPD(playerid, 177, DIALOG_STYLE_INPUT, !"Продажа дома", !"{FFFFFF}Введите ид игрока и цену через запятую\n{9ACD32}- Пример: {B83434}6,1000000", !"Далее", !"Отмена");
		        }

		        new
					id,
					price;
		        sscanf(inputtextsave, "p<,>dd", id, price);

		        if(price < 1) {
					return SPD(playerid, 177, DIALOG_STYLE_INPUT, !"Продажа дома", !"{FFFFFF}Введите ид игрока и цену через запятую\n{9ACD32}- Пример: {B83434}6,1000000", !"Далее", !"Отмена");
		        }
				if(id == playerid) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, повторите еще раз.");
		        
		        new
					house = PI[playerid][pHouseOpen];

		        if(!(house == -1))
		        {
			        if(GetString(HouseInfo[house][hOwner], PN(playerid)))
				    {
					    if(ProxDetectorS(10.0, playerid, id, 1))
					    {
					        if(GetPlayerHouses(id))
					        {
						        if(HouseOffer[id] == INVALID_PLAYER_ID)
						        {
						    		f(global_str, sizeof(global_str), "{FFFFFF}%s хочет продать вам свой дом\nНомер дома: %d\nЦена: $%d", PN(playerid), house, price);
									SPD(id, 86, DIALOG_STYLE_MSGBOX, !"Продажа дома", global_str, !"Купить", !"Отмена");
									f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы предлагаете %s купить ваш дом за $%d", PN(id), price);
									SCM(playerid, COLOR_VALIK, global_str);
									f(global_str, sizeof(global_str), "Предлагает %s купить у него дом.", PN(id));
									SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
									HouseOffer[id] = playerid;
									HouseOffer[playerid] = id;
									HousePrice[id] = price;
								}
								else 
									SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этому игроку уже кто-то предлагает купить дом");
							}
							else 
								SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок уже где-то прописан");
					    }
			            else 
							SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
					}
			    }
		    }
		    else
				callcmd::house(playerid);
		}
  		case 178:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PI[playerid][pLevel] < 2)
		                    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ложить деньги в шкаф дома можно со 2-го уровня!");

		                SPD(playerid,180,1,"Введите кол-во","{FFFFFF}Сколько денег вы хотите положить в шкаф?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_MONEY;
		            }
		            case 1:
		            {
		                SPD(playerid,180,1,"Введите кол-во","{FFFFFF}Сколько грамм наркотиков вы хотите положить в шкаф?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_DRUGS;
		            }
		            case 2:
		            {
		                SPD(playerid,180,1,"Введите кол-во","{FFFFFF}Сколько патронов вы хотите положить в шкаф?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_MATS;
		            }
		        }
		    }
		    else SPD(playerid,175,2,"Шкаф","{B83434}Положить\n{9ACD32}Достать\n{FF9900}Одежда\n{AFAFAF}Инфо","Выбор","Назад");
		}
		case 179:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(PI[playerid][pLevel] < 2)
		                    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Доставать деньги из шкафа дома можно со 2-го уровня!");

		                SPD(playerid,181,1,"Введите кол-во","{FFFFFF}Сколько денег вы хотите достать из шкафа?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_MONEY;
		            }
		            case 1:
		            {
		                SPD(playerid,181,1,"Введите кол-во","{FFFFFF}Сколько грамм наркотиков вы хотите достать из шкафа?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_DRUGS;
		            }
		            case 2:
		            {
		                SPD(playerid,181,1,"Введите кол-во","{FFFFFF}Сколько патронов вы хотите достать из шкафа?","Ок","Назад");
		                PutState[playerid] = PUT_STATE_MATS;
		            }
		        }
		    }
			else SPD(playerid,175,2,"Шкаф","{B83434}Положить\n{9ACD32}Достать\n{FF9900}Одежда\n{AFAFAF}Инфо","Выбор","Назад");
		}
		case 1666:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
						if(PI[playerid][pMoney]<600)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
			 			GiveMoney(playerid, -600);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=600;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Курица в соусе Терияки'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,50);
                  		SendEatBot(playerid);
		            }
		            case 1:
		            {
		                if(PI[playerid][pMoney]<500)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
                        if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
			 			GiveMoney(playerid, -500);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=500;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Мисо-суп'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,40);
                  		SendEatBot(playerid);
		            }
		            case 2:
		            {
                        if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
						if(PI[playerid][pMoney]<700)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
			 			GiveMoney(playerid, -700);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=700;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Прозрачная лапша с говядиной'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,60);
                  		SendEatBot(playerid);
		            }
					case 3:
					{
                        if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
						if(PI[playerid][pMoney]<800)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
			 			GiveMoney(playerid, -800);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=800;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Удон в сливочном соусе с говядиной'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,70);
		                SendEatBot(playerid);
		            }
					case 4:
					{
                        if(Fullness[playerid] >= 95) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не голодны");
						if(PI[playerid][pMoney]<600)return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
			 			GiveMoney(playerid, -600);
			 			OrgInfo[TEAM_YAKUZA][oBank]+=600;//арія
						SCM(playerid,COLOR_VALIK, !"Вы сьели блюдо под названием 'Кани спайси'. Посмотреть состояние голода можно {FFFFFF}/satiety");
						ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		                GiveFullness(playerid,50);
		                SendEatBot(playerid);
		            }
		        }
			}
		}
		case 186:
	    {
	        if(response)
	        {
	            if(!PI[playerid][pHeal])
	            {
	                PI[playerid][pHeal] = GetPlayerVirtualWorld(playerid);
	                PI[playerid][pHealTime] = 0;
	                SCM(playerid, COLOR_LIGHTBLUE, "[Информация] {FFFFFF}Вы согласились пройти курс лечения");
	            }
	        }
		}
		case 193:
		{
		    if(response)
		    {
				new money = strval(inputtextsave);
				if(money < 800 || money > 10000) return SPD(playerid,193,1,"Введите сумму","Введите сумму залога\n\n{9ACD32}- Не менее $1 и не более $2000","Ок", !"Отмена");
		        if(GetPlayerState(playerid) == 2)
			  	{
			  	    new carid = GetPlayerVehicleID(playerid);
			    	if(VehicleInfo[carid][vTeam] == TEAM_LSPD || VehicleInfo[carid][vTeam] == TEAM_LVPD || VehicleInfo[carid][vTeam] == TEAM_RCPD || VehicleInfo[carid][vTeam] == TEAM_SFPD)
			    	{
				    	if(VehicleInfo[carid][vModel] == 525)
						{
						    if(IsTrailerAttachedToVehicle(carid))
						    {
								new vehid = GetVehicleTrailer(carid);
							    for(new i;i < sizeof(CarPounds); i ++)
							    {
									new Float:x,Float:y,Float:z;
									GetVehiclePos(vehid,x,y,z);
									if(!IsAOwnableCar(vehid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете поставить данное транспортное средство на штраф стоянку");
									if(IsPlayerToKvadrat(playerid,CarPounds[i][0],CarPounds[i][1],CarPounds[i][2],CarPounds[i][3]))
									{
										if(IsPlayerInRangeOfPoint(playerid,15.0,1570.2062,-1151.0127,23.9412) || IsPlayerInRangeOfPoint(playerid,10.0,1815.2671,-1145.4780,23.8606) || IsPlayerInRangeOfPoint(playerid,10.0,1732.3651,-1145.3220,23.8720)) return SCM(playerid,COLOR_RED,!"В этом месте нельзя оставить машину");
										DetachTrailerFromVehicle(carid);
										new number = GetVehicleID(vehid);
										if(CarInfo[number][cShtraf]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете поставить данное транспортное средство на штраф стоянку , так как оно уже там стоит!");
										SPD(playerid,0,0,!"","Вы поставили транспорт на штрафстоянку и получили 800$ в виде поощрения.", !"Закрыть","");
										GiveMoney(playerid,800);
										SetString(CarInfo[number][cShtrafName], PN(playerid));
										new Float:Health,panels,doors_,lights_,tires;
										GetVehicleDamageStatus(vehid,panels,doors_,lights_,tires);
										GetVehicleHealth(vehid,Health);
										CarInfo[number][cShtraf] = strval(inputtextsave);
										CarInfo[number][cKeyIN] = 0;
										GetVehiclePos(vehid,CarInfo[number][cPos][0],CarInfo[number][cPos][1],CarInfo[number][cPos][2]);
										GetVehicleZAngle(vehid,CarInfo[number][cPos][3]);
										VehicleInfo[vehid][vAntiRepair]=2;
										VehicleHealth[vehid] = Health;
										SetVehiclePos(vehid, CarInfo[number][cPos][0],CarInfo[number][cPos][1],CarInfo[number][cPos][2]);
										SetVehicleHealth(vehid, Health);
										UpdateVehicleDamageStatus(vehid,panels,doors_,lights_,tires);
										SaveOwnableCar(number);
										SetVehicleToRespawn(vehid);
										return 1;
									}
						        }
							}
						}
					}
				}
		    }
		}
		case 206:
		{
		    if(response)
		    {
				new number = UnLeaderID[playerid];
				PlayerUnleader(INVALID_PLAYER_ID,OrgInfo[number][oLeader]);
				f(global_str,sizeof(global_str),"Вы сняли игрока %s с поста лидера",OrgInfo[number][oLeader]);
   				SCM(playerid,COLOR_WHITE,global_str);

   				f(global_str,sizeof(global_str)," Администратор %s выгнал игрока %s из должности лидерства",PN(playerid),OrgInfo[number][oLeader]);
				SendAdminsMessage(COLOR_WHITE,global_str);

   				SetString(OrgInfo[number][oLeader],"Свободна");
  				SaveOrg(number);
		    }
		    return 1;
		}
		case 207:
		{
		    if(response) StopAudioStreamForPlayer(playerid);
		    callcmd::phone(playerid);
		}

		case 3443:
	    {
	        if(response)
	        {
	            if(!strlen(inputtextsave)) return callcmd::gnews(playerid);
				new id=GetTeamID(playerid);
             	new hour, minuite;
				sscanf(inputtextsave,"p<,>dds[32]",hour,minuite,global_str);
				if ((0 > hour > 23) || (0 > minuite > 59)) return callcmd::gnews(playerid);
				SobesStatus[id] = true;
				SetString(SobesMesto[id],global_str);
				f(global_str, 16, "%d:%d", hour, minuite);
				SetString(SobesTime[id], global_str);
				SobesTime1[id] = hour;
				SobesTime2[id] = minuite;

			    f(global_str,sizeof(global_str),"[D] %s %s[%d] {AFAFAF}- назначил собеседование в свою организацию на %s!",GetRankName(id,PI[playerid][pRank]),PN(playerid),playerid,SobesTime[id]);
				SendGosMessage(COLOR_DEPAR,global_str);
	        }
	    }
		
		case 15036:
		{
			if(!response) return 0;
			if(HouseEntered[playerid] == -1 || PI[playerid][pHouseKey] == -1) return 0;
			new hid = HouseEntered[playerid];
			if(!GetString(HouseInfo[hid][hOwner],PN(playerid))) return 0;
			new mincost, costup;
			if(!strlen(inputtextsave)) return SPD(playerid, 15036, DIALOG_STYLE_INPUT, "{BFBBBA}Выставить дом на аукцион", "{FFFFFF}Введите начальную цену аукциона и минимальную ставку через запятую.\n\nПример: {9ACD32}20000000,100000\n{cccccc}Дом будет выставлен на аукцион с начальной ценой: $20 000 000,\nа повышать ставку можно будет не меньше чем на $100 000 каждый раз", "Далее", "Отмена");
		 	if(sscanf(inputtextsave, "p<,>dd", mincost, costup)) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Начальная цена не может быть ниже 1$ и более чем $900 млн.");
			if(mincost < 0 || costup < 0 || mincost > 900000000 || costup > 900000000) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Начальная цена не может быть ниже 1$ и более чем $900 млн.");
			
			HouseInfo[hid][hAuction] = 1;
			HouseInfo[hid][hAuctionTime] = 18000;
			HouseInfo[hid][hAuctionMoney] = HouseInfo[hid][hAuctionCost][0] = mincost;
			HouseInfo[hid][hAuctionCost][1] = costup;

			new minuite, hour; 
			gettime(hour, minuite);

			f(global_str, 150, "[Информация]{FFFFFF} Вы выставили свой дом на аукцион, время завершения: {FFFF00}%d:%02d.", hour+5, minuite);
			SCM(playerid, COLOR_VALIK, global_str);
			f(global_str, 150, "[Информация]{FFFFFF} Начальная цена: {FFFF00}$%d{ffffff}, минимальная ставка: {FFFF00}$%d.", 
			HouseInfo[hid][hAuctionCost][0], HouseInfo[hid][hAuctionCost][1]);
			SCM(playerid, COLOR_VALIK, global_str);
			SCM(playerid, COLOR_RED, "[Предупреждение]{FFFFFF} Отменить аукцион разрешается не позднее чем за 2 часа до его завершения.");
		}
		case 15037:
		{
			if(!response) return 0;
			new i = InfoHouse[playerid];
			if(i == -1) return 0;
			switch(listitem)
			{
				case 0:
				{
	        		if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[i][hEnter_X],HouseInfo[i][hEnter_Y],HouseInfo[i][hEnter_Z]))
		    		{
		      			if(HouseInfo[i][hLock]>0 && !IsACop(playerid)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
		      			SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}Используйте /house для управления домом.");
		      			SCM(playerid,COLOR_GREEN, !"[Подсказка] {FFFFFF}Используйте /med чтобы использовать аптечку из дома!");
				      	InfoHouse[playerid] = -1;
				      	TextDrawHideForPlayer(playerid, HInfoBG);
						for(new j; j < 6; j ++) PlayerTextDrawHide(playerid, HInfoDraw[playerid][j]);
						TextDrawHideForPlayer(playerid, HInfoEnterDraw);
						TextDrawHideForPlayer(playerid, HInfoBuyDraw);
				      	SetPlayerInterior(playerid,HouseInfo[i][hInt]);
				      	SetPlayerVirtualWorld(playerid,(i+50));
				      	UpdatePlayerPos(playerid,HouseInfo[i][hExit_X],HouseInfo[i][hExit_Y],HouseInfo[i][hExit_Z]);
				      	HouseEntered[playerid] = i;
					}
				}
				case 1:
				{
					if(!GetPlayerHouses(playerid)) return SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше домов! Покупайте улучшение 'Больше недвижимости' чтобы иметь до 3-х домов!");

					if(!HouseInfo[i][hAuction]) return 0;
					else if(strlen(HouseInfo[i][hAuctionName]) < 2) 
					{
						f(global_str, 450, "\
						{ffffff}Дом {ffff00}№%d\n\
						{ffffff}Стартовая цена аукциона: {ffff00}$%d\n\
						{ffffff}Минимальная ставка: {ffff00}$%d\n\
						Завершение аукциона через: {ffff00}%s\n\n\
						{cccccc}Ставок еще не было\n\n\
						{ffffff}Укажите сумму вашей ставки:",
						i, HouseInfo[i][hAuctionCost][0],
						HouseInfo[i][hAuctionCost][1],
						Convert(HouseInfo[i][hAuctionTime]));
					}
					else 
					{
						f(global_str, 450, "\
						{ffffff}Дом {ffff00}№%d\n\
						{ffffff}Стартовая цена аукциона: {ffff00}$%d\n\
						{ffffff}Минимальная ставка: {ffff00}$%d\n\
						Завершение аукциона через: {ffff00}%s\n\n\
						{cccccc}%s - $%d\n\n\
						{ffffff}Укажите сумму вашей ставки:",
						i, HouseInfo[i][hAuctionCost][0],
						HouseInfo[i][hAuctionCost][1],
						Convert(HouseInfo[i][hAuctionTime]),
						HouseInfo[i][hAuctionName],
						HouseInfo[i][hAuctionMoney]);
					}
					return SPD(playerid, 15038, DIALOG_STYLE_INPUT, "{BFBBBA}Участие в аукционе", global_str, "Далее", "Закрыть");
				}
			}
		}
		case 15038:
		{
			if(!response) return 0;
			new i = InfoHouse[playerid];
			if(i == -1) return 0;
			if(!HouseInfo[i][hAuction]) return 0;
			if(HouseInfo[i][hAuctionTime] < 25) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Твоё время подошло к концу :(, увы ты опаздал.");
			if(!strlen(inputtextsave)) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас нет в наличии такой суммы.");
			new cost = strval(inputtextsave);
			if(cost <= 0 || PI[playerid][pMoney] < cost) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} У вас нет в наличии такой суммы.");
			if(HouseInfo[i][hAuctionMoney]+HouseInfo[i][hAuctionCost][1] < 0) return 0;
			if(cost < HouseInfo[i][hAuctionMoney]+HouseInfo[i][hAuctionCost][1])
			{
				f(global_str, 100, "[Ошибка]{FFFFFF} Сумма должна быть не менее, чем $%d.", HouseInfo[i][hAuctionMoney]+HouseInfo[i][hAuctionCost][1]);
				SCM(playerid, COLOR_OLDRED, global_str);
				return 1;
			}
			HouseInfo[i][hAuctionMoney] = cost;
			SetString(HouseInfo[i][hAuctionName],PN(playerid));
			SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно сделали ставку на этот аукцион!");
		}
		
		case 15300:
		{
			if(!response)
				return false;

			switch listitem do
			{
				case 0, 2: return ShowListItem(playerid, listitem == 2 ? 1 : 0);
				case 1, 3: return spdList(playerid, 1, listitem == 1 ? 0 : 1), SPDF(playerid, 15301, DIALOG_STYLE_INPUT, (str_f("{FFFFFF} Поиск | {ff6666}%s", listitem == 1 ? "ItemFinder" : "CarsFinder")), "{FFFFFF}Введите часть названия %s для поиска:", !"Найти", !"Закрыть", listitem == 1 ? "предмета" : "авто");
			}
		}

		case 15302:
		{
			if(!response)
				return false;

			if(listitem <= 1) {
				
				if(!(0 <= ( int_TRANSIT_PLAYER_DATA + ( !listitem ? 1:-1 ) ) * 30 <= (!gpdList(playerid, 1) ? sizeof(ItemsInfo) : sizeof(vehicleModelInfo))))
					SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Упс... похоже вы уперлись в ограничитель!");
				else 
					int_TRANSIT_PLAYER_DATA += !listitem ? 1:-1;
			}

			return ShowListItem(playerid, gpdList(playerid, 1), int_TRANSIT_PLAYER_DATA);
		}

		case 15301:
		{
			if(!response)
				return false;

			if(strlen(inputtextsave) < 3)
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Для поиска предмета требуется как минимум от 3х символов!");

			global_str = "{FFFFFF}";

			for(new i; i < (!gpdList(playerid, 1) ? sizeof(ItemsInfo) : sizeof(vehicleModelInfo)); i++)
			{
				if(!gpdList(playerid, 1) && TextFind(ItemsInfo[i][itemName], inputtextsave))
					strcat(global_str, (str_f("\n[%d] %s", i, ItemsInfo[i][itemName])));

				if(gpdList(playerid, 1) && TextFind(vehicleModelInfo[i][vehicleName], inputtextsave))
					strcat(global_str, (str_f("\n[%d] %s", vehicleModelInfo[i][vehicleModel], vehicleModelInfo[i][vehicleName])));
			}

			if(strlen(global_str) < 10)
				strcat(global_str, "\n \nПо вашему запросу ничего не найдено!\n \n");
		
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, (str_f("{FFFFFF} Поиск | {ff6666}%s, %s", !gpdList(playerid, 1) ? "item" : "cars", inputtextsave)), global_str, !"Закрыть", !"");
		}

		case 15310:
		{
			if(!response)
				return false;
				
			if(PI[playerid][pMoney] < 50000)
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
			GiveMoney(playerid, -50000, "быстрое лечение в больнице");
			
			UpdatePlayerHealth(playerid, 100);
			
			return SCM(playerid, COLOR_LIGHTBLUE, !"Вы прошли курс быстрой реабилитации за $50000, теперь вы здоровы!");
		}
		
		case 15338:
		{
			if(!response) return false;
			
			if(PI[playerid][pMoney] < 50000)
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				
			return ShowSecondHandTD(playerid);
		}
		case 15331:
		{
			if(!response)
				return false;
			
			if(PI[playerid][pVirMoney] < 9999999)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет 9999999 AZ-коинов для покупки дополнения к VIP-аккаунту.");

			UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney] -= 9999999);
			UpdatePlayerDataInt(playerid, "AddVip", PI[playerid][pAddVIP] = Global_Time + 3600 * 24 * 30);
			//AddItem(playerid, , 1);
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы приобрели один {FF6347}\'Сертификат дополнения VIP\'{FFFFFF}.\n\nВы можете его активировать, передать или продать другому игроку!\nЧтобы активировать - используйте сертификат через инвентарь.", !"Окей", !"");
		}
		
		case 15152:
		{
			if(!response) return false;

			switch listitem do
			{
				case 0:
				{
					global_str = "Ферма\tРазмер поля\tСтоимость\n";
					
					for(new i; i < sizeof(FarmData); i++)
					{
						if(!GetString(FarmData[i][farmOwner], "Нет"))
							format(global_str, 1024, "%s\tФерма №%d\t[ %d ячеек ]\t{FF6347}продана\n", global_str, i + 1, FarmData[i][farmCell]);

						else 
							format(global_str, 1024, "%s\tФерма №%d\t[ %d ячеек ]\t{42B02C}%d$\n", global_str, i + 1, FarmData[i][farmCell], FarmData[i][farmCost]);
					}

					return SPD(playerid, 15153, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите ферму", global_str, !"Купить", !"Назад");
				}
				case 1:
				{
					
					if(PI[playerid][pFarmOwner] == -1 or !GetString(FarmData[PI[playerid][pFarmOwner]][farmOwner], PN(playerid)))
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не владелец фермы.");

						
					return SPD(playerid, 15155, DIALOG_STYLE_LIST, !"Продажа фермы", !"Продать государству\nПерепродать игроку", !"Выбрать", !"Назад");

				}
			}
		}
		

		case 15153:
		{
			if(!response) return false;
			
			if(!(PI[playerid][pFarmOwner] == -1))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы уже владеете одной	 из ферм.");
				
			else if(!GetString(FarmData[listitem][farmOwner], "Нет"))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта ферма уже куплена.");
			
			spdList(playerid, 0, listitem);

			return SPDF(playerid, 15154, DIALOG_STYLE_MSGBOX, !"Подтверждение покупки фермы", "{FFFFFF}Вы действительно хотите купить {42B02C}ферму №%d{FFFFFF} за {42B02C}%d${FFFFFF}?\nКоличество ячеек для посадки на поле: {42B02C}%d", !"Купить", !"Назад", listitem + 1, FarmData[listitem][farmCost], FarmData[listitem][farmCell]); 
		}

		case 15154:
		{
			if(!response) return false;

			new id = gpdList(playerid, 0);

			if(!GetString(FarmData[id][farmOwner], "Нет"))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Эта ферма уже куплена.");

			else if(PI[playerid][pMoney] < FarmData[id][farmCost])
				return SCM(playerid, COLOR_OLDRED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			
			GiveMoney(playerid, -FarmData[id][farmCost], "покупка фермы");

			SetString(FarmData[id][farmOwner], PN(playerid));
			
			UpdatePlayerDataInt(playerid, "FarmOwner", PI[playerid][pFarmOwner] = id);

			UpdateFarm(id);

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Поздравляем с покупкой! Вы купили ферму {42B02C}№%d{FFFFFF} (помощь по ферме - /farmhelp)", id + 1);
		}

		case 15155:
		{
			if(!response)
				return false;

			switch listitem do
			{
				case 0: return false;
				case 1: return SPDF(playerid, 15156, DIALOG_STYLE_INPUT, !"Продажа фермы игроку", "{FFFFFF}Введите ID игрока и через запятую цену, за которую хотите продать вашу {42B02C}ферму №%d\nПример:{FFFFFF} 294 500000\n{AFAFAF}(допустимая цена: от 500тыс до 1млрд)\n(все улучшения аннулируются)", !"Продать", !"Назад", PI[playerid][pFarmOwner] + 1);
			}
		}

		case 15156:
		{
			if(!response)
				return false;
			
			new target, cost;
			sscanf(inputtextsave,"p<,>dd", target, cost);

			if(PI[playerid][pFarmOwner] == -1 or !GetString(FarmData[PI[playerid][pFarmOwner]][farmOwner], PN(playerid)))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не владелец фермы.");
			
			else if(!IsPlayerOnline(target))
				return false;
			
			else if(!(500000 <= cost <= 1000000000))
				return false;
			
			else if(!(PI[target][pFarmOwner] == -1))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Игрок которому вы хотите продать ферму, уже владеет одной из ферм.");
			
			spdList(target, 0, cost), spdList(target, 1, playerid);

			return SPDF(target, 15157, DIALOG_STYLE_MSGBOX, !"Покупка фермы у игрока", "{42B02C}%s[ID: %d]{FFFFFF} предлагает вам купить у него {42B02C}ферму №%d\n{FFFFFF}Цена: {42B02C}%d$\n{AFAFAF}(все улучшения аннулируются, если они есть)\n\n{FFFFFF}Вы согласны?", !"Купить", !"Отмена", PN(playerid), playerid, PI[playerid][pFarmOwner] + 1, cost);
		}

		case 15157:
		{
			if(!response)
				return false;

			new cost = gpdList(playerid, 0), target = gpdList(playerid, 1), farm = PI[target][pFarmOwner];

			if(!IsPlayerOnline(farm) or !ProxDetectorS(5.0, playerid, target) or !GetString(FarmData[farm][farmOwner], PN(target)) or !(PI[playerid][pFarmOwner] == -1))
				return SendErrorMessage(playerid);

			if(PI[playerid][pMoney] < cost)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

			GiveMoney(playerid, -cost, "Покупка фермы с рук у игрока");
			GiveMoney(target, cost, "Продажа фермы игроку");

			UpdatePlayerDataInt(target, "FarmOwner", PI[target][pFarmOwner] = -1);
			UpdatePlayerDataInt(playerid, "FarmOwner", PI[playerid][pFarmOwner] = farm);

			SetString(FarmData[farm][farmOwner], PN(playerid));
			UpdateFarm(farm);

			SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Поздравляем с покупкой! Вы купили ферму {42B02C}№%d{FFFFFF} у игрока {42B02C}%s за %d$", farm + 1, PN(target), cost);
			SCM(playerid, COLOR_VALIK, !"[Подсказка] Помощь по фермам - /farmhelp");
			return SCMF(target, COLOR_VALIK, "[Информация]{FFFFFF} Вы продали ферму {42B02C}№%d{FFFFFF} игроку {42B02C}%s за %d$", farm + 1, PN(playerid), cost);
		}
		
		case 15339:
		{
			if(!response)
				return false;

			new max_second = sizeof(SecondHand),
				Float:X, Float:Y, Float:Z, bid;

			if(listitem == max_second)
				return false;
			
			else if(listitem < max_second)
				SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Местоположение бизнеса секонд-хенда №%d успешно отмечено в вашем GPS. {AFAFAF}(номер бизнеса: %d)", listitem + 1, bid = SecondHand[listitem][secondBID]),
				X  = BizData[bid][bEnter][0], Y = BizData[bid][bEnter][1], Z = BizData[bid][bEnter][2];
			
			else if(listitem == max_second + 1)
				SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Местоположение склада комисионной одежды успешно отмечено в вашем GPS."),
				X = 2283.4666, Y = -2344.9094, Z = 13.5469;

			return EnableGPSForPlayer(playerid, X,Y,Z);
		}
		case 15160:
		{
			if(!response) 
				return false;
			
			new max_farm = sizeof(FarmData),
				Float:X, Float:Y, Float:Z;

			static	
				GPSname[32];

			if(listitem == max_farm)
				return false;
			
			else if(listitem < max_farm)
				format(GPSname, 15, "фермы №%d", listitem + 1), X = FarmData[listitem][farmPos][0], Y = FarmData[listitem][farmPos][1], Z = FarmData[listitem][farmPos][2];

			else if(listitem == max_farm + 1)
				GPSname = "бизнеса аренды сельхоз. техники", X = 170.2670, Y = -21.3600, Z = 2.5850;

			else if(listitem == max_farm + 2)
				GPSname = "ближайшей водокачки", X = 861.7285, Y = 678.9048, Z = 11.8915;

			else if(listitem == max_farm + 3)
				GPSname = "дяди Сэма", X = -142.1979, Y = -222.0515, Z = 1.4219;

			EnableGPSForPlayer(playerid, X,Y,Z);
			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Местоположение %s успешно отмечено в вашем GPS.", GPSname);
		}

		case 15188:
		{
			if(!response)
				return false;

			switch listitem do
			{
				case 0:
					global_str = !"{00ff00}[ Общая информация ]\n\n{ffffff}На фермах можно выращивать овощи и продавать их городскому барыге (в будущем появятся другие точки сбыта урожая)\n\nПокупать, так же продавать ферму государству или игроку можно только в Мэрии ЛС у консультанта по работе с фермами.\nЦены на фермы разнятся из-за того что все они разных размеров\n(размер фермы - подразумевается количество ячеек на ферме под посадку, то есть сколько растений одновременно может выращиваться)\n\n{ffff00}На каждой ферме есть служебное помещение, амбар и бочка с запасом воды.\n{ffffff}В служебном помещении владелец может:\n{cccccc}- смотреть всю информацию о ферме;\n{cccccc}- брать/класть деньги в сейф фермы (они идут только на оплату рабочим);\n\t{ff0000}(владелец должен следить за наличкой в сейфе, если там будет не хватать на оплату рабочим, то они не смогут работать)\n{cccccc}- создавать и изменять задания для рабочих;\n{ffffff}А потенциальный работник может начать или завершить работу на ферме.\n{ffffff}Так же посмотреть какие сейчас есть задания для рабочих, чтобы знать что ему нужно делать.\n\n{ffff00}В амбаре храняться саженцы, инструменты для работы и уже собранный урожай.\n{ffffff}Класть саженцы и инструменты в амбар может кто угодно (до этого их нужно купить в сельскохозяйственном магазине)\nЗабрать всё это с амбара сможет только владелец фермы, рабочие могут брать только по 1 предмету для работы на этой ферме.\n\n{ffff00}Бочка с водой расчитана на 750 литров. \n{ffffff}Чтобы пополнить запасы воды, нужно взять личный автомобиль и поехать к бизнесу аренды сельскохозяйственной техники.\nТам будут стоять бочки, вам нужно арендовать одну из них и отправится на водокачку (/gps > фермы > водокачка).\nНабираем воду и едем на свою ферму (или любую другую, этим может заниматься кто угодно, вода бесплатная) и переливаем в бочку, которая стоит на ферме.\nВода на ферме нужна для полива растений, за каждый полив расходуеться 5 литров, ёмкость арендованной бочки: 300 литров.\n\n{ffff00}Принцип работы фермы:\n{ffffff}Владелец фермы закупает саженцы, а так же необходимые инструменты для работы на их же ферме и отвозит их в амбар.\nЗатем создаёт задания для рабочих (максимум можно создать до 20 заданий, одинаковые задания нельзя создавать, можно просто изменить существующее).\nНа ферму приходит человек и устраивается на работу, затем смотрит текущий список заданий и идёт в амбар за нужным ему предметом (саженец либо инструмент)\nЗатем он идёт на поле выполнять любое из существующих заданий, выплата зарплаты идёт сразу после каждого выполнения задания.\n\n{ffff00}Этапы роста растений:\n{cccccc}1) взять лопату и пойти выкопать ямку для посадки конкретного растения (саженца)\n2) взять нужный саженец и посадить его в выкопаную ямку\n3) взять ведро, пойти к бочке набрать там ведро воды и полить то место где вы посадили (любое растение, где требуется полив)\n4) взять грабли и прополоть ячейку\n.. пройдёт некоторые время(от 5 до 15 минут, взависимости от типа растения) и нужно будет\n5) взять лопату и собрать урожай, так же обязательно отнести его в амбар\n\n{ffffff}Владелец фермы отвозит собранный урожай городскому барыге дяде Сэму, он приезжает по вечерам из города и стоит перед мостом в Лос Сантос.\nТам в городе огромный спрос на наш урожай, поэтому весь собранный урожай можно продавать дяде Сэму.";

				case 1:
					global_str = !"{00ff00}[ Как работать на ферме? ]\n\n{ffffff}Откройте /gps и выберите пункт \"Фермы\", это список всех ферм с важной для вас информацией.\nТам информация о количестве занятых и свободных рабочих местах, количестве заданий и средней зарплате, которую предлагает владелец фермы.\nВыбирайте ферму которая вам больше нравится и отправляйтесь на неё по метке на карте.\n\nПриехавши на ферму вам нужно зайти в служебное помещение и начать работу (внутри помещения есть пикап).\nЗатем на этом же пикапе посмотрите текущие задания, выбирайте которое вам больше нравится и начинайте работать!\n\n{ffff00}[ Этап выкапывания ямки ]\n{cccccc}Если в задании указано, что нужно выкопать ямку под какое-то растение, значит вам нужно пойти в амбар, взять там лопату, \nзатем найти на поле свободное место и нажать на нём ALT, тогда у вас запуститься анимация выкапывания ямки.\nСпустя несколько секунд ямка будет выкопана и теперь в эту ячейку можно посадить саженец под который вы выкапывали ямку.\nЛопату можно вернуть обратно в амбар.\n\n{ffff00}[ Этап посадки саженца ]\n{cccccc}Если в задании указано, что нужно посадить какой-то саженец, значит вам нужно пойти в амбар, взять там нужный саженец,\nзатем найти на поле место где уже выкопана ямка(для посадки саженца который вы взяли), и нажать на нём ALT и запустится анимация посадки саженца.\nСпустя несколько секунд саженец будет посажен(на ячейке появится объект растения), теперь эту ячейку нужно будет полить.\n\n{ffff00}[ Этап полива ]\n{cccccc}Если в задании указано, что нужно полить какой-то саженец, значит вам нужно пойти в амбар, взять там ведро, затем подойти к бочке с водой\nи нажать ALT, тогда начнётся набор воды в ведро. Спустя несколько секунд система оповестит вас о том, что ведро набрано дополна.\nПосле набор воды вам нужно найти на поле место где требуется полив и нажать на нём ALT и запустится анимация полива саженца.\nСпустя несколько секунд саженец будет полит(на ячейке изменится текст), теперь эту ячейку нужно будет прополоть.\n\n{ffff00}[ Этап прополки ]\n{cccccc}Если в задании указано, что нужно прополоть какой-то саженец, значит вам нужно пойти в амбар, взять там грабли,\nзатем найти на поле место где требуется прополка и нажать на нём ALT и запустится анимация прополки.\nСпустя несколько секунд прополка будет завершена(на ячейке изменится текст и будет написано оставшееся время роста).\nЗавершение этого этапа запускает рост саженца, а это длится от 5 до 15 минут, взависимости от типа растения.\nА пока можете подождать или повыполнять другие задания, а если таковых нет, то можете перейти работать на другую ферму, где есть задания.\n\n{ffff00}[ Этап сбора урожая ]\n{cccccc}Если в задании указано, что нужно собрать урожай какого-то растения, значит вам нужно пойти в амбар, взять там лопату,\nзатем найти на поле зрелый урожай растения(которое указано в задании) и нажать на нём ALT и запустится анимация сбора урожая.\nСпустя несколько секунд сбор урожая будет завершен(ячейка снова станет свободной), вам обязательно нужно отнести собранный урожай и лопату в амбар.\n\n\n{ff0000}ВАЖНО: {ffffff}Вы не можете выполнять работу, которой нет в заданиях фермы! Можно делать только то, что есть в списке заданий.\n{ff0000}ВАЖНО: {ffffff}Советуем не сориться с владельцами ферм, потому что они могут занести вас в чёрный список и вы больше не сможете работать на их ферме.\n{ff0000}ВАЖНО: {ffffff}Зарплата начисляется вам сразу же после каждого выполнения задания (её не нужно нигде забирать)\n\n{00ff00}Успехов вам!";

				case 2:
					global_str = !"{00ff00}[ Как управлять фермой? ]\n\n{ffff00}[ Управление фермой ] {ffffff}(доступно из служебного помещения вашей фермы на пикапе)\n{cccccc}- информация о ферме, о работниках, которые на данный момент работают у вас.\n- положить и забрать деньги из сейфа ферма (деньги из сейфа уходят на оплату труда рабочим, если будет не хватать - работа на ферме будет простаивать)\n- создавать задания для рабочих, изменять уже созданные задания(изменять зарплату или количество выполнений задания), а так же удалять задания.\n\n{ffff00}[ Доступные команды ]\n{ffffff}/farmlock {cccccc}- закрыть или открыть ферму (нужно находится возле дверей в служебное помещение).\n{ffffff}/farmuninvite [ид игрока] {cccccc}- принудительно завершить работу игроку на вашей ферме.\n{ffffff}/farmbl [ид игрока] {cccccc}- занести игрока в черный список вашей фермы (он не сможет работать у вас).\n{ffffff}/farmunbl [ид игрока] {cccccc}- вынести игрока из чёрного списка вашей фермы.\n{ffffff}/farmtext [текст] {cccccc}- изменить текст на доске объявлений (если куплено улучшение).\n\n{ffff00}[ Создание задания ] {ffffff}(после создания задания рабочие сразу могут приступать к его выполнению)\n{cccccc}1) Выбрать действие: выкопка ямки, посадка саженца, полив, прополка, сбор урожая.\n2) Выбрать тип растения, к которому будет применяется это действие.\n3) Указать количество выполнений этого задания. (если вам нужно вырастить 3 морковки, значит нужно указывать количество: 3)\n4) Указать зарплату за каждое выполнения этого задания. (если вы указываете 50$ и количество выполнений будет 3 раза, то на оплату труда будет потрачено всего 150$)\n\n{ffff00}[ Пример создания заданий ] \n{ffffff}Допустим, что вы хотите вырастить {D8F781}3 куста Лёна{ffffff}, значит вам нужно создать такие задания с такими параметрами:\n{cccccc}1) (Выкопать ямку) для посадки {D8F781}Лёна {cccccc}(количество выполнений: 3)\n2) (Посадить саженец) {D8F781}Лёна {cccccc}(выполнений: 3)\n3) (Полить саженец) {D8F781}Лёна {cccccc}(выполнений: 3)\n4) (Прополоть саженец) {D8F781}Лёна {cccccc}(выполнений: 3)\n5) (Собрать урожая) {D8F781}Лёна {cccccc}(выполнений: 3)\n\n{ffff00}[ Сбыт собранного урожая ]\n{cccccc}Пока что сбыт урожая возможен только дяде Сэму (городскому барыге), он приезжает из города около 17:00 и стоит на мосту в Лос Сантос до 21:00.\nВам нужно забрать из амбара собранный урожай (в карманы много не получится поместить, поэтому воспользуйтесь багажником автомобиля).\nОтправляйтесь к дяде Сэму и продавайте ему весь свой собранный урожай, у них в городе просто сумасшедший спрос на наши овощи!\n\n\n{ff0000}ВАЖНО: {ffffff}Порядок заданий если что вообще не важен, главное чтобы были учтены все этапы роста.\n{ff0000}ВАЖНО: {ffffff}Если одного из этапов не будет, то вы не сможете получить готовый урожай этого растения.\n\n{ff0000}ВАЖНО: {ffffff}У вас не получится создать несколько одинаковых заданий (зачем создавать одинаковые, если можно изменить количество выполнений или зарплату)\n{ff0000}ВАЖНО: {ffffff}Максимум можно создать только 20 заданий, и на каждое задание не более 10 выполнений. (это сделано для того, что бы владелец активно принимал участие в работе своей ферме)\n\n{ff0000}ВАЖНО: {ffffff}Следите за суммой денег в сейфе фермы, чтобы всегда хватало на оплату труда рабочим, иначе они просто не смогут работать.\n\n{ff0000}ВАЖНО: {ffffff}Следите за амбаром, чтобы там всегда были те саженцы, для которых вы создаёте задания, иначе эти задания не смогут выполнять.\n{ff0000}ВАЖНО: {ffffff}Не забывайте про инструменты, лучше закупить их побольше, чтобы работа проходила быстрее и рабочие не ждали друг друга.\n\n{00ff00}Успехов вам!";

				case 3:
					global_str = !"{00ff00}[ Список растений и их время роста ]\n\n{ffffff}1. Рожь {cccccc}(растёт 5 минут)\n{ffffff}2. Морковь {cccccc}(растёт 6 минут)\n{ffffff}3. Картофель {cccccc}(растёт 8 минут)\n{ffffff}4. Лён {cccccc}(растёт 6 минут)\n{ffffff}5. Хлопок {cccccc}(растёт 5 минут)\n{ffffff}6. Пшеница {cccccc}(растёт 8 минут)\n{ffffff}7. Огурцы {cccccc}(растёт 5 минут)\n{ffffff}8. Помидоры {cccccc}(растёт 8 минут)\n{ffffff}9. Белый виноград {cccccc}(растёт 8 минут)\n{ffffff}10. Чай {cccccc}(растёт 10 минут)\n{ffffff}11. Пряные травы {cccccc}(растёт 12 минут)\n{ffffff}12. Канабис {cccccc}(растёт 5 минут)\n{ffffff}13. Кукуруза {cccccc}(растёт 8 минут)\n{ffffff}14. Фиолетовый виноград {cccccc}(растёт 10 минут)\n{ffffff}15. Лечебная трава {cccccc}(растёт 10 минут)\n{ffffff}16. Подсолнух {cccccc}(растёт 10 минут)";
			}

			return SPD(playerid, 15189, DIALOG_STYLE_MSGBOX, !"{00ff00}Фермерская деятельность", global_str, !"Назад", !"Закрыть");
		}
		
		case 15189:
		{
			if(!response)
				return false;

			return callcmd::farmhelp(playerid);	
		}
		
		case 211:
		{
		    if(!response)
		    	return false;

            if(GetPVarInt(playerid, "alogin"))
            {
                if(!strlen(inputtextsave) || GetString(inputtextsave, "default") || strlen(inputtextsave) < 5 || strlen(inputtextsave) > 16) 
					return SPD(playerid, 211, DIALOG_STYLE_PASSWORD, !"Авторизация", !"{FFFFFF}Придумайте и введите админ-пароль\n\nПримечание:\n\t{FF6347}- Пароль должен состоять из латинских букв и цифр\n\t- Размер пароля может быть от 5 до 16 символов", !"Ввод", !"Отмена");
             
			    SetString(AdminInfo[playerid][admPassword], inputtextsave);
                UpdatePlayerDataStr(playerid, "AdminPassword", AdminInfo[playerid][admPassword]);
                DeletePVar(playerid, "alogin");
                SPD(playerid, 211, DIALOG_STYLE_PASSWORD, !"Админ-панель", !"{FFFFFF}Введите админ-пароль", !"Ок", !"Отмена");
            }
			else
			{
				if(!strlen(inputtextsave))
				   	return SPD(playerid, 211, DIALOG_STYLE_PASSWORD, !"Авторизация", !"{FFFFFF}Введите админ-пароль", !"Ок", !"Отмена");

                mysql_format(mysql, global_str, 150, "SELECT * FROM admin WHERE name = '%s'", PN(playerid));
				mysql_tquery(mysql, global_str, "AloginAuth", "is", playerid, inputtextsave);
			}
		}

		case 212: if(response) callcmd::go_fished(playerid, "");
		case 216:
	    {
			if(response) SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски\n \nВзять организационное оружие","Выбор","Назад");
			return 1;
	 	}
		case 217:
	    {
			if(response)
	  		{
                new team = GetTeamID(playerid);
                switch(listitem)
	  		    {
					case 0: SPD(playerid,218,1,"","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите положить в Общак\n\n","Положить","Назад");
					case 1: SPD(playerid,219,1,"","\n\n{FFFFFF}Введите кол-во патронов которое хотите положить в Общак\n\n","Положить","Назад");
					case 2:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,220,1,"","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите достать с Общака\n\n","Взять","Назад");
					    else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
					case 3:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,221,1,"","\n\n{FFFFFF}Введите кол-во патронов которое хотите достать с Общака\n\n","Взять","Назад");
						else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
     				case 4: SPD(playerid,2666,1,"","\n\n{FFFFFF}Введите кол-во канистр которое хотите положить в Общак\n\n","Положить","Назад");
					case 5:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,2667,1,"","\n\n{FFFFFF}Введите кол-во канистр которое хотите достать с Общака\n\n","Взять","Назад");
						else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
					case 6: SPD(playerid,2668,1,"","\n\n{FFFFFF}Введите кол-во инструментов которое хотите положить в Общак\n\n","Положить","Назад");
					case 7:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,2669,1,"","\n\n{FFFFFF}Введите кол-во инструментов которое хотите достать с Общака\n\n","Взять","Назад");
						else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
					case 8: SPD(playerid,2670,1,"","\n\n{FFFFFF}Введите кол-во масок которое хотите положить в Общак\n\n","Положить","Назад");
					case 9:
					{
                        if(OrgInfo[team][oOb4ak]==1)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер вашей организации закрыл общак!");
						if(PI[playerid][pRank] > 4) SPD(playerid,2671,1,"","\n\n{FFFFFF}Введите кол-во масок которое хотите достать с Общака\n\n","Взять","Назад");
						else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Доступно с 5 ранга");
					}
					case 10: SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски\n \nВзять организационное оружие","Выбор","Назад");
					case 11:
					{
                        if(IsAtGang(playerid))_GiveGun(playerid, 5, 1);
                        if(PI[playerid][pMember][0]==TEAM_LCN)_GiveGun(playerid, 2, 1);
                        if(PI[playerid][pMember][0]==TEAM_BIKERS)_GiveGun(playerid, 7, 1);
                        if(PI[playerid][pMember][0]==TEAM_YAKUZA)_GiveGun(playerid, 8, 1);
                        if(PI[playerid][pMember][0]==TEAM_RM)_GiveGun(playerid, 15, 1);
					}
	  		    }
			}
			return 1;
		}
		case 8245:
		{
			if(!response) return 0;
			switch(listitem)
			{
				case 0: SPD(playerid, 8245, DIALOG_STYLE_LIST, "", "Выберите действие\n{67B355}Положить\n{B35555}Снять", "Выбрать", "Отмена");
				case 1: SPD(playerid, 8246, DIALOG_STYLE_INPUT, "{BFBBBA}Шкаф > Положить", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");
				case 2: SPD(playerid, 8247, DIALOG_STYLE_INPUT, "{BFBBBA}Шкаф > Снять", "{FFFFFF}Введите количество, которое хотите снять", "Выбрать", "Назад");			}
		}
		case 8246:
		{
			if(!response) return 0;
			new id = HouseEntered[playerid], count = strval(inputtextsave);
			if(id == -1 || !GetString(PN(playerid),HouseInfo[id][hOwner])) return 0;
			if(!strlen(inputtextsave) || count <= 0 || count > PI[playerid][pMoney] || count+HouseInfo[id][hMoney] < 0) return 0;
			GiveMoney(playerid, -count);
			HouseInfo[id][hMoney] += count;
			f(global_str, 100, "[Информация]{FFFFFF} Вы положили в шкаф $%d", count);
			SCM(playerid, COLOR_VALIK, global_str);
			f(global_str, 200, "UPDATE `houses` SET `Money` = '%d' WHERE `ID` = '%d'", HouseInfo[id][hMoney], HouseInfo[id][hID]);
			mysql_tquery(mysql, global_str);
			f(global_str, 25, "$%08d", HouseInfo[id][hMoney]);
			if(Int_GetPlayerData(playerid, "OtherInventOpen")) PlayerTextDrawSetString(playerid, OtherInvBox[playerid][2], global_str);
		}
		case 8247:
		{
			if(!response) return 0;
			new id = HouseEntered[playerid], count = strval(inputtextsave);
			if(id == -1 || !GetString(PN(playerid),HouseInfo[id][hOwner])) return 0;
			if(!strlen(inputtextsave) || count <= 0 || count > HouseInfo[id][hMoney]) return 0;
			GiveMoney(playerid, count);
			HouseInfo[id][hMoney] -= count;
			f(global_str, 100, "[Информация]{FFFFFF} Вы успешно достали из шкафа $%d", count);
			SCM(playerid, COLOR_VALIK, global_str);
			f(global_str, 200, "UPDATE `houses` SET `Money` = '%d' WHERE `ID` = '%d'", HouseInfo[id][hMoney], HouseInfo[id][hID]);
			mysql_tquery(mysql, global_str);
			f(global_str, 25, "$%08d", HouseInfo[id][hMoney]);
			if(Int_GetPlayerData(playerid, "OtherInventOpen")) PlayerTextDrawSetString(playerid, OtherInvBox[playerid][2], global_str);
		}
		case 8248:
		{
			if(!response or PickInvent[playerid] == InventoryMaxSlot+1 or !(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)) 
				return false;

			new id = PickInvent[playerid], count = strval(inputtextsave);

			if(!strlen(inputtextsave) || count <= 0 || count > Inventory[playerid][1][id]) 
				return SPD(playerid, 8248, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");

			switch Int_GetPlayerData(playerid, "OtherInventOpen") do
			{
				case 1:
				{
					if(HouseEntered[playerid] == -1) return 0;
					AddItemHouse(playerid, HouseEntered[playerid], Inventory[playerid][0][id], count, Inventory[playerid][2][id], Inventory[playerid][3][id], Inventory[playerid][4][id], Inventory[playerid][5][id]);
					SaveItemHouse(HouseEntered[playerid]);
				}
				case 2:
				{
					if(musorka[playerid] == -1) return 0;
					AddItemMusor(playerid, musorka[playerid], Inventory[playerid][0][id], count, Inventory[playerid][2][id], Inventory[playerid][3][id], Inventory[playerid][4][id], Inventory[playerid][5][id], 3540);
				}
				case 3:
				{
					if(!IsValidVehicle(trunk[playerid])) return 0;
					AddItemTrunk(playerid, trunk[playerid], Inventory[playerid][0][id], count, Inventory[playerid][2][id], Inventory[playerid][3][id], Inventory[playerid][4][id], Inventory[playerid][5][id]);
					if(IsAOwnableCar(trunk[playerid])) SaveTrunk(trunk[playerid]);
				}
			}
			ClearItem(playerid, id, count);
			PickInvent[playerid] = InventoryMaxSlot+1;
		}
		case 8251:
		{
			if(!response) return 0;
			if(PickInvent[playerid] == InventoryMaxSlot+1) return 0;

			new id = PickInvent[playerid], count = strval(inputtextsave);

			switch Int_GetPlayerData(playerid, "OtherInventOpen") do
			{
				case 1:
				{
					new houseid = HouseEntered[playerid];

					if(houseid == -1) return 0;

					if(!strlen(inputtextsave) || count <= 0 || count > HouseInfo[houseid][hItemCount][id]) return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
			
					AddItem(playerid, HouseInfo[houseid][hItem][id], count, HouseInfo[houseid][hItemColor][id], HouseInfo[houseid][hItemIdentificator][id], HouseInfo[houseid][hItemLevel][id], HouseInfo[houseid][hItemProc][id]);
	
					HouseInfo[houseid][hItemCount][id] -= count;

					amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из шкафа %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), houseid, ItemsInfo[HouseInfo[houseid][hItem][id]][itemName], HouseInfo[houseid][hItem][id], count);

					if(HouseInfo[houseid][hItemCount][id] <= 0) HouseInfo[houseid][hItem][id]  = HouseInfo[houseid][hItemCount][id] = HouseInfo[houseid][hItemColor][id] = HouseInfo[houseid][hItemLevel][id] = HouseInfo[houseid][hItemProc][id] = 0;
			
					InventSlotOtherUpdateAll(houseid, 1, HouseInfo[houseid][hItem][id], PickInventSlot[playerid], id);

					SaveItemHouse(houseid);

				}
				case 2:
				{
					new mid = musorka[playerid];

					if(mid == -1) return 0;

			        if(MusorInfo[mid][mItemTimer][id] > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя забрать из мусорки, так как он недавно был выкинут и заблокирован на 1 час!");
					if(!strlen(inputtextsave) || count <= 0 || count > MusorInfo[mid][mItemCount][id]) return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
			        
					AddItem(playerid, MusorInfo[mid][mItem][id], count, MusorInfo[mid][mItemColor][id], MusorInfo[mid][mItemIdentificator][id], MusorInfo[mid][mItemLevel][id], MusorInfo[mid][mItemProc][id]);
					
					MusorInfo[mid][mItemCount][id] -= count;

					amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из мусорки %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), mid, ItemsInfo[MusorInfo[mid][mItem][id]][itemName], MusorInfo[mid][mItem][id], count);
					SAMF(COLOR_RED, "Игрок %s[%i] взял из мусорки №%i предмет инвентаря %s [ %i, %i ]", PN(playerid), playerid, mid, ItemsInfo[MusorInfo[mid][mItem][id]][itemName], MusorInfo[mid][mItem][id], count);

					if(MusorInfo[mid][mItemCount][id] <= 0) MusorInfo[mid][mItem][id]  = MusorInfo[mid][mItemCount][id] = MusorInfo[mid][mItemColor][id] = MusorInfo[mid][mItemTimer][id] = 0;
			
					InventSlotOtherUpdateAll(mid, 2, MusorInfo[mid][mItem][id], PickInventSlot[playerid], id);
					
				}
				case 3:
				{
					new trunkid = trunk[playerid];

					if(!IsValidVehicle(trunkid)) return 0;

					if(!strlen(inputtextsave) || count <= 0 || count > TrunkInfo[trunkid][tItemCount][id]) return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
			
					AddItem(playerid, TrunkInfo[trunkid][tItem][id], count, TrunkInfo[trunkid][tItemColor][id], TrunkInfo[trunkid][tItemIdentificator][id], TrunkInfo[trunkid][tItemLevel][id], TrunkInfo[trunkid][tItemProc][id]);

					TrunkInfo[trunkid][tItemCount][id] -= count;

					amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из багажника %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), trunkid, ItemsInfo[TrunkInfo[trunkid][tItem][id]][itemName], TrunkInfo[trunkid][tItem][id], count);
					SAMF(COLOR_RED, "Игрок %s[%i] взял из багажника №%i предмет инвентаря %s [ %i, %i ]", PN(playerid), playerid, trunkid, ItemsInfo[TrunkInfo[trunkid][tItem][id]][itemName], TrunkInfo[trunkid][tItem][id], count);

					if(TrunkInfo[trunkid][tItemCount][id] <= 0) TrunkInfo[trunkid][tItem][id]  = TrunkInfo[trunkid][tItemCount][id] = TrunkInfo[trunkid][tItemColor][id] = 0;
			
					InventSlotOtherUpdateAll(trunkid, 3, TrunkInfo[trunkid][tItem][id], PickInventSlot[playerid], id);
					
					if(IsAOwnableCar(trunkid)) SaveTrunk(trunkid);
				}
			}
			PickInvent[playerid] = InventoryMaxSlot+1;
		}
		case 267:
		{
			if(!response) return false;
			
			if(!(PI[playerid][pFrom] == -1)) return SendBotMessage(playerid, !"Вы уже арендуете номер в отели");
			new id = gpdList(playerid, listitem);
			
			if(RoomOtel[id][otRoomOwner] == -1)
			{
				spdList(playerid, 0, id);
				SPD(playerid, 268, DIALOG_STYLE_MSGBOX, !"Аренда номера", "{FFFFFF}Вы собрались арендовать номер.\nСтоимость: {40B02F}$399 в час{FFFFFF}\nПредоплата: {40B02F}$20000{FFFFFF}\n\n{F7C438}Чтобы арендовать номер нажмите \"Аренда\".", !"Аренда", !"Назад");
			}
			else
			{
				f(mysql_string, 64, "SELECT * FROM `hotels_rooms` WHERE ID = %d", id);
				new Cache:result = mysql_query(mysql, mysql_string);
				cache_get_value_index(0, 2, mysql_string, 24);
				SPDF(playerid, 1234, DIALOG_STYLE_MSGBOX, !"Информация", "{FFFFFF}Номер {FF9900}%d.\n{FFFFFF}Владелец: {FF9900}%s", !"Ок", !"", listitem + 1, mysql_string);
				cache_delete(result);
			}
		}
		case 268:
		{
			if(!response) return false;
			
			if(PI[playerid][pMoney] < 20000) return SendBotMessage(playerid, "Извините, но у вас не ъватает денежных средст!");
			
			new id = gpdList(playerid, 0);
			
			RoomOtel[id][otRoomOwner] = PI[playerid][pID];
			PI[playerid][pFrom] = id;
			PI[playerid][pDCTime] = 5;
			
			SCM(playerid, -1, !">> {FF6347}Место спавна автоматически назначен Отель. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
			SCM(playerid, -1, !">> {FF6347}Для управления номером используйте {FFFFFF}/hotel.");
			sendPlayerBattlepassAction(playerid, 0, 2);
			SendBotMessage(playerid, !"Добро пожаловать к нам!");
			
			UpdateOtelRoom(id, PN(playerid));
			
			GiveMoney(playerid, -20000);
			GiveBizMoney(OtelInfo[RoomOtel[id][otRoomOwnerOtel]][otBusiness], 200000);
			
			UpdatePlayerDataInt(playerid, "From", id);
			
			f(mysql_string, 256, "update `hotels_rooms` SET `ownername` = '%s', `ownerid` = '%d' WHERE ID = %d", PN(playerid), PI[playerid][pID], id);
			mysql_query(mysql, mysql_string);
		}
		case 269:
		{
			if(!response) return false;
			SCM(playerid, -1, !">> {FF6347}Место спавна автоматически назначен Отель. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
			SCM(playerid, COLOR_GREY, !"[Подсказка]{FFFFFF} Вы успешно отказались от аренды номера.");
			
			f(mysql_string, 256, "update `hotels_rooms` SET `ownername` = 'The State', `ownerid` = '-1' WHERE ID = %d", PI[playerid][pFrom]);
			mysql_query(mysql, mysql_string);
			
			UpdateOtelRoom(PI[playerid][pFrom], "The State");
			
			PI[playerid][pFrom] = 
			RoomOtel[PI[playerid][pFrom]][otRoomOwner] = -1;
			PI[playerid][pDCTime] = 0;
			
			return UpdatePlayerDataInt(playerid, "From", -1);	
		}
		case 342:
		{
			if(!response) return false;
			switch listitem do
			{
				case 2: return SPDF(playerid, 269, DIALOG_STYLE_MSGBOX, !"Информация", "{FFFFFF}Номер {FF9900}%d.\n{FFFFFF}Владелец: {FF9900}%s ( Вы )\n\n{AFAFAF}Вы хотите отказаться от аренды?", !"Да", !"Нет", PI[playerid][pFrom], PN(playerid));
			}
		}
		case 2670:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2670,1,"Общак","\n\n{FFFFFF}Введите кол-во масок которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1 маски!","Положить","Назад");
  		        if(drugs > GetCount(playerid, 515)) return SPD(playerid,2670,1,"Общак","\n\n{FFFFFF}Введите кол-во масок которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько масок!","Положить","Назад");
	            DeleteItem(playerid, 515, -drugs);
	            OrgInfo[team][oMask] += drugs;
	            f(global_str,sizeof(global_str),"%s положил в общак %d маски(у)",PN(playerid),drugs);
	            SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 2671:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2671,1,"Общак","\n\n{FFFFFF}Введите кол-во масок которое хотите достать с Общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1-ой маски!","Взять","Назад");
  		        if(drugs > OrgInfo[team][oMask]) return SPD(playerid,2671,1,"Общак","\n\n{FFFFFF}Введите кол-во масок которое хотите достать с Общака\n\n{FF0000}Ошибка: В Общаке нет столько масок!","Взять","Назад");
  		        if((GetCount(playerid, 515)+drugs)>3)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете с собой унести больше 3-ех масок!");
	            AddItem(playerid, 515, drugs);
	            OrgInfo[team][oMask] -= drugs;
	            f(global_str,sizeof(global_str),"%s забрал с общака %d маски(у)!",PN(playerid),drugs);
	            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 2667:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2667,1,"Общак","\n\n{FFFFFF}Введите кол-во канистр которое хотите достать с Общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1-ой канистры!","Взять","Назад");
  		        if(drugs > OrgInfo[team][oBenz]) return SPD(playerid,2667,1,"Общак","\n\n{FFFFFF}Введите кол-во канистр которое хотите достать с Общака\n\n{FF0000}Ошибка: В Общаке нет столько канистр с бензином!","Взять","Назад");
	            AddItem(playerid, 516, drugs);
	            OrgInfo[team][oBenz] -= drugs;
	            f(global_str,sizeof(global_str),"%s забрал с общака %d канистру!",PN(playerid),drugs);
	            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 2669:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2669,1,"Общак","\n\n{FFFFFF}Введите кол-во инструментов которое хотите достать с общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1 набора для починки!","Взять","Назад");
  		        if(drugs > OrgInfo[team][oRemont]) return SPD(playerid,2669,1,"Общак","\n\n{FFFFFF}Введите кол-во инструментов которое хотите достать с Общака\n\n{FF0000}Ошибка: В общаке нет столько инструментов!","Взять","Назад");
  		        if((PI[playerid][pRepPack]+drugs)>1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете с собой унести больше 1-го набора для починки!");
	            PI[playerid][pRepPack] += drugs;
	            OrgInfo[team][oRemont] -= drugs;
	            f(global_str,sizeof(global_str),"%s забрал с общака %d набор для починки!",PN(playerid),drugs);
	            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 2666:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2666,1,"Общак","\n\n{FFFFFF}Введите кол-во канистр которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1 канистры!","Положить","Назад");
  		        if(drugs > GetCount(playerid, 516)) return SPD(playerid,2666,1,"Общак","\n\n{FFFFFF}Введите кол-во канистр которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько канистр!","Положить","Назад");
	            DeleteItem(playerid, 516, 1);
	            OrgInfo[team][oBenz] += drugs;
	            f(global_str,sizeof(global_str),"%s положил в общак %d канистру с бензином.",PN(playerid),drugs);
	            SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
		}
		case 2668:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs <= 0) return SPD(playerid,2668,1,"Общак","\n\n{FFFFFF}Введите кол-во инструментов которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1-го инструмента!","Положить","Назад");
  		        if(drugs > PI[playerid][pRepPack]) return SPD(playerid,2668,1,"Общак","\n\n{FFFFFF}Введите кол-во инструментов которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько инструментов!","Положить","Назад");
	            PI[playerid][pRepPack] -= drugs;
	            OrgInfo[team][oRemont] += drugs;
	            f(global_str,sizeof(global_str),"%s положил в общак %d набор для починки.",PN(playerid),drugs);
	            SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
	            UpdateDorm(team);
	            SaveOrg(team);
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
    	case 218:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs > 0)
	  		    {
	  		        if(drugs <= GetCount(playerid, 510))
	  		        {
	  		            if(OrgInfo[team][oDrugs] + drugs <= 5000)
	  		            {
		  		            DeleteItem(playerid, 510, drugs);
		  		            OrgInfo[team][oDrugs] += drugs;
		  		            f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы положили %dг наркотиков в Общак",drugs);
		  		            SCM(playerid,COLOR_VALIK,global_str);
		  		            f(global_str,sizeof(global_str),"%s положил в общак %d наркотиков.",PN(playerid),drugs);
		  		            SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
		  		            UpdateDorm(team);
		  		            SaveOrg(team);
	  		            }
	  		            else SPD(playerid,218,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите положить в Общак\n\n{FF0000}Ошибка: Столько в общак не поместится","Положить","Назад");
	  		        }
	  		        else SPD(playerid,218,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько наркотиков","Положить","Назад");
	  		    }
	  		    else SPD(playerid,218,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1г","Положить","Назад");
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 219:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new mats = strval(inputtextsave);
	  		    if(mats > 0)
	  		    {
	  		        if(mats <= GetCount(playerid, 511))
	  		        {
	  		            if(OrgInfo[team][oMats] + mats <= 50000)
	  		            {
		  		            DeleteItem(playerid, 511, mats);
		  		            OrgInfo[team][oMats] += mats;
		  		            f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы положили %d патронов в Общак",mats);
		  		            SCM(playerid,COLOR_VALIK,global_str);
		  		            f(global_str,sizeof(global_str),"%s положил в общак %d патронов.",PN(playerid),mats);
		  		            SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
		  		            UpdateDorm(team);
		  		            SaveOrg(team);
	  		            }
	  		            else SPD(playerid,219,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите положить в Общак\n\n{FF0000}Ошибка: Столько в общак н поместится","Положить","Назад");
	  		        }
	  		        else SPD(playerid,219,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите положить в Общак\n\n{FF0000}Ошибка: У вас нет столько патронов","Положить","Назад");
	  		    }
	  		    else SPD(playerid,219,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите положить в Общак\n\n{FF0000}Ошибка: Нельзя ложить меньше 1 патрона","Положить","Назад");
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		case 220:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new drugs = strval(inputtextsave);
	  		    if(drugs > 0)
	  		    {
	  		        if(drugs <= OrgInfo[team][oDrugs])
	  		        {
						AddItem(playerid, 510, drugs);
	  		            OrgInfo[team][oDrugs] -= drugs;
	  		            f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы достали %dг наркотиков с Общака",drugs);
	  		            SCM(playerid,COLOR_VALIK,global_str);
	  		            f(global_str,sizeof(global_str),"%s забрал с общака %dг. наркотиков!",PN(playerid),drugs);
	  		            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	  		            UpdateDorm(team);
	  		            SaveOrg(team);
	  		        }
	  		        else SPD(playerid,220,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите достать с Общака\n\n{FF0000}Ошибка: В Общаке нет столько наркотиков","Взять","Назад");
	  		    }
	  		    else SPD(playerid,220,1,"Общак","\n\n{FFFFFF}Введите кол-во наркотиков которое хотите достать с Общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1г","Взять","Назад");
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
 		}
		case 221:
	    {
			if(response)
	  		{
	  		    new team = GetTeamID(playerid);
	  		    new mats = strval(inputtextsave);
	  		    if(mats > 0)
	  		    {
	  		        if(mats <= OrgInfo[team][oMats])
	  		        {
	  		            if((GetCount(playerid, 511) + mats) > 2000) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не сможете унести с собой больше 2000 патронов");
	  		            AddItem(playerid, 511, mats);
	  		            OrgInfo[team][oMats] -= mats;
	  		            f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы достали %d патронов с Общака",mats);
	  		            SCM(playerid,COLOR_VALIK,global_str);
	  		            f(global_str,sizeof(global_str),"%s забрал с общака %d патронов!",PN(playerid),mats);
	  		            SendTeamMessage(GetTeamID(playerid),COLOR_GREY,global_str);
	  		            UpdateDorm(team);
	  		            SaveOrg(team);
	  		        }
	  		        else SPD(playerid,221,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите достать с Общака\n\n{FF0000}Ошибка: В Общаке нет столько патронов","Взять","Назад");
	  		    }
	  		    else SPD(playerid,221,1,"Общак","\n\n{FFFFFF}Введите кол-во патронов которое хотите достать с Общака\n\n{FF0000}Ошибка: Нельзя достать меньше 1 патрона","Взять","Назад");
	  		}
	  		else SPD(playerid,217,2,"Общак","{42B02C}-{FFFFFF} Положить наркотики\n{42B02C}-{FFFFFF} Положить патроны\n{42B02C}-{FFFFFF} Достать наркотики\n{42B02C}-{FFFFFF} Достать патроны\n{42B02C}-{FFFFFF} Положить канистру\n{42B02C}-{FFFFFF} Достать канистру\n{42B02C}-{FFFFFF} Положить наборы для починки\n{42B02C}-{FFFFFF} Достать наборы для починки\n{42B02C}-{FFFFFF} Положить маски\n{42B02C}-{FFFFFF} Достать маски","Выбор","Назад");
	  	}
		
		case 900:
	    {
			if(response)
	  		{
	  		    if(!strlen(inputtextsave)) return SPD(playerid,0,0,!"","Ошибка.", !"Закрыть","");
		        new money = strval(inputtextsave);

		        if(money >= 1 && PI[playerid][pVirMoney] >= money)
		        {
		            if(money<3000)
					{
						GiveMoney(playerid, money*20000, "обмен доната на виртуальную валюту.");
						f(global_str,sizeof(global_str),"{FFFFFF}Вы успешно обменяли {BE2D2D}%d{FFFFFF} AZ-coins на {BE2D2D}%d${FFFFFF}.",money,money*11000);
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					}
		            else
		            {
		                GiveMoney(playerid, money*20000, "обмен доната на виртуальную валюту.");
		                f(global_str,sizeof(global_str),"{FFFFFF}Вы успешно обменяли {BE2D2D}%d{FFFFFF} AZ-coins на {BE2D2D}%d$.{FFFFFF}\n\n{BE2D2D}Внимание!\n\n{FFFFFF}За обмен который составляет выше {BE2D2D}3000{FFFFFF} AZ-coins вы\nполучаете дополнительный бонус {BE2D2D}250{FFFFFF} az coin's.",money,money*11000);
						SPD(playerid,0,0,!"",global_str, !"Закрыть","");
		                PI[playerid][pVirMoney]+=250;
		            }
		            PI[playerid][pVirMoney]-=money;
		        }
		        else SPD(playerid,0,0,!"","{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-coins.\n", !"Закрыть","");
			}
		}
		
		case 4450:
		{
			if(!response) return DeletePVar(playerid, "object_edit_id");
			new id = Int_GetPlayerData(playerid, "object_edit_id");
			if(listitem == 5) return SPDF(playerid, 4452, DIALOG_STYLE_MSGBOX, !"Подтверждение", "{FFFFFF}Вы действительно хотите убрать предмет {FFFF00}\'%s\'{FFFFFF} и положить его к себе в инвентарь?", !"Забрать", !"Назад", ItemsInfo[BH_Object[id][objItemID]][itemName]);
			else if(listitem == 4) 
				SetPVarInt(playerid, "EditObjectHouse", true),
				SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Чтобы сохранить изменение позиции - нажмите на дискету, чтобы отменить - нажмите ESC."),
				EditDynamicObject(playerid, BH_Object[id][objID]);
		}
		
		case 4452:
		{
			if(!response) return DeletePVar(playerid, "object_edit_id");
			new id = Int_GetPlayerData(playerid, "object_edit_id");
			DeletePVar(playerid, "object_edit_id");
			f(mysql_string, 256, "DELETE FROM `bh_objects` WHERE ID = '%d'", BH_Object[id][objBaseID]);
			mysql_tquery(mysql, mysql_string);
			DestroyDynamicObject(BH_Object[id][objID]);
			AddItem(playerid, BH_Object[id][objItemID], 1);
			BH_Object[id][objHouseID] = BH_Object[id][objBizID] = 0;
		}

		case 8990:
		{
			if(!response)
				return false;

			else if(PI[playerid][pInvCell] >= InventoryMaxSlot)
				return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас максимальное количество ячеек");
			
			else if(PI[playerid][pVirMoney] < 500)
				return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас не хватает AZ Coins.");
			
			GiveDonate(playerid, -500);
			
			PI[playerid][pInvCell] += 6;

			if(PI[playerid][pInvCell] > InventoryMaxSlot)
				PI[playerid][pInvCell] = InventoryMaxSlot;

			UpdatePlayerDataInt(playerid, "InvCell", PI[playerid][pInvCell]);
			GameTextForPlayer(playerid, !"Successful", 0, 1);
			return SPD(playerid, 0, 0, !"", !"{FFFFFF}- Поздравляем!\nТеперь вы владелец улучшения {FF6347}'Дополнительные 6 ячеек'", !"Окей", !"");
		}

		case 4451:
		{
			if(!response) return 1;
			if(GetInvSet(playerid) >= PI[playerid][pInvCell]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
			new i = Int_GetPlayerData(playerid,"PrizeMasI"),id = Int_GetPlayerData(playerid,"PrizeMasID"),td;
			if(ContMasTake[id][i]) return SCM(playerid, COLOR_VALIK, "[Container-System]{FFFFFF} Вы уже забрали данный приз!");
			switch(i)
			{
				case 0: td = 32;
				case 1: td = 34;
				case 2: td = 36;
				case 3: td = 59;
				case 4: td = 61;
				case 5: td = 63;
			}
		//	if(ContMas[id][i] != 592) AddItem(playerid, ContMas[id][i], ContainerInfo[id][cPrizeCol][i]);
		//	else GiveMoney(playerid, ContainerInfo[id][cPrizeCol][i]);
			ContMasTake[id][i] = 1;
			if(Int_GetPlayerData(playerid,"contOPEN"))
			{
				PlayerTextDrawHide(playerid, ContPrize[playerid][td]);
				PlayerTextDrawColor(playerid, ContPrize[playerid][td], 0xFF0000FF);
				ShowPlayerTD(playerid, ContPrize[playerid][td]);
			}
		}

		case 8991:
	    {
			if(!response)
		        return false;

			if(FP_Data[playerid][F_FAMILY_ID] == -1)
				return SCM(playerid, COLOR_OLDRED, "[Ошибка]{ffffff} Вы не состоите в 1-й из семей");

			if(PI[playerid][pVirMoney] < DonateInfo_data[320][data_Cost])
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-coins!");

			SQL("UPDATE family SET `reputation` = `reputation` + 1000 WHERE ID = %d;", FP_Data[playerid][F_FAMILY_ID]);
			SCM(playerid, COLOR_VALIK, "[Информация]{ffffff} Вы приобрели 1.000 репутации для семьи.");

			return GiveDonate(playerid, -DonateInfo_data[320][data_Cost]);
		}

		case 902:
	    {
			if(response)
	  		{
	  		    if(!strlen(inputtextsave))
				  return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Ошибка.", !"Закрыть", !"");

		        new EXP = strval(inputtextsave);

		        if(EXP > 1000) 
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-coins.\n", !"Закрыть", !"");
		        
				if(EXP >= 1 && PI[playerid][pVirMoney] >= EXP*DonateInfo_data[318][data_Cost])
		        {
		            f(global_str, sizeof(global_str), "{FFFFFF}Вы успешно обменяли {FFD93B}%d {FFFFFF}AZ-coins\nна {FFD93B}%d EXP.", EXP * DonateInfo_data[318][data_Cost], EXP);
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
		            PI[playerid][pExp] += EXP;
		            CheckNextLevel(playerid);
					GiveDonate(playerid, -EXP * DonateInfo_data[318][data_Cost]);
		        }
		        else SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{BE2D2D}Произошла ошибка.Возможно одна из них:{FFFFFF}\n\n- Введено некоректное число\n- У вас недостаточно AZ-coins.\n", !"Закрыть", !"");
			}
		}
		case 903: 
		{
		    if(!response)
		        return false;

			if(PI[playerid][pVirMoney] < 800)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-coins!");

            if(!CheckPhones(playerid))
				return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас нет мобильного телефона!");

            if(!PI[playerid][pPhoneInfo][0])
				return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас нет sim карты!");

			GiveDonate(playerid, -2500);

            new
				telephone = 10000 + random(89999);

			f(global_str, sizeof(global_str), "SELECT NickName FROM accounts WHERE `TelNum` = '%d'", telephone);
            mysql_tquery(mysql, global_str, "MysqlCheckTelNum2", "dd", playerid, telephone);
		}

		case 904: 
		{
		    if(!response) 
				return 1;

			if(PI[playerid][pVirMoney] < DonateInfo_data[81][data_Cost])
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-Coins!");

			AddItem(playerid, 554, 1);
		    GiveDonate(playerid, -DonateInfo_data[81][data_Cost]);
		    GameTextForPlayer(playerid, !"successful", 0, 1);
		}

		case 905: 
		{
		    if(!response) 
				return 1;

		    if(ImprovementsData[playerid][idCarSkill])
		    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данное улучшение уже куплено!");

		    if(PI[playerid][pVirMoney] < DonateInfo_data[335][data_Cost])
		        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-Coins!");

		    GiveDonate(playerid, -DonateInfo_data[335][data_Cost]);
		    ImprovementsData[playerid][idCarSkill] = 1;
		    PI[playerid][pCarSkill] = 100;
	        GameTextForPlayer(playerid, !"successful", 0, 1);
	        KillTimer(besttime[playerid]);
	        besttime[playerid] = 0;
        	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}- Поздравляем!\nТеперь вы владелец улучшения: {FF5824}'Вечный Car Skill'", !"Окей", !"");
		}

		case 906: 
		{
			if(!response) return 1;

            if(PI[playerid][pVirMoney] >= DonateInfo_data[349][data_Cost])
	  	  	{
	  			GiveDonate(playerid, -DonateInfo_data[349][data_Cost]);

				for(new i; i < 9; i++)
					PI[playerid][pGunSkill][i] = 10000;

				UpdatePlayerDataStr(playerid, "WeaponSkill", Int_PackMassive(0, PI[playerid][pGunSkill]));
				SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы прокачали все скиллы до 100%");
				SetPlayerSkills(playerid);
    		}
	  		else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нехватает денег на счету");
		}

		case 909: 
		{
			if(!response)
				return false;

		    if(PI[playerid][pVirMoney]<DonateInfo_data[328][data_Cost])
		        return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас не достаточно AZ-coins!");

		    GiveDonate(playerid, -DonateInfo_data[328][data_Cost]);
		    PI[playerid][pCarSkill] = 100;
		    SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Ваш навык вождения восстановлен к 100 единицам!");
		}

		case 9003: 
		{
		    if(!response) 
				return false;
            
			if(PI[playerid][pVirMoney] < DonateInfo_data[319][data_Cost]) 
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно AZ-Coins");
  		  	
			GiveDonate(playerid, -DonateInfo_data[319][data_Cost]);
			
			for(new i; i < 9; i++)
				GivePlayerLic(playerid, i, 730);

			SavePlayerLicense(playerid);
			return SCM(playerid, COLOR_GREY, !"Вы успешно купили/восстановили все лицензии!");
		}
		
		case 912: 
		{
		    if(!response)
		        return false;

            if(PI[playerid][pMember][1] > 0)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер не может сменить ник!");

            if(PI[playerid][pAdmin] > 0)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Админ не может сменить ник!");

  		    if(PI[playerid][pVirMoney] >= DonateInfo_data[329][data_Cost])
  		        SPDF(playerid, 224, DIALOG_STYLE_INPUT, !"Покупка", "{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: %i AZ-coins\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"", !"Сменить", !"Отмена", DonateInfo_data[329][data_Cost]);
  		    
  		    else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}У вас недостаточно AZ-coins");
		}

        case 224:
	    {
			if(response)
	  		{
				if(PI[playerid][pDemorgan])
    				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете сменить игровое имя в этом месте!");

			    if(PI[playerid][pVirMoney] >= DonateInfo_data[329][data_Cost])
			    {
			        if(strfind(inputtextsave, " ")!=-1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В вашем нике замечен пробел!");
			        if(PI[playerid][pMember][1]>0)return SCM(playerid,COLOR_RED,!"Лидер не может сменить ник!");
			        if(!IsARPPN(inputtextsave)) return SPD(playerid,224,1,"Покупка","{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 10000 AZ-coins\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"\n\n{FF0000}Ошибка: Этот ник недоступен","Сменить", !"Отмена");
			        if(!IsAGameNick(inputtextsave)) return SPD(playerid,224,1,"Покупка","{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 10000 AZ-coins\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"\n\n{FF0000}Ошибка: Этот ник недоступен","Сменить", !"Отмена");
			        if(strlen(inputtextsave) > 20 ) return SPD(playerid,224,1,"Покупка","{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 10000 AZ-coins\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"\n\n{FF0000}Ошибка: Этот ник слишком длинный!","Сменить", !"Отмена");
			        static name[20]; mysql_escape_string(inputtextsave, name);
				    mysql_format(mysql, global_str, 200, "SELECT `ID` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", name);
					mysql_tquery(mysql, global_str, "MysqlCheckNameBuyName", "ds", playerid, name);
					return 1;
				}
			}
		}

		case 189:
		{
		    if(!response)
				return 1;
			
			if(Int_GetPlayerData(playerid, "timeOutBlago") > Global_Time)
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Попробуйте через 10 секунд.");
			
			new MoneyList[6] = {10000, 50000, 200000, 1000000, 5000000, 100000000};
		
	        if(PI[playerid][pMoney] < MoneyList[listitem])
				return SCM(playerid, COLOR_OLDRED, !">>>> {FFFFFF}- У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

			GiveMoney(playerid, -MoneyList[listitem], "пожертвовал в благотворительный фонд");
			GameTextForPlayer(playerid, !"Successful", 0, 1);
            
			foreach(new i: Player) 
			{
                if(!PhoneImprovementsData[i][pdAnnouncements])
					SCMF(i, COLOR_GOLD, "[Новости штата] {FFFFFF}%s{FFD700} пожертвовал {FFFFFF}%d${FFD700} в благотворительный фонд штата", PN(playerid), MoneyList[listitem]);
			}		
			
			Int_SetPlayerData(playerid, "timeOutBlago", Global_Time + 10);
		}
		
		case 188:
		{
		    if(response)
		    {
		        if(PI[playerid][pMoney] < 5000) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		        SCM(playerid,COLOR_BLUENEW,"Вы купили обручальные кольца (После перезахода в игру они исчезают!)");
		        Ring[playerid] = 1;
		        GiveMoney(playerid, -5000);
			}
		}
		case 227:
		{
		    if(response)
		    {
				new money = strval(inputtextsave);
				if(money >= 5000 && money <= 100000)
				{
					if(OrgInfo[TEAM_BANK][oBank]< money) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В банке недостаточно денег для того чтобы выдать кредит");
					CreditMoney[playerid] = money;
					f(global_str,sizeof(global_str),"{FFFFFF}Вы действительно хотите выдать кредит игроку в размере: $%d?\n{B83434}На данный момент баланс банка составляет: %d\nПри выдачи кредита деньги с банка спишутся!",money,OrgInfo[TEAM_BANK][oBank]);
					SPD(playerid, 228, 0, "Кредит", global_str, "Выдать", !"Отмена");
				}
				else SPD(playerid,227,1,"Кредит","{FFFFFF}Какую сумму вы хотите выдать?\n\nПримечание: максимальная сумма от $5000 до $100000\nВнимание: Не верная сумма!","Далее", !"Отмена");
		    }
		}
		
		case 1612:
		{
		    if(!response)
				return false;
		    
			else if(TeamDuty{playerid})
				return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В момент дежурства вы не можете сменить пол! Переоденьтесь или увольтись с организации!");
	
			else if(!(InJob[playerid] == 0))
				return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Закончите сначало свою работу!");
				
			else if(PI[playerid][pVirMoney] < 150) 
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF} У вас недостаточно AZ-Coins!");
				
			if(PI[playerid][pSex] == 1)
			{
			 	SPD(playerid,0,0,!"","{8CB736}Поздравляем!\n\n{FFFFFF}Вы успешно сменили свой пол на женский, а стоимость реабилитации составила 150 az coin`s\nСоветуем обзавестись хорошей одеждой.", !"Принять","");
			 	PI[playerid][pSex]=2;
			}
			else
			{
				SPD(playerid,0,0,!"","{8CB736}Поздравляем!\n\n{FFFFFF}Вы успешно сменили свой пол на мужской, а стоимость реабилитации составила 150 az coin`s\nСоветуем обзавестись хорошей одеждой.", !"Принять","");
				PI[playerid][pSex]=1;
			}
				
			PI[playerid][pVirMoney] -= 150;
            PlayerSpawn(playerid);
		}

		case 1977:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0:
					{
					    if(!GetString(OrgInfo[TEAM_MERIALS][oLeader],"Свободна"))
						{
						    f(global_str,sizeof(global_str),"На данный момент должность губернатора занимает: %s",OrgInfo[6][oLeader]);
							SendBotMessage(playerid,global_str);
						}
					    else SendBotMessage(playerid,"Сейчас должность губернатора никто не занимает.");
					}
					case 1: SendBotMessage(playerid,"В задачи губернатора входят много дел, например следить за экономикой штата,\nобновлять казну организаций, правильно распределять прием и направление налогов,\nи много другого, к сожaлению больше ничего сказать не могу.");
		        }
		    }
		}
		case 1871:
		{
			if(!response)
				return 1;

			switch listitem do
			{
				case 0:
				{
					if(!GetString(OrgInfo[GetPlayerInterior(playerid) == 2 ? 5 : GetPlayerInterior(playerid) == 3 ? 8 : 22][oLeader], "Свободна"))
						SendBotMessage(playerid, (str_f("На данный момент должность главврача занимает: %s", OrgInfo[GetPlayerInterior(playerid) == 2 ? 5 : GetPlayerInterior(playerid) == 3 ? 8 : 22][oLeader])));
				}

				case 1: SendBotMessage(playerid, "Стоимость лечения в нашей больнице $5000 - $50000 за один приём врача!");
				case 2: SendBotMessage(playerid, "Стоимость рецептов $1000!");
				case 3: SendBotMessage(playerid, "Стоимость антибиотиков $10000!");
				case 4:
				{
					new num;

				    foreach(new i: Player)
				    {
				        if(PI[i][pMember][0] == (GetPlayerInterior(playerid) == 2 ? 5 : GetPlayerInterior(playerid) == 3 ? 8 : 22) && TeamDuty{i})
							num ++;
				    }

					SendBotMessage(playerid, (str_f("%s", num ? (str_f("На дежурстве сейчас %d человек!", num)) : "Сейчас никого нет на дежурстве")));
				}
				case 5: SendBotMessage(playerid, (str_f("Сейчас вы в Больнице %s!", GetPlayerInterior(playerid) == 2 ? "ЛС" : GetPlayerInterior(playerid) == 3 ? "СФ" : "ЛВ")));
			}

			return true;
		} 
		
		case 1982:
		{
			if(!response)
				return 1;
			switch(listitem)
			{
				case 0: SendBotMessage(playerid, !"В авиашколе города Las-Venturas!");
				case 1: SendBotMessage(playerid, !"Сдача на права бесплатная!");
				case 2:
				{
				    new
						num;
				    foreach(new i: Player)
				    {
				        if(PI[i][pMember][0] == 9 && TeamDuty{i})
							num ++;
				    }
				    if(!num)
						return SendBotMessage(playerid, !"Сейчас никого нет на дежурстве");

				    else
						f(global_str, sizeof(global_str), "На дежурстве сейчас %d человек!", num);

				    SendBotMessage(playerid, global_str);
				}
				case 3: SendBotMessage(playerid, !"$20 000, примерно!");
			}
		}
		case 1966:
		{
			if(!response)  return DeletePVar(playerid, "openCARTRUNK");
			new vehicle = Int_GetPlayerData(playerid, "openCARTRUNK");
			switch listitem do
			{
			    case 0: callcmd::invent(playerid);
				case 1: {
					if(IsAOwnableCar(vehicle) && !GetString(CarInfo[GetVehicleID(vehicle)][cOwner], PN(playerid)))
						return  SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете открыть багажник чужой личной машины!");
					
					else if(VehicleInfo[vehicle][vTeam] && PI[playerid][pMember][0] != VehicleInfo[vehicle][vTeam])
						return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете открыть багажник чужой, огранизации!");
					
					TrunkInfo[vehicle][tOpen] = !TrunkInfo[vehicle][tOpen];
					SetBootStatus(vehicle, TrunkInfo[vehicle][tOpen]);
					ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
				}
				default:
				{
					if(!TrunkInfo[vehicle][tOpen])
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Багажник сейчас закрыт!");
					
					trunk[playerid] = vehicle;
					OtherInvOpen(playerid, 3, 0.0, 0.0, vehicle);
				}
			}
		}
		case 1898:
		{
		    new id=PanelPlayerID[playerid],carid = GetPlayerVehicleID(PanelPlayerID[playerid]),Float: money =CenaRaboti[playerid] ;
		    new pcarsid = GetPlayerVehicleID(playerid);
			if(response)
			{
			    if(GetPlayerState(playerid)!=2)return 0;
			    if(!pTemp[id][tAuthorized])return 0;
			    if(PlayerJob[id]!= JOB_MECHANIC) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Произошла ошибка.");
				if(VehicleInfo[carid][vJob]!=JOB_MECHANIC)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Произошла ошибка.");
				if(PI[playerid][pMoney]<money)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас не достаточно денег чтобы оплатить работу механика!");
				if(!ProxDetectorS(9.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока который вас должен был починить.");
			    switch(Ingatre[playerid])
			    {
			        case 1:
			        {
						f(global_str,sizeof(global_str),"[Информация]{FFFFFF} %s успешно отремонтировал ваш транспорт за {52A32A}%.1f$.",PN(id),money);
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s принял ваше предложение чтобы вы починили его транспорт. Вы заработали {52A32A}%.1f$.",PN(playerid),money);
					    SCM(id,COLOR_VALIK,global_str);
					    J_RepairVehicle(pcarsid);
					    new price = floatround( money, floatround_floor );
					    GiveMoney(playerid,-price);
						GiveMoney(id,price);
					}
					case 2:
					{
					    if(BenzinCount[carid]<(money/BenzinCena[carid])) return 0;
					    f(global_str,sizeof(global_str),"[Информация]{FFFFFF} %s успешно заправил ваш транспорт за {52A32A}%.1f$.",PN(id),money);
						SCM(playerid,COLOR_VALIK,global_str);
						f(global_str,sizeof(global_str),"[Информация] {FFFFFF}%s принял ваше предложение чтобы вы заправили его транспорт. Вы заработали {52A32A}%.1f$.",PN(playerid),(money/2));
					    SCM(id,COLOR_VALIK,global_str);
					    Fuel[pcarsid] += (money/BenzinCena[carid]);

					    new nedee = floatround(BenzinCena[carid], floatround_floor );
					    new price = floatround( money, floatround_floor );

					    BenzinCount[carid]-=(price/nedee);

					    GiveBizMoney(Contracter[carid],(price)/2);
					    f(global_str,sizeof(global_str),"{57B22C}Заправка %.1f$\n{FFFFFF}Бензина: %d/1000",BenzinCena[carid],BenzinCount[carid]);
						UpdateDynamic3DTextLabelText(Benzin[carid], 0xFFFFFFFF, global_str);

		    			if(Fuel[pcarsid]>=100)Fuel[pcarsid] = 100;
		    			GiveMoney(playerid,-price);
						GiveMoney(id,(price/2));
					}
				}
				CenaRaboti[playerid]=0;
				Ingatre[playerid]=0;
				PanelPlayerID[playerid]=-1;
			}
			else
			{
		  		SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы успешно отказались от предложения механика.");
		  		f(global_str,sizeof(global_str),"[Информация] {FFFFFF} %s отказался от вашего предложения!",PN(playerid));
		  		SCM(id,COLOR_RED,global_str);
			}
		}


		case 1081:
		{
		    if(response)
		    {
			    new id = PI[playerid][pMScutes];
				if(id!=-1)PI[id][pScutes] = -1,f(global_str,sizeof(global_str),"Вы успешно отключили жучек с мобильного телефона игрока %s.",PN(id));
				PI[playerid][pMScutes]=-1,SCM(playerid,COLOR_GREEN,global_str);
			}
		}
		case 2761:
		{
		    if(response)
		    {
		        switch(listitem)
		        {

		            case 0: CreateShopTD(playerid, 2);
		            case 1:
		            {
		                if(BizData[BizEntered[playerid]][bProducts] <= 1)return SendBotMessage(playerid,"Приносим свои извинения, но у нас закончились продукты!");
						if(PI[playerid][pHouseKey]==-1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет личного дома!");
                        f(global_str,sizeof(global_str),"{FFFFFF}Продуктов в вашем доме: {B03131}%d{FFFFFF}.\nПополнив запас продуктов вы сможете покушать или выпить в любое время у себя в доме.\nВзять продукты или выпивку можно у бара и холодильника!.\n\n{29CD17}Стоимоть 1-го продукта составляет: %.0f$",HouseInfo[PI[playerid][pHouseKey]][hNoOwner],BizData[BizEntered[playerid]][bEnterPrice]);
						SPD(playerid,77,1,"Меню",global_str, !"Принять", !"Отмена");
		            }
		        }
		    }
		}
		case 430:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				if(money < 1 || money > (500-CarproductCount[GetPlayerVehicleID(playerid)])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете закупить столько груза!");
				if(PI[playerid][pMoney]<money*GLS[29]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				if(GLS[28]<money)return SCM(playerid,COLOR_RED,!"На складе разгрузочной станции недостаточно продуктов!");
				if(CarproductType[GetPlayerVehicleID(playerid)] != 0 && CarproductType[GetPlayerVehicleID(playerid)] != 2 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете смешивать продукты с ящиками с разгрузочной станции!");
				CarproductCount[GetPlayerVehicleID(playerid)] += money;
				GiveMoney(playerid,-(money*GLS[29]));
				GLS[28]-=money;
				SaveInformation();
				CarproductType[GetPlayerVehicleID(playerid)] = 2;
				SCM(playerid,COLOR_LIGHTBLUE,"Вы успешно загрузили машину. Используйте /orderlist чтобы найти заказчика продуктов!");
				f(global_str,sizeof(global_str),"{D78787}Развозчик продуктов\n{FFFFFF}Загружено: %d/500",CarproductCount[GetPlayerVehicleID(playerid)]);
				UpdateDynamic3DTextLabelText(CarProductText[GetPlayerVehicleID(playerid)], 0xFFFFFFFF, global_str);
				f(global_str, sizeof(global_str), "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
				UpdateDynamic3DTextLabelText(FactoryText[2], COLOR_WHITE, global_str);
		    }
		}
		case 2291:
		{
			if(response)
			{
			    switch(listitem)
				{
					case 0:
					{
					    if(CarproductType[GetPlayerVehicleID(playerid)] != 0 && CarproductType[GetPlayerVehicleID(playerid)] != 2 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете смешивать продукты с ящиками с разгрузочной станции!");
					    if(CarproductCount[GetPlayerVehicleID(playerid)]>=500)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Ваш грузовик переполнен!");
						f(global_str,sizeof(global_str),"Введите количество груза, которое хотите закупить для перепродажи.\n{C1BABA}Используйте число от 1 до %d",500-CarproductCount[GetPlayerVehicleID(playerid)]);
			   			SPD(playerid,430,1,"",global_str, !"Принять", !"Отмена");
					}
					case 1:
					{
						if(CarproductCount[GetPlayerVehicleID(playerid)]==0)return SPD(playerid,2291,2,"","{42B02C}-{FFFFFF} Закупить груз\n{42B02C}-{FFFFFF} Вернуть груз", !"Принять", !"Отмена");
						if(CarproductType[GetPlayerVehicleID(playerid)] != 2 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете вернуть сюда продукты, так как вы их покупали на ферме либо вобще не покупали!");
					    GLS[28]+=CarproductCount[GetPlayerVehicleID(playerid)];
					    GiveMoney(playerid,(CarproductCount[GetPlayerVehicleID(playerid)]*GLS[29]));
					    SaveInformation();
						CarproductCount[GetPlayerVehicleID(playerid)] =0;
                        CarproductType[GetPlayerVehicleID(playerid)] = 0;
						f(global_str,sizeof(global_str),"{D78787}Развозчик продуктов\n{FFFFFF}Загружено: %d/500",CarproductCount[GetPlayerVehicleID(playerid)]);
						UpdateDynamic3DTextLabelText(CarProductText[GetPlayerVehicleID(playerid)], 0xFFFFFFFF, global_str);
						f(global_str, sizeof(global_str), "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
						UpdateDynamic3DTextLabelText(FactoryText[2], COLOR_WHITE, global_str);
					}
				}
			}
		}
		
		case 867:
		{
		    if(response)
		    {
		        new time = strval(inputtextsave);
		        if(time<1)return 0;
				if(time>20)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете арендовать концертный зал больше чем 20 часов!");
				if(PI[playerid][pMoney]<time*50000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас недостаточно денег на аренду зала!");
				if(PI[playerid][pBuildType]==-1)return 0;
				if(BuildsInfo[0][blClosed]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Концертный зал уже арендуют!");
				new money = time*50000;
				GiveMoney(playerid,-money);

				SetString(BuildsInfo[0][blArenderID],PN(playerid));
				BuildsInfo[0][blTime]=time*3600;
				BuildsInfo[0][blClosed]=1;

				f(global_str,sizeof(global_str),"\n\nВы успешно арендовали концертный зал на %d часов за %d$.\nДля того чтобы вести управление залом используйте команду /lzal.\nОстальную информацию вы узнаете там.\n\n",time,(time*50000));
				SPD(playerid,0,0,!"","", !"Принять","");
				SCM(playerid,COLOR_GREY, !"Для управления залом, используйте команду /lzal.");
				UpdateDynamic3DTextLabelText(BuildsInfo[0][blBuildText],-1, !"{23BA8F}Концертный зал{FFFFFF}\nВход: ALT\nЗдание: {D23636}Арендовано");
				GiveBizMoney(144, money);
		    }
		}

		case 798:
		{
		    if(response)
		    {
                if(!GetString(BuildsInfo[0][blArenderID],PN(playerid)))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не арендуете концертный зал!");
				if(BuildsInfo[0][blTime]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Концертный зал никто не арендует");
				if(!IsPlayerInRangeOfPoint(playerid,30,649.3248,-1353.8834,13.5470) && !IsPlayerInRangeOfPoint(playerid,30,-575.709, 2594.2, 1705.09))
				{
				    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится у входа или выхода из концертного зала!");
				    return 1;
				}
				if(BuildsInfo[0][blClosed]==0) return 0;
		        switch(listitem)
				{
				    case 0:
					{
					    switch(BuildsInfo[0][blCanEnter])
						{
						    case 0: BuildsInfo[0][blCanEnter]=1;
						    case 1,500..2100:
						    {
                                BuildsInfo[0][blCanEnter]=BuildsInfo[0][blCanEnter]+500;
                                if(BuildsInfo[0][blCanEnter]>=2000)BuildsInfo[0][blCanEnter]=2;
						    }
						    case 2: BuildsInfo[0][blCanEnter]=0;
						}
						callcmd::lzal(playerid,"");
					}
				    case 1:
				    {
				        if(ZallFunction[0]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Бесплатная реклама концертного зала возможна только 1 раз до истечения аренды.");
						f(global_str,sizeof(global_str),"<< >> {FFFFFF}Уважаемые жители, арендатор концертного зала: %s[%d] проводит мероприятие. Присоединяйтесь! (GPS - Развлечения).",PN(playerid),playerid);
						SCMALL(COLOR_LIGHTBLUE,global_str);
						ZallFunction[0]=1;
				    }
				    case 2:
				    {
						new hour,minute,people=0;
						if(BuildsInfo[0][blTime]>3600)
						{
							hour = floatround(BuildsInfo[0][blTime]/3600, floatround_floor );
							minute = floatround((BuildsInfo[0][blTime]-(hour*3600))/60, floatround_floor );
						}
						else
						{
						    hour = 0;
						    minute = floatround(BuildsInfo[0][blTime]/60, floatround_floor );
						}
						foreach(new i: Player)
						{
						    if(PI[i][pBuildType]==0 && GetPlayerVirtualWorld(i)==9) people++;
						}
				        f(global_str,sizeof(global_str),"{FFFFFF}Концертный зал.\n\nВремя до окончания аренды: {E6B75A}%d.%d{FFFFFF} минут\nЗаработаных денег: {E6B75A}%d${FFFFFF}\nКоличество посетителей: {E6B75A}%d{FFFFFF}\nЛюдей в концертном зале: {E6B75A}%d{FFFFFF}\n\n",hour,minute,ZallFunction[1],ZallFunction[2],people);
				        SPD(playerid,0,0,!"",global_str, !"Принять","");
				    }
					case 3:
					{
					    if(ZallFunction[1]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете снять такую сумму денег!");
						GiveMoney(playerid,ZallFunction[1]);
						f(global_str,sizeof(global_str),"<< {FFFFFF}Вы успешно сняли с баланса концертного зала: %d$.",ZallFunction[1]);
						SCM(playerid,COLOR_VALIK,global_str);
						ZallFunction[1]=0;
						callcmd::lzal(playerid,"");
					}
					case 4:
					{
					    new num=0;
					    foreach(new i: Player)
					    {
					        if(num<20)
					        {
					            if(Int_GetPlayerData(i,"zalll")==9)
					            {
					                if(IsPlayerInRangeOfPoint(playerid,30,649.3248,-1353.8834,13.5470) && !IsPlayerInRangeOfPoint(playerid,30,-575.709, 2594.2, 1705.09)) global_str = "[ {53AB2A}Ожидает{FFFFFF} ]";
									else global_str = "[ {AB2A2A}Уехал{FFFFFF} ]";

									f(global_str,800,"%s\n{FFFFFF}%s[{AB7C2A}%d{FFFFFF}]\t%s",global_str,PN(i),i,global_str);
					                num++;
					            }
							}
					    }
					    if(num>0)
					    {
					        f(global_str,sizeof(global_str),"%s\n{9592DC}Очистить список",global_str);
					        SPD(playerid,2891,2,"",global_str, !"Принять","Назад");
							SetPVarInt(playerid,"oldand",num);
					    }
						else callcmd::lzal(playerid,""),SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Охранник еще не спрашивал вас, кто хотел войти!");
					}

				}
		    }
		}
		case 2891:
		{
		    if(response)
		    {
                new num=0,id;
                if(listitem == Int_GetPlayerData(playerid,"oldand"))
			    {
			        foreach(new i: Player)
			    	{
			            if(Int_GetPlayerData(i,"zalll")==9)
			            {
			                if(PI[i][pZall]!=0)
							{
						        SetPVarInt(i,"zalll",0);
						        SCM(i,COLOR_RED,!"[Информация] {FFFFFF}Арендатор зала сказал охраннику никого не пускать!");
							}
						}
					}
					SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно почистили список желающих войти в зал!");
				 	callcmd::lzal(playerid,"");
					return 1;
			    }
			    foreach(new i: Player)
			    {
		            if(Int_GetPlayerData(i,"zalll")==9)
		            {
						if(PI[i][pZall]!=0)
						{
			                if(num == listitem)
							{
		     					if(IsPlayerInRangeOfPoint(i,50,649.3248,-1353.8834,13.5470))
	                			{
	                                SetPVarInt(i,"zalll",0);
                                    PI[i][pZall]=0;
                                    f(global_str,sizeof(global_str),"Мужчина с именем: %s, хозяин просил передать вам,\nчто вам можно войти в концертный зал!",PN(i));
	                                id = SendBotMessage(i,global_str);
                                	ApplyActorAnimation(id,"PED","ON_LOOKERS",4.1,0,0,0,1,1);
                                	SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Охранник передаст, чтобы он вошел в концертный зал!");
                                	callcmd::lzal(playerid,"");
								}
								else return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Человек которому вы хотите выдать пропуск, находится слишком далеко от концертного зала!"),callcmd::lzal(playerid,"");
							}
			                num++;
						}
		            }
			    }
		    }
		    else callcmd::lzal(playerid,"");
		}

		case 2281:
		{
			if(!response) return false;
			new list = VehicleInfo[GetPlayerVehicleID(playerid)][vListID];
			switch listitem do
			{
				case 0:
				{
					//if(CarproductType[GetPlayerVehicleID(playerid)] != 0 && CarproductType[GetPlayerVehicleID(playerid)] != 1 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете смешивать продукты с ящиками с разгрузочной станции!");
					
					if(CarproductCount[list] >= 500) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Ваш грузовик переполнен!");
			   		return SPDF(playerid,429,1,!"","{FFFFFF}Введите количество продуктов, которое хотите закупить для перепродажи.\nИспользуйте число от {ACD13F}1{FFFFFF} до {ACD13F}%d", !"Принять", !"Отмена", 500-CarproductCount[list]);
				}
				case 1:
				{
					new money = CarproductCount[list]*GLS[31];
					if(BizData[BIZ_ELECTRO_LS][bMoney] < money/2) return SCM(playerid,COLOR_RED,!"В бизнесе не достаточно средств чтобы оплатить ваш груз!");
					else if(!CarproductCount[list]) return SPD(playerid,2281,2,"","{42B02C}-{FFFFFF} Закупить продукты\n{42B02C}-{FFFFFF} Вернуть продукты", !"Принять", !"Отмена");
					//else if(CarproductType[GetPlayerVehicleID(playerid)] != 1 && CarproductCount[GetPlayerVehicleID(playerid)]>0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете вернуть сюда продукты, так как вы их покупали на разгрузочной станции либо вобще не покупали!");
					GLS[27] += CarproductCount[list];
					SaveInformation();
					GiveMoney(playerid, money);
					GiveBizMoney(BIZ_ELECTRO_LS,-money/2);
					CarproductCount[list] = CarproductType[list] = 0;
					UpdateDynamic3DTextLabelText(CarProductText[list], 0xFFFFFFFF, "{D78787}Развозчик продуктов\n{FFFFFF}Загружено: 0");
					
					f(global_str, sizeof(global_str), "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
					return UpdateDynamic3DTextLabelText(FactoryText[1], COLOR_WHITE, global_str);
				}
			}
		}
		case 1653:
		{
		    if(response)
		    {
		        PI[playerid][pType] = listitem;
          		
          		SetPlayerBuyItem(playerid);
		    }
		}
		case 8762:
		{
			if(!response) return false;
			new bizid = dBiz[playerid],count = strval(inputtextsave), carid = GetPlayerVehicleID(playerid), list = VehicleInfo[carid][vListID], money = count*BizData[bizid][bBuyCost];
			if(GetString(BizData[bizid][bOwner],"The State") || bizid == -1 || !(PlayerJob[playerid] == 3) || !(VehicleInfo[carid][vJob] == 3)) return false;
			
			if(BizData[bizid][bBuyCost] && BizData[bizid][bNeedItem])
			{
			    if(IsPlayerInRangeOfPoint(playerid,10,BizData[bizid][bEnter][0],BizData[bizid][bEnter][1],BizData[bizid][bEnter][2]))
			    {
					if(count < 1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете продать столько продуктов!");
					else if(count > BizData[bizid][bNeedItem]) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Владелец бизнеса не заказывал столько продуктов!");
					else if(BizData[bizid][bMoney] < money) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В банке бизнеса не достаточно денег чтобы оплатить груз!");
					else if(CarproductCount[list] < count) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В вашем грузовике нет столько продуктов!");

					CarproductCount[list] -= count;
					BizData[bizid][bNeedItem] -= count;
					BizData[bizid][bMoney] -= money;
					BizData[bizid][bProducts] += count;
					GiveMoney(playerid, money, "продажа продуктов бизнесу");
					SCMF(playerid, COLOR_ORANGE, "Вы успешно продали %d продуктов за %d$.", count, money);
					
					//
					if(CarproductCount[list] < 50) SCM(playerid,COLOR_WHITE, !"Чтобы продолжить развозку продуктов, необходимо закупить их заново!");
					 	
					f(global_str,150,"{D78787}Развозчик продуктов\n{FFFFFF}Загружено: %d", CarproductCount[list]);
					UpdateDynamic3DTextLabelText(CarProductText[list], 0xFFFFFFFF, global_str);

					
					if(!CarproductCount[list])
						CarproductType[list] = 0;
					
					dBiz[playerid] =-1;
					UpdateBusinessText(bizid);
			    }
			}
			else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Бизнес больше не скупает продукты!");
			
			return false;
		}
		case 8761:
		{
		    if(!response) return false;
			
			new bizid = DBizitem[playerid][listitem];
			EnableGPSForPlayer(playerid,BizData[bizid][bEnter][0],BizData[bizid][bEnter][1],BizData[bizid][bEnter][2]);
			SCM(playerid,COLOR_LIGHTBLUE,"Местоположение заказчика отмечено на карте красным маркером. Не забудьте загрузить товар (/gps - разное - склады)");
			if(BizData[bizid][bState] == 7 || BizData[bizid][bState] == 1) SCM(playerid,COLOR_LIGHTBLUE,"Бизнес скупает продукты только со склада фермы!");
			else if(BizData[bizid][bState] == 2) SCM(playerid,COLOR_LIGHTBLUE,"Бизнес скупает продукты с фермы и разгрузочной станции!");
			else  SCM(playerid,COLOR_LIGHTBLUE,"Бизнес скупает товар только со склада разгрузочной станции!");
		}
		case 6971:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0: callcmd::park(playerid);
			    case 1:
			    {
			        //new Float: vhealth;
					new carid = ShowVeh[playerid];
					new number = GetVehicleID(ShowVeh[playerid]);
					if(!IsPlayerRegCar(playerid, ShowVeh[playerid])) return SCM(playerid, COLOR_RED, !"Это не ваша машина!");
					CarInfo[number][cParkedInPark] = 1;
					SetVehicleToRespawn(carid);
					return 1;
			    }
			}
		}
		case 228:
		{
		    if(response)
		    {
		        new para1 = PanelPlayerID[playerid];
				new money = CreditMoney[playerid];
				if(PI[para1][pCredit]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Этот игрок уже несет долг банку!");
				if(PI[para1][pWanted]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете выдать кредит человеку, который находится в розыске!");
				if(PI[para1][pLevel]<3)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете выдать кредит человеку, у которого уровень ниже 3-го!");
			    PI[para1][pBank] += money;
				PI[para1][pCredit] += money;
				OrgInfo[TEAM_BANK][oBank]-=money;
				SaveOrg(TEAM_BANK);
				f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы успешно выдали кредит игроку %s",PN(para1));
				SCM(playerid,COLOR_VALIK,global_str);
				f(global_str,sizeof(global_str),"{FFFFFF}Вы взяли кредит размером $%d. Деньги переведены на ваш банковский счет.",money);
				SPD(para1, 0, 0, "Кредит", global_str, "Ок", "");
		    }
		    else ShowBankMenu(playerid);
		}
	    case 8004:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0: SPD(playerid, 8011, 2, "Список дисков", "Shadow\nMega\nWires\nClassic\nRimshine\nCutter\nTwist\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic", !"Выбрать", "Назад");
					case 1: AddVehicleComponent(vehicleid, 1087), PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0), callcmd::atune(playerid);
					case 2:
					{
						new Car = GetPlayerVehicleID(playerid), Model = GetVehicleModelEx(Car);
						switch(Model)
						{
							case 559, 560, 561, 562, 565: SPD(playerid, 8012, 2, "Тюнинг Wheel Arch Angels", "Передний бампер X-flow\nПередний бампер Alien\nЗадний бампер X-Flow\nЗадний бампер Alien\nСпойлер X-Flow\nСпойлер Alien\nБоковая юбка X-Flow\nБоковая юбка Alien\nВоздухозаборник X-Flow\nВоздухозаборник Alien\nВыхлоп X-flow\nВыхлоп Alien", !"Выбрать", "Назад");
							default: SCM(playerid, COLOR_WHITE, !"Вы должны быть в: Elegy, Stratum, Flash, Sultan, Uranus");
						}
					}
					case 3: SPD(playerid, 8013, 2, "Выбор цвета", "Красный\nГолубой\nЖелтый\nЗеленый\nСерый\nОранжевый\nЧерный\nБелый", !"Выбрать", "Назад");
					case 4: SPD(playerid, 8014, 2, "Выбор винила", "Винил №1\nВинил №2\nВинил №3", !"Выбрать", "Назад");
					case 5: SPD(playerid, 8015, 2, "Выбор азота", "Азот 2X\nАзот 5X\nАзот 10X", !"Выбрать", "Назад");
				}
			}
			return 1;
		}
     	case 8011:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0: AddVehicleComponent(vehicleid, 1073);
					case 1: AddVehicleComponent(vehicleid, 1074);
					case 2: AddVehicleComponent(vehicleid, 1076);
					case 3: AddVehicleComponent(vehicleid, 1077);
					case 4: AddVehicleComponent(vehicleid, 1075);
					case 5: AddVehicleComponent(vehicleid, 1079);
					case 6: AddVehicleComponent(vehicleid, 1078);
					case 7: AddVehicleComponent(vehicleid, 1080);
					case 8: AddVehicleComponent(vehicleid, 1081);
					case 9: AddVehicleComponent(vehicleid, 1082);
					case 10: AddVehicleComponent(vehicleid, 1083);
					case 11: AddVehicleComponent(vehicleid, 1084);
					case 12: AddVehicleComponent(vehicleid, 1085);
				}
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SPD(playerid, 8011, 2, "Список дисков", "Shadow\nMega\nWires\nClassic\nRimshine\nCutter\nTwist\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic", !"Выбрать", "Назад");
			}
			else callcmd::atune(playerid);
		}
	    case 8013:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0: ChangeVehicleColor(vehicleid, 3, 3);
					case 1: ChangeVehicleColor(vehicleid, 79, 79);
					case 2: ChangeVehicleColor(vehicleid, 65, 65);
					case 3: ChangeVehicleColor(vehicleid, 86, 86);
					case 4: ChangeVehicleColor(vehicleid, 9, 9);
					case 5: ChangeVehicleColor(vehicleid, 6, 6);
					case 6: ChangeVehicleColor(vehicleid, 0, 0);
					case 7: ChangeVehicleColor(vehicleid, 1, 1);
				}
				PlayerPlaySound(playerid,1134,0.0,0.0,0.0);
				SPD(playerid, 8013, 2, "Выбор цвета", "Красный\nГолубой\nЖелтый\nЗеленый\nСерый\nОранжевый\nЧерный\nБелый", !"Выбрать", "Назад");
			}
			else callcmd::atune(playerid);
		}
	    case 8015:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0: AddVehicleComponent(vehicleid, 1008);
					case 1: AddVehicleComponent(vehicleid, 1009);
					case 2: AddVehicleComponent(vehicleid, 1010);
				}
				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SPD(playerid, 8015, 2, "Выбор азота", "Азот 2X\nАзот 5X\nАзот 10X", !"Выбрать", "Назад");
			}
			else callcmd::atune(playerid);
		}
	    case 8014:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				ChangeVehiclePaintjob(vehicleid,listitem+1);
				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SPD(playerid, 8014, 2, "Выбор винила", "Винил №1\nВинил №2\nВинил №3", !"Выбрать", "Назад");
			}
			else callcmd::atune(playerid);
		}
		case 8012:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new model = GetVehicleModelEx(vehicleid);
				switch(listitem)
				{
					case 0:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1172);
							case 560: AddVehicleComponent(vehicleid,1170);
							case 565: AddVehicleComponent(vehicleid,1152);
							case 559: AddVehicleComponent(vehicleid,1173);
							case 561: AddVehicleComponent(vehicleid,1157);
							case 558: AddVehicleComponent(vehicleid,1165);
						}
					}
					case 1:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1171);
							case 560: AddVehicleComponent(vehicleid,1169);
							case 565: AddVehicleComponent(vehicleid,1153);
							case 559: AddVehicleComponent(vehicleid,1160);
							case 561: AddVehicleComponent(vehicleid,1155);
							case 558: AddVehicleComponent(vehicleid,1166);
						}
					}
					case 2:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1148);
							case 560: AddVehicleComponent(vehicleid,1140);
							case 565: AddVehicleComponent(vehicleid,1151);
							case 559: AddVehicleComponent(vehicleid,1161);
							case 561: AddVehicleComponent(vehicleid,1156);
							case 558: AddVehicleComponent(vehicleid,1167);
						}
					}
					case 3:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1149);
							case 560: AddVehicleComponent(vehicleid,1141);
							case 565: AddVehicleComponent(vehicleid,1150);
							case 559: AddVehicleComponent(vehicleid,1159);
							case 561: AddVehicleComponent(vehicleid,1154);
							case 558: AddVehicleComponent(vehicleid,1168);
						}
					}
					case 4:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1146);
							case 560: AddVehicleComponent(vehicleid,1139);
							case 565: AddVehicleComponent(vehicleid,1050);
							case 559: AddVehicleComponent(vehicleid,1158);
							case 561: AddVehicleComponent(vehicleid,1160);
							case 558: AddVehicleComponent(vehicleid,1163);
						}
					}
					case 5:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1147);
							case 560: AddVehicleComponent(vehicleid,1138);
							case 565: AddVehicleComponent(vehicleid,1049);
							case 559: AddVehicleComponent(vehicleid,1162);
							case 561: AddVehicleComponent(vehicleid,1058);
							case 558: AddVehicleComponent(vehicleid,1164);
						}
					}
					case 6:
					{
						switch(model)
						{
							case 562: {
								AddVehicleComponent(vehicleid,1041);
								AddVehicleComponent(vehicleid,1039);
				            }
							case 560: {
								AddVehicleComponent(vehicleid,1031);
								AddVehicleComponent(vehicleid,1030);
				            }
							case 565: {
								AddVehicleComponent(vehicleid,1052);
								AddVehicleComponent(vehicleid,1048);
							}
							case 559: {
								AddVehicleComponent(vehicleid,1070);
								AddVehicleComponent(vehicleid,1072);
				            }
							case 561: {
								AddVehicleComponent(vehicleid,1057);
								AddVehicleComponent(vehicleid,1063);
				            }
							case 558: {
								AddVehicleComponent(vehicleid,1093);
								AddVehicleComponent(vehicleid,1095);
				            }
						}
					}
					case 7:
					{
						switch(model)
						{
							case 562: {
								AddVehicleComponent(vehicleid,1036);
								AddVehicleComponent(vehicleid,1040);
							}
							case 560: {
								AddVehicleComponent(vehicleid,1026);
								AddVehicleComponent(vehicleid,1027);
				            }
							case 565: {
								AddVehicleComponent(vehicleid,1051);
								AddVehicleComponent(vehicleid,1047);
				            }
							case 559: {
								AddVehicleComponent(vehicleid,1069);
								AddVehicleComponent(vehicleid,1071);
							}
							case 561: {
								AddVehicleComponent(vehicleid,1056);
								AddVehicleComponent(vehicleid,1062);
							}
							case 558: {
								AddVehicleComponent(vehicleid,1090);
								AddVehicleComponent(vehicleid,1094);
				            }
						}
					}
					case 8:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1035);
							case 560: AddVehicleComponent(vehicleid,1033);
							case 565: AddVehicleComponent(vehicleid,1052);
							case 559: AddVehicleComponent(vehicleid,1068);
							case 561: AddVehicleComponent(vehicleid,1061);
							case 558: AddVehicleComponent(vehicleid,1091);
						}
					}
					case 9:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1038);
							case 560: AddVehicleComponent(vehicleid,1032);
							case 565: AddVehicleComponent(vehicleid,1054);
							case 559: AddVehicleComponent(vehicleid,1067);
							case 561: AddVehicleComponent(vehicleid,1055);
							case 558: AddVehicleComponent(vehicleid,1088);
						}
					}
					case 10:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1037);
							case 560: AddVehicleComponent(vehicleid,1029);
							case 565: AddVehicleComponent(vehicleid,1045);
							case 559: AddVehicleComponent(vehicleid,1066);
							case 561: AddVehicleComponent(vehicleid,1059);
							case 558: AddVehicleComponent(vehicleid,1089);
						}
					}
					case 11:
					{
						switch(model)
						{
							case 562: AddVehicleComponent(vehicleid,1034);
							case 560: AddVehicleComponent(vehicleid,1028);
							case 565: AddVehicleComponent(vehicleid,1046);
							case 559: AddVehicleComponent(vehicleid,1065);
							case 561: AddVehicleComponent(vehicleid,1064);
							case 558: AddVehicleComponent(vehicleid,1092);
						}
					}
				}
				PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SPD(playerid, 8012, DIALOG_STYLE_LIST, !"Тюнинг Wheel Arch Angels", !"Передний бампер X-flow\nПередний бампер Alien\nЗадний бампер X-Flow\nЗадний бампер Alien\nСпойлер X-Flow \nСпойлер Alien \nБоковая юбка X-Flow \nБоковая юбка Alien\nВоздухозаборник X-Flow\nВоздухозаборник Alien\nВыхлоп X-flow\nВыхлоп Alien", !"Выбрать", !"Назад");
			}
			else SPD(playerid, 8004, DIALOG_STYLE_LIST, !"Тюнинг меню", !"Диски\nГидравлика\nАрхангел Тюнинг\nЦвет\nВинилы", !"Выбрать", !"Отмена");
		}
		case 229:
		{
		    if(response)
		    {
				new money = strval(inputtextsave);
				if(money > 0 && PI[playerid][pBank] >= money)
				{
				    if(money <= PI[playerid][pCredit])
				    {
					    PI[playerid][pBank] -= money;
					    PI[playerid][pCredit] -= money;
					    OrgInfo[TEAM_BANK][oBank]+=money;
					    SaveOrg(TEAM_BANK);
					    f(global_str,sizeof(global_str),"[Информация] {FFFFFF}Вы погасили кредит на $%d",money);
					    SCM(playerid, COLOR_VALIK, global_str);
					    SendBankBot(playerid);
					    if(PI[playerid][pCredit] <= 0)
					    {
					        PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
					        SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Поздравляю! Вы полностью погасили кредит!");
					    }
				    }
				    else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Сумма вашего кредита меньше, чем вы хотите заплатить");
				}
				else SendBotMessage(playerid,"На вашем банковском счету нет нужной суммы!");
			}
			else ShowBankMenu(playerid);
		}
		case 230:
		{
		    if(response)
		    {
			    new vehid = GetPlayerVehicleID(playerid),
					cost,
					arid = GetArendCarID(vehid),
					bizid = ArendInfo[arid][aBizid];
					
				if(!IsPlayerInVehicle(playerid, vehid)) return 0;
       			if(bizid != INVALID_BIZ && bizid < sizeof ArendInfo)
				{
					switch(GetVehicleModelEx(vehid))
					{
						case 454: cost= BizData[bizid][bItem][0];
						case 484: cost = BizData[bizid][bItem][1];
						case 558: cost = BizData[bizid][bItem][2];
						case 541: cost = BizData[bizid][bItem][3];
						case 560: cost = BizData[bizid][bItem][4];
						case 409: cost = BizData[bizid][bItem][5];
						case 462: cost = BizData[bizid][bItem][6];
						case 469: cost = BizData[bizid][bItem][7];
						case 487: cost = BizData[bizid][bItem][8];
						default: cost = BizData[bizid][bItem][9];
					}
				}
				else cost = 20000;
		        if(PI[playerid][pMoney] >= cost)
		        {
		            ArendKey[playerid] = arid;
		            ArendInfo[arid][aRentID] = playerid;
		            SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно арендовали это ТС");
		            SCM(playerid,COLOR_BLUE, !"[Информация] {FFFFFF}Чтобы отказаться от аренды [/unrentcar]");
		            SCM(playerid,COLOR_BLUE, !"[Информация] {FFFFFF}Чтобы закрыть автомобиль используйте [/jlock]");
		            GiveMoney(playerid,-cost);
		            if(bizid != INVALID_BIZ) GiveBizMoney(bizid,cost);
		            if(ArendInfo[arid][aID] == 578) EnableGPSForPlayer(playerid, -1733.3938, 187.7363, 3.5547);
		        }
				else
				{
				    SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				    RemovePlayerFromVehicle(playerid);
				}
		    }
		    else RemovePlayerFromVehicle(playerid);
		    return 1;
		}

		case 329:
		{
		    if(response)
		    {
			    switch(listitem)
			    {
			        case 0: GLS[0] = 1;
			        case 1: GLS[0] = 2;
			        case 2: GLS[0] = 3;
			        case 3: GLS[0] = 4;
			        case 4: GLS[0] = 5;
			        case 5: GLS[0] = 6;
			    }
			    SaveInformation();
			    f(global_str,sizeof(global_str),"Лидер центрального банка - %s. Установил кредитную ставку %d процентов!",PN(playerid),GLS[0]);
				SCMALL(COLOR_GOLD,global_str);
				format(global_str, 512, "Получение кредитa\nКредитная ставка {84E268}%d{FFFFFF} процента(ов).\nПолучить кредит или начать работу с {84E268}депозитом{FFFFFF},\n(Получить/снять деньги) можно через сотрудника банка!\n\nФонд премии инкасаторам: {84E268}49600${FFFFFF}\nВыделеная премия на одного работника: {84E268}0${FFFFFF}\n\n{FFE51A}Курс ЕВРО: {FFFFFF}%d$", GLS[0], GLS[69]);
				UpdateDynamic3DTextLabelText(cretits, 0xFFFFFFFF, global_str);
			}
		}
		case 233:
		{
		    if(response)
		    {
		        if(PlayerJob[playerid] != JOB_NONE) return SendBotMessage(playerid,"У вас уже есть работа, чтобы уволиться напишите /quitjob");
		    	switch(listitem)
			    {
					case 0:
					{
					    if(PI[playerid][pLevel] < 3) return SendBotMessage(playerid,"На эту работу можно устроиться с 3 уровня!");
						PlayerJob[playerid] = JOB_MECHANIC;
						SPD(playerid,28,0,"Работа: Механик","{FFFFFF}Вы собираетесь устроиться на работу Механиком\nВы согласный с условиями?","Да","Нет");
					}
					case 1:
					{
					    if(PI[playerid][pLevel] < 2) return SendBotMessage(playerid,"На эту работу можно устроиться с 2 уровня!");
                        if(!GetPlayerLicense(playerid, 0)) return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = JOB_TAXI;
						SPD(playerid,28,0,"Работа: Таксист","{FFFFFF}Вы собираетесь устроиться на работу Таксистом\nВы согласный с условиями?","Да","Нет");
					}
					case 2:
					{
						if(PI[playerid][pLevel]< 5) return SendBotMessage(playerid,"На эту работу можно устроиться с 5-го уровня!");
						PlayerJob[playerid] = JOB_GUIDE;
						SPD(playerid,28,0,"Работа: Крупье","{FFFFFF}Вы собираетесь устроиться на работу Крупье в казино\nВы согласны с условиями?","Да","Нет");
					}
					case 3:
					{
		   				if(PI[playerid][pLevel] < 7) return SendBotMessage(playerid,"На эту работу можно устроиться с 7-го уровня!");
						if(PI[playerid][pZKP] < 25) return SendBotMessage(playerid,"Чтобы работать в Налоговой нужно иметь законопослушность не меньше 25-ти.");
						PlayerJob[playerid] = JOB_NALOG;
						SPD(playerid,28,0,"Налоговая","{FFFFFF}Вы собираетесь устроиться в налоговую контору\nВы согласны с условиями?","Да","Нет");
					}
					case 4:
					{
					    if(PI[playerid][pLevel]<6)return SendBotMessage(playerid,"На эту работу можно устроиться только с 6-го уровня!");
                        if(!GetPlayerLicense(playerid, 0)) return SendBotMessage(playerid,"У вас нет водительских прав");
						if(PI[playerid][pZKP] < 25) return SendBotMessage(playerid,"Чтобы работать инкассатором нужно иметь законопослушность не меньше 25-ти.");
						PlayerJob[playerid] = JOB_COLLECTOR;
						SPD(playerid,28,0,"Работа: Инкассатор","{FFFFFF}Вы собираетесь устроиться на работу Инкассатором\nВы согласный с условиями?","Да","Нет");
					}
					case 5:
					{
					    if(PI[playerid][pLevel] < 5) return SendBotMessage(playerid,"На эту работу можно устроиться с 5-го уровня!");
                        if(!GetPlayerLicense(playerid, 0)) return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = JOB_TRUCKER;
						SPD(playerid,28,0,"Работа: Дальнобойщик","{FFFFFF}Вы собираетесь устроиться на работу Дальнобойщиком\nВы согласный с условиями?","Да","Нет");
					}
					case 6:
					{
					    if(PI[playerid][pLevel] < 4) return SendBotMessage(playerid,"На эту работу можно устроиться с 4-го уровня!");
                        if(!GetPlayerLicense(playerid, 0)) return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = JOB_SCRAPER;
						SPD(playerid,28,0,"Работа: Развозчик металлолома","{FFFFFF}Вы собираетесь устроиться на работу Развозчиком металлолома\nВы согласный с условиями?","Да","Нет");
					}
					case 7:
					{
					    if(PI[playerid][pLevel] < 3) return SendBotMessage(playerid,"На эту работу можно устроиться с 3-го уровня!");
                        if(!GetPlayerLicense(playerid, 0)) return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = JOB_MUSOR;
						SPD(playerid,28,0,"Работа: Мусорщик","{FFFFFF}Вы собираетесь устроиться на работу мусорщиком\nВы согласный с условиями?","Да","Нет");
					}
					case 8:
					{
					    if(PI[playerid][pLevel] < 2) return SendBotMessage(playerid,"На эту работу можно устроиться с 2-го уровня!");
                        if(!GetPlayerLicense(playerid, 0)) return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = 1;
						SPD(playerid,28,0,"Работа: Водитель автобуса","{FFFFFF}Вы собираетесь устроиться на работу водителя автобуса\nВы согласный с условиями?","Да","Нет");
					}
					case 9:
					{
					    if(PI[playerid][pLevel] < 4) return SendBotMessage(playerid,"На эту работу можно устроиться с 4-го уровня!");
                        if(!GetPlayerLicense(playerid, 0)) return SendBotMessage(playerid,"У вас нет водительских прав");
						PlayerJob[playerid] = 3;
						SPD(playerid,28,0,"Работа: развозчик продуктов","{FFFFFF}Вы собираетесь устроиться на работу развозчика продуктов\nВы согласный с условиями?","Да","Нет");
					}
					case 10:
					{
					    if(PI[playerid][pLevel] < 7) return SendBotMessage(playerid,"На эту работу можно устроиться с 7-го уровня!");
					    if(PI[playerid][pZKP] < 25) return SendBotMessage(playerid,"Чтобы работать адвокатом нужно иметь законопослушность не меньше 25-ти.");
						PlayerJob[playerid] = JOB_ADVOKAT;
						SPD(playerid,28,0,"Работа: адвокат","{FFFFFF}Вы собираетесь устроиться на работу адвоката\nВы согласный с условиями?","Да","Нет");
					}
					case 14:
					{
						if(PI[playerid][pLevel] < 7)  return 
							SendBotMessage(playerid,"На эту работу можно устроиться с 8-го уровня!");
						
						PlayerJob[playerid] = 22;
						SPD(playerid, 1234, DIALOG_STYLE_MSGBOX, "{BFBBBA}Информация о работе", "{4F943D}Работа 'Машинист электропоезда'{FFFFFF}\nСуть вашей работы заключается в перевозке пасажиров на поезде по городам San Andreas.\nДля начала работы необходимо переодеться в Депо электропоездов {ffff00}(/gps > По работе),\n{ffffff}после занять очередь на следующий маршрут. Как только очередь достигнет вас, вы должны\nподтвердить свое присутствие и занять следующий поезд. Обратите внимание, в управлении\nэтого вида транспорта, необходимо соблюдать ряд правил, иначе вам запретят работать и вы\nне получите зарплату.\n1. Нельзя близко приближаться к другим поездам.\n2. Нельзя превышать скорость больше 120 км/ч.\n3. Нельзя уходить в АФК и стоять на месте.\n{ffffff}Зарплата зависит от того, какое количество пасажиров вы перевезли.\nЧтобы забрать зарплату, необходимо полностью завершить свой рейс.\n\n{4F943D}Удачной работы!", "Принять", "");
					}
				}
				UpdatePlayerDataInt(playerid, "Job", PlayerJob[playerid]);
			}
		}
		case 235:
		{
		    if(response)
			{
			    if(setcheck[playerid] == -1) TShowStats(playerid, playerid);
 				else TShowStats(playerid, setcheck[playerid]);
			}
		}
		case 3391:
		{
		    if(response)
			{
			    if(setcheck[playerid] == -1) ShowStats(playerid, playerid);
 				else ShowStats(playerid, setcheck[playerid]);
			}
		}
		case 236:
		{
		    if(response)
			{
			    new bizzid = GoFuel[listitem][gfBizzID];
			    if(BizData[bizzid][bProducts] <= 50000)
			    {
		            PlayerGoPost[playerid] = listitem;
					TogglePlayerDynamicCP(playerid,GoFuelCP[listitem], true);
					SPD(playerid,0,0,!"","{FFFFFF}Отвезите груз на точку!\nМесто обозначено красным маркером.", !"Принять","");
					//Streamer_Update(playerid);
					SelectPost[playerid] = listitem;
				}
				else
				{
				    SCM(playerid, COLOR_GREY, !"На этой АЗС достаточно топлива");
     				ShowPlayerAZS(playerid);
				}
		    }
		}
	    case 240:
		{
		    if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(PI[playerid][pRank] >= 4)
			            {
			                if(GetTeamID(playerid) == TEAM_FBI)
							{
					            SPD(playerid, 241, 2, "","\
					            - Наркоман\n\
								- Человек в панаме\n\
								- Уборщик 1\n\
								- Уборщик 2\n\
								- Рабочий 1\n\
								- Рабочий 2\n\
								- Турист 1 \n\
								- Турист 2\n\
								- Гольфер\n\
								- Фермер\n\
								- Фермер (Жен.)\n\
								- Гражданский 1\n\
								- Гражданский 2\n\
								- Гражданский 3\n\
								- Гражданский 4 \n\
								- Гражданский 5\n\
								","Выбор","Назад");
							}
						}
						else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваш ранг недостаточно высок");
			        }
			        case 1:
			        {
			            if(PI[playerid][pRank] >= 6)
			            {
			                if(GetTeamID(playerid) == TEAM_FBI)
							{
					            SPD(playerid, 242, 2, "","\
					            - Стрит рейсер 1\n\
								- Стрит рейсер 2\n\
								- Гроув стрит 1\n\
								- Гроув стрит 2\n\
								- Вагос 1\n\
								- Вагос 2\n\
								- Баллас 1\n\
								- Баллас 2\n\
								- Коронос 1\n\
								- Коронос 2\n\
								- Рифа 1\n\
								- Рифа 2\n\
								- Байкер 1\n\
								- Байкер 2\n\
								- Крипс 1\n\
								- Крипс 2\n\
					            ","Выбор","Назад");
							}
			            }
			            else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваш ранг недостаточно высок");
			        }
			        case 2://ляка
			        {
			            if(PI[playerid][pRank] >= 9)
			            {
			                if(GetTeamID(playerid) == TEAM_FBI)
							{
					            SPD(playerid, 243, 2, "","\
					            - Стрит рейсер (Лид.)\n\
								- Гроув стрит (Лид.)\n\
								- Вагос (Лид.)\n\
								- Баллас (Лид.)\n\
								- Коронос (Лид.)\n\
								- Рифа (Лид.)\n\
								- Байкер (Лид.)\n\
								- Крипс (Лид.)\n\
								- Р.М. 1\n\
								- Р.М. 2\n\
								- Р.М. (Лид.)\n\
								- LCN. 1\n\
								- LCN. 2\n\
								- LCN. (Лид.)\n\
								- Якудза 1\n\
								- Якудза 2\n\
								- Якудза (Лид.)\n\
								- Полиция 1\n\
								- Полиция 2\n\
								- Полиция (Лид.)\n\
								- Армеец\n\
					            ","Выбор","Назад");
							}
			            }
			            else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваш ранг недостаточно высок");
					}
					case 3:
					{
					    TeamDuty{playerid}=true;
					    Vnedren[playerid]=0;
					    SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
					    SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
					    SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Вы переоделись в служебную одежду.");
					}
			    }
			}
		}
		case 241:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSkinEx(playerid, 1);
					case 1: SetPlayerSkinEx(playerid, 2);
					case 2: SetPlayerSkinEx(playerid, 8);
					case 3: SetPlayerSkinEx(playerid, 42);
					case 4: SetPlayerSkinEx(playerid, 16);
					case 5: SetPlayerSkinEx(playerid, 27);
					case 6: SetPlayerSkinEx(playerid, 26);
					case 7: SetPlayerSkinEx(playerid, 35);
					case 8: SetPlayerSkinEx(playerid, 37);
					case 9: SetPlayerSkinEx(playerid, 34);
					case 10: SetPlayerSkinEx(playerid, 31);
					case 11: SetPlayerSkinEx(playerid, 3);
					case 12: SetPlayerSkinEx(playerid, 6);
					case 13: SetPlayerSkinEx(playerid, 15);
					case 14: SetPlayerSkinEx(playerid, 18);
					case 15: SetPlayerSkinEx(playerid, 19);
		        }
		        SetPlayerColor(playerid,0xFDFCFC15);
	         	UpdatePlayerArmour(playerid, 0);
	    		PI[playerid][pShield] = 0.0;
				if(UsingShield{playerid})RemovePlayerAttachedObject(playerid, 7);
		    }
		    else SPD(playerid, 240, 2, "", "{B03131}-{FFFFFF} Стандарт [4+]\n{B03131}-{FFFFFF} Средний [6+]\n{B03131}-{FFFFFF} Высший [9]\n{B03131}-{FFFFFF} Переодеться в служебную одежду", "Выбор", !"Отмена");
		}
		case 242:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSkinEx(playerid, 67);
					case 1: SetPlayerSkinEx(playerid, 60);
					case 2:
					{
						SetPlayerSkinEx(playerid, 105);
						SetPlayerColor(playerid,0x00932799);
						Vnedren[playerid]=11;
					}
					case 3:
					{
						SetPlayerSkinEx(playerid, 106);
						SetPlayerColor(playerid,0x00932799);
						Vnedren[playerid]=11;
					}
					case 4:
					{
						SetPlayerSkinEx(playerid, 108);
						SetPlayerColor(playerid,0xD1DB1C99);
						Vnedren[playerid]=12;
					}
					case 5:
					{
						SetPlayerSkinEx(playerid, 109);
						SetPlayerColor(playerid,0xD1DB1C99);
						Vnedren[playerid]=11;
					}
					case 6:
					{
						SetPlayerSkinEx(playerid, 102);
						SetPlayerColor(playerid,0x93008099);
						Vnedren[playerid]=13;
					}
					case 7:
					{
						SetPlayerSkinEx(playerid, 103);
                        SetPlayerColor(playerid,0x93008099);
                        Vnedren[playerid]=13;
					}
					case 8:
					{
						SetPlayerSkinEx(playerid, 114);
						SetPlayerColor(playerid,0x00FFE299);
						Vnedren[playerid]=14;
					}
					case 9:
					{
						SetPlayerSkinEx(playerid, 116);
						SetPlayerColor(playerid,0x00FFE299);
						Vnedren[playerid]=14;
					}
					case 10:
					{
						SetPlayerSkinEx(playerid, 174);
						SetPlayerColor(playerid,0x238C8C99);
						Vnedren[playerid]=15;
					}
					case 11:
					{
						SetPlayerSkinEx(playerid, 175);
						SetPlayerColor(playerid,0x238C8C99);
						Vnedren[playerid]=15;
					}
					case 12:
					{
						SetPlayerSkinEx(playerid, 181);
						SetPlayerColor(playerid,0xBA541D80);
						Vnedren[playerid]=19;
					}
					case 13:
					{
						SetPlayerSkinEx(playerid, 248);
						SetPlayerColor(playerid,0xBA541D80);
						Vnedren[playerid]=19;
					}
					case 14: SetPlayerSkinEx(playerid, 221);
					case 15: SetPlayerSkinEx(playerid, 293);
		        }
		        UpdatePlayerArmour(playerid, 0);
	    		PI[playerid][pShield] = 0.0;
				if(UsingShield{playerid})RemovePlayerAttachedObject(playerid, 7);
		    }
		    else SPD(playerid, 240, 2, "", "{B03131}-{FFFFFF} Стандарт [4+]\n{B03131}-{FFFFFF} Средний [6+]\n{B03131}-{FFFFFF} Высший [9]\n{B03131}-{FFFFFF} Переодеться в служебную одежду", "Выбор", !"Отмена");
		}
		case 243:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSkinEx(playerid, 23);
					case 1:
					{
						SetPlayerSkinEx(playerid, 270);
						SetPlayerColor(playerid,0x00932799);
						Vnedren[playerid]=11;
					}
					case 2:
					{
						SetPlayerSkinEx(playerid, 110);
						SetPlayerColor(playerid,0xD1DB1C99);
						Vnedren[playerid]=12;
					}
					case 3:
					{
						SetPlayerSkinEx(playerid, 104);
						SetPlayerColor(playerid,0x93008099);
						Vnedren[playerid]=13;
					}
					case 4:
					{
						SetPlayerSkinEx(playerid, 115);
                        SetPlayerColor(playerid,0x00FFE299);
                        Vnedren[playerid]=14;
					}
					case 5:
					{
					    SetPlayerSkinEx(playerid, 173);
					    SetPlayerColor(playerid,0x238C8C99);
					    Vnedren[playerid]=15;
					}
					case 6:
					{
						SetPlayerSkinEx(playerid, 247);
						SetPlayerColor(playerid,0xBA541D80);
						Vnedren[playerid]=19;
					}
					case 7: SetPlayerSkinEx(playerid, 143);
					case 8:
					{
					    SetPlayerSkinEx(playerid, 272);
					    SetPlayerColor(playerid,0x33669980);
					    Vnedren[playerid]=16;
					}
					case 9:
					{
						SetPlayerSkinEx(playerid, 112);
						SetPlayerColor(playerid,0x33669980);
						Vnedren[playerid]=16;
					}
					case 10:
					{
						SetPlayerSkinEx(playerid, 46);
						SetPlayerColor(playerid,0x33669980);
						Vnedren[playerid]=16;
					}
					case 11:
					{
						SetPlayerSkinEx(playerid, 124);
						SetPlayerColor(playerid,0x99336680);
						Vnedren[playerid]=18;
					}
					case 12:
					{
						SetPlayerSkinEx(playerid, 223);
						SetPlayerColor(playerid,0x99336680);
						Vnedren[playerid]=18;
					}
					case 13:
					{
						SetPlayerSkinEx(playerid, 113);
						SetPlayerColor(playerid,0x99336680);
						Vnedren[playerid]=18;
					}
					case 14:
					{
						SetPlayerSkinEx(playerid, 121);
						SetPlayerColor(playerid,0x96020280);
						Vnedren[playerid]=17;
					}
					case 15:
					{
				 		SetPlayerSkinEx(playerid, 122);
                        SetPlayerColor(playerid,0x96020280);
                        Vnedren[playerid]=17;
					}
					case 16:
					{
						SetPlayerSkinEx(playerid, 120);
                        SetPlayerColor(playerid,0x96020280);
                        Vnedren[playerid]=17;
					}
					case 17:
					{
						SetPlayerSkinEx(playerid, 280);
						SetPlayerColor(playerid,0x0049FF80);
					}
					case 18:
					{
						SetPlayerSkinEx(playerid, 288);
						SetPlayerColor(playerid,0x0049FF80);
					}
					case 19:
					{
						SetPlayerSkinEx(playerid, 283);
						SetPlayerColor(playerid,0x0049FF80);
					}
					case 20:
					{
						SetPlayerSkinEx(playerid, 287); //?????
						SetPlayerColor(playerid,0x99663380);
					}
		        }
		        UpdatePlayerArmour(playerid, 0);
	    		PI[playerid][pShield] = 0.0;
				if(UsingShield{playerid})RemovePlayerAttachedObject(playerid, 7);

		    }
		    else SPD(playerid, 240, 2, "", "{B03131}-{FFFFFF} Стандарт [4+]\n{B03131}-{FFFFFF} Средний [6+]\n{B03131}-{FFFFFF} Высший [9]\n{B03131}-{FFFFFF} Переодеться в служебную одежду", "Выбор", !"Отмена");
		}
		case 247:
		{
		    new carid = GetPlayerVehicleID(playerid);
		    if(carid != 0 && VehicleInfo[carid][vJob] == JOB_TAXI)
			{
		    	if(response)
		    	{
				    new driverid = GetVehicleSeat(carid, 0);
				    if(driverid != INVALID_PLAYER_ID && PlayerJob[driverid] == JOB_TAXI)
				    {
						if(TaxiTarif[driverid] > 0)
						{
							if(PlayerAFKTime[driverid][0]>0)
							{
							    SCM(playerid,COLOR_RED,!">> Вы не можете сесть в такси, так-как водитель находится АФК!");
							    ExitCar(playerid);
							    return 1;
							}
					        switch(listitem)
					        {
					            case 0:
					            {
									for(new i;i < sizeof(GpsInfo);i ++)
									{
										global_str = "";
									    f(global_str, 1000,"%s%s\n",global_str, GpsInfo[i][gpsName]);
									}
         							SPD(playerid, 248, 2, "Выберите пункт", global_str, "Выбор", !"Отмена");
					            }
					            case 1:
					            {
									SCM(playerid, COLOR_VALIK, !"Откройте карту (Esc > Карта) и отметьте на ней пункт назначения");
			                        Taxi_GO[playerid] = 1;
								}
					            case 2:
					            {
					                SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Вы выбрали пункт: 'Договориться с таксистом'");
					                Taxi_GO[playerid] = 2;
					                SCM(driverid, COLOR_GREY, !"[Подсказка] {FFFFFF}Игрок выбрал пункт: 'Договориться с таксистом'");
					            }
					        }
						}
					}
				}
			    else
			    {
			        SCM(playerid, COLOR_GREY, !"Вы отказались от проезда!");
			        RemovePlayerFromVehicle(playerid);
			        new driverid = GetVehicleSeat(carid, 0);
			    	if(driverid != INVALID_PLAYER_ID && PlayerJob[driverid] == JOB_TAXI)
					{
					    f(global_str,sizeof(global_str),"%s отказался(ась) от проезда", PN(playerid));
					    SCM(driverid, COLOR_GREY, global_str);
					}
			    }
			}
		}
		case 248:
		{
		    if(response)
		    {
		        new carid = GetPlayerVehicleID(playerid);
		        if(carid != 0 && VehicleInfo[carid][vJob] == JOB_TAXI)
				{
				    new driverid = GetVehicleSeat(carid, 0);
				    if(driverid != INVALID_PLAYER_ID && PlayerJob[driverid] == JOB_TAXI)
				    {
						if(TaxiTarif[driverid] > 0)
						{
						    EnableGPSForPlayer(driverid,GpsInfo[listitem][gpsPos][0],GpsInfo[listitem][gpsPos][1],GpsInfo[listitem][gpsPos][2]);
						    f(global_str, sizeof(global_str), "%s выбрал(а) пункт '%s'", PN(playerid), GpsInfo[listitem][gpsName]);
						    SCM(driverid, COLOR_VALIK, global_str);
						    f(global_str, sizeof(global_str), "Вы выбрали пункт '%s'", GpsInfo[listitem][gpsName]);
						    SCM(playerid, COLOR_VALIK, global_str);
						}
						else SCM(playerid, COLOR_GREY, !"Таксист ещё не установил тариф");
					}
					else SCM(playerid, COLOR_GREY, !"В такси нет водителя. Либо водитель не таксист");
				}
				else SCM(playerid, COLOR_GREY, !"Вы должны сидеть в такси");
		    }
		    else SPD(playerid, 247, 2, "Как ехать?", "1. Выбрать пункт в GPS\n2. Отметить точку на карте\n3. Договориться с таксистом", "Выбор", !"Отмена");
		}
		case 885:
		{
		    if(response)
		    {
		        if(strlen(inputtextsave)>5)
		        {
		            for(new i;i < strlen(inputtextsave);i ++)
					{
					    if(inputtextsave[i] < '0' || inputtextsave[i] > '9') return SPD(playerid, 885, 1, "", "{FFFFFF}Введите {B83434}новый{FFFFFF} Pin-код\n\n{FF0000}Ошибка: Код безопасности может состоять только из цифр!","Далее", !"Отмена");
					}
          			PI[playerid][pBankPass] = strval(inputtextsave);
          			f(global_str,sizeof(global_str),"{929290}Вы успешно сменили свой пароль от банковской карты.\nТеперь ваш пароль: %d запишите его чтобы не забыть!",PI[playerid][pBankPass]);
          			SPD(playerid,0,0,!"",global_str, !"Закрыть","");
		        }
		        else SPD(playerid, 885, 1, "", "{FFFFFF}Введите {B83434}новый{FFFFFF} Pin-код\nКод должен состоять из 6 символов!","Далее", !"Отмена");

		    }
		}
		case 883:
		{
			if(response)
		    {
		        if(!strlen(inputtextsave)) SPD(playerid, 883, 1, "", "{FFFFFF}Введите {B83434}ваш{FFFFFF} код безопасности","Далее", !"Отмена");
		        if(PI[playerid][pBankPass] == strval(inputtextsave)) SPD(playerid, 885, 1, "", "{FFFFFF}Введите {B83434}новый{FFFFFF} Pin-код","Далее", !"Отмена");
		        else SPD(playerid,0,0,!"","{929090} Вы не правильно ввели свой PIN-код!", !"Закрыть","");
			}
			else if(PI[playerid][pBankPass] == 0) SPD(playerid,0,0,!"","У вас нет банковской карты. Получить ее можно в\nбанковском отделении Las Venturas ,или у сотрудника банка!", !"Закрыть","");
		}
		case 254:
		{
		    if(response)
		    {
		        if(!CreateMats[playerid])
		        {
		            CreateMats[playerid] = 1;
		            CreateMatsCount[playerid] = 0;
		            PI[playerid][pOldSkin] = GetPlayerSkin(playerid);//kisa
		            if(PI[playerid][pSex] == 1) SetPlayerSkinEx(playerid, 27);
					if(PI[playerid][pSex] == 2) SetPlayerSkinEx(playerid, 53);
		        }
		        else
		        {
		            if(IsPlayerAttachedSlotUsedEx(playerid, 7))RemovePlayerAttachedObject(playerid, 7);
		            if(IsPlayerAttachedSlotUsedEx(playerid, 6))RemovePlayerAttachedObject(playerid, 6);
              		if(GetPlayerVirtualWorld(playerid)==10 )
					{
						GiveMoney(playerid, CreateMatsCount[playerid] * GLS[5]);
		            	CreateMats[playerid] = 0;
		            	f(global_str, sizeof(global_str),"Вы закончили работу и получили {73B461}$%d", (CreateMatsCount[playerid] * GLS[5]));
		            	SCM(playerid, COLOR_WHITE, global_str);
					}
					else
					{
					    GiveMoney(playerid, (CreateMatsCount[playerid] * GLS[5])/2);
		            	CreateMats[playerid] = 0;
		            	f(global_str, sizeof(global_str),"Вы закончили работу и получили {73B461}$%d", (CreateMatsCount[playerid] * GLS[5])/2);
		            	SCM(playerid, COLOR_WHITE, global_str);
					}
					SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
		            TogglePlayerDynamicCP(playerid, FerumEndCP, false);
					for(new i; i < sizeof(FerumCP);i ++) TogglePlayerDynamicCP(playerid, FerumCP[i], false);
		        }
		    }
		}
		case 258:
		{
		    if(response)
			{
			    new bizzid = GoGunShop[listitem][gsBizzID];
			    if(BizData[bizzid][bProducts] <= 49000)
			    {
					if(FactoryMats<500)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}На складе завода не достаточно материалов!");
		            PlayerGoPost[playerid] = listitem;
					TogglePlayerDynamicCP(playerid, GoGunShopCP[listitem], true);
					SPD(playerid,0,0,!"","{FFFFFF}Отвезите груз на точку!\nМесто обозначено красным маркером.", !"Принять","");
					//Streamer_Update(playerid);
					SelectPost[playerid] = listitem;
					FactoryMats -= 500;
     				f(global_str, sizeof(global_str), "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
					UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
				}
				else
				{
				    SCM(playerid, COLOR_GREY, !"В этом оружейном магазине достаточно патронов!");
     				InJob[playerid] = 1;
					ShowPlayerGS(playerid);
				}
		    }
		}
		case 259:
		{
		    new offer = LawyerOffer[playerid];
		    if(offer == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Видимо адвокат отказался от своего предложения");
			if(!IsPlayerConnected(offer)) return SCM(playerid, COLOR_GREY, !"Адвокат вышел с игры");
			if(LawyerOffer[offer] != playerid) return SCM(playerid, COLOR_GREY, !"Видимо адвокат отказался от своего предложения");
			if(response)
			{
	            SPD(playerid, 260, 2, "Способ оплаты", "Наличными\nЧерез банк (+10 процентов)", "Выбор", !"Отмена");
	            LawyerOffer[playerid] = offer;
	        }
	        else
			{
			    LawyerOffer[playerid] = INVALID_PLAYER_ID;
	            LawyerOffer[offer] = INVALID_PLAYER_ID;
			    SCM(playerid, COLOR_GREY, !"[Информация] {FFFFFF}Вы отказались от услуг адвоката");
			    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}%s отказался(лась) от ваших услуг", PN(playerid));
			    SCM(offer, COLOR_GREY, global_str);
			}
		}
		case 263:
		{
		    if(response)
			{
			    if(listitem < 5)
			    {
					new fish = PlayerFish[playerid][listitem];
					if(fish != 0)
					{
					    f(global_str, sizeof(global_str), "Вы выбросили %s массой %d Kg", FishName[fish], FishMassa[playerid][listitem]);
					    SCM(playerid, COLOR_VALIK, global_str);
					    PlayerFish[playerid][listitem] = 0;
					    FishMassa[playerid][listitem] = 0;
					}
				}
				else
				{
				    for(new i; i < 5; i++)
				    {
				        PlayerFish[playerid][i] = 0;
					    FishMassa[playerid][i] = 0;
				    }
				    SCM(playerid, COLOR_VALIK, !"Вы выбросили всю рыбу");
				}
			}
		}
		case 2263:
		{
			if(!response) return callcmd::apanel(playerid);
			
			if(listitem == 15) FirstBL[playerid] ++;
			else if(listitem == 16) FirstBL[playerid] --;
			
			return ShowAdminList(playerid, FirstBL[playerid]);
		}
		case 266:
		{
			if(!response) return 1;
            switch(listitem)
            {
                case 0:
                {
                    RespawnCars(1, CountVehicles());
                    SCM(playerid, COLOR_VALIK, !"Вы зареспавнили весь транспорт.");
                    f(global_str, sizeof(global_str), "[A] Администратор %s[%d] заспавнил транспорт!", PN(playerid), playerid);
					SendAdminsMessage(COLOR_GREY, global_str);
                }
                case 1:
                {
                    RespawnCars(ArendCar[0], ArendCar[ARENDCARS - 1]);
                    SCM(playerid, COLOR_VALIK, !"Вы зареспавнили транспорт для аренды.");
                    f(global_str, sizeof(global_str), "[A] Администратор %s[%d] заспавнил транспорт!", PN(playerid), playerid);
					SendAdminsMessage(COLOR_GREY, global_str);
                }
                case 2:
                {
                    RespawnCars(OwnableCar[0], OwnableCar[MAX_VEHICLES - 1]);
                    SCM(playerid, COLOR_VALIK, !"Вы зареспавнили транспорт игроков.");
                    f(global_str, sizeof(global_str), "[A] Администратор %s[%d] заспавнил транспорт!", PN(playerid), playerid);
					SendAdminsMessage(COLOR_GREY, global_str);
                }
			}
		}
		case 255:
		{
	        if(!response) return callcmd::apanel(playerid);
			
			AntiDm[listitem][zStatus] = !AntiDm[listitem][zStatus];
	        f(global_str, 150, "UPDATE `antidm` SET `status`='%d' WHERE `id` = '%d'",AntiDm[listitem][zStatus], AntiDm[listitem][zID]);
			mysql_tquery(mysql, global_str);
			global_str = "Название\tСостояние\n";
			for(new i; i < ANTIDMLOAD; i++)
				f(global_str, 2000, "%s{FFFFFF}%s\t%s{FFFFFF}\n", global_str, AntiDm[i][zName], AntiDm[i][zStatus] ? ("{9ACD32}[Вкл]") : ("{FF6347}[Выкл]"));
			    
			SPD(playerid, 255, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Принять", !"Отмена");
			amlf("Администратор <a href=../pages/user?id=%d>%s</a> %s AntiDM зону %s", 5, "", "", PI[playerid][pID], PN(playerid), AntiDm[listitem][zStatus] ? ("Включил") : ("Выключил"),AntiDm[listitem][zName]);
		}

		case 27084:
		{
			if(!response) 
				return true;

            switch listitem do
            {
				case 0: 
					return ShowAdminList(playerid);

                case 1: 
					callcmd::cc(playerid);

				case 2:
                {
					if(PI[playerid][pAdmin] < 3) 
						return false;

					static Name[MAX_PLAYER_NAME]; Name = "";
					new Cache:result = mysql_query(mysql, "SELECT `Name` FROM `bannames` ORDER BY `ID` DESC LIMIT 0, 20"), accounts = cache_num_rows();
				    if(accounts == 0) return SCM(playerid, COLOR_GREY, !"Список забаненных пуст");
				    FirstBL[playerid] = 0;
				    for(new i; i < accounts; i++)
				    {
					    cache_get_value_index(i, 0, Name);
				        f(global_str, sizeof(global_str), "%s%s\n", global_str, Name);
				    }
				    if(accounts == 20) f(global_str, sizeof(global_str), "%s{AFAFAF}Далее >>>\n", global_str);
					return cache_delete(result), SPD(playerid, 96, DIALOG_STYLE_LIST, !"Забаненые", global_str, !"Выбор", !"Назад");
                }

                case 3:
				{
				    if(PI[playerid][pAdmin] < 4) 
						return SCM(playerid, COLOR_GREY, !"Ты еще мал для такого удовольствия!");

					global_str = "";

					for(new x = 1; x < MAX_ORGS; x++)
						f(global_str, 1700, "%s{FFFFFF}%s: \t\t{9ACD32}%s\n", global_str, OrgInfo[x][oName], OrgInfo[x][oLeader]);
					
					return SPD(playerid, 115, DIALOG_STYLE_LIST, !"Снять с лидерства", global_str, !"Снять", !"Отмена");
				}

				case 8:
				{
					if(PI[playerid][pAdmin] < 7) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					f(global_str, sizeof(global_str), "Параметр\tСтатус\nEXP(x2)\t%s\nPayDay(x2)\nPayDay(x3)\nPayDay(x5)\nКазино\t%s", GLS[23] ? ("{9ACD32}Включено") : ("{FF6347}Выключено"), GLS[67] ? ("{FF6347}Закрыто") : ("{9ACD32}Открыто"));
                    return SPD(playerid, 951, DIALOG_STYLE_TABLIST_HEADERS, !"Информация", global_str, !"Выбор", !"Отмена");
				}

				case 13:
				{
					if(PI[playerid][pAdmin] < 5) return SCM(playerid, COLOR_GREY, !"Ваш уровень не достаточно высок!");
					
					global_str = "Название\tСтатус\n";
					for(new i; i < ANTIDMLOAD; i++)
						f(global_str, sizeof(global_str), "%s{FFFFFF}%s\t%s{FFFFFF}\n", global_str, AntiDm[i][zName], AntiDm[i][zStatus] ? ("{9ACD32}[Вкл]") : ("{FF6347}[Выкл]"));
					
					return SPD(playerid, 255, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Принять", !"Отмена");
				}

				case 16:
				{
					if(PI[playerid][pAdmin] < 5)
                        return 0;

					for(new i; i < OWNABLEBIZES; i ++)
						BizData[i][bProducts] = 100000,
						UpdateBusinessText(i, 1);
					
					SCM(playerid, COLOR_GREY, !"Вы успешно пополнили склады бизнесов");
				}

				case 21: return callcmd::orgmembers(playerid);

				case 10,12,18,19,20,25:
				{
					new ADMlvl[] = {3, 0, 5, 0, 0, 0, 0, 0, 5, 5, 1, 0, 0, 0, 0, 0, 5}, PANELid[] = {0, -1, 1, -1, -1, -1, -1, -1, 2, 3, 4, -1, -1, -1, -1, -1, 5};
					
				    if(PI[playerid][pAdmin] < ADMlvl[listitem - 10]) 
						return false;
					
				    ACTIVEpanel[ PANELid[ listitem - 10 ] ] = !ACTIVEpanel[ PANELid[ listitem - 10 ] ];
				}

				case 22: AdminInfo[playerid][admIP] = !AdminInfo[playerid][admIP];
				case 27: AdminInfo[playerid][admNickNameTag] = !AdminInfo[playerid][admNickNameTag];

				default:
					SCMF(playerid, -1, "Разработка... [listitem: %i]", listitem);
			}

			return callcmd::apanel(playerid);
		}

		case 8799:
		{
			if(response)
			{
				switch(listitem)
				{
				    case 0:
					{
					    if(PI[playerid][pAdmin] < 4) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					    if(Jetpackanticheat == 1) Jetpackanticheat = 0;
					    else Jetpackanticheat = 1;
						ShowSettingsServer(playerid);
					}
					case 1:
					{
					    if(PI[playerid][pAdmin] < 5) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					    weaponhack = !weaponhack;
						ShowSettingsServer(playerid);
					}
					case 3:
					{
						if(IsOsnovatel(playerid)) {
							SCM(playerid, COLOR_RED, "Машины успешно отсортированы.");
						}
						else SCM(playerid, COLOR_GREY, "Ты еще мал для такого удовольствия!");
					}
					case 4:
					{
					    if(PI[playerid][pAdmin] < 7) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					    suspect = !suspect;
						ShowSettingsServer(playerid);
					}
					case 5:
					{
					    if(!IsOsnovatel(playerid)) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
					    x2don = !x2don;
						ShowSettingsServer(playerid);
					}
					case 6:
					{
						if(!IsOsnovatel(playerid)) return SCM(playerid, COLOR_RED, !"Мелкий еще!");
						GLS[22] = !GLS[22];
						for(new i;i<85;i++)
						{
							if(GLS[22])
							{
								PodarokInfo[i][porCreat] = -1;
								if(IsValidDynamicPickup(PodarokInfo[i][porCreat])) DestroyDynamicPickup(PodarokInfo[i][porCreat]);
								PodarokInfo[i][porCreat] = CreateDynamicPickup(19056,1,PodarokInfo[i][porPos][0], PodarokInfo[i][porPos][1], PodarokInfo[i][porPos][2],-1);
							}
							else if(IsValidDynamicPickup(PodarokInfo[i][porCreat])) DestroyDynamicPickup(PodarokInfo[i][porCreat]);
						}
						ShowSettingsServer(playerid);
					}
				}
			}
			else callcmd::apanel(playerid);
		}
		case 8744:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: FindOrgNumbers(playerid,1);
					case 1: FindOrgNumbers(playerid,2);
					case 2: FindOrgNumbers(playerid,3);
					case 3: FindOrgNumbers(playerid,4);
					case 4: FindOrgNumbers(playerid,5);
					case 5: FindOrgNumbers(playerid,22);
					case 6: FindOrgNumbers(playerid,6);
					case 7: FindOrgNumbers(playerid,7);
					case 8: FindOrgNumbers(playerid,8);
					case 9: FindOrgNumbers(playerid,9);
					case 10: FindOrgNumbers(playerid,10);
					case 11: FindOrgNumbers(playerid,20);
					case 12: FindOrgNumbers(playerid,21);
					case 13: FindOrgNumbers(playerid,23);
					case 14: FindOrgNumbers(playerid,24);
					case 15: FindOrgNumbers(playerid,26);
					case 16: FindOrgNumbers(playerid,27);
					//
					case 17: FindJobNumbers(playerid,5);
					case 18: FindJobNumbers(playerid,4);
					case 19: FindJobNumbers(playerid,11);
					case 20: FindJobNumbers(playerid,16);
					case 21: FindJobNumbers(playerid,6);
					case 22: FindJobNumbers(playerid,8);
		        }
		    }
		}
		case 966:
		{
			if(!response)
				return false;

            switch listitem do
            {
                case 0: ShowPhoneUpdateSettings(playerid);
                case 1: SPD(playerid, 997, DIALOG_STYLE_LIST, !"", !"{B03131}[1]{FFFFFF} Установить таймер\n{B03131}[2]{FFFFFF} Остановить таймер", !"Принять", !"Отмена");
                case 2: SPD(playerid, 8744, DIALOG_STYLE_LIST, !"", !"{FFFFFF}<< Полиция ЛС\n<< RCPD\n<< FBI\n<< Полиция SF\n<< Больница LS\n<< Больница LV\n<< Правительство\n<< Армия LV\n<< Больница SF\n<< Лицензеры\n<< Radio LS\n<< Армия LS\n<< Центральный Банк\n<< Полиция LV\n<< Radio LV\n<< Radio SF\n<< Армия SF\n<< Таксисты\n<< Механики\n<< Дальнобойщики\n<< Налоговая служба\n<< Адвокаты\n<< Крупье", !"Выбрать", !"Отмена");
                case 3: {
					if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}В машине вы не можете использовать селфи!");
				    if(AnimPlayed{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Перед тем как включить режим селфи, остановите анимации!");
					if(PI[playerid][pHeal] > 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");
				    if(Cuffed[playerid]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");
				    if(CuffedTime[playerid]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы парализованы!");
				    if(selfi{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваши руки заняты!");
					callcmd::phone(playerid);
				    TextDrawShowForPlayer(playerid, StopAnimation);
				    selfi{playerid} = true;
				    TogglePlayerControllable(playerid, 0);
					PlayerPlaySound(playerid, 17001, 0.0, 0.0, 0.0);
				    SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Используйте /headmove, чтобы выровнять голову!");
				    SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Нажмите 'F8', для того чтобы сделать фото.");
				    SCM(playerid, COLOR_RED, !"[Подсказка] {FFFFFF}Используйте 'Enter' , чтобы выключить камеру.");
				    //
				    new Float:n1X, Float:n1Y, Float:Selfi1, Float:X, Float:Y, Float:Z;
				    GetPlayerPos(playerid, X, Y, Z);
				    GetPlayerFacingAngle(playerid, Selfi1);
				    n1X = X + 1.7 * floatcos(180.0, degrees);
				    n1Y = Y + 1.7 * floatsin(180.0, degrees);
			        SetPlayerAttachedObject(playerid, 0, 18868, 6, 0.06, 0.01, 0.08, 180.0, 90.0, 0.0);
				    SetPlayerCameraPos(playerid, n1X, n1Y, Z + 1.15);
				    SetPlayerCameraLookAt(playerid, X, Y, Z + 1);
				    SetPlayerFacingAngle(playerid, -270.0);
				    ApplyAnimationEx(playerid, !"PED", !"gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
				    return 1;
                }
                case 4: callcmd::radio(playerid);
                case 5: {
					f(global_str,sizeof(global_str),"На балансе вашего телефона: {73B461}%d${FFFFFF}.\n\n",PI[playerid][pPhoneInfo][2]);
					SPD(playerid,0,0,!"",global_str, !"Закрыть","");
					SetPlayerChatBubble(playerid, "Набрал не известный номер.", COLOR_PURPLE, 10.0, 5000);
                }

                case 6: PI[playerid][pPhoneInfo][1] = !PI[playerid][pPhoneInfo][1], ShowPhoneMenu(playerid);
				
                case 7: return callcmd::phone(playerid);
                case 8..9:
				{
					if(!GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "brend"))
						return false;
						
					return CheckNalog(playerid, listitem - 8);
				}
            }
		}
        case 119:
		{
		    if(response)
		    {
		        new money = strval(inputtextsave);
				
				sendPlayerBattlepassAction(playerid, 2);

		        if(PI[playerid][pMoney] < money)
					return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

		    	else if(money < 1 or (money+PI[playerid][pPhoneInfo][2]) > 5650)
					return SPD(playerid, 119, 1, !"Пополнить баланс", !"\n\n{FFFFFF}Введите сумму для пополнение на баланс свого телефона\n\n{D01212}Ошибка! Вы можете положить на баланс телефона не менее 1$ и не более 5650$", !"Оплатить", !"Отмена");

		        GiveMoney(playerid,-money);
		        PI[playerid][pPhoneInfo][2] +=money;
		        SendBankBot(playerid);
		    }
		}

		case 963:
		{
		    if(response)
		    {
		        new id;
		        new money = strval(inputtextsave);
		        sscanf(PI[playerid][pSendName], "u", id);
		        if(!IsPlayerConnected(id)) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация!", !"{B03131}Вы не можете пополнить баланс человека , который оффлайн!", !"Принять", !"");
		        if(PI[playerid][pPhoneInfo][2] < money) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация!", !"{B03131}У вас на балансе телефона недостаточно денег!", !"Принять", !"");
		        if(money < 1 || (money + PI[id][pPhoneInfo][2]) > 5000)
		        {
		            SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация!", !"{B03131}Вы не можете пополнить баланс телефона своему контакту на такую сумму, так как на телефоне можно держать до 5000$", !"Принять", !"");
					return 0;
		        }
		        PI[playerid][pPhoneInfo][2] -= money;
		        PI[id][pPhoneInfo][2] += money;
		        f(global_str, sizeof(global_str), "{73B461}Вы успешно пополнили баланс контакта %s на %d$!", PN(id), money);
		        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", global_str, !"Принять", !"");
		        f(global_str, sizeof(global_str), "%s пополнил баланс вашего мобильного на %d$.", PN(playerid), money);
		        SCM(id, COLOR_VALIK, global_str);
		    }
		}
		case 951:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0:
		            {
		                if(GLS[23] > 0)
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s выключил х2 ЕХР!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    GLS[23] = 0;
		                }
		                else
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s включил х2 ЕХР!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    GLS[23] = 1;
		                }
		            }
		            case 1:
		            {
		                if(XPayDay == 2)
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s выключил X2 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    XPayDay = 0;
		                }
		                else
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s включил X2 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
                            XPayDay = 2;
						}
		            }
		            case 2:
		            {
		                if(XPayDay == 3)
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s выключил X3 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    XPayDay = 0;
		                }
		                else
		                {
                            f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s включил X3 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
                            XPayDay = 3;
		                }
		            }
		            case 3:
		            {
		                if(XPayDay == 5)
		                {
		                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s выключил X5 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
		                    XPayDay = 0;
		                }
						else
						{
                            f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s включил X5 PayDay!",PN(playerid));
		                    SCMALL(COLOR_RED,global_str);
							XPayDay = 5;
						}
		            }
					case 4: {
					    GLS[67] = !GLS[67];
	                    f(global_str,sizeof(global_str),"Основатель: {FFFFFF}%s %s казино!",PN(playerid), GLS[67] ? ("закрыл") : ("открыл"));
	                    SCMALL(COLOR_RED,global_str);
					}
		        }
		        SaveInformation();
				f(global_str, sizeof(global_str), "Параметр\tСтатус\nEXP(x2)\t%s\nPayDay(x2)\nPayDay(x3)\nPayDay(x5)\nКазино\t%s", GLS[23] ? ("{9ACD32}Включено") : ("{FF6347}Выключено"), GLS[67] ? ("{FF6347}Закрыто") : ("{9ACD32}Открыто"));
    			SPD(playerid, 951, DIALOG_STYLE_TABLIST_HEADERS, !"Информация", global_str, !"Выбор", !"Отмена");
		    }
		    else {
		    	callcmd::apanel(playerid);
		    }
		}
		case 779:
		{
		    if(response) SPD(playerid,778,1,"","{B03131}Обратите внимание!{FFFFFF}\n\nСейчас вы вписываете пароль на банковскую карту. Будьте внимательны\nпотому что его восстановить будет крайне сложно, и все средства на вашей карте будут утеряны.\n{B03131}Пароль должен состоять из 6 символов!{FFFFFF}\n\nОстальную информацию ищите в /help.","Получить", !"Отмена");
		}
		case 778:
		{
		    if(response)
		    {
		        new len = strlen(inputtextsave);
		        for(new i;i<len;i++)
		        {
		            switch(inputtextsave[i])
		            {
		                case '0'..'9':{}
		                default: return SPD(playerid,778,1,"","{B03131}Обратите внимание!{FFFFFF}\n\nСейчас вы вписываете пароль на банковскую карту. Будьте внимательны\nпотому что его восстановить будет крайне сложно, и все средства на вашей карте будут утеряны.\n{B03131}Пароль должен состоять из 6-10 символов!{FFFFFF}\n\nОстальную информацию ищите в /help.","Получить", !"Отмена");
		            }
		        }
		        if(IsPlayerInRangeOfPoint(playerid, 1.0, 951.6823,2451.9871,1601.9871 )) {
					if(PI[playerid][pMoney]<1500)return SendBotMessage(playerid,"Извините, но  у вас недостаточно денег!");
		    	}
		    	else {
		    		if(PI[playerid][pMoney]<1000)return SendBotMessage(playerid,"Извините, но  у вас недостаточно денег!");
		    	}
		        if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 10) return SPD(playerid,778,1,"","{B03131}Обратите внимание!{FFFFFF}\n\nСейчас вы вписываете пароль на банковскую карту. Будьте внимательны\nпотому что его восстановить будет крайне сложно, и все средства на вашей карте будут утеряны.\n{B03131}Пароль должен состоять из 6-10 символов!{FFFFFF}\n\nОстальную информацию ищите в /help.","Получить", !"Отмена");
		        if(PanelPlayerID[playerid]==-1) {
	        		if(IsPlayerInRangeOfPoint(playerid, 1.0, 951.6823,2451.9871,1601.9871 )) {
		        		GiveMoney(playerid,-1500);
		        	}
		        	else {
		        		GiveMoney(playerid, -1000);
		        	}
		        }
		        else
		        {
		            GiveMoney(playerid,-3000);
		            GiveMoney(PanelPlayerID[playerid],2000);
		            PanelPlayerID[playerid]=-1;
		        }
		        PI[playerid][pBankPass]=strval(inputtextsave);
		        PI[playerid][pKlogin]=0;
		        SendBankBot(playerid);
		        f(global_str,sizeof(global_str),"Вы успешно получили банковскую карту.\nВаш пароль: {73B461}%d{FFFFFF}. Обязательно запишите его или ваш счет будет утерян!",PI[playerid][pBankPass]);
		        SPD(playerid,0,0,"Информация",global_str, !"Принять","");
		    }
		}
		case 991:
		{
		    if(!response) return 1;
	        new pass = strval(inputtextsave);

	        if(pass != PI[playerid][pBankPass]) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация!", !"{FFFFFF}Вы не правильно ввели PIN-код!\nЕсли вы забыли свой PIN-код вы можете его восстановить у сотрудника банка\n8-го и выше ранга, оплатив его работу.", !"Принять", !"");
	        PI[playerid][pKlogin] = 1;
   			SPD(playerid, 0, 0, "","{FFFFFF}PIN-код принят!\nХорошего {beff3d}дня!","Понял","");
		}
		case 958:
		{
		    if(response)
		    {
		        if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
				if(GetPlayerInterior(playerid)!=0 || GetPlayerVirtualWorld(playerid)!=0)return SPD(playerid,0,0,"Информация","В здании нельзя вызвать медиков!", !"Принять","");
		        if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 20 ) return SPD(playerid,0,0,"Информация","{B03131}Сообщение должно состоять с 6 до 20 символов!", !"Принять","");
			    MedikON{playerid} = true;
		        new Mediks;
		        static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает скорую помощь, местоположение: {B03131}%s{FFFFFF}.",PN(playerid),playerid,trr,inputtextsave);
				foreach(new i: Player)
				{
			        if(GetTeamID(i) == TEAM_M4C ||GetTeamID(i) == TEAM_MEDICLV)
			        {
						SCM(i,COLOR_LIGHTBLUE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gomedik");
						Mediks ++;
			        }
				}
				if(Mediks > 0) SCM(playerid,COLOR_VALIK, !"Все медики получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"В данный момент нет медиков онлайн");
		    }
		}
		case 959:
		{
		    if(response)
		    {
		        if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
                if(GetPlayerInterior(playerid)!=0 || GetPlayerVirtualWorld(playerid)!=0)return SPD(playerid,0,0,"Информация","В здании нельзя вызвать полицию!", !"Принять","");
				if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 20 ) return SPD(playerid,0,0,"Информация","{B03131}Сообщение должно состоять с 6 до 20 символов!", !"Принять","");
				PoliseON{playerid} = true;
				new Polismens;
				static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает полицию, местоположение: {B03131}%s{FFFFFF}.",PN(playerid),playerid,trr,inputtextsave);
				foreach(new i: Player)
				{
			        if(IsACop(i))
			        {
						SCM(i,COLOR_WHITE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gopolice");
						Polismens ++;
			        }
				}
				if(Polismens > 0)SCM(playerid,COLOR_VALIK, !"Все полицейские получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"В данный момент нет полицейских онлайн");
		    }
		}
		case 960:
		{
		    if(response)
		    {
                if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
                if(GetPlayerInterior(playerid)!=0 || GetPlayerVirtualWorld(playerid)!=0)return SPD(playerid,0,0,"Информация","В здании нельзя вызвать такси!", !"Принять","");
				if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 20 ) return SPD(playerid,0,0,"Информация","{B03131}Сообщение должно состоять с 6 до 20 символов!", !"Принять","");
				TaxiON{playerid} = true;
		        new Taxists;
		        static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает такси, местоположение: {B03131}%s{FFFFFF}.",PN(playerid),playerid,trr,inputtextsave);
				foreach(new i: Player)
				{
			        if(PlayerJob[i] == JOB_TAXI)
			        {
						SCM(i,COLOR_LIGHTBLUE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gotaxi");
						Taxists ++;
			        }
				}
				if(Taxists > 0) SCM(playerid,COLOR_VALIK, !"Все таксисты получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"В данный момент нет таксистов онлайн");
		    }
		}
		case 2261:
		{
		    if(response)
		    {
				if(PI[playerid][pMoney]<75)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас не достаточно денег чтобы вызвать такси!");
				if(Int_GetPlayerData(playerid,"taxi")>Global_Time)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Нельзя так часто вызывать такси!");
				TaxiON{playerid} = true;
		        new Taxists; 
		        static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает такси, местоположение: {B03131}Будет отмечено на карте{FFFFFF}.",PN(playerid),playerid,trr);
				foreach(new i: Player)
				{
			        if(PlayerJob[i] == JOB_TAXI)
			        {
						SCM(i,COLOR_LIGHTBLUE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gotaxi");
						Taxists ++;
			        }
				}
				if(Taxists > 0) SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Все таксисты получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}В данный момент нет таксистов онлайн");
				GiveMoney(playerid,-75);
				SetPVarInt(playerid,"taxi",Global_Time+30);
				ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
				SetPlayerChatBubble(playerid, "Вызывает такси", COLOR_PURPLE, 10.0, 5000);
		    }
		}
		case 961:
		{
		    if(response)
		    {
		        if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
                if(GetPlayerInterior(playerid)!=0 || GetPlayerVirtualWorld(playerid)!=0)return SPD(playerid,0,0,"Информация","В здании нельзя вызвать механика!", !"Принять","");
				if(strlen(inputtextsave) < 6 || strlen(inputtextsave) > 20 ) return SPD(playerid,0,0,"Информация","{B03131}Сообщение должно состоять с 6 до 20 символов!", !"Принять","");
				MehanON{playerid} = true;
			    new Mehans;
			    static trr[30];
		        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "LS";
				else if(IsPlayerToKvadrat(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "SF";
				else trr = "LV";
				f(global_str,sizeof(global_str),"{B03131}%s[%d]{FFFFFF} с города %s, вызывает механика, местоположение: {B03131}%s{FFFFFF}.",PN(playerid),playerid,trr,inputtextsave);
				foreach(new i: Player)
				{
			        if(PlayerJob[i] == JOB_MECHANIC)
			        {
						SCM(i,COLOR_LIGHTBLUE,global_str);
						SCM(i,COLOR_GREY, !"{73B461}Поступил вызов, чтобы принять введите /gomechanic");
						Mehans ++;
			        }
				}
				if(Mehans > 0) SCM(playerid,COLOR_VALIK, !"Все механики получили ваш вызов");
				else SCM(playerid,COLOR_RED,!"В данный момент нет механиков онлайн");
		    }
		}
		case 962:
		{
  			if(response)
		    {
                switch(listitem)
		        {
		            case 0://показываем список сообщений.
		            {
						f(global_str, sizeof(global_str), "SELECT * FROM `phonemes` WHERE (`Name` = '%s' AND `Namez` = '%s') OR (`Namez` = '%s' AND `Name` = '%s') ORDER BY `time` DESC LIMIT 0, 20", PN(playerid), PI[playerid][pSendName], PN(playerid), PI[playerid][pSendName]);
						mysql_tquery(mysql, global_str, "ShowPlayerMessage", "d", playerid);
						return 1;
		            }
		            case 1:
					{
						if(PI[playerid][pCalling] != -1) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Вы уже кому-то звоните", !"Закрыть", !"");
						foreach(new id: Player)
						{
							if(PI[id][pCalling]==playerid && pTemp[id][tAuthorized])
							{
								return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"Вам уже ктото звонит", !"Закрыть", !"");
							}
						}
						if(PI[playerid][pPhoneInfo][2] < 15) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}У вас на балансе недостаточно средств для того чтобы вести разговор!\nПополнить баланс телефона можно у любого банкомата штата или\nвы можете выслать *130* своему другу с просьбой перезвонить!", !"Закрыть", !"");
                        f(global_str, sizeof(global_str), "SELECT `Group` FROM `phonebook` WHERE `Namez` = '%s' AND `Name` = '%s' LIMIT 0, 20", PN(playerid), PI[playerid][pSendName]);
						mysql_tquery(mysql, global_str, "MysqlCheckCall", "d", playerid);
						return 1;
					}
		            case 2:
					{
					    f(global_str, sizeof(global_str), "{B03131}Введите сумму которую хотите пополнить на мобильный счет %s\n{73B461}Обратите внимание, что деньги которые вы хотите перевести ,спишутся с вашего мобильного телефона!", PI[playerid][pSendName]);
					    SPD(playerid, 963, DIALOG_STYLE_INPUT, !"Пополнить баланс", global_str, !"Принять", !"Отмена");
					}
					case 3:
					{
      					new id;
         				sscanf(PI[playerid][pSendName], "u", id);
         				if(!IsPlayerConnected(id)) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}Игрок которому вы хотите выслать *130* ,оффлайн!", !"Закрыть", !"");
         				if(PI[id][pPhoneInfo][1] != 1) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{B03131}Ваш абонент вне зоны действия сети!", !"Закрыть", !"");
						if(PI[playerid][pPhoneInfo][0] <= 0) return 0;
					    f(global_str, sizeof(global_str), "{B03131}*130*{FFFFFF} Перезвони мне пожалуйста. Прислал: {B03131}%s[%d]. |   Номер: %d{FFFFFF}", PN(playerid), playerid, PI[playerid][pPhoneInfo][0]);
					    SCM(id, COLOR_GREY, global_str);
					    f(global_str, sizeof(global_str), "{73B461}Вы успешно отправили сообщение о просьбе перезвонить игроку: {FFFFFF}%s{73B461} на номер: {FFFFFF}%d", PN(id), PI[id][pPhoneInfo][0]);
					    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
					}
					case 4:
					{
						if(!strcmp("5 Удалить из черного списка", inputtextsave, true)) f(global_str, 256, "UPDATE `phonebook` SET `Group` = '1' WHERE `Name` = '%s' AND `Namez` = '%s'", PN(playerid), PI[playerid][pSendName]);
						else f(global_str, 256, "UPDATE `phonebook` SET `Group` = '0' WHERE `Name` = '%s' AND `Namez` = '%s'", PN(playerid), PI[playerid][pSendName]);
						mysql_tquery(mysql, global_str, "MysqlChencheGroup", "d", playerid);
					}
					case 5:
					{
					    new id;
					    f(global_str, sizeof(global_str), "DELETE FROM `phonebook` WHERE `Name` = '%s' AND `Namez` = '%s'", PN(playerid), PI[playerid][pSendName]);
					    mysql_tquery(mysql, global_str);
						f(global_str, sizeof(global_str), "{73B461}Вы успешно удалили из контактов игрока {FFFFFF}%s", PI[playerid][pSendName]);
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
      					sscanf(PI[playerid][pSendName], "u", id);
						if(IsPlayerConnected(id))
						{
							f(global_str, sizeof(global_str), "Игрок {FFFFFF}%s {B03131}удалил вас из контактов на своем телефоне!", PN(playerid));
							SCM(id, COLOR_RED, global_str);
						}
					}
		        }
		    }
		}
		case 952:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SPD(playerid, 953, DIALOG_STYLE_INPUT, !"Добавить контакт", !"Укажите номер телефона контакта!", !"Принять", !"Отмена");
		            case 1: SPD(playerid, 958, DIALOG_STYLE_INPUT, !"Вызвать скорую помощь", !"{73B461}Опишите место где вы находитесь\n{B03131}Сообщение должно состоять из 6 до 20 символов!", !"Принять", !"Отмена");
		            case 2: SPD(playerid, 959, DIALOG_STYLE_INPUT, !"Вызвать полицию", !"{73B461}Опишите место где вы находитесь\n{B03131}Сообщение должно состоять из 6 до 20 символов!", !"Принять", !"Отмена");
		            case 3: SPD(playerid, 960, DIALOG_STYLE_INPUT, !"Вызвать такси", !"{73B461}Опишите место где вы находитесь\n{B03131}Сообщение должно состоять из 6 до 20 символов!", !"Принять", !"Отмена");
		            case 4: SPD(playerid, 961, DIALOG_STYLE_INPUT, !"Вызвать механика", !"{73B461}Опишите место где вы находитесь\n{B03131}Сообщение должно состоять из 6 до 20 символов!", !"Принять", !"Отмена");
		            default:
					{
					    new idx, bl;
						f(PI[playerid][pSendName], MAX_PLAYER_NAME, "%s", strtok(inputtextsave,idx));
						if(!strcmp("ЧС", PI[playerid][pSendName], true))
						{
						    bl ++;
							f(PI[playerid][pSendName], MAX_PLAYER_NAME, "%s", strtok(inputtextsave,idx));
						}

						f(global_str, 256, "{B03131}[1]{FFFFFF} Открыть переписку\n{B03131}[2]{FFFFFF} Позвонить\n{B03131}[3]{FFFFFF} Пополнить счет\n{B03131}[4]{73B461} *130*((Отправить бомжа))\n\
									{B03131}[5]{FFFFFF} %s\n{B03131}[6]{FFFFFF} Удалить из контактов", (bl) ? ("Удалить из черного списка") : ("Добавить в черный список"));
						SPD(playerid, 962, DIALOG_STYLE_LIST, !"Выбор действия", global_str, !"Принять", !"Отмена");
					}
		        }
			}
		}
		case 953:
		{
		    if(response)
		    {
		        if(strlen(inputtextsave) < 4) return SPD(playerid, 953, DIALOG_STYLE_INPUT, !"Добавить контакт", !"Укажите номер телефона контакта!", !"Принять", !"Отмена");
		        new id = -1;
		        new number = strval(inputtextsave);
		        foreach(new i: Player)
		        {
					if(number == PI[i][pPhoneInfo][0])
					{
						id = i;
						break;
					}
		        }
		        if(id == -1) return SPD(playerid, 953, DIALOG_STYLE_INPUT, !"Добавить контакт", !"Укажите номер телефона контакта!", !"Принять", !"Отмена");
				f(global_str, sizeof(global_str), "SELECT COUNT(*) FROM `phonebook` WHERE `Name` = '%s' AND `Namez` = '%s'", PN(playerid), PN(id));
		        mysql_tquery(mysql, global_str, "MysqlAddContact", "dd", playerid, id);
		    }
		}
  		case 954:
		{
		    if(response)
		    {
		        static Namez[MAX_PLAYER_NAME], temp[MAX_PLAYER_NAME]; new idx;
		        temp = strtok(inputtextsave, idx);
		        Namez = strtok(inputtextsave, idx);
				f(PI[playerid][pSendName], MAX_PLAYER_NAME, "%s", Namez);
				f(global_str, sizeof(global_str), "SELECT * FROM `phonemes` WHERE (`Name` = '%s' AND `Namez` = '%s') OR (`Namez` = '%s' AND `Name` = '%s') ORDER BY `time` DESC LIMIT 0, 20", PN(playerid), PI[playerid][pSendName], PN(playerid), PI[playerid][pSendName]);
				mysql_tquery(mysql, global_str, "ShowPlayerMessage", "d", playerid);
				f(global_str, sizeof(global_str), "UPDATE `phonemes` SET `read` = '0' WHERE `Namez` = '%s' AND `Name` = '%s'", PN(playerid), Namez);
				mysql_tquery(mysql, global_str);
			}
		}
		case 955:
		{
		    if(response)
		    {
		        if(strlen(inputtextsave) > 0)
		        {
		            if(IsAIP(inputtextsave) || IsADomen(inputtextsave) || IsAIP(inputtextsave))
					{
					    SCM(playerid, COLOR_RED, !"В таких сообщениях запрещается использовать английские символы");
	    				SCM(playerid, COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
	    				return 0;
					}
					if(strlen(inputtextsave) > 30) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете отправить сообщение длиннее 30 символов!");

					f(global_str, sizeof(global_str), "SELECT `Group` FROM `phonebook` WHERE `Namez` = '%s' AND `Name` = '%s' LIMIT 0, 20", PN(playerid), PI[playerid][pSendName]);
					mysql_tquery(mysql, global_str, "MysqlCheckSMS", "ds", playerid, inputtextsave);
					return 1;
				}
				f(global_str, sizeof(global_str), "SELECT * FROM `phonemes` WHERE (`Name` = '%s' AND `Namez` = '%s') OR (`Namez` = '%s' AND `Name` = '%s') ORDER BY `time` DESC LIMIT 0, 20", PN(playerid), PI[playerid][pSendName], PN(playerid), PI[playerid][pSendName]);
				mysql_tquery(mysql, global_str, "ShowPlayerMessage", "d", playerid);
				f(global_str, sizeof(global_str), "UPDATE `phonemes` SET `read` = '0' WHERE `Namez` = '%s' AND `Name` = '%s';", PN(playerid), PI[playerid][pSendName]);
				mysql_tquery(mysql, global_str);
				return 1;
			}
		}
		case SHOWSKILLS:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: ShowSkills(playerid, playerid, 0);
              		case 1: ShowStyles(playerid, playerid, 0);
              		case 2: callcmd::ffarm(playerid, "");
		            default: return 0;
		        }
		    }
		}
		case 7652:
		{
			if(response)
			{
				return 1;
			}
			else SPD(playerid, SHOWACTION, 2, !"Выберите действие", !"{B03131}[1]{FFFFFF} Моя статистика\n{B03131}[2]{FFFFFF} Меню автомобиля\n{B03131}[3]{FFFFFF} Меню дома\n{B03131}[4]{FFFFFF} Меню бизнеса\n{B03131}[5]{FFFFFF} Меню лидера\n{B03131}[6]{FFFFFF} Улучшения\n{B03131}[7]{FFFFFF} Мои лицензии\n{B03131}[8]{FFFFFF} Мой паспорт\n{B03131}[9]{FFFFFF} Квесты\n{B03131}[10]{FFFFFF} Татуировки\n{B03131}[11]{FFFFFF} Меню семьи\n{B03131}[12]{FFFFFF} Сменить Non-RP Nick", !"Выбор", !"Отмена");
		}
		case 7651:
		{
		    if(response) return true;
			else SPD(playerid, SHOWACTION, 2, !"Выберите действие", !"{B03131}[1]{FFFFFF} Моя статистика\n{B03131}[2]{FFFFFF} Меню автомобиля\n{B03131}[3]{FFFFFF} Меню дома\n{B03131}[4]{FFFFFF} Меню бизнеса\n{B03131}[5]{FFFFFF} Меню лидера\n{B03131}[6]{FFFFFF} Улучшения\n{B03131}[7]{FFFFFF} Мои лицензии\n{B03131}[8]{FFFFFF} Мой паспорт\n{B03131}[9]{FFFFFF} Квесты\n{B03131}[10]{FFFFFF} Татуировки\n{B03131}[11]{FFFFFF} Меню семьи\n{B03131}[12]{FFFFFF} Сменить Non-RP Nick", !"Выбор", !"Отмена"); 		
		}
		case SHOWACTION:
		{
		    if(!response) return 1;
	        switch(listitem)
	        {
	            case 0: ShowStats(playerid, playerid);
	            case 1: callcmd::cars(playerid);
          		case 2: callcmd::house(playerid);
          		case 3: callcmd::bizinfo(playerid);
          		case 4: callcmd::lmenu(playerid, "");
                case 5: ShowImproveSettings(playerid);
                case 6: ShowLicenses(playerid, playerid);
                case 7:
				{
				    valstr(global_str, playerid);
					callcmd::showpass(playerid, global_str);
				}
                case 8: SPD(playerid, 7841, DIALOG_STYLE_LIST, !"", !"- Принятые квесты", !"Принять", !"Назад");
                case 10: callcmd::fammenu(playerid);
                case 11:
                {
					if(PI[playerid][pMember][1] > 0)
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Лидер не может сменить ник!");

					if(PI[playerid][pAdmin] > 0)
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Админ не может сменить ник!");

					if(IsARPPN(PN(playerid)))
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете сменить РП ник!");

					SPD(playerid, 224, DIALOG_STYLE_INPUT, !"Смена ника", "{FFFFFF}Вы хотите сменить свой {E9F451}Non-RP {FFFFFF}ник\nВведите новый ник в окно\nЗатем нажмите \"{E9F451}Сменить{FFFFFF}\"", !"Сменить", !"Отмена");
                }
			}
		}
		case 3869:
		{
			if(!response) return false;
			SetPVarInt(playerid, "selectChangelmenu", listitem);
			//
			new org = PI[playerid][pMember][0];
			f (mysql_string, 50, "{FFFFFF}Банк: {E1E948}%d$", OrgInfo[org][oBank]);
			//ae433d
			f (global_str, 500, "\
			{FFFFFF}Стандартная зарплата %s: %d{42B02C}${FFFFFF}\n\
			Текущая зарплата: %d{42B02C}${FFFFFF}\n\n\
			- Когда вы делаете зарплату определенного ранга выше стандартной,\n\
			вы соглашаетесь на оплату разницы текущей и стандартной зарплаты с\n\
			бюджета фракции. В случае недостатка средств,{ae433d} зарплата автоматически\n\
			установится стандартной.{FFFFFF}\n\n\
			- Когда вы делаете зарплату ниже стандартной, бюджет вашей фракции будет\n\
			получать пазницу стандартной и текущей зарплаты в каэжый Payday.",
			GetRankName(org, listitem+1), OldOrgSalary[org][listitem], OrgSalary[org][listitem]);
			SPD(playerid, 3870, DIALOG_STYLE_INPUT, mysql_string, global_str, "Принять", "Отмена");
			//
		}
		
		case 3870:
		{
			if(!response) return false;
			if(!strlen(inputtextsave) || strval(inputtextsave) < 500 || strval(inputtextsave) > 120000)
			{
				SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Зарплата не может быть меньше 500$");
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Зарплата не может быть больше 120000$");
			}
			new rank = Int_GetPlayerData(playerid, "selectChangelmenu"), org = PI[playerid][pMember][0];
			DeletePVar(playerid, "selectChangelmenu");
			//
			f(global_str,256,"[Организация] {FFFFFF}Лидер(зам) фракции изменил зарплату должности %s с %d$ на %d$",GetRankName(org,rank), OrgSalary[org][rank], strval(inputtextsave));
			SendTeamMessage(org, COLOR_GREEN ,global_str);
			//
			OrgSalary[org][rank] = strval(inputtextsave);
			//
			for(new i; i < OrgInfo[org][Max_Rang]; i++)
				f (global_str, 300, "%s%d,", global_str, OrgSalary[org][i]);
				
			f (mysql_string, 500, "UPDATE `orgsinfo` SET `OrgSalary` = '%s' WHERE ID = '%d';", global_str, org);
			mysql_query(mysql, mysql_string);
		}
		
		case 3871:
		{
			if(!response) return false;
			new org = PI[playerid][pMember][0];
			
			if(listitem == OrgInfo[org][Max_Rang])
			{
				
				GetMysqlData("orgsinfo", "StandartOrgName", org);
				
				sscanf(mysql_string, "p<,>a<s[128]>[11]", SQL_GET_ROW_STR);
				
				for(new i; i < OrgInfo[org][Max_Rang]; i++)
					SQL("UPDATE `orgsinfo` SET `Rank_%d` = '%s' WHERE ID = '%d';", i+1, SQL_GET_ROW_STR[i], org),
					SetString(RankName[org][i], SQL_GET_ROW_STR[i]);
				
				f(global_str,200,"[F] %s %s[%d] вернул стандартные название рангов",GetRankName(org,PI[playerid][pRank]),PN(playerid),playerid);
				return SendTeamMessage(org,COLOR_GREY,global_str);
			
			}
			
			Int_SetPlayerData(playerid, "selectChangelmenu", listitem);
			
			SPD(playerid, 3872, DIALOG_STYLE_LIST, OrgInfo[org][oName], !"{FFFFFF}Ввести новое название ранга\nУстанановить название ранга по умолчанию", !"Выбрать", !"Назад");
		}
		
		case 3872:
		{
			if(!response) return false;
			//
			new rank = Int_GetPlayerData(playerid, "selectChangelmenu"), org = PI[playerid][pMember][0];
			
			GetMysqlData("orgsinfo","StandartOrgName", org);
			
			sscanf(mysql_string, "p<,>a<s[128]>[11]", SQL_GET_ROW_STR);
			//
			switch listitem do
			{
				case 0:
				{
					f(global_str, 300, "\
					{FFFFFF}Введите новое название ранга\n\
					{73B461}Используется: %s\n\
					{8a7c4d}По умолчанию: %s",
					RankName[org][rank], SQL_GET_ROW_STR[rank]);
					return SPD(playerid, 3873, DIALOG_STYLE_INPUT, OrgInfo[org][oName], global_str, !"Выбрать", !"Назад");
				}
				case 1:
				{
					SetString(RankName[org][rank], SQL_GET_ROW_STR[rank]);
					f (mysql_string, 500, "UPDATE `orgsinfo` SET `Rank_%d` = '%s' WHERE ID = '%d';", rank+1, RankName[org][rank], org);
					f(global_str,200,"[F] %s %s[%d] установил новое название %d ранга на %s",GetRankName(org,PI[playerid][pRank]),PN(playerid),playerid, rank +1, RankName[org][rank]);
					SendTeamMessage(org,COLOR_GREY,global_str);
					mysql_query(mysql, mysql_string);
					DeletePVar(playerid, "selectChangelmenu");
				}
			}
		}
		case 3873:
		{
			if(!response) return false;
			//
			if(strlen(inputtextsave) < 3 || strlen(inputtextsave) >= 50) return false;
			SetPVarString(playerid, "rankInputt", inputtextsave);
			f(global_str, 150, "{FFFFFF}Вы уверены что хотите изменить название ранга на {73B461}%s?", inputtextsave);
			SPD(playerid, 3874, DIALOG_STYLE_MSGBOX, OrgInfo[PI[playerid][pMember][0]][oName], global_str, !"Выбрать", !"Отмена");
		}
		case 3874:
		{
			if(!response) return false;
			new rank = Int_GetPlayerData(playerid, "selectChangelmenu"), org = PI[playerid][pMember][0];
			DeletePVar(playerid, "selectChangelmenu");
			
			GetPVarString(playerid, "rankInputt", global_str, 128);
			SCMF(playerid, -1, "%s", global_str);
			SetString(RankName[org][rank], global_str);
			
			f (mysql_string, 500, "UPDATE `orgsinfo` SET `Rank_%d` = '%s' WHERE ID = '%d';", rank+1, RankName[org][rank], org);
			f(global_str,200,"[F] %s %s[%d] установил новое название %d ранга на %s",GetRankName(org,PI[playerid][pRank]),PN(playerid),playerid, rank +1, RankName[org][rank]);
			SendTeamMessage(org,COLOR_GREY,global_str);
			mysql_query(mysql, mysql_string);
			DeletePVar(playerid, "rankInputt");
		}
		
		case 1214:
		{
			if(!response) return true;

			return SendFunctionLmenu(playerid, PI[playerid][pMember][0], listitem);
		}

		case 1215:
		{
			if(response)
			{
			    ViborSERIU[playerid] = pTemp[playerid][pWW][listitem];
				return SPD(playerid,1217,DIALOG_STYLE_LIST,"Действие","Изменить ранг\nУволить\nДать(Снять) Мут\nДать выговор","Далее", !"Отмена");
			}
		}
		case 1216:
		{
			if(response)
			{
				if(PI[playerid][pMember][1] > 0 || PI[playerid][pRank] >= 9)
				{
				    new id;
				    if(PI[playerid][pMember][0]==TEAM_FBI)return SCM(playerid,COLOR_RED,!"В FBI можно попасть только переводом из полиции!");
					if(sscanf(inputtextsave,"u",id)) return SPD(playerid,1216,DIALOG_STYLE_INPUT,"PLAYERID","Введите ид игрока которого хотите принять","Далее","Oтмена");
					if(IsPlayerConnected(id) && pTemp[id][tAuthorized])
					{
						if(!GetTeamID(id))
						{
							if(ProxDetectorS(5.0, playerid, id))
							{
                                if(IsAtFrakcia(playerid) && PI[id][pBL]!=0)
                                {
	                                SCM(playerid,COLOR_GREY, !"Вы не можете принять этого игрока. Возможные причины:");
									SCM(playerid,COLOR_GREY, !"- Этот игрок находится в чёрном списке закона");
									return 1;
								}
								///
//								if(Clother[id]!=-1)return 0;
								if(GetPlayerVirtualWorld(playerid)!=GetPlayerVirtualWorld(id))return 0;
								///
								if(InviteOffer[id] == INVALID_PLAYER_ID)
								{
									static Leader[15];
									if(PI[playerid][pMember][0]==0 || PI[playerid][pMember][0] >= MAX_ORGS)return 0;
									if(PI[id][pWarns] > 0) return SCM(playerid,COLOR_RED,!"Игрока с варном нельзя принять в организацию");
									if(IsAtFrakcia(playerid, 1) && PI[id][pZKP] <35)
									{
									    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Законопослушность этого гражданина не позволяет ему вступить в организацию! (Необходимо 35 законопослушности!)");
									    SCM(id,COLOR_RED,!"[Ошибка] {FFFFFF}Вас не смогли принять в организацию, тк. у вас слишком мало законопослушности! (Необходимо 35 законопослушности!)");
									    return 0;
									}
									if(PI[playerid][pMember][1] > 0) Leader = "Лидер";
									else Leader = "Зам. лидера";
									InviteOffer[id] = playerid;
									f(global_str,sizeof(global_str),"Вы приглашаете %s к себе в организацию",PN(id));
									SCM(playerid,COLOR_LIGHTBLUE,global_str);
									f(global_str,sizeof(global_str),"%s %s приглашает вас к себе в организацию %s",Leader, PN(playerid),OrgInfo[GetTeamID(playerid)][oName]);
									SPD(id,8,0,"Инвайт",global_str, !"Принять", !"Отмена");
								}
								else
								{
									SCM(playerid,COLOR_GREY, !"Этому игроку уже было выслано приглашение на вступление в организацию");
									return 1;
								}
							}
							else
							{
								SCM(playerid,COLOR_GREY, !"Вы должны находиться рядом с игроком");
								return 1;
							}
						}
						else
						{
							SCM(playerid,COLOR_GREY, !"Этот игрок уже состоит в одной из организаций");
							return 1;
						}
					}
				}
			}
		}
		case 1217:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: return SPD(playerid,1218,DIALOG_STYLE_INPUT,"Ранг","Введите ранг\n\tПример: 1","Готово", !"Отмена");
					case 1: return SPD(playerid,1219,DIALOG_STYLE_INPUT,"Причина","Введите причину увольнения\n\tПример: с/ж","Готово", !"Отмена");
					case 2:
					{
						new id = ViborSERIU[playerid];
						if(PI[id][pFMuteTime] == 0) return SPD(playerid,1220,DIALOG_STYLE_INPUT,"Мут","Введите время и причину мута\n\tПример: 5,мат","Готово", !"Отмена");
						else
						{
							if(GetTeamID(id) == GetTeamID(playerid))
							{
								f(global_str,sizeof(global_str),"Лидер %s разглушил %s",PN(playerid),PN(id));
								SendTeamMessage(GetTeamID(playerid), COLOR_RED, global_str);
								PI[id][pFMuteTime] = 0;
							}
						}
					}
					case 3: return SPD(playerid,1221,DIALOG_STYLE_INPUT,"Причина","Введите причину предупреждения\n\tПример: мат","Готово", !"Отмена");
				}
			}
		}
		case 1213:
		{
		    if(response)
			{
                new id = strval(inputtextsave);
                if(!IsPlayerConnected(id) || !pTemp[id][tAuthorized]) return SCM(playerid,COLOR_RED,!"Неверный ид!");
				if(!ProxDetectorS(5.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
				if(id==playerid)return 0;
				if(!IsAArmy(playerid) && PI[id][pMember][0] != TEAM_LSPD && PI[id][pMember][0] != TEAM_RCPD && PI[id][pMember][0] != TEAM_LVPD && PI[id][pMember][0] != TEAM_SFPD) return SCM(playerid,COLOR_RED,!"Этот игрок не состоит в нужной организации!");
				if(PI[id][pRank] < 4) return SCM(playerid,COLOR_RED,!"Этот игрок не достиг еще нужного (4-го) ранга!");
				if(PI[id][pRank] >= 9) return SCM(playerid,COLOR_RED,!"Вы не можете к себе перевести заместителя или лидера!");
				if(PI[playerid][pMember][0]==TEAM_FBI && PI[id][pMember][0]!=TEAM_LSPD && PI[id][pMember][0]!=TEAM_RCPD && PI[id][pMember][0]!=TEAM_LVPD && PI[id][pMember][0]!=TEAM_SFPD) return SCM(playerid,COLOR_RED,!"В FBI можно перевести только работников полиции!");
				if((PI[playerid][pMember][0] == TEAM_FBI) && PI[id][pRank] < 5) return SCM(playerid,COLOR_RED,!"В FBI можно перевести только работников полиции с 5-го ранга!");
				PI[id][pMember][0]=PI[playerid][pMember][0];
                PI[id][pFWarns] = 0;
				PI[id][pRank] = 1;
				PI[id][pDCTime]=2;
    			SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначена организация. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
				SCM(playerid,COLOR_VALIK, !"Вы успешно перевели игрока к себе в организацию");
				f(global_str,sizeof(global_str),"Поздравляем вы были переведены в организацию: %s на должность: %s",OrgInfo[GetTeamID(id)][oName],GetRankName(GetTeamID(id),PI[id][pRank]));
				SCM(id,COLOR_VALIK,global_str);
				PlayerSpawn(id);
			}
		}
     	case 1218:
		{
			if(response)
			{
				new id;
			 	new rank = strval(inputtextsave);
				id = ViborSERIU[playerid];
				if(id == playerid) return SCM(playerid,COLOR_RED,!"Нельзя выдавать ранг себе");
				if(rank<1)return 0;
				if(GetTeamID(playerid) == PI[id][pMember][0])
				{
					static change[10];
					if(PI[id][pMember][1] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете изменить ранг лидеру");

					//if(Clother[id]!=-1)return 0;
					if(GetPlayerVirtualWorld(playerid)!=GetPlayerVirtualWorld(id))return 0;

					if(PI[playerid][pRank] == 9 && id > 8) return SCM(playerid,COLOR_RED,!"Нельзя выдать ранг больше 8");
					if(rank > 9) return SCM(playerid,COLOR_GREY, !"Нельзя повысть до этого ранга");
					if(PI[id][pRank] > rank) change = "понизил";
					else if(PI[id][pRank] < rank) change = "повысил";
					else return SCM(playerid,COLOR_VALIK, !"Игрок имеет тот же ранг который вы хотете ему дать");
					f(global_str,sizeof(global_str),"Лидер вашей организации %s %s вас в должности.",PN(playerid),change);
					SCM(id,COLOR_LIGHTBLUE,global_str);
					f(global_str,sizeof(global_str),"Вы %sи игрока %s до %d-го ранга",change,PN(id),rank);
					SCM(playerid,COLOR_LIGHTBLUE,global_str);
					PI[id][pRank] = rank;
					if(PI[id][pSex] == 2)
					{
					    if(TeamDuty{id})
						{
							SetPlayerSkinEx(id,GOrgSkins[GetTeamID(id)][rank]);
							TogglePlayerControllable(id,true);
						}
					}
					else
					{
					    if(TeamDuty{id})
						{
							SetPlayerSkinEx(id,MOrgSkins[GetTeamID(id)][rank]);
							TogglePlayerControllable(id,true);
						}
					}
				}
				else SCM(playerid,COLOR_VALIK, !"Этот игрок не состоит в вашей организации");
			}
		}
		case 1219:
		{
			if(response)
			{
				new id; static reason[100];
				id = ViborSERIU[playerid];
				if(PI[playerid][pMember][1] > 0 || PI[playerid][pRank] >= 9)
				{
					if(sscanf(inputtextsave,"s[100]",reason)) return SPD(playerid,1219,DIALOG_STYLE_INPUT,"Причина","Введите причину увольнения\n\tПример: с/ж","Готово", !"Отмена");
					if(IsGiveWarn(playerid, id))
					{
						if(id != playerid)
						{
							if(PI[id][pMember][1] > 0) return SCM(playerid,COLOR_RED,!"Вы не можете выгнать из организации лидера!");
							if(PI[playerid][pRank]==PI[id][pRank])return 0;
							//if(pSportZal[id] == 1) return SCM(playerid,COLOR_RED,!"Он щас в спортзале!");
							
							UnInvite(id);

							SCMF(id, COLOR_LIGHTBLUE, "{FFFFFF}%s выгнал вас из организации.\nПричина: %s", PN(playerid), reason);
							
							SCMF(playerid, COLOR_LIGHTBLUE, "Вы выгнали %s. Причина: %s",PN(id), reason);
							
						}
						else SCM(playerid,COLOR_GREY, !"Себя нельзя");
					}
					else SCM(playerid,COLOR_GREY, !"Этот игрок состоит в другой организации");
				}
				else SCM(playerid,COLOR_GREY, !"Вы не лидер и не зам. лидера");
			}
		}
		case 1220:
		{
			if(response)
			{
				if(PI[playerid][pMember][1] > 0 || PI[playerid][pRank] >= 9)
				{
					new id, time;
					id = ViborSERIU[playerid];
					if(sscanf(inputtextsave,"p<,>ds[100]",time, global_str)) return SPD(playerid,1220,DIALOG_STYLE_INPUT,"Мут","Введите время и причину мута\n\tПример: 5,мат","Готово", !"Отмена");
					if(GetTeamID(id) == GetTeamID(playerid))
					{
						if(time > 0)
						{
						    if(PI[id][pMember][1] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете оглушить лидера");
							f(global_str, 256,"Лидер %s заглушил(а) игрока %s на %d минут. Причина: %s",PN(playerid),PN(id),time,global_str);
							SendTeamMessage(GetTeamID(playerid), COLOR_RED, global_str);
							PI[id][pFMuteTime] = time*60;
						}
					}
				}
			}
		}
		case 1221:
		{
			if(response)
			{
				if(PI[playerid][pMember][1] > 0 || PI[playerid][pRank] >= 9)
				{
					new id; static reason[150];
					id = ViborSERIU[playerid];
					if(sscanf(inputtextsave,"s[150]",reason)) return SPD(playerid,1221,DIALOG_STYLE_INPUT,"Причина","Введите причину предупреждения\n\tПример: мат","Готово", !"Отмена");
					if(IsPlayerConnected(id))
					{
						if(IsGiveWarn(playerid, id))
						{
						    if(PI[playerid][pRank]==PI[id][pRank])return SCM(playerid, COLOR_RED, !"Вы не можете ему дать выговор!");
							if(PI[id][pMember][1] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете выдать варн лидеру");
							f(global_str,sizeof(global_str),"Вы дали выговор %s с причиной %s",PN(id),reason);
							SCM(playerid,COLOR_LIGHTBLUE,global_str);
							f(global_str,sizeof(global_str),"%s дал вам выговор с причиной %s",PN(playerid),reason);
							SCM(id,COLOR_RED,global_str);
							PI[id][pFWarns] ++;
							if(PI[id][pFWarns] >= 3)
							{
								PI[id][pFWarns] = 0;
								SCM(id,COLOR_GREY, !"Вы были автоматически выгнаны из организации т.к у вас больше 2-х выговоров");
								f(global_str,sizeof(global_str),"%s покидает нашу организацию т.к у него больше 2-х выговоров",PN(id));
								SendTeamMessage(PI[id][pMember][0],COLOR_GREY,global_str);
								PI[id][pMember][0] = 0;
								PI[id][pDCTime]=0;
								SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
								PI[id][pRank] = 0;
								SetBumSkin(id);
								PlayerSpawn(id);
							}
						}
					}
				}
			}
		}
     	case RABOTABUS+1:
	    {
	        if(response)
	        {
	            if(PI[playerid][pMoney] < GLS[15]) return SCM(playerid,COLOR_RED,!">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]") && RemovePlayerFromVehicle(playerid);
	            GiveMoney(playerid,-GLS[15]);
	            pTemp[playerid][pArendaCar] = GetPlayerVehicleID(playerid);
				switch(PlayerJob[playerid])
				{
				    case 1:
				    {
				        rabden[playerid]=1;
						SCM(playerid,COLOR_ACHAT,"Нажмите клавишу: 2 чтобы начать работу.");
						f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E11717}[Арендован]",Vehs[GetPlayerVehicleID(playerid)][vName],Vehs[GetPlayerVehicleID(playerid)][vCena]);
						UpdateDynamic3DTextLabelText(AutobCarText[GetPlayerVehicleID(playerid)], 0xFFFFFFFF, global_str);
				    }
					case 3: SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Используйте /jobhelp, если вы не знаете как здесь работать!");
					case 4:
					{
					    if(BenzinCena[pTemp[playerid][pArendaCar]]==0 || BenzinCount[pTemp[playerid][pArendaCar]]==0)
						{
							SCM(playerid,COLOR_ACHAT,"Для начала работы, заключите контракт с ближайшей АЗС.");
							SCM(playerid,COLOR_ACHAT,"Используйте /jobhelp чтобы узнать подробности и описание работы.");
						}
					}
					case 5: SCM(playerid,COLOR_ACHAT,"Нажмите клавишу: 2 чтобы начать работу и установить тариф.");
					case 13:
					{
					    if(GetVehicleModelEx(pTemp[playerid][pArendaCar]) == 443)
					    {
					        SPD(playerid,0,0,!"","{AFAFAF}Отправляйтесь по чекпоинту для загрузки металла!", !"Принять","");
					        if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) EnableGPSForPlayer(playerid,2224.5222,-2461.0154,13.4466);
							else EnableGPSForPlayer(playerid,1124.2776,1962.4742,10.8203);
					    }
					}
					case 14: SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Используйте /jobhelp, если вы не знаете как здесь работать!");
				}
				SCM(playerid,COLOR_ACHAT,"Используйте /jlock чтобы закрыть рабочий транспорт.");
				VehicleInfo[pTemp[playerid][pArendaCar]][vPlayer]= playerid;
				Fuel[pTemp[playerid][pArendaCar]]=100;
			}
			else RemovePlayerFromVehicle(playerid);
	    }
	    case RABOTABUS+2:
	    {
	        new cena;
			if(sscanf(inputtextsave, "d",cena)) return SPD(playerid,RABOTABUS+2,DIALOG_STYLE_INPUT,"Стоимость","Цена за проезд ( от 0$ до 100$ )","Готово", !"Отмена");
	        if(cena > 100 || cena < 0) {
				SCM(playerid, COLOR_RED, !"Нельзя меньше 1 или больше 100.");
				return SPD(playerid,RABOTABUS+2,DIALOG_STYLE_INPUT,"Стоимость","Цена за проезд ( от 0$ до 100$ )","Готово", !"Отмена");
			}
	        Vehs[GetPlayerVehicleID(playerid)][vCena] = cena;
	        SPD(playerid,RABOTABUS+3,DIALOG_STYLE_LIST,"Маршрут","Городской ЛС\n{FAC64C}ЖД ЛС -> Jefferson -> Ферма -> Завод\nЖД ЛС -> Завод\nЖД ЛС -> Грузчики -> Лос Сантос\nЖД ЛС -> ЖД ЛВ -> Авиашкола\nЖД ЛВ -> Полиция ЛВ -> Больница\nЖД ЛВ -> Fort Carson -> Army LV -> Карьер LV\nЖД ЛС -> Jefferson -> ЖД СФ -> Автошкола\nЖД ЛВ -> Казино -> Fort Carson -> ЖД СФ\nГородской СФ\nЖД СФ -> Ферма -> RCPD -> Завод","Далее", !"Отмена");
	    }
		case RABOTABUS+3:
	    {
	        if(response)
	        {
	            rabden[playerid]=0;
	            pPressed[playerid] = 0;
	            new getcar = GetPlayerVehicleID(playerid);
	            if(Vehs[playerid][vReis]!=0) return SCM(playerid, COLOR_YELLOW, "{999999}Вы уже выбрали рейс");
	            if(response)
		    	{
		            switch(listitem)
		            {
		                case 0:
		                {
		                	Vehs[playerid][vReis] = 1;
			                strmid(Vehs[getcar][vName],"Городской ЛС",0,strlen("Городской ЛС"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusCityLS[0][BUSSTATION1],BusCityLS[0][BUS_COORD1][0],BusCityLS[0][BUS_COORD1][1],BusCityLS[0][BUS_COORD1][2],BusCityLS[1][BUS_COORD1][0],BusCityLS[1][BUS_COORD1][1],BusCityLS[1][BUS_COORD1][2],10.0);
		                }
		                case 1:
		                {
		                	Vehs[playerid][vReis] = 2;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> Jefferson -> Ферма -> Завод",0,strlen("ЖД ЛС -> Jefferson -> Ферма -> Завод"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusFarm[0][BUSSTATION2],BusFarm[0][BUS_COORD2][0],BusFarm[0][BUS_COORD2][1],BusFarm[0][BUS_COORD2][2],BusFarm[1][BUS_COORD2][0],BusFarm[1][BUS_COORD2][1],BusFarm[1][BUS_COORD2][2],10.0);
		                }
		                case 2:
		                {
		                	Vehs[playerid][vReis] = 3;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> Завод",0,strlen("ЖД ЛС -> Завод"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusZav[0][BUSSTATION3],BusZav[0][BUS_COORD3][0],BusZav[0][BUS_COORD3][1],BusZav[0][BUS_COORD3][2],BusZav[1][BUS_COORD3][0],BusZav[1][BUS_COORD3][1],BusZav[1][BUS_COORD3][2],10.0);
		                }
		                case 3:
		                {
		                	Vehs[playerid][vReis] = 4;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> Лос Сантос -> Грузчики",0,strlen("ЖД ЛС -> Лос Сантос -> Грузчики"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusAvto[0][BUSSTATION4],BusAvto[0][BUS_COORD4][0],BusAvto[0][BUS_COORD4][1],BusAvto[0][BUS_COORD4][2],BusAvto[1][BUS_COORD4][0],BusAvto[1][BUS_COORD4][1],BusAvto[1][BUS_COORD4][2],10.0);
		                }
		                case 4:
		                {
		                	Vehs[playerid][vReis] = 5;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> ЖД ЛВ -> Авиашкола",0,strlen("ЖД ЛС -> ЖД ЛВ -> Авиашкола"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusLv[0][BUSSTATION5],BusLv[0][BUS_COORD5][0],BusLv[0][BUS_COORD5][1],BusLv[0][BUS_COORD5][2],BusLv[1][BUS_COORD5][0],BusLv[1][BUS_COORD5][1],BusLv[1][BUS_COORD5][2],10.0);
		                }
		                case 5:
		                {
		                	Vehs[playerid][vReis] = 6;
			                strmid(Vehs[getcar][vName],"ЖД ЛВ -> Полиция ЛВ -> Спортзал -> Больница ЛВ",0,strlen("ЖД ЛВ -> Полиция ЛВ -> Спортзал -> Больница ЛВ"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusLvv[0][BUSSTATION6],BusLvv[0][BUS_COORD6][0],BusLvv[0][BUS_COORD6][1],BusLvv[0][BUS_COORD6][2],BusLvv[1][BUS_COORD6][0],BusLvv[1][BUS_COORD6][1],BusLvv[1][BUS_COORD6][2],10.0);
		                }
		                case 6:
		                {
		                	Vehs[playerid][vReis] = 7;
			                strmid(Vehs[getcar][vName],"ЖД ЛВ -> Fort Carson -> Army LV -> Карьер LV",0,strlen("ЖД ЛВ -> Fort Carson -> Army LV -> Карьер LV"),33);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,BusLvvv[0][BUSSTATION7],BusLvvv[0][BUS_COORD7][0],BusLvvv[0][BUS_COORD7][1],BusLvvv[0][BUS_COORD7][2],BusLvvv[1][BUS_COORD7][0],BusLvvv[1][BUS_COORD7][1],BusLvvv[1][BUS_COORD7][2],10.0);
		                }
		                case 7:
		                {
		                    Vehs[playerid][vReis] = 8;
			                strmid(Vehs[getcar][vName],"ЖД ЛС -> Jefferson -> ЖД СФ -> Автошкола",0,strlen("ЖД ЛС -> Jefferson -> ЖД СФ -> Автошкола"),50);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,bussf[0][BUSSTATION8],bussf[0][BUS_COORD8][0],bussf[0][BUS_COORD8][1],bussf[0][BUS_COORD8][2],bussf[1][BUS_COORD8][0],bussf[1][BUS_COORD8][1],bussf[1][BUS_COORD8][2],10.0);
		                }
		                case 8:
		                {
		                    Vehs[playerid][vReis] = 9;
			                strmid(Vehs[getcar][vName],"ЖД ЛВ -> Казино -> Fort Carson -> ЖД СФ",0,strlen("ЖД ЛВ -> Казино -> Fort Carson -> ЖД СФ"),50);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,buslvsf[0][BUSSTATION9],buslvsf[0][BUS_COORD9][0],buslvsf[0][BUS_COORD9][1],buslvsf[0][BUS_COORD9][2],buslvsf[1][BUS_COORD9][0],buslvsf[1][BUS_COORD9][1],buslvsf[1][BUS_COORD9][2],10.0);
		                }
		                case 9:
		                {
		                    Vehs[playerid][vReis] = 10;
			                strmid(Vehs[getcar][vName],"Городской СФ",0,strlen("Городской СФ"),50);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,bussfsf[0][BUSSTATION10],bussfsf[0][BUS_COORD10][0],bussfsf[0][BUS_COORD10][1],bussfsf[0][BUS_COORD10][2],bussfsf[1][BUS_COORD10][0],bussfsf[1][BUS_COORD10][1],bussfsf[1][BUS_COORD10][2],10.0);
		                }
		                case 10:
		                {
		                    Vehs[playerid][vReis] = 11;
			                strmid(Vehs[getcar][vName],"ЖД СФ -> Ферма -> RCPD -> Завод",0,strlen("ЖД СФ -> Ферма -> RCPD -> Завод"),50);
			                f(global_str, sizeof(global_str), "{E06C1F}Автобус\n{E06C1F}Рейс: {73B461}%s\n{E06C1F}Стоимость проезда: {73B461}%d$",Vehs[getcar][vName],Vehs[getcar][vCena]);
							UpdateDynamic3DTextLabelText(AutobCarText[getcar], 0xFFFFFFFF, global_str);
			                SetPlayerRaceCheckpoint(playerid,bussffa[0][BUSSTATION11],bussffa[0][BUS_COORD11][0],bussffa[0][BUS_COORD11][1],bussffa[0][BUS_COORD11][2],bussffa[1][BUS_COORD11][0],bussffa[1][BUS_COORD11][1],bussffa[1][BUS_COORD11][2],10.0);
		                }
		            }
				}
				f(global_str,sizeof(global_str),"Водитель автобуса %s начал маршрут %s. Стоимость проезда: %d$", PN(playerid), Vehs[getcar][vName],Vehs[getcar][vCena]);
				ProxDetector(25,playerid,global_str,COLOR_PURPLE);
			}
	    }
	    case RABOTABUS+4:
	    {
	        if(response)
	        {
         		if(GetPlayerVehicleID(playerid) == pTemp[playerid][pArendaCar]) return endrabavt(playerid);
	        }
	    }
	    case RABOTABUS+5:
	    {
	        if(response)
	        {
	            if(rabden[playerid] == 1) SPD(playerid,RABOTABUS+2,DIALOG_STYLE_INPUT,"Стоимость","Цена за проезд ( от 0$ до 100$ )","Готово", !"Отмена");
				else endrabavt(playerid);
	        }
	    }
	}
	return 1;
}

stock IsAGameNick(name[])
{
	for(new i;i < strlen(name);i ++)
	{
		switch(name[i])
		{
		    case 'a'..'z', 'A'..'Z', '0'..'9', '.', '_', '[', ']', '(', ')', '$', '@', '-': continue;
		}
	}
	return 1;
}
stock UpdateDorm(dormid)
{
	if(dormid == 66 or dormid == 291) return false;

	new allzone = 0, narkoz=0;
	static urik[30]; urik = "";
	if(OrgInfo[dormid][oOb4ak] == 1) urik="{A92424}Закрыт{FFFFFF}";
	if(!OrgInfo[dormid][oOb4ak]) urik="{3FA924}Открыт{FFFFFF}";

	if((dormid>=11 && dormid<=15) || dormid == 25)
	{
        for(new d = 1; d < GANGZONES; d++)
		{
			if(GangZoneInfo[d][gangOwnerId] == dormid)
			{
				allzone++;
				if (d == 33) narkoz++;
				if (d == 43) narkoz++;
				if (d == 10) narkoz++;
				if (d == 14) narkoz++;
				if (d == 24) narkoz++;
			}
		}
		f(global_str, 500,"Количество\nТерриторий: {FAAC58}%d{FFFFFF}\nНаркопритонов: {FAAC58}%d{FFFFFF}\n\nСклад %s\n{FAAC58}%s{FFFFFF}\n\nНаркотики: {FAAC58}%d г{FFFFFF}\nПатроны: {FAAC58}%d шт{FFFFFF}\nКанистры: {FAAC58}%d шт{FFFFFF}\nИнструменты: {FAAC58}%d шт{FFFFFF}\nМаски: {FAAC58}%d шт{FFFFFF}\n",allzone,narkoz,urik,OrgInfo[dormid][oName],OrgInfo[dormid][oDrugs],OrgInfo[dormid][oMats],OrgInfo[dormid][oBenz],OrgInfo[dormid][oRemont],OrgInfo[dormid][oMask]);
	}
	else
	{
	    for(new bizid;bizid < MAX_BIZ;bizid++)
		{
		    if(BizData[bizid][bKrasher] != dormid || strcmp(BizData[bizid][bOwner],"The State",true) == 0 ) continue;
			allzone++;
		}
		f(global_str, 500,"Количество\nбизнесов {FAAC58}%d{FFFFFF}\n\nСклад %s\n{FAAC58}%s{FFFFFF}\n\nНаркотики: {FAAC58}%d г{FFFFFF}\nПатроны: {FAAC58}%d шт{FFFFFF}\nКанистры: {FAAC58}%d шт{FFFFFF}\nИнструменты: {FAAC58}%d шт{FFFFFF}\nМаски: {FAAC58}%d шт{FFFFFF}",allzone,urik,OrgInfo[dormid][oName],OrgInfo[dormid][oDrugs],OrgInfo[dormid][oMats],OrgInfo[dormid][oBenz],OrgInfo[dormid][oRemont],OrgInfo[dormid][oMask]);
	}
	UpdateDynamic3DTextLabelText(DormText[dormid],COLOR_WHITE,global_str);
	return 1;
}

stock PlayerUnleader(playerid = INVALID_PLAYER_ID, Name[] = "None")
{
	if(playerid != INVALID_PLAYER_ID)
	{
	    if(IsACop(playerid))
		{
			if(UsingShield{playerid})RemovePlayerAttachedObject(playerid, 7);
			PI[playerid][pShield] = 0.0;
		}
  		PI[playerid][pMember][1] = 0;
	    PI[playerid][pMember][0] = 0;
	    PI[playerid][pDCTime]=0;
	    SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	    PI[playerid][pRank] = 0;
	    SetBumSkin(playerid);
	    PlayerJob[playerid] = 0;
	    SetPlayerColor(playerid, TeamColors[0][0]);
	    ResetSpawnInfo(playerid, 0);
	    SaveAccount(playerid);
	    SCM(playerid,COLOR_LIGHTBLUE,"Вы были сняты со своей должности");
	}
	else
	{
		f(global_str, 144, "UPDATE `accounts` SET `Leader` = '0',`Member` = '0', `Job` = '0',`Rank` = '0' WHERE `NickName` = '%s'",Name);//,`Skin` = '0'
		mysql_tquery(mysql, global_str);
	}
	return 1;
}

stock aml(string[], type, name[], name2[])
	return format(mysql_string, 512, "INSERT INTO `%s` (`Text`, `Type`, `NickName1`, `NickName2`) VALUE ('%s', '%d', '%s', '%s')", Setting_Server[8], string, type, name, name2), CallRemoteFunction("AddLOG", "s", mysql_string);

stock GetPlayerID(const name[], type = 0)
{
	new id = INVALID_PLAYER_ID;

	switch(type)
	{
		case 0:
		{
			foreach(new i: Player) 
				if(GetString(PlayerName[i], name))
					return i;
		}
		case 1:
		{
			new Cache:result = mysql_query(mysql, (str_f("SELECT `ID` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1;", name)));

			if(cache_num_rows()) 
				cache_get_value_name_int(0, "ID", id);

			cache_delete(result);
		}
	}
	return id;
}

stock GetHouseStyle(houseid)
{
	if(HouseInfo[houseid][hType] == 2) return 32;
	for(new i = 1;i < sizeof(GHSPos);i ++)
	{
	    if(floatcomp(GHSPos[i][0], 0.000000)) continue;
	    if(	floatcomp(HouseInfo[houseid][hExit_X], GHSPos[i][0]) &&
	    	floatcomp(HouseInfo[houseid][hExit_Y], GHSPos[i][1]) &&
	    	floatcomp(HouseInfo[houseid][hExit_Z], GHSPos[i][2])) return i;
	}
	return -1;
}

stock IsValidHouse(id)
{
	if(id < OWNABLEHOUSES && id >= 0) return 1;
	return 0;
}

stock HideFuelTD(playerid)
{
	for(new i; i < 34; i++) DestroyPlayerTD(playerid, FillUp[playerid][i]);
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{	
	if(_:clickedid == INVALID_TEXT_DRAW)
	{
		if(Int_GetPlayerData(playerid, "NOclose")) return
			DeletePVar(playerid, "NOclose"), SelectTextDraw(playerid, PI[playerid][pSelectTD]);

        if(pTemp[playerid][tSkinSelectedId] != -1 || BuyInt[playerid] != -1 || BuyGuns[playerid] != -1 || Buyitem[playerid] != -1) SelectTextDraw(playerid, -16776961);
		if(Int_GetPlayerData(playerid,"contOPEN")) HideContMenu(playerid);
		if (Int_GetPlayerData(playerid,"StolCard") != -1) SelectTextDraw(playerid,  0xff8c8c00);
		
		if(!(pTemp[playerid][kladID] == -1) && IsPlayerTextDrawVisible(playerid, KladTD[playerid][0]))
			SelectTextDraw(playerid, 0xA52A2AFF);
		
		if(Int_GetPlayerData(playerid, "SecondHand_PlayerTime") > Global_Time && SecondHand_Open{playerid})
			return SelectTextDraw(playerid, 0xA52A2AFF);
			
		else if(SecondHand_Open{playerid})
			return DestroySecondHandTD(playerid);

		else if(familyCaptureTDOpen{playerid})
		    return hideFamilyCaptureTD(playerid);
		
		else if(Int_GetPlayerData(playerid, "AutoDrive") or Int_GetPlayerData(playerid, "AmericanBonus")) 
			SelectTextDraw(playerid, 0xA52A2AFF);
		
		SystemTextDrawHide(playerid);
		
		if(FamilyOpen{playerid})
		{
			if(FamilyOpenID[playerid])
				ShowFamilyMenu(playerid, true);
			else
				ShowFamilyMenu(playerid, false);
		}
        
		if(IsTextDrawVisibleForPlayer(playerid, BoxEat[0]))
			EatBoxHide(playerid);
		
	  	for(new A; A < 7; A++)
		{
			TextDrawHideForPlayer(playerid, alcodraw1[A]);
			if( A < 5)
			{
				TextDrawHideForPlayer(playerid, alcodraw[A]);
				DestroyPlayerTD(playerid, alcodraw2[playerid][A]);
			}
		}
        if(Gambling[playerid]) SelectTextDraw(playerid, 0xFF9933FF);
        else if(ShowMap[playerid]) TogglePlayerMap(playerid, 0);
		ShowPlayerTD(playerid, debug2[playerid][0]);
	    for(new i; i < 9; i++) DestroyPlayerTD(playerid, pokazmenu[playerid][i]);
		//if(PI[playerid][pInventori] == 1 || PI[playerid][pInventori] == 2) return 1;

	    if(!GetPlayerLauncher(playerid))
        	for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, Logotype[i]);
	}
	
	if(!IsTextDrawVisibleForPlayer(playerid, clickedid))
		return false;
	
	if(Int_GetPlayerData(playerid, "openGetGun"))
	{	
		if(clickedid == GetGunTD[2])
		{
			new id = selectgun[playerid];
			f(global_str, 150, "\
			{ffffff}Вы выбрали {ffff00}%s {cccccc}(%s)\n\n\
			{ffffff}Количество(патроны): {ffff00}%d\n\
			{ffffff}Требует материалов: {ffff00}%d", 
			GetGunMas[id][getNameRu],
			GetGunMas[id][getName],
			GetGunMas[id][getAmmo],
			GetGunMas[id][getMaterials]);
				
			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", global_str, !"Закрыть", !"");
		}
		else if(clickedid == GetGunTD[3])
			return CloseGetGunOrg(playerid);
		
		else if(clickedid == GetGunTD[5])
			return TakeGetGunOrg(playerid);
		
		else if(clickedid == GetGunTD[8] || clickedid == GetGunTD[9])
		{
			if(clickedid == GetGunTD[8]) { if(!selectgun[playerid]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0); }
			else if(clickedid == GetGunTD[9]) { if(selectgun[playerid]+1 >= sizeof(GetGunMas)) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0); }

			selectgun[playerid] += clickedid == GetGunTD[9] ? 1:-1;
			UpdateGetGunOrg(playerid, selectgun[playerid]);	
			return false;
		}
	}
	if(clickedid == Bandito[3])
	{
	    if(Gambling[playerid] == 1)
        {
            Bet[playerid] = GetNextValidBet(Bet[playerid]);
            UpdateBetText(playerid);
        }
        return 1;
	}
	if(clickedid == Bandito[2])
	{
	    if(Gambling[playerid] == 1)
        {
			Bet[playerid] = GetNextValidMBet(Bet[playerid]);
		 	UpdateBetText(playerid);
		}
		return 1;
	}
	if(clickedid == Bandito[8])
	{
	    if(Gambling[playerid] == 1) return ExitPlayerFromSlotMachine(playerid);
	}
	if(clickedid == Bandito[6])
	{
	    if(Gambling[playerid] == 1)
        {
            new money = PI[playerid][pMoney];
            if(Bet[playerid] > money + Balance[playerid]) return GameTextForPlayer(playerid, "~r~You don't have enough money!",5000,4);
            if(Balance[playerid] - Bet[playerid] < 0) return GameTextForPlayer(playerid, "~r~Your balance is too low!",5000,4);
            SeccureAnimation(playerid, "CASINO", "Slot_Plyr");
            SlotCounter[playerid] = 30+random(18);
        	SlotTimer[playerid] = CallTimeOutFunction("Gambler",100,1,"d",playerid);
        	Gambling[playerid] = 2;
            Balance[playerid]-=Bet[playerid];
            new prefix[4];
            if(Balance[playerid] == 0) strcat(prefix,"~y~");
            if(Balance[playerid]  > 0) strcat(prefix,"~g~");
            if(Balance[playerid]  < 0) strcat(prefix,"~r~");
			UpdateBetText(playerid);
        }
        return 1;
	}
	
  	new biz = BizEntered[playerid];
	if(biz == -1) biz = 51;
	new Float:Health;
	GetPlayerHealth(playerid,Health);
    if(clickedid == alcodraw[0])
	{
	    if(J_GetPlayerDrunkLevel(playerid) >= 3000) return SendBotMessage(playerid,"Ох ну и ты напился уже, не продам я тебе, и не проси!");
	    if(HouseEntered[playerid] == -1)
	    {
        	if(PI[playerid][pMoney] < BizData[biz][bItem][0]) return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
        	if(biz != -1)	GiveBizMoney(biz,BizData[biz][bItem][0]);
        	GiveMoney(playerid, -BizData[biz][bItem][0]);
		}
		else
		{
		    if(HouseInfo[HouseEntered[playerid]][hNoOwner] < 1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Не хватает продуктов, купить их можно в любой закусочной!");
		    HouseInfo[HouseEntered[playerid]][hNoOwner]-=1;
		}
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
        if(Health <= 95.0) UpdatePlayerHealth(playerid,Health+5);
        else UpdatePlayerHealth(playerid,100);
        SendBarBot(playerid);
        return 1;
    }
	if(clickedid == alcodraw[1])
	{
	    if(J_GetPlayerDrunkLevel(playerid) >= 3000) return SendBotMessage(playerid,"Ох ну и ты напился уже, не продам я тебе, и не проси!");
	    if(HouseEntered[playerid] == -1)
	    {
		    if(PI[playerid][pMoney] < BizData[biz][bItem][1]) return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
		    if(biz != -1)
			{
			    if(BizData[biz][bProducts]<5)return SendBotMessage(playerid,"Извините, но у нас закончились продукты!");
				GiveBizMoney(biz,BizData[biz][bItem][1]);
				BizData[biz][bProducts]-=5;
			}
			GiveMoney(playerid, -BizData[biz][bItem][1]);
		}
		else
		{
		    if(HouseInfo[HouseEntered[playerid]][hNoOwner] < 5)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Не хватает продуктов, купить их можно в любой закусочной!");
		    HouseInfo[HouseEntered[playerid]][hNoOwner]-=5;
		}
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
        J_SetPlayerDrunkLevel(playerid,J_GetPlayerDrunkLevel(playerid) + 300);
        if(Health <= 70.0) UpdatePlayerHealth(playerid,Health+30);
        else UpdatePlayerHealth(playerid,100);
        SendBarBot(playerid);
        return 1;
	}
	if(clickedid == alcodraw[2])
	{
	    if(J_GetPlayerDrunkLevel(playerid) >= 3000) return SendBotMessage(playerid,"Ох ну и ты напился уже, не продам я тебе, и не проси!");
	    if(HouseEntered[playerid] == -1)
	    {
   	 		if(PI[playerid][pMoney] < BizData[biz][bItem][2])return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
   	 		if(biz != -1)
			{
			    if(BizData[biz][bProducts]<7)return SendBotMessage(playerid,"Извините, но у нас закончились продукты!");
				GiveBizMoney(biz,BizData[biz][bItem][2]);
				BizData[biz][bProducts]-=7;
			}
			GiveMoney(playerid, -BizData[biz][bItem][2]);
		}
		else
		{
		    if(HouseInfo[HouseEntered[playerid]][hNoOwner] < 7)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Не хватает продуктов, купить их можно в любой закусочной!");
		    HouseInfo[HouseEntered[playerid]][hNoOwner]-=7;
		}
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
        J_SetPlayerDrunkLevel(playerid,J_GetPlayerDrunkLevel(playerid) + 350);
		SendBarBot(playerid);
        if(Health <= 50.0) UpdatePlayerHealth(playerid,Health+50);
        else UpdatePlayerHealth(playerid,100);
        return 1;
	}
	if(clickedid == alcodraw[3])
	{
	    if(PI[playerid][pMoney] < BizData[biz][bItem][3]) return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
		if(Fullness[playerid] >= 70) return SCM(playerid,COLOR_GREY, !"Вы не голодны!");
        if(biz != -1)
		{
		    if(BizData[biz][bProducts]<3)return SendBotMessage(playerid,"Извините, но у нас закончились продукты!");
			GiveBizMoney(biz,BizData[biz][bItem][3]);
			BizData[biz][bProducts]-=3;
		}
		GiveMoney(playerid, -BizData[biz][bItem][3]);
		GiveFullness(playerid, 25);
		SCM(playerid,COLOR_VALIK, !"Вы взяли пиццу. Посмотреть состояние голода можно {FFFFFF}/satiety");
		ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		Send2BarBot(playerid);
		return 1;
	}
	if(clickedid == alcodraw[4])
	{
	    if(PI[playerid][pMoney] < BizData[biz][bItem][4]) return SendBotMessage(playerid,"Извините, но у вас не хватает денег!");
        if(Fullness[playerid] >= 60) return SCM(playerid,COLOR_GREY, !"Вы не голодны!");
        if(biz != -1)
		{
		    if(BizData[biz][bProducts]<4)return SendBotMessage(playerid,"Извините, но у нас закончились продукты!");
			GiveBizMoney(biz,BizData[biz][bItem][4]);
			BizData[biz][bProducts]-=4;
		}
		GiveMoney(playerid, -BizData[biz][bItem][4]);
		GiveFullness(playerid, 40);
		SCM(playerid,COLOR_VALIK, !"Вы взяли ланч. Посмотреть состояние голода можно {FFFFFF}/satiety");
		ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
		Send2BarBot(playerid);
		return 1;
	}
	if(clickedid == alcodraw1[5])
	{
		for(new A; A < 5; A++) TextDrawHideForPlayer(playerid, alcodraw[A]); //квадратики дисков
		for(new A; A < 7; A++) TextDrawHideForPlayer(playerid, alcodraw1[A]); //квадратики дисков
		for(new A; A < 5; A++) DestroyPlayerTD(playerid, alcodraw2[playerid][A]); //квадратики дисков
		CancelSelectTextDraw(playerid);
		return 1;
	}

	if(clickedid == BoxEat[3])
	{
		if(!(InfoBiz[playerid] == -1))
		{
			new id = (GetPVarInt(playerid, "SelectBoxEat") == 2);
			
			if(PI[playerid][pMoney] < BizData[InfoBiz[playerid]][bItem][id])
				return SendBotMessage(playerid, !"Извините, но у вас недостаточно денег!");

			else if(Fullness[playerid] > 75)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не голодны!");

			GiveMoney(playerid, -BizData[InfoBiz[playerid]][bItem][id]);
			GiveBizMoney(InfoBiz[playerid], BizData[InfoBiz[playerid]][bItem][id]);
			GiveFullness(playerid, 25);
			ApplyAnimationEx(playerid, !"FOOD", !"EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
			SCM(playerid, COLOR_VALIK, !"Вы немного перекусили. Посмотреть состояние голода можно {FFFFFF}/satiety");
			SCM(playerid, -1, !"Рекомендуем кушать в закусочных, там намного дешевле!");
			SendEatBot(playerid);
		}
		
		return EatBoxHide(playerid), CancelSelectTextDraw(playerid);
	}

	else if(clickedid == BoxEat[2])
		return EatBoxHide(playerid), CancelSelectTextDraw(playerid);

	else if(pTemp[playerid][tSkinSelectedId] != -1 || BuyInt[playerid] != -1 || BuyGuns[playerid] != -1 || Buyitem[playerid]!=-1)
	{
	    if(_:clickedid == 65535) SelectTextDraw(playerid, 0xFFFFFFAA);
	    else if(clickedid == clothChois[9]) callcmd::back(playerid,"");
	    else if(clickedid == clothChois[4]) callcmd::next(playerid,"");
	    else if(clickedid == clothChois[1]) callcmd::cancel(playerid,"");
	    else if(clickedid == clothChois[0]) callcmd::done(playerid,"");
	    return 1;
	}

	if(KindFuel[playerid] != -1)
 	{
 		if(_:clickedid == 65535)
 		{
	 		KindFuel[playerid] = -1;
			CountFuel[playerid] = 0.0;
			HideFuelTD(playerid);
			CancelSelectTextDraw(playerid);
		}
	}
    return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(!IsPlayerTextDrawVisible(playerid, playertextid) or Int_GetPlayerData(playerid, "DialogOpen"))
		return false;

	if(Int_GetPlayerData(playerid, "pTimeInv3") && !(playertextid == InventMenuTD[playerid][8]) && !(playertextid == InvTextDraws[playerid][2]))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Подождите немного..."); 
	
	CallTimeOutFunction("TrashTimer",200,0,"d",playerid);
	SetPVarInt(playerid, "pTimeInv3", 1);

	if(bodyguardTDOpen{playerid})
	{
		for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
		{
			if(playertextid == BodyguardMenuButtons[playerid][i][0])
				return spdList(playerid, 0, i), SPDF(playerid, 25762, DIALOG_STYLE_LIST, (str_f("%s", Bodyguard_playerData[playerid][i][bg_Name])), "{%s}[1] %s\n{%s}[2] Воспроизвести анимацию\n[3] Изменить имя спутника {FFD700}[500 AZ Coins]{FFFFFF}\n[4] Продать другому игроку\n[5] Изменить реплики\n{FFFFFF}[6] Сдать охранника в аренду\n{FFFFFF}[7] Распрощаться (выбросить)", !"Выбрать", !"Отмена", Bodyguard_playerData[playerid][i][bg_Timer] > 0 ? "BFBBBA" : "FFFFFF", Bodyguard_playerData[playerid][i][bg_Spawn] ? "Спрятать" : "Заспавнить рядом с собой", Bodyguard_playerData[playerid][i][bg_Spawn] ? "FFFFFF" : "BFBBBA");

			else if(playertextid == BodyguardSkinsTextDraws[playerid][i][1])
				return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация об охраннике", "\
					{FFFFFF}Имя охранника: {B83434}[%s]{FFFFFF}\n\
					Тип: %s{FFFFFF}\n\n\
					{FFFFFF}Происхождение: {B83434}[%s]{FFFFFF}\n\
					Уровень: {B83434}[%i]{FFFFFF}\n\
					Опыт: {B83434}[%i/%i]{FFFFFF}\n\
					Здоровье: {B83434}[%i/%i]{FFFFFF}\n\
					Броня: {B83434}[%i/1000]{FFFFFF}\n\
					Сытость: {B83434}[%0.1f/100.0]{FFFFFF}\n\n\
					Защита: {B83434}[-%i% урона]{FFFFFF}\n\
					Урон: {B83434}[+%i урона]{FFFFFF}\n\
					Макс. HP: {B83434}[+%i HP]{FFFFFF}\n\
					Шанс словить пулю: {B83434}[%i%%]{FFFFFF}\n\n\
					{ff6666}Открытые характеристики охранника (0/%i):", "Закрыть", "", Bodyguard_playerData[playerid][i][bg_Name], BodyGuardType_Name[ BodyGuardInfo[GetBodyGuardItem(playerid, i)][1] - 1 ], ItemsInfo[Bodyguard_playerData[playerid][i][bg_ItemId]][itemName], Bodyguard_playerData[playerid][i][bg_Level], Bodyguard_playerData[playerid][i][bg_Exp], (Bodyguard_playerData[playerid][i][bg_Level] + 1) * 4, floatround(Bodyguard_playerData[playerid][i][bg_Health]), BodyGuardInfo[GetBodyGuardItem(playerid, i)][4], floatround(Bodyguard_playerData[playerid][i][bg_Armour]), float(Bodyguard_playerData[playerid][i][bg_Satiety]), BodyGuardInfo[GetBodyGuardItem(playerid, i)][2], BodyGuardInfo[GetBodyGuardItem(playerid, i)][3], 5 * (Bodyguard_playerData[playerid][i][bg_Level] - 1), BodyGuardInfo[GetBodyGuardItem(playerid, i)][5], BodyGuardInfo[GetBodyGuardItem(playerid, i)][1]-1);

			else if(playertextid == BodyguardInventoryButtons[playerid][i][0])
			{
				new Float:X = 462.401703, Float:Y = 101.5, Float:Pos[2];

				bodyguardInventoryOpen{playerid} = !bodyguardInventoryOpen{playerid};

				if(bodyguardInventoryOpen{playerid})
				{
					for(new id; id < 4; id++)
					{
						if(id == i)
							continue;

						Pos[0] = X - 124.401703, Pos[1] = Y + 26.100006;

						CreateBodyguardBackGround(playerid, Pos, id);

						if(i < 4 && id == i + 1)
						{
							PlayerTextDrawHide(playerid, BodyguardNameTextDraws[playerid][id]);
							PlayerTextDrawHide(playerid, BodyguardRarityTextDraws[playerid][id]);

							for(new td; td < 4; td++)
							{
								if(td < 3)
								{
									for(new s; s < 2; s++)
										PlayerTextDrawHide(playerid, BodyguardFeatureTextDraws[playerid][id][td][s]);

									PlayerTextDrawHide(playerid, BodyguardDecorationTD[playerid][id][td]);
								}
								if(td < 2)
									PlayerTextDrawHide(playerid, BodyguardMenuButtons[playerid][id][td]),
									PlayerTextDrawHide(playerid, BodyguardWeaponTextDraws[playerid][id][td]),
									PlayerTextDrawHide(playerid, BodyguardSkinsTextDraws[playerid][id][td]),
									PlayerTextDrawHide(playerid, BodyguardLevelTextDraws[playerid][id][td]),
									PlayerTextDrawHide(playerid, BodyguardInventoryButtons[playerid][id][td]);

								PlayerTextDrawHide(playerid, BodyguardInventorySlots[playerid][id][td]);
							}

							continue;
						}
					}

					Pos[0] = X - 121.401703, Pos[1] = Y + 84.600006;

					CreateBodyguardInventoryCells(playerid, Pos, i);
				}
				else
				{
					for(new id; id < 12; id++)
					{
						if(id < 4)
							DestroyPlayerTD(playerid, BodyguardBackGround[playerid][id]);

						DestroyPlayerTD(playerid, BodyguardInventoryCells[playerid][i][id]);
					}

					for(new td; td < 4; td++)
					{
						if(i >= 3)
							break;

						if(!td)
							PlayerTextDrawShow(playerid, BodyguardWeaponTextDraws[playerid][i + 1][0]),
							PlayerTextDrawShow(playerid, BodyguardSkinsTextDraws[playerid][i + 1][0]),
							UpdateBodyguardTextDraw(playerid, 0), UpdateBodyguardTextDraw(playerid, 3);

						if(td < 3)
							PlayerTextDrawShow(playerid, BodyguardDecorationTD[playerid][i + 1][td]);

						PlayerTextDrawShow(playerid, BodyguardInventorySlots[playerid][i + 1][td]);
					}

					if(i < 3 && i + 1 < IsPlayerHaveBodyguard(playerid))
					{
						PlayerTextDrawShow(playerid, BodyguardNameTextDraws[playerid][i + 1]);
						PlayerTextDrawShow(playerid, BodyguardRarityTextDraws[playerid][i + 1]);

						for(new td; td < 3; td++)
						{
							if(td < 2)
								PlayerTextDrawShow(playerid, BodyguardMenuButtons[playerid][i + 1][td]),
								PlayerTextDrawShow(playerid, BodyguardLevelTextDraws[playerid][i + 1][td]);

							for(new s; s < 2; s++)
							{
								PlayerTextDrawShow(playerid, BodyguardFeatureTextDraws[playerid][i + 1][td][s]);
								if(Bodyguard_playerData[playerid][i + 1][bg_Spawn]) PlayerTextDrawShow(playerid, BodyguardInventoryButtons[playerid][i + 1][s]);
							}
						}
					}
				}

				return PlayerTextDrawSetString(playerid, BodyguardInventoryButtons[playerid][i][1], bodyguardInventoryOpen{playerid} ? ( SettingData[playerid][sdLanguage] ? FixText("ЗАКРЫТЬ") : !"CLOSE" ) : ( SettingData[playerid][sdLanguage] ? FixText("ИНВЕНТАРЬ") : !"INVENTORY" ) );
			}
		}
	}

	if(ChangeColor{playerid})
	{
		new item = ChangeColorItem[playerid][0] - 1, kamen = ChangeColorItem[playerid][1] - 1, krasitel = ChangeColorItem[playerid][2] - 1;

		if(playertextid == ColorsChangeTD[playerid][13])
        {
            if(Inventory[playerid][1][ChangeColorItem[playerid][2]-1] < 7 || Inventory[playerid][1][ChangeColorItem[playerid][1]-1] < 1 || ChangeColorItem[playerid][0] == -1) return false;
            if(!ChangeColorStart{playerid})
            {
                if(GetCount(playerid, 1811) < BizData[BizEntered[playerid]][bItem][2]) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно BTC!");
                if(!GetPVarInt(playerid, "idcolorchange")) return SCM(playerid, COLOR_RED, "[Ошибка] {ffffff}Не выбран основной цвет для окрашивания аксессуара.");
                ApplyAnimationEx(playerid, !"CASINO", !"DEALONE", 4.1, 1, 1, 1, 1, 0, 1);
                SCM(playerid, COLOR_VALIK, !"[Подсказка] {ffffff}Процесс окрашивания аксессуара успешно запущен..");
                ChangeColorStart{playerid} = true;
                ChangeColorTimer[playerid] = 5;
            }
        }
		else if(playertextid == ColorsChangeTD[playerid][12]) SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "{73B461}Перекрашивание аксессуаров", "{73B461}—{ffffff} Перекрашивание аксессуаров:\n\n{73B461}—{ffffff} Для покраски предметов, вам необходимы {73B461}точильные камни{FFFFFF}, найти их\nможно на семейном мероприятии - Зловещий дворец ({73B461}/GPS - Мероприятия{FFFFFF})\nили приобрести в игровом магазине или на центральном рынке. Так же собрать на фермах.\n\nТак же для покраски предметов, вам необходим {73B461}краситель{FFFFFF}, найти его\nможно на фермах или на центральном рынке.\n\nБлагодаря перекраске Вы сможете изменить визуальный вид своего аксессуара", "Закрыть", "");
		else if(playertextid == ColorsChangeTD[playerid][14]) DestroyColorsChange(playerid);
		for(new i = 15; i < 24; i++)
		{
			if(playertextid == ColorsChangeTD[playerid][i] && ChangeColorItem[playerid][0])
			{
				SetPVarInt(playerid, "idcolorchange", i-15);

				if(IsPlayerTextDrawVisible(playerid, ColorsChangeTD[playerid][29])) DestroyPlayerTD(playerid, ColorsChangeTD[playerid][29]);
				ColorsChangeTD[playerid][29] = CreatePlayerTextDraw(playerid, 217.9998, 180.7183, "LD_SPAC:white");
				PlayerTextDrawLetterSize(playerid, ColorsChangeTD[playerid][29], 0.4799, 1.1200);
				PlayerTextDrawTextSize(playerid, ColorsChangeTD[playerid][29], 6.0000, 7.0000);
				PlayerTextDrawAlignment(playerid, ColorsChangeTD[playerid][29], 1);
				PlayerTextDrawColor(playerid, ColorsChangeTD[playerid][29], AksMassive[i-15][AksColorDefault]);
				PlayerTextDrawBackgroundColor(playerid, ColorsChangeTD[playerid][29], 255);
				PlayerTextDrawFont(playerid, ColorsChangeTD[playerid][29], 4);
				PlayerTextDrawSetProportional(playerid, ColorsChangeTD[playerid][29], 0);
				PlayerTextDrawSetShadow(playerid, ColorsChangeTD[playerid][29], 0);
				ShowPlayerTD(playerid, ColorsChangeTD[playerid][29]);
			}
		}
		if(playertextid == ColorsChangeTD[playerid][24])
		{
			new id = GetInvID(playerid, krasitel, 1);

			ChangeColorItem[playerid][2] = 
			InventSlotUse[playerid][krasitel] = false;

			PlayerTextDrawSetString(playerid, ColorsChangeTD[playerid][25], "0/7");
			PlayerTextDrawColor(playerid, ColorsChangeTD[playerid][24], -1717986817);
			PlayerTextDrawSetSelectable(playerid, ColorsChangeTD[playerid][24], false);
			PlayerTextDrawShow(playerid, ColorsChangeTD[playerid][24]);
			InventSlotUpdate(playerid, id, krasitel);
		}
		else if(playertextid == ColorsChangeTD[playerid][27])
		{
			new id = GetInvID(playerid, kamen, 1);

			ChangeColorItem[playerid][1] = 
			InventSlotUse[playerid][kamen] = false;

			PlayerTextDrawSetString(playerid, ColorsChangeTD[playerid][28], "0/1");
			PlayerTextDrawColor(playerid, ColorsChangeTD[playerid][27], -1717986817);
			PlayerTextDrawSetSelectable(playerid, ColorsChangeTD[playerid][27], false);
			PlayerTextDrawShow(playerid, ColorsChangeTD[playerid][27]);
			InventSlotUpdate(playerid, id, kamen);
		}
		else if(playertextid == ColorsChangeTD[playerid][26])
		{
			new id = GetInvID(playerid, item, 1);

			ChangeColorItem[playerid][0] = 
			InventSlotUse[playerid][item] = false;

			PlayerTextDrawSetSelectable(playerid, ColorsChangeTD[playerid][26], 0);
			PlayerTextDrawBackgroundColor(playerid, ColorsChangeTD[playerid][26], 0x333333FF);
			PlayerTextDrawSetPreviewModel(playerid, ColorsChangeTD[playerid][26], 1649);
			PlayerTextDrawSetPreviewRot(playerid, ColorsChangeTD[playerid][26], 0.000, 0.000, 90.00, 2.0);
			PlayerTextDrawShow(playerid, ColorsChangeTD[playerid][26]);
			InventSlotUpdate(playerid, id, item);
			SetPVarInt(playerid, "idcolorchange", 0);
			if(IsPlayerTextDrawVisible(playerid, ColorsChangeTD[playerid][29])) DestroyPlayerTD(playerid, ColorsChangeTD[playerid][29]);
		}
	}
	
	if(familyCaptureTDOpen{playerid})
    {
        for(new i; i < 156; i++)
        {
            if(playertextid == familyZoneTD[playerid][i])
            {
				new id = GangZoneInfo[i + 131][familyOwnerId], month, day;
                getdate(_, month, day);

                if(day == 31 || day == 30 || day == 29) 
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Закончился сезон, начало 1 числа");

				return SetPVarInt(playerid, "zoneFamilySelect", i + 131), SPDF(playerid, 15210, DIALOG_STYLE_LIST, (str_f("{cccccc}Территория №%i", i + 1)), "Установить метку в GPS\n%s территорию%s", !"Выбрать", !"Закрыть", id == -1 ? "Забрать" : "Отобрать", id == -1 ? "" : (str_f("\n \nПринадлежит семье: %s", GetFamilyDataString(id, "name"))));
            }
        }
    }
	
	if(Int_GetPlayerData(playerid, "OtherInventOpen") || EnchantWork{playerid} || InventoryOpen{playerid} || tradeopen{playerid} || ChangeColor{playerid})
	{
		for(new i,j; i < 36; i++)
	    {
	    	if(i < 30)
	    	{
	    		if(playertextid == OtherKletka[playerid][i])
	    		{
	    			if(Int_GetPlayerData(playerid,"DialogOpen")) return 0;

	    			j = i+30*Int_GetPlayerData(playerid, "OtherInventPage");

	    			if(GetInvSet(playerid) >= PI[playerid][pInvCell]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

	    			new id;

	    			switch Int_GetPlayerData(playerid, "OtherInventOpen") do
	    			{ 
	    				case 1:
	    				{
			    			id = HouseEntered[playerid];
			    			if(id == -1 || !GetString(HouseInfo[id][hOwner], PN(playerid))) return OtherInvClose(playerid);
			    			if(!HouseInfo[id][hItem][j] || !HouseInfo[id][hItemCount][j]) return 0;
							else if(HouseInfo[id][hItemCount][j] == 1)
							{
								AddItem(playerid, HouseInfo[id][hItem][j], 1, HouseInfo[id][hItemColor][j], HouseInfo[id][hItemIdentificator][j], HouseInfo[id][hItemLevel][j], HouseInfo[id][hItemProc][j]);
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из шкафа %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), id, ItemsInfo[HouseInfo[id][hItem][j]][itemName], HouseInfo[id][hItem][j], 1);
								HouseInfo[id][hItem][j]  = HouseInfo[id][hItemCount][j] = HouseInfo[id][hItemColor][j] = HouseInfo[id][hItemLevel][j]  = HouseInfo[id][hItemProc][j] = 0;
								InventSlotOtherUpdateAll(id, 1, HouseInfo[id][hItem][j], i, j);
								SaveItemHouse(id);
							}
							else if(HouseInfo[id][hItemCount][j] > 1)
							{
								PickInvent[playerid] = j, PickInventSlot[playerid] = i;
								return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
							}
						}
						case 2:
						{
							id = musorka[playerid];
							if(MusorInfo[id][mItemTimer][j] > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя забрать из мусорки, так как он недавно был выкинут и заблокирован на 1 час!");
							if(id == -1) return OtherInvClose(playerid);
							else if(!MusorInfo[id][mItem][j] || !MusorInfo[id][mItemCount][j]) return 0;
							else if(MusorInfo[id][mItemCount][j] == 1)
							{
								AddItem(playerid, MusorInfo[id][mItem][j], 1, MusorInfo[id][mItemColor][j], MusorInfo[id][mItemIdentificator][j], MusorInfo[id][mItemLevel][j], MusorInfo[id][mItemProc][j]);
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из мусорки %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), id, ItemsInfo[MusorInfo[id][mItem][j]][itemName], MusorInfo[id][mItem][j], 1);
								MusorInfo[id][mItem][j] = MusorInfo[id][mItemCount][j] = MusorInfo[id][mItemColor][j] = MusorInfo[id][mItemLevel][j] = MusorInfo[id][mItemProc][j] = MusorInfo[id][mItemTimer][j] = 0;
								InventSlotOtherUpdateAll(id, 2, MusorInfo[id][mItem][j], i, j);
							}
							else if(MusorInfo[id][mItemCount][j] > 1)
							{
								PickInvent[playerid] = j, PickInventSlot[playerid] = i;
								return SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
							}
						}
						case 3:
						{
							id = trunk[playerid];
							new Float:X,Float:Y,Float:Z;
							if(!IsValidVehicle(id) || !TrunkInfo[id][tOpen]) return OtherInvClose(playerid);
							GetVehiclePos(id, X,Y,Z); 
							if(!IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z)) return OtherInvClose(playerid);
							else if(!TrunkInfo[id][tItem][j] || !TrunkInfo[id][tItemCount][j]) return false;
							else if(TrunkInfo[id][tItemCount][j] == 1)
							{
                                AddItem(playerid, TrunkInfo[id][tItem][j], 1, TrunkInfo[id][tItemColor][j], TrunkInfo[id][tItemIdentificator][j], TrunkInfo[id][tItemLevel][j], TrunkInfo[id][tItemProc][j]);
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из багажника %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), id, ItemsInfo[TrunkInfo[id][tItem][j]][itemName], TrunkInfo[id][tItem][j], 1);
								TrunkInfo[id][tItem][j] = TrunkInfo[id][tItemCount][j] = TrunkInfo[id][tItemColor][j] = TrunkInfo[id][tItemLevel][j] = TrunkInfo[id][tItemProc][j] = 0;
								InventSlotOtherUpdateAll(id, 3, TrunkInfo[id][tItem][j], i, j);
								if(IsAOwnableCar(id)) SaveTrunk(id);
							}
							else if(TrunkInfo[id][tItemCount][j] > 1)
							{
								PickInvent[playerid] = j, PickInventSlot[playerid] = i;
								return SPD(playerid, 8251, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество, которое хотите забрать", !"Выбрать", !"Отмена");
							}
						}
                        case 4:
                        {
                            id = pTemp[playerid][pCentralMarketId][0];

                            if(CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][1][j] > 0)
                                return spdList(playerid, 0, j), SPDF(playerid, 26540, DIALOG_STYLE_MSGBOX, !"Снятие с продажи", "%s\n{67BE55}\nВ наличии: %i шт.\nСтоимость: $%i за 1 шт.\n\n{FFFFFF}Вы действительно хотите снять с продажи выбранный предмет?", !"Снять", !"Отмена", GetItemInfoEx(playerid, 6, j, id), CentralMarketItems[i][pTemp[playerid][pCentralMarketSelectId]][3][j], CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][2][j]);
                        }
					}
	    			return 1;
	    		}
	    	}

			if(playertextid == Kletka[playerid][i])
			{	
				j = GetInvID(playerid, i, 0);

				if(bool:InventSlotUse[playerid][j] == true) return false;

				switch InventoryPage[playerid] do
				{
					case E_INVENTORY_TYPE_TRADE:
					{
						if(!Inventory[playerid][0][j] || !Inventory[playerid][1][j]) return false;

						if(!IsPlayerOnline(GetDataTrade(playerid, tradePlayer)) or GetDataTrade(GetDataTrade(playerid, tradePlayer), tradeAccept) or GetDataTrade(playerid, tradeAccept)) return false;

						else if(!ItemsInfo[Inventory[playerid][0][j]][itemTradeable]) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя передать!"); 
						
						if(Inventory[playerid][1][j] == 1)
						{
							for(new idx; idx < 10; idx ++)
							{
								if(TradeInfo[playerid][tradeItem][idx] == -1)
								{
									TradeInfo[playerid][tradeItem][idx] = j;
									TradeInfo[playerid][tradeItemCount][idx] = 1;
									InventSlotUse[playerid][j] = true;
									InventSlotUpdate(playerid, i, j);
									return TradeSlotUpdate(playerid, idx, Inventory[playerid][0][j], j);
								}
							}
						}
						else PickInvent[playerid] = j, PickInventSlot[playerid] = i, SPD(playerid, 8249, DIALOG_STYLE_INPUT, !"Торговля", !"{FFFFFF}Введите количество, которое хотите передать", !"Выбрать", !"Отмена");
						return true;
					}
					
					case E_INVENTORY_TYPE_ENCHANT_2:
					{
						if(IsAAks(Inventory[playerid][0][j]) && !(Inventory[playerid][5][j] == 100) && !(BizEntered[playerid] == -1))
							return PickInvent[playerid] = j, PickInventSlot[playerid] = i, SPDF(playerid, 8510, DIALOG_STYLE_MSGBOX, !"Мастерская | Ремонт", "{FFFFFF}Стоимость восстановления прочности {A1FF96}$%d{FFFFFF}\nВы действительно хотите починить?", !"Выбрать", !"Отмена", BizData[BizEntered[playerid]][bItem][1]);

						return true;
					}
					case E_INVENTORY_TYPE_ENCHANT:
					{
						if((IsAAks(Inventory[playerid][0][j]) or IsASkinInv(Inventory[playerid][0][j]) && ItemsInfo[Inventory[playerid][0][j]][itemModel] > 311) && !EnchantWorkItem[playerid][0]) EnchantWorkItem[playerid][0] = j + 1;
						else if(!EnchantWorkItem[playerid][1] && (Inventory[playerid][0][j] == 1187 or Inventory[playerid][0][j] == 1420)) EnchantWorkItem[playerid][1] = j + 1;
						else return false;
		
						if((IsAAks(Inventory[playerid][0][j]) or IsASkinInv(Inventory[playerid][0][j]) && ItemsInfo[Inventory[playerid][0][j]][itemModel] > 311) || Inventory[playerid][0][j] == 1187 || Inventory[playerid][0][j] == 1420)
							PlayerTextDrawColor(playerid, Kletka[playerid][i], 0x666666FF),
							InventSlotUse[playerid][j] = true,
							PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], false),
							PlayerTextDrawHide(playerid, Kletka[playerid][i]),
							ShowPlayerTD(playerid, Kletka[playerid][i]),
							UpdateEnchantWork(playerid);
						
						return true;
					}
					
					case E_INVENTORY_TYPE_OTHER_INV:
					{
						if(!Inventory[playerid][0][j] || !Inventory[playerid][1][j]) return false;

                        if(Inventory[playerid][6][j] > Global_Time)
                            return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Время после прошлого использования ещё не прошло!");

						switch Int_GetPlayerData(playerid, "OtherInventOpen") do
						{
							case 1:
							{
								if(HouseEntered[playerid] == -1) return OtherInvClose(playerid);
								else if(!ItemsInfo[Inventory[playerid][0][j]][itemTradeable]) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя передать!");
								else if(Inventory[playerid][1][j] == 1)
									AddItemHouse(playerid, HouseEntered[playerid], Inventory[playerid][0][j], 1, Inventory[playerid][2][j], Inventory[playerid][3][j], Inventory[playerid][4][j], Inventory[playerid][5][j]),
									ClearItem(playerid, j, 1),
									SaveItemHouse(HouseEntered[playerid]);

								else if(Inventory[playerid][1][j] > 1)
								{
									PickInvent[playerid] = j, PickInventSlot[playerid] = i;
									return SPD(playerid, 8248, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");
								}
							}
							case 2: dropItem(playerid, j, i);
							case 3:
							{
								if(!IsValidVehicle(trunk[playerid])) return OtherInvClose(playerid);
								else if(!ItemsInfo[Inventory[playerid][0][j]][itemTradeable]) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя передать!");
								else if(Inventory[playerid][1][j] == 1)
								{
									AddItemTrunk(playerid, trunk[playerid], Inventory[playerid][0][j], 1, Inventory[playerid][2][j], Inventory[playerid][3][j], Inventory[playerid][4][j], Inventory[playerid][5][j]);
									ClearItem(playerid, j, 1);
									if(IsAOwnableCar(trunk[playerid])) SaveTrunk(trunk[playerid]);
								}
								else if(Inventory[playerid][1][j] > 1)
								{
									PickInvent[playerid] = j, PickInventSlot[playerid] = i;
									return SPD(playerid, 8248, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");
								}
							}
							case 4: 
                                return spdList(playerid, 0, j), SPDF(playerid, 26539, DIALOG_STYLE_INPUT, !"", "{FFFFFF}Введите %s товар ( {57FF6B}%s{FFFFFF} )%s", !"Принять", !"Назад", Inventory[playerid][1][j] > 1 ? "количество и цену за один" : "цену за", ItemsInfo[Inventory[playerid][0][j]][itemName], Inventory[playerid][1][j] > 1 ? ", через запятую.\nПример: {57FF6B}2,1000.\n" : "");
                        }
						return true;
					}
					case E_INVENTORY_TYPE_COLOR:
					{
						if(IsAAks(Inventory[playerid][0][j]) && !ChangeColorItem[playerid][0]) ChangeColorItem[playerid][0] = j + 1;
						else if(!ChangeColorItem[playerid][1] && Inventory[playerid][0][j] == 1187) ChangeColorItem[playerid][1] = j + 1;
						else if(!ChangeColorItem[playerid][2] && Inventory[playerid][0][j] == 809) ChangeColorItem[playerid][2] = j + 1;
						else return false;

						if(IsAAks(Inventory[playerid][0][j]) || Inventory[playerid][0][j] == 1187 || Inventory[playerid][0][j] == 809)
						{
							PlayerTextDrawColor(playerid, Kletka[playerid][i], 0x666666FF);
							InventSlotUse[playerid][j] = true,
							PlayerTextDrawSetSelectable(playerid, Kletka[playerid][i], false),
							PlayerTextDrawHide(playerid, Kletka[playerid][i]),
							ShowPlayerTD(playerid, Kletka[playerid][i]),
							UpdateChangeColor(playerid);
						}

						return true;
					}
					case E_INVENTORY_TYPE_PLAYER:
					{
						new ID = PickInvent[playerid], slot = PickInventSlot[playerid];

						if(selectInventoryAccesUsed[playerid][0])
						{
							new iditem = Inventory[playerid][0][j], stripeName[][] = {"защите", "регенерации", "урону", "удачи на урон", "макс.хп"}; selectInventoryAccesBoost[playerid][0] = j;

                            if(Inventory[playerid][3][j] <= 0)
                           	{
                           	    if(IsAAks(iditem)) 
									return SPD(playerid, 25691, DIALOG_STYLE_MSGBOX, !"Подтверждение", (str_f("{ffffff}Вы действительно хотите пришить нашивку %d-го уровня для %s на аксессуар {FFF200}%s", GetStripeInfo(Inventory[playerid][3][selectInventoryAccesSlot[playerid][0]], 0), stripeName[GetStripeInfo(Inventory[playerid][3][selectInventoryAccesSlot[playerid][0]], 1)], ItemsInfo[iditem][itemName])), !"Пришить", !"Отмена");

								else return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Это не аксессуар!");
							}
							else return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Нашивка уже установлена на данный аксессуар!");
						}
						
						if(PickInvent[playerid] == InventoryMaxSlot+1)
						{
							if(!Inventory[playerid][0][j])
							{
								if(IsPlayerTextDrawVisible(playerid, InventMenuTD[playerid][0]) && pTemp[playerid][tItemId])
									pTemp[playerid][tItemId] = pTemp[playerid][tType] = pTemp[playerid][tSlot] = 0, HideInventMenuTD(playerid);

								return true;
							}

							PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
							PickInvent[playerid] = j; 
							PickInventSlot[playerid] = i; 
							OnPlayerClickSlot(playerid, i);
						}
						else
						{
							if(Inventory[playerid][0][j])
							{
								ChangeItemPos(playerid, ID, j);

								if(Inventory[playerid][0][j] == Inventory[playerid][0][ID])
								{
									if(PickInvent[playerid] == j) 
										return true;

									with(playerid, j, ID, slot, i);
								}
							}
							else if(!Inventory[playerid][0][j])
							{
								if(shopopen{playerid}) 
									return false;
								
								ChangeItemPos(playerid, j, ID);

								for(new is; is < 7; is++)
									Inventory[playerid][is][ID] = 0;
							}
							ColorSlotReset(playerid), InventSlotUpdate(playerid, slot, ID), InventSlotUpdate(playerid, i, j);
							PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
							HideInventMenuTD(playerid);
						}
					}
				}
					
				break;
			}
			
			if(i < 6 && PI[playerid][OpenGunMenu])
				if(playertextid == UpgradeMenuSlot[playerid][i][0])
					if(UpgradeSlot[playerid][i]) 
						UpdateUpgradeSlot(playerid, i, 0, 0);
		}
	}
	
	if(IsTextDrawVisibleForPlayer(playerid, BoxEat[0]))
	{
		if(playertextid == BoxEatPlayer[playerid][2] or playertextid == BoxEatPlayer[playerid][5])
		{
			new 
				Click = playertextid == BoxEatPlayer[playerid][2] ? 2:5, NoClick = Click == 2 ? 5:2;

			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][Click], 0xA52A2AFF);
			PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][NoClick], 0xC0C0C018);

			ShowPlayerTD(playerid, BoxEatPlayer[playerid][Click]);
			ShowPlayerTD(playerid, BoxEatPlayer[playerid][NoClick]);

			return SetPVarInt(playerid, "SelectBoxEat", Click);
		}
	}
	
	if(!(pTemp[playerid][kladID] == -1))
	{
		if(playertextid == KladTD[playerid][1])
			return pTemp[playerid][kladID] = -1, ShowPlayerKlad(playerid, false);
			
		for(new i, id, count; i < sizeof(PrizeKladTD[]); i++)
		{
			if(playertextid == PrizeKladTD[playerid][i][0])
			{
				if(GetInvSet(playerid) >= PI[playerid][pInvCell]) 
					return SCM(playerid, COLOR_VALIK, !"[Hitch-System]{FFFFFF} Ваш инвентарь заблокирован или у вас не хватает места!");
				
				id = pTemp[playerid][kladPrize][i];
				count = prize_klad[id][1] + random(prize_klad[id][2]);
				
				pTemp[playerid][kladPrize][i] = 0;
				
				AddItem(playerid, prize_klad[id][0], count);
				
				SCMF(playerid, COLOR_YELLOW, "Вы взяли приз из клада:{FFFFFF} %s [количество: %d]", ItemsInfo[prize_klad[id][0]][itemName], count);
				
				for(new z; z < 5; z++)
					DestroyPlayerTD(playerid, PrizeKladTD[playerid][i][z]);
				
				return true;
			}
		}
	}

	if(SecondHand_Open{playerid})
	{
		if(Int_GetPlayerData(playerid, "SecondHandBLOCK") > Global_Time)
			return SCMF(playerid, COLOR_GREY, "У вас временно не работает курсор из-за неправильно убранной одежды. До активации курсора осталось: %d сек.", Int_GetPlayerData(playerid, "SecondHandBLOCK") - Global_Time);
		
		else if(SecondHandTD[playerid][0] == playertextid)
			return DestroySecondHandTD(playerid);
			
		for(new i; i < 10; i++)
		{
			if(!(playertextid == SecondHandTD_Click[playerid][i])) continue;
			
			switch i do
			{
				case 0..4:
				{
					DestroyPlayerTD(playerid, SecondHandTD_Click[playerid][i]);

					for(new z; z < 5; z ++)
					{
						if(IsValidPlayerTextDraw(playerid, SecondHandTD_Click[playerid][z]) && !(_:SecondHandTD_Click[playerid][z] == -1))
							return false;
					}
					
					new id = Int_GetPlayerData(playerid, "SecondIDPICK");
					DestroySecondHandTD(playerid);
					
					if(!SecondHand_Pos[id][secondCreate])
						return false;
						
					SecondHand_Pos[id][secondCreate] = false;
					DestroyDynamicPickup(SecondHand_Pos[id][secondPickup]);
					DestroyDynamic3DTextLabel(SecondHand_Pos[id][secondTextSkin]);
						
					ApplyAnimationEx(playerid, !"COP_AMBIENT", !"COPBROWSE_IN", 4.1, 0, 0, 0, 0, 0, 1);
					GiveBizMoney(BizEntered[playerid], 50000);
					
					AddItem(playerid, 1853 + random(6), 1);
					GiveDonate(playerid, 1000);
					GiveMoney(playerid, -50000, "секонд хенд - ловля одежды");
					
					return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы купили одежду из секонд-хенда за $50000.");
				}
					
				case 5..9:
				{
					Int_SetPlayerData(playerid, "SecondHandBLOCK", Global_Time + 5);
					SCM(playerid, COLOR_OLDRED, !"Внимание!");
					SCM(playerid, -1, !"Вы убрали хорошую одежду, поэтому сейчас вы будете перебирать вещи на 5 секунд дольше.");
					SCM(playerid, COLOR_GREY, !"(перестаёт работать курсор на 5 секунд, чтобы убрать остальную одежду)");
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", "{ff0000}Внимание!\n\n{ffffff}Вы убрали хорошую одежду, поэтому сейчас вы будете перебирать вещи на 5 секунд дольше.\n{cccccc}(перестаёт работать курсор на 5 секунд, чтобы убрать остальную одежду)", !"Закрыть", !"");
				}
			}
			
		}
	}	
	
	if(Int_GetPlayerData(playerid, "AutoDrive"))
	{
		if(playertextid == DriveAutoTD[playerid][8] or playertextid == DriveAutoTD[playerid][9])
		{
			new page = Int_GetPlayerData(playerid, "AutoDrive") + (playertextid == DriveAutoTD[playerid][8] ? 1:-1);

			if(page < 1 or page > 10) return false;

			return ShowCarList(playerid, page);
		}
		else if(playertextid == DriveAutoTD[playerid][1])
			return HideMenuDrive(playerid);
		
		else if(playertextid == DriveAutoTD[playerid][7])
		{
			if(!GetPlayerLauncher(playerid))
				return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Чтобы воспользоваться тест-драйвом, вам необходимо зайти с лаунчера ARIZONA GAMES или с мобильного приложения!");

			else if(!GetPlayerLicense(playerid, 0))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас нет лицензии на вождение транспорта.");
			
			else if(auto_drive_select[playerid] == -1)
				return false;
			
			return AutoDriveRent(playerid, auto_drive_select[playerid] + (8 * (Int_GetPlayerData(playerid, "AutoDrive") - 1)));
		}

		for(new i; i < 8; i++)
		{
			if(playertextid == DriveAutoTD_Click[playerid][i])
			{
				if(!(auto_drive_select[playerid] == -1))
					PlayerTextDrawColor(playerid, DriveAutoTD_Click[playerid][auto_drive_select[playerid]], 0xA52A2A59),
					ShowPlayerTD(playerid, DriveAutoTD_Click[playerid][auto_drive_select[playerid]]);

				PlayerTextDrawColor(playerid, DriveAutoTD_Click[playerid][i], 0xA52A2AFF),
				ShowPlayerTD(playerid, DriveAutoTD_Click[playerid][i]);

				return auto_drive_select[playerid] = i;
			}
		}
	}

	if(tradeopen{playerid})
	{
		if(playertextid == TradeTD[playerid][1])
		{
			new target = GetDataTrade(playerid, tradePlayer), slot;

			format(global_str, 1024, "{BEA555}Обмен с игроком %s\n\n{FFFFFF}Вы предлагаете:", PN(target));
			
			for(new idx; idx < 10; idx++)
			{
				slot = TradeInfo[playerid][tradeItem][idx];
				if(slot == -1) continue;
				format(mysql_string, 128, "\n - %s", ItemsInfo[Inventory[playerid][0][slot]][itemName]),
				strcat(global_str, mysql_string);
			}

			strcat(global_str, "\n\n\n\nВам предлагают:");

			for(new idx; idx < 10; idx++)
			{
				slot = TradeInfo[target][tradeItem][idx];
				if(slot == -1) continue;
				format(mysql_string, 128, "\n - %s", ItemsInfo[Inventory[target][0][slot]][itemName]),
				strcat(global_str, mysql_string);
			}

			return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{BFBBBA}Обмен", global_str, !"Выйти", !"");
		}
		else if(playertextid == TradeTD[playerid][3]) return HideTrade(playerid, 1); 

		else if(playertextid == TradeTD[playerid][5])
		{
			if(!IsPlayerOnline(GetDataTrade(playerid, tradePlayer))) return false;

			new target = GetDataTrade(playerid, tradePlayer),
				sender = GetDataTrade(playerid, tradeSendTrade), 
				accept_player = GetDataTrade(playerid, tradeAccept),
				accept_target = GetDataTrade(target, tradeAccept),
				
				sendId_player = GetDataTrade(playerid, tradeSendId),
				sendId_target = GetDataTrade(target, tradeSendId),
				send_player = GetDataTrade(playerid, tradeSEND), 
				send_target = GetDataTrade(target, tradeSEND);
				
			if(accept_player == 2 && accept_target == 2 && sender)
			{
				for(new idx, slot[2], item[2]; idx < 10; idx++)
				{
					slot[0] = TradeInfo[playerid][tradeItem][idx];
					slot[1] = TradeInfo[target][tradeItem][idx];

					if(!(slot[0] == -1))
						item[0] = Inventory[playerid][0][slot[0]],
						AddItem(target, item[0], TradeInfo[playerid][tradeItemCount][idx], Inventory[playerid][2][slot[0]], Inventory[playerid][3][slot[0]], Inventory[playerid][4][slot[0]], Inventory[playerid][5][slot[0]], Inventory[playerid][6][slot[0]], (str_f("%s|%s|%s", InventoryNumber[playerid][0][slot[0]], InventoryNumber[playerid][1][slot[0]], InventoryNumber[playerid][2][slot[0]]))),
						ClearItem(playerid, slot[0], TradeInfo[playerid][tradeItemCount][idx]),
						amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target), ItemsInfo[item[0]][itemName], item[0], TradeInfo[playerid][tradeItemCount][idx]);
					
					if(!(slot[1] == -1))
						item[1] = Inventory[target][0][slot[1]],
						AddItem(playerid, item[1], TradeInfo[target][tradeItemCount][idx], Inventory[target][2][slot[1]], Inventory[target][3][slot[1]], Inventory[target][4][slot[1]], Inventory[target][5][slot[1]], Inventory[target][6][slot[1]], (str_f("%s|%s|%s", InventoryNumber[target][0][slot[1]], InventoryNumber[target][1][slot[1]], InventoryNumber[target][2][slot[1]]))),
						ClearItem(target, slot[1], TradeInfo[target][tradeItemCount][idx]),
						amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[target][pID], PN(target), PI[playerid][pID], PN(playerid), ItemsInfo[item[1]][itemName], item[1], TradeInfo[target][tradeItemCount][idx]);
				}
				
				if(send_player)
				{
					switch sendId_player do
					{
						case 0: 
						{
							if(PI[playerid][pMoney] >= send_player)
								GiveMoney(target, send_player, "передача денежных средств по трейду"),
								GiveMoney(playerid, -send_player, "передача денежных средств по трейду");
						}
						
						case 1:
						{
							if(send_player <= GetCount(playerid, 1080))
							{
								AddItem(target, 1080, send_player);
								DeleteItem(playerid, 1080, send_player);
					
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> EURO в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target), send_player);
							}
						}
						
						case 2:
						{
							if(send_player <= GetCount(playerid, 1811))
							{
								AddItem(target, 1811, send_player);
								DeleteItem(playerid, 1811, send_player);
					
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> BTC в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target), send_player);
							}
						}
					}
				}
				
				if(send_target)
				{
					switch sendId_target do
					{
					
						case 0:
						{
							if(send_target <= PI[target][pMoney])
								GiveMoney(playerid, send_target, "передача денежных средств по трейду"),
								GiveMoney(target, -send_target, "передача денежных средств по трейду");
						}	
						
						case 1:
						{
							if(send_target <= GetCount(target, 1080))
							{
								AddItem(playerid, 1080, send_target);
								DeleteItem(target, 1080, send_target);
							
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> EURO в кол-во %d", 0, "", "", PI[target][pID], PN(target), PI[playerid][pID], PN(playerid), send_target);
							}
						}
						
						case 2:
						{
							if(send_target <= GetCount(target, 1811))
							{
								AddItem(playerid, 1811, send_target);
								DeleteItem(target, 1811, send_target);
							
								amlf("Игрок <a href=../pages/user?id=%d>%s</a> передал <a href=../pages/user?id=%d>%s</a> BTC в кол-во %d", 0, "", "", PI[target][pID], PN(target), PI[playerid][pID], PN(playerid), send_target);
							}
						}
					}
				}

				HideTrade(playerid), HideTrade(target);
				ClearTrade(playerid), ClearTrade(target);
				CancelSelectTextDraw(playerid), CancelSelectTextDraw(target);

				SCM(target, COLOR_GREEN, !"Сделка прошла успешно!"); 
				return SCM(playerid, COLOR_GREEN, !"Сделка прошла успешно!"); 
			}
			else if(accept_player or accept_target)
				return SetDataTrade(playerid, tradeAccept, 2), 
					SCM(target, COLOR_GREY, !"Игрок подтвердил сделку!"),
					SCM(playerid, COLOR_GREY, !"Вы подтвердили сделку!"),
					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{ff0000}Предупреждение!", !"{ffffff}Перед тем как подтвердить сделку, советуем всё тщательно перепроверить.", !"Закрыть", !"");
			
			PlayerTextDrawSetString(playerid, TradeTD[playerid][4], ( !accept_player ? (SettingData[playerid][sdLanguage] ? FixText("ТОРГ"):"TRADE"):(SettingData[playerid][sdLanguage] ? FixText("ПРИНЯТЬ"):"ACCEPT")) );
			PlayerTextDrawColor(playerid, TradeTD[playerid][5], !accept_player ? 0x68BE55FF:0xAAAAAAFF), ShowPlayerTD(playerid, TradeTD[playerid][5]);

			return TradeInfo[playerid][tradeAccept] = !TradeInfo[playerid][tradeAccept];
		}
		else if(playertextid == TradeTD[playerid][15])
			return SPDF(playerid, 8257, DIALOG_STYLE_TABLIST_HEADERS, !"Торговля", "{FFFFFF}Валюта\t{73B461}Баланс\t{cccccc}Комиссия (с варном)\nВвести сумму в валюте $$$$\t{73B461}$%d\t{cccccc}6% (10%)\nВвести сумму в валюте ЕВРО\t{73B461}%d ЕВРО\t{cccccc}3% (5%)\nВвести сумму в валюте BTC\t{73B461}%d BTC\t{cccccc}0% (0%)", !"Выбрать", !"Отмена", PI[playerid][pMoney], GetCount(playerid, 1080), GetCount(playerid, 1811));
	
			
		for(new i; i < 20; i++)
		{
			if(playertextid == KletkaTrade[playerid][i])
			{
				new slot;
				switch i do
				{
					case 0..9:
					{
						if(!IsPlayerOnline(GetDataTrade(playerid, tradePlayer)) or GetDataTrade(GetDataTrade(playerid, tradePlayer), tradeAccept) or GetDataTrade(playerid, tradeAccept)) return false;

						slot = TradeInfo[playerid][tradeItem][i];
						if(slot == -1) return false;

						InventSlotUse[playerid][slot] = false;
						InventSlotUpdate(playerid, GetInvID(playerid, slot, 1), slot);

						TradeInfo[playerid][tradeItem][i] =
						TradeInfo[playerid][tradeItemCount][i] = -1;

						return TradeSlotUpdate(playerid, i, 0, 0);
					}
					case 10..19:
					{
						new target = GetDataTrade(playerid, tradePlayer);
						slot = TradeInfo[target][tradeItem][i-10];
						GetItemInfo(playerid, 0, slot, false, target);
					}
				}
			}
		}
	}

	if(playertextid == InvBorderTD[playerid][3]) CancelSelectTextDraw(playerid);
	else if(GetInventoryType(playerid, E_INVENTORY_TYPE_PLAYER)) 
	{
		if(playertextid == InvBorderTD[playerid][1])
		{
			if(Int_GetPlayerData(playerid, "CortTimer") > Global_Time) return false;

			for(new s; s < PI[playerid][pInvCell]; s++)
			{
				for(new j; j < PI[playerid][pInvCell]; j++)
				{
					if(Inventory[playerid][0][j] > Inventory[playerid][0][s] && Inventory[playerid][0][s])
						ChangeItemPos(playerid, s, j);

					else if(Inventory[playerid][0][s] && !Inventory[playerid][0][j])
						ChangeItemPos(playerid, s, j);
				}
			}
			
			for(new s; s < PI[playerid][pInvCell]; s++)
			{
				if(Inventory[playerid][0][s] == 569)
					ChangeItemPos(playerid, 0, s);
			}
			
			SelectPage(playerid, PI[playerid][pInvPage]);
			SetPVarInt(playerid, "CortTimer", Global_Time + 5);
		}
	}
	//
	if(InventoryOpen{playerid} || tradeopen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") || craftopen{playerid} || Int_GetPlayerData(playerid,"BoomOPEN"))
	{
		for(new i; i < 94; i++)
		{
			if(i < 11)
			{
				if(playertextid == CraftColor[playerid][i])
				{
					for(new q; q < 11; q++) DestroyPlayerTD(playerid, CraftColor[playerid][q]);
					new color;
					switch(i)
					{
						case 1: color =0xCC2426FF;
						case 2: color =0xCC7824FF;
						case 3: color =0xE6BC1EFF;
						case 4: color =0xD5D73CFF;
						case 5: color =0x3CD740FF;
						case 6: color =0x3CD7D7FF;
						case 7: color =0x3C3ED7FF;
						case 8: color =0xD73CD4FF;
						case 9: color =0xD73C7EFF;
					}
				
					CraftSuper[playerid][1] = CreatePlayerTextDraw(playerid, 334.000000, 232.079178, "LD_SPAC:white");
					PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][1], 0.480000, 1.120000);
					PlayerTextDrawTextSize(playerid, CraftSuper[playerid][1], 37.000000, 15.145828);
					PlayerTextDrawAlignment(playerid, CraftSuper[playerid][1], 1);
					PlayerTextDrawColor(playerid, CraftSuper[playerid][1], 0x1C1F21FF);
					PlayerTextDrawUseBox(playerid, CraftSuper[playerid][1], 0);
					PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][1], 0xFFFFFFFF80808080);
					PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][1], 2);
					PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][1], 0);
					PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][1], 0x000000FF);
					PlayerTextDrawFont(playerid, CraftSuper[playerid][1], 4);
					PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][1], 1);
					PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][1], 1);

					CraftSuper[playerid][0] = CreatePlayerTextDraw(playerid, 352.500000, 236.477921, "SELECT COLOR");
					PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][0], 0.107949, 0.634835);
					PlayerTextDrawTextSize(playerid, CraftSuper[playerid][0], 1280.000000, 1280.000000);
					PlayerTextDrawAlignment(playerid, CraftSuper[playerid][0], 2);
					PlayerTextDrawColor(playerid, CraftSuper[playerid][0], 0xFFFFFFFFFFFFFFFF);
					PlayerTextDrawUseBox(playerid, CraftSuper[playerid][0], 0);
					PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][0], 0xFFFFFFFF80808080);
					PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][0], 0);
					PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][0], 0);
					PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][0], 0x00000000);
					PlayerTextDrawFont(playerid, CraftSuper[playerid][0], 2);
					PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][0], 1);
					PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][0], 0);
					
					DestroyPlayerTD(playerid, CraftColor[playerid][11]);
					CraftColor[playerid][11] = CreatePlayerTextDraw(playerid, 289.174988, 203.850006, "usebox");
					PlayerTextDrawLetterSize(playerid, CraftColor[playerid][11], 0.000000, 0.185949);
					PlayerTextDrawTextSize(playerid, CraftColor[playerid][11], 282.390625, 0.000000);
					PlayerTextDrawAlignment(playerid, CraftColor[playerid][11], 1);
					PlayerTextDrawColor(playerid, CraftColor[playerid][11], 0xFFFFFFFFE1E1E1FF);
					PlayerTextDrawUseBox(playerid, CraftColor[playerid][11], 1);
					PlayerTextDrawBoxColor(playerid, CraftColor[playerid][11], color);
					PlayerTextDrawSetShadow(playerid, CraftColor[playerid][11], 2);
					PlayerTextDrawSetOutline(playerid, CraftColor[playerid][11], 0);
					PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][11], 0x000000FF);
					PlayerTextDrawFont(playerid, CraftColor[playerid][11], 0);
					PlayerTextDrawSetProportional(playerid, CraftColor[playerid][11], 1);
					PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][11], 0);

					ShowPlayerTD(playerid, CraftColor[playerid][11]);
					ShowPlayerTD(playerid, CraftSuper[playerid][1]);
					ShowPlayerTD(playerid, CraftSuper[playerid][0]);
					SetPVarInt(playerid, "CraftColor", i);
					break;
				}
			}
			if(i < 37)
			{
				if(playertextid == CraftSuper[playerid][i])
					SCMF(playerid, -1, "clickTD: %i", i);
				/*{
					switch(i)
					{
						case 1:
						{
							if(!CraftInfo[Int_GetPlayerData(playerid, "CraftSelect")][craftColor][0]) return SCM(playerid, COLOR_GREY, "Выбор цвета для этого аксессуара временно недоступен.");
							AddSelectCraftColor(playerid);
						}
						case 2:
						{
							if(!CraftInfo[Int_GetPlayerData(playerid, "CraftSelect")][craftAksID]) return 1;
							GetItemInfo(playerid, -1, 0, false, CraftInfo[Int_GetPlayerData(playerid, "CraftSelect")][craftAksID]);
						}
						case 25:
						{
							if(Int_GetPlayerData(playerid, "CraftPage") == Int_GetPlayerData(playerid, "CraftMaxPage")) return 0;
							SetPVarInt(playerid, "CraftPage", Int_GetPlayerData(playerid, "CraftPage")+1);
							UpdateMenuCraft(playerid);
						}
						case 27:
						{
							if(Int_GetPlayerData(playerid, "CraftPage") == 1) return 0;
							SetPVarInt(playerid, "CraftPage", Int_GetPlayerData(playerid, "CraftPage")-1);
							UpdateMenuCraft(playerid);
						}
						case 29..33:
						{
							switch(i)
							{
								case 33: global_str = "Accessory", SetPVarInt(playerid, "CraftMaxPage", 7);
								case 32: global_str = "Clothes", SetPVarInt(playerid, "CraftMaxPage", 6);
								case 31: global_str = "Chemistry", SetPVarInt(playerid, "CraftMaxPage", 2);
								case 30: global_str = "Working", SetPVarInt(playerid, "CraftMaxPage", 1);
								case 29: global_str = "Tuning", SetPVarInt(playerid, "CraftMaxPage", 7);
							}
							SetPVarString(playerid, "CraftType", global_str), SetPVarInt(playerid, "CraftPage", 1);
							UpdateMenuCraft(playerid);
						}
						case 3: return DelCraft(playerid);
						case 8:
						{
							if(Int_GetPlayerData(playerid, "CraftScore") == 10) return 0;
							SetPVarInt(playerid, "CraftScore", Int_GetPlayerData(playerid, "CraftScore")+1);
							UpdateCraftCounts(playerid);
							SetInfoCraftPlayer(playerid);
							return 1;
						}
						case 9: SPD(playerid, 3771, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите изготовить", "Выбрать", "Отмена");
						case 11:
						{
							if(Int_GetPlayerData(playerid, "CraftScore") == 1) return 0;
							SetPVarInt(playerid, "CraftScore", Int_GetPlayerData(playerid, "CraftScore")-1);
							UpdateCraftCounts(playerid);
							SetInfoCraftPlayer(playerid);
							return 1;
						}
					}
				}
				if(i < 5)
				{
					if(playertextid == CraftNeedTD[playerid][i])
					{
						if(!CraftInfo[Int_GetPlayerData(playerid, "CraftSelect")][craftNeed][i]) return 1;
						GetItemInfo(playerid, -1, 0, false, CraftInfo[Int_GetPlayerData(playerid, "CraftSelect")][craftNeed][i]);
						break;
					}
				}*/
			}
			if(i < 35) 
			{
				if(i == 8 or i == 9)
					if(playertextid == CarInvTextDraws[playerid][i])
						SetPVarInt(playerid, "slotId", 21+(i-8)), ChangeModificationCar(playerid);

				if(playertextid == InvTextDraws[playerid][i])
				{
					if(Int_GetPlayerData(playerid, "DialogOpen")) return 0;
					PlayerPlaySound(playerid, 6801, 0, 0, 0);
					switch i do
					{
						case 0: callcmd::showpass(playerid, IntToStr(playerid));
						case 2:
						{
							if(IsPlayerInHisVehicle(playerid))
								return SetPVarInt(playerid, "slotId", 20), ChangeModificationCar(playerid);
								
							if(PickInvent[playerid] != InventoryMaxSlot+1 && !IsASkinInv(Inventory[playerid][0][PickInvent[playerid]])) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Сюда можно поместить только скин"), HideInventMenuTD(playerid), ColorSlotReset(playerid), PickInvent[playerid] = InventoryMaxSlot+1;
							else if(TeamDuty{playerid} or InJob[playerid] or PI[playerid][pDemorgan]) SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эту одежду нельзя снимать!");
							else if(timeskin[playerid] == -2 || (PlayerModification[playerid] && PickInvent[playerid] == InventoryMaxSlot+1)) ChangeModification(playerid);
							else if(GetInvSet(playerid) >= PI[playerid][pInvCell]) SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно места в инвентаре чтобы снять одежду.");		
							else if(!(PI[playerid][pSkin][0] == 18))
							{
								if(timeskin[playerid] == 1) ChangeInventorySkin(playerid);
								else ShowInventMenuTD(playerid, GetSkinInfo(PI[playerid][pSkin][0], 1), 1, 1, InvTextDraws[playerid][2], InventoryMaxSlot-1);
								PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0), timeskin[playerid] = 0;
							}

							InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
						}
						case 6: callcmd::rewards(playerid);
						//case 9: callcmd::quest(playerid);
						case 15: HideInvent(playerid), callcmd::fammenu(playerid);
						case 17: callcmd::donate(playerid);
						case 19: callcmd::bizinfo(playerid);
						case 21: callcmd::cars(playerid);
						case 23: ShowUpdateSettings(playerid);
						case 25: callcmd::menu(playerid);
						case 28: callcmd::gps(playerid);
						case 30: callcmd::report(playerid);
						case 32: callcmd::help(playerid);
					}
					break;
				}
			}
			if(i < 6)
			{
				if(playertextid == OtherInvBox[playerid][i])
				{
					if(HouseEntered[playerid] != -1)
						{ if(i != 12 && i != 1) if(!GetString(HouseInfo[HouseEntered[playerid]][hOwner], PN(playerid))) return 0; }

					else if(musorka[playerid] == -1 && !(Int_GetPlayerData(playerid, "OtherInventOpen") == 3)) return false;

					switch i do
					{
						case 1: OtherInvClose(playerid), ShowInvent(playerid);
						//case 12: OtherInvClose(playerid), CancelSelectTextDraw(playerid);
						case 2: SPD(playerid, 8245, DIALOG_STYLE_LIST, "", "Выберите действие\n{67B355}Положить\n{B35555}Снять", "Выбрать", "Отмена");
					}
					break;
				}
				else if(!(Int_GetPlayerData(playerid, "OtherInventOpen") == 4) && playertextid == OtherInvPageTD[playerid][i] or Int_GetPlayerData(playerid, "OtherInventOpen") == 4 && (playertextid == OtherInvPageTD[playerid][1] or playertextid == OtherInvPageTD[playerid][3]) && !(Int_GetPlayerData(playerid, "OtherInventOpen") == 5))
				{
                    if(!(Int_GetPlayerData(playerid, "OtherInventOpen") == 4) && !(Int_GetPlayerData(playerid, "OtherInventOpen") == 5)) 
                    {
                        for(new s; s < 5; s++)
                        {
                            PlayerTextDrawHide(playerid, OtherInvPageTD[playerid][s]);
                            PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][s], i == s ? InventColor[PI[playerid][pInvColors]][1]:0x333333FF);
                            PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][s], s == i ? 0:1);
                            ShowPlayerTD(playerid, OtherInvPageTD[playerid][s]);
                        }
                    }
                    else if(!(Int_GetPlayerData(playerid, "OtherInventOpen") == 5))
                    {
                        if(playertextid == OtherInvPageTD[playerid][1] && Int_GetPlayerData(playerid, "OtherInventPage") > 0)
                            i = Int_GetPlayerData(playerid, "OtherInventPage") - 1;

                        else if(playertextid == OtherInvPageTD[playerid][3] && Int_GetPlayerData(playerid, "OtherInventPage") < 10)
                            i = Int_GetPlayerData(playerid, "OtherInventPage") + 1;
                    }

                    InventSlotOtherUpdate(playerid, 0, -1, 1, i, -1);
					break;
				}
			}
			if( i < 13)
			{
				if(playertextid == BitCard[playerid][i])
				{
					new idcard = Int_GetPlayerData(playerid,"CardMasiveSelect"),stolid = Int_GetPlayerData(playerid,"StolCard"),kolvo;
					switch(i)
					{
						case 0..6:
						{
							if(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]] != playerid) return 1;
							if(!StolInfo[stolid][stolBitCard][i] || StolInfo[stolid][stolBitCard][i+6]) return 1;
							if(!CardMasive[playerid][idcard]) return 1;
							if(GetString(CardInfo[CardMasive[playerid][idcard]][cardMast],CardInfo[StolInfo[stolid][stolKoriz]][cardMast]))
							{
								if(GetString(CardInfo[StolInfo[stolid][stolBitCard][i]][cardMast],CardInfo[StolInfo[stolid][stolKoriz]][cardMast]) &&
								CardInfo[StolInfo[stolid][stolBitCard][i]][cardValue] >= CardInfo[CardMasive[playerid][idcard]][cardValue]) return 1;
							}
							else
							{
								if(GetString(CardInfo[StolInfo[stolid][stolBitCard][i]][cardMast],CardInfo[StolInfo[stolid][stolKoriz]][cardMast])) return 1;
								if(!GetString(CardInfo[StolInfo[stolid][stolBitCard][i]][cardMast],CardInfo[CardMasive[playerid][idcard]][cardMast])) return 1;
								if(CardInfo[CardMasive[playerid][idcard]][cardValue] < CardInfo[StolInfo[stolid][stolBitCard][i]][cardValue]) return 1;
							}
							StolInfo[stolid][stolBitCard][i+6] = CardMasive[playerid][idcard];
							CardMasive[playerid][idcard] = 0;
							DeletePVar(playerid,"CardMasiveSelect");
						}
						case 12:
						{
							if(!StolInfo[stolid][stolBitCard][0]) return 1;
							if(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]] == playerid)
							{
								for(new h; h != 12; h++)
								{
									if(StolInfo[stolid][stolBitCard][h])
									{
										for(new k; k != 36; k++)
										{
											if(!CardMasive[playerid][k])
											{
												CardMasive[playerid][k] = StolInfo[stolid][stolBitCard][h];
												StolInfo[stolid][stolBitCard][h] = 0;
												break;
											}
										}
									}
								}
								f(global_str, 200 ,"{fa7f7f}[Игра]{FFFFFF} %s затянул, ход переходит к %s",
								PN(playerid),
								PN(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolXod]]));
								for(new k; k != StolInfo[stolid][stolPlayers]; k++)
								{
									if(StolInfo[stolid][stolPlayer][k] != INVALID_PLAYER_ID) SCM(StolInfo[stolid][stolPlayer][k], -1, global_str);
								}
								//
								StolInfo[stolid][stolXod]++;
								if(StolInfo[stolid][stolXod] >= StolInfo[stolid][stolPlayers]) StolInfo[stolid][stolXod] = 0;

								StolInfo[stolid][stolBit] = StolInfo[stolid][stolXod]+2;
								if(StolInfo[stolid][stolBit] >= StolInfo[stolid][stolPlayers]) StolInfo[stolid][stolBit] = 0;

								StolInfo[stolid][stolTime] = 60;
								//
							}
							else
							{
								new id;
								for(new d; d != StolInfo[stolid][stolPlayers]; d++)
								{
									if(StolInfo[stolid][stolPlayer] != playerid) continue;
									id = d;
								}
								StolInfo[stolid][stolAcceptBit][id] = 1;
								for(new d; d != StolInfo[stolid][stolPlayers]; d++)
								{
									if(StolInfo[stolid][stolAcceptBit][d]) kolvo++;
								}
								if(StolInfo[stolid][stolPlayers] == 2) id = 1;
								else id = StolInfo[stolid][stolPlayers]-1;
								if(kolvo == id)
								{
									f(global_str,150,"{fa7f7f}[Игра]{FFFFFF} %s отбился.",
									PN(playerid),
									PN(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolXod]]));
									//
									for(new k; k != StolInfo[stolid][stolPlayers]; k++)
									{
										if(StolInfo[stolid][stolPlayer][k] != INVALID_PLAYER_ID)
										{
											for(new h; h != 36; h++)
											{
												if(CardMasive[StolInfo[stolid][stolPlayer][k]][h]) kolvo++;
											}
											if(kolvo < 6){
											kolvo = 6-kolvo;
											SetPVarInt(StolInfo[stolid][stolPlayer][k],"MaxCards",kolvo);
											CardAddForPlayer(StolInfo[stolid][stolPlayer][k]);}
											SCM(StolInfo[stolid][stolPlayer][k], -1, global_str);
										}
										StolInfo[stolid][stolAcceptBit][k] = 0;
									}
									//
									for(new h; h != 12; h++) StolInfo[stolid][stolBitCard][h] = 0;
									//
									StolInfo[stolid][stolXod]++;
									if(StolInfo[stolid][stolXod] >= StolInfo[stolid][stolPlayers]) StolInfo[stolid][stolXod] = 0;

									StolInfo[stolid][stolBit] = StolInfo[stolid][stolXod]+1;
									if(StolInfo[stolid][stolBit] >= StolInfo[stolid][stolPlayers]) StolInfo[stolid][stolBit] = 0;

									StolInfo[stolid][stolTime] = 60;
								}
							}
						}
					}
					ResetCard(stolid);
					DestroyPlayerTD(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]], BitCard[StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]]][12]);
					break;
				}
			}
			if( i < 36 )
			{
				if(playertextid == DurakTD[playerid][i])
				{
					new stolid = Int_GetPlayerData(playerid,"StolCard"),check;
					if(!CardMasive[playerid][i]) return 1;
					if(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolXod]] != playerid && StolInfo[stolid][stolBitCard][0] == 0) return 1;
					else if(StolInfo[stolid][stolPlayer][StolInfo[stolid][stolBit]] == playerid)
					{
						SetPVarInt(playerid,"CardMasiveSelect",i);
						return 1;
					}
					else
					{
						for(new Z; Z < 6; Z++)
						{
							if(StolInfo[stolid][stolBitCard][Z]) continue;
							if(StolInfo[stolid][stolBitCard][0])
							{
								for(new h; h != 12; h++)
								{
									if(CardInfo[StolInfo[stolid][stolBitCard][h]][cardValue] == CardInfo[CardMasive[playerid][i]][cardValue]) check++;
								}
								if(!check) return 1;
							}
							StolInfo[stolid][stolBitCard][Z] = CardMasive[playerid][i];
							CardMasive[playerid][i] = 0;
							break;
						}
					}
					ResetCard(stolid);
					break;
				}
			}
		}
	}
	if(playertextid == InvBorderTD[playerid][7])
	{
		if(HouseEntered[playerid]+50 == GetPlayerVirtualWorld(playerid)) HideInventoryPage(playerid), OtherInvOpen(playerid, 1, 0.0, 0.0, HouseEntered[playerid]);
		else if(musorka[playerid] != -1) HideInventoryPage(playerid), OtherInvOpen(playerid, 2, 0.0, 0.0, musorka[playerid]);
		else if(!(pTemp[playerid][pCentralMarketId][1] == -1) && shopopen{playerid}) 
		{
			pTemp[playerid][pCentralMarketSelectId] = !pTemp[playerid][pCentralMarketSelectId];
			SCM(playerid, -1, "изменение переменой++");
			DestroyShopTD(playerid, false); 
			SCM(playerid, -1, "дестрой шопа++");
			CreateShopTD(playerid, 100);
			SCM(playerid, -1, "открытие шопа++");
		}
		else 
		{
			if(bodyguardTDOpen{playerid})
				return CloseBodyguardTD(playerid), HideInvent(playerid), ShowInvent(playerid);

			else if(IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COLOR_OLDRED, "[Ошибка] {ffffff}Вы не можете воспользоваться спутником находясь в машине!");

			ShowBodyguardTD(playerid, 462.401703, 101.500000);
		}
	}
	// carft
	for(new i; i < 10; i++)
	{
		if(playertextid == CraftMenuText[playerid][i])
		{
			if(!CraftInfo[CraftMassive[playerid][i]][craftAksID]) return SCM(playerid, COLOR_OLDRED,"[Информация]{FFFFFF} Крафт данного предмета временно отключен администрацией.");
			SetPVarInt(playerid, "CraftSelect", CraftMassive[playerid][i]);
			UpdateMenuCraft(playerid);
			SetInfoCraftPlayer(playerid);
			break;
		}
		if( i < 6)
		{
			new num;
			switch(i)
			{
				case 0: num = 19;
				case 1: num = 33;
				case 2: num = 35;
				case 3: num = 46;
				case 4: num = 60;
				case 5: num = 62;
			}
			if(playertextid == ContPrize[playerid][num])
			{
				static header[100];
				switch(num)
				{
					case 19: num = 0;
					case 33: num = 1;
					case 35: num = 2;
					case 46: num = 3;
					case 60: num = 4;
					case 62: num = 5;
				}
				for(new id; id < MAX_CONTAINERS; id++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.0, ContainerInfo[id][cPrizeX],ContainerInfo[id][cPrizeY],ContainerInfo[id][cPrizeZ]) && GetString(ContainerInfo[id][cOwned],PN(playerid)) && ContainerInfo[id][cStatus] == 2)
					{
						if(ContMasTake[id][num])
							SCM(playerid, COLOR_VALIK, "[Container-System]{FFFFFF} Вы уже забрали данный приз!");
						else
						{
							f(header,sizeof(header),"{E98E52}%s: {FFFFFF}({E98E52}%s{FFFEFF}) | {BE2D2D}Контейнер",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass]);
							f(global_str, 300,"\
							{FFFFFF}%s\n\
							{FFFFFF}%s\n\n\
							{FFFFFF} Вы действительно хотите {73B461}забрать{FFFFFF} данный предмет?\n\n\
							 ",
							ItemsInfo[ContMas[id][num]][itemName],
							GetItemStory(playerid, ContMas[id][num]));
							SetPVarInt(playerid,"PrizeMasI",num);
							SetPVarInt(playerid,"PrizeMasID",id);
							SPD(playerid, 4451, 0, header, global_str, "»","x");
						}
					}
				}
				break;
			}
		}
	}
	// Смена страницы
	if(InventoryOpen{playerid} || EnchantWork{playerid} || tradeopen{playerid} || shopopen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") || ChangeColor{playerid})
			for(new i; i < 5; i++) if(playertextid == InvPageTD[playerid][i])
					{ SelectPage(playerid, i); return PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0); }

	if(GetPlayerInterior(playerid) == 7 && EnchantWork{playerid})
	{
		new item = EnchantWorkItem[playerid][0] - 1, kamen = EnchantWorkItem[playerid][1] - 1;
		
		if(playertextid == EnchantWorkTD[playerid][11]) DestroyEnchantWork(playerid);
		else if(playertextid == EnchantWorkTD[playerid][4]) SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Улучшение Аксессуаров и одежды:\nДля улучшения предметов, вам необходимы {FF9D41}точильные камни{FFFFFF}, найти их\nможно на семейном мероприятии - Зловещий дворец ({C64545}/GPS - Мероприятия{FFFFFF})\nили приобрести в игровом магазине или на центральном рынке.\n\nУлучшение предметов даст возможность вашему персонажу получить\nспециальные характеристики: {FF9D41}Урон, Защита, Удача и Восстановление.{FFFFFF}\nЭти характеристики появляются после улучшения аксессуара (от +4).\nМаксимальный уровень улучшения - {FF9D41}13{FFFFFF}! \n\nЕсли ваш персонаж будет одет в аксессуары, которые вместе имеют от {FF9D41}+50{FFFFFF} улучшений, вы начнёте \nсветиться специальной аурой, которая отобразит ваш достаток.\n\nЕсли все аксессуары вместе имеют от {FF9D41}+100{FFFFFF} улучшений, то на вас появится магическая сфера\n\nТак-же в инвентаре будет отображаться уровень улучшения каждого аксессуара!", !"Выход", !"");
		else if(playertextid == EnchantWorkTD[playerid][13] && EnchantWorkProgress[playerid] < 50)
		{
			if(item < 0 || !IsAAks(Inventory[playerid][0][item])) 
				return false;
			
			else if(kamen < 0 or !(Inventory[playerid][0][kamen] == 1187) && !(Inventory[playerid][0][kamen] == 1420))
				return false;

			new biz = BizEntered[playerid];
			
			if(biz == -1) return false;
			
			if(PI[playerid][pMoney] < BizData[biz][bItem][0]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
			GiveMoney(playerid, -BizData[biz][bItem][0], "улучшение предмета в мастерской");
			GiveBizMoney(biz, BizData[biz][bItem][0]);

			if(EnchantWorkProgress[playerid])
				EnchantWorkProgress[playerid] = 0,
				KillTimer(EnchantTimer[playerid]),
				PlayerTextDrawSetString(playerid, EnchantWorkTD[playerid][12], SettingData[playerid][sdLanguage] ? (FixText("ЗАТОЧИТЬ")) : ("ENCHANT")),
				PlayerTextDrawTextSize(playerid, EnchantWorkTD[playerid][18], 0.0, 6.469632),
				ShowPlayerTD(playerid, EnchantWorkTD[playerid][18]);
			else 
				EnchantWorkProgress[playerid] = 1,
				EnchantTimer[playerid] = CallTimeOutFunction("UpdateEnchant", 100, 1, "ddd", playerid, item, kamen),
				PlayerTextDrawSetString(playerid, EnchantWorkTD[playerid][12], SettingData[playerid][sdLanguage] ? (FixText("ОТМЕНИТЬ")) : ("UNDO"));
		}
		else if(playertextid == EnchantWorkTD[playerid][0] && !EnchantWorkProgress[playerid] && item >= 0)
		{
			new id = GetInvID(playerid, item, 1);
			EnchantWorkItem[playerid][0] = 
			InventSlotUse[playerid][item] = false;
			PlayerTextDrawColor(playerid, Kletka[playerid][id], 0xFFFFFFFF);
			InventSlotUpdate(playerid, id, item);
			UpdateEnchantWork(playerid);
		}
		else if(playertextid == EnchantWorkTD[playerid][1] && !EnchantWorkProgress[playerid] && kamen >= 0)
		{
			new id = GetInvID(playerid, kamen, 1);
			EnchantWorkItem[playerid][1] = 
			InventSlotUse[playerid][kamen] = false;
			PlayerTextDrawColor(playerid, Kletka[playerid][id], 0xFFFFFFFF);
			InventSlotUpdate(playerid, id, kamen);
			UpdateEnchantWork(playerid);
		}
	}
	
	if(shopopen{playerid})
	{
		for(new i; i < 30; i++)
		{
            if(playertextid == OtherKletka[playerid][i])
			{
                new 
                    value = Int_GetPlayerData(playerid, "ShopMas"), 
                    crId = pTemp[playerid][pCentralMarketId][1], 
                    slotId = i+30*Int_GetPlayerData(playerid, "ShopPage"), 
                    item = (value == 100 ? CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][1][slotId] : ShopData[value][shopItem][slotId]), 
                    count = (value == 100 ? CentralMarketItems[crId][pTemp[playerid][pCentralMarketSelectId]][3][slotId] : ItemsInfo[ShopData[value][shopItem][slotId]][itemStack]);

                if(value != 100)
                {
                    switch(item)
                    {
                        case 517, 519, 548, 558, 560, 561, 562, 563, 676, 1072, 1073, 1074:
                            count = ItemsInfo[item][itemStack];

                        default: 
                            count = 1;
                    }
                }

                f(global_str, sizeof(global_str), "\
                    %s\n\
                    {67BE55}\n%s: %i шт.\n\
                    %sСтоимость: %s за 1 шт.%s", \
                GetItemInfoEx(playerid, value == 100 ? 6 : 2, slotId, value == 100 ? crId : item), \
                value == 100 && pTemp[playerid][pCentralMarketSelectId] == 1 ? "Игрок покупает" : "В наличии", \
                count, \
                value == 100 && pTemp[playerid][pCentralMarketSelectId] == 1 ? (str_f("У вас в наличии: %i шт.\n", GetCount(playerid, item))) : "\n", \
				GetShopCost(slotId, value, value == 100 ? crId : BizEntered[playerid], true, playerid), \
                GetCount(playerid, item) > 1 ? (str_f("\n\n{FFFFFF}Введите какое количество вы хотите %s", value == 100 && pTemp[playerid][pCentralMarketSelectId] == 1 ? "BEBB55}ПРОДАТЬ:" : "{555ABE}КУПИТЬ:\n\n{ff0000}Примечание:\n{2E9AFE}Ваших денег хватит на 0 ед. товара.")) : "");

                spdList(playerid, 0, slotId); 
                SPD(playerid, 3082, value == 100 && pTemp[playerid][pCentralMarketSelectId] == 1 && GetCount(playerid, item) > 1 or count > 1 ? DIALOG_STYLE_INPUT : DIALOG_STYLE_MSGBOX, value == 100 && pTemp[playerid][pCentralMarketSelectId] == 1 ? "Продажа предмета" : "Покупка предмета", global_str, value == 100 && pTemp[playerid][pCentralMarketSelectId] == 1 ? "Продать" : "Купить", "Отмена");
				break;
            }
		}
		if(playertextid == ShopTD[playerid][2])
		{
			if(Int_GetPlayerData(playerid, "ShopMas") < 4 || Int_GetPlayerData(playerid, "ShopPage") >= 3) return 0;
			SetPVarInt(playerid, "ShopPage", Int_GetPlayerData(playerid, "ShopPage")+1);
			valstr(global_str, Int_GetPlayerData(playerid, "ShopPage")+1);
			PlayerTextDrawSetString(playerid, ShopTD[playerid][0], global_str);
			CreateSlotShop(playerid, Int_GetPlayerData(playerid, "ShopMas"), Int_GetPlayerData(playerid, "ShopPage"));
		}
		else if(playertextid == ShopTD[playerid][4])
		{
			if(!Int_GetPlayerData(playerid, "ShopPage")) return 0;
			SetPVarInt(playerid, "ShopPage", Int_GetPlayerData(playerid, "ShopPage")-1);
			valstr(global_str, Int_GetPlayerData(playerid, "ShopPage")+1);
			PlayerTextDrawSetString(playerid, ShopTD[playerid][0], global_str);
			CreateSlotShop(playerid, Int_GetPlayerData(playerid, "ShopMas"), Int_GetPlayerData(playerid, "ShopPage"));
		}
	}

	if(FamilyOpen{playerid})
	{

		for(new i; i < 93; i++)
		{
			if(!(playertextid == FamMenu[playerid][i])) continue;

			switch i do
			{
				case 88,86,85,82,69,67,65,66,64,62,70..81,49,3..47: ApplyFamilyFunction(playerid, i);
				default: SCMF(playerid, -1, "%d", i);
			}
		}
	}

	if(GetPlayerState(playerid) == 2 && KindFuel[playerid] != -1)
	{
		if(playertextid == FillUp[playerid][2])
		{
			KindFuel[playerid] = -1;
			CountFuel[playerid] = 0.0;
			HideFuelTD(playerid);
			SCM(playerid, COLOR_GREY, !"Вы отказались заправляться.");
			GameTextForPlayer(playerid,"~w~",1,3);
			TogglePlayerControllable(playerid, true);
			CancelSelectTextDraw(playerid);
		}
		else if(playertextid == FillUp[playerid][1])
		{
			if(CountFuel[playerid] > 0.0)
			{
				global_str = "";
				new vehicleid = GetPlayerVehicleID(playerid),
					fuelid = PlayerFuel[playerid],
					bizid = GoFuel[fuelid][gfBizzID],
					Float:cost = BizData[bizid][bEnterPrice],
					price = floatround( cost * CountFuel[playerid], floatround_floor );

				if(PI[playerid][pMoney] >= price)
				{
					if(KindFuel[playerid] == GetVehicleKindFuel(vehicleid))
					{
						BeforeFill[vehicleid] = 0;
						GameTextForPlayer(playerid,"~w~",1,3);
						f(global_str, 125, "* Транспортное средство заправляется (( %s ))", PN(playerid));
						ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
						CallTimeOutFunction("Fillup",1000,false,"idf", playerid, vehicleid, CountFuel[playerid]);
						SetEngineStatus(vehicleid, false, -1);
						GiveMoney(playerid, - price);
						CancelSelectTextDraw(playerid);
						if(!GetString(BizData[bizid][bOwner],"The State"))
						{
							GiveBizMoney(bizid,price);
							BizData[bizid][bProducts] -= floatround(CountFuel[playerid]);
							SaveBusiness(bizid);
						}
						HideFuelTD(playerid);
						PlayerFuel[playerid] = -1;
						KindFuel[playerid] = -1;
						CountFuel[playerid] = 0.0;
						UpdateFuels(bizid);
					}
					else SCM(playerid, COLOR_GREY, !"Данный тип топлива не подходит для вашего транспорта.");
				}
				else
				{
					f(global_str, 125, "Заправка стоит $%d, а у вас только $%d", price, PI[playerid][pMoney]);
					SCM(playerid, COLOR_GREY, global_str);
				}
			}
			else SCM(playerid, COLOR_GREY, !"Не менее 1 литра.");
		}
		else if(playertextid == FillUp[playerid][33])
		{
			new vehicleid = GetPlayerVehicleID(playerid),
				fuelid = PlayerFuel[playerid],
				bizid = GoFuel[fuelid][gfBizzID],
				Float:cost = BizData[bizid][bEnterPrice],
				Float:fuel = 100.0 - Fuel[vehicleid];

			CountFuel[playerid] = fuel;
			PlayerTextDrawHide(playerid, FillUp[playerid][0]);
			PlayerTextDrawTextSize(playerid, FillUp[playerid][0], 242.966599+1.55*floatround(fuel), 0.000000);
			ShowPlayerTD(playerid, FillUp[playerid][0]);
			global_str = "";
			f(global_str, 15, "$%d", floatround( cost * CountFuel[playerid], floatround_floor ));
			PlayerTextDrawSetString(playerid, FillUp[playerid][33], global_str);
		}
		else if(playertextid == FillUp[playerid][14])
		{
		    new carid = GetPlayerVehicleID(playerid);
			if(KindFuel[playerid] < sizeof(FuelName) - 1) KindFuel[playerid] ++;
			else KindFuel[playerid] = 0;
			new kind = KindFuel[playerid];
			if(kind == GetVehicleKindFuel(carid)) GameTextForPlayer(playerid,"~w~",1,3);
			else GameTextForPlayer(playerid,"~w~This type of fuel ~r~ is not suitable~w~~n~ for your vehicles!",10000,4);
		    PlayerTextDrawSetString(playerid, FillUp[playerid][31], FuelName[kind]);
		}
		else if(playertextid == FillUp[playerid][15])
		{
		    new carid = GetPlayerVehicleID(playerid);
			if(KindFuel[playerid] > 0) KindFuel[playerid] --;
			else KindFuel[playerid] = sizeof(FuelName) - 1;
			new kind = KindFuel[playerid];
			if(kind == GetVehicleKindFuel(carid)) GameTextForPlayer(playerid,"~w~",1,3);
			else GameTextForPlayer(playerid,"~w~This type of fuel ~r~ is not suitable~w~~n~ for your vehicles!",10000,4);
		    PlayerTextDrawSetString(playerid, FillUp[playerid][31], FuelName[kind]);
		}
		else if(playertextid == FillUp[playerid][10])
		{
			if(CountFuel[playerid] < 100.0 - Fuel[GetPlayerVehicleID(playerid)])
		    {
				CountFuel[playerid] += 1.0;

				new fuelid = PlayerFuel[playerid],
					bizid = GoFuel[fuelid][gfBizzID],
					Float:cost = BizData[bizid][bEnterPrice],
					price = floatround( cost * CountFuel[playerid], floatround_floor );

				PlayerTextDrawHide(playerid, FillUp[playerid][0]);
				PlayerTextDrawTextSize(playerid, FillUp[playerid][0], 242.966599+1.55*floatround(CountFuel[playerid]), 0.000000);
				ShowPlayerTD(playerid, FillUp[playerid][0]);

				global_str = "";
				f(global_str, 15, "$%d", price);
				PlayerTextDrawSetString(playerid, FillUp[playerid][33], global_str);
			}
		}
		else if(playertextid == FillUp[playerid][9])
		{
		    if(CountFuel[playerid] > 0.0)
		    {
				CountFuel[playerid] -= 1.0;

				new fuelid = PlayerFuel[playerid],
					bizid = GoFuel[fuelid][gfBizzID],
					Float:cost = BizData[bizid][bEnterPrice],
					price = floatround( cost * CountFuel[playerid], floatround_floor );

				PlayerTextDrawHide(playerid, FillUp[playerid][0]);
				PlayerTextDrawTextSize(playerid, FillUp[playerid][0], 242.966599+1.55*floatround(CountFuel[playerid]), 0.000000);
				ShowPlayerTD(playerid, FillUp[playerid][0]);

				global_str = "";
				f(global_str, 15, "$%d", price);
				PlayerTextDrawSetString(playerid, FillUp[playerid][33], global_str);
			}
		}
	}
	//
	//if(playertextid == vehiclestats[playerid][5])
	//{
	//	if(IsAOwnableCar(GetPlayerVehicleID(playerid)))
	//	{
	//	    if(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cMaslo] > 2.0) global_str = "{42B02C}хорошее";
	//	    if(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cMaslo] < 0.5) global_str = "{FF0000}плохое";
	//	    f(global_str, 400, "\
	//	    {FFFFFF}Состояние масла автомобиля: %s\n{FFFFFF}Чем {ff0000}хуже {FFFFFF}состояние, тем {FF0000}медленнее {FFFFFF}ваш авто\nездит. Для восстановления масла, необходимо\nпопросить у {FFFF00}механика.", global_str);
	//	    SPD(playerid, 0, 0, "", global_str, "Выход", "");
	//	}
	//}
	if(playertextid == ContPrize[playerid][9]) HideContMenu(playerid);
	//if(playertextid == vehiclestats[playerid][2])
	//{
	//	if(IsAOwnableCar(GetPlayerVehicleID(playerid))) SPD(playerid, 0, 0, "", "{FFFFFF}Состояние двигателя автомобиля: \n{FFFFFF}Чем {ff0000}хуже {FFFFFF}состояние, тем больше вероятность, что\n{FF0000}авто сломается по пути. {FFFFFF}Для ремонта, необходимо\nприехать на {FFFF00}станцию технического обслуживания\n{FFFFFF}(Используйте /gps важные места - станция тех. обслуживания)", "Выход", "");
	//}
	if(playertextid == contd[playerid][20]) {
		for(new i; i < 33; i++) DestroyPlayerTD(playerid, contd[playerid][i]);
		containeropen{playerid} = false;
		pagecontainer[playerid] = 0;
		CancelSelectTextDraw(playerid);
	}
	if(playertextid == contd[playerid][23])
	{
	    if(pagecontainer[playerid] == 1)
	    {
			SwitchContainer(playerid, Int_GetPlayerData(playerid,"typecontainer"), 0);
			return 1;
		}
 		SwitchContainer(playerid, random(2), 1);
	}
	if(playertextid == contd[playerid][22])
	{
	    if(pagecontainer[playerid] == 0)
	    {
			SwitchContainer(playerid, Int_GetPlayerData(playerid,"typecontainer"), 1);
			return 1;
		}
 		SwitchContainer(playerid, random(2), 0);
	}
	for(new id; id < 16; id++)
	{
		if(id < 13)
		{
			if(playertextid == InventMenuTD[playerid][id])
			{
				switch id do
				{
					case 0:
					{
						switch(pTemp[playerid][tType])
						{
							case 0: // use / put
							{
								if(IsASkinInv(Inventory[playerid][0][PickInvent[playerid]]))
								{
									PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);
									timeskin[playerid] = 0;
									PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], PI[playerid][pSkin][0] == 18 ? 0 : 1);
									PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]), ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
								}
								UseItem(playerid, PickInventSlot[playerid]);
								CallTimeOutFunction("CheepsTimer",3000,0,"d",playerid);
							}
							case 1: // use accesory cell
							{	
								for(new i; i < 8; i++)
									useableAccessory(playerid, i);
							}
							case 2: // edit (tuning car)
							{
								new veh = GetPlayerVehicleID(playerid), vehId = GetVehicleID(veh);

								if(pTemp[playerid][tItemId] == 6518) 
									showDialogEditBottomColor(playerid, veh);
								else
								{
									new Float:X, Float:Y, Float:Z, model = CarInfo[vehId][cInvCell][pTemp[playerid][tSlot]];

									EditObjectPlayer[playerid] = CreateDynamicObject(18698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1,-1,-1, 300.0, 300.0);
									GetVehiclePos(veh, X,Y,Z);
 									SetDynamicObjectPos(EditObjectPlayer[playerid], X,Y,Z);
 									GetVehicleRot(veh, X,Y,Z);
									SetDynamicObjectRot(EditObjectPlayer[playerid], X,Y,Z);
									EditDynamicObject(playerid, EditObjectPlayer[playerid]);

									SetPVarInt(playerid, "InstallVehTun", pTemp[playerid][tSlot] + 1);

									if(model)
										DestroyDynamicObjectModel(veh, TunInvCar[veh][0][pTemp[playerid][tSlot]], ItemsInfo[model][itemModel]);

									TunInvCar[veh][0][pTemp[playerid][tSlot]] = CreateDynamicObject(ItemsInfo[model][itemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

									switch(model)
									{
										case 705: SetDynamicObjectMaterial(TunInvCar[veh][0][pTemp[playerid][tSlot]], 0, 14544, "ab_woozieb", "otb_wind", 0x00000000);
										case 706: SetDynamicObjectMaterial(TunInvCar[veh][0][pTemp[playerid][tSlot]], 0, 1731, "cj_lighting", "CJ_PLANT_POT", 0x00000000);
										case 707: SetDynamicObjectMaterial(TunInvCar[veh][0][pTemp[playerid][tSlot]], 0, 16322, "a51_stores", "metpat64chev_128", 0x00000000);
										case 708: SetDynamicObjectMaterial(TunInvCar[veh][0][pTemp[playerid][tSlot]], 0, 14668, "711c", "cj_white_wall2", 0xFFFF0000);
									}

									AttachObjectToVehicle(TunInvCar[veh][0][pTemp[playerid][tSlot]], veh, AVEditPos[playerid][0], AVEditPos[playerid][1], AVEditPos[playerid][2], X,Y,Z);
									return Streamer_Update(playerid);
								}
							}
						}
					}
					case 2:
					{
						switch(pTemp[playerid][tType])
						{
							case 0:
							{
								switch(IsAAks(pTemp[playerid][tItemId]))
								{
									case 0: split(playerid);
									case 1: SPD(playerid, 25668, DIALOG_STYLE_INPUT, !"{FF6666}Аренда предметов", !"{FF6666}-{ffffff} Вы действительно хотите сдать в аренду предмет {FF6666} {ffffff}?\n\n{cccccc}Введите в строку ниже ID игрока, которому хотите сдать предмет в аренду.", !"Далее", !"Назад");							
								}
							}
							case 1: 
							{
								switch(IsAAks(pTemp[playerid][tItemId]))
								{
									case 0: 
									{
										ColorSlotReset(playerid);
										AddItem(playerid, GetSkinInfo(PI[playerid][pSkin][0], 1), 1, 0, Inventory[playerid][3][InventoryMaxSlot - 1], Inventory[playerid][4][InventoryMaxSlot - 1]);
										Inventory[playerid][0][InventoryMaxSlot - 1] = Inventory[playerid][3][InventoryMaxSlot - 1] = Inventory[playerid][4][InventoryMaxSlot - 1] = 0;
										SetPlayerSkinEx(playerid, PI[playerid][pSkin][0] = 18);
										UpdatePlayerDataInt(playerid, "Skin", PI[playerid][pSkin][0]);
										timeskin[playerid] = 0;
									}
									case 1: 
									{
										if(AksVidStatus[playerid][pTemp[playerid][tSlot]])
										{		
											switch AksSlot[playerid][0][pTemp[playerid][tSlot]] do
											{
												case 168: if(addskate[playerid]) addskate[playerid] = 0;
												case 181: BoomDelete(playerid);
												case 1134..1140, 5780..5786, 7410: if(SharInfo[playerid][sharStatus]) ResetShar(playerid);
											}						
											
											AksVid[playerid][pTemp[playerid][tSlot]] = AksVidStatus[playerid][pTemp[playerid][tSlot]] = 0;	
										}
										PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
										DeletePlayerAccessory(playerid, pTemp[playerid][tSlot]);
									}
								}
							}
							case 2: DeletePlayerAccessoryVeh(playerid, GetPlayerVehicleID(playerid), pTemp[playerid][tSlot]);
						}						
					}
					case 4: // (types: 0, 1)
					{
						switch(pTemp[playerid][tType])
						{
							case 0: // drop
							{
								if(musorka[playerid] == -1)
									OnPlayerCloseInventMenu(playerid), SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не рядом с мусоркой");								
							}
							case 1: // edit
							{
								if(BizEntered[playerid] == -1 or BizData[BizEntered[playerid]][bState] != 9)
									SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}Доступно в магазине аксессуаров");

								else if(!AksSlot[playerid][5][pTemp[playerid][tSlot]]) SPD(playerid, 26020, DIALOG_STYLE_MSGBOX, !"Подшив аксессуаров", !"{FFFFFF}В магазине аксессуаров сотрудники магазина за небольшую плату помогут вам\nподшить любой аксессуар под ваш вкус! Вы можете изменить кость крепления (голова/нога/рука/плечо и т.д),\nпозиции и размеры. Это ещё больше поможет вам выделиться из толпы и показать свою уникальность.\n\n{FF6347}Позиции аксессуара сохраняются только на ту одежду, на которую он был подшит. Если вы захотите сменить\nсвой образ, вам будет необходимо выполнить подшив повторно на новую одежду!\n\n{33AA33}Стоимость услуги, установленая владельцем магазина: 100000 BTC.\n\n{FFFFFF}- Хотите приступить?", !"Выбрать", !"Отмена");
								else SPD(playerid, 26020, DIALOG_STYLE_LIST, !"Выберите действие", !"[1] Установить новые позиции{33AA33}\t100000 BTC\n{FFFFFF}[2] Установить стандартные позиции\t{33AA33}50000 BTC", !"Выбор", !"Отмена");
							}
						}
					}
					case 6: // info
					{
                        GetItemInfo(playerid, pTemp[playerid][tType] == 1 && pTemp[playerid][tSlot] != 180 ? 1 : 0, pTemp[playerid][tSlot], false);
						InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
					}
					case 8: OnPlayerCloseInventMenu(playerid);
					default: return 1;
				}
				HideInventMenuTD(playerid);
			}
		}
	}
	    
	if(InventoryOpen{playerid})
	{
		if(IsPlayerInHisVehicle(playerid))
		{
			new vehicle = GetVehicleID(GetPlayerVehicleID(playerid));
			
			for(new i; i < 20; i++)
			{
				if(playertextid == CarInvSlot[playerid][i])
				{
					if(CarInfo[vehicle][cInvCell][i])
						return (i >= 10 || !TextFind(ItemsInfo[CarInfo[vehicle][cInvCell][i]][itemName], "[деталь тюнинга]") && CarInfo[vehicle][cInvCell][i] != 4125 && CarInfo[vehicle][cInvCell][i] != 6518 && IsALimitedKangaroo(CarInfo[vehicle][cInvCell][i]) ? DeletePlayerAccessoryVeh(playerid, GetPlayerVehicleID(playerid), i) : ShowInventMenuTD(playerid, CarInfo[vehicle][cInvCell][i], 1, 2, CarInvSlot[playerid][i], i));

					else if(timeaks[playerid] == i) 
						return PutVehAcc(playerid, GetPlayerVehicleID(playerid), PickInventSlot[playerid]);
				}
			}
		}
		else
		{
			for(new i; i < 8; i++)
			{
				if(playertextid == InvItemSlot[playerid][i])
				{
					if(IsPlayerInAnyVehicle(playerid)) return false;
					else if(PickInvent[playerid] != InventoryMaxSlot+1 && !IsAAks(Inventory[playerid][0][PickInvent[playerid]])) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Сюда можно поместить только аксессуар"), HideInventMenuTD(playerid), ColorSlotReset(playerid), PickInvent[playerid] = InventoryMaxSlot+1;
					else if(!(timeaks[playerid] == -1) && !(i == timeaks[playerid])) return false;
					else if(!AksSlot[playerid][0][i] && timeaks[playerid] == -1) return false;
					else if(timeaks[playerid] == i) return PutAcc(playerid, PickInventSlot[playerid], i);
					if(ItemsInfo[AksSlot[playerid][0][i]][itemUseable]) 
					{
						if(!(PickInvent[playerid] == InventoryMaxSlot+1)) return false;
						AksVid[playerid][i] = AksSlot[playerid][0][i];
						AksVidStatus[playerid][i] = 1;
					}
					return ShowInventMenuTD(playerid, AksSlot[playerid][0][i], 1, 1, InvItemSlot[playerid][i], i);
				}
			}
		}
	}
	
	if(playertextid == InvTextDraws[playerid][11])
	{
		PI[playerid][OpenGunMenu] = !PI[playerid][OpenGunMenu];
		new status = PI[playerid][OpenGunMenu];
		f(global_str, 7, status ? "~>~":"~<~");
		PlayerTextDrawSetString(playerid, InvTextDraws[playerid][10], global_str);
	
		switch status do
		{
			case true: 
			{
				new Float:X, Float:Y;

				UpgradeMenuSlot[playerid][6][0] = CreatePlayerTextDraw(playerid, 336.269989+X, 123.099998+Y, "usebox");
				PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][6][0], 0.000000, 8.752383);
				PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][6][0], 283.079315+X, 0.000000);
				PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][6][0], 1);
				PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][6][0], 0xE1E1E1FF);
				PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][6][0], 1);
				PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][6][0], 0x1A1A1AFF);
				PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][6][0], 2);
				PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][6][0], 0);
				PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][6][0], 0x000000FF);
				PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][6][0], 0);
				PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][6][0], 1);
				PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][6][0], 0);
				ShowPlayerTD(playerid, UpgradeMenuSlot[playerid][6][0]);

				for(new i; i < 6; i++)
				{
					UpgradeMenuSlot[playerid][i][0] = CreatePlayerTextDraw(playerid, (i % 2 ? 287.579315 : 310.299652) + X, 124.599998 + (25.629632 * (i > 3 ? 2 : i > 1 ? 1 : 0)) + Y, "_");
					PlayerTextDrawLetterSize(playerid, UpgradeMenuSlot[playerid][i][0], 0.480000, 1.120000);
					PlayerTextDrawTextSize(playerid, UpgradeMenuSlot[playerid][i][0], 21.720343, 24.629631);
					PlayerTextDrawAlignment(playerid, UpgradeMenuSlot[playerid][i][0], 1);
					PlayerTextDrawColor(playerid, UpgradeMenuSlot[playerid][i][0], 0xFFFFFFFF);
					PlayerTextDrawUseBox(playerid, UpgradeMenuSlot[playerid][i][0], 0);
					PlayerTextDrawBoxColor(playerid, UpgradeMenuSlot[playerid][i][0],  0x80808080);
					PlayerTextDrawSetShadow(playerid, UpgradeMenuSlot[playerid][i][0], 2);
					PlayerTextDrawSetOutline(playerid, UpgradeMenuSlot[playerid][i][0], 0);
					PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][i][0], ItemsInfo[UpgradeSlot[playerid][i]][itemColor]);
					PlayerTextDrawFont(playerid, UpgradeMenuSlot[playerid][i][0], 5);
					PlayerTextDrawSetProportional(playerid, UpgradeMenuSlot[playerid][i][0], 1);
					PlayerTextDrawSetSelectable(playerid, UpgradeMenuSlot[playerid][i][0], 1);
					PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][i][0], ItemsInfo[UpgradeSlot[playerid][i]][itemModel]);
					PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][i][0], ItemsInfo[UpgradeSlot[playerid][i]][itemRotation][0], ItemsInfo[UpgradeSlot[playerid][i]][itemRotation][1], ItemsInfo[UpgradeSlot[playerid][i]][itemRotation][2], ItemsInfo[UpgradeSlot[playerid][i]][itemRotation][3]);

					UpdateCellInventory(playerid, 4, UpgradeSlot[playerid][i], 0, UpgradeMenuSlot[playerid][i][0], UpgradeMenuSlot[playerid][i][1], UpgradeMenuSlot[playerid][i][2], true);
					ShowPlayerTD(playerid, UpgradeMenuSlot[playerid][i][0]);
				}
			}
			default: 
				for(new i; i < 7; i++) 
					for(new s; s < 3; s++) 
						DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][i][s]);
		}
		PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
	}
    return 1;
}
stock UpdateFuels(biz)
{
	if(BizData[biz][bState] == B_GAS)
	{
		for(new i; i < sizeof(GoFuel); i++)
		{
			if(GoFuel[i][gfBizzID] == biz)
			{
				f(global_str, 256,"\
					{FAAC58} Заправка \n\n\
					{FFFFFF}Используйте клавишу {73B461}H (Сигнал){FFFFFF} около бензоколонки\n\
					Стоимость 1-го литра: {73B461}$%.1f\n\
					{FFFFFF}Всего топлива: {73B461}%dл.", BizData[biz][bEnterPrice], BizData[biz][bProducts]);

				UpdateDynamic3DTextLabelText(GoFuel[i][gf3DText], COLOR_WHITE, global_str);
			}
		}
	}
	return 1;
}

public: MysqlCheckNameBuyName(playerid, name[])
{
	if(cache_num_rows() > 0)
		return SPD(playerid, 224, DIALOG_STYLE_INPUT, !"Покупка", !"{FFFFFF}Вы хотите сменить игровой ник\nСтоимость: 20 AZ-монет\nВведите новый ник в окно\nЗатем нажмите \"Сменить\"\n\n{FF0000}Ошибка: Этот ник занят", !"Сменить", !"Отмена");
	
	if(RenamePlayer(playerid, name)) return 0;
	GiveDonate(playerid, -5000);
	SCM(playerid, COLOR_VALIK, !"Вы успешно сменили свой ник");
	return 1;
}

stock IsAArendCar(carid) {

	if(!(VehicleInfo[carid][vIDa] == INVALID_DATA_ID)) 
		return true;
	
	return false;
}

stock GetArendCarID(carid) return VehicleInfo[carid][vIDa];

stock IsPlayerInIncVehicle(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new carid = GetPlayerVehicleID(playerid);
		if(VehicleInfo[carid][vJob] == 9) return 1;
	}
	return 0;
}

stock IsPlayerHaveCar(playerid, vehicleid)
{
	if(IsAOwnableCar(vehicleid))
		if(GetString(CarInfo[GetVehicleID(vehicleid)][cKeyer],PN(playerid)) or GetString(CarInfo[GetVehicleID(vehicleid)][cOwner],PN(playerid))) return true;

	return false;
}

stock IsPlayerRegCar(playerid, vehicleid)
{
    if(IsAOwnableCar(vehicleid))
	{
	    new number = GetVehicleID(vehicleid);
		if(GetString(CarInfo[number][cOwner], PN(playerid))) return true;
	}

	return false;
}

stock GetNumberCars(playerid, &number)
{
	f(global_str, 128, "SELECT `ID` FROM ownable WHERE Owner = '%s'", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str);
	number = cache_num_rows();
	cache_delete(result);
}

stock SetCarOwner(carid,name[])
	return SetString(CarInfo[GetVehicleID(carid)][cOwner], name);

stock SetCarKeyer(carid,name[])
	return SetString(CarInfo[GetVehicleID(carid)][cKeyer], name);

stock SendMessage(color, const text[], Float:Pos[], vw = 0, Float: radius = 25.0)
{
	foreach(Player, i)
		if(IsPlayerInRangeOfPoint(i, radius, Pos[0], Pos[1], Pos[2]) && GetPlayerVirtualWorld(i) == vw)
			SCM(i, color, text);
}

stock ProxDetector(Float:radi, playerid, string[], color, house = 0)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new NEAR_HOUSE = InfoHouse[playerid];
		new IN_HOUSE = HouseEntered[playerid];
		new HOUSE = -1;
		
		if(!(NEAR_HOUSE == -1) && IsPlayerInDynamicArea(playerid, HouseInfo[NEAR_HOUSE][H_AREA_ID])) HOUSE = NEAR_HOUSE;
		else if(!(IN_HOUSE == -1) && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[IN_HOUSE][hExit_X], HouseInfo[IN_HOUSE][hExit_Y], HouseInfo[IN_HOUSE][hExit_Z])) HOUSE = IN_HOUSE;
		
		foreach(new i: Player)
		{
		    if(house && HOUSE != -1)
		    {
		        if(IsPlayerInRangeOfPoint(i, 4.0, HouseInfo[HOUSE][hExit_X], HouseInfo[HOUSE][hExit_Y], HouseInfo[HOUSE][hExit_Z])
				|| IsPlayerInRangeOfPoint(i, 4.0, HouseInfo[HOUSE][hEnter_X], HouseInfo[HOUSE][hEnter_Y], HouseInfo[HOUSE][hEnter_Z])) SCM(i, color, string);
		    }else
			if (IsPlayerInRangeOfPoint(i,radi,X,Y,Z) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) SCM(i, color, string);
		}
	}
	return 1;
}

public: Fillup(playerid, carid, Float:gas)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInVehicle(playerid,carid))
	    {
			if(IsAtGasStation(playerid) != -1)
			{
       			Fuel[carid] += gas;
			    BeforeFill[carid] += gas;
			    if(BeforeFill[carid] >= gas || Fuel[carid] >= 100.0)
			    {
			        if(Fuel[carid] >= 100.0) Fuel[carid] = 100.0;
					TogglePlayerControllable(playerid, true);
					f(global_str, 100,"Ваш транспорт заправлен {FFFFFF}%.1f{FAAC58} литрами топлива.",gas);
					SCM(playerid,COLOR_ORANGE,global_str);
					callcmd::engine(playerid);
				}
    			else CallTimeOutFunction("Fillup",200,false,"idd",playerid,carid,gas);
			}
		}
		else 
			return false;
	}
	return 1;
}

stock IsValidPassport(playerid)
{
	f(global_str, 100, "SELECT `Name` FROM `passports` WHERE `Name` = '%s' LIMIT 1", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str);
	new accounts = cache_num_rows();
	cache_delete(result);
	return accounts;
}

stock OnRegPass(playerid)
{
	f(global_str, 256, "INSERT INTO `passports` (`Name`,`Seria`,`Number`,`Sex`,`D_Day`,`D_Month`,`D_Year`,`DB_Day`,`DB_Month`,`DB_Year`,`McState`) VALUE ('%s','%d','%d','%d','%d','%d','%d','%d','%d','%d','-1')",
	PN(playerid),
	PassInfo[playerid][psSeria],
	PassInfo[playerid][psNumber],
	PassInfo[playerid][psSex],
	PassInfo[playerid][psDate][0],
	PassInfo[playerid][psDate][1],
	PassInfo[playerid][psDate][2],
	PassInfo[playerid][psDateBirth][0],
	PassInfo[playerid][psDateBirth][1],
	PassInfo[playerid][psDateBirth][2]);
	mysql_tquery(mysql, global_str);
	return 1;
}

stock OnLoadPass(playerid)
{
	f(global_str, 100, "SELECT * FROM `passports` WHERE `Name` = '%s' LIMIT 1", PN(playerid));
	mysql_tquery(mysql, global_str, "MysqlLoadPassport", "d", playerid);
	return 1;
}

public: MysqlLoadPassport(playerid)
{
	if(cache_num_rows() == 1)
	{
		cache_get_value_name_int(0, "Seria", PassInfo[playerid][psSeria]);
		cache_get_value_name_int(0, "Number", PassInfo[playerid][psNumber]);
		cache_get_value_name_int(0, "Sex", PassInfo[playerid][psSex]);
		cache_get_value_name_int(0, "D_Day", PassInfo[playerid][psDate][0]);
		cache_get_value_name_int(0, "D_Month", PassInfo[playerid][psDate][1]);
		cache_get_value_name_int(0, "D_Year", PassInfo[playerid][psDate][2]);
		cache_get_value_name_int(0, "DB_Day", PassInfo[playerid][psDateBirth][0]);
		cache_get_value_name_int(0, "DB_Month", PassInfo[playerid][psDateBirth][1]);
		cache_get_value_name_int(0, "DB_Year", PassInfo[playerid][psDateBirth][2]);
		cache_get_value_name(0, "McDate", MedCardInfo[playerid][mcDate], 10);
		cache_get_value_name_int(0, "McState", MedCardInfo[playerid][mcState]);
	}
	return 1;
}

stock RenamePlayer(playerid, name[])
{
    if(PI[playerid][pDemorgan] > 0) return 1;
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(i < OWNABLEBIZES && strlen(PN(playerid)) > 3 && GetString(BizData[i][bOwner], PN(playerid)))
			SetString(BizData[i][bOwner], name), UpdateBusinessText(i, 1);
			
		
		if(i < OWNABLEHOUSES && strlen(PN(playerid)) > 3 && GetString(HouseInfo[i][hOwner], PN(playerid)))
			SetString(HouseInfo[i][hOwner], name), UpdateHouse(i);
	
		if(strlen(PN(playerid)) > 3 && IsPlayerRegCar(playerid, i))
			DestroyVehicleEx(OwnableCar[ GetVehicleID(i) ]);
	}

	static oldname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, oldname, 25);
	
	SQL("UPDATE ownable SET Owner = '%s' WHERE Owner = BINARY('%s');", name, oldname);
	
	SQL("UPDATE `accounts` SET `NickName` = '%s' WHERE `ID` = '%i'", name, PI[playerid][pID]);
	SQL("UPDATE `accounts` SET `Referal` = '%s' WHERE `Referal` = '%s'", name, oldname);
	SQL("UPDATE `phonebook` SET `Name` = '%s' WHERE `Name` = '%s'", name, oldname);
	SQL("UPDATE `phonebook` SET `Namez` = '%s' WHERE `Namez` = '%s'", name, oldname);
	SQL("UPDATE `phonemes` SET `Name` = '%s' WHERE `Name` = '%s'", name, oldname);
	SQL("UPDATE `phonemes` SET `Namez` = '%s' WHERE `Namez` = '%s'", name, oldname);
	SQL("INSERT INTO `nickname_history` (`nh_owner`,`nh_oldname`) VALUES ('%d','%s')", PI[playerid][pID], oldname);	
	//
	
	f(global_str, 100,"[admin] Теперь %s известен как %s.",oldname,name);
	SendAdminsMessage(COLOR_ACHAT, global_str);

	amlf("<a href=../pages/user?id=%d>%s</a> сменил игровое имя на <a href=../pages/user?id=%d>%s</a>", 0, "", "", PI[playerid][pID], PN(playerid), PI[playerid][pID], name);
	//
	if(PI[playerid][pMember][1] > 0) SetString(OrgInfo[playerid][oLeader], PN(playerid));
	//
	SCM(playerid, COLOR_ACHAT, !"[Информация] {FFFFFF}По скольку вы сменили имя, вам необходимо сделать новый паспорт и мед-карту. Перезайдите на сервер");
    SetPlayerNameEx(playerid, name);
	Kick(playerid);
	return 0;
}

stock RemovePlayerFromVehicle_Ex(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float:X,Float:Y,Float:Z,Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
		switch(GetPlayerVehicleSeat(playerid))
		{
		    case 0,2: ShiftCords(1, X, Y, A-90.0, 1.5);
		    case 1,3: ShiftCords(1, X, Y, A+90.0, 1.5);
		}
		UpdatePlayerPos(playerid, X, Y, Z);
	}
	return 1;
}

stock SaveAccount(playerid)
{
    if(!IsPlayerOnline(playerid)) return false;
	
	new ORM:orm = orm_create("accounts");

	orm_addvar_int(orm, PI[playerid][pID], "ID");

	orm_addvar_int(orm, PI[playerid][pReferalID], "ReferalID");
	orm_addvar_string(orm, PlayerMail[playerid], 50, "Mail");

	orm_addvar_int(orm, PI[playerid][pLevel], "Level");
	orm_addvar_int(orm, PI[playerid][pExp], "Exp");
	orm_addvar_int(orm, PI[playerid][pSex], "Sex");
	orm_addvar_int(orm, PI[playerid][pRace], "Race");
	orm_addvar_int(orm, PI[playerid][pAdmin], "Admin");
	orm_addvar_int(orm, PI[playerid][pMoney], "Money");
	orm_addvar_int(orm, PI[playerid][pBank], "Bank");
	orm_addvar_int(orm, PI[playerid][pWanted], "Wanted");
	orm_addvar_int(orm, PI[playerid][pVIP][0], "VIP");
	orm_addvar_string(orm, Int_PackMassive(0, PI[playerid][pMember]), 40, "Member");
	orm_addvar_int(orm, PI[playerid][pRank], "Rank");
	orm_addvar_int(orm, PI[playerid][pFarmOwner], "FarmOwner");
	orm_addvar_int(orm, PI[playerid][pAddVIP], "AddVIP");
	orm_addvar_int(orm, PI[playerid][pD_Packets], "D_Packets");
	orm_addvar_int(orm, PI[playerid][pWarns], "Warns");
	orm_addvar_int(orm, PI[playerid][pTimeToLastWarn], "TimeToLastWarn");
	orm_addvar_int(orm, PI[playerid][pHouseKey], "HouseKey");
	orm_addvar_int(orm, PI[playerid][pFWarns], "FWarns");
	orm_addvar_int(orm, PI[playerid][pSkin][0], "Skin");
	orm_addvar_int(orm, PI[playerid][pPackets], "Packets");
	orm_addvar_string(orm, Int_PackMassive(2, PI[playerid][pPhoneInfo]), 20, "PhoneInfo");
	orm_addvar_int(orm, PlayerJob[playerid], "Job");
	orm_addvar_int(orm, PI[playerid][pMuteTime], "MuteTime");
	orm_addvar_int(orm, PI[playerid][pFMuteTime], "FMuteTime");
	orm_addvar_string(orm, Int_PackMassive(3, PI[playerid][pSkillFight]), 40, "SkillFight");
	orm_addvar_int(orm, PI[playerid][pDCTime], "DropCarTime");
	orm_addvar_int(orm, PlayerDrunkLevel[playerid], "Drunk");
	orm_addvar_int(orm, PI[playerid][pBL], "BlackList");
	orm_addvar_int(orm, PI[playerid][pBankPass], "BankPass");
	orm_addvar_int(orm, PI[playerid][pZKP], "ZKP");
	orm_addvar_int(orm, PI[playerid][pHeal], "Heal");
	orm_addvar_int(orm, Fullness[playerid], "Fullness");
	orm_addvar_int(orm, PI[playerid][pPrison], "Prison");
	orm_addvar_int(orm, PI[playerid][pHospCity], "HospCity");
	orm_addvar_int(orm, PI[playerid][pSkillLevel], "SkillLevel");
	orm_addvar_int(orm, PI[playerid][pVirMoney], "VirMoney");
	orm_addvar_int(orm, PI[playerid][pOldRepl], "OldRepl");
	orm_addvar_int(orm, PI[playerid][pAllRepl], "AllRepl");
	orm_addvar_int(orm, PI[playerid][pCredit], "Credit");
	orm_addvar_int(orm, PI[playerid][pDemorgan], "Demorgan");
	orm_addvar_int(orm, PI[playerid][pContractTime], "ContractTime");
	orm_addvar_int(orm, PI[playerid][pPlayedTime], "PlayedTime");
	orm_addvar_int(orm, PI[playerid][pRepPack], "RepPack");
	orm_addvar_int(orm, FP_Data[playerid][F_FAMILY_CHAT], "FamilyChat");
	orm_addvar_int(orm, PI[playerid][pVipTime], "VipTime");
	orm_addvar_string(orm, PI[playerid][pMerrit], 24, "Merrit");
	orm_addvar_float(orm, PI[playerid][pHealth], "HP");
	orm_addvar_int(orm, PI[playerid][pHungryShow], "HungryShow");
	orm_addvar_int(orm, PI[playerid][pHospital], "Hospital");
	orm_addvar_int(orm, FP_Data[playerid][F_FAMILY_RANG], "FamilyRang");
	orm_addvar_int(orm, FP_Data[playerid][F_FAMILY_MUTE], "FamilyMute");
	orm_addvar_int(orm, FP_Data[playerid][F_FAMILY_ID], "Family");
	orm_addvar_string(orm, Float_PackMassive(4, PI[playerid][pPremiumPos]), 50, "PremiumPos");
	orm_addvar_int(orm, PI[playerid][pPcix], "Pcix");
	orm_addvar_int(orm, PlayerModification[playerid], "ModificationPlayer");
	orm_addvar_string(orm, Int_PackMassive(5, PI[playerid][pDepositInfo]), 50, "DepositInfo");
	orm_addvar_string(orm, PI[playerid][pGoogle], 32, "Google");
	orm_addvar_int(orm, PI[playerid][pEmailAuth], "EmailAuth");
	orm_addvar_string(orm, PI[playerid][pLastIP], 16, "LastIP");
	orm_addvar_int(orm, PI[playerid][pEvent], "Event");
	orm_addvar_int(orm, PI[playerid][pAdmRep], "Reputation");
	orm_addvar_int(orm, PI[playerid][pCarSkill], "CarSkill");
	orm_addvar_int(orm, PI[playerid][pAWarns], "AWarns");
	orm_addvar_int(orm, PI[playerid][pOldWanted], "OldWanted");
	orm_addvar_int(orm, PI[playerid][pRoubles], "Roubles");
	orm_addvar_int(orm, PI[playerid][pFrom], "From");
	orm_addvar_int(orm, PI[playerid][pVkontakte], "Vkontakte");

	orm_addvar_string(orm, PI[playerid][pOpisanie], 80, "Opisanie");
	orm_addvar_string(orm, PI[playerid][pVipName], 50, "VipName");

	orm_addvar_int(orm, PI[playerid][pInvCell], "InvCell");
	orm_addvar_string(orm, PI[playerid][pTag], 32, "Tag");
	orm_addvar_string(orm, Int_PackMassive(6, PI[playerid][pSkladID]), 16, "SkladID");
	
	orm_setkey(orm, "ID");
	
	orm_update(orm);
	orm_destroy(orm);

	SaveNumbers(playerid);
	SaveOnline(playerid);
	SaveInventory(playerid);
	SaveMasiveTimer(playerid);
	SavePlayerLicense(playerid);

	for(new i; i < 3; i++) UpdatePlayerDataStr(playerid, "BonusTime", Int_PackMassive(0, BonusTime[playerid][i]));
	
	return true;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(Taxi_GO[playerid] == 1)
	{
	    new carid = GetPlayerVehicleID(playerid);
	    if(IsATaxi(carid))
	    {
	     	new driverid = GetVehicleSeat(carid, 0);
	     	if(PlayerJob[driverid] == JOB_TAXI)
			{
				if(TaxiTarif[driverid] > 0)
				{
				    EnableGPSForPlayer(driverid,fX, fY, fZ);
					f(global_str, 100, "[Подсказка] {FFFFFF}%s выбрал(а) пункт. Он отмечен на карте .", PN(playerid));
					SCM(driverid, COLOR_GREY, global_str);
					SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Вы выбрали пункт назначения.");
					Taxi_GO[playerid] = 2;
					return 1;
				}
			}
		}
	}
	
 	if(PI[playerid][pAdmin])
 	{
 	    SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
  		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	   		SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ+2.0);

    	else SetPlayerPosAirX(playerid, fX, fY);
    	HouseEntered[playerid] = -1;
    }

	if(PI[playerid][pVIP] >= 8)
    {
    	pTemp[playerid][pPosVIP][0] = fX;
    	pTemp[playerid][pPosVIP][1] = fY;
    	pTemp[playerid][pPosVIP][2] = fZ;
    }

	return 1;
}

stock OnPlayerLogin(playerid)
{
    if(pTemp[playerid][tAuthorized] || PI[playerid][pID] == -1)
		return Kick(playerid);

	f(global_str, 150, "SELECT * FROM `bannames` WHERE BINARY `Name` = '%s' LIMIT 1", PN(playerid));
	mysql_tquery(mysql, global_str, "MysqlCheckBanOnLogin", "ds", playerid, PN(playerid));
	
    return true;
}

public: OnPlayerLoadData(playerid)
{
	if(!CheckPlayerLogged(playerid, PlayerName[playerid]))
	{
		SCM(playerid, -1, "Внутриигровая ошибка. Вы отключены от сервера ( Данный аккаунт уже авторизован ).");
		return Kick(playerid);
	}

	cache_get_value_name(0, "NickName", PlayerName[playerid], 24);
	
	if(ANTI_RAK_BOT)
		SetPlayerNameEx(playerid, PlayerName[playerid]); 

	cache_get_value_name(0, "RegIP", PlayerRegIP[playerid]);
	cache_get_value_name(0, "OldIP", PlayerIp[playerid]);
	cache_get_value_name_int(0, "ReferalID", PI[playerid][pReferalID]);
	cache_get_value_name(0, "Mail", PlayerMail[playerid]);

	cache_get_value_name_int(0, "Level", PI[playerid][pLevel]);
	cache_get_value_name_int(0, "Exp", PI[playerid][pExp]);
	cache_get_value_name_int(0, "Sex", PI[playerid][pSex]);
	cache_get_value_name_int(0, "Race", PI[playerid][pRace]);
	cache_get_value_name_int(0, "Admin", PI[playerid][pAdmin]);
	cache_get_value_name_int(0, "Money", PI[playerid][pMoney]);
	cache_get_value_name_int(0, "Bank", PI[playerid][pBank]);
	cache_get_value_name_int(0, "Wanted", PI[playerid][pWanted]);
	cache_get_value_name_int(0, "VIP", PI[playerid][pVIP][0]);
	cache_get_value_name(0, "Member", global_str), Int_UnPackMassive(global_str, PI[playerid][pMember]);
	cache_get_value_name_int(0, "Rank", PI[playerid][pRank]);
	cache_get_value_name_int(0, "FarmOwner", PI[playerid][pFarmOwner]);
	cache_get_value_name_int(0, "AddVIP", PI[playerid][pAddVIP]);
	cache_get_value_name(0, "LicenseData", global_str), Int_UnPackMassive(global_str, PI[playerid][LicensesData]);

	cache_get_value_name_int(0, "D_Packets", PI[playerid][pD_Packets]);
	cache_get_value_name_int(0, "Warns", PI[playerid][pWarns]);
	cache_get_value_name_int(0, "TimeToLastWarn", PI[playerid][pTimeToLastWarn]);
	cache_get_value_name_int(0, "HouseKey", PI[playerid][pHouseKey]);
	cache_get_value_name_int(0, "FWarns", PI[playerid][pFWarns]);
	cache_get_value_name_int(0, "Skin", PI[playerid][pSkin][0]);
	cache_get_value_name_int(0, "Packets", PI[playerid][pPackets]);
	cache_get_value_name(0, "PhoneInfo", global_str), Int_UnPackMassive(global_str, PI[playerid][pPhoneInfo]);

	cache_get_value_name_int(0, "Job", PlayerJob[playerid]);
	cache_get_value_name_int(0, "MuteTime", PI[playerid][pMuteTime]);
	cache_get_value_name_int(0, "FMuteTime", PI[playerid][pFMuteTime]);
	cache_get_value_name(0, "SkillFight", global_str), Int_UnPackMassive(global_str, PI[playerid][pSkillFight]);
	new style, bitcoin, BitcoinUpdate;
	cache_get_value_name_int(0, "Style", style), SetPlayerFightingStyle(playerid, style);

	cache_get_value_name_int(0, "DropCarTime", PI[playerid][pDCTime]);
	cache_get_value_name_int(0, "Drunk", PlayerDrunkLevel[playerid]);
	cache_get_value_name(0, "WeaponSkill", global_str), Int_UnPackMassive(global_str, PI[playerid][pGunSkill]);

	cache_get_value_name_int(0, "BlackList", PI[playerid][pBL]);
	cache_get_value_name_int(0, "BankPass", PI[playerid][pBankPass]);
	cache_get_value_name_int(0, "ZKP", PI[playerid][pZKP]);
	cache_get_value_name_int(0, "Heal", PI[playerid][pHeal]);
	cache_get_value_name_int(0, "Fullness", Fullness[playerid]);
	cache_get_value_name_int(0, "Prison", PI[playerid][pPrison]);
	cache_get_value_name_int(0, "HospCity", PI[playerid][pHospCity]);
	cache_get_value_name_int(0, "SkillLevel", PI[playerid][pSkillLevel]);
	cache_get_value_name_int(0, "VirMoney", PI[playerid][pVirMoney]);
	cache_get_value_name_int(0, "OldRepl", PI[playerid][pOldRepl]);
	cache_get_value_name_int(0, "AllRepl", PI[playerid][pAllRepl]);
	cache_get_value_name_int(0, "Credit", PI[playerid][pCredit]);
	cache_get_value_name_int(0, "Demorgan", PI[playerid][pDemorgan]);

	cache_get_value_name(0, "SettingsData", global_str), global_str = strlen(global_str) < 2 ? "0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 100, 0":global_str, Int_UnPackMassive(global_str, SettingData[playerid]);
	cache_get_value_name(0, "ImproventData", global_str), global_str = strlen(global_str) < 2 ? "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0":global_str, Int_UnPackMassive(global_str, ImprovementsData[playerid]);
	cache_get_value_name(0, "PhoneData", global_str), global_str = strlen(global_str) < 2 ? "0, 0, 0, 0, 0, 0, 0, 0":global_str, Int_UnPackMassive(global_str, PhoneImprovementsData[playerid]);

	cache_get_value_name_int(0, "ContractTime", PI[playerid][pContractTime]);
	cache_get_value_name_int(0, "PlayedTime", PI[playerid][pPlayedTime]);
	cache_get_value_name_int(0, "RepPack", PI[playerid][pRepPack]);
	cache_get_value_name_int(0, "FamilyChat", FP_Data[playerid][F_FAMILY_CHAT]);
	cache_get_value_name_int(0, "VipTime", PI[playerid][pVipTime]);
	cache_get_value_name(0, "Merrit", PI[playerid][pMerrit], 24);

	cache_get_value_name_float(0, "HP", PI[playerid][pHealth]);
	cache_get_value_name_int(0, "HungryShow", PI[playerid][pHungryShow]);
	cache_get_value_name_int(0, "Hospital", PI[playerid][pHospital]);

	cache_get_value_name_int(0, "FamilyRang", FP_Data[playerid][F_FAMILY_RANG]);
	cache_get_value_name_int(0, "FamilyMute", FP_Data[playerid][F_FAMILY_MUTE]);
	cache_get_value_name_int(0, "Family", FP_Data[playerid][F_FAMILY_ID]);
	
	cache_get_value_name(0, "PremiumPos", global_str), sscanf(global_str, "p<,>a<f>[3]", PI[playerid][pPremiumPos]);
	cache_get_value_name_int(0, "Bitcoin", bitcoin);
	cache_get_value_name_int(0, "Pcix", PI[playerid][pPcix]);
	cache_get_value_name(0, "SecondTimers", global_str), Int_UnPackMassive(global_str, PlayerTimerItem[playerid]);
	cache_get_value_name_int(0, "ModificationPlayer", PlayerModification[playerid]);
	cache_get_value_name(0, "DepositInfo", global_str), Int_UnPackMassive(global_str, PI[playerid][pDepositInfo]);
	cache_get_value_name(0, "Google", PI[playerid][pGoogle]);
	cache_get_value_name_int(0, "EmailAuth", PI[playerid][pEmailAuth]);
	cache_get_value_name(0, "LastIP", PI[playerid][pLastIP]);
	cache_get_value_name(0, "UpgradeInventSlots", global_str), Int_UnPackMassive(global_str, UpgradeSlot[playerid]);

	cache_get_value_name_int(0, "Event", PI[playerid][pEvent]);
	cache_get_value_name_int(0, "Reputation", PI[playerid][pAdmRep]);
	cache_get_value_name_int(0, "CarSkill", PI[playerid][pCarSkill]);
	cache_get_value_name_int(0, "AWarns", PI[playerid][pAWarns]);

	cache_get_value_name(0, "Weapons", global_str, 500);

	for(new x, idx; x < 13; x++) 
		PI[playerid][pGuns][x] = strval(strtok(global_str, idx)),
		PI[playerid][pAmmos][x] = strval(strtok(global_str, idx));

	cache_get_value_name(0, "InventoryItem", global_str), Int_UnPackMassive(global_str, Inventory[playerid][0]); // ид премета;
	cache_get_value_name(0, "InventoryCount", global_str), Int_UnPackMassive(global_str, Inventory[playerid][1]); // количество;
	cache_get_value_name(0, "InventoryColor", global_str), Int_UnPackMassive(global_str, Inventory[playerid][2]); // цвет;
	cache_get_value_name(0, "InventoryId", global_str), Int_UnPackMassive(global_str, Inventory[playerid][3]); // идентфикатор;
	cache_get_value_name(0, "InventoryEnchant", global_str), Int_UnPackMassive(global_str, Inventory[playerid][4]); // заточка;
	cache_get_value_name(0, "InventoryMending", global_str), Int_UnPackMassive(global_str, Inventory[playerid][5]); // прочность;
	cache_get_value_name(0, "InventoryTimer", global_str), Int_UnPackMassive(global_str, Inventory[playerid][6]); // окончание;
	cache_get_value_name(0, "AccessoryItem", global_str), Int_UnPackMassive(global_str, AksSlot[playerid][0]); // Ид аксов
	cache_get_value_name(0, "AccessoryEnchant", global_str), Int_UnPackMassive(global_str, AksSlot[playerid][1]); // Заточка аксов
	cache_get_value_name(0, "AccessoryMending", global_str), Int_UnPackMassive(global_str, AksSlot[playerid][2]); // Прочность аксов
	cache_get_value_name(0, "AccessoryColor", global_str), Int_UnPackMassive(global_str, AksSlot[playerid][3]); // Цвет аксов
	cache_get_value_name(0, "AccessoryStripe", global_str), Int_UnPackMassive(global_str, AksSlot[playerid][4]); // Уровень и тип нашивки аксов

	cache_get_value_name_int(0, "LastTimePutAks", PI[playerid][pLastTimePutAks]);
	cache_get_value_name_int(0, "pInvColors", PI[playerid][pInvColors]);
	cache_get_value_name_int(0, "rMuteTime", PI[playerid][pRMuteTime]);
	cache_get_value_name_int(0, "OldWanted", PI[playerid][pOldWanted]);
	cache_get_value_name_int(0, "Roubles", PI[playerid][pRoubles]);
	cache_get_value_name_int(0, "BitcoinUpdate", BitcoinUpdate);
	cache_get_value_name_int(0, "From", PI[playerid][pFrom]);
	cache_get_value_name_int(0, "Vkontakte", PI[playerid][pVkontakte]);

	cache_get_value_name(0, "WalkingInfo", global_str), Int_UnPackMassive(global_str, PI[playerid][pWalkingInfo]);
	cache_get_value_name(0, "Opisanie", PI[playerid][pOpisanie], 80);
	cache_get_value_name(0, "VipName", PI[playerid][pVipName], 50);
	cache_get_value_name_int(0, "InvCell", PI[playerid][pInvCell]);
	cache_get_value_name(0, "Tag", PI[playerid][pTag], 32);
	cache_get_value_name(0, "CustomInterface", global_str), Int_UnPackMassive(global_str, PI[playerid][pCustomInterface]);
	cache_get_value_name(0, "SkladID", global_str), Int_UnPackMassive(global_str, PI[playerid][pSkladID]);

	cache_get_value_name_int(0, "RainbowColor", PI[playerid][pRainbowColor]);
	cache_get_value_name_int(0, "RainbowBuyed", PI[playerid][pRainbowBuyed]);

	cache_get_value_name(0, "ChatRoom", global_str), Int_UnPackMassive(global_str, PI[playerid][pChatRoom]);
	cache_get_value_name(0, "HotKeys", global_str), global_str = strlen(global_str) < 2 ? "74,75,88,79,76,85,82,80,77,162":global_str, Int_UnPackMassive(global_str, PI[playerid][pHotKeyInfo]);
	cache_get_value_name(0, "CustomDance", global_str), Int_UnPackMassive(global_str, PI[playerid][pCustomDance]);

	cache_get_value_name(0, "InventoryNumber", global_str), String_UnPackMassive(global_str, InventoryNumber[playerid][0]);
	cache_get_value_name(0, "InventoryNumberRegion", global_str), String_UnPackMassive(global_str, InventoryNumber[playerid][1]);
	cache_get_value_name(0, "InventoryNumberRegionType", global_str), String_UnPackMassive(global_str, InventoryNumber[playerid][2]);

	cache_get_value_name_int(0, "FullDostup", AdminInfo[playerid][admFullDostup]);
	cache_get_value_name(0, "AdminPassword", AdminInfo[playerid][admPassword]);
  	cache_get_value_name(0, "AdminTag", AdminInfo[playerid][admTag]);
    cache_get_value_name(0, "AdminTagColor", AdminInfo[playerid][admTagColor]);

	LoadPBAccess(playerid, true);

	for(new i; i < PI[playerid][pInvCell]; i++) 
	{
		if(i < 7) 
		{
			if(PI[playerid][pChatRoom][i]) 
			{
				if(!i && PI[playerid][pVIP] < 5 or i == 1 && !(PI[playerid][pMember] && TeamDuty{playerid}) or i == 2 && !PI[playerid][pMember] or i == 3 && FP_Data[playerid][F_FAMILY_ID] == -1 or i == 7 && !PlayerJob[playerid]) continue;
				showPlayerChatRoom(playerid, true, ChatRoom_data[i][data_CMD], TextFind(ChatRoom_data[i][data_CMD], "Орг. чат") && (PI[playerid][pMember] && TeamDuty{playerid}) && !IsAtGang(playerid) ? TeamColors[GetTeamID(playerid)][0] : ChatRoom_data[i][data_Color], ChatRoom_data[i][data_Info], ChatRoom_data[i][data_Name]);
			}
		}

		if(i < 9) playerUpdateInterface(playerid, i);

		if(Inventory[playerid][6][i] < Global_Time && IsItemTimeDeleted(Inventory[playerid][0][i]))
			ClearItem(playerid, i, 1);
	}
	
 	pTemp[playerid][tAuthorized] = true;
	new hour, minute, day, month, year;
	gettime(hour, minute, _), getdate(year, month, day);
	pTemp[playerid][tAuthSuccessTime] = Global_Time + ((hour * minute) / (year * month * day));

	GetPlayerIp(playerid, PlayerIp[playerid], 16);

	f(global_str, 150, "UPDATE `accounts` SET `OldIP` = '%s',`Online_status`='1001' WHERE `ID` = '%i'", PlayerIp[playerid], PI[playerid][pID]);
    mysql_tquery(mysql, global_str);
	
	amlf("Игрок <a href=../pages/user?id=%d>%s</a> вошёл на сервер. IP: %s", 0, "","", PI[playerid][pID], PN(playerid), PlayerIp[playerid]);
	//
	if(PI[playerid][pHouseKey] > OWNABLEHOUSES) PI[playerid][pHouseKey] = -1;
	//
	SetPlayerScore(playerid, PI[playerid][pLevel]);
	GivePlayerMoney(playerid, PI[playerid][pMoney]);
	if(PI[playerid][pHealth] > 5) UpdatePlayerHealth(playerid, PI[playerid][pHealth]);
	else UpdatePlayerHealth(playerid, 20);
	OnLoadPass(playerid);
	LoadPlayerCar(playerid, -1);
	playerEditAccessories_load(playerid);
	if(TeamDuty{playerid}) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
	else SetPlayerColor(playerid, 0xFDFCFC15);
	for(new i; i < 11; i++) TextDrawHideForPlayer(playerid, IntroLogo[i]);
	if(IsAtGang(playerid) || IsAtMafia(playerid)) SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);

	if(IsPlayerHaveBodyguard(playerid))
		LoadPlayerBodyguards(playerid);
	
	if(PI[playerid][pMember][1])
	{
	    if(!GetString(OrgInfo[PI[playerid][pMember][1]][oLeader], PN(playerid)))
	    {
	        if(IsACop(playerid))
			{
				if(UsingShield{playerid}) RemovePlayerAttachedObject(playerid, 7);
				PI[playerid][pShield] = 0.0;
			}
	    	SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	    	PI[playerid][pMember][1] =
	    	PI[playerid][pMember][0] =
	    	PI[playerid][pDCTime]=
	    	PI[playerid][pRank] = 0;
	    	SetBumSkin(playerid);
	    	SCM(playerid, COLOR_GREY, !"Вы были сняты с поста лидера");
	    }
	}

	if(PI[playerid][pRainbowColor])
	{
		if(PI[playerid][pRainbowBuyed])
		{
			SCM(playerid, COLOR_YELLOW, "[!] {ffffff}На данный момент у вас включен {FF0000}радужный {ffffff}никнейм");
			SCM(playerid, COLOR_YELLOW, "[!] {ffffff}Что бы отключить его используйте {FF0000}/rainbow");
			Rainbow[playerid] = SetTimerEx("RainbowNickName", 1000, true, "i", playerid);
		}
	}

	f(global_str, 128, "~n~~n~~n~~n~~n~~n~~w~Welcome~n~~b~%s", PN(playerid));
	GameTextForPlayer(playerid, global_str, 5000, 6);

	if(PI[playerid][pMember][1] or PI[playerid][pAdmin])
	{
	    foreach(Admin, i)
	    {
	        if(PI[i][pAdmin] && ADuty{i})
	        {
			    if(!AdminInfo[i][admIP]) f(global_str, 256, "Игрок/админ %s[%d] зашел [reg ip:%s] -- [norm ip: %s]", PN(playerid), playerid, PlayerRegIP[playerid], PlayerIp[playerid]);
				else f(global_str, 128, "Игрок/админ %s[%d] зашел.", PN(playerid), playerid);
				SCM(i, COLOR_OLDRED, global_str);
			}
		}
	}

	if(!PI[playerid][pHungryShow]) Hunger(playerid,0);
	if(strlen(PI[playerid][pOpisanie]) > 3)
	{
		SCM(playerid, COLOR_YELLOW, "Описание вашего персонажа:");
		SCM(playerid, COLOR_GREY, PI[playerid][pOpisanie]);
	}
	
	ClearChatForPlayer(playerid);
	SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}На сервере есть инвентарь, используйте клавишу Y для работы с ним.");
 	SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}Вы можете задать вопрос в нашу техническую поддержку /report.");


 	if(PI[playerid][pRank]>0 && PI[playerid][pMember][0]==0)PI[playerid][pRank]=0;

	if(PI[playerid][pCredit] > 200000)
	{
	    f(global_str, 256, "Долг центральному банку штата составляет: %d$. Оплатите кредит во избежание блокировки аккаунта.", PI[playerid][pCredit]);
	    SCM(playerid, COLOR_ACHAT, global_str);
	    f(global_str, 256, "[A] %s[%d] зашел в игру. На данный момент у него задолженность в банке %d$", PN(playerid), playerid, PI[playerid][pCredit]);
	    SendAdminsMessage(COLOR_ORANGE, global_str);
	    OrgInfo[TEAM_BANK][oBank] += 100000;
	    SaveOrg(TEAM_BANK);
	}
	
	if(bitcoin)
		AddItem(playerid, 1811, bitcoin), UpdatePlayerDataInt(playerid, "Bitcoin", 0);

	f(global_str, 128, "SELECT * FROM notif WHERE ownerid = %d", PI[playerid][pID]);
	mysql_tquery(mysql, global_str, "ShowNotifPlayer", "d", playerid);
	
	if(BitcoinUpdate)
	{
		if(BitcoinUpdate > 0)
			AddItem(playerid, 1811, BitcoinUpdate);
		else
			DeleteItem(playerid, 1811, abs(BitcoinUpdate));

		UpdatePlayerDataInt(playerid, "BitcoinUpdate", BitcoinUpdate = 0);
	}

	if(GetTrailer(playerid) != -1)
	{
	    if(IsValidTrailer(GetTrailer(playerid)))
	    {
			if(!TrailerInfo[GetTrailer(playerid)][tParked] && PI[playerid][pDCTime] == 4) PI[playerid][pDCTime] = 0;
			PI[playerid][pTrailerKey] = GetTrailer(playerid);
		}
	}
	if(PI[playerid][pWarns] > 0)
	{
		PI[playerid][pMember][0] = 0;
		PI[playerid][pMember][1] = 0;
		PI[playerid][pRank] = 0;
		if(PI[playerid][pDCTime] == 2) PI[playerid][pDCTime]=0;
	}
    if(PI[playerid][pWarns] > 2)
	{
	    SCM(playerid, COLOR_RED, !"Ваш аккаунт заблокирован!");
	    PI[playerid][pWarns] = 0;
		BanPlayer(playerid);
	}
	switch(PI[playerid][pDCTime])
	{
	    case 1: if(PI[playerid][pHouseKey] == -1) PI[playerid][pDCTime] = 0;
	    case 2: if(!PI[playerid][pMember][0]) PI[playerid][pDCTime] = 0;
	}
	foreach(Vehicle, i)
	{
	    if(!IsValidVehicle(OwnableCar[i])) continue;
	    if(GetString(CarInfo[i][cOwner], PN(playerid))) DestroyVehicleEx(OwnableCar[i]);
	}
	NoEnterPickup[playerid] = 6;
	CreatePlayerMapDraws(playerid);
	
	if(PI[playerid][pVIP][0] < 5)
	{
		if(!( floatround( (PI[playerid][pVipTime] - Global_Time)/3600/24, floatround_ceil )>= 1))
	    {
	        if(PI[playerid][pVIP][0] > 0)
	     	{
		        if(PI[playerid][pVIP][0] > 1)
		    	{
			     	SCM(playerid, COLOR_LIGHTBLUE, "[Важно] {FFFFFF}Срок вашего VIP аккаунта истек, уровень VIP понижен и продлен!");
			    	PI[playerid][pVipTime] = Global_Time + (30 * 24 * 60 * 60);
		    	}
                else if(PI[playerid][pVIP][0] == 1) SCM(playerid, COLOR_LIGHTBLUE, "[Важно] {FFFFFF}Срок вашего VIP аккаунта истек, уровень VIP был снят.");
	       		PI[playerid][pVIP][0] --;
     		}
    	}
	}

	if(IsValidHouse(PI[playerid][pHouseKey]))
	{
	    new bool: on = false;
		new s = GetHouseStyle(PI[playerid][pHouseKey]);
		if(s != -1)
		{
			for(new i; i < HouseRooms[s]; i++)
			{
				if(GetString(HRoomOwner[PI[playerid][pHouseKey]][i], PN(playerid)))
				{
	                on = true;
	                break;
				}
			}
			if(on == false && !GetString(HouseInfo[PI[playerid][pHouseKey]][hOwner], PN(playerid))) PI[playerid][pHouseKey] = -1;
		}
	}
	else 
		PI[playerid][pHouseKey] = -1;

	if(!(PI[playerid][pFarmOwner] == -1) && !GetString(FarmData[PI[playerid][pFarmOwner]][farmOwner], PlayerName[playerid]))
		UpdatePlayerDataInt(playerid, "FarmOwner", PI[playerid][pFarmOwner] = -1);

	if(PI[playerid][pInvCell] > InventoryMaxSlot)
		UpdatePlayerDataInt(playerid, "InvCell", PI[playerid][pInvCell] = InventoryMaxSlot);

	switch(GetPlayerLauncher(playerid))
	{
		case 0: { }
		case 1: 
		{
			if(pTemp[playerid][cefAuth]) 
				executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"null\"]');"), 
				cursorPlayer(playerid, 0, false);

			showPlayerBattlepassKey(playerid, "Добро пожаловать!", "Новый BattlePass уже доступен для прохождения, успей забрать уникальные награды первым!");
			CallTimeOutFunction("sendInventoryCefItems", 500, false, "iii", playerid, 0, 14);
		}
		case 2: eventMobile(playerid, {9, 3}, !"success");
	}

 	CreateSpawnTextDraws(playerid);
	SetFullness(playerid, Fullness[playerid]);
	CreateOpisanie(playerid);
	//---------
	if(!(FP_Data[playerid][F_FAMILY_ID] == -1))
		LoadFamilyDataPlayer(playerid, FP_Data[playerid][F_FAMILY_ID]);

	UpdatePlayerDataInt(playerid, "AcceptAdmin", AcceptAdm{playerid} = bool:GetString(PI[playerid][pLastIP], PlayerIp[playerid]));
	//---------
	GetPlayerIp(playerid, PI[playerid][pLastIP], 16);
	PreloadAllAnimLibs(playerid);

	return PlayerSpawn(playerid);
}

stock CreateNotifPlayer(playerid, const msg[])
{
	format(mysql_string, 512, "INSERT INTO notif (`ownerid`, `MSG`) VALUES (%d, '%s')", PI[playerid][pID], msg);
	mysql_query(mysql, mysql_string, false);
	return true;
}

public: ShowNotifPlayer(playerid) 
{
	new count = cache_num_rows();
	
	if(count)
	{
		SCM(playerid, COLOR_OLDRED, "Уведомление от сервера:");
		
		for(new i; i < count; i++)
		{
			cache_get_value_name(i, "MSG", SQL_GET_ROW_STR[0]);
			cache_get_value_name(i, "Date", SQL_GET_ROW_STR[1]);
			SCMF(playerid, COLOR_YELLOW, "[%s] %s", SQL_GET_ROW_STR[1], SQL_GET_ROW_STR[0]);
		}

		SQL("DELETE FROM notif WHERE ownerid = %d", PI[playerid][pID]);
	}

	return true;
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(!pTemp[playerid][tAuthorized]) 
		return false;

    if(result == -1 && pTemp[playerid][tAuthorized])
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Неизвестная команда! Введите /help для просмотра доступных функций."), false;

    return true;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(!pTemp[playerid][tAuthorized]) 
		return false;

	if(!CheckAdminCommand(playerid, cmd))
		return false;

	return true;
}

stock CheckAdm(playerid, level, CheckAutorizaction = 1, CheckAcceptAdmin = 1)
{
	if(PI[playerid][pAdmin] < level)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {cccccc}У Вас нет доступа к этой команде."), false;	

	else if(!ADuty{playerid} && CheckAutorizaction)
		return SCM(playerid, COLOR_GREY, !"[A] Вы не авторизованы. Используйте {33CCFF}/apanel"), false;

	else if(!AcceptAdm{playerid} && CheckAcceptAdmin)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Наблюдается попытка взлома!"), SendAdminsMessage(COLOR_OLDRED, (str_f("%s [%d] подозревается во зломе, проверьте его и авторизируйте /acceptadmin [6+ lvl]", PN(playerid), playerid))), false;

 	return true;
}

stock CheckAdminCommand(playerid, command[])
{
	for(new i; i < sizeof(AdminCommandList); i++) 
	{
		if(!GetString(AdminCommandList[i][adminCommand], command) && !TextFind(AdminCommandList[i][adminCommandAlias], (str_f("|%s|", command))))
			continue;
		
		if(!CheckAdm(playerid, AdminCommandList[i][adminLevel], AdminCommandList[i][adminCheckAuthorization], AdminCommandList[i][adminCheckAccept]) or AdminCommandList[i][adminAccess] && !IsOsnovatel(playerid, AdminCommandList[i][adminAccess])) 
			return false;

		if(AdminCommandList[i][adminAntiSlivTime])
		{
			if(Int_GetPlayerData(playerid, command) > Global_Time)
				return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{cccccc} Воспользоваться данной командой вы сможете через {FFFFFF}%d{cccccc} секунд!", Int_GetPlayerData(playerid, command) - Global_Time), false;

			else 
				Int_SetPlayerData(playerid, command, Global_Time + AdminCommandList[i][adminAntiSlivTime]); 
		}
	}

	return true;
}

stock LoadAdminCommands()
{
	new id, Cache:result = mysql_query(mysql, "SELECT * FROM command ORDER BY id");
	
	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_name_int(i, "id", id);
		cache_get_value_name_int(i, "level", AdminCommandList[id][adminLevel]);
		cache_get_value_name_int(i, "access", AdminCommandList[id][adminAccess]);
		cache_get_value_name_int(i, "timeout", AdminCommandList[id][adminAntiSlivTime]);
		cache_get_value_name_int(i, "authorization", AdminCommandList[id][adminCheckAuthorization]);
		cache_get_value_name_int(i, "accept", AdminCommandList[id][adminCheckAccept]);
	}
	SetTimer("checkCefConnect", 10000, true);
	return cache_delete(result);
}

cmd:setrazdacha(playerid, data[])
{
	if(!IsOsnovatel(playerid)) 
		return false;
	
	extract data -> new itemId, count; else
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /setrazdacha [ид предмета] [количество] {FFFFFF}(ЧТОБЫ ОТКЛЮЧИТЬ РАЗДАЧУ ИСПОЛЬЗУЙТЕ ИД ПРЕДМЕТА КАК 0)");

	if(itemId < 0 or sizeof(ItemsInfo) < itemId)
		return SendErrorMessage(playerid);

	if(count < 1 or count > ItemsInfo[itemId][itemStack])
		return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Для данного предмета количество для раздачи должно быть в диапозоне от 1 до %d шт.", ItemsInfo[itemId][itemStack] );

	SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы поставили на раздачу %s ( %d шт.)", ItemsInfo[itemId][itemName], count);
	
	RazdachaData[razdacha_itemid] = itemId;
	RazdachaData[razdacha_count] = count;

	return true;
}

cmd:admincommands(playerid, data[])
{
	if(!IsOsnovatel(playerid)) 
		return false;

	extract data -> new level; else
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /admincommands [lvl adm (1-8)]");

	if(level > 8 or level < 1)
		return SendErrorMessage(playerid);

	global_str = "{FFFFFF}Команда\t{FFFFFF}Доступна с уровня\t{FFFFFF}AntiSpam-Time (seconds)\t{FFFF00}Access (Дополнительные)";

	for(new i, num; i < sizeof(AdminCommandList); i++) 
	{	
		if(!(AdminCommandList[i][adminLevel] == level)) continue;

		spdList(playerid, num, i);
		strcat(global_str, (str_f("\n{FFFF00}%s\t{FFFFFF}%d\t{FFFFFF}%d\t%s", AdminCommandList[i][adminCommand], AdminCommandList[i][adminLevel], AdminCommandList[i][adminAntiSlivTime], Admin_Command_Type[AdminCommandList[i][adminAccess]])));
		num++;
	}

	return SPD(playerid, 9910, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF} Admin Commands Editor", global_str, !"»", !"x");
}

stock IsARPPN(Name[])
{
	if(strlen(Name)>19) return 0;
	if(!strlen(Name)) return 0;
	new simb_, num; static RP_Name[2][24];
	for(new i = 0;i < strlen(Name);i ++)
	{
	    if(Name[i] == '_') {simb_ ++; num=i;}
	}
	if(simb_ != 1) return 0;
	strmid(RP_Name[0], Name, 0, num-1);
	strmid(RP_Name[1], Name, num+1, strlen(Name));
	if( !IsAGoodPN(RP_Name[0]) || !IsAGoodPN(RP_Name[1]) ) return 0;
	return 1;
}

stock IsAGoodPN(Name[])
{
	new NameChars;
	if(strlen(Name) < 2) return 0;
	if(Name[0] < 'A' || Name[0] > 'Z') return 0;
	for(new i = 1;i < strlen(Name);i ++)
	{
	    if(Name[i] < 'a' || Name[i] > 'z')
		{
		    if(Name[i] >= 'A' && Name[i] <= 'Z') NameChars ++;
		    else return 0;
		}
	    if(NameChars > 1) return 0;
	}
	return 1;
}

stock IsAFireGun(gunid)
	return (gunid >= 22 && gunid <= 38);

stock EnableGPSForPlayer(playerid, Float:x, Float:y, Float:z)
	return gpss[playerid] = 1, SetPlayerRaceCheckpoint(playerid, 1, Float:x, Float:y, Float:z, Float:x, Float:y, Float:z, 4.0), GameTextForPlayer(playerid, "GPS: ON", 0, 1), true;

stock CheckPointForPlayer(playerid, Float:x, Float:y, Float:z)
	return gpss[playerid] = 1, SetPlayerRaceCheckpoint(playerid, 1, Float:x, Float:y, Float:z, Float:x, Float:y, Float:z, 4.0), true;

stock GetTeamID(playerid)
{
	for(new i; i < 2; i++)
		if(PI[playerid][pMember][i] > 0) return PI[playerid][pMember][i];

	return false;
}

stock GunPN(gunid)
	return WeaponNames[gunid];

stock SetPlayerVehicleSpeed(vehicleid, mph)
{
	if(IsABike(vehicleid)) return 0;
	new Float:Vx, Float:Vy, Float:Vz ,Float:speeds, Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	speeds = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(speeds > 0)
	{
		multiple = (mph / (speeds * 180));
		return SetVehicleVelocity(vehicleid, Vx*multiple, Vy*multiple, Vz*multiple);
	}
	return 1;
}

stock SetVehicleSpeed(vehicleid, speed_kmph)
{
	if(speed_kmph < 1) speed_kmph = 1;
	new Float: v[3], cur_speed_kmph;
	GetVehicleVelocity(vehicleid, v[0], v[1], v[2]);
	cur_speed_kmph = floatround(200.0 * floatsqroot( v[0]*v[0] + v[1]*v[1] + v[2]*v[2]), floatround_floor);
	if(cur_speed_kmph <= 0)
	{
		new Float: zAngle;
		GetVehicleZAngle(vehicleid, zAngle);
		new Float: newVelX = floatcos((zAngle -= 270.0), degrees ) * speed_kmph / 200.0;
		SetVehicleVelocity(vehicleid, newVelX, floattan(zAngle,degrees) * newVelX, 0.0);
		return;
	}
	new Float:vMultiplier = float(speed_kmph) / float(cur_speed_kmph);
	SetVehicleVelocity(vehicleid, v[0] * vMultiplier, v[1] * vMultiplier, v[2] * vMultiplier);
}

stock GetPlayerVehicleSpeedZ(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
    new Float:X, Float:Y, Float:Z;
	GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
	return floatround( floatsqroot( X * X + Y * Y) * 180.0 );
}

stock GetPlayerVehicleSpeed(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
    new Float:X, Float:Y, Float:Z;
	GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
	return floatround( floatsqroot( X * X + Y * Y + Z * Z ) * 180.0 );
}

stock PlayerSpeed(playerid)
{
    new Float:X, Float:Y, Float:Z;
    if(!IsPlayerInAnyVehicle(playerid)) GetPlayerVelocity(playerid,X,Y,Z);
    return floatround( floatsqroot( X * X + Y * Y + Z * Z ) * 170.0 );
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(IsAOwnableCar(vehicleid))
	{
	    new number = GetVehicleID(vehicleid);
	    CarInfo[number][cColor_1] = color1;
	    CarInfo[number][cColor_2] = color2;
	    SaveOwnableCar(number);
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(!ImprovementsData[playerid][idSchumacher])
    {
	    new carid = GetPlayerVehicleID(playerid);
	    if(IsAVelik(carid)) return 1;
		EngineStalled[playerid]++;
		if(EngineStalled[playerid] >= 3 && GetEngineStatus(carid))
		{
			SetEngineStatus(vehicleid, false, playerid);
			GameTextForPlayer(playerid, "ENGINE ~r~OFF", 1000, 6);
			EngineStalled[playerid] = 0;
		}
	}
	if(IsACar(vehicleid))
	{
	    if(ImprovementsData[playerid][idCarSkill])
			return 1;

	    if(!PI[playerid][pCarSkill]) {
	        KillTimer(besttime[playerid]);
	        besttime[playerid] = 0;
		    besttime[playerid] = CallTimeOutFunction("CarSkill", 600000, false, "d", playerid);
		    return 1;
	    }

		Carskill[playerid] ++;
		if(Carskill[playerid] == 4) {
		    GameTextForPlayer(playerid, !"CAR SKILL -2", 0, 1);
		    PI[playerid][pCarSkill] -= 2;
		    if(besttime[playerid]) {
		        KillTimer(besttime[playerid]);
		        besttime[playerid] = 0;
		    }
		    besttime[playerid] = CallTimeOutFunction("CarSkill", 600000, false, "d", playerid);
		    Carskill[playerid] = 0;
	    }
	    for(new i = 0; i < 9; i ++)
		{
	    	if(CarInfo[vehicleid][cInvCell][i] != 4125) return
				SetTimerEx("CrashDamage", 5000, false, "i", playerid);
		}
			    
    }
	return 1;
}

public: CrashDamage(playerid)
{
    PI[playerid][pHealth] -= randomF(12, 3);
	J_SetPlayerDrunkLevel(playerid, randomF(80, 30));
    GameTextForPlayer(playerid, !"~r~CRASH DAMAGE!", 5000, 1);
    SCM(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Советуем Вам купить 'Улучшенный ремень безопасности', он позволит Вам не получать урон когда Вы врезаетесь");
}

stock CheckPassengers(vehicleid)
{
	for(new i; i < 10; i ++)
	    if(VehicleSeat[vehicleid][i] != INVALID_PLAYER_ID && !IsPlayerInVehicle(VehicleSeat[vehicleid][i], vehicleid)) VehicleSeat[vehicleid][i] = INVALID_PLAYER_ID;

	return true;
}

stock SetPlayerNameEx(playerid, const name[])
{
	if(TextFind(name, "{") or TextFind(name, "}"))
		Kick(playerid);

    SetPlayerName(playerid, name);
 	return strmid(PlayerName[playerid], name, 0, strlen(name));
}

stock GetPlayerWeaponEx(playerid)
	return pTemp[playerid][pWeapon];

stock GetVehicleModelEx(carid)
	return VehicleInfo[carid][vModel];

stock AutoCarSpawn()
{
	foreach(new i: Player)
	{
		if(!PhoneImprovementsData[i][pdSpawnCarMessage])
		{
			SCM(i, COLOR_RED, !"[Cервер] {FFFFFF}Уважаемые игроки!\n\
						{FF6347}[Сервер] {FFFFFF}Через 60 секунд произойдет респаун транспорта!\n\
						{FF6347}[Сервер] {FFFFFF}Займите автомобили, чтобы они не пропали");
						
		    GameTextForPlayer(i, !"RESPAWN CARS 60 SEC", 0, 1);
		}
	}
    SetTimer("AutoCarSpawnStart", 60000, false);
    return 1;
}

public: AutoCarSpawnStart()
	return RespawnCars(1, CountVehicles());

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
		if(Int_GetPlayerData(playerid, "InstallVehicleObject_slot"))
		{
			DestroyDynamicObjectModel(-1, EditObjectPlayer[playerid], 18698);
			
			if(!IsPlayerInHisVehicle(playerid)) return DeletePVar(playerid, "InstallVehicleObject_slot");
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return DeletePVar(playerid, "InstallVehicleObject_slot");
			
			new Float:rotC[3], vehId = GetVehicleID(GetPlayerVehicleID(playerid));
			GetVehicleRot(GetPlayerVehicleID(playerid), rotC[0],rotC[1],rotC[2]);
			CarInfo[vehId][TunPosX][Int_GetPlayerData(playerid, "InstallVehicleObject_slot")-1] = AVEditPos[playerid][0];
			CarInfo[vehId][TunPosY][Int_GetPlayerData(playerid, "InstallVehicleObject_slot")-1] = AVEditPos[playerid][1];
			CarInfo[vehId][TunPosZ][Int_GetPlayerData(playerid, "InstallVehicleObject_slot")-1] = AVEditPos[playerid][2];
			CarInfo[vehId][TunRotX][Int_GetPlayerData(playerid, "InstallVehicleObject_slot")-1] = rx;//-rotC[0];
			CarInfo[vehId][TunRotY][Int_GetPlayerData(playerid, "InstallVehicleObject_slot")-1] = ry-rotC[1];
			CarInfo[vehId][TunRotZ][Int_GetPlayerData(playerid, "InstallVehicleObject_slot")-1] = rz-rotC[2];
			InstallTun(GetPlayerVehicleID(playerid), Int_GetPlayerData(playerid, "InstallVehicleObject_slot")-1, 0);
			SaveTunInv(GetPlayerVehicleID(playerid));
			Streamer_Update(playerid);

			AVEditPos[playerid][0] =
			AVEditPos[playerid][1] =
			AVEditPos[playerid][2] = 0.0;
			DeletePVar(playerid, "InstallVehicleObject_slot");
		}
		
		if(Int_GetPlayerData(playerid, "EditObjectHouse"))
		{
			new id = Int_GetPlayerData(playerid, "object_edit_id");
			DeletePVar(playerid, "EditObjectHouse"), DeletePVar(playerid, "object_edit_id");

			if(Float:GetEditBH_object_distance(playerid, x,y,z) > 20.0) 
			{
				SetDynamicObjectPos(BH_Object[id][objID], BH_Object[id][objPosX], BH_Object[id][objPosY], BH_Object[id][objPosZ]);
				SetDynamicObjectRot(BH_Object[id][objID], BH_Object[id][objRotX], BH_Object[id][objRotY], BH_Object[id][objRotZ]);
				return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Вы не можете установить данный объект, можно на расстояние до 20 метров от своего недвижемого имущества!");
			}

			BH_Object[id][objPosX] = x;
			BH_Object[id][objPosY] = y;
			BH_Object[id][objPosZ] = z;
			BH_Object[id][objRotX] = rx;
			BH_Object[id][objRotY] = ry;
			BH_Object[id][objRotZ] = rz;
			
			SetDynamicObjectPos(BH_Object[id][objID], x,y,z);
			SetDynamicObjectRot(BH_Object[id][objID], rx,ry,rz);

			SQL("UPDATE `bh_objects` SET `PosX` = '%f', `PosY` = '%f', `PosZ` = '%f', `RotX` = '%f', `RotY` = '%f', `RotZ` = '%f' WHERE ID = '%d'", x,y,z, rx, ry, rz, BH_Object[id][objBaseID]);
			
			SCM(playerid, 0x6495EDFF, !"[Информация]{FFFFFF} Вы успешно передвинули предмет. Если хотите убрать или передвинуть, введите /pobject возле него.");
		}
		
		else if(Int_GetPlayerData(playerid, "AdminMappingID"))
		{
			new id = Int_GetPlayerData(playerid, "AdminMappingID");
			
			AdminMapping_Update(id, x,y,z, rx, ry, rz);
			
			DPlayerData(playerid, "AdminMappingID");
		}
	}
	else if(response == EDIT_RESPONSE_CANCEL)
    {
    	if(Int_GetPlayerData(playerid, "install_house_obj"))
			DeletePVar(playerid, "install_house_obj"),
			DestroyObject(EditObjectPlayer[playerid]);
		
		else if(Int_GetPlayerData(playerid, "EditObjectHouse"))
		{
			new id = Int_GetPlayerData(playerid, "object_edit_id"); DeletePVar(playerid, "EditObjectHouse"), DeletePVar(playerid, "object_edit_id");
			SetDynamicObjectPos(BH_Object[id][objID], BH_Object[id][objPosX], BH_Object[id][objPosY], BH_Object[id][objPosZ]);
			SetDynamicObjectRot(BH_Object[id][objID], BH_Object[id][objRotX], BH_Object[id][objRotY], BH_Object[id][objRotZ]);
		}
		
		else if(Int_GetPlayerData(playerid, "AdminMappingID"))
		{
			new id = Int_GetPlayerData(playerid, "AdminMappingID");
			
			SetDynamicObjectPos(objectid, AdminMapping[id][AM_Pos][0], AdminMapping[id][AM_Pos][1], AdminMapping[id][AM_Pos][2]);
			SetDynamicObjectRot(objectid, AdminMapping[id][AM_Rot][0], AdminMapping[id][AM_Rot][1], AdminMapping[id][AM_Rot][2]);
			
			DPlayerData(playerid, "AdminMappingID");
		}
		
		return CancelEdit(playerid);
    }
	else if(response == EDIT_RESPONSE_UPDATE)
	{
		if(Int_GetPlayerData(playerid, "InstallVehTun"))
		{
			if(!IsValidDynamicObject(EditObjectPlayer[playerid])) return 0;
			new Float:A,Float:X,Float:Y,Float:Z,vehicleid = GetPlayerVehicleID(playerid);
			GetVehicleZAngle(vehicleid, A);
			GetVehiclePos(vehicleid, X,Y,Z);
			if(A > 225.0000 && A < 350.0000){
				AVEditPos[playerid][0] = -(y-Y);
				AVEditPos[playerid][1] = (x-X);
			}
			else if(A > 90.0000 && A < 135.0000)
			{
				AVEditPos[playerid][0] = (y-Y);
				AVEditPos[playerid][1] = (X-x);
			}
			else if(A > 135.0000 && A < 225.0000){
				AVEditPos[playerid][0] = (x-X);
				AVEditPos[playerid][1] = (y-Y);
			}
			else if(A > 0.0000 && A < 90.0000){
				AVEditPos[playerid][0] = (y-Y);
				AVEditPos[playerid][1] = -(x-X);
			}
			else{
				AVEditPos[playerid][0] = (x-X);
				AVEditPos[playerid][1] = (y-Y);
			}
			AVEditPos[playerid][2] = (z-Z);
			new Float:rotC[3];
			GetVehicleRot(vehicleid, rotC[0],rotC[1],rotC[2]);
			UpdateAttachedVehicleObject(TunInvCar[vehicleid][0][Int_GetPlayerData(playerid, "InstallVehTun")-1], AVEditPos[playerid][0], AVEditPos[playerid][1], AVEditPos[playerid][2], rx,ry-rotC[1],rz-rotC[2]);
		}
	}
	else if(Int_GetPlayerData(playerid, "InstallVehTun"))
	{
		DestroyDynamicObjectModel(-1, EditObjectPlayer[playerid], 18698);
		DeletePVar(playerid, "InstallVehTun");
		CancelEdit(playerid);
		Streamer_Update(playerid);
	}
	
	return 1;
}

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float: fX, Float: fY, Float: fZ)
{
	if(PI[playerid][pAdmin] >= 7 && IsAdminMapping(playerid, objectid))
		AdminMapping_Edit(playerid, Int_GetPlayerData(playerid, "AdminMappingID"));
	
	return true;
}

public: Modellimit()
{
	for(new i; i < SELLCARS; i++)
	{
	    if(SellInfo[i][scSpawn] || !SellInfo[i][scCount]) continue;
		
	    new id = J_AddStaticVehicleEx(SellInfo[i][scModel],SellInfo[i][sc_PosX],SellInfo[i][sc_PosY],SellInfo[i][sc_PosZ],SellInfo[i][sc_PosA], 1,1,0,0,0,-1,-1,i);
	    CarText[id] = CreateDynamic3DTextLabel(!"-", -1,0,0,0.5,5.0, INVALID_PLAYER_ID, id);
	    
		SellCard[id] = i;
	    SellInfo[i][scSpawn] = true;
	    
		UpdateCarInfo(id);
	}
}

public: UpdatePlayerRemote(playerid)
{
	if(bool:Int_GetPlayerData(playerid, "P_SEAT_STATUS") == true)
		AnimPlayed{playerid} = true, TextDrawShowForPlayer(playerid, StopAnimation);
	
	return true;
}

public: UpdatePlayer()
{
	foreach(Player, playerid)
	{
		if(!pTemp[playerid][tAuthorized]) continue;
		if(GetPlayerWeaponEx(playerid) == 38 && !PI[playerid][pAdmin]) ToCheat(playerid, 15);
	
		if(!PlayerAFKTime[playerid][0])
		{
			if(ChangeColorStart{playerid})
			{
				ChangeColorTimer[playerid]--;
				if(ChangeColorTimer[playerid] == 0)
				{
					ChangeColorStart{playerid} = false;
					ChangeColorTimer[playerid] = 0;
					if(random(50) >= randomF(0,50))
					{
						SCMF(playerid, COLOR_VALIK, "[Подсказка] {ffffff}Покраска аксессуара успешно окончена. Аксессуар {ffffff}\"%s\" был перекрашен в %s {ffffff}цвет", ItemsInfo[Inventory[playerid][0][ChangeColorItem[playerid][0] - 1]][itemName], AksMassive[GetPVarInt(playerid, "idcolorchange")][AksColorName]);
						Inventory[playerid][2][ChangeColorItem[playerid][0] - 1] = GetPVarInt(playerid, "idcolorchange");
						InventSlotUse[playerid][ChangeColorItem[playerid][0] - 1] = false,
						InventSlotUpdate(playerid, GetInvID(playerid, ChangeColorItem[playerid][0] - 1, 1), ChangeColorItem[playerid][0] - 1),
						ChangeColorItem[playerid][0] = 0, DeletePVar(playerid, "idcolorchange");
						if(IsPlayerTextDrawVisible(playerid, ColorsChangeTD[playerid][29])) DestroyPlayerTD(playerid, ColorsChangeTD[playerid][29]);
					}
					else
						SCMF(playerid, COLOR_VALIK, "[Подсказка] {ffffff}Покраска аксессуара успешно окончена. Вам не удалось перекрасить аксессуар '%s'.", ItemsInfo[Inventory[playerid][0][ChangeColorItem[playerid][0] - 1]][itemName]);

					ClearAnimationsEx(playerid);

					Inventory[playerid][1][ChangeColorItem[playerid][2] - 1] -= 7;
					Inventory[playerid][1][ChangeColorItem[playerid][1] - 1] -= 1;
		
					UpdateChangeColor(playerid);
					
					DeleteItem(playerid, 1811, BizData[BizEntered[playerid]][bItem][2]);
					GiveBizMoney(BizEntered[playerid], BizData[BizEntered[playerid]][bItem][2] / 10);

					SaveInventory(playerid);
				}
			}

			if(GetPVarInt(playerid, !"updateArmourTime") > 0)
				SetPVarInt(playerid, !"updateArmourTime", GetPVarInt(playerid, !"updateArmourTime") - 1);
			
			for(new i, Float:Pos[4]; i < MAX_CUSTOM_NPC; i++)
			{
				new npcid = Custom_npcOptions[i][data_ID];

				if(npcid != INVALID_DATA_ID)
				{
					if(Custom_npcOptions[i][data_AttachedID] != INVALID_DATA_ID && !pTemp[Custom_npcOptions[i][data_AttachedID]][tBodyguardSpawnCount])
						deletePed(npcid, playerid), Custom_npcOptions[i][data_AttachedID] = -1;

					else 
					{
						Pos[0] = Custom_npcOptions[i][data_Float][0], 
						Pos[1] = Custom_npcOptions[i][data_Float][1], 
						Pos[2] = Custom_npcOptions[i][data_Float][2],
						Pos[3] = GetPlayerDistanceFromPoint(playerid, Pos[0], Pos[1], Pos[2]);

						if(Pos[3] < 100.0 && Custom_npcOptions[i][data_AttachedID] != playerid && !pTemp[playerid][tCreateNPC][i])
							createPed(Custom_npcOptions[i][data_ID], playerid, Custom_npcOptions[i][data_SkinID], Pos[0], Pos[1], Pos[2], 90.0, Custom_npcOptions[i][data_Float][3], Custom_npcOptions[i][data_Float][4], Custom_npcOptions[i][data_Weapons][0], Custom_npcOptions[i][data_Weapons][1], Custom_npcOptions[i][data_ColorTexts][0], Custom_npcOptions[i][data_LabelOne], Custom_npcOptions[i][data_ColorTexts][1], Custom_npcOptions[i][data_LabelTwo]), pTemp[playerid][tCreateNPC][i] = true;

						else if(Pos[3] > 100.0 && Custom_npcOptions[i][data_AttachedID] != playerid && pTemp[playerid][tCreateNPC][i])
							deletePed(Custom_npcOptions[i][data_ID], playerid), pTemp[playerid][tCreateNPC][i] = false;

						if(pTemp[playerid][tCreateNPC][i])
						{
							Pos[3] = GetPlayerDistanceFromPoint(Custom_npcOptions[i][data_AttachedID], Pos[0], Pos[1], Pos[2]);

							if(Custom_npcOptions[i][data_AttackedID] != -1)
							{
								if(Pos[3] > 50.0)
								{
									Custom_npcOptions[i][data_AttackedID] = -1;
									GetPlayerPos(Custom_npcOptions[i][data_AttachedID], Pos[0], Pos[1], Pos[2]);
									teleportPedtoCoords(npcid, Pos[0], Pos[1], Pos[2], playerid);
								}

								else if(Pos[3] < 30.0)
									GetPlayerPos(Custom_npcOptions[i][data_AttackedID], Pos[0], Pos[1], Pos[2]), movePedtoCoords(npcid, Pos[0], Pos[1], Pos[2], 7, 10000, playerid);

								else 
								{
									Pos[3] = GetPlayerDistanceFromPoint(Custom_npcOptions[i][data_AttackedID], Pos[0], Pos[1], Pos[2]);

									if(Pos[3] < 1.0)
									{
										if(PlayerAFKTime[Custom_npcOptions[i][data_AttackedID]][0] > 50)
											Custom_npcOptions[i][data_AttackedID] = -1;

										agressivePedtoPlayer(npcid, Custom_npcOptions[i][data_AttackedID], playerid);
									}

									else 
										Custom_npcOptions[i][data_AttackedID] = -1;
								}
							}
							else 
							{
								new Float:playerPos[3];
								GetPlayerPos(Custom_npcOptions[i][data_AttachedID], playerPos[0], playerPos[1], playerPos[2]);

								if(31.0 > Pos[3] > 3.4) 
									movePedtoCoords(npcid, playerPos[0] - 1.7, playerPos[1], playerPos[2], Pos[3] > 10.0 ? 7 : 6, 10000, playerid);

								if(Pos[3] > 30.0) 
									teleportPedtoCoords(npcid, playerPos[0] - 1.7, playerPos[1], playerPos[2], playerid);
							}
						}
					}
				}
			}

			new keys,lr,ud;
			GetPlayerKeys(playerid,keys,ud,lr);
			
			if(Int_GetPlayerData(playerid, "TimerDance") && !UseDanceKey[playerid])
			{
				if(lr == KEY_LEFT) CheckDanceKey(playerid, 0);
				if(ud == KEY_UP) CheckDanceKey(playerid, 1);
				if(ud == KEY_DOWN) CheckDanceKey(playerid, 2);
			}
			else if(Int_GetPlayerData(playerid,"reconopen"))
			{
				if(!Int_GetPlayerData(playerid,"CallBackReconKeys"))
				{
					if(ud == KEY_UP) 
					SelectMenuRecon(playerid, 1),
						SetPVarInt(playerid, "CallBackReconKeys", true);
												
					else if(ud == KEY_DOWN) 
						SelectMenuRecon(playerid, 0),
							SetPVarInt(playerid, "CallBackReconKeys", true);
				}
				else DeletePVar(playerid, "CallBackReconKeys"); 
			}
			// shar
			if(SharInfo[playerid][sharProgress] > 0 && SharInfo[playerid][sharVehicle] == INVALID_VEHICLE_ID && SharInfo[playerid][sharKey] > 0 && ( random(3) >= 1 ))
			{
				SharInfo[playerid][sharProgress]--;
				if(!SharInfo[playerid][sharProgress]) 
				{
					SharMenuHide(playerid);
					ResetShar(playerid);
				}
				else UpdateSharMenu(playerid);
			}

			if(GetPlayerState(playerid) == 2 && !GetPlayerLauncher(playerid))
			{
				new carid = GetPlayerVehicleID(playerid);
				if(!IsAVelik(carid) && !IsAPlane(carid) && !IsARC(carid) && !IsATrain(carid)) 
				{
					new speed = GetPlayerVehicleSpeed(playerid);
					if(VehicleInfo[carid][vModification] == 554 || VehicleInfo[carid][vModification] == 587)
					{
						if(VehicleInfo[carid][vStyle] == 1 && pEngine{playerid} && VehicleInfo[carid][vEngine])
						{
							new Float:limit = (pTemp[playerid][pLimit] ? float(pTemp[playerid][pLimit]) : float(GetVehicleMaxSpeed(carid)));
								
							if(speed > limit-10 && speed <= limit)
								SetVehicleSpeed(carid, floatround(limit)+1);
							else if(speed > 80.0 && speed < 120.0 && speed < limit)
								SetVehicleSpeed(carid, speed + 15 + random(5));
							else if(speed > 120.0 && speed < 160.0 && speed < limit)
								SetVehicleSpeed(carid, speed + 20 + random(10));
							else if(speed > 160.0 && speed < 200.0 && speed < limit) 
								SetVehicleSpeed(carid, speed + 25 + random(15));
							else if(speed > 200.0 && speed < 240.0 && speed < limit)
								SetVehicleSpeed(carid, speed + 40 + random(20));
							else if(speed > 240.0 && speed < 260.0 && speed < limit)
								SetVehicleSpeed(carid, speed + 25 + random(25));
						}
					}

					if(PI[playerid][pCarSkill] < 72 && speed > floatround((120+PI[playerid][pCarSkill])/1.58))
						SetPlayerVehicleSpeed(carid,floatround((120+PI[playerid][pCarSkill])/1.58));
					
					if(IsAOwnableCar(carid))
					{
						CarInfo[GetVehicleID(carid)][cMilage]++;

						switch PI[playerid][pCustomInterface][1] do
						{
							case 1,2: 
							{
								new BitStream:bs = BS_New();

								BS_WriteValue(bs, 
									PR_UINT8, 220, 
									PR_UINT8, 5, 
									PR_FLOAT, CarInfo[GetVehicleID(carid)][cMilage]);

								PR_SendPacketEx(bs, playerid), BS_Delete(bs);
							}
							case 3,4: executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.vehicleMileage', '[%d]');", floatround(CarInfo[GetVehicleID(carid)][cMilage]))));
						}
					}
				}
				else if(Int_GetPlayerData(playerid, "ShowTrainTable") && InJob[playerid] && PlayerJob[playerid] == 22) OnRalliyARZUpdate(playerid);
			}
		}
	}
	return true;
}

public: ServerTimer()
{
	Reklam ++;
	new year,month,day,minuite,second,hour;
   	getdate(year,month,day);
   	Global_Time = gettime(hour,minuite,second);
   	
	if(second == 0)
		MinuteTimer();

	if(!(PAYDAY_LAST_TIME == hour) && minuite == 0)
   	{
		day_of_week = getDayEx();
		
		PAYDAY_LAST_TIME = hour;
		SetWorldTime(hour);
		PayDay();
	}
	
	if(!(AUTO_NALOG_LAT_TIME == hour) && minuite == 55)
	{
		AUTO_NALOG_LAT_TIME = hour;
		AUTO_NALOG_GO();
	}

	if(!(LAST_RAZDACHA_TIME == hour) && minuite > 5 && RazdachaData[razdacha_itemid])
	{
		LAST_RAZDACHA_TIME = hour;

		foreach(Player, i)
			AddItem(i, RazdachaData[razdacha_itemid], RazdachaData[razdacha_count]);

		SCMALL(-1, (str_f("Информация: {FF6347}Всем был выдан предмет %s в количестве %d шт.", ItemsInfo[RazdachaData[razdacha_itemid]][itemName], RazdachaData[razdacha_count])));
	}

	if(!GetString(autoSelectionWinnerName, "None") && !(autoSelectionData[0] == INVALID_DATA_ID))
	{
		UpdateDynamic3DTextLabelText(autoSelectionText, COLOR_LIGHTBLUE, (str_f("[ В ожидании ]\n{FFFFFF}%s забирает %s\n\n{cccccc}Осталось примерно %d мин", autoSelectionWinnerName, autoSelectionName[autoSelectionData[0]], floatround( (autoSelectionData[1] - Global_Time) / 60 ) )));

		if(autoSelectionData[1] < Global_Time)
		{
			for(new i; i < 2; i++)
				autoSelectionData[i] = INVALID_DATA_ID,
				SetString(autoSelectionWinnerName, "None");

			UpdateDynamic3DTextLabelText(autoSelectionText, 0x31B404FF, !"[ Свободен ]");
		}
	}
	for(new mid; mid < MAX_MUSORS; mid++)
	{
	    for(new j; j < 150; j++)
			if(MusorInfo[mid][mItem][j] && MusorInfo[mid][mItemTimer][j] < Global_Time && MusorInfo[mid][mItemTimer][j] != 0)
				MusorInfo[mid][mItemTimer][j] = 0;
	}
	if(OrgBattlesState)
	{
		if(!OrgBattlesTimer[0] && !OrgBattlesTimer[1] && !OrgBattlesTimer[2]) StopBattles();

	    if(!OrgBattlesTimer[1] && OrgBattlesTimer[0])
	        OrgBattlesTimer[0] --, OrgBattlesTimer[1] = 59;

		if(!OrgBattlesTimer[2]) OrgBattlesTimer[1]--, OrgBattlesTimer[2] = 60;

		OrgBattlesTimer[2]--;

		foreach(Player, i)
		{
	    	if(IsAtGang(i) or IsAtMafia(i))
			{
	    	    if(!OrgBattlesGangKicked[PI[i][pMember]])
					UpdateBattlesTD(i);
			}
			else if(!IsAtGang(i) or !IsAtMafia(i) or OrgBattlesGangKicked[PI[i][pMember]])
				if(OrgBattlesTDOpen{i})
				    HideBattlesTD(i);
		}

        if(OrgBattlesTimeKick) OrgBattlesTimeKick--;

        if(!OrgBattlesTimeKick && CheckNeactiveOrgBattles) SetTimer("KickNeactiveGang", 1000, false);
	}

	if(hour == 20)
	{
	    if(minuite == 00 && second == 0)
		{
	        for(new i; i < 7; i++)
				TextDrawShowForAll(EventSob[i]);

	        SCMALL(-1, !"[Подсказка] {FF6347}Мероприятие: 'Собиратели', начнется в {FFFFFF}20.15! {FF6347}Используйте: /findcollectors");
		}
	    else if(minuite == 01 && second == 0)
	    {
	        for(new i; i < 7; i++)
				TextDrawHideForAll(EventSob[i]);

            SetTimer("EggsSpawn", 40000, 1);
	    }
	}

	for(new i; i < sizeof(ScreenInfo_data); i++)
	{
		if(ScreenInfo_data[i][data_Status] && ScreenInfo_data[i][data_VideoTime][1] > 0)
		{
			if(ScreenInfo_data[i][data_VideoTime][0] < ScreenInfo_data[i][data_VideoTime][1])
				ScreenInfo_data[i][data_VideoTime][0]++;

			if(ScreenInfo_data[i][data_VideoTime][0] >= ScreenInfo_data[i][data_VideoTime][1])
				destroyBrowser_object(i);
		}
	}
	
	if(11 <= hour < 22)
	{
		if(second == 0 && (minuite == 00 || minuite == 20 || minuite == 40 || minuite == 59)) 
		{
			for (new i; i < sizeof(ContInfo); i++)
			{
				if(!ContInfo[i][contStatus])
				{
					ContInfo[i][contObject] = CreateDynamicObject(1440, ContInfo[i][contPos][0], ContInfo[i][contPos][1], ContInfo[i][contPos][2], 
						ContInfo[i][contPos][3], ContInfo[i][contPos][4], ContInfo[i][contPos][5]);

					ContInfo[i][contStatus] = true;
				}
			}
		}
	}
	
	if((minuite == 0 || minuite == 29) && second == 0 && ACTIVEpanel[2]) AutoCarSpawn();
	SaveServer --;
	if(!SaveServer) SaveServerData(), SaveServer = 1800;

	if(CarSletInfo[1] - Global_Time <= 0)
	{
		//
		for(new i; i < SELLCARS; i++)
		{
		    if(SellInfo[i][scModel] == CarSletInfo[0])
		    {
		    	SellInfo[i][scCount] ++;
			    if(SellInfo[i][scSpawn]) continue;
			    new id = J_AddStaticVehicleEx(SellInfo[i][scModel],SellInfo[i][sc_PosX],SellInfo[i][sc_PosY],SellInfo[i][sc_PosZ],SellInfo[i][sc_PosA], 1,1,0,0,0,-1,-1,i);
			    CarText[id] = CreateDynamic3DTextLabel(!"-", -1,0,0,0.5,5.0, INVALID_PLAYER_ID, id);
			    SellCard[id] = i;
			    SellInfo[i][scSpawn] = true;
			    UpdateCarInfo(id);
			}
		}

		CarSletInfo[0] = slet_car_models[random ( sizeof(slet_car_models) )];
		CarSletInfo[1] = 28800 + gettime();
		//
	}

	for(new id; id < sizeof(FermaInfo); id++)
	{
		if(!FermaInfo[id][farmStatus])
        {
			FermaInfo[id][farmTimer]--;
			if(!FermaInfo[id][farmTimer])
			{
				FermaInfo[id][farmStatus] = true;
				FermaInfo[id][farmObject] = CreateDynamicObject(864, FermaInfo[id][farmPos][0],FermaInfo[id][farmPos][1],FermaInfo[id][farmPos][2]-1.0, 356.000000, 0.000000, 3.141600, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
				FermaInfo[id][farmText] = CreateDynamic3DTextLabel("Используйте: 'ALT'\n{FFFFFF}Чтобы собрать куст.", 0xAFAFAFFF, FermaInfo[id][farmPos][0],FermaInfo[id][farmPos][1], FermaInfo[id][farmPos][2], 4.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
			}
		}
	}

	if(AirDrop[air_Status] && AirDrop[air_Open])
	{
		AirDrop[air_Timer]--;
		
		format(global_str, 150, "Груз контрабанды\nИспользуйте {9ACD32}ALT{FFFFFF} для\nпросмотра содержимого!\n\n{FFFFFF}Исчезнет через: {E65075}%s", Convert(AirDrop[air_Timer]));
		UpdateDynamic3DTextLabelText(AirDrop[air_Text], -1, global_str);

		if(AirDrop[air_Timer] <= 0)
		{
			DestroyDynamicObject(AirDrop[air_Object]);
			DestroyDynamic3DTextLabel(AirDrop[air_Text]);
			AirDrop[air_Open] = false;
			AirDrop[air_Status] = false;
		}

	}

	for(new i; i < 2; i++)
	{
		for(new j; j < (i ? 17 : 8); j++)
		{
			if(BizData[NeftBizID[i][j]][bProducts] < (BizData[NeftBizID[i][j]][bState] == 32 ? (BizData[NeftBizID[i][j]][bUpgrade][0] * 1000 + 24000) : 1000000))
			{
				if(NeftTimer[i][j]) NeftTimer[i][j]--;
				else if(!NeftTimer[i][j])
				{
					if(BizData[NeftBizID[i][j]][bState] == 23)
						BizData[NeftBizID[i][j]][bProducts] += 
							68+(1*(BizData[NeftBizID[i][j]][bUpgrade][0]-1)) + random((82+(1*(BizData[NeftBizID[i][j]][bUpgrade][0]-1))) - (68+(1*(BizData[NeftBizID[i][j]][bUpgrade][0]-1))));

					if(BizData[NeftBizID[i][j]][bState] == 32)
						if(BizData[NeftBizID[i][j]][bProducts] + 16 + (BizData[NeftBizID[i][j]][bUpgrade][1] - 1) * 2 <= BizData[NeftBizID[i][j]][bUpgrade][0] * 1000 + 24000)
							BizData[NeftBizID[i][j]][bProducts] += 16 + (BizData[NeftBizID[i][j]][bUpgrade][1] - 1) * 2;
					
					UpdateNeftText(NeftBizID[i][j]);
				}
			}
		}
	}

	for(new id; id < MAX_COTTON_OBJECT; id++)
	{
		if(id < 11 && LinenInfo[id][linenSecund] > 0)
		{
			if(!LinenInfo[id][linenStatusTimer])
			{
				LinenInfo[id][linenObject] = CreateDynamicObject(865, LinenInfo[id][linenPosX], LinenInfo[id][linenPosY], LinenInfo[id][linenPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
				SetDynamicObjectMaterial(LinenInfo[id][linenObject], 0, 812, "gta_proc_grassland", "oak2b", 0);

				f(global_str, 256, "Лён (%d из 10)\n{73B461}Для сбора урожая", LinenInfo[id][linenScore]);
				LinenInfo[id][linenLabel] = CreateDynamic3DTextLabel(global_str, -1, LinenInfo[id][linenPosX], LinenInfo[id][linenPosY], LinenInfo[id][linenPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
				LinenInfo[id][linenStatusTimer] = 1;
			}
			else
			{
				f(global_str, 100, "Лён в процессе роста\n{FFFFFF}Осталось %s", Convert(LinenInfo[id][linenSecund]));
				UpdateDynamic3DTextLabelText(LinenInfo[id][linenLabel], COLOR_VALIK, global_str);
				LinenInfo[id][linenSecund]--;

				if(!LinenInfo[id][linenSecund])
				{
					LinenInfo[id][linenStatus] = true;
					LinenInfo[id][linenScore] = 10;
					LinenInfo[id][linenStatusTimer] = 0;

					f(global_str, 256, "Лён (%d из 10)\n{73B461}Для сбора урожая", LinenInfo[id][linenScore]);
					UpdateDynamic3DTextLabelText(LinenInfo[id][linenLabel], -1, global_str);
					SetDynamicObjectMaterial(LinenInfo[id][linenObject], 0, 817, "gta_procflowers", "gras07Si", 0);
				}
			}
		}
		if(CottonInfo[id][cottonSecund] > 0)
		{
			if(!CottonInfo[id][cottonStatusTimer])
			{
				CottonInfo[id][cottonObject] = CreateDynamicObject(865, CottonInfo[id][cottonPosX], CottonInfo[id][cottonPosY], CottonInfo[id][cottonPosZ] - 1.2, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 150.0);
				SetDynamicObjectMaterial(CottonInfo[id][cottonObject], 0, 812, "gta_proc_grassland", "oak2b", 0);

				f(global_str, 256, "Хлопок (%d из 10)\n{73B461}Для сбора урожая", CottonInfo[id][cottonScore]);
				CottonInfo[id][cottonLabel] = CreateDynamic3DTextLabel(global_str, -1, CottonInfo[id][cottonPosX], CottonInfo[id][cottonPosY], CottonInfo[id][cottonPosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
				CottonInfo[id][cottonStatusTimer] = 1;
			}
			else
			{
				f(global_str, 100, "Хлопок в процессе роста\n{FFFFFF}Осталось %s", Convert(CottonInfo[id][cottonSecund]));
				UpdateDynamic3DTextLabelText(CottonInfo[id][cottonLabel], COLOR_VALIK, global_str);
				CottonInfo[id][cottonSecund]--;

				if(!CottonInfo[id][cottonSecund])
				{
					CottonInfo[id][cottonStatus] = true;
					CottonInfo[id][cottonScore] = 10;
					CottonInfo[id][cottonStatusTimer] = 0;

					f(global_str, 256, "Хлопок (%d из 10)\n{73B461}Для сбора урожая", CottonInfo[id][cottonScore]);
					UpdateDynamic3DTextLabelText(CottonInfo[id][cottonLabel], -1, global_str);
					SetDynamicObjectMaterial(CottonInfo[id][cottonObject], 0, 817, "gta_procflowers", "gras07Si", 0);
				}
			}
		}
	}
	
	/* CR CAR */
	
	if(cr_spawn_timer)
	{	
		format(global_str, 256, "Центральный рынок {99CC00}\nПарковать{FFFFFF} авто на улице, запрещено!\nСпавн транспорта у рынка через %d секунд!\nИспользуйте подземный паркинг!", cr_spawn_timer);
		UpdateDynamic3DTextLabelText(cr_spawn, -1, global_str);
		cr_spawn_timer--;
		
		if(!cr_spawn_timer)
			cr_spawn_timer = 30;
		
	}
	/* CR CAR */
	
	for(new id; id < MAX_CONTAINERS; id++) //warp4
	{
		if(ContainerInfo[id][cTime] > 0)
		{
		    ContainerInfo[id][cTime]--;
		    static valuta[24];
			if(ContainerInfo[id][cState] == 0) valuta = "$";
			else valuta = "AZ";
			if(ContainerInfo[id][cStatus] == 0)
			{
 	 			f(global_str, 256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FF0000}Аукцион{FFFFFF} ( {E98E52}%s{FFFFFF} ):\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],valuta,ContainerInfo[id][cMinStavka],Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
                UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
				if(ContainerInfo[id][cTime] == 0)
				{
			    	f(global_str, 256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FFFFFF}Аукцион(Окончен)\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],valuta,ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
					ContainerInfo[id][cStatus] = 1;
					ContainerInfo[id][cTime] = 300;
				}
				UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
			}
			if(ContainerInfo[id][cStatus] == 1)
			{
 				f(global_str,256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FF0000}Аукцион завершен{FFFFFF} ( {E98E52}%s{FFFFFF} ):\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],valuta,ContainerInfo[id][cMinStavka],Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
                UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
				if(ContainerInfo[id][cTime] == 0)
				{
		 		    f(global_str,256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FFFFFF}Аукцион(Окончен)\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],
			 		valuta, ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
					strmid(ContainerInfo[id][cOwned], "-", 0, 60);
					strmid(ContainerInfo[id][cPrizes], "-", 0, 60);
					ContainerInfo[id][cPlayerID] = INVALID_PLAYER_ID;
					ContainerInfo[id][cCash] = 0;
					ContainerInfo[id][cStatus] = 0;
					for(new i; i < 6; i++) ContMasTake[id][i] = 0, ContainerInfo[id][cPrizeCol][i] = 0;
		 		}
			    UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str);
			}
			if(ContainerInfo[id][cStatus] == 2)
			{
			    f(global_str,512,"{FF0000}Контейнер закроется через{FFFFFF} ( {E98E52}%s{FFFFFF} )\n\n-Владелец: {E98E52}%s{FFFFFF}\nПриобрёл за: {E98E52}%s %d{FFFFFF}\n\n\t{FF0000}Призы:\n%s\n",Convert(ContainerInfo[id][cTime]),ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash],ContainerInfo[id][cPrizes]);//,gConteiner[id][pOwned],gConteiner[id][pCash]);
			    if(!ContainerInfo[id][cTime])
				{
		           	global_str = "";
		           	CloseContainerDoor(id);
					strmid(ContainerInfo[id][cOwned], "-", 0, 60);
					strmid(ContainerInfo[id][cPrizes], "-", 0, 60);
					ContainerInfo[id][cPlayerID] = INVALID_PLAYER_ID;
					ContainerInfo[id][cCash] = 0;
					ContainerInfo[id][cStatus] = 0;
					for(new i; i < 6; i++) ContMasTake[id][i] = 0, ContainerInfo[id][cPrizeCol][i] = 0;
		 		}
			    UpdateDynamic3DTextLabelText(PrizeCont[id],COLOR_WHITE, global_str);
			    if(!ContainerInfo[id][cTime]){
			    f(global_str, 256,"Контейнер:\n\nКласс: {E98E52}%s ( %s )\n{FFFFFF}Начальная цена:%s {E98E52}%d\n\n{FFFFFF}Аукцион(Окончен)\n\n\t- Последняя ставка: {E98E52}%s\n{FFFFFF}- Последняя сумма:%s {E98E52}%d",ContainerInfo[id][cClass],ContainerInfo[id][cEngClass],
				valuta,ContainerInfo[id][cMinStavka],ContainerInfo[id][cOwned],valuta,ContainerInfo[id][cCash]);
				UpdateDynamic3DTextLabelText(Conteinertext[id],COLOR_WHITE,global_str); }
			}
		}
		if( id < 6)
		{
			if(StolInfo[id][stolStatus] != 0)
			{
				switch(StolInfo[id][stolStatus])
				{
					case 1:
						{
							if(StolInfo[id][stolTime] != 0)
							{
								f(global_str, 256,"[ Стол №%d ]\n\
								{9ACD32}Ожидание игроков:{FFFFFF} %d/6\n\
								{9ACD32}Ставка:{FFFFFF} %d фишек\n\n\
								{9ACD32}Сесть за стол - F\n\
								{9ACD32}Дурак подкидной\n\
								{9ACD32}Начало через {FFFFFF}%d сек",id+1,StolInfo[id][stolPlayers],StolInfo[id][stolBet], StolInfo[id][stolTime]);
								UpdateDynamic3DTextLabelText(stolText[id],COLOR_WHITE, global_str);
							}
							else
							{
								StolInfo[id][stolStatus] = 2;
								StolInfo[id][stolTime] = 60;
								///
								StolInfo[id][stolCardBan][0] = StolInfo[id][stolKoriz] = random(36)+1;
								StolInfo[id][stolCards] --;
								StolInfo[id][stolXod] = 0;
								StolInfo[id][stolBit] = 1;
								//
								for(new d; d != StolInfo[id][stolPlayers]; d++)
								{
									if(StolInfo[id][stolPlayer][d] != INVALID_PLAYER_ID) CardAddForPlayer(StolInfo[id][stolPlayer][d]),SelectTextDraw(StolInfo[id][stolPlayer][d],0xff8c8c00),DeleteItem(StolInfo[id][stolPlayer][d], 530, StolInfo[id][stolBet]);
								}
								GameTextForPlayer(StolInfo[id][stolPlayer][StolInfo[id][stolXod]],"~g~ YOU ATTACK", 700, 3);
								GameTextForPlayer(StolInfo[id][stolPlayer][StolInfo[id][stolBit]],"~r~ YOU ATTACKED", 700, 3);
							}
						}
					case 2:
						{
							if(StolInfo[id][stolTime] < 1)
							{
								StolInfo[id][stolXod]++;
								if(StolInfo[id][stolXod] >= StolInfo[id][stolPlayers]) StolInfo[id][stolXod] = 0;

								StolInfo[id][stolBit] = StolInfo[id][stolXod]+1;
								if(StolInfo[id][stolBit] >= StolInfo[id][stolPlayers]) StolInfo[id][stolBit] = 0;

								GameTextForPlayer(StolInfo[id][stolPlayer][StolInfo[id][stolXod]],"~g~ YOU ATTACK", 700, 3);
								GameTextForPlayer(StolInfo[id][stolPlayer][StolInfo[id][stolBit]],"~r~ YOU ATTACKED", 700, 3);

								StolInfo[id][stolTime] = 60;
							}
							//
							static karta[50]; new num = StolInfo[id][stolKoriz];
							switch(CardInfo[num][cardValue])
							{
								case 0..10: f(karta, sizeof(karta),"%d [ %s ]",CardInfo[num][cardValue],CardInfo[num][cardMast]);
								case 11: f(karta, sizeof(karta),"Валет [ %s ]",CardInfo[num][cardMast]);
								case 12: f(karta, sizeof(karta),"Дама [ %s ]",CardInfo[num][cardMast]);
								case 13: f(karta, sizeof(karta),"Король [ %s ]",CardInfo[num][cardMast]);
								case 14: f(karta, sizeof(karta),"Туз [ %s ]",CardInfo[num][cardMast]);
							}
							if(!StolInfo[id][stolBitCard][0])
							{
								f(global_str, 256,"\
								{FFFFFF}[ Стол %d ]\n\
								{9ACD32}Козырь:{FFFFFF} %s\n\
								{AFAFAF}(в колоде %d карт)\n\n\
								{9ACD32}Таймер хода:{FFFFFF} %d сек\n\
								{AFAFAF}%s{9ACD32} ходит на игрока {AFAFAF}%s",id+1,karta,StolInfo[id][stolCards],StolInfo[id][stolTime],
								PN(StolInfo[id][stolPlayer][StolInfo[id][stolXod]]),
								PN(StolInfo[id][stolPlayer][StolInfo[id][stolBit]]));//,PN(StolInfo[i][stolPlayer][StolInfo[i][stolXod]+1]));
								UpdateDynamic3DTextLabelText(stolText[id],COLOR_WHITE, global_str);
							}
							else
							{
								f(global_str, 256,"\
								{FFFFFF}[ Стол %d ]\n\
								{9ACD32}Козырь:{FFFFFF} %s\n\
								{AFAFAF}(в колоде %d карт)\n\n\
								{9ACD32}Таймер хода:{FFFFFF} %d сек\n\
								{AFAFAF}%s{9ACD32} отбивается",id+1,karta,StolInfo[id][stolCards],StolInfo[id][stolTime],
								PN(StolInfo[id][stolPlayer][StolInfo[id][stolBit]]));//,PN(StolInfo[i][stolPlayer][StolInfo[i][stolXod]+1]));
								UpdateDynamic3DTextLabelText(stolText[id],COLOR_WHITE,global_str);
							}
						}
				}
				StolInfo[id][stolTime] --;
			}
		}
		
		if(id < sizeof SecondHand)
		{	
			if(SecondHand[id][secondStatus] == true)
			{
				if(second == 00)
				{
					for(new i, rand; i < 5; i++)
					{
						rand = random(sizeof SecondHand_Pos);
						
						if(!SecondHand_Pos[rand][secondCreate])
							SecondHand_Pos[rand][secondPickup] = CreateDynamicPickup(2401, 23, SecondHand_Pos[rand][secondX], SecondHand_Pos[rand][secondY], SecondHand_Pos[rand][secondZ], BizData[SecondHand[id][secondBID]][bID] + 100),
							SecondHand_Pos[rand][secondTextSkin] = CreateDynamic3DTextLabel(!"Одежда из секонд-хенда\n{cccccc}ALT - чтобы подобрать", -1, SecondHand_Pos[rand][secondX], SecondHand_Pos[rand][secondY], SecondHand_Pos[rand][secondZ], 3.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BizData[SecondHand[id][secondBID]][bID] + 100, 30),
							SecondHand_Pos[rand][secondCreate] = true,
							SecondHand[id][secondCount][1] ++;
						
					}
					
					SendMessage(0xFFFF00FF, "Внимание! В зал вынесли новую одежду, ищите её возле вешалок.", Float:{1529.7267, 1574.6504, 11.4639}, SecondHand[id][secondBID] + 100);
				}
				UpdateSecondText(id, 60-second, true);
			}
			
			if(hour == SecondHand[id][secondTime] && !SecondHand[id][secondStatus])
				SecondHand[id][secondCount][1] = 0,
				SecondHand[id][secondStatus] = true,
				format(global_str, 128, "Идёт распродажа одежды!\n{cccccc}Завершиться в {ff0000}%d:00\n\n{cccccc}", SecondHand[id][secondTime] + 1),
				UpdateDynamic3DTextLabelText(SecondHand[id][secondText][0], 0xFFFFFFFF, global_str);
				
			else if(!(hour == SecondHand[id][secondTime]) && SecondHand[id][secondStatus])
				UpdateSecondText(id, 0, SecondHand[id][secondStatus] = false),
				format(global_str, 128, "Начало распродажи одежды в {00ff00}%d:00", SecondHand[id][secondTime]),
				UpdateDynamic3DTextLabelText(SecondHand[id][secondText][0], 0xFFFFFFFF, global_str);
			
		}
	}
	//
	if(Teleport > 0)
	{
		MPTime --;
		f(global_str, 50, "%s_~W~-_/GOTP", Convert(MPTime));
		TextDrawSetString(TeleportEvent[1], global_str);
		for(new i; i < 14; i++) TextDrawShowForAll(TeleportEvent[i]);
	}

	//foreach(Vehicle, i)
	for(new i; i < 2000; i++)
	{
		// Актеры анимация апдейт
		if(i && i < Streamer_CountItems(STREAMER_TYPE_ACTOR, true) + 1) {
			
			new anim_library[2][32], Float:fdelta, anim_data_int[5];

			GetDynamicActorAnimation(i, anim_library[0], anim_library[1], fdelta, anim_data_int[0], anim_data_int[1], anim_data_int[2], anim_data_int[3], anim_data_int[4]);

			if(!isnull(anim_library[0]))
			{
				ApplyDynamicActorAnimation(i, anim_library[0], anim_library[1], fdelta, anim_data_int[0], anim_data_int[1], anim_data_int[2], anim_data_int[3], anim_data_int[4]);
			}
		}
		//

	    if(Iter_Contains(Vehicle, i) && IsValidVehicle(i))
	    	CheckPassengers(i), CheckGas(i);

		if(i < OWNABLEHOUSES) 
		{
			if(HouseInfo[i][hMainingInstalling] && !HouseInfo[i][hMainingInstalling_time])
				CheckMiningCard(i);

			if(HouseInfo[i][hAuction])
			{
				if(HouseInfo[i][hAuctionTime])
				{
					if(GetString(HouseInfo[i][hOwner], "The State")) ResetAuctionHouse(i);
					else
					{
						HouseInfo[i][hAuctionTime]--;
						if(!HouseInfo[i][hAuctionTime])
						{
							new id;
							if(strlen(HouseInfo[i][hAuctionName]) < 2) id = INVALID_PLAYER_ID;
								else id = GetPlayerID(HouseInfo[i][hAuctionName]);

							if(id != INVALID_PLAYER_ID)
							{
								if(PI[id][pMoney] >= HouseInfo[i][hAuctionMoney])
								{
									GiveMoney(id, -HouseInfo[i][hAuctionMoney]);
									f(global_str, 100, "Поздравляем! Вы выиграли аукцион дома {{ffff00}}№%d{FFFFFF}", i);
									SCM(id, -1, global_str);
									///
									id = GetPlayerID(HouseInfo[i][hOwner]);
									if(id == INVALID_PLAYER_ID)
									{
										f(global_str, 256, "UPDATE `accounts` SET `Money` = `Money`+%d WHERE `NickName` = '%s'", HouseInfo[i][hAuctionMoney], HouseInfo[i][hOwner]);
										mysql_tquery(mysql, global_str);
									}
									else GiveMoney(id, HouseInfo[i][hAuctionMoney]);
									///
									SetString(HouseInfo[i][hOwner], HouseInfo[i][hAuctionName]);
								}
							}
							ResetAuctionHouse(i);
						}
						else UpdateAuctionHouse(i);
					}
				}
			}
		}
	}

	if(MPTime == 0)
	{
	    SCMALL(0x40FF00FF, !"[Мероприятие]{ffffff} Телепорт на мероприятие закрыт, время вышло.");
		Teleport = 0;
		MPTime = 60;
	   	for(new i; i < 14; i++) TextDrawHideForAll(TeleportEvent[i]);
	}

	for(new i = 0; i < MAX_ORGS; i++)
	{
		if(hour == SobesTime1[i])
		{
		    if(minuite == SobesTime2[i] && second == 00 && SobesStatus[i] == 1)
		    {
	          	SCMALL(-1, !" ");
			    SCMALL(-1, !" ");

			    f(global_str, 100, "[ %s ] Уважаемые жители штата! Минотучку внимания.", OrgInfo[i][oName]);
			    SCMALL(COLOR_GOV, global_str);

			    f(global_str, 150, "В данный момент проходит собеседование в организацию %s!", OrgInfo[i][oName]);
			    SCMALL(COLOR_GOV, global_str);

			    f(global_str, 150, "Для вступления необходимо прибыть в %s", SobesMesto[i]);
			    SCMALL(COLOR_GOV, global_str);

			    SCMALL(-1, !" ");
			    SCMALL(-1, !" ");

			    SobesStatus[i]=0;
		    }
		}
	}
	
	switch Reklam do
	{
	    case 600:
	    {
			if(GLS[22])
	        {
		        for(new i;i<85;i++)
				{
				    if(PodarokInfo[i][porCreat]==-1) PodarokInfo[i][porCreat] = CreateDynamicPickup(19056,1,PodarokInfo[i][porPos][0], PodarokInfo[i][porPos][1], PodarokInfo[i][porPos][2],-1);
				}
			}
			for(new i;i<91;i++)
			{
				if(GribInfo[i][gribCreat]==-1) GribInfo[i][gribCreat] = CreatePickup(859,1,GribInfo[i][gribPos][0], GribInfo[i][gribPos][1], GribInfo[i][gribPos][2],-1);
			}
			GLS[36]=0;
	    }
	    
		case 1100:
	    {
			new h,m,s;
			gettime(h,m,s);
			if(h<19 && h>5) SetWeather(2);
    		SCMALL(0x6495EDFF,"{6495ED}В нашем магазине ты можешь приобрести нужное количество игровых денег и потратить");
			SCMALL(0x6495EDFF,"их на желаемый тобой{FFFFFF} бизнес, дом, аксессуар{6495ED} или на покупку каких нибудь безделушек.");
			SCMALL(0x6495EDFF,"- Игроки со статусом{FFFFFF} VIP{6495ED} имеют большие возможности, подробнее /help [Преимущества VIP]");
			SCMALL(0x6495EDFF,"- В магазине так-же можно приобрести редкие{FFFFFF} автомобили, аксессуары, воздушные шары{6495ED},");
			format(global_str, 256, "  а так же предметы, которые выделяет тебя из толпы! Наш сайт: {ffffff}%s", Setting_Server[3]);
			SCMALL(0x6495EDFF, global_str);
	    }
		
	    case 1200:
		{
		    Reklam = 0;
			
            SCMALL(COLOR_ORANGE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			SCMALL(COLOR_ORANGE, "- Основные команды сервера: /menu /help /gps /settings");
			SCMALL(COLOR_ORANGE, "- Пригласи друга и получи бонус в размере $300 000!");
            SCMALL(COLOR_ORANGE, (str_f("- Наш сайт: %s (Личный кабинет/Донат)", Setting_Server[3])));
            SCMALL(COLOR_ORANGE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			
			GLS[36] = 0;
		}
		
		default:
		{
			if(!(Reklam % 300)) 
				CallRemoteFunction("PiarTextToAll", "ssss", Setting_Server[7], Setting_Server[3], Setting_Server[4]);
			
			if(Reklam > 1200)
				Reklam = 0;
				
		}
	}
	
	for(new i; i < MuchNumber(CountVehicles(), MAX_ORGS, MAX_BOMBS); i++)
	{
        if(i < MAX_BOMBS) BombTimer(i);
	}

	for(new i;i<MAX_WOODS;i++)
    {
		if(AutoSlet[i][as_Status] == true && AutoSlet[i][as_Min] == minuite && AutoSlet[i][as_Hour] == hour) {
			
			if(AutoSlet[i][as_Type]) {

				SetString(BizData[AutoSlet[i][as_ID]][bOwner], "The State");
				SetString(BizData[AutoSlet[i][as_ID]][bZam], "none");
				BizData[AutoSlet[i][as_ID]][bLevel] = 0;
				UpdateBusinessText(AutoSlet[i][as_ID], 1);

			}
			else {

				for(new z; z < 5; z++)
				{
					SetString(HRoomOwner[AutoSlet[i][as_ID]][z], "The State");
					HRoomNalog[AutoSlet[i][as_ID]][z] = HRoomPay[AutoSlet[i][as_ID]][z] = 0;
				}
				
				SetString(HouseInfo[AutoSlet[i][as_ID]][hOwner], "The State");
				HouseInfo[AutoSlet[i][as_ID]][hNalog] =
				HouseInfo[AutoSlet[i][as_ID]][hNalog2] = 0;
				
				UpdateHouse(AutoSlet[i][as_ID]);

			}

			amlf("%s №%d слетел по системе автослета.", 0, "","", AutoSlet[i][as_Type] ? "Бизнес":"Дом", AutoSlet[i][as_ID]);

			AutoSlet[i][as_Hour] = 0;
			AutoSlet[i][as_Min] = 0;
			SetString(AutoSlet[i][as_Owner], "");
			AutoSlet[i][as_Status] = false;
			AutoSlet[i][as_ID] = 0;
			AutoSlet[i][as_Type] = 0;

		}

        if(wwoods[i]!=-1)
        {
            if(wwTimer[i]>0)
		    {
	            wwTimer[i]--;
				f(global_str, 256,"Костер\nРазжёг: %s\n{FFFFFF}Горит. Осталось: {FAAC58}%d {FFFFFF}минут(ы).\n\nПожарить рыбу: /cook",wOwner[i],floatround(float(wwTimer[i])/60.0));
                UpdateDynamic3DTextLabelText(wwText[i],COLOR_WHITE, global_str);
			    if(wwTimer[i]==0)
                {
                    DestroyDynamicObject(wwoods[i]);
                    DestroyDynamic3DTextLabel(wwText[i]);
                    wwTimer[i]=0;
                    wwoods[i]=-1;
				}
            }
		}
	}

    for(new i;i<MAX_NARKO;i++)
	{
	    if(ddrugs[i]!=-1)
	    {
		    if(ddTimer[i]>0)
		    {
	            ddTimer[i]--;
	            if(ddTimer[i] > 3600)
	            {
		            f(global_str, 150,"Саженец конопли\nВ процессе созревания. Осталось: {FAAC58}%d{FFFFFF} минут(ы).",floatround(float(ddTimer[i])/60.0));
		            UpdateDynamic3DTextLabelText(ddText[i],COLOR_WHITE, global_str);
	 			}
	            if(ddTimer[i]<= 3600)
	            {
	                new Float:x, Float:y,Float:z;
	    			GetDynamicObjectPos(ddrugs[i],x,y,z);

		            if(ddTimer[i]== 3600)
					{
					    DestroyDynamicObject(ddrugs[i]);
					    ddrugs[i] = CreateDynamicObject(861, x,y,z,0, 0,180);
					}
					if(ddTimer[i]== 0)
		            {
		                DestroyDynamicObject(ddrugs[i]);
					    ddrugs[i] = CreateDynamicObject(862, x,y,z,0, 0,180);
		                f(global_str, 150,"{FAAC58}Созревшая конопля{FFFFFF}\nНажмите ALT чтобы забрать урожай.");
			            UpdateDynamic3DTextLabelText(ddText[i],COLOR_WHITE, global_str);
		            }
					else
					{
					    f(global_str,150,"Конопля\nСозревает. Осталось: {FAAC58}%d{FFFFFF} минут(ы).",floatround(float(ddTimer[i])/60.0));
		            	UpdateDynamic3DTextLabelText(ddText[i],COLOR_WHITE,global_str);
					}
	            }
		    }
		}
	}
	if(BizWarState>0)
	{
	    if(BizTime[1]==0)
		{
			BizTime[0]--;
	 		BizTime[1]=60;
	 	}
		BizTime[1]--;
		if(BizTime[0] == 0 && BizTime[1] == 0)
		{
		    if(BizWarState == 2)
			{
			    RecoveryTime[BizAtack] = 1800;
				RecoveryTime[BizDeff] = 1800;
				if(BizAtakkill > BizDeffkill)
				{
				    SendTeamMessage(BizDeff,COLOR_RED,!"Вы проиграли стрелу");
				    SendTeamMessage(BizAtack,COLOR_VALIK, !"Вы выиграли стрелу!");
				    BizData[BizWar][bKrasher] =BizAtack;
				    UpdateBusinessText(BizWar,1);
				    UpdateDorm(BizDeff);
				    UpdateDorm(BizAtack);
				}else{
				    SendTeamMessage(BizAtack,COLOR_RED,!"Вы проиграли сражение за территорию");
				    SendTeamMessage(BizDeff,COLOR_VALIK, !"Вы выиграли сражение за территорию!");
				}
				BizTime[0]=0; BizTime[1]=0;
				BizWarState = 0;
				for(new i; i<5; i++){TextDrawHideForAll(Grand2Kapt[i]);}
				BizDeff = -1;
				BizAtack = -1;
				PlaceWar=0;

			}
			if(BizWarState == 1)
			{
			    new Attack, Deff;
				foreach(new i: Player)
				{
				    switch(PlaceWar)
				    {
				        case 1: if(!IsPlayerInRangeOfPoint(i, 100.0, -553.5379,-189.4500,78.4063)) continue;
				        case 2: if(!IsPlayerInRangeOfPoint(i, 200.0, 400.7428,2505.4106,16.4844)) continue;
				        case 3: if(!IsPlayerInRangeOfPoint(i, 200.0, 331.5244,1116.4584,11.2496)) continue;
				        case 4: if(!IsPlayerInRangeOfPoint(i, 200.0, -1297.4867,2551.0503,87.1012)) continue;
				    }

					if(PI[i][pMember][0] == BizAtack) Attack++;
					if(PI[i][pMember][0] == BizDeff) Deff++;
				}
				if(Attack >= 4 && Deff >= 4)
				{
				    SendTeamMessage(BizAtack,COLOR_GREY, !"Стрела началась!");
				    SendTeamMessage(BizDeff,COLOR_GREY, !"Стрела началась!");
				    BizAtakkill = 0;
				    BizDeffkill = 0;
				    BizWarState++;
				    BizTime[0] = 10;
				    BizTime[1] = 0;
				}
				else
				{
				    SendTeamMessage(BizAtack,COLOR_GREY, !"Стрела отменена!");
				    SendTeamMessage(BizDeff,COLOR_GREY, !"Стрела отменена!");
				    BizWarState = 0;
				}
			}
		}
	}
	if(BizWarState == 2)
	{
	    static tmin[3], tsec[3];
		if(BizTime[1]<10)f(tsec, sizeof(tsec), "0%d", BizTime[1]); else f(tsec, sizeof(tsec), "%d", BizTime[1]);
		if(BizTime[0]<10)f(tmin, sizeof(tmin), "0%d", BizTime[0]); else f(tmin, sizeof(tmin), "%d", BizTime[0]);
		f(global_str, 50, "%s:%s", tmin, tsec); TextDrawSetString(Grand2Kapt[0], global_str);
		f(global_str, 15, "%d", BizDeffkill); TextDrawSetString(Grand2Kapt[1], global_str);
		f(global_str, 16, "%d", BizAtakkill); TextDrawSetString(Grand2Kapt[2], global_str);
		TextDrawColor(Grand2Kapt[1], TeamColors[BizDeff][0]);
		TextDrawColor(Grand2Kapt[2], TeamColors[BizAtack][0]);
        foreach(new playerid: Player)
		{
		    if((GetTeamID(playerid)==BizAtack || GetTeamID(playerid)==BizDeff))
		    for(new i; i<5; i++) TextDrawShowForPlayer(playerid, Grand2Kapt[i]);
			else for(new i; i<5; i++) TextDrawHideForPlayer(playerid, Grand2Kapt[i]);
		}
	}
	if(CaptureTime[0]>0 || CaptureTime[1]>0)
	{
		if(CaptureTime[1]==0) {CaptureTime[0]--; CaptureTime[1]=60;}
		CaptureTime[1] --;
		foreach(new playerid: Player)
		{
		    f(global_str, 130,"~y~kills~n~~n~~g~%s:~w~ %i~n~~r~%s:~w~ %i",GetGangName(CaptureDef),CaptureDefKill,GetGangName(CaptureAtac),CaptureAtacKill);
			TextDrawSetString(Kapture, global_str);
		    if(GetTeamID(playerid)==CaptureAtac || GetTeamID(playerid)==CaptureDef) TextDrawShowForPlayer(playerid, Kapture);
			else TextDrawHideForPlayer(playerid, Kapture);
		}
		GangZoneFlashForAll(GangZone[CaptureZone],TeamColors[CaptureAtac][0]);
	}
	if(CaptureTime[0]==0 && CaptureTime[1]==1)
	{
		GangZoneStopFlashForAll(GangZone[CaptureZone]);
		RecoveryTime[CaptureAtac] = 1800;
		RecoveryTime[CaptureDef] = 1800;
  		if(CaptureAtacKill > CaptureDefKill)
		{
		    OrgMoney[CaptureAtac] += 56300;
		    SendTeamMessage(CaptureDef, 0xC56565AA,!"Вы потеряли контроль одной из своих территорий");
			SendTeamMessage(CaptureAtac,0x00B953AA,!"Вы взяли под свой контроль новую территорию");
			f(global_str, 150, "Теперь ваша банда будет получать каждый час %d вирт", OrgMoney[CaptureAtac]);
			SendTeamMessage(CaptureAtac,0x00B953AA,global_str);
		    GangZoneHideForAll(GangZone[CaptureZone]);
		    GangZoneShowForAll(GangZone[CaptureZone],TeamColors[CaptureAtac][0]);
			GangZoneInfo[CaptureZone][gangOwnerId] = CaptureAtac;
		    if(OrgMoney[CaptureDef] >= 56300) OrgMoney[CaptureDef] -= 56300;
		}
		else
		{
		    SendTeamMessage(CaptureAtac,0xC56565AA, !"Вам не удалось захватить территорию");
			SendTeamMessage(CaptureDef,0x00B953AA,!"Вы отстояли свою территорию");

		}
		TextDrawHideForAll(Kapture);
		SaveOrg(CaptureDef);
		SaveOrg(CaptureAtac);
		CaptureTime[0]=0; CaptureTime[1]=0;
		for(new i; i<5; i++){TextDrawHideForAll(GrandKapt[i]);}
		UpdateDorm(CaptureDef);
  		UpdateDorm(CaptureAtac);
		CaptureDef = -1;
		CaptureAtac = -1;
//		SaveGangZone(CaptureZone);
		CaptureZone = -1;
	}
    if(BuildsInfo[0][blTime]>0)
	{
        BuildsInfo[0][blTime]--;
        if(!BuildsInfo[0][blTime])
        {
            SetString(BuildsInfo[0][blArenderID],"The State");
            BuildsInfo[0][blClosed]=
            BuildsInfo[0][blTime]=

            ZallFunction[0]=
            ZallFunction[1]=
            ZallFunction[2]=0;

			UpdateDynamic3DTextLabelText(BuildsInfo[0][blBuildText],-1, !"{23BA8F}Концертный зал{FFFFFF}\nВход: ALT\nЗдание: {EBA22D}Не арендовано");
			foreach(new i: Player)
			{
				SetPVarInt(i,"zalll",0);
				PI[i][pZall]=-1;
			}
        }
	}
	format(global_str, 256, "[ Склад комиссионой одежды ]\n\n{ffffff}Каждый день на склад свозят комиссионные вещи,\nа владельцы и сотрудники секонд-хендов\nзабирают одежду и везут в свой магазин.\n\nСледующая поставка товаров через {ffff00}%s", GetSecondHandTime());
	
	UpdateDynamic3DTextLabelText(SecondHand_Timer3D, 0xFA5858FF, global_str);
	
	UpdatePlayers();
	//printf("ServerTimer: %d MS;", GetTickCount() - daun);
	return 1;
}

stock UpdatePlayers()
{
	new year,month,day,minuite,second,hour; 
	getdate(year,month,day);
	gettime(hour,minuite,second);

	foreach(Player, playerid)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 30.0, 2172.2666,-1044.0470,93.7558) && IsPlayerNPC(playerid) && !pTemp[playerid][tAuthorized])
			SCM(playerid, -1, "Произошла какая-то ошибка, вы были кикнуты || csac #777"), Kick(playerid);
			
		if(pTemp[playerid][tAuthorized])
		{
			if(server_fix_one[playerid] > 0)
			{
				server_fix_one[playerid]--;
				if(!server_fix_one[playerid]) server_fix_two[playerid] = 0;
			}

			for(new i; i < 4; i++)
			{
				if(Bodyguard_playerData[playerid][i][bg_Timer] > 0)
				{
					GameTextForPlayer(playerid, (str_f("%d SEC", Bodyguard_playerData[playerid][i][bg_Timer])), 1000, 6);
					Bodyguard_playerData[playerid][i][bg_Timer] --;

					if(!Bodyguard_playerData[playerid][i][bg_Timer])
					{
						Bodyguard_playerData[playerid][i][bg_Spawn] = !Bodyguard_playerData[playerid][i][bg_Spawn];
						
						pTemp[playerid][tBodyguardSpawnCount]++;
						BodyguardCreate(playerid, i);

						ApplyAnimationEx(playerid, !"PED", !"phone_out", 4.1, 0, 1, 1, 1, 1, 1);
						RemovePlayerAttachedObject(playerid, 6);
						AnimPlayed{playerid} = false, TextDrawHideForPlayer(playerid, StopAnimation);
					}
				}
			}

			if(Int_GetPlayerData(playerid, !"takeMorozPlayer") < Global_Time && pTemp[playerid][pMoroz])
			{
				for(new i; i < 8; i++)
				{
					if(i < 6)
						RemovePlayerAttachedObject(playerid, i);

					if(AksSlot[playerid][0][i] && !IsPlayerAttachedSlotUsedEx(playerid, i))
						SetPlayerAccessory(playerid, AksSlot[playerid][0][i], i);

					TogglePlayerControllable(playerid, Controllable{playerid} = true);
					pTemp[playerid][pMoroz] = false;
				}
			}
			
			if(SecondHand_Open{playerid} && Int_GetPlayerData(playerid, "SecondHand_PlayerTime") > Global_Time)
			{
				format(global_str, 15, "00:%02d", Int_GetPlayerData(playerid, "SecondHand_PlayerTime") - Global_Time);
				
				PlayerTextDrawSetString(playerid, SecondHandTD[playerid][1], global_str);
			}
			else if(SecondHand_Open{playerid})
				DestroySecondHandTD(playerid);
			
		    if(TrailerVeh[playerid] != INVALID_VEHICLE_ID && Int_GetPlayerData(playerid, "dells") == 0)
		    {
		    	if(!IsTrailerAttachedToVehicle(TrailerVeh[playerid]) || IsPlayerInFbArea(playerid) || !IsPlayerInAnyVehicle(playerid))
		    	{
		    	    if(TrailerTime{playerid} == 0) TrailerTime{playerid} = IsPlayerInFbArea(playerid) ? (60) : (40);
				}
			}
		    if(TrailerTime{playerid} > 0 && Int_GetPlayerData(playerid, "dells") == 0)
		    {

		        if(IsPlayerInFbArea(playerid))
		        {
		            if(Int_GetPlayerData(playerid, "trmes") == 0)
		            {
		                TrailerTime{playerid} = 60;
			            SCM(playerid, COLOR_ORANGE, !"[ Предупреждение ] {FFFFFF}Вы заехали в город вместе с трейлером, немедленно покиньте зону города.");
			        	SCM(playerid, COLOR_ORANGE, !"[ Предупреждение ] {FFFFFF}Иначе спустя 60 секунд Ваш трейлер будет изъят и забрать его потом можно будет в салоне трейлеров.");
						SetPVarInt(playerid, "trmes", 1);
					}
	                f(global_str, 70, "TRAILER SPAWN~n~%d SEC~n~~g~(/TRMENU)~n~~r~LEAVE THE CITY AREA", TrailerTime{playerid});
			    	GameTextForPlayer(playerid, global_str, 1000, 3);
			    	TrailerTime{playerid} --;
					if(TrailerTime{playerid} == 0)
					{
					    SCM(playerid, COLOR_RED, "( Оповещение ) {FFFFFF}Вы потеряли свой трейлер, он был эвакуирован работниками салона трейлеров.");
						SCM(playerid, COLOR_RED, "( Оповещение ) {FFFFFF}Забрать его можно там же.");
						new i = PI[playerid][pTrailerKey];
						CheckPlayers(i);
						DestroyVehicleIter(TrailerInfo[i][tIDcar]);
						DestroyDynamicObject(TrailerInfo[i][tObj]);
						TrailerInfo[i][tShtraf] = 5000000;
						TrailerVeh[playerid] = INVALID_VEHICLE_ID;
						TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
						TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
					}
				}
				if(!IsTrailerAttachedToVehicle(TrailerVeh[playerid]) || !IsPlayerInAnyVehicle(playerid))
				{
				    if(!IsPlayerInFbArea(playerid))
				    {
					    f(global_str, 70, "TRAILER SPAWN~n~%d SEC~n~~g~(/TRMENU)", TrailerTime{playerid});
					    GameTextForPlayer(playerid, global_str, 1000, 3);
					    TrailerTime{playerid} --;
						if(TrailerTime{playerid} == 0)
						{
						    SCM(playerid, COLOR_RED, "( Оповещение ) {FFFFFF}Вы потеряли свой трейлер, он был эвакуирован работниками салона трейлеров.");
							SCM(playerid, COLOR_RED, "( Оповещение ) {FFFFFF}Забрать его можно там же.");
							new i = PI[playerid][pTrailerKey];
							CheckPlayers(i);
							DestroyVehicleIter(TrailerInfo[i][tIDcar]);
							DestroyDynamicObject(TrailerInfo[i][tObj]);
							TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
							TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
							TrailerInfo[i][tShtraf] = 5000000;
							TrailerVeh[playerid] = INVALID_VEHICLE_ID;
						}
					}
				}
				if(IsTrailerAttachedToVehicle(TrailerVeh[playerid]) && !IsPlayerInFbArea(playerid)) TrailerTime{playerid} = 0;
			}
		}
		if(RCzoneTimer[playerid] && !(RCzone[playerid] == -1))
		{
			if(!IsPlayerInRangeOfPoint(playerid, 140.0, DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2]))
			{
				if(RCzoneTimer[playerid] == 10) GangZoneFlashForPlayer(playerid, RCzone[playerid], 0xffa69699);
				f(global_str, 50, "RETURN %d/10", RCzoneTimer[playerid]);
				GameTextForPlayer(playerid, global_str, 1000, 4);
				RCzoneTimer[playerid]--;
			}
			else if(RCzoneTimer[playerid] < 10) RCzoneTimer[playerid] = 10, GangZoneStopFlashForPlayer(playerid, RCzone[playerid]);
		}
		else if(!RCzoneTimer[playerid] && !(RCzone[playerid] == -1)) ResetRC(playerid);
		
	    if(IsPlayerNPC(playerid))
	    {
			if(BotStep[playerid] == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 50.0, 1762.6591, -1953.9911, 13.5469))
			    {
				    BotStep[playerid] = 4;
				    foreach(new i: Player)
				    {
				        if(ProxDetectorS(100.0, playerid, i, 1) && GetVehicleModelEx(GetPlayerVehicleID(i)) == 570) SCM(i, COLOR_GOLD, !"Машинист: Уважаемые пасажиры, мы прибыли на станцию города Los Santos, до отправления поезда осталось 10 секунд!");
				        if(IsPlayerInRangeOfPoint(i, 100.0, 1762.6591, -1953.9911, 13.5469)) SCM(i, COLOR_RED, !"Диспетчер: на станцию Los Santos прибыл поезд с направлением в город San Fierro. Остановка длится 10 секунд!");
				    }
				}
			}
			if(BotStep[playerid] == 1)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 50.0, -1944.2593, 133.9698, 25.7109))
			    {
				    BotStep[playerid] = 5;
				    foreach(new i: Player)
				    {
				        if(ProxDetectorS(100.0, playerid, i, 1) && GetVehicleModelEx(GetPlayerVehicleID(i)) == 570) SCM(i, COLOR_GOLD, !"Машинист: Уважаемые пасажиры, мы прибыли на станцию города San Fierro, до отправления поезда осталось 10 секунд!");
				        if(IsPlayerInRangeOfPoint(i, 100.0, -1944.2593, 133.9698, 25.7109)) SCM(i, COLOR_RED, !"Диспетчер: на станцию San Fierro прибыл поезд с направлением в город Las-Venturas. Остановка длится 10 секунд!");
				    }
				}
			}
			if(BotStep[playerid] == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 100.0, 2864.8091, 1284.2375, 10.8203))
			    {
				    BotStep[playerid] = 3;
				    foreach(new i: Player)
				    {
				        if(ProxDetectorS(100.0, playerid, i, 1) && GetVehicleModelEx(GetPlayerVehicleID(i)) == 570) SCM(i, COLOR_GOLD, !"Машинист: Уважаемые пасажиры, мы прибыли на станцию города Las-Venturas, до отправления поезда осталось 10 секунд!");
				        if(IsPlayerInRangeOfPoint(i, 100.0, 2864.8091, 1284.2375, 10.8203)) SCM(i, COLOR_RED, !"Диспетчер: на станцию Las-Venturas прибыл поезд с направлением в город Los Santos. Остановка длится 10 секунд!");
				    }
				}
			}
			if(BotStep[playerid] == 3)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 70.0, 2198.6851, -1733.9224, 13.4041))
			    {
				    BotStep[playerid] = 0;
				    foreach(new i: Player)
			    	{
			    	    if(IsPlayerInRangeOfPoint(i, 150.0, 1762.6591, -1953.9911, 13.5469)) SCM(i, COLOR_RED, !"Диспетчер: на станцию прибывает электропоезд с направлением Los Santos -> San Fierro. Отойдите от края платформы!");
				    }
				}
			}
			if(BotStep[playerid] == 4)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 70.0, -1979.9299, -591.5744, 25.7277))
			    {
				    BotStep[playerid] = 1;
				    foreach(new i: Player)
			    	{
			    	    if(IsPlayerInRangeOfPoint(i, 150.0, -1944.2593, 133.9698, 25.7109)) SCM(i, COLOR_RED, !"Диспетчер: на станцию прибывает электропоезд с направлением San Fierro -> Las-Venturas. Отойдите от края платформы!");
				    }
				}
			}
			if(BotStep[playerid] == 5)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 70.0, 2781.0178, 1932.2638, 4.6142))
			    {
				    BotStep[playerid] = 2;
				    foreach(new i: Player)
			    	{
			    	    if(IsPlayerInRangeOfPoint(i, 150.0, 2864.8091, 1284.2375, 10.8203)) SCM(i, COLOR_RED, !"Диспетчер: на станцию прибывает электропоезд с направлением Las-Venturas -> Los Santos. Отойдите от края платформы!");
				    }
				}
			}
		}
		if(!IsPlayerNPC(playerid))
	    {
	        new target = GetPlayerTargetPlayer(playerid);
			if(target != INVALID_PLAYER_ID)
			{
			    for(new A = 0; A < 9; A++) DestroyPlayerTD(playerid, pokazmenu[playerid][A]);
			    CreateMenuTD(playerid);
    			new Float:armour;
    			GetPlayerArmour(target, armour);
    			new Float:health;
    			GetPlayerHealth(target, health);
				f(global_str, 6, "%.2f", armour);
				PlayerTextDrawSetString(playerid, pokazmenu[playerid][0], global_str);
				f(global_str, 6, "%.2f", health);
				PlayerTextDrawSetString(playerid, pokazmenu[playerid][1], global_str);
				f(global_str, 30, "%s - %d", PN(target), target);
				PlayerTextDrawSetString(playerid, pokazmenu[playerid][6], global_str);
				f(global_str, 80,"Смотрит на{FFFFFF} %s", PN(target));
				SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 15.0, 1000);
				if(health >= 100) PlayerTextDrawTextSize(playerid, pokazmenu[playerid][5], 272.000061+health-2.6, 0.000000);
				else PlayerTextDrawTextSize(playerid, pokazmenu[playerid][5], 272.000061+health, 0.000000);
				if(armour >= 100) PlayerTextDrawTextSize(playerid, pokazmenu[playerid][4], 272.000061+armour-2.6, 0.000000);
				else PlayerTextDrawTextSize(playerid, pokazmenu[playerid][4], 272.000061+armour, 0.000000);
				for(new A = 0; A < 9; A++) ShowPlayerTD(playerid, pokazmenu[playerid][A]);
			}
			else deltarget(playerid);
			
			if(!pTemp[playerid][tAuthorized])
	 		{
	 		    if(pTemp[playerid][tAuthTime]>0)
			 	{
			 	    pTemp[playerid][tAuthTime] --;

				 	if(!pTemp[playerid][tAuthTime]) 
						SCM(playerid, COLOR_GREY, !"[Информация]: {FFFFFF}Время на регистрацию ограничено. Вы бездействовали 4 минуты!"), SetTimerEx("PlayKick", 600, false, "i", playerid);
				}
	 		}
			
			if(hour == 20 && minuite == 15 && second == 0)
			{
				if(pTemp[playerid][tAuthorized] && PI[playerid][pEvent])
				{
				    PI[playerid][pEvent] = 0;
				}
			}
			if(pTemp[playerid][tAuthorized])
			{
				if(GetPlayerState(playerid) == 2)
				{
				   	new carid = GetPlayerVehicleID(playerid),
				    	speed = GetPlayerVehicleSpeed(playerid),
				    	model = GetVehicleModelEx(carid);

		 		    if(GetVehicleModelEx(carid) != 494 && GetVehicleModelEx(carid) != 433 && GetVehicleModelEx(carid) != 548)
					{
					    new Float:hpveh;
						GetVehicleHealth(carid, hpveh);
					    if(hpveh < 300.0) {
							J_SetVehicleHealth(carid, 350.0);
					    }
				    }
				    if(pTemp[playerid][pSellCar] != -1)
				    {
				        if(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarCarID] == carid) {
				            J_SetVehicleHealth(carid, 1500.0);
				        }
				    }
		      		if(PI[playerid][pHSpectr] != -1)
					{
					    if(SERIU[PI[playerid][pHSpectr]][sID]==playerid)
						{
						    if(speed>10)
						    {
							    if(IsAOwnableCar(carid)) f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~w~%d~n~%s~n~Fuel: %d%s", GetPlayerVehicleSpeed(playerid), GetEngineStatus(carid) ? ("on") : ("off"), floatround(Fuel[carid], floatround_floor), VehicleInfo[carid][vModification] == 554 ? ("     ~r~TT~w~]") : (""));
							    else f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~w~%d~n~%s~n~Fuel: %d", GetPlayerVehicleSpeed(playerid), GetEngineStatus(carid) ? ("on") : ("off"), floatround(Fuel[carid], floatround_floor));
								GameTextForPlayer(PI[playerid][pHSpectr], global_str, 1000, 3);
							}
						}
					}
					if(speed > 10)
					{
						new Float:distance;
						if(speed < 50) distance = 0.7;
						else
						{
							distance = speed/50;
							distance += float(GetPlayerPing(playerid)) / 100;
						}
						new Float:X[2], Float:Y[2], Float:Z[2], Float:sX[2];
						GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_WHEELSFRONT, X[0], Y[0], Z[0]);
						GetVehicleModelInfo(model, VEHICLE_MODEL_INFO_WHEELSREAR, X[1], Y[1], Z[1]);
						GetVehicleShiftPos(carid, 0, X[0], Y[0], Z[0], sX[0]);
						GetVehicleShiftPos(carid, 1, X[1], Y[1], Z[1], sX[1]);
						Z[0] -= 0.5, Z[1] -= 0.5;
						new c_panels, c_doors, c_lights, c_tires, set_tires;
						GetVehicleDamageStatus(carid, c_panels, c_doors, c_lights, c_tires);
						for(new i;i < StripCount;i ++)
						{
						    if(i != NoStrip[playerid])
						    {
							    if(c_tires < 15)
								{
									if(PointToPoint(X[0],Y[0],Z[0],TStripPos[i][0],TStripPos[i][1],TStripPos[i][2]) <= distance)
									{
									    switch(c_tires)
									    {
									        case 0, 2, 8:	set_tires = 10;
									        case 1, 3, 9: 	set_tires = 11;
			                                case 4, 6,12: 	set_tires = 14;
			                                case 5, 7,13: 	set_tires = 15;
			                                default: continue;
									    }
									    if(c_tires != set_tires) UpdateVehicleDamageStatus(carid, c_panels, c_doors, c_lights, set_tires);
									}
									if(PointToPoint(X[1],Y[1],Z[1],TStripPos[i][0],TStripPos[i][1],TStripPos[i][2]) <= distance)
									{
									    switch(c_tires)
									    {
									        case  0, 1, 4:	set_tires = 5;
									        case  2, 3, 6:	set_tires = 7;
									        case  8, 9,12:	set_tires = 13;
									        case 10,11,14:	set_tires = 15;
									        default: continue;
									    }
									    if(c_tires != set_tires) UpdateVehicleDamageStatus(carid, c_panels, c_doors, c_lights, set_tires);
									}
								}
							}
						}
					}
				}
				
				if(!PlayerAFKTime[playerid][0])
					pTemp[playerid][onlineData][0] ++;
				else
					pTemp[playerid][onlineData][1] ++;
				
				if(!PlayerAFKTime[playerid][0] && PI[playerid][pPlayedTime] < 3601) PI[playerid][pPlayedTime]++;
				
				if(IsPlayerInRangeOfPoint(playerid, 1, 39.1284,1910.0469,17.8962) ||
				IsPlayerInRangeOfPoint(playerid, 1, -15.6253,1957.1833,18.1981) ||
				IsPlayerInRangeOfPoint(playerid, 1, 32.8925,1851.2185,18.2480) ||
				IsPlayerInRangeOfPoint(playerid, 1, -12.2581,1883.1897,17.6982) ||
				IsPlayerInRangeOfPoint(playerid, 1, 313.7311,2460.5391,1500.9797) ||
				IsPlayerInRangeOfPoint(playerid, 1, 337.4621,2461.2009,1500.9797) ||
				IsPlayerInRangeOfPoint(playerid, 1, 321.5936,2483.2593,1500.9797) ||
				IsPlayerInRangeOfPoint(playerid, 1, -103.0808,2337.4805,1500.9497) ||
				IsPlayerInRangeOfPoint(playerid, 1, -100.1502,2402.9199,1500.9697) ||
				IsPlayerInRangeOfPoint(playerid, 1, -97.4013,2347.1445,1500.9497) ||
				IsPlayerInRangeOfPoint(playerid, 1, -102.9486,2400.0579,1500.9697) ||
				IsPlayerInRangeOfPoint(playerid, 1, -97.6769,2344.7224,1507.0781) ||
				IsPlayerInRangeOfPoint(playerid, 1, -103.9012,2351.7346,1500.9497))
				{
				    GameTextForPlayer(playerid, "~g~Press ~r~ALT", 1000, 3);
				}

				if(!GolodTime[playerid]) 
					GolodTime[playerid] = 180+random(60),
						GiveFullness(playerid, PI[playerid][pVIP][0] > 5 ? -2:-10);
						
				else GolodTime[playerid] --;
				
				if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	   			{
	   			    if(Jetpackanticheat == 1 && !PI[playerid][pAdmin])
					{
					    static stringd[20];
						getdate(year, month, day);
						gettime(hour, minuite);

					    if(minuite <= 9) f(stringd, sizeof(stringd), "%d:0%d %d.%d.20%d", hour, minuite, day, month, year);
						else f(stringd, sizeof(stringd), "%d:%d %d.%d.%d", hour, minuite, day, month, year);
						f(global_str, 256, "{FF4500}Вы были кикнуты по подозрению в читерстве\n\
					    Чтобы избежать подобных ситуаций в будущем\n\
						удалите все клео и другие модификации для игры.\n\n\
						{FFFFFF}Аккаунт: %s\n\
						{FFFFFF}Код причины: Jetpack use (68 / 1)\n\n\
						{FFFFFF}NetStat: %d(%.2f)\n\n\t{FFFFFF}Для выхода из игры используйте /q(uit)", PN(playerid), NetStats_BytesReceived(playerid), NetStats_PacketLossPercent(playerid));
						SPD(playerid, 0, 0, stringd, global_str,"X","");
						J_Kick(playerid);
					}
				}
				
				//accessory case
				if(PI[playerid][pMoney] >= 20000000 && !IsPlayerInAnyVehicle(playerid) && !PlayerModification[playerid])
				{
				    if(SettingData[playerid][sdCaseDisplay])
				    {
				        if(!AksSlot[playerid][0][6] && !IsPlayerAttachedSlotUsedEx(playerid, 6))
							SetPlayerAttachedObject(playerid, 7, 1210, 5,0.299999,0.099999,0.000000,0.000000,-83.000000,0.000000,1.000000,1.000000,1.000000);

						else if(AksSlot[playerid][0][6] && !IsPlayerAttachedSlotUsedEx(playerid, 6))
							SetPlayerAccessory(playerid, AksSlot[playerid][0][6], 7);
					}
					else if(AksSlot[playerid][0][6] && IsPlayerAttachedSlotUsedEx(playerid, 6))
						RemovePlayerAttachedObject(playerid, 6);
				}
				else if(IsPlayerAttachedSlotUsedEx(playerid, 6) && !PlayerModification[playerid])
					RemovePlayerAttachedObject(playerid, 6);

				//accessory armour
				if(!PlayerModification[playerid])
				{
					if(PI[playerid][pArmour] < 50.0 && (AksSlot[playerid][0][7] >= 6556 && AksSlot[playerid][0][7] <= 6567) && GetPVarInt(playerid, !"updateArmourTime") < Global_Time && SettingData[playerid][sdAutoUseArmour]) 
						fuction_UsePlayerItemArmour(playerid, true);

					else if(PI[playerid][pArmour] == 0.0 && (IsPlayerAttachedSlotUsedEx(playerid, 7) or IsPlayerAttachedSlotUsedEx(playerid, 8)))
						RemovePlayerAttachedObjectEx(playerid, IsPlayerAttachedSlotUsedEx(playerid, 8) ? 8 : 6);

					else if(PI[playerid][pArmour] > 0.0 && IsPlayerAttachedSlotUsedEx(playerid, 7) && IsPlayerAttachedSlotUsedEx(playerid, 8))
						RemovePlayerAttachedObjectEx(playerid, 8);

					else if(PI[playerid][pArmour] > 0.0 && !IsPlayerAttachedSlotUsedEx(playerid, 7) && !IsPlayerAttachedSlotUsedEx(playerid, 8))
					{
						if(6556 <= AksSlot[playerid][0][7] <= 6567) 
							SetPlayerAccessory(playerid, AksSlot[playerid][0][7], 7);

						else
							SetPlayerAttachedObject(playerid, 8, AksSlot[playerid][0][7] == 179 ? 19515 : 19142, 1, 0.061999, 0.049999, 0.000000, -0.000000, -2.500003, 2.699999, 1.039000, 1.369001, 1.218000);
					}
				}

				for(new i; i < PI[playerid][pInvCell]; i++)
				{
					if(Inventory[playerid][0][i] && Inventory[playerid][6][i] < Global_Time)
					{
						if(IsItemTimeDeleted(Inventory[playerid][0][i])) ClearItem(playerid, i, 1);
						else Inventory[playerid][6][i] = 0;
					}
				}

				NoRoof(playerid);
			    if(GotoInfo[playerid][gtID] != INVALID_PLAYER_ID)
				{
				    new cuffed = GotoInfo[playerid][gtID];
					if(!IsPlayerConnected(cuffed) || !pTemp[cuffed][tAuthorized])
					{
					    GotoInfo[playerid][gtID] = INVALID_PLAYER_ID;
	                    GotoInfo[playerid][gtTPX] = 0.0;
	                    GotoInfo[playerid][gtTPY] = 0.0;
	                    GotoInfo[playerid][gtTPZ] = 0.0;
	                    GotoInfo[cuffed][gtState] = 0;
	                    GotoInfo[cuffed][gtStayed] = 0;
					    GotoInfo[cuffed][gtGoID] = INVALID_PLAYER_ID;
					    GotoInfo[cuffed][gtX] = 0.0;
						GotoInfo[cuffed][gtY] = 0.0;
						GotoInfo[cuffed][gtZ] = 0.0;
					}
				}
				if(GotoInfo[playerid][gtGoID] != INVALID_PLAYER_ID)
				{
				    new goid = GotoInfo[playerid][gtGoID];
					if(IsPlayerConnected(goid) && pTemp[goid][tAuthorized])
					{
					    new Float:xX, Float:xY, Float:xZ,Float:agle;
				    	GetPlayerPos(goid, xX, xY, xZ);
				    	GetPlayerFacingAngle(playerid, agle);
					    if(!IsPlayerInRangeOfPoint(playerid, 20, xX, xY, xZ))
						{
						    SetPlayerInterior(playerid,GetPlayerInterior(goid));
							SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(goid));
							NoEnterPickup[playerid] =2;
							SetPlayerFacingAngle(playerid,agle);
					    	UpdatePlayerPos(playerid, xX,xY,xZ);
						}
						if(GetPlayerState(goid)==1)
						{
						    new ANIMATION;
						    if(GotoInfo[goid][gtTPX] != 0.0 || GotoInfo[goid][gtTPY] != 0.0)
						    {
						        SetPlayerFaceToPoint(playerid, GotoInfo[goid][gtTPX], GotoInfo[goid][gtTPY]);
								ANIMATION = GoPlayerAnimation(playerid, GotoInfo[goid][gtTPX], GotoInfo[goid][gtTPY], GotoInfo[goid][gtTPZ]);
						    }
						    else
						    {
						        TurnPlayerFaceToPlayer(playerid, goid);
								ANIMATION = GoPlayerAnimation(playerid, xX, xY, xZ);
						    }
						    if(ANIMATION != 1)
						    {
						        if(IsPlayerInRangeOfPoint(playerid, 0.05, GotoInfo[playerid][gtX], GotoInfo[playerid][gtY], GotoInfo[playerid][gtZ]))
						        {
						            GotoInfo[playerid][gtStayed] ++;
						            if(GotoInfo[playerid][gtStayed] >= 10)
						            {
							            new Float:xA;
		                 				GetPlayerPos(playerid, xX, xY, xZ);
							            GetPlayerFacingAngle(playerid, xA);
							            ShiftCords(0, xX, xY, xA, 1.5);
							            UpdatePlayerPos(playerid, xX, xY, xZ);
							            GotoInfo[playerid][gtStayed] = 0;
						            }
						        }
						        else GotoInfo[playerid][gtStayed] = 0;
								GetPlayerPos(playerid, GotoInfo[playerid][gtX], GotoInfo[playerid][gtY], GotoInfo[playerid][gtZ]);
						    }
						}
					}
					else
					{
					    GotoInfo[playerid][gtGoID] = INVALID_PLAYER_ID;
					    GotoInfo[playerid][gtX] = 0.0;
						GotoInfo[playerid][gtY] = 0.0;
						GotoInfo[playerid][gtZ] = 0.0;
					}
				}
				if(TimetoReturn[playerid] > 0 && pTemp[playerid][pArendaCar] != -1)
				{
			    	TimetoReturn[playerid]--;
			    	f(global_str, 50, "Return %d/120",TimetoReturn[playerid]);
					GameTextForPlayer(playerid, global_str, 1000, 4);
					if(TimetoReturn[playerid]==0)
					{
      					GetVehicleHealth(pTemp[playerid][pArendaCar],VehicleHealth[pTemp[playerid][pArendaCar]] );
					    if(VehicleHealth[pTemp[playerid][pArendaCar]]<700)
					    {
					        new money = floatround(1000.0-VehicleHealth[pTemp[playerid][pArendaCar]]);
							if(PI[playerid][pMoney]>=money)
							{
								GiveMoney(playerid,-money);
								f(global_str, 256,"Вы заплатили {FFFFFF}%d${FF6347} за порчу государственного имущества! {FFFFFF}(( {FF6347}Вы сильно побили машину{FFFFFF} )).",money);
								SCM(playerid,COLOR_RED, global_str);
							}
							else if(PI[playerid][pBank]>=money)
							{
								PI[playerid][pBank] -= money;
								f(global_str, 256,"С банковского счета было изьято {FFFFFF}%d${FF6347} за порчу гос. имущества! {FFFFFF}(( {FF6347}Вы сильно побили машину{FFFFFF} )).",money);
								SCM(playerid,COLOR_RED, global_str);
							}
							else if(PI[playerid][pZKP]>=10)
							{
						 		PI[playerid][pZKP]-=10;
						 		SCM(playerid,COLOR_RED,"У вас не достаточно денег чтобы заплатить за разбитое авто. Ваша законопослушность была снижена!");
							}
					    }

					    switch(VehicleInfo[pTemp[playerid][pArendaCar]][vJob])
					    {
					        case 1: endrabavt(playerid);
							case 11:
							{
							    new vehsid = GetVehicleTrailer(pTemp[playerid][pArendaCar]);
							    SetVehicleToRespawn(vehsid);
							    SetVehicleToRespawn(pTemp[playerid][pArendaCar]);
							}
					        default: SetVehicleToRespawn(pTemp[playerid][pArendaCar]);
					    }
					    SCM(playerid,COLOR_BLUE, !"[Подсказка] {FFFFFF}Ваш рабочий транспорт был отбуксирован на стоянку!");
					}
				}
				else if(TimetoReturn[playerid] > 0 && (pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] == playerid))
				{
					TimetoReturn[playerid] --;
					f(global_str, 50, "Return %d/10", TimetoReturn[playerid]);
					GameTextForPlayer(playerid, global_str, 1000, 4);
					if(!TimetoReturn[playerid])
					{
					    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Транспорт снят с продажи, из-за того что вы или транспорт покинули место!");
                        new i = pTemp[playerid][pSellCar];
				        autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
				        autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
				        DestroyDynamicArea(autoBazarInfo[i][autoBazarArea]);
						DestroyDynamic3DTextLabel(autoBazarInfo[i][autoBazarText]);
						for(new z; z < 4; z++) DestroyDynamicObject(autoBazarInfo[i][autoBazarObject][z]);
				    	
						if(autoBazarInfo[i][autoBazarType])
				    		UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
				    	else 
							UpdateDynamic3DTextLabelText(autoBazarInfo[i][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
				    	
						i = -1;
				    }
				}
				if(PI[playerid][pONPhoneTalk]>0)
				{
				    PI[playerid][pONPhoneTalk]++;
				    if(pSvon{playerid}) f(global_str, 150,"~l~%s~n~~r~Outcoming~n~~l~(~b~%d ~l~sec.)",PN(PI[playerid][pCalling]), PI[playerid][pONPhoneTalk]);
					else f(global_str, 150,"~l~%s~n~~g~Incoming~n~~l~(~b~%d ~l~sec.)",PN(PI[playerid][pCalling]), PI[playerid][pONPhoneTalk]);
					PlayerTextDrawSetString(playerid,callname[playerid], global_str);
				}
				if(Timerak[playerid]>0)
				{
				    Timerak[playerid]--;
				    f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Wait %d Sec.",Timerak[playerid]);
					GameTextForPlayer(playerid, global_str, 1000, 3);
					ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
					if(Timerak[playerid]==0)
					{
					    new Float:x, Float:y, Float:z;
					    for(new i;i<MAX_NARKO;i++)
						{
						    if(ddrugs[i]!=-1)
						    {
						        GetDynamicObjectPos(ddrugs[i],x,y,z);
								if(IsPlayerInRangeOfPoint(playerid,2,x,y,z))
								{
								    if(ddTimer[i]==0)
						    		{
									    DestroyDynamicObject(ddrugs[i]);
									    DestroyDynamic3DTextLabel(ddText[i]);
									    ddTimer[i]=0;
									    ddrugs[i]=-1;

										new u=2+random(12);
				                        f(global_str, 80,"Выкопал куст конопли +%d",u);
										SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);

										f(global_str, 30,"Narko +%d",u);
										GameTextForPlayer(playerid, global_str, 0, 1);

										AddItem(playerid, 510, u);
									}
									else
									{
									    DestroyDynamicObject(ddrugs[i]);
									    DestroyDynamic3DTextLabel(ddText[i]);
									    ddTimer[i]=0;
									    ddrugs[i]=-1;
									    SetPlayerChatBubble(playerid, "Вырвал не созревший саженец из земли", COLOR_PURPLE, 10.0, 5000);
									    SCM(playerid,COLOR_ORANGE, !"Вы успешно вырвали саженец конопли из земли.");
									    GameTextForPlayer(playerid, "torned", 0, 1);
									}
								}
							}
						}
					}
				}
				if(PI[playerid][pEventTime] > 0)
				{
					PI[playerid][pEventTime] --;
					f(global_str, 50, "Time: %s", ConvertTD(PI[playerid][pEventTime]));
					PlayerTextDrawSetString(playerid, EventTimeTD[playerid][0], global_str);
					if(PI[playerid][pEventTime] == 0)
					{
						SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{ffffff}Вы успешно покинули мероприятие, так-как у вас закончилось время!\n\n", !"Принять", !"");
						DestroyPlayerTD(playerid, EventTimeTD[playerid][0]);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						UpdatePlayerPos(playerid, -2267.3701, 180.6651, 35.3125);
						SetPlayerFacingAngle(playerid, 229.3854);
						if(IsPlayerAttachedSlotUsedEx(playerid, 3))
							RemovePlayerAttachedObject(playerid,3);
					}
				}
				if(Fullness[playerid] > 2 && Crack{playerid} && !CuffedTime[playerid] && !Cuffed[playerid])
			    {
			        Crack{playerid} = false;
			        TogglePlayerControllable(playerid,true);
			        ClearAnimations(playerid);
			    }
				if(PlayerAFK[playerid] == 0 || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
				{
					PlayerAFKTime[playerid][0] ++;
                    if(PlayerAFKTime[playerid][0] >= 3000) global_str = "Вышел на улицу {E66E6E}( 50:00+ )";
					else
					{
					    if(PlayerAFKTime[playerid][0] <= MAX_AFK_TIME) f(global_str,80,"Отошел {73B461}( %s )",Convert(PlayerAFKTime[playerid][0]));
					    else global_str = "Кушает {6495ED}( 5:00+ )";
					}
					SetPlayerChatBubble(playerid, global_str, COLOR_WHITE, 30.0, 3000);
				}
				PlayerAFK[playerid] = 0;
				if(Recuffer[playerid]!=INVALID_PLAYER_ID)
				{
					new Float:x,Float:y,Float:z;
					GetPlayerPos(Recuffer[playerid],x,y,z);
				    if(!IsPlayerInRangeOfPoint(playerid, 50, x, y, z))
					{
					    cuffer[playerid]++;
					    f(global_str, 125, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Free %d/10 Sec.",cuffer[playerid]);
						GameTextForPlayer(playerid, global_str, 1000, 3);

					    if(cuffer[playerid]>=10)
					    {
					        if(IsPlayerConnected(Recuffer[playerid]))SCM(Recuffer[playerid],COLOR_GREY, !"[Ошибка] {FFFFFF} Вы отошли слишком далеко от игрока которого сковали!");
						    Cuffed[playerid] = false;
							CuffedTime[playerid] = 0;
							TogglePlayerControllable(playerid,true);
							SetPlayerSpecialAction(playerid, 0);
						    ClearAnimationsEx(playerid);
				         	SCM(playerid,COLOR_GREY, !"[Информация]{FFFFFF} Вы успешно избавились от наручников.");
				         	CheckPlayerGoCuff(Recuffer[playerid]);
	                        CheckPlayerGoCuff(playerid);
					    }
					}
					else if(cuffer[playerid]>0)cuffer[playerid]--;
				}
				if(PI[playerid][pMaskON]>0)
				{
				    PI[playerid][pMaskON]--;
				    if(PI[playerid][pMaskON]==0)
				    {
				        if(TeamDuty{playerid}) SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)][0]);
						else SetPlayerColor(playerid,0xFFFFFF80);
				        SCM(playerid,COLOR_BLUE, !"[Информация] {FFFFFF}Время действия маски истекло, вам пришлось ее выбросить.");
				        SetPlayerChatBubble(playerid, "Выбросил маску", COLOR_PURPLE, 10.0, 5000);
				    }
				}

				if(gunmute[playerid] <=Global_Time)
				{
					new weapon = GetPlayerWeaponEx(playerid),
						ammo = GetPlayerAmmoEx(playerid),
						weap = GetPlayerWeaponEx(playerid),
						slot = GetWeaponSlotEx(weap);

	       			if(slot < 13 && PI[playerid][pGuns][slot] == weapon)
				    {
				        if(PI[playerid][pAmmos][slot] == GetPlayerAmmoEx(playerid))
				        {
							PI[playerid][pLastGun]= weapon;
							PI[playerid][pLastAmmo]= ammo;
						}
					}
				}
				if(kostiKos[playerid]>0)
				{
				    kostiKos[playerid]--;
				    CarryAnim(playerid);
				    if(kostiKos[playerid]==0)
				    {
				        if(IsPlayerAttachedSlotUsedEx(playerid,7)) RemovePlayerAttachedObject(playerid,7);
				        ApplyAnimationEx(playerid, "BD_FIRE", "BD_Fire1", 4.1, 0, 0, 0, 0, 1, 1);
				        kostiKos[playerid]=0;
				    }
				}
				new job = PlayerJob[playerid];
				if((job == JOB_PORTER || job == 17 || job == JOB_PIZZA || job == 21)&& InJob[playerid]==3) CarryAnim(playerid);
				if(PI[playerid][pMoney] < 0)
				{
					PI[playerid][pMoney] = 0;
				    SetPlayerMoney(playerid, 0);
					SCM(playerid, COLOR_RED, !"Баланс денег на руках превысил лимит в $2000000000. Обратитесь в Технический раздел на форуме для возврата.");
					//
					f(global_str, 256, "Игрок <a href=../pages/user?name=%s>%s</a> потерял все деньги. Причина: баг с деньгами ( - )", PN(playerid), PN(playerid));
					aml(global_str, 0, "","");
				}
				if(CreteBomb[playerid]>0 && CreteBomb[playerid] < 100 )
				{
				    CreteBomb[playerid]--;
				    f(global_str, 150, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Creating %d Sec.",CreteBomb[playerid]);
					GameTextForPlayer(playerid, global_str, 1000, 3);
				    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
				    SetPlayerChatBubble(playerid, "Делает подозрительный предмет", COLOR_PURPLE, 10.0, 5000);
				    if(CreteBomb[playerid]==0)
				    {
						SCM(playerid,COLOR_GREY, !"Вы успешно сделали бомбу, будьте осторожны, не прыгайте!");
	     				if(!IsPlayerAttachedSlotUsedEx(playerid, 7))SetPlayerAttachedObject(playerid, 7, 1279, 5, 0.05, 0.24, 0.2, 104, 10, 75);
						CreteBomb[playerid]=250;
						PI[playerid][pBomb]=1;
						CarryAnim(playerid);
					}
				}
				if(BusTime[playerid] > 0)
			    {
			        BusTime[playerid]--;
				    f(global_str,20,"~r~%d", BusTime[playerid]);
				    GameTextForPlayer(playerid,global_str,1000,6);
					if(BusTime[playerid] <= 1) endrabavt(playerid);
			    }

				if(SharInfo[playerid][sharStatus])
				{
					new Float:dist, Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					dist = GetVehicleDistanceFromPoint(SharInfo[playerid][sharVehicle], X, Y, Z);
					if(dist > 15)
					{
						new timer = Int_GetPlayerData(playerid,"TimetoReturn");
						if(timer < 20)
						{
						    SetPVarInt(playerid,"TimetoReturn",timer+1);
						    f(global_str, 50,"RETURN %d/20", timer);
						    GameTextForPlayer(playerid, global_str, 500, 3);
						}
						else ResetShar(playerid),SetPVarInt(playerid,"TimetoReturn",0);
					}
				}

				if(AksSlot[playerid][0][0] == 618)
				{
					new Float:Health;
					GetPlayerHealth(playerid, Health);
					{
						if(Health != 100.0)
						{
							SetPVarInt(playerid, "AngelKolco", Int_GetPlayerData(playerid, "AngelKolco")+1);
							if(Int_GetPlayerData(playerid, "AngelKolco") == 5)
							{
								if(Health > 95) UpdatePlayerHealth(playerid, 100);
								else UpdatePlayerHealth(playerid, Health+5);
								DeletePVar(playerid, "AngelKolco");
							}
						}
					}
				}
				if(SERIU[playerid][sID] != INVALID_PLAYER_ID && PI[playerid][pAdmin] != 0)
				{
					PlayerTextDrawSetString(playerid, recon_p[playerid][22],PN(SERIU[playerid][sID]));
					f(global_str, 50, "%d:%d/%d",PI[SERIU[playerid][sID]][pLevel],PI[SERIU[playerid][sID]][pExp],(PI[SERIU[playerid][sID]][pLevel]+1)*4);
					PlayerTextDrawSetString(playerid, recon_p[playerid][20],global_str);
					f(global_str, 15, "%d",PI[SERIU[playerid][sID]][pWarns]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][19],global_str);
					f(global_str, 15, "%.0f",PI[SERIU[playerid][sID]][pArmour]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][18],global_str);
					f(global_str, 15, "%.0f",PI[SERIU[playerid][sID]][pHealth]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][17],global_str);
					if(GetPlayerState(SERIU[playerid][sID]) == 1)
					{
						f(global_str, 30, "%d / 257",PlayerSpeed(SERIU[playerid][sID]));
						PlayerTextDrawSetString(playerid, recon_p[playerid][15], global_str);
						PlayerTextDrawSetString(playerid, recon_p[playerid][16],"-");
						PlayerTextDrawSetString(playerid, recon_p[playerid][9],"-");
					}
					if(GetPlayerState(SERIU[playerid][sID]) == 2)
					{
						new Float:HP;
						GetVehicleHealth(GetPlayerVehicleID(SERIU[playerid][sID]),HP);
						f(global_str, 15, "%.1f",HP);
						PlayerTextDrawSetString(playerid, recon_p[playerid][16],global_str);
						f(global_str, 15, "%d",GetVehicleSpeed(GetPlayerVehicleID(SERIU[playerid][sID])));
						PlayerTextDrawSetString(playerid, recon_p[playerid][15],global_str);
						if(GetEngineStatus(GetPlayerVehicleID(SERIU[playerid][sID])))
						{
							if(IsAOwnableCar(GetPlayerVehicleID(SERIU[playerid][sID])) && VehicleInfo[GetPlayerVehicleID(SERIU[playerid][sID])][vModification] == 554) PlayerTextDrawSetString(playerid, recon_p[playerid][9],"On(TT)");
							else PlayerTextDrawSetString(playerid, recon_p[playerid][9],"On(NO TT)");
						}
						else
						{
							if(IsAOwnableCar(GetPlayerVehicleID(SERIU[playerid][sID])) && VehicleInfo[GetPlayerVehicleID(SERIU[playerid][sID])][vModification] == 554) PlayerTextDrawSetString(playerid, recon_p[playerid][9],"Off(TT)");
							else PlayerTextDrawSetString(playerid, recon_p[playerid][9],"Off(NO TT)");
						}
					}
					/*f(string, sizeof(string), "%d(%.2f)",GetPlayerPIng(SERIU[playerid][sID]),NetStats_PacketLossPercent(SERIU[playerid][sID]));
					PlayerTextDrawSetString(playerid, recon_p[playerid][14],string);*/
					f(global_str, 30, "%d:%d",GetPlayerWeaponEx(SERIU[playerid][sID]),GetPlayerAmmoEx(SERIU[playerid][sID]));
					PlayerTextDrawSetString(playerid, recon_p[playerid][13],global_str);
					PlayerTextDrawSetString(playerid, recon_p[playerid][12],"0/0");
					PlayerTextDrawSetString(playerid, recon_p[playerid][11],"0/0");
					f(global_str, 15, "%d",PlayerAFKTime[SERIU[playerid][sID]]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][10],global_str);
					f(global_str, 15, "%d",SERIU[playerid][sID]);
					PlayerTextDrawSetString(playerid, recon_p[playerid][8],global_str);
				}
			    if(TimeBus[playerid] > 0)
			    {
					TimeBus[playerid]--;
					if(TimeBus[playerid] <= 0)
					{
						TimeBus[playerid]=0;
						switch(Vehs[playerid][vReis])
						{
							case 1: SetPlayerRaceCheckpoint(playerid,BusCityLS[pPressed[playerid]][BUSSTATION1],BusCityLS[pPressed[playerid]][BUS_COORD1][0],BusCityLS[pPressed[playerid]][BUS_COORD1][1],BusCityLS[pPressed[playerid]][BUS_COORD1][2],BusCityLS[pPressed[playerid]+1][BUS_COORD1][0],BusCityLS[pPressed[playerid]+1][BUS_COORD1][1],BusCityLS[pPressed[playerid]+1][BUS_COORD1][2],10.0);
							case 2: SetPlayerRaceCheckpoint(playerid,BusFarm[pPressed[playerid]][BUSSTATION2],BusFarm[pPressed[playerid]][BUS_COORD2][0],BusFarm[pPressed[playerid]][BUS_COORD2][1],BusFarm[pPressed[playerid]][BUS_COORD2][2],BusFarm[pPressed[playerid]+1][BUS_COORD2][0],BusFarm[pPressed[playerid]+1][BUS_COORD2][1],BusFarm[pPressed[playerid]+1][BUS_COORD2][2],10.0);
							case 3: SetPlayerRaceCheckpoint(playerid,BusZav[pPressed[playerid]][BUSSTATION3],BusZav[pPressed[playerid]][BUS_COORD3][0],BusZav[pPressed[playerid]][BUS_COORD3][1],BusZav[pPressed[playerid]][BUS_COORD3][2],BusZav[pPressed[playerid]+1][BUS_COORD3][0],BusZav[pPressed[playerid]+1][BUS_COORD3][1],BusZav[pPressed[playerid]+1][BUS_COORD3][2],10.0);
							case 4: SetPlayerRaceCheckpoint(playerid,BusAvto[pPressed[playerid]][BUSSTATION4],BusAvto[pPressed[playerid]][BUS_COORD4][0],BusAvto[pPressed[playerid]][BUS_COORD4][1],BusAvto[pPressed[playerid]][BUS_COORD4][2],BusAvto[pPressed[playerid]+1][BUS_COORD4][0],BusAvto[pPressed[playerid]+1][BUS_COORD4][1],BusAvto[pPressed[playerid]+1][BUS_COORD4][2],10.0);
							case 5: SetPlayerRaceCheckpoint(playerid,BusLv[pPressed[playerid]][BUSSTATION5],BusLv[pPressed[playerid]][BUS_COORD5][0],BusLv[pPressed[playerid]][BUS_COORD5][1],BusLv[pPressed[playerid]][BUS_COORD5][2],BusLv[pPressed[playerid]+1][BUS_COORD5][0],BusLv[pPressed[playerid]+1][BUS_COORD5][1],BusLv[pPressed[playerid]+1][BUS_COORD5][2],10.0);
							case 6: SetPlayerRaceCheckpoint(playerid,BusLvv[pPressed[playerid]][BUSSTATION6],BusLvv[pPressed[playerid]][BUS_COORD6][0],BusLvv[pPressed[playerid]][BUS_COORD6][1],BusLvv[pPressed[playerid]][BUS_COORD6][2],BusLvv[pPressed[playerid]+1][BUS_COORD6][0],BusLvv[pPressed[playerid]+1][BUS_COORD6][1],BusLvv[pPressed[playerid]+1][BUS_COORD6][2],10.0);
							case 7: SetPlayerRaceCheckpoint(playerid,BusLvvv[pPressed[playerid]][BUSSTATION7],BusLvvv[pPressed[playerid]][BUS_COORD7][0],BusLvvv[pPressed[playerid]][BUS_COORD7][1],BusLvvv[pPressed[playerid]][BUS_COORD7][2],BusLvvv[pPressed[playerid]+1][BUS_COORD7][0],BusLvvv[pPressed[playerid]+1][BUS_COORD7][1],BusLvvv[pPressed[playerid]+1][BUS_COORD7][2],10.0);
							case 8: SetPlayerRaceCheckpoint(playerid,bussf[pPressed[playerid]][BUSSTATION8],bussf[pPressed[playerid]][BUS_COORD8][0],bussf[pPressed[playerid]][BUS_COORD8][1],bussf[pPressed[playerid]][BUS_COORD8][2],bussf[pPressed[playerid]+1][BUS_COORD8][0],bussf[pPressed[playerid]+1][BUS_COORD8][1],bussf[pPressed[playerid]+1][BUS_COORD8][2],10.0);
							case 9: SetPlayerRaceCheckpoint(playerid,buslvsf[pPressed[playerid]][BUSSTATION9],buslvsf[pPressed[playerid]][BUS_COORD9][0],buslvsf[pPressed[playerid]][BUS_COORD9][1],buslvsf[pPressed[playerid]][BUS_COORD9][2],buslvsf[pPressed[playerid]+1][BUS_COORD9][0],buslvsf[pPressed[playerid]+1][BUS_COORD9][1],buslvsf[pPressed[playerid]+1][BUS_COORD9][2],10.0);
							case 10: SetPlayerRaceCheckpoint(playerid,bussfsf[pPressed[playerid]][BUSSTATION10],bussfsf[pPressed[playerid]][BUS_COORD10][0],bussfsf[pPressed[playerid]][BUS_COORD10][1],bussfsf[pPressed[playerid]][BUS_COORD10][2],bussfsf[pPressed[playerid]+1][BUS_COORD10][0],bussfsf[pPressed[playerid]+1][BUS_COORD10][1],bussfsf[pPressed[playerid]+1][BUS_COORD10][2],10.0);
							case 11: SetPlayerRaceCheckpoint(playerid,bussffa[pPressed[playerid]][BUSSTATION11],bussffa[pPressed[playerid]][BUS_COORD11][0],bussffa[pPressed[playerid]][BUS_COORD11][1],bussffa[pPressed[playerid]][BUS_COORD11][2],bussffa[pPressed[playerid]+1][BUS_COORD11][0],bussffa[pPressed[playerid]+1][BUS_COORD11][1],bussffa[pPressed[playerid]+1][BUS_COORD11][2],10.0);
						}
					}
				}
				new carid = GetPlayerVehicleID(playerid);
				if(GetPlayerState(playerid) == 2)
				{
				    if(GetEngineStatus(carid) && !IsARC(carid) && !IsAVelik(carid) && !IsAPlane(carid) && GetPVarInt(playerid, "updateVehicleFuel") != floatround(Fuel[carid]))
					{
						switch PI[playerid][pCustomInterface][1] do
						{
							//case 0: PlayerTextDrawSetString(playerid, speedometr[playerid][3], (str_f("%i%", floatround(Fuel[carid]))));
							case 1,2:
							{
								new BitStream:bs = BS_New();

								BS_WriteValue(bs, 
									PR_UINT8, 220, 
									PR_UINT8, 7, 
									PR_FLOAT, Fuel[carid]);

								PR_SendPacketEx(bs, playerid), BS_Delete(bs);
							}
							case 3,4: executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.vehicleLiters', '[%i]');", floatround(Fuel[carid]))));
							//case 5: PlayerTextDrawSetString(playerid, speeddraw[playerid][5], (str_f("fuel: %i%", floatround(Fuel[carid]))));
						}
						SetPVarInt(playerid, "updateVehicleFuel", floatround(Fuel[carid]));
					}
					if(PlayerJob[playerid] == JOB_TRUCKER && VehicleInfo[carid][vJob] == JOB_TRUCKER)
					{
						if(IsTrailerAttachedToVehicle(carid))
						{
							if(InJob[playerid] == 0)
							{
								new trailer = GetVehicleTrailer(carid);
								if(GetVehicleModelEx(trailer) == 584)
								{
								    InJob[playerid] = 1;
									ShowPlayerAZS(playerid);
								}
								else if(GetVehicleModelEx(trailer) == 591)
								{
								    InJob[playerid] = 1;
									ShowPlayerGS(playerid);
								}
							}
						}
						else
						{
							if(InJob[playerid] == 1)
							{
							    InJob[playerid] = 0;
							    FactoryMats += 500;
							    new gopost = PlayerGoPost[playerid];
							    if(PlayerGoPost[playerid]!=-1)
							    {
									if(PlayerGoPost[playerid]<20)TogglePlayerDynamicCP(playerid, GoFuelCP[gopost], false);
									if(PlayerGoPost[playerid]<11)TogglePlayerDynamicCP(playerid, GoGunShopCP[gopost], false);
								}
							    SCM(playerid,COLOR_GREY, !"Груз который вы везете отцепился!");
	       						f(global_str, 256, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
								UpdateDynamic3DTextLabelText(FactoryText[0], COLOR_WHITE, global_str);
								PlayerGoPost[playerid]=-1;
								DetachTrailerFromVehicle(carid);
							}
						}
					}
				}
				
			    new tmpcar = GetPlayerVehicleID(playerid);
				//античит на хп by union
				if(VehicleInfo[tmpcar][vAntiRepair]>0) VehicleInfo[tmpcar][vAntiRepair]--;
				new Float:vehhealth; GetVehicleHealth(tmpcar, vehhealth);
				if(!VehicleInfo[tmpcar][vAntiRepair] && VehicleHealth[tmpcar]<vehhealth) SetVehicleHealth(tmpcar,VehicleHealth[tmpcar]);
				if(!VehicleInfo[tmpcar][vAntiRepair] && VehicleHealth[tmpcar]>vehhealth) VehicleHealth[tmpcar] = vehhealth;
				new Float:X, Float:Y, Float:Z, Float:A;
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, A);
				if(pTemp[playerid][tAuthorized])
				{
					if(CreateMats[playerid] == 4) CarryAnim(playerid);
					if(Cuffed[playerid])
					{
						if(!CuffedTime[playerid])
						{
							if(pTemp[playerid][BreakTime] > 0)
							{
								pTemp[playerid][BreakTime] --;
								if(!pTemp[playerid][BreakTime])
								{
									if(pTemp[playerid][BreakCount] < 10)
									{
										SetPlayerRandomKey(playerid, pTemp[playerid][BreakKey]);
										ShowPlayerActionBand(playerid, pTemp[playerid][BreakCount], 10);
									}
								}
							}
						}
					}
					else
					{
						if(TheftCarID[playerid] != 0)
						{
							carid = TheftCarID[playerid];
							if(TheftTime[playerid] > 0)
							{
								new Float:fX,Float:fY,Float:fZ;
								GetVehiclePos(carid, fX, fY, fZ);
								if(IsPlayerInRangeOfPoint(playerid, 2.0, fX, fY, fZ))
								{
									TheftTime[playerid] --;
									if(TheftTime[playerid] <= 0)
									{
										if(TheftCount[playerid] >= 10)
										{
											TheftKey[playerid] = 0;
											TheftTime[playerid] = 0;
											TheftCount[playerid] = 0;
											TheftCarID[playerid] = 0;
											new number = GetVehicleID(carid);
											CarInfo[number][cLock] = 0;
											SetDoorsStatus(carid, false);
											SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Вы успешно взломали транспорт!");
											GameTextForPlayer(playerid, "successful", 0, 1);
											TogglePlayerControllable(playerid, true);
											HidePlayerActionText(playerid);
											HidePlayerActionBand(playerid);
										}
										else
										{
											SetPlayerRandomKey(playerid, TheftKey[playerid]);
											ShowPlayerActionBand(playerid, TheftCount[playerid], 10);
										}
									}
								}
								else
								{
									TheftKey[playerid] = 0;
									TheftTime[playerid] = 0;
									TheftCount[playerid] = 0;
									TheftCarID[playerid] = 0;
									ClearAnimationsEx(playerid);
									TogglePlayerControllable(playerid, true);
									HidePlayerActionText(playerid);
									HidePlayerActionBand(playerid);
								}
							}
						}
						if(TheifTime[playerid] > 0)
						{
							TheifTime[playerid] --;
							if(!TheifTime[playerid])
							{
								if(TheifCount[playerid] < 8)
								{
									SetPlayerRandomKey(playerid, TheifKey[playerid]);
									ShowPlayerActionBand(playerid, TheifCount[playerid], 8);
								}
							}
						}
					}
					if(IsPlayerInAnyVehicle(playerid))
					{
						carid = GetPlayerVehicleID(playerid);
						new myseat = GetPlayerVehicleSeat(playerid);
						if(myseat != 128)if(VehicleSeat[carid][myseat] != playerid) VehicleSeat[carid][myseat] = playerid;
						if(GetPlayerState(playerid) == 2)
						{
							CheckEnterCar(playerid, carid);
							if(!IsAPlane(carid) && !IsAVelik(carid))
							{
								new Float:VHealth;
								GetVehicleHealth(carid,VHealth);
								if(VHealth < 500)
								{
									if(GetEngineStatus(carid))
									{
										UnEngine[carid] ++;
										if(UnEngine[carid] >= random(10))
										{
											if(GetVehicleModelEx(carid) != 494)
											{
												SetEngineStatus(carid, false, playerid);
												f(global_str, 100,"* Двигатель заглох (( %s ))",PN(playerid));
												ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
												UnEngine[carid] = 0;
												if(VHealth < 400)
												{
													SCM(playerid, COLOR_GREY, !"Ваш двигатель сильно поврежден. Для его починки вызовите механика!");
													SCM(playerid, COLOR_GREY, !"Чтобы вызвать механика, используйте телефон");
												}
											}
										}
									}
								}
							}
						}
						else
						{
							if(IsATaxi(carid))
							{
								new id = GetVehicleSeat(carid, 0);
								if(id != INVALID_PLAYER_ID && PlayerJob[id] == JOB_TAXI)
								{
									TaxiDistance[playerid] += GetPlayerVehicleSpeed(id);
									if(TaxiDistance[playerid] >= 650)
									{
										if(PlayerAFKTime[playerid][0]==0 && PlayerAFKTime[id][0]==0)
										{
											if( PI[playerid][pMoney] <= TaxiPrice[playerid])
											{
												RemovePlayerFromVehicle(playerid);
												SCM(playerid,COLOR_GREY, !"У вас не осталось денег на оплату такси!");
												SetPlayerMoney(playerid,0);
												PlayerTextDrawHide(playerid,TaxiDraw[playerid]);
												PlayerTextDrawSetString(playerid, TaxiDraw[playerid],"0");
												TextDrawHideForPlayer(playerid, BoxTaxi1);
												TextDrawHideForPlayer(playerid, BoxTaxi2);
												TextDrawHideForPlayer(playerid, Taximonitor);
												TextDrawHideForPlayer(playerid, TaxiServ);
												TextDrawHideForPlayer(playerid, TaxiDol);
												TaxiPrice[id] = 0;
												TaxiDistance[id] = 0;
											}
											TaxiDistance[playerid] = 0;
											TaxiPrice[playerid] += TaxiTarif[id];
											f(global_str, 15,"%d",TaxiPrice[playerid]);
											PlayerTextDrawSetString(playerid, TaxiDraw[playerid],global_str);
											new money;
											for(new i = 1; i < 4; i ++)
											{
												new seat = GetVehicleSeat(carid, i);
												if(seat != INVALID_PLAYER_ID) money += TaxiPrice[seat];
											}
											f(global_str, 15,"%d", money);
											PlayerTextDrawSetString(id, TaxiDraw[id], global_str);
										}
									}
								}
							}
						}
					}
					if(Smoke[playerid] == 1)
					{
						if(SmokeTime[playerid] > 0)
						{
							SmokeTime[playerid] --;
							if(!SmokeTime[playerid])
							{
								new Float:Health;
								GetPlayerHealth(playerid, Health);
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
								if(Health+5 < 100.0) UpdatePlayerHealth(playerid,Health+5);
								if(Smokes[playerid] >= 4)
								{
									f(global_str, 150,"* %s[%d] докурил(а) сигарету и выбросил(а) окурок",PN(playerid),playerid);
									ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
									SmokeTime[playerid] = 0;
									Smokes[playerid] = 0;
									Smoke[playerid] = 0;
								}
								else
								{
									Smokes[playerid] ++;
									SmokeTime[playerid] = 10;
									f(global_str, 100,"* %s[%d] стряхнул(а) пепел",PN(playerid),playerid);
									ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
								}
							}
						}
					}
					if(TimeOfCuff[playerid] > 0)
					{
						if(PlayerOfCuff[playerid] != INVALID_PLAYER_ID)
						{
							new cuffid = PlayerOfCuff[playerid];
							if(PlayerOfCuff[cuffid] == playerid)
							{
								if(!Cuffed[playerid] && !Cuffed[cuffid])
								{
									if(ProxDetectorS(3.0, playerid, cuffid, 1))
									{
										TimeOfCuff[playerid] --;
										if(TimeOfCuff[playerid] <= 0)
										{
											ClearAnimationsEx(playerid);
											PlayerOfCuff[playerid] = INVALID_PLAYER_ID;
											PlayerOfCuff[cuffid] = INVALID_PLAYER_ID;
											f(global_str, 80," %s сковал %s",PN(playerid),PN(cuffid));
											ProxDetector(25,playerid,global_str,COLOR_PURPLE);
											SCM(playerid, COLOR_WHITE, !"Чтобы расковать игрока введите {33AA33}/uncuff");
											SCM(playerid, COLOR_WHITE, !"Чтобы взять игрока под конвой введите {33AA33}/gotome");
											CuffedPlayer(cuffid, 0);
										}
									}
									else CancelCuff(playerid);
								}
								else CancelCuff(playerid);
							}
							else CancelCuff(playerid);
						}
					}
					UpdateMap(playerid);
					if(PI[playerid][pAdmin]==0)
					{
						new speed = PlayerSpeed(playerid);
						if(!speed) FullnessTick[playerid] ++;
						else FullnessTick[playerid] += speed/4;
						if(Fullness[playerid] > 0)
						{
							if(FullnessTick[playerid] >= 250)
							{
								new Float:Health;
								GetPlayerHealth(playerid,Health);
								if(PI[playerid][pVIP][0]>=2)Fullness[playerid]-=1;
								else Fullness[playerid]-=2;
								FullnessTick[playerid] = 0;
								SetFullness(playerid,Fullness[playerid]);
								switch(Fullness[playerid])
								{
									case 1..15: UpdatePlayerHealth(playerid,Health-4);
									case 0:
									{
										UpdatePlayerHealth(playerid,Health-6);
										SetFullness(playerid,5);
										SCM(playerid,COLOR_WHITE, !"Вы очень хотите есть, посетите закусочную или купите Хот-Дог!");
										if(PI[playerid][pHospital]>0)
										{
											PI[playerid][pHospital]--;
										}

									}
								}

							}
						}
						if(PI[playerid][pAllRepl]>200 && CuffedTime[playerid] ==0 && !Cuffed[playerid])
						{
							if(speed)
							{
								PI[playerid][pOldRepl] += speed/35;
								if((PI[playerid][pOldRepl]>=100 && PI[playerid][pOldRepl] <=103) || (PI[playerid][pOldRepl]>=200 && PI[playerid][pOldRepl]<=203) || (PI[playerid][pOldRepl]>=300 && PI[playerid][pOldRepl]<=303) || (PI[playerid][pOldRepl]>=400 && PI[playerid][pOldRepl]<=403) ||
								(PI[playerid][pOldRepl]>=500 && PI[playerid][pOldRepl]<=503) || (PI[playerid][pOldRepl]>=600 && PI[playerid][pOldRepl]<=603) || (PI[playerid][pOldRepl]>=700 && PI[playerid][pOldRepl]<=703) || (PI[playerid][pOldRepl]>=800 && PI[playerid][pOldRepl]<=803))

								{
									f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~need drugs %d/1000", PI[playerid][pOldRepl]);
									GameTextForPlayer(playerid, global_str, 3000, 3);
								}
							}
							if(PI[playerid][pOldRepl]>1000 && startlomka[playerid]==0)
							{
								if(PI[playerid][pAllRepl]>200 && PI[playerid][pAllRepl] <300) PI[playerid][pOldRepl] = 200;
								if(PI[playerid][pAllRepl]>=300 && PI[playerid][pAllRepl] <400) PI[playerid][pOldRepl] = 350;
								if(PI[playerid][pAllRepl]>=400)PI[playerid][pOldRepl] = 500;
								SCM(playerid, COLOR_RED, !"~~~~~~~~ У вас началась ломка ~~~~~~~~");
								SCM(playerid, COLOR_WHITE, !"(( Вызовите медика!    ||    Принять наркотик - /usedrugs ))");
								if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
								ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
								startlomka[playerid]=1;
							}
							if(speed && startlomka[playerid]==1) ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
							if(startlomka[playerid]==1 && IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
							if(startlomka[playerid]==1)
							{
								PI[playerid][pOldRepl]--;
								SetPlayerChatBubble(playerid, "Страдает от ломки!", COLOR_RED, 10.0, 5000);
								f(global_str, 100,"Wait you breaking : %d",PI[playerid][pOldRepl]);
								GameTextForPlayer(playerid, global_str, 700, 3);
							}
							if(PI[playerid][pOldRepl]<=0 && startlomka[playerid]==1)
							{
								startlomka[playerid]=0;
								PI[playerid][pOldRepl]=0;
								ClearAnimationsEx(playerid);
							}
						}
						if(UseDrugsTime[playerid] > 0)
						{
							UseDrugsTime[playerid] --;
							if(UseDrugsTime[playerid]>120) ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
							else if(UseDrugsTime[playerid]>=115 && UseDrugsTime[playerid]<=120)
							{
								TogglePlayerControllable(playerid,true);
								ClearAnimationsEx(playerid);
								UseDrugsTime[playerid]=0;
							}
						}
						if(medlomka[playerid]>0 && IsPlayerInRangeOfPoint(playerid, 100.0,2065.5859,-1374.3174,1001.2960))
						{
							medlomka[playerid]--;
							f(global_str, 100,"Wait you healing : %d",medlomka[playerid]);
							GameTextForPlayer(playerid, global_str, 700, 3);
							if(lomanim[playerid]==0)
							{
								ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
								SetPlayerChatBubble(playerid, "Лечится от наркозависимости", COLOR_VALIK, 10.0, 5000);
							}
							new meda = medlomka[playerid];
							if(meda== 200 || meda== 140 || meda== 100 || meda== 50 ||
							meda== 20)
							{
								SCM(playerid,COLOR_VALIK, !"Лечениe немного вам помогло. Держитесь!");
								if(PI[playerid][pAllRepl]>=4) PI[playerid][pAllRepl]-=4;
								else if(PI[playerid][pAllRepl]>=1) PI[playerid][pAllRepl]-=1;
							}
							if(medlomka[playerid]==180 || medlomka[playerid]==95) lomanim[playerid]=7;
							if(lomanim[playerid]>0)
							{
								if(lomanim[playerid]==7) SeccureAnimation(playerid, "FOOD", "EAT_Vomit_P");//рыгаем
								SetPlayerChatBubble(playerid, "Рвота от лекарства", COLOR_RED, 10.0, 5000);
								lomanim[playerid]--;
							}
							if(medlomka[playerid]==0)
							{
								SCM(playerid,COLOR_VALIK, !"Вы успешно прошли сеанс лечения от наркозависимости.");
								ClearAnimationsEx(playerid);
							}
						}
					}
					if(OGReset[playerid] > 0) OGReset[playerid] --;
					if(TextReset[playerid] > 0) TextReset[playerid] --;
					if(CuffedTime[playerid] > 0)
					{
						CuffedTime[playerid] --;
						ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0, 1);
						if(CuffedTime[playerid] <= 0)
						{
							new tazer = TazerPlayer[playerid];
							if(tazer != INVALID_PLAYER_ID)
							{
								TazerPlayer[playerid] = INVALID_PLAYER_ID;
								TazerPlayer[tazer] = INVALID_PLAYER_ID;
							}
						}
					}
					if(NoEnterPickup[playerid])
					{
						NoEnterPickup[playerid] --;
						if(!NoEnterPickup[playerid]) TogglePlayerControllable(playerid, true);
					}
					//
					if( ++ PI[playerid][pBeg][4] >= 40 && PI[playerid][pBeg][1])
						GiveMoney(playerid, !PI[playerid][pBeg][3] ? 10:15, "получение с /beg"), PI[playerid][pBeg][4] = 0;
					
					//
					if(PI[playerid][pHeal] > 0)
					{
						PI[playerid][pHealTime] ++;
						if(PI[playerid][pHealTime] >= (8+random(3)))
						{
							new Float:Health=PI[playerid][pHealth];
							//GetPlayerHealth(playerid,Health);
							if(!PlayerLie{playerid})
							{
								if(PI[playerid][pVIP][0]>=2)
								{
									Health += 4;
									GameTextForPlayer(playerid, "+4 HP", 0, 1);
								}
								else
								{
									GameTextForPlayer(playerid, "+2 HP", 0, 1);
									Health += 2;
								}
								UpdatePlayerHealth(playerid,Health);
							}
							else
							{
								if(PI[playerid][pVIP][0]>=2)
								{
									GameTextForPlayer(playerid, "+10 HP", 0, 1);
									Health += 10;
								}
								else
								{
									GameTextForPlayer(playerid, "+5 HP", 0, 1);
									Health += 5;
								}
								UpdatePlayerHealth(playerid,Health);
							}
							if(PI[playerid][pHealth] >= 100)
							{
								if(PlayerLie{playerid})
								{
									new bed = PlayerBed[playerid];
									ClearAnimationsEx(playerid);
									UpdatePlayerPos(playerid,HealInfo[bed][hCP][0],HealInfo[bed][hCP][1],HealInfo[bed][hCP][2]);
									CheckBed(playerid);
								}
								PI[playerid][pHeal] = 0;
								PI[playerid][pHospCity]=0;
								UpdatePlayerHealth(playerid,100);
								ResetSpawnInfo(playerid, GetTeamID(playerid));
								TogglePlayerControllable(playerid,true);
								SCM(playerid,COLOR_LIGHTBLUE,"Вы закончили свое лечение.");
							}
							PI[playerid][pHealTime] = 0;
						}
					}
					else
					{
						if(PI[playerid][pDemorgan] > 0)
						{
							PI[playerid][pDemorgan] --;
							f(global_str, 100, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Jailed %d Sec.", PI[playerid][pDemorgan]);
							GameTextForPlayer(playerid, global_str, 1000, 3);
							if(!IsPlayerInRangeOfPoint(playerid, 50.0, -799.1370, 2831.1130, 1501.9896)) PlayerSpawn(playerid);
							
							if(!PI[playerid][pDemorgan])
							{
								SCM(playerid, COLOR_RED, "Вы можете выйти из психиатрической больницы!");
								SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
							}
						}
					}
					
					if(PI[playerid][pMuteTime] > 0)
					{
						PI[playerid][pMuteTime] --;

						if(!PI[playerid][pMuteTime]) 
						{
							SCM(playerid, COLOR_VALIK, !"Вы были автоматически разглушены сервером.");
							UpdatePlayerDataInt(playerid, "MuteTime", 0);
						}
					}

					if(PI[playerid][pFMuteTime] > 0)
					{
						PI[playerid][pFMuteTime] --;
						if(!PI[playerid][pFMuteTime])
						{
							SCM(playerid, COLOR_VALIK, !"Вы были автоматически разглушены сервером.");

							UpdatePlayerDataInt(playerid, "FMuteTime", 0);
						}
					}

					if(PI[playerid][pRMuteTime] > 0)
					{
						PI[playerid][pRMuteTime] --;

						if(!PI[playerid][pRMuteTime])
						{
							SCM(playerid, COLOR_VALIK, !"Блокировка написания репортов автоматически снята сервером.");
							UpdatePlayerDataInt(playerid, "rMuteTime", 0);
						}
					}
					
					
					if(FP_Data[playerid][F_FAMILY_MUTE] > 0)
					{
						FP_Data[playerid][F_FAMILY_MUTE] --;
						if(!FP_Data[playerid][F_FAMILY_MUTE])
						{
							SCM(playerid, COLOR_VALIK, !"Вы были автоматически разглушены сервером.");
						}
					}
				}
			}
		}
	}
	return false;
}

stock MinuteTimer()
{

	new Float:Health;

	foreach(new playerid: Player)
	{
		GetPlayerHealth(playerid, Health);

		if(GetAccessoryUpdate(AksSlot[playerid][1][0]) && Health < 100.0)
		{
			UpdatePlayerHealth(playerid, Health + GetAccessoryUpdate(AksSlot[playerid][1][0]) );
		}
	}
	return true;
}

stock GetAccessoryUpdate(level)
{
	switch level do
	{
		case 4..13:
			return level - 3;
	}
	
	return false;
}

stock SetBumSkin(playerid)
{
	SetPlayerSkinEx(playerid, PI[playerid][pSkin][0]);
	TogglePlayerControllable(playerid,true);
	return 1;
}

stock CheckGas(carid)
{
	CarTime[carid] += 10;
    if(!IsAVelik(carid) && !IsAMoped(carid) && !IsAPlane(carid))
	{
		if(GetEngineStatus(carid))
		{
			if(CarTime[carid] >= 30)
			{
				CarTime[carid] = 0;
				if(Fuel[carid] > 0.0)
				{
				    if(IsTrailerAttachedToVehicle(carid)) Fuel[carid] -= 0.5;
				    else Fuel[carid] -= 0.1;
		   			if(Fuel[carid] < 0.0)
					{
						SetEngineStatus(carid,false,-1);
						
						if(!(GetVehicleSeat(carid, 0) == INVALID_PLAYER_ID))
							SCM(GetVehicleSeat(carid, 0), COLOR_GREY, !"В этом транспорте закончилось топливо.");
					}
				}
			}
		}
	}
	return 1;
}

stock CryptoUpdate_BitCoin()
	return HTTP(0xD00D, HTTP_GET, "45.15.157.144/CryptoAPI.php?crypto=BTCUSDT", "", "GetCrypto_BitCoin");

public: GetCrypto_BitCoin(index, response_code, data[]) {

	banksellbitcoin = strval(data);
	bankbuybitcoin = strval(data) - random(1500);

	return BitCoin_Update();	
}

stock BitCoin_Update()
	return UpdateDynamic3DTextLabelText(Bitcoin3DText, 0xFFFF00FF, (str_f("[ Операции с криптовалютой ]\n{FFFFFF}Сейчас в банке: %d BTC\n\nБанк покупает 1 BTC за %d$\nБанк продаёт 1 BTC за %d$\n\n{cccccc}Нажмите N", bankbitcoin, bankbuybitcoin, banksellbitcoin)));

stock PayDay()
{
	PayDayAccs();
	CryptoUpdate_BitCoin();
	PayDayHouses();
	PayDayBizes();
	PayDayCars();
	PayDayTrailers();
	PayDayOther();

	return SaveServer = 10;
}

stock CheckNextLevel(playerid)
{
	if(PI[playerid][pExp] >= (PI[playerid][pLevel] + 1)*4)
	{
        while PI[playerid][pExp] >= (PI[playerid][pLevel]+1)*4 do
		{
			PI[playerid][pLevel] ++;
			PI[playerid][pExp] -= (PI[playerid][pLevel]+1)*4;
			if(PI[playerid][pLevel] == 5)
			{
				f(global_str, 100, "SELECT `Referal` FROM `accounts` WHERE `NickName`='%s'", PN(playerid));
				mysql_tquery(mysql, global_str, "MysqlReferalCheck", "d", playerid); // реферал поменять
			}
		}
		SetPlayerScore(playerid, PI[playerid][pLevel]);
		return SCMF(playerid, COLOR_VALIK, "Поздравляю! Вы достигли %d-го уровня!", PI[playerid][pLevel]);
	}
	return 0;
}

stock SendAdminsMessage(color, const text[])
{
	foreach(new i: Admin)
		if(PI[i][pAdmin] && ADuty{i})
			SCM(i, color, text);

	return 1;
}

stock PlayerIP(playerid)
	return PlayerIp[playerid];

stock CheckPlayerBanIP(playerid)
{
	static IP[16];
	GetPlayerIp(playerid, IP, 16);
	f(global_str, 100,"SELECT * FROM `banip` WHERE `IP` = '%s' LIMIT 1", IP);
	new Cache:result = mysql_query(mysql, global_str);
	if(cache_num_rows() > 0)
	{
        SCM(playerid, COLOR_RED, "Данный IP заблокирован на нашем сервере!");
		cache_delete(result);
		Kick(playerid);
		return 1;
	}
	cache_delete(result);
	return 0;
}

stock BanPlayer(playerid)
{
	BanName(PN(playerid), "который выдал варн в оффлайне",5,"Заблокирован за получение 3-ех варнов");
	J_Kick(playerid);
	return 1;

}
stock IsBannedName(name[])
{
	f(global_str, 200, "SELECT `Name` FROM `bannames` WHERE BINARY `Name` = '%s' LIMIT 1",name);
	new Cache:result = mysql_query(mysql, global_str);
	new i = cache_num_rows();
    cache_delete(result);
	return i;
}

stock BanName(const name[], const namez[], days, reason[])
{
	mysql_tquery(mysql, (str_f("SELECT * FROM bannames WHERE BINARY `Name` = '%s' LIMIT 1;", name)), "@BanName", "ssds", name, namez, days, reason);

	return true;
}

public: @BanName(player_name[], ban_admin[], days, reason[])
{
	mysql_tquery(mysql, !cache_num_rows() ? (str_f("INSERT INTO `bannames` (`Name`, `BanAdmin`, `BanSeconds`, `BanReason`) VALUE ('%s', '%s', '%d', '%s')", player_name, ban_admin, Global_Time+days*60*60*24, reason)):(str_f("UPDATE `bannames` SET `BanAdmin` = '%s', `BanSeconds` = %d, `BanReason` = '%s' WHERE `Name` = BINARY('%s') LIMIT 1;", ban_admin, Global_Time+days*60*60*24, reason, player_name)));
	
    return true;
}

stock BanIP(IP[])
{
    f(global_str, 100, "INSERT INTO `banip` (`IP`) VALUE ('%s')",IP);
	mysql_tquery(mysql, global_str);
	return 1;
}
stock Convert(number)
{
	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	if(hours > 0) f(string, 30, "%d:%02d:%02d", hours, mins, secs);
	else f(string, 30, "%d:%02d", mins, secs);
	return string;
}
stock UnBanName(name[])
{
	if(IsBannedName(name))
	{
        f(global_str, 150, "DELETE FROM `bannames` WHERE BINARY `Name` = '%s'",name);
        mysql_tquery(mysql, global_str);
	}
	return 1;
}
stock CarryAnim(playerid)
{
    ApplyAnimationEx(playerid, "CARRY", "CRRY_PRTIAL", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

stock SendMuteMessage(playerid)
	return SCMF(playerid, COLOR_GREY, "Вы заглушены. Оставшееся время заглушки %d секунд.", PI[playerid][pMuteTime]);

stock CancelCuff(playerid)
{
    if(PlayerOfCuff[playerid] != INVALID_PLAYER_ID)
	{
		new targetid = PlayerOfCuff[playerid];
	    PlayerOfCuff[playerid] = INVALID_PLAYER_ID;
	    if(PlayerOfCuff[targetid] == playerid)
		{
	    	TimeOfCuff[targetid] = 0;
	    	PlayerOfCuff[targetid] = INVALID_PLAYER_ID;
		}
		ClearAnimationsEx(playerid);
		if(GetPlayerLauncher(playerid)) setPlayerCustomIcon(playerid, 1, false);
	}
	return 1;
}
stock GetJobPN(jobid)
{
	static jobname[50];
	switch(jobid)
	{
	    case 1: jobname = "Водитель автобуса";
	    case 2: jobname = "Детектив";
	    case 3: jobname = "Развозчик продуктов";
	    case 4: jobname = "Механик";
	    case 5: jobname = "Таксист";
	    case 6: jobname = "Адвокат";
	    case 7: jobname = "Фермер";
	    case 8: jobname = "Крупье";
	    case 9: jobname = "Инкассатор";
	    case 10: jobname = "Наркодиллер";
	    case 11: jobname = "Дальнобойщик";
	    case 12: jobname = "Развозчик пиццы";
	    case 13: jobname = "Развозчик металлолома";
	    case 14: jobname = "Мусорщик";
	    case 15: jobname = "Грузчик";
	    case 16: jobname = "Работник Налоговой";
	    case 17: jobname = "Начинающий фермер";
	    case 18: jobname = "Тракторист";
	    case 19: jobname = "Комбайнер";
	    case 20: jobname = "Водитель кукурузника";
	    case 21: jobname = "Строитель";
		case 22: jobname = "Машинист электропоезда";
	    default: jobname = "None";

	}
	return jobname;
}
stock SetSpawnInfoEx(playerid, skin, Float:x, Float:y, Float:z, Float:a)
{
    return SetSpawnInfo(playerid, 255, skin, x, y, z-0.4, a, 0, 0, 0, 0, 0, 0);
}
stock TShowStats(playerid, giveplayerid)
	return CheckItemInv(playerid, giveplayerid);
	
cmd:checkoff(playerid, params[])
{
	if(!CheckAdm(playerid, 4)) return false;
	if(sscanf(params, "s[24]", params[0])) 
		return SCM(playerid, COLOR_OLDRED, "Используйте: /checkoff [name]");
	
	return CheckStatsOff(playerid, params[0]);
}

stock CheckStatsOff(playerid, name[])
{
	/*f(mysql_string, 150, "SELECT * FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", name);
	new Cache:result = mysql_query(mysql, mysql_string);
	if(!cache_num_rows()) {
		SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Данного аккаунта не существует в базе.");
		cache_delete(result); 
		return false;
	}
	// accounts
	f(global_str, 300, "\
	ID в базе данных: %d\n\
	Ник: %s\n\
	Уровень: %d\n\
	Донат счет: %d\n\
	Деньги: %d\n\
	Номер телефона: %d\n\
	Деньги в банке: %d\n\
	Состояние личного счета: %d\n\
	Деньга на депозите: %d",
	cache_get_row_int(0, 0, mysql),
	name, 
	cache_get_row_int(0, 7, mysql),
	cache_get_row_int(0, 81, mysql),
	cache_get_row_int(0, 13, mysql),
	cache_get_row_int(0, 32, mysql),
	cache_get_row_int(0, 14, mysql),
	cache_get_row_int(0, 210, mysql),
	cache_get_row_int(0, 149, mysql));
	
	if(cache_get_row_int(0, 18, mysql))
		f(global_str, 300, "%s\nОрганизация: %s\nДолжность: %s", 
		global_str, 
		OrgInfo[cache_get_row_int(0, 18, mysql)][oName],
		GetRankName(cache_get_row_int(0, 18, mysql), cache_get_row_int(0, 19, mysql)));
	
	f(global_str, 500, "\
	%s\n\
	Предупреждения: %d\n\
	Статус VIP: %s\n\n\
	MuteTime: %s\n\
	Demorgan: %s\n\n\
	Дома:", 
	global_str,
	cache_get_row_int(0, 27, mysql),
	VipNames[cache_get_row_int(0, 16, mysql)],
	Convert( cache_get_row_int(0, 40, mysql) ),
	Convert( cache_get_row_int(0, 86, mysql) ));
	cache_delete(result); 

	//house
	f(mysql_string, 150, "SELECT `ID` FROM `houses` WHERE `Owner` = '%s'", name);
	result = mysql_query(mysql, mysql_string);
	
	if(!cache_num_rows()) strcat(global_str, "\nОтсутствуют");
	else
	{
		for(new i; i < cache_num_rows(); i++)
			f(global_str, 700, "%s\nID %d", global_str, cache_get_row_int(i, 0, mysql));
	}
	cache_delete(result); 
	//
	
	//businesses
	strcat(global_str, "\n\nБизнесы:");
	f(mysql_string, 150, "SELECT `ID` FROM `businesses` WHERE `Owner` = '%s'", name);
	result = mysql_query(mysql, mysql_string);
	
	if(!cache_num_rows()) strcat(global_str, "\nОтсутствуют");
	else
	{
		for(new i; i < cache_num_rows(); i++)
			f(global_str, 700, "%s\nID %d", global_str, cache_get_row_int(i, 0, mysql));
	}
	cache_delete(result); 
	//
	
	//cars
	strcat(global_str, "\n\nАвтомобили:");
	f(mysql_string, 150, "SELECT `Model` FROM `ownable` WHERE `Owner` = '%s'", name);
	result = mysql_query(mysql, mysql_string);
	
	if(!cache_num_rows()) strcat(global_str, "\nОтсутствуют");
	else
	{
		for(new i; i < cache_num_rows(); i++)
			f(global_str, 700, "%s\n[%d] %s", global_str, cache_get_row_int(i, 0, mysql), GetVehicleName(cache_get_row_int(i, 0, mysql), true));
	}
	cache_delete(result); 
	//
	
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Оффлайн статистика игрока", global_str, "Закрыть", ""); 
	return false;
	*/
	return true;
}

stock ShowStats(playerid, giveplayerid)
{
	if(!IsPlayerOnline(giveplayerid)) 
		return false;

	global_str[0] = EOS;

	f(global_str, sizeof(global_str), "\
		{FFFFFF}Номер аккаунта: 		{B83434}%i\n\
		{FFFFFF}Авторизация на сервере: 	{B83434}%s\n\n", PI[giveplayerid][pID], UNIX_TO_DATE(pTemp[giveplayerid][tAuthSuccessTime]));	

	if(PI[giveplayerid][pAdmin])
		strcat(global_str, (str_f("{cccccc}[лаунчер] packetloss: %0.2f\n\n", NetStats_PacketLossPercent(giveplayerid))));

	f(global_str, sizeof(global_str), "\
		%s{FFFFFF}Имя: {B83434}[%s] \n\
		{FFFFFF}Пол: {B83434}[%s] \n\
		{FFFFFF}Здоровье: {B83434}[%i/%i]\n\
		{FFFFFF}Уровень: {B83434}[%i] \n\
		{FFFFFF}Уважение: {B83434}[%i/%i] \n\
		{FFFFFF}Наличные деньги (SA$): {B83434}[$%s]\n\
		{FFFFFF}Наличные деньги (VC$): {B83434}[$%s]\n\
		{FFFFFF}Евро: {B83434}[%i] \n\
		{FFFFFF}BTC: {B83434}[%i]\n\
		{FFFFFF}Номер телефона: {B83434}[%s]\n\
		{FFFFFF}Деньги в банке: {B83434}[$%i]\n\
		{FFFFFF}Деньги на депозите: {B83434}[$%i]\n\
		{FFFFFF}Работа: {B83434}[%s]\n\
		{FFFFFF}Организация: {B83434}[%s]\n\
		{FFFFFF}Должность: {B83434}%s(%i)\n\n", \
		global_str, \
		PN(giveplayerid), \
		PI[giveplayerid][pSex] ? ("Женщина") : ("Мужчина"), \
		floatround(PI[giveplayerid][pHealth]), 100 + GetAccessoryPlayerBuff(giveplayerid, 4), \
		PI[giveplayerid][pLevel], \
		PI[giveplayerid][pExp], (PI[giveplayerid][pLevel]+1)*4, \
		separationInt(PI[giveplayerid][pMoney]), \
		separationInt(GetCount(playerid, 4608)), \
		GetCount(playerid, 1080), \
		GetCount(playerid, 1811), \
		PI[giveplayerid][pPhoneInfo][0] <= 1 ? ("Не имеется") : (str_f("%s", IntToStr(PI[giveplayerid][pPhoneInfo][0]))), \
		PI[giveplayerid][pBank], \
		PI[giveplayerid][pDepositInfo][0], \
		GetJobPN(PlayerJob[giveplayerid]), \
		PI[playerid][pMember] ? (str_f("%s", OrgInfo[GetTeamID(giveplayerid)][oName])) : ("Не имеется"), \
		GetRankName(GetTeamID(giveplayerid), PI[giveplayerid][pRank]), PI[giveplayerid][pRank]);	

	f(global_str, sizeof(global_str), "\
		%s{FFFFFF}Уровень розыска: {B83434}[%i] \n\
		{FFFFFF}Законопослушность: {B83434}%i/100{FFFFFF}\n\n", global_str, PI[giveplayerid][pWanted], PI[giveplayerid][pZKP]);	

	f(global_str, sizeof(global_str), "\
		%sЗащита: {B83434}[-%i%% урона]{FFFFFF}\n\
		Регенерация: {B83434}[%i HP в мин.]{FFFFFF}\n\
		Урон: {B83434}[+%i урона]{FFFFFF}\n\
		Удача: {B83434}[шанс %i%% крит.урона]{FFFFFF}\n\
		Макс. HP: {B83434}[+%i макс. HP]{FFFFFF}\n\
		Макс. Брони: {B83434}[+%i макс. Брони]{FFFFFF}\n\
		Шанс оглушения: {B83434}[+%i%%]{FFFFFF}\n\
		Шанс опьянения: {B83434}[+%i%%]{FFFFFF}\n\
		Шанс избежать оглушения: {B83434}[+%i%%]{FFFFFF}\n\
		Шанс оглушения (оглушающий плод): {FF6347}%s\n\n", \
		global_str, \
		GetAccessoryPlayerBuff(giveplayerid, 0), \
		GetAccessoryPlayerBuff(giveplayerid, 1), \
		GetAccessoryPlayerBuff(giveplayerid, 2), \
		GetAccessoryPlayerBuff(giveplayerid, 3), \
		GetAccessoryPlayerBuff(giveplayerid, 4), \
		GetAccessoryPlayerBuff(giveplayerid, 5), \
		GetAccessoryPlayerBuff(giveplayerid, 6), \
		GetAccessoryPlayerBuff(giveplayerid, 8), \
		GetAccessoryPlayerBuff(giveplayerid, 7), \
		"Неактивен");

	f(global_str, sizeof(global_str), "\
		%s{FFFFFF}Предупреждения: {B83434}[%i]\n\
		{FFFFFF}Наркозависимость: {B83434}%i.0\t%s\n\
		{FFFFFF}Банковская карта: {B83434}[%s]\n\
		{FFFFFF}Статус: {B83434}[%s]\n\
		{FFFFFF}Гражданство: {90EE90}[Имеется]\n\
		{FFFFFF}Семья: {B83434}%s\n\
		{FFFFFF}Возможность владеть 5-ю бизнесами: %s{FFFFFF}\n\
		{FFFFFF}Возможность владеть 4-я домами: %s{FFFFFF}\n\
		{FFFFFF}Возможность владеть 2-я фермами: %s{FFFFFF}\n\
		{FFFFFF}Возможность владеть 2-я складскими помещениями: %s{FFFFFF}\n", \
		global_str, \
		PI[giveplayerid][pWarns], \
		PI[giveplayerid][pAllRepl], \
		PI[giveplayerid][pAllRepl] >= 0 && PI[giveplayerid][pAllRepl] <= 100 ? "{529020}[Нет зависимости]" : PI[giveplayerid][pAllRepl] >= 101 && PI[giveplayerid][pAllRepl] <= 200 ? "{274B09}[Возможна зависимость]" : PI[giveplayerid][pAllRepl] >= 201 && PI[giveplayerid][pAllRepl] <= 300 ? "{D79B23}[1 lvl]" : PI[giveplayerid][pAllRepl] >= 301 && PI[giveplayerid][pAllRepl] <= 400 ? "{D76223}[2 lvl]" : "{961C00}[3 lvl]", \
		!PI[giveplayerid][pBankPass] ? "Не имеется" : "Имеется", \
		VipNames[PI[giveplayerid][pVIP]], \
		FP_Data[giveplayerid][F_FAMILY_ID] == -1 ? "Не имеется" : (str_f("%s [ID %i]", GetFamilyDataString(FP_Data[giveplayerid][F_FAMILY_ID], "name"), FP_Data[giveplayerid][F_FAMILY_ID])), \
		!ImprovementsData[playerid][idBusinessman] ? "{BE2D2D}[НЕТ]" : "{529020}[ЕСТЬ]", \
		!ImprovementsData[playerid][idMoreHouses] ? "{BE2D2D}[НЕТ]" : "{529020}[ЕСТЬ]", \
		!ImprovementsData[playerid][idStorageRoom] ? "{BE2D2D}[НЕТ]" : "{529020}[ЕСТЬ]", \
		!ImprovementsData[playerid][idTwoFarm] ? "{BE2D2D}[НЕТ]" : "{529020}[ЕСТЬ]");	

	foreach(Vehicle, c)
	{
		if(OwnableCar[c] == INVALID_VEHICLE_ID) continue;

		new number = OwnableCar[c];
		if(IsPlayerHaveCar(giveplayerid,number))
		{
			f(global_str, 3072 ,"%s\n{AFAFAF}%s(%d)\nСтатус блокировки: [%s] \nСигнализация: [%s] %s\n", global_str, GetVehicleName(number), number,
			CarInfo[c][cLock] >= 1 ? ("Закрыт"):("Открыт"),CarInfo[c][cAlarmON] >= 1 ? ("Включена"):("Выключена"),CarInfo[c][cShtraf] > 0 ? ("{9EF2FF}[X]"):(""));
		}
	}

	if(PI[giveplayerid][pWarns]>0) f(global_str, 3072,"%s\n{E83C3C}До слета варна осталось: \t\t%d часов.\n",global_str, floatround((PI[giveplayerid][pTimeToLastWarn]+(3600*24*1)-Global_Time)/3600,floatround_ceil) );
	setcheck[playerid] = giveplayerid;

	if(!SPD(playerid,235,0,"{bfbbba}Основная статистика",global_str,"Предметы", !"Закрыть")) SCM(playerid, COLOR_GREY, !"Недоступно в данный момент.");
	return true;
}

stock IsANotControllable(playerid)
{
	return !(!PlayerLie{playerid} && !Crack{playerid} && !Cuffed[playerid] && !CuffedTime[playerid] && Controllable{playerid});
}
stock ShowStyles(playerid, giveplayerid, dialogid = 0)
{
    static Boxing[25], Kungfu[25], Kneehead[25], Elbow[25], Style[20];
	if(PI[giveplayerid][pSkillFight][0]) Boxing = "{10F441}Обучен";
	else Boxing = "{FF6347}Не обучен";
	if(PI[giveplayerid][pSkillFight][1]) Kungfu = "{10F441}Обучен";
	else Kungfu = "{FF6347}Не обучен";
	if(PI[giveplayerid][pSkillFight][2]) Kneehead = "{10F441}Обучен";
	else Kneehead = "{FF6347}Не обучен";
	if(PI[giveplayerid][pSkillFight][3]) Elbow = "{10F441}Обучен";
	else Elbow = "{FF6347}Не обучен";
	switch(GetPlayerFightingStyle(giveplayerid))
	{
		case 5: Style = "Boxing";
		case 6: Style = "Kungfu";
		case 7: Style = "Kneehead";
		case 16: Style = "Elbow";
		default: Style = "Standart";
	}
    f(global_str, 300,"{FFFFFF}Boxing: \t\t%s\n\
	{FFFFFF}Kungfu: \t\t%s\n\
	{FFFFFF}Kneehead: \t\t%s\n\
	{FFFFFF}Elbow: \t\t\t%s\n\n\
	{FFFFFF}Текущий стиль боя: \t{FFFF00}%s\n\n\
	{FFFFFF}Навык боевых искуств: \t{FFFF00}%d",Boxing,Kungfu,Kneehead,Elbow,Style,PI[playerid][pSkillLevel]);
	SPD(playerid,dialogid,0,"Стили боя",global_str,"Ок","");
	return 1;
}
stock ShowSkills(playerid, giveplayerid, dialogid = 0)
{
	global_str = "";
	static string[100];
	f(string,sizeof(string),"{C16060}Навык стрельбы игрока: %s[%d]\n\n\n",PN(giveplayerid),giveplayerid);
	strcat(global_str,string);
    f(string,sizeof(string),"{FFFFFF}Pistol: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][0]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}Desert Eagle: \t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][2]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}ShotGun: \t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][3]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}MP5: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][5]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}AK47: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][6]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}M4A1: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][7]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}Sniper: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][8]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}SILENCED: \t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][1]/100);
	strcat(global_str,string);
	f(string,sizeof(string),"{FFFFFF}UZI: \t\t\t{10F441}%d/100%%\n",PI[giveplayerid][pGunSkill][4]/100);
	strcat(global_str,string);

	SPD(playerid,dialogid,0,"Статистика",global_str,"Ок","");
	return 1;
}
stock IsDropBomb(playerid)
{
	if(CreteBomb[playerid]>200)
	{
		new Float:x,Float: y,Float:z;
	    GetPlayerPos(playerid,x,y,z);
   		CreateExplosion(x,y,z, 7, 20.0);
	    RemovePlayerAttachedObject(playerid, 7);
	    CreteBomb[playerid]=0;
	    UpdatePlayerHealth(playerid,0);
     	PI[playerid][pBomb]=0;
	    SCM(playerid,COLOR_GREY, !"Вы уронили бомбу и она взорвалась!");
	}
	return 1;
}
stock SetPlayerRandomKey(playerid, &key)
{
	if(random(2) == 0) key = KEY_WALK, ShowPlayerActionText(playerid, "PRESS ~r~~k~~SNEAK_ABOUT~");
	else key = KEY_JUMP, ShowPlayerActionText(playerid, "PRESS ~r~~k~~PED_JUMPING~");
	return true;
}
stock FirstGiveBizMoney(Float:pX,Float:pY,Float:pZ, money)
{
	new 
		Float:Item,
		Float:minS,
		Posi;

	minS = PointToPoint(pX,pY,pZ,BizData[0][bEnter][0],BizData[0][bEnter][1],BizData[0][bEnter][2]);
	Posi = -1;
	//
	for(new i; i < OWNABLEBIZES; i++)
	{
		Item = PointToPoint(pX,pY,pZ,BizData[i][bEnter][0],BizData[i][bEnter][1],BizData[i][bEnter][2]);
		if(Item < minS)
		{
	 		minS = Item;
			Posi = i;
		}
	}
	//
	GiveBizMoney(Posi, money);
	return true;
}

stock GiveBizMoney(bizid, money)
{
	if(bizid == -1 or BizData[bizid][bMoney] + money < 0) return false;
	
	BizData[bizid][bMoney] += money;
	BizData[bizid][bWin] += money;	
	
	switch day_of_week do
	{
	    case 0: global_str = "UPDATE `businesses` SET `saturday` = `saturday` + '%d' WHERE `ID` = '%d'";
	    case 1: global_str = "UPDATE `businesses` SET `sunday` = `sunday` + '%d' WHERE `ID` = '%d'";
	    case 2: global_str = "UPDATE `businesses` SET `monday` = `monday` + '%d' WHERE `ID` = '%d'";
	    case 3: global_str = "UPDATE `businesses` SET `tuesday` = `tuesday` + '%d' WHERE `ID` = '%d'";
	    case 4: global_str = "UPDATE `businesses` SET `wednesday` = `wednesday` + '%d' WHERE `ID` = '%d'";
	    case 5: global_str = "UPDATE `businesses` SET `thursday` = `thursday` + '%d' WHERE `ID` = '%d'";
	    case 6: global_str = "UPDATE `businesses` SET `friday` = `friday` + '%d' WHERE `ID` = '%d'";
	}
	
	return SQL(global_str, money, BizData[bizid][bID]);
}

stock GiveDonate(playerid, money, reason[] = "без причины")
{
	if(!pTemp[playerid][tAuthorized]) return 0;

	if(money <= 1000)
		sendPlayerBattlepassAction(playerid, 56);

	sendPlayerNotification(playerid, 0, "Информация", (str_f(money > 0 ? "На донат-счет залислено %i AZ-Coins" : "С донат-счета списано %i AZ-Coins", money > 0 ? money : -money)), 4);
	UpdatePlayerDataInt(playerid, "VirMoney", PI[playerid][pVirMoney] += money);

	if(strlen(reason)) 
		f(mysql_string, 400, "Игрок <a href=../pages/user?name=%s>%s</a> %s AZ-Coins $%.0f по причине %s (Money:%d) (Bank:%d) (Deposit:%d) (Donate: %d).",
		PN(playerid), PN(playerid), money > 0 ? "получил":"потерял", floatabs(money), reason, PI[playerid][pMoney], PI[playerid][pBank], PI[playerid][pDepositInfo][0], PI[playerid][pVirMoney]),
		aml(mysql_string, 0, "","");

	return 1;
}

stock GiveMoney(playerid, money, reason[] = "без причины")
{
	if(!pTemp[playerid][tAuthorized]) return 0;

	SetPlayerMoney(playerid, PI[playerid][pMoney] += money);
	sendPlayerNotification(playerid, 0, "Информация", (str_f(money > 0 ? "На баланс залислено $%i" : "С баланса списано %i$", money > 0 ? money : -money)), 4);
	UpdatePlayerDataInt(playerid, "Money", PI[playerid][pMoney]);
	
	if(strlen(reason)) 
		f(mysql_string, 400, "Игрок <a href=../pages/user?name=%s>%s</a> %s деньги $%.0f по причине %s (Money:%d) (Bank:%d) (Deposit:%d) (Donate: %d).",
		PN(playerid), PN(playerid), money > 0 ? "получил":"потерял", floatabs(money), reason, PI[playerid][pMoney], PI[playerid][pBank], PI[playerid][pDepositInfo][0], PI[playerid][pVirMoney]),
		aml(mysql_string, 0, "","");
		
	return 1;
}

stock GiveRoubles(playerid, roubles, reason[] = "без причины")
{
	if(!pTemp[playerid][tAuthorized]) return false;

	sendPlayerNotification(playerid, 0, "Информация", (str_f(roubles > 0 ? "На донат-счет залислено %i AZ-Rubles" : "С донат-счета списано %i AZ-Rubles", roubles > 0 ? roubles : -roubles)), 4);
 	UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += roubles);
	amlf("Игрок <a href=../pages/user?name=%s>%s</a> %s донат-рубли %.0f по причине %s (Roubles: %d).", 4, PN(playerid), "", PN(playerid), PN(playerid), roubles > 0 ? "получил" : "потерял", floatabs(roubles), reason, PI[playerid][pRoubles]);

	return 1;
}

stock LoadOrgs()
{
	for(new i; i < 10; i ++) RankName[0][i] = "Гражданин";
	new Cache:result = mysql_query(mysql, "SELECT * FROM `orgsinfo`");
	new num = cache_num_rows();
	for(new i = 1;i <= num;i ++)
	{
		cache_get_value_name_int(i-1, "ID", OrgInfo[i][oID]);
		cache_get_value_name(i-1, "Name", OrgInfo[i][oName], 32);
		cache_get_value_name(i-1, "Leader", OrgInfo[i][oLeader], 24);

		cache_get_value_name_int(i-1, "Bank", OrgInfo[i][oBank]);
		cache_get_value_name_int(i-1, "Drugs", OrgInfo[i][oDrugs]);
		cache_get_value_name_int(i-1, "Mats", OrgInfo[i][oMats]);
		cache_get_value_name_int(i-1, "Max_Rang", OrgInfo[i][Max_Rang]);

		for(new id; id < OrgInfo[i][Max_Rang]; id++)
			cache_get_value_name(i-1, (str_f("Rank_%i", id+1)), RankName[i][id], 50);

		cache_get_value_name_int(i-1, "Benz", OrgInfo[i][oBenz]);
		cache_get_value_name_int(i-1, "Remont", OrgInfo[i][oRemont]);
		cache_get_value_name_int(i-1, "Mask", OrgInfo[i][oMask]);
		cache_get_value_name_int(i-1, "OrgMoney", OrgMoney[i]);
		cache_get_value_name(i-1, "OrgSalary", global_str), sscanf(global_str, "p<,>a<i>[14]", OrgSalary[i]);
	}
	cache_delete(result);
	return 1;
}

stock SaveOrg(orgid)
{
	f(global_str, 320, "UPDATE `orgsinfo` SET `Leader` = '%s', `Bank` = '%d', `Drugs` = '%d', `Mats` = '%d', `Benz` = '%d', `Remont` = '%d', `Mask` = '%d', `OrgMoney` = '%d' WHERE `ID` = '%i'",OrgInfo[orgid][oLeader],OrgInfo[orgid][oBank],OrgInfo[orgid][oDrugs],OrgInfo[orgid][oMats],OrgInfo[orgid][oBenz],OrgInfo[orgid][oRemont],OrgInfo[orgid][oMask], OrgMoney[orgid], orgid);
	mysql_tquery(mysql, global_str);
	return 1;
}

stock SaveOrgs()
{
	for(new i = 1; i < MAX_ORGS; i ++) SaveOrg(i);
	return 1;
}

stock GetVehicleKindFuel(carid)
{
    switch GetVehicleModelEx(carid) do
	{
		case 403, 406..408, 414, 416, 422, 423, 427, 428, 431..433, 437, 440, 443, 455, 456, 470, 485, 498, 499, 508, 514, 515, 524, 525, 528, 531, 532, 537, 538, 544, 552, 554, 573, 578, 582, 583, 588, 599, 601, 609: return 0;
		case 400, 401, 404, 410, 412, 413, 418, 419, 420, 421, 424, 438, 439, 442, 448, 459, 462, 463, 466, 467, 474, 475, 478, 479, 482, 483, 489, 490, 491, 492, 500, 505, 517, 518, 526, 534, 536, 542, 543, 549, 566, 567, 575, 576, 579, 598, 600, 604, 605: return 1;
		case 411, 415, 429, 444, 451, 461, 477, 494, 495, 502, 503, 504, 506, 521, 522, 541, 556, 557, 581, 454, 452, 473, 484, 493: return 2;
		default: return 3;
	}
	return -1;
}

stock GetRankName(org, rank)
{
	if(rank > 0) return RankName[org][(rank-1)];
	else return RankName[org][0];
}
new Domains[][] =
{
	"Гоменюк","ЛОХ","хуй","х.уй", "ху.й","гамно","Алик","слив","привет от","Юнион","ЮНИОН","ХУЙ","Сливчик","СЛИВЧИК","Самп","САМП","скачал","СКАЧАЛ","факт","Пиздуйте","ПИЗДУЙТЕ","ГОВНА","говна","я Правда","Я ПРАВДА","я ПРАВДА","АРИЗОНЕ","Аризоне","Пиздорасы","ПИДОРАСЫ","ЕБУ","ебу","ебал","ЕБАЛ",
	"пизда","виртов","шалава","месная","уходите","АРИЗОНА","Факты","ФАКТЫ","ФАКТ","Факт","СВИТ","Свит","A","a","B","b","C","c","D","d","E","e","F","f","G","g",
	"H","h","I","i","J","j","K","k","L","l","M","m","N","n","O","o","P","p","Q","q","R","r","S","s","T","t","U","u","V","v","W","w","X","x","Y","y","Z","z","гугл","яндекс","Стейдж","Даймонд","Диамонд","Ухадите","Уходите","сервер","Сервер","стейдж","диамонд","даймонд","Мастер","мастер","МАСТЕР","админ","АДМИН","Админ","Лидерк","лидерк","ЛИДЕРК","слив", "СЛИВ", "Слив", "СЛив", "СЛИв", "слиВ", "слИВ", "СЛиВ", "сЛИВ",
	"аццепт","ацепт","АЦЕПТ","АЦЦЕПТ","аЦЦепт","аццеппт","АЦЦЕППТ","аццептни","Ацепт","АЦЕППТ","Аццепт","АЦЦЕПТНИ","ПЕТРОВИЧ","ПЕТРОВ","Петров","ПЕТРов","пеТРОВ","петров","АРИЗ-ОНА","ПЕЙДЖ","пейдж","юнит","юниТ"
};
new Mgs[][] =
{
	"самп","школьник","интернет","дота","samp","gta","вирт","вирты","скайп","skype","админ","банили","Warn","WARN","кикнуло","мут","афк","слили","крашнуло","краш","фрапс","нонРП","забанили","разбан","+С","+C","Клео","клео","лаги","лагает","пинг","фпс","fps","cleo","ban","warn","kick","mute","/","ПАХА","Паха","паха","GVR","gvr","ГВР","гвр","подпищик","подписчик","ПОДПИСЧИК","капт","Капт","форум","пукан","школота","скачал","прокачал",
	"ютуб","вконтакте","youtube","бомбит","читы","собей","sobei","сорь","мамка","ддос","ddos","лидерка","солью","role","Role","play","Play","ролеплей","Админ",",баги","багов","багоюз","краб","мгшник","дмщик","Дмщик","нубло","дотер","салоед","кацап","DM","dm","mg","tk","MG","Mg","CK","ck","Sk","pg","PG","Tk","TK","SK","metagaming","Metagaming","афк","АФК","Афк","afk","AFK","слив", "СЛИВ", "Слив", "СЛив", "СЛИв", "слиВ", "слИВ", "СЛиВ", "сЛИВ"
};
stock IsAMg(text[])
{
	for(new i; i < sizeof(Mgs); i ++)
	{
	    new find = strfind(text, Mgs[i], true);
	    if(find != -1) if(IsASymbol(text, find - 2, find))return 1;
	}
	return 0;
}

stock IsASymbol(text[], first, end)
{
	if(first < 0) first = 0;
	if(end >= strlen(text)) end = strlen(text) - 1;
	for(new i = first; i <= end; i ++) return 1;
	return 0;
}

stock IsADomen(text[])
{
	for(new i; i < sizeof(Domains); i ++)
	{
	    new find = strfind(text, Domains[i], true);
	    if(find != -1) if(IsASymbol(text, find - 2, find))return 1;
	}
	return 0;
}

stock IsAIP(text[])
{
	new numbers;
	for(new i = 0;i < strlen(text); i++) if('0' <= text[i] <= '9') if(!('0' <= text[i+1] <= '9')) numbers ++;
	if(numbers >= 4) return 1;
	return 0;
}

stock IsVehicleElectroCar(vehicleid)
	return vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(vehicleid))][vehicleEnergyFuel];

stock IsVehicleInRangeOfPoint(vehicleid, Float:distance, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx - x);
	tempposy = (oldposy - y);
	tempposz = (oldposz - z);
	if (((tempposx < distance) && (tempposx > -distance)) && ((tempposy < distance) && (tempposy > -distance)) && ((tempposz < distance) && (tempposz > -distance)))return 1;
	return 0;
}

stock IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
		for(new i; i < sizeof(GoFuel); i++)
			if(GoFuel[i][gfBizzID] == FindNearestBussines(playerid))
				return i;

	return -1;
}

public: DoorClose(i)
{
	DoorInfo[i][dStatus] = false;
	MoveDynamicObject(dDoor[i], DoorInfo[i][dPos][0], DoorInfo[i][dPos][1], DoorInfo[i][dPos][2], DoorInfo[i][dSpeed], 0.0, 0.0, DoorInfo[i][dPos][3]);
	return false;
}
forward GateClose(gate);
public GateClose(gate)
{
	GateInfo[gate][gOpen] = false;
	MoveDynamicObject(gGate[gate],GateInfo[gate][gClose_X],GateInfo[gate][gClose_Y],GateInfo[gate][gClose_Z],3.0);
    new gateid = GateInfo[gate][gForGateid];
    if(gateid != -1)
    {
        GateInfo[gateid][gOpen] = false;
		MoveDynamicObject(gGate[gateid],GateInfo[gateid][gClose_X],GateInfo[gateid][gClose_Y],GateInfo[gateid][gClose_Z],3.0);
    }
    return 1;
}

public: BarrierClose(id)
{
	BarrierInfo[id][brOpen] = false;
    MoveDynamicObject(gBarrier[id], BarrierInfo[id][brData][0], BarrierInfo[id][brData][1], BarrierInfo[id][brData][2], BARRIER_SPEED, BarrierInfo[id][brData][3], BarrierInfo[id][brData][4], BarrierInfo[id][brData][5]);
    
    new barrierid = BarrierInfo[id][brForBarrierID];    
    if(barrierid != -1)
    {
        BarrierInfo[barrierid][brOpen] = false;
    	MoveDynamicObject(gBarrier[barrierid],BarrierInfo[barrierid][brPos_X],BarrierInfo[barrierid][brPos_Y],BarrierInfo[barrierid][brPos_Z]+0.75,BARRIER_SPEED,0.0,90.0,BarrierInfo[barrierid][brPos_A]+180);
    }
    return 1;
}

stock LoadBusiness()
{
    new ID, Cache:result = mysql_query(mysql, "SELECT * FROM `businesses`");
	OWNABLEBIZES = cache_num_rows();
	
	for(new i; i < OWNABLEBIZES; i++)
	{
		cache_get_value_name_int(i, "ID", ID), BizData[ID][bID] = ID;
		cache_get_value_name_int(i, "State", BizData[ID][bState]);
		cache_get_value_name(i, "Name", BizData[ID][bName], 64);
	 	cache_get_value_name(i, "Owner", BizData[ID][bOwner], 24);
		cache_get_value_name(i, "Enter", global_str), sscanf(global_str, "p<,>a<f>[3]", BizData[ID][bEnter]);
		cache_get_value_name(i, "Exit", global_str), sscanf(global_str, "p<,>a<f>[3]", BizData[ID][bExit]);
		cache_get_value_name_int(i, "Cost", BizData[ID][bCost]);
		cache_get_value_name_int(i, "Level", BizData[ID][bLevel]);
		cache_get_value_name_int(i, "Interior", BizData[ID][bInt]);
		cache_get_value_name_int(i, "Lock", BizData[ID][bLock]);
		cache_get_value_name_int(i, "Money", BizData[ID][bMoney]);
		cache_get_value_name_float(i, "EnterPrice", BizData[ID][bEnterPrice]);
		cache_get_value_name_int(i, "Products", BizData[ID][bProducts]);
		cache_get_value_name_int(i, "Krasher", BizData[ID][bKrasher]);
		cache_get_value_name_int(i, "BuyCost", BizData[ID][bBuyCost]);
		cache_get_value_name_int(i, "NeedItem", BizData[ID][bNeedItem]);
		cache_get_value_name(i, "Items", global_str), sscanf(global_str, "p<,>a<i>[19]", BizData[ID][bItem]);
		cache_get_value_name(i, "objectCount", global_str), sscanf(global_str, "p<,>a<i>[2]", BizData[ID][bObjectCount]);
	 	cache_get_value_name(i, "Zam", BizData[ID][bZam], 24);
		cache_get_value_name(i, "Upgrade", global_str), sscanf(global_str, "p<,>a<i>[2]", BizData[ID][bUpgrade]);
		cache_get_value_name_int(i, "Pickup", BizData[ID][bPickup]);
		cache_get_value_name_int(i, "CostType", BizData[ID][bCostType]);
	}
	cache_delete(result);
	
	return true;
}

stock SaveBusiness(bizid)
{
	global_str = "";
	for(new i = 0; i < 19; i++) f(global_str, 550, "%s%d,", global_str, BizData[bizid][bItem][i]);
	f(global_str, 1550 , "UPDATE `businesses` SET \
	`State` = '%d', `Name` = '%s', `Owner` = '%s', `Enter` = '%s', `Exit` = '%s', \
	`Cost` = '%d', `Level` = '%d', \
	`Interior` = '%d', `Lock` = '%d', `Money` = '%d', `EnterPrice` = '%.4f', `Products` = '%d', \
	`Krasher`='%d', `BuyCost`='%d', `NeedItem`='%d', `Items`='%s', `Zam` = '%s', `Upgrade` = '%s' WHERE `ID` = '%i'",
	BizData[bizid][bState],
	BizData[bizid][bName],
	BizData[bizid][bOwner],
 	Float_PackMassive(0, BizData[bizid][bEnter]),
	Float_PackMassive(1, BizData[bizid][bExit]),
	BizData[bizid][bCost],
	BizData[bizid][bLevel],
	BizData[bizid][bInt],
	BizData[bizid][bLock],
	BizData[bizid][bMoney],
	BizData[bizid][bEnterPrice],
	BizData[bizid][bProducts],
	BizData[bizid][bKrasher],
	BizData[bizid][bBuyCost],
	BizData[bizid][bNeedItem],
	global_str,
	BizData[bizid][bZam],
	Int_PackMassive(2, BizData[bizid][bUpgrade]),
	BizData[bizid][bID]);

	mysql_tquery(mysql, global_str);
	return 1;
}

stock OnPlayerCarLoad(MySQL_ID)
{
	foreach(Vehicle, i)
	{
		if(i == INVALID_VEHICLE_ID or !IsAOwnableCar(i) or VehicleInfo[i][vFamily] != -1) 
			continue;
	
		if(MySQL_ID == CarInfo[GetVehicleID(i)][cID])
			return i;
	}

	return false;
}

stock loadVehicleCustomTuning(carid, number, id = -1, playerid = 0, bool:familycar = false)
{
	if(familycar)
		f(global_str, 1024, "SELECT * FROM `ownable` WHERE `family_id` = '%d' AND `Owner` = '%s' AND `ID` = '%i' LIMIT 1", FP_Data[playerid][F_FAMILY_ID], GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name"), id);

	else if(id >= 0)
		f(global_str, 128, "SELECT * FROM ownable WHERE ID = '%d' AND Owner = BINARY('%s') LIMIT 1;", id, PN(playerid));

	new Cache:result = mysql_query(mysql, global_str), color[2];

	if(!cache_num_rows())
		return false;

	cache_get_value_name_int(0, "ID", CarInfo[number][cID]);

	if(familycar)
	{
		cache_get_value_name_int(0, "Color_1", color[0]), cache_get_value_name_int(0, "Color_2", color[1]);
		ChangeVehicleColor(carid, color[0], color[1]);
	}

	cache_get_value_name(0, "VisualTuning", global_str), sscanf(global_str, "p<,>a<i>[9]", vehicleTuning[carid]);
	cache_get_value_name_float(0, "WheelSize", vehicleWheelSize[carid]);
	cache_get_value_name(0, "WheelSettingFront", global_str), sscanf(global_str, "p<,>a<f>[2]", vehicleWheelSetting[carid][0]);
	cache_get_value_name(0, "WheelSettingBack", global_str), sscanf(global_str, "p<,>a<f>[2]", vehicleWheelSetting[carid][1]);
	cache_get_value_name(0, "WindowColors", global_str), sscanf(global_str, "p<,>a<i>[7]", vehicleWindowColors[carid]);

	return cache_delete(result);
}

stock LoadPlayerCar(playerid, MySQL_ID = -1)
{
	if(MySQL_ID == -1)
		format(global_str, 128, "SELECT * FROM ownable WHERE Owner = BINARY('%s') AND ConnectLoad = '1' LIMIT 1;", PN(playerid));
	else
		format(global_str, 128, "SELECT * FROM ownable WHERE ID = '%d' AND Owner = BINARY('%s') LIMIT 1;", MySQL_ID, PN(playerid));
		
	new Cache:result = mysql_query(mysql, global_str), id, count = cache_num_rows();

	if(!cache_is_valid(result))
		return false;
		
	for(new idx = 0; idx < count; idx++)
	{
		if(CountVehicles() >= 1999 or (id = FindFreeCarSlot()) == -1 or PI[playerid][pCarsLoad] >= ValidNumberCars(playerid))
			continue;

		cache_get_value_name_int(idx, "ID", CarInfo[id][cID]);
		cache_get_value_name_int(idx, "Model", CarInfo[id][cModel]);
		cache_get_value_name(idx, "Position", global_str), Float_UnPackMassive(global_str, CarInfo[id][cPos]);
		cache_get_value_name_int(idx, "Color_1", CarInfo[id][cColor_1]);
		cache_get_value_name_int(idx, "Color_2", CarInfo[id][cColor_2]);
		cache_get_value_name(idx, "Owner", CarInfo[id][cOwner], 24);
		cache_get_value_name(idx, "Keyer", CarInfo[id][cKeyer], 24);
		cache_get_value_name_int(idx, "Shtrafer", CarInfo[id][cShtrafer]);
		cache_get_value_name_int(idx, "Cost", CarInfo[id][cCost]);
		cache_get_value_name_int(idx, "Lock", CarInfo[id][cLock]);
		cache_get_value_name_int(idx, "Shtraf", CarInfo[id][cShtraf]);
		cache_get_value_name_int(idx, "KeyIN", CarInfo[id][cKeyIN]);
		cache_get_value_name_int(idx, "AlarmON", CarInfo[id][cAlarmON]);
		cache_get_value_name_float(idx, "Milage", CarInfo[id][cMilage]);
		cache_get_value_name_int(idx, "Style", CarInfo[id][cStyle]);
		cache_get_value_name_int(idx, "VirtualWorld", CarInfo[id][cVirtualWorld]);
		cache_get_value_name_int(idx, "Interior", CarInfo[id][cInterior]);
		cache_get_value_name_int(idx, "ParkedInGarage", CarInfo[id][cParkedInGarage]);
		cache_get_value_name_int(idx, "ParkedInParking", CarInfo[id][cParkedInParking]);
		cache_get_value_name(idx, "ShtrafName", CarInfo[id][cShtrafName], 24);
		cache_get_value_name_int(idx, "ParkedInPark", CarInfo[id][cParkedInPark]);
		cache_get_value_name_int(idx, "ConnectLoad", CarInfo[id][ConnectLoad]);
		cache_get_value_name(idx, "TuningComp", global_str), sscanf(global_str, "p<,>a<i>[8]", CarInfo[id][TuningComp]);
		cache_get_value_name(idx, "InvCell", global_str), Int_UnPackMassive(global_str, CarInfo[id][cInvCell]);
		cache_get_value_name(idx, "TunPosX", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunPosX]);
		cache_get_value_name(idx, "TunPosY", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunPosY]);
		cache_get_value_name(idx, "TunPosZ", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunPosZ]);
		cache_get_value_name(idx, "TunRotX", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunRotX]);
		cache_get_value_name(idx, "TunRotY", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunRotY]);
		cache_get_value_name(idx, "TunRotZ", global_str), sscanf(global_str, "p<,>a<f>[10]", CarInfo[id][TunRotZ]);
		
		OwnableCar[id] = J_AddStaticVehicleEx(CarInfo[id][cModel], CarInfo[id][cPos][0],CarInfo[id][cPos][1],CarInfo[id][cPos][2],CarInfo[id][cPos][3],CarInfo[id][cColor_1],CarInfo[id][cColor_2],1000000,CarInfo[id][cInterior],CarInfo[id][cVirtualWorld], id);
		CarText[OwnableCar[id]] = CreateDynamic3DTextLabel("",-1,0,0,0.5,5.0,INVALID_PLAYER_ID,OwnableCar[id]);
		
		SetVehicleToRespawn(OwnableCar[id]);
        cache_get_value_name(idx, "Item", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItem]);
		cache_get_value_name(idx, "ItemCount", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItemCount]);
		cache_get_value_name(idx, "ItemLevel", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItemLevel]);
		cache_get_value_name(idx, "ItemColor", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItemColor]);
		cache_get_value_name(idx, "ItemIdentificator", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItemIdentificator]);
        cache_get_value_name(idx, "ItemProc", global_str), Int_UnPackMassive(global_str, TrunkInfo[OwnableCar[id]][tItemProc]);
        cache_get_value_name(idx, "HandlingData", global_str), Float_UnPackMassive(global_str, VehicleInfo[OwnableCar[id]][vHandling]);
		cache_get_value_name(idx, "Number", VehicleInfo[OwnableCar[id]][vNumber], 30);

		if(isnull(VehicleInfo[OwnableCar[id]][vNumber])) 
			SetString(VehicleInfo[OwnableCar[id]][vNumber], "Arizona ST");
	
		loadVehicleCustomTuning(OwnableCar[id], id, MySQL_ID);
		PI[playerid][pCarsLoad] ++;
	}
	return cache_delete(result);
}

stock SaveOwnableCar(carid)
{
	if(CarInfo[carid][cID] == -1 or carid == INVALID_VEHICLE_ID)
		return false;
	
	global_str = "";

	for(new i = 0; i < 8; i++)
		f(global_str, 50, "%s%d,", global_str, CarInfo[carid][TuningComp][i]);

	f(global_str, 2000, "UPDATE `ownable` SET \
		`Model` = '%d', `Position` = '%s', `VirtualWorld` = '%i', `Interior`= '%i' ,`Color_1` = '%d', \
		`Color_2` = '%d', `Owner` = '%s', `Keyer` = '%s', `Shtrafer` = '%d', \
		`Cost` = '%d', `Lock` = '%d', `Shtraf` = '%d', `KeyIN` = '%d', \
	    `AlarmON` = '%d', `Milage` = '%f', `ParkedInGarage` = '%i', `ParkedInParking` = '%i', \
	    `Style`='%i', `ParkedInPark` = '%i',`TuningComp` = '%s' WHERE `ID` = '%i'",
	    CarInfo[carid][cModel],
		Float_PackMassive(0, CarInfo[carid][cPos]),
		CarInfo[carid][cVirtualWorld],
		CarInfo[carid][cInterior],
		CarInfo[carid][cColor_1],
		CarInfo[carid][cColor_2],
		CarInfo[carid][cOwner],
		CarInfo[carid][cKeyer],
		CarInfo[carid][cShtrafer],
		CarInfo[carid][cCost],
		CarInfo[carid][cLock],
		CarInfo[carid][cShtraf],
		CarInfo[carid][cKeyIN],
		CarInfo[carid][cAlarmON],
		CarInfo[carid][cMilage],
		CarInfo[carid][cParkedInGarage],
		CarInfo[carid][cParkedInParking],
		CarInfo[carid][cStyle],
		CarInfo[carid][cParkedInPark],
		global_str,
		CarInfo[carid][cID]);

    mysql_tquery(mysql, global_str);

	return SaveInvCar(OnPlayerCarLoad(CarInfo[carid][cID])), SaveVehicleCustomTuning(OnPlayerCarLoad(CarInfo[carid][cID]));
}

stock RandomMassive(massive[], size)
{
	for(new i; i < size; i ++)
	{
	    new rand = random(size), mass = massive[i];
	    massive[i] = massive[rand];
	   	massive[rand] = mass;
	}
}

stock ResetCard(stolid)
{
	for(new k; k != StolInfo[stolid][stolPlayers]; k++)
	{
		if(StolInfo[stolid][stolPlayer][k] != INVALID_PLAYER_ID)
		{
			for(new j; j != 36; j++)
			{
				DestroyPlayerTD(StolInfo[stolid][stolPlayer][k], DurakTD[StolInfo[stolid][stolPlayer][k]][j]);
				if( j < 13 ) DestroyPlayerTD(StolInfo[stolid][stolPlayer][k], BitCard[StolInfo[stolid][stolPlayer][k]][j]);
			}
			CreateCardTD(StolInfo[stolid][stolPlayer][k]);
			for(new s; s < 36; s++)
			{
			ShowPlayerTD(StolInfo[stolid][stolPlayer][k], DurakTD[StolInfo[stolid][stolPlayer][k]][s]);
			}
			for(new q; q < 13; q++) ShowPlayerTD(StolInfo[stolid][stolPlayer][k], BitCard[StolInfo[stolid][stolPlayer][k]][q]);
		}
	}
	return 1;
}

stock CardAddForPlayer(playerid)
{
	new ios = Int_GetPlayerData(playerid,"MaxCards"),kolvo = 0, id = random(36)+1,tet = Int_GetPlayerData(playerid,"StolCard");
	for(new i = ios; i != 6; i++)
	{
 		ios = Int_GetPlayerData(playerid,"MaxCards");
		if(!StolInfo[tet][stolCards]) return 1;
		for(new d; d != 36; d++)
		{
			if(id == StolInfo[tet][stolCardBan][d]) kolvo++;
		}
		if(kolvo != 0)
		{
			CardAddForPlayer(playerid);
			return 1;
		}
		StolInfo[tet][stolCardBan][36-StolInfo[tet][stolCards]] = id;
		StolInfo[tet][stolCards] --;
		for(new z; z != 36; z++)
		{
			if(!CardMasive[playerid][z])
			{
				CardMasive[playerid][z] = id;
				break;
			}
		}
		SetPVarInt(playerid,"MaxCards",ios+1);
	}
	CreateCardTD(playerid);
	for(new i; i < 36; i++) ShowPlayerTD(playerid, DurakTD[playerid][i]);
	return 1;
}

stock CreateCardTD(playerid)
{
    #include textdraws/card
	return true;
}

stock ShowContMenu(playerid,id)
{
    if(Int_GetPlayerData(playerid,"contOPEN")) return false;
    #include textdraws/contd
	//
	new ids,name;
	for(new i; i < 6; i++)
	{
		switch(i)
		{
			case 0: ids = 19, name = 32;
			case 1: ids = 33, name = 34;
			case 2: ids = 35, name = 36;
			case 3: ids = 46, name = 59;
			case 4: ids = 60, name = 61;
			case 5: ids = 62, name = 63;
		}
		PlayerTextDrawSetSelectable(playerid, ContPrize[playerid][ids], 1);
		PlayerTextDrawSetPreviewModel(playerid, ContPrize[playerid][ids], ItemsInfo[ContMas[id][i]][itemModel]);
		PlayerTextDrawSetPreviewRot(playerid, ContPrize[playerid][ids], ItemsInfo[ContMas[id][i]][itemRotation][0], ItemsInfo[ContMas[id][i]][itemRotation][1], ItemsInfo[ContMas[id][i]][itemRotation][2], ItemsInfo[ContMas[id][i]][itemRotation][3]);
		if(!ContMasTake[id][i]) PlayerTextDrawColor(playerid, ContPrize[playerid][name], 0x73B461FF);
		else PlayerTextDrawColor(playerid, ContPrize[playerid][name], 0xFF0000FF);
		f(global_str,50, "%s (%d)", FixText(ItemsInfo[ContMas[id][i]][itemEng_name]),ContainerInfo[id][cPrizeCol][i]);
		PlayerTextDrawSetString(playerid, ContPrize[playerid][name], global_str);
		PlayerTextDrawSetString(playerid, ContPrize[playerid][8], ContainerInfo[id][cEngClass]);
	}
	//
	for(new i; i < 64; i++) ShowPlayerTD(playerid, ContPrize[playerid][i]);
    SetPVarInt(playerid,"contOPEN",1);
    SelectTextDraw(playerid,COLOR_RED);
	return true;
}

stock HideContMenu(playerid)
{
    if(!Int_GetPlayerData(playerid,"contOPEN")) return false;
	for(new i; i < 64; i++) DestroyPlayerTD(playerid, ContPrize[playerid][i]);
    DeletePVar(playerid,"contOPEN");
    CancelSelectTextDraw(playerid);
	return true;
}

stock LoadOtelsRoom()
{
	new ID, Cache:result = mysql_query(mysql, "SELECT * FROM `hotels_rooms`");
	ROOMOTELS = cache_num_rows();

	for(new i, Float:Position[3]; i < ROOMOTELS; i++)
	{
		cache_get_value_name_int(i, "ID", ID);
		cache_get_value_name_int(i, "ownerid", RoomOtel[ID][otRoomOwner]);
		cache_get_value_name(i, "ownername", global_str, 24);
		cache_get_value_name_int(i, "ownerhotel", RoomOtel[ID][otRoomOwnerOtel]);
		cache_get_value_name_int(i, "status", RoomOtel[ID][otRoomStatus]);
		cache_get_value_name_float(i, "enter_x", Position[0]);
		cache_get_value_name_float(i, "enter_y", Position[1]);
		cache_get_value_name_float(i, "enter_z", Position[2]);
		RoomOtel[ID][otRoomText] = CreateDynamic3DTextLabel("-", 0xFFFFFFFF, Position[0], Position[1], Position[2], 4.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OtelInfo[RoomOtel[ID][otRoomOwnerOtel]][otBusiness], 1);
		CreateDynamicCP(Position[0], Position[1], Position[2] - 1.0, 1.0, -1, -1, -1, 4.0);
		UpdateOtelRoom(ID, global_str);
	}

	return cache_delete(result);
}

stock UpdateFarm(id, save = true)
{
	format(global_str, 256, "{31B404}- Ферма {ffffff}№%d {31B404}-\n\n\n{31B404}Владелец: {ffffff}%s\n{31B404}Заместитель: {ffffff}%s\n\
		{ffffff}ферма %s\n\n{cccccc}[ ALT - войти ]\n(/farmhelp - помощь)", id + 1, FarmData[id][farmOwner], FarmData[id][farmZam], FarmData[id][farmStatus] ? "открыта" : "закрыта");

	if(!FarmData[id][farmLabel])
		FarmData[id][farmLabel] = CreateDynamic3DTextLabel(global_str, -1, FarmData[id][farmPos][0], FarmData[id][farmPos][1], FarmData[id][farmPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);

	else
		UpdateDynamic3DTextLabelText(FarmData[id][farmLabel], -1, global_str);

	return (save ? SaveFarm(id) : 1);
}

stock SaveFarm(id)
	return SQL("UPDATE farminfo SET `Owner` = '%s', `Zam` = '%s', `JobCount` = '%d', `status` = '%d' WHERE ID = %d", FarmData[id][farmOwner], FarmData[id][farmZam], FarmData[id][farmJobCount], FarmData[id][farmStatus], id);

stock LoadFarm()
{
	new id, Cache:result = mysql_query(mysql, "SELECT * FROM farminfo");

	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_name_int(i, "ID", id);
		cache_get_value_name(i, "Owner", FarmData[id][farmOwner], 24);
		cache_get_value_name(i, "Zam", FarmData[id][farmZam], 24);
		cache_get_value_name_float(i, "PosX", FarmData[id][farmPos][0]);
		cache_get_value_name_float(i, "PosY", FarmData[id][farmPos][1]);
		cache_get_value_name_float(i, "PosZ", FarmData[id][farmPos][2]);
		cache_get_value_name_float(i, "Pos_AX", FarmData[id][farmAmbarPos][0]);
		cache_get_value_name_float(i, "Pos_AY", FarmData[id][farmAmbarPos][1]);
		cache_get_value_name_float(i, "Pos_AZ", FarmData[id][farmAmbarPos][2]);
		FarmData[id][farmJobPlayer] = 0;
		cache_get_value_name_int(i, "JobCount", FarmData[id][farmJobCount]);
		cache_get_value_name_int(i, "status", _:FarmData[id][farmStatus]);
		cache_get_value_name_int(i, "cell", FarmData[id][farmCell]);
		cache_get_value_name_int(i, "cost", FarmData[id][farmCost]);
		FarmData[id][farmPickup] = CreateDynamicPickup(1272, 23, FarmData[id][farmPos][0], FarmData[id][farmPos][1], FarmData[id][farmPos][2], 0);
		CreateDynamicPickup(1239, 23, FarmData[id][farmAmbarPos][0], FarmData[id][farmAmbarPos][1], FarmData[id][farmAmbarPos][2], 0);
		format(global_str, 128, "Амбар {31B404}( {ffffff}ферма №%d {31B404})\n\n{cccccc}[ ALT ]", i + 1);
		CreateDynamic3DTextLabel(global_str, -1, FarmData[id][farmAmbarPos][0], FarmData[id][farmAmbarPos][1], FarmData[id][farmAmbarPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
		CreateDynamicMapIcon(FarmData[id][farmPos][0], FarmData[id][farmPos][1], FarmData[id][farmPos][2], 62, 0, -1, -1, -1, 300.0);
		UpdateFarm(i, false);
	}

	return cache_delete(result);
}

stock LoadSecond()
{
	SecondHand[0][secondTime] = 12;
	SecondHand[1][secondTime] = 15;
	SecondHand[2][secondTime] = 17;
	SecondHand[3][secondTime] = 19;
	
	for(new i; i < 4; i++)
		SecondHand[i][secondBID] = 263 + i,
		SecondHand[i][secondCount][0] = 300,
		format(global_str, 128, "Начало распродажи одежды в {00ff00}%d:00", SecondHand[i][secondTime]),
		SecondHand[i][secondText][1] = CreateDynamic3DTextLabel(global_str, 0xFFFFFFFF, 1529.5388, 1572.8647, 10.9252, 10.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 263 + i + 100),
		SecondHand[i][secondText][0] = CreateDynamic3DTextLabel(global_str, 0xFFFFFFFF, BizData[263 + i][bEnter][0], BizData[263 + i][bEnter][1], BizData[263 + i][bEnter][2] + 1.0, 10.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
		
	
	return true;
}

stock UpdateSecondText(id, second, bool: update)
{
	if(update == true)
		format(global_str, 512, "\
		{ffffff}Сейчас проходит распродажа одежды!\n\
		Завершиться в {ff0000}%d:00\n\n\
		{ffffff}Всего было одежды на распродажу: {ffff00}%d шт.\n\
		{ffffff}Сколько осталось одежды: {ffff00}%d шт.\n\n\
		{cccccc}До следующего выноса одежды в зал осталось %d секунд.",
		SecondHand[id][secondTime] + 1,
		SecondHand[id][secondCount][0],
		SecondHand[id][secondCount][1],
		second);
	
	else
		format(global_str, 128, "Начало распродажи одежды в {00ff00}%d:00", SecondHand[id][secondTime]);

	UpdateDynamic3DTextLabelText(SecondHand[id][secondText][1], 0xFFFFFFFF, global_str);
}

stock GetSecondHandTime()
{
	new str[20], hours = 0, mins = 0, secs = 0, time = SecondHand_Timer - gettime();
	
	hours = floatround(time / 3600);
	mins = floatround((time / 60) - (hours * 60));
	secs = floatround(time - ((hours * 3600) + (mins * 60)));
	
	format(str, sizeof(str), "%dчас %02dмин %02dсек", hours, mins, secs);
	
	return str;
}

stock UpdateOtelRoom(id, name[])
{
	if(!GetString(name, "The State"))
		f ( global_str, 128, "{FFFFFF}Владелец: %s\n{FFFFFF}Статус: {FF3F3F}%s\n{FFFFFF}Войти: {AFFF3F}ALT\n",
		name, RoomOtel[id][otRoomStatus] ? "{FF3F3F}Закрыто":"{AFFF3F}Открыто");
	else
		f ( global_str, 128, "{FFFFFF}Номер свободен\n{FFFFFF}Статус: {FF3F3F}%s\n{FFFFFF}Войти: {AFFF3F}ALT\n",
		RoomOtel[id][otRoomStatus] ? "{FF3F3F}Закрыто":"{AFFF3F}Открыто");
	
	UpdateDynamic3DTextLabelText(RoomOtel[id][otRoomText], 0xFFFFFFFF, global_str);
	return false;
}

stock GetDataPawnShopId(bizId)
{
	for(new i; i < TOTAL_LOMBARD_LOADED; i++)
		if(LombardData[i][ld_bizId] == bizId)
			return i;

	return INVALID_DATA_ID;
}

stock LoadPawnShops()
{
	new Cache:result = mysql_query(mysql, "SELECT * FROM pawnshopdata");

	for(new i; i < (TOTAL_LOMBARD_LOADED = cache_num_rows()); i++)
	{
		cache_get_value_name_int(i, "bizId", LombardData[i][ld_bizId]);
		cache_get_value_name_int(i, "commission", LombardData[i][ld_commission]);
		cache_get_value_name_int(i, "balance", LombardData[i][ld_balance]);
		cache_get_value_name(i, "ItemId", global_str), Int_UnPackMassive(global_str, LombardData[i][ld_ItemId]);
		cache_get_value_name(i, "ItemCount", global_str), Int_UnPackMassive(global_str, LombardData[i][ld_ItemCount]);
		cache_get_value_name(i, "ItemLevel", global_str), Int_UnPackMassive(global_str, LombardData[i][ld_ItemLevel]);
		cache_get_value_name(i, "ItemPercent", global_str), Int_UnPackMassive(global_str, LombardData[i][ld_ItemPercent]);
		cache_get_value_name(i, "ItemCost", global_str), Int_UnPackMassive(global_str, LombardData[i][ld_ItemCost]);
		cache_get_value_name(i, "ItemCommission", global_str), Int_UnPackMassive(global_str, LombardData[i][ld_ItemCommision]);
		cache_get_value_name(i, "ItemPutTime", global_str), Int_UnPackMassive(global_str, LombardData[i][ld_ItemPutTime]);
	}
	adl();
	return printf("[Arizona %s] Загружено PawnShop  -> %d count.", Setting_Server[7], TOTAL_LOMBARD_LOADED), cache_delete(result);
}

stock LoadHouses()
{
	new ID, Cache:result = mysql_query(mysql, "SELECT * FROM `houses`");
	
	for(new i; i < (OWNABLEHOUSES = cache_num_rows()); i++)
	{
		cache_get_value_name_int(i, "ID", ID);
		HouseInfo[ID][hID] = ID;
		cache_get_value_name_float(i, "Enter_X", HouseInfo[ID][hEnter_X]);
		cache_get_value_name_float(i, "Enter_Y", HouseInfo[ID][hEnter_Y]);
		cache_get_value_name_float(i, "Enter_Z", HouseInfo[ID][hEnter_Z]);
		cache_get_value_name_float(i, "Exit_X", HouseInfo[ID][hExit_X]);
		cache_get_value_name_float(i, "Exit_Y", HouseInfo[ID][hExit_Y]);
		cache_get_value_name_float(i, "Exit_Z", HouseInfo[ID][hExit_Z]);
		cache_get_value_name(i, "Owner", HouseInfo[ID][hOwner], 24);
		cache_get_value_name(i, "Room_Owner", global_str), String_UnPackMassive(global_str, HRoomOwner[ID]);
		cache_get_value_name(i, "Room_Pays", global_str), Int_UnPackMassive(global_str, HRoomPay[ID]);
		cache_get_value_name(i, "Room_Nalogs", global_str), Int_UnPackMassive(global_str, HRoomNalog[ID]);
		cache_get_value_name_int(i, "Level", HouseInfo[ID][hLevel]);
		cache_get_value_name_int(i, "Cost", HouseInfo[ID][hCost]);
		cache_get_value_name_int(i, "Lock", HouseInfo[ID][hLock]);
		cache_get_value_name_int(i, "Rent", HouseInfo[ID][hRent]);
		cache_get_value_name_int(i, "Interior", HouseInfo[ID][hInt]);
		cache_get_value_name_int(i, "Money", HouseInfo[ID][hMoney]);
		cache_get_value_name_int(i, "Drugs", HouseInfo[ID][hDrugs]);
		cache_get_value_name_int(i, "Mats", HouseInfo[ID][hMats]);
		cache_get_value_name_int(i, "Bar", HouseInfo[ID][hBar]);
		cache_get_value_name_int(i, "Podval", HouseInfo[ID][hPodval]);
		cache_get_value_name_int(i, "NoOwner", HouseInfo[ID][hNoOwner]);
		cache_get_value_name_int(i, "Nalog", HouseInfo[ID][hNalog]);
		cache_get_value_name_int(i, "Klass", HouseInfo[ID][hKlass]);
		cache_get_value_name_int(i, "Med", HouseInfo[ID][hMed]);
		cache_get_value_name_int(i, "Garage", HouseInfo[ID][hGarage]);
		cache_get_value_name_float(i, "Garage_X", HouseInfo[ID][hGarage_X]);
		cache_get_value_name_float(i, "Garage_Y", HouseInfo[ID][hGarage_Y]);
		cache_get_value_name_float(i, "Garage_Z", HouseInfo[ID][hGarage_Z]);
		cache_get_value_name_int(i, "Type", HouseInfo[ID][hType]);
		cache_get_value_name_int(i, "kvInt", HouseInfo[ID][hkvInt]);
		cache_get_value_name_int(i, "MainingInstalling", HouseInfo[ID][hMainingInstalling]);
		cache_get_value_name_int(i, "MainingInstalling_time", HouseInfo[ID][hMainingInstalling_time]);
	    cache_get_value_name(i, "Items", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItem]);
	    cache_get_value_name(i, "ItemsKolvo", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemCount]);
	    cache_get_value_name(i, "ItemsLevel", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemLevel]);
	    cache_get_value_name(i, "ItemsProc", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemProc]);
	    cache_get_value_name(i, "ItemIdentificator", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemIdentificator]);
	    cache_get_value_name(i, "ItemColor", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hItemColor]);
		cache_get_value_name(i, "objectCount", global_str), Int_UnPackMassive(global_str, HouseInfo[ID][hObjectCount]);
		
	    if(isnull(HouseInfo[ID][hOwner]))
			SetString(HouseInfo[ID][hOwner], "The State");

        for(new h; h < 5; h++) 
			if(isnull(HRoomOwner[ID][h])) 
				SetString(HRoomOwner[ID][h], "The State");
        
		if(HouseInfo[ID][hMainingInstalling])
		{
			cache_get_value_name(i, "MainingCardData", global_str);

			if(strlen(global_str) > 3)
			{
				String_UnPackMassive(global_str, SQL_GET_ROW_STR, "s[128]", "|");
				
				for(new count; count < 20; count++)
					sscanf(SQL_GET_ROW_STR[count], "p<,>dfdfd", MiningBTC[ID][count][card_status], MiningBTC[ID][count][card_balance], MiningBTC[ID][count][card_level], MiningBTC[ID][count][card_percent], MiningBTC[ID][count][card_last_update]);
			}
		}
	}
	
	return cache_delete(result);
}

stock SaveTrunk(id)
	return SQL("UPDATE `ownable` SET `Item` = '%s', `ItemCount` = '%s', `ItemLevel` = '%s', `ItemProc` = '%s', `ItemIdentificator` = '%s', `ItemColor` = '%s' WHERE `ID` = '%d'", Int_PackMassive(0, TrunkInfo[id][tItem]), Int_PackMassive(1, TrunkInfo[id][tItemCount]), Int_PackMassive(2, TrunkInfo[id][tItemLevel]), Int_PackMassive(3, TrunkInfo[id][tItemProc]), Int_PackMassive(4, TrunkInfo[id][tItemIdentificator]), Int_PackMassive(5, TrunkInfo[id][tItemColor]), CarInfo[GetVehicleID(id)][cID]);

stock SaveItemHouse(houseid)
	return SQL("UPDATE `houses` SET `Items` = '%s', `ItemsKolvo` = '%s', `ItemsLevel` = '%s', `ItemsProc` = '%s', `ItemIdentificator` = '%s', `ItemColor` = '%s' WHERE `ID` = %d;", Int_PackMassive(0, HouseInfo[houseid][hItem]), Int_PackMassive(1, HouseInfo[houseid][hItemCount]), Int_PackMassive(2, HouseInfo[houseid][hItemLevel]), Int_PackMassive(3, HouseInfo[houseid][hItemProc]), Int_PackMassive(4, HouseInfo[houseid][hItemIdentificator]), Int_PackMassive(5, HouseInfo[houseid][hItemColor]), HouseInfo[houseid][hID]);

stock GetMiningParams(level, Float:balance, Float:percent, &to_full, &time, &Float:perfect_BTC)
{
	to_full = floatround((2.0 - balance) / GetMiningBTC(level), floatround_ceil);

	time = floatround(percent / 0.448, floatround_ceil);

	perfect_BTC = floatround(float(time) * GetMiningBTC(level), floatround_floor);

	return true;
}

stock ShowMiningDialogString(playerid, house, cardPos, listitem, IntData[], Float:perfect_BTC)
{
	if(MiningBTC[house][cardPos][card_level])
	{
		if(MiningBTC[house][cardPos][card_status])
			strcat(global_str, (str_f("\nПолка №%d | {B9DB9F}Работает\t%f AZ-RUB {B9DB9F}•{ffffff} |{B9DB9F} ~%dч\t%d уровень |{B9DB9F} %f/Час\t%.2f%%", listitem + 1, MiningBTC[house][cardPos][card_balance], IntData[0], MiningBTC[house][cardPos][card_level], GetMiningBTC(MiningBTC[house][cardPos][card_level]), MiningBTC[house][cardPos][card_percent])));
		else 
			strcat(global_str, (str_f("\nПолка №%d | {D08D94}На паузе\t%f AZ-RUB {D08D94}•{ffffff} |{D08D94} ~%dч\t%d уровень |{D08D94} %f/Час\t%.2f%%", listitem + 1, MiningBTC[house][cardPos][card_balance], IntData[0], MiningBTC[house][cardPos][card_level], GetMiningBTC(MiningBTC[house][cardPos][card_level]), MiningBTC[house][cardPos][card_percent])));
		
		if(MiningBTC[house][cardPos][card_percent] > 0.0)
			strcat(global_str, (str_f(" {B9DB9F}- [~%d Час(ов)]{ffffff} | {8AC7E0}[~%.1f AZ-RUB]", IntData[1], perfect_BTC)));
		else
			strcat(global_str, " {D08D94}(!)");
	}
	else
		strcat(global_str, (str_f("\n{cccccc}Полка №%d | Свободна", listitem + 1)));

	return spdList(playerid, listitem, cardPos);
}

stock ShowSheltMiningForPlayer(playerid, house, type = 0)
{
	if(!(house == -1))
	{
		new Float:perfect_BTC, IntData[2], AllCards, WorkCards, Float:FloatData[3];

		if(!type) {
		
			for(new i; i < 6; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.25, MiningBTCPos[i][0], MiningBTCPos[i][1], MiningBTCPos[i][2]))
				{
					if(!GetString(HouseInfo[house][hOwner], PN(playerid)))
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Только владелец может установить видеокарту в своём подвале.");
						
					global_str = "{FFFF00}Полка | Состояние\t{FFFF00}Прибыль\t{FFFF00}Уровень видеокарты\t{FFFF00}Состояние системы охлаждения";

					if(!(i == 5)) {

						for(new count = 0 + 4 * i; count < (0 + 4 * (i + 1)); count++)
						{
							GetMiningParams(MiningBTC[house][count][card_level], MiningBTC[house][count][card_balance], MiningBTC[house][count][card_percent], IntData[0], IntData[1], perfect_BTC);
							ShowMiningDialogString(playerid, house, count, count - 4*i, IntData, perfect_BTC);

							if(MiningBTC[house][count][card_level])
							{
								AllCards++;
								
								FloatData[0] += MiningBTC[house][count][card_balance];
								FloatData[2] += perfect_BTC;

								if(MiningBTC[house][count][card_status])
									WorkCards++, FloatData[1] += GetMiningBTC(MiningBTC[house][count][card_level]);

							}
						}

						strcat(global_str, (str_f("\n \n{FFFF00}Информация\t{FFFF00}Доступно снять\t{FFFF00}Прибыль в час\t{FFFF00}Прибыль прогнозируемая\n{ffffff}Всего: %d | {B9DB9F}Работают %d", AllCards, WorkCards)));
						strcat(global_str, FloatData[0] > 0.0 ? (str_f("\t{B9DB9F}%f{ffffff} BTC", FloatData[0])):"\t0 BTC");
						strcat(global_str, FloatData[1] > 0.0 ? (str_f("\t{B9DB9F}%f{ffffff} BTC", FloatData[1])):"\t0 BTC");
						strcat(global_str, FloatData[2] > 0.0 ? (str_f("\t{8AC7E0}%.1f{ffffff} BTC", FloatData[2])):"\t0 BTC");
						strcat(global_str, "\n \n{B9DB9F}- Забрать всю прибыль");
						strcat(global_str, "\n{4ECA38}- Запустить все видеокарты");
						strcat(global_str, "\n{4BD673}- Залить жидкость (По 50%)");

						return SPD(playerid, 25033, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите видеокарту", global_str, !"Выбрать", !"Закрыть");
					}
					else
					{
						for(new count; count < 20; count++)
						{
							if(!(count % 4))
								strcat(global_str, (str_f("%s{ffff00}Стойка №%d", count > 3 ? "\n \n":"\n", floatround(count / 4, floatround_ceil) + 1)));

							GetMiningParams(MiningBTC[house][count][card_level], MiningBTC[house][count][card_balance], MiningBTC[house][count][card_percent], IntData[0], IntData[1], perfect_BTC);
							ShowMiningDialogString(playerid, house, count, count % 4, IntData, perfect_BTC);

							if(MiningBTC[house][count][card_level])
							{
								AllCards++;
								
								FloatData[0] += MiningBTC[house][count][card_balance];
								FloatData[2] += perfect_BTC;

								if(MiningBTC[house][count][card_status])
									WorkCards++, FloatData[1] += GetMiningBTC(MiningBTC[house][count][card_level]);

							} //floatround(cardPos / 4, floatround_ceil) + 1, cardPos % 4 + 1
						}

						strcat(global_str, (str_f("\n \n{FFFF00}Информация\t{FFFF00}Доступно снять\t{FFFF00}Прибыль в час\t{FFFF00}Прибыль прогнозируемая\n{ffffff}Всего: %d | {B9DB9F}Работают %d", AllCards, WorkCards)));
						strcat(global_str, FloatData[0] > 0.0 ? (str_f("\t{B9DB9F}%f{ffffff} BTC", FloatData[0])):"\t0 BTC");
						strcat(global_str, FloatData[1] > 0.0 ? (str_f("\t{B9DB9F}%f{ffffff} BTC", FloatData[1])):"\t0 BTC");
						strcat(global_str, FloatData[2] > 0.0 ? (str_f("\t{8AC7E0}%.1f{ffffff} BTC", FloatData[2])):"\t0 BTC");

						return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"Обзор всех видеокарт", global_str, !"Закрыть", !"");
					}
				}
			}
		}
	}

	return true;
}

stock UpdateCardLevelPlayer(playerid, slot, level)
{
	if(Int_GetPlayerData(playerid, "updatecardlevel"))
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} В данный момент вы уже в процессе улучшения видеокарты.");

	else if(Inventory[playerid][3][slot] == 10)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Данная видеокарта прокачена до максимального уровня!");

	else if(!GetCount(playerid, 1808))
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Для улучшения уровня видеокарты вам необходима смазка для видеокарты.");

	DeleteItem(playerid, 1808, 2);
	
	TogglePlayerControllable(playerid, false);

	switch random(3) do
	{
		case 0: ApplyAnimationEx(playerid, !"SCRATCHING", !"SCMID_L", 4.1, 1, 1, 1, 1, 0, 1);
		case 1: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_REACT_MISS", 4.1, 1, 1, 1, 1, 0, 1);
		case 2: ApplyAnimationEx(playerid, !"CASINO", !"DEALONE", 4.1, 1, 1, 1, 1, 0, 1);
	}

	Int_SetPlayerData(playerid, "updatecardlevel", true);

	return besttimer[playerid] = CallTimeOutFunction("@updatecarlevelplayer", 3000 + random(3000), false , "idd", playerid, slot, level);
}

public: @updatecarlevelplayer(playerid, slot, level)
{
	KillTimer(besttimer[playerid]);
	ClearAnimationsEx(playerid);
	TogglePlayerControllable(playerid, true);

	if(!(Inventory[playerid][0][slot] == 1810) && !(Inventory[playerid][0][slot] == 5995) or !(Inventory[playerid][3][slot] == level) or !Inventory[playerid][1][slot])
		return false;

	new Random[2][RandomPrize_enum];
	
	Random[0][E_CHANCE_WIN] = 100.0 - ChanceUpdateVideoCard[level];
	Random[1][E_CHANCE_WIN] = ChanceUpdateVideoCard[level];

	
	if(GetRandomBySetting(Random) && level <= 9) 
	{
		level ++;

		Inventory[playerid][3][slot] = level;
		
		SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно улучшили выбранную видеокарту до %d-го уровня.", level);
		GameTextForPlayer(playerid, "~g~Successfully", 1000, 1);
	}
	else
	{
		SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} При улучшении видеокарты вы допустили техническую ошибку, попробуйте еще раз.");
		GameTextForPlayer(playerid, "~r~Failing", 1000, 1);
	}

	return DPlayerData(playerid, "updatecardlevel"), InventSlotUpdate(playerid, GetInvID(playerid, slot, 1), slot), SaveInventory(playerid);
}

stock SaveMiningBTC(houseid)
{
	global_str = "";

	for(new i; i < 20; i++)
		strcat(global_str, (str_f("%d, %f, %d, %f, %d | ", MiningBTC[houseid][i][card_status], MiningBTC[houseid][i][card_balance], MiningBTC[houseid][i][card_level], MiningBTC[houseid][i][card_percent], MiningBTC[houseid][i][card_last_update])));

	return SQL("UPDATE houses SET MainingCardData = '%s' WHERE ID = %d LIMIT 1;", global_str, houseid);
}

stock GetMiningCard(playerid, hId, slot)
{
	if(!MiningBTC[hId][slot][card_level]) 
		return false;

	MiningBTC[hId][slot][card_balance] =
	MiningBTC[hId][slot][card_percent] = 0.0;
	MiningBTC[hId][slot][card_status] = false;

	AddItem(playerid, 1810, 1, 0, MiningBTC[hId][slot][card_level]);
	MiningBTC[hId][slot][card_level] = 0;

	return SCM(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы достали видеокарту.");
}

stock CheckMiningCard(hId)
{
	for(new i; i < 20; i++)
	{
		if(Global_Time > MiningBTC[hId][i][card_last_update] + 3600 && MiningBTC[hId][i][card_status] && MiningBTC[hId][i][card_level] && MiningBTC[hId][i][card_percent] > 0.0) 
		{
			MiningBTC[hId][i][card_last_update] = Global_Time;

			MiningBTC[hId][i][card_percent] -= 0.448;
			
			if(MiningBTC[hId][i][card_percent] <= 0.0)
			{
				MiningBTC[hId][i][card_percent] = 0.0;
				MiningBTC[hId][i][card_status] = false;
			}

			MiningBTC[hId][i][card_balance] += GetMiningBTC(MiningBTC[hId][i][card_level]);

			if(MiningBTC[hId][i][card_balance] > 2.0)
				MiningBTC[hId][i][card_balance] = 2.0;

			SaveMiningBTC(hId);
		}
	}

	return true;
}

stock SaveHouse(houseid)
{
	if(!IsValidHouse(houseid)) return 0;
	static str[256];
	global_str = "";
	f(str, sizeof(str), "UPDATE `houses` SET");
	strcat(global_str, str);
	f(str, sizeof(str), "`Enter_X` = '%.4f',`Enter_Y` = '%.4f',`Enter_Z` = '%.4f', ",
		HouseInfo[houseid][hEnter_X],
		HouseInfo[houseid][hEnter_Y],
		HouseInfo[houseid][hEnter_Z]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Exit_X` = '%.4f', `Exit_Y` = '%.4f', `Exit_Z` = '%.4f', ",
	 	HouseInfo[houseid][hExit_X],
		HouseInfo[houseid][hExit_Y],
		HouseInfo[houseid][hExit_Z]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Owner` = '%s',",
		HouseInfo[houseid][hOwner]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Level` = '%d', `Cost` = '%d', `Lock` = '%d', `Rent` = '%d', ",
		HouseInfo[houseid][hLevel],
		HouseInfo[houseid][hCost],
		HouseInfo[houseid][hLock],
		HouseInfo[houseid][hRent]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Interior` = '%d', `Money` = '%d', `Drugs` = '%d', `Mats` = '%d', ",
		HouseInfo[houseid][hInt],
		HouseInfo[houseid][hMoney],
		HouseInfo[houseid][hDrugs],
		HouseInfo[houseid][hMats]);
	strcat(global_str, str);

	f(str, sizeof(str), "`MainingInstalling_time` = '%d', `Bar` = '%d', `Podval` = '%d', ",
		HouseInfo[houseid][hMainingInstalling_time],
		HouseInfo[houseid][hBar],
		HouseInfo[houseid][hPodval]);
	strcat(global_str, str);

	f(str, sizeof(str), "`NoOwner` = '%d', `Nalog` = '%d', `Klass` = '%d', `Med` = '%d', ",
		HouseInfo[houseid][hNoOwner],
		HouseInfo[houseid][hNalog],
		HouseInfo[houseid][hKlass],
		HouseInfo[houseid][hMed]);
	strcat(global_str, str);

	f(str, sizeof(str), "`Garage`='%i', `Garage_X`='%.4f', `Garage_Y`='%.4f', `Garage_Z`='%.4f', `Type` = '%d', `kvInt` = '%d' WHERE `ID` = '%i'",
		HouseInfo[houseid][hGarage],
		HouseInfo[houseid][hGarage_X],
		HouseInfo[houseid][hGarage_Y],
		HouseInfo[houseid][hGarage_Z],
		HouseInfo[houseid][hType],
		HouseInfo[houseid][hkvInt],
		HouseInfo[houseid][hID]);
	
	strcat(global_str, str);
	
	mysql_tquery(mysql, global_str);
	return 1;
}

stock ProxDetectorS(Float:radi, playerid, targetid, spec = 0)
{
    new Float:p[3];
    if(!IsPlayerConnected(playerid)) return 0;
    if(!IsPlayerConnected(targetid)) return 0;
    if(!spec)
    {
	    if(GetPlayerState(playerid) == 9) return 0;
	    if(GetPlayerState(targetid) == 9) return 0;
    }
    if(!GetPlayerPos(targetid, p[0], p[1], p[2])) return 0;
	if(!IsPlayerInRangeOfPoint(playerid, radi, p[0], p[1], p[2]))
	{
		return 0;
	}
	return 1;
}
stock GetMonthDays(year, month)
{
	switch(month)
	{
	    case 0:     return 31;
	    case 1: 	return 31;
	    case 2: 	return februarydays(year);
	    case 3: 	return 31;
	    case 4: 	return 30;
	    case 5: 	return 31;
	    case 6: 	return 30;
	    case 7: 	return 31;
	    case 8: 	return 31;
	    case 9: 	return 30;
	    case 10: 	return 31;
	    case 11: 	return 30;
	    case 12: 	return 31;
	    default: 	return -1;
	}
	return -1;
}
stock februarydays(year)
{
	if(!(year % 4)) return 29;
	else return 28;
}

stock LoadGangZones()
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `zonesinfo`");

	for(new i, id, gangID; i < sizeof(ZonesInfo); i++)
	{
		cache_get_value_name_int(i, "zone_id", id);

		if(ZonesInfo[i][zone_id] == id)
		{
			cache_get_value_name_int(i, "gangOwner", gangID);

			if(gangID != -1)
				GangZoneInfo[i][gangOwnerId] = gangID;

			cache_get_value_name_int(i, "familyOwner", GangZoneInfo[i][familyOwnerId]);
			cache_get_value_name_int(i, "familyAttackId", GangZoneInfo[i][familyAttackId]);
			cache_get_value_name(i, "familyTimeStart", global_str), Int_UnPackMassive(global_str, GangZoneInfo[i][familyTimeStart]);

			if(i == 66)
				OrgBattlesArea[0] = CreateDynamicRectangle(2410.000000, -1568.000000, 2538.000000, -1467.000000);

			if(i == 291)
				OrgBattlesArea[1] = CreateDynamicRectangle(368.081207, 1313.431274, 684.850525, 1711.882202);
		}

		GangZone[i] = GangZoneCreate(ZonesInfo[i][zone_min][0], ZonesInfo[i][zone_min][1], ZonesInfo[i][zone_max][0], ZonesInfo[i][zone_max][1]);
	}

	return cache_delete(result);
}

stock SaveGangZone(zoneid)
	return mysql_query(mysql, (str_f("UPDATE `zonesinfo` SET `gangOwner` = '%d', `familyOwner` = '%d', `familyAttackId` = '%d', `familyTimeStart` = '%s' WHERE `zone_id` = '%i'", GangZoneInfo[zoneid][gangOwnerId], GangZoneInfo[zoneid][familyOwnerId], GangZoneInfo[zoneid][familyAttackId], Int_PackMassive(0, GangZoneInfo[zoneid][familyTimeStart]), zoneid)), false), true;

stock ShowGangZone(playerid)
{
	for(new i, color; i < sizeof(ZonesInfo); i++)
	{
		if(GangZoneInfo[i][gangOwnerId] && (i > 0 && i <= 130)) color = TeamColors[GangZoneInfo[i][gangOwnerId]][0];
		else if(GangZoneInfo[i][familyOwnerId] != -1 && (i >= 131 && i <= 286)) color = TeamColors[GetFamilyDataInt(GangZoneInfo[i][familyOwnerId], "color")][1];
		else color = ZonesInfo[i][zone_color];
		GangZoneShowForPlayer(playerid, GangZone[i], color);
	}

	return true;
}

stock ValidNumberCars(playerid)
{
	new num;

	switch PI[playerid][pVIP][0] do
	{
		case 5: num = 4;
		case 6: num = 9;
		case 7: num = 15;
		case 8: num = 25;
		default: num = 2;
	} 

	return (GetPlayerHouses(playerid, 1) ? num + 1: num);
}

stock IsValidNumberCars(playerid)
{
    GetNumberCars(playerid, PI[playerid][pCars]);
    return (ValidNumberCars(playerid) >= PI[playerid][pCars] + 1 ? 1:0);
}
stock DetachMusor(vehicleid)
{
	if(VehicleInfo[vehicleid][vJob] != JOB_MUSOR) return 1;
    new musor = NowMusor[vehicleid];
    if(musor != -1)
	{
	    NowMusor[vehicleid] = -1;
	   	MusorCar[musor] = -1;
	   	StopDynamicObject(TempMusorObject[musor]);
	   	TempMusorMusor[TempMusorObject[musor]] = -1;
	   	DestroyDynamicObject(TempMusorObject[musor]), TempMusorObject[musor] = -1;
	   	DestroyDynamicObject(Temp2MusorObject[musor]), Temp2MusorObject[musor] = -1;
	   	DestroyDynamicObject(MusorObject[musor]);
	   	RemoveObject[MusorObject[musor]] = false;
	   	MusorObject[musor] = CreateDynamicObject(1334, MusorPos[musor][0], MusorPos[musor][1], MusorPos[musor][2], 0, 0, MusorPos[musor][3]);
   	}
   	return 1;
}
forward RemovingObject(musor, carid, playerid);
public RemovingObject(musor, carid, playerid)
{
	new objectid = TempMusorObject[musor];
    new Float:X[2], Float:Y[2], Float:Z[2];
	GetDynamicObjectPos(objectid, X[0], Y[0], Z[0]);
	GetDynamicObjectRot(objectid, X[1], Y[1], Z[1]);
	MoveDynamicObject(objectid, X[0], Y[0], Z[0]+0.005, 0.001, 130, 90, Z[1]);
	CallTimeOutFunction("StopMusor", 4000, false, "i", objectid);
	RemoveObject[objectid] = false;
	CarMusorCount[carid] += floatround(MusorCount[musor]/10);
	if(CarMusorCount[carid] > 100) CarMusorCount[carid] = 100;
	MusorCount[musor] = 0;
	f(global_str, 70, "Всего мусора: %d\%/100\%", CarMusorCount[carid]);
	SCM(playerid, 0x33CCFFFF, global_str);
	f(global_str, 70, "Загружено: %d%/100%", CarMusorCount[carid]);
	UpdateDynamic3DTextLabelText(MusorCarText[carid], 0xFFFFFFFF, global_str);
	f(global_str, 70, "Загружено: %d%/100%", MusorCount[musor]);
	UpdateDynamic3DTextLabelText(MusorText[musor], 0xAFAFAFFF, global_str);
	return 1;
}
forward StopMusor(objectid);
public StopMusor(objectid)
{
    if(TempMusorMusor[objectid] != -1)
	{
	    new musor = TempMusorMusor[objectid];
		if(objectid == TempMusorObject[musor])
		{
			new carid = MusorCar[musor];
			if(RemoveObject[objectid])
			{
				CallTimeOutFunction("RemovingObject", 3000, false, "iii", musor, carid, MusorovozPlayer[carid]);

			}
			else
			{
				new playerid = MusorovozPlayer[carid];
				if(IsPlayerInVehicle(playerid, carid) && InJob[playerid] == 2)
				{
					TogglePlayerControllable(playerid, true);
					InJob[playerid] = 1;
					if(CarMusorCount[carid] >= 100)
					{
						CarMusorCount[carid] = 100;
						SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Отправляйтесь на свалку чтобы разгрузить мусоровоз.");
						SCM(playerid, COLOR_BLUE, !"[Подсказка] {FFFFFF}Свалка вашего города обозначена на карте красной меткой.");
						if(IsPlayerToKvadrat(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) EnableGPSForPlayer(playerid,2200.9934,-1977.1194,13.5576);
						else EnableGPSForPlayer(playerid,178.4099,1101.4073,16.4498);
						SetDoorsStatus(carid, 1);
					}
				}
				DetachMusor(carid);
			}
		}
	}
	return 1;
}

stock GetIntGHS( interior )
{
	new ghs;
	switch(interior)
	{
		case 1: ghs = 1;
		case 2: ghs = 2;
		case 3: ghs = 3;
		case 4: ghs = 4;
		case 5: ghs = 5;
		case 6: ghs = 6;
		case 7: ghs = 7;
		case 8: ghs = 8;
		case 9: ghs = 9;
		case 10: ghs = 10;
		case 11: ghs = 11;
		case 12: ghs = 12;
		case 13: ghs = 13;
		case 14: ghs = 14;
		case 15: ghs = 15;
		case 16: ghs = 16;
		case 17: ghs = 17;
		case 18: ghs = 18;
		case 19: ghs = 19;
		case 20: ghs = 20;
		case 21: ghs = 21;
		case 22: ghs = 22;
		case 23: ghs = 23;
		case 24: ghs = 24;
		case 25: ghs = 25;
		case 26: ghs = 26;
		case 27: ghs = 27;
		case 28: ghs = 28;
		case 29: ghs = 29;
		case 30: ghs = 30;
		default: ghs = interior;
 	}
	return ghs;
}

stock SetHouseInt( houseid, inte )
{
	new i = GetIntGHS(inte);
    HouseInfo[houseid][hExit_X] = GHSPos[i][0];
    HouseInfo[houseid][hExit_Y] = GHSPos[i][1];
    HouseInfo[houseid][hExit_Z] = GHSPos[i][2];
	HouseInfo[houseid][hInt] = IntInfo[inte][iInterior];
	HouseInfo[houseid][hLevel] = IntInfo[inte][iLevel];
	return 1;
}

stock IsAArmy(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
	    case TEAM_ARMYSF,TEAM_ARMY,TEAM_ARMYLV: return 1;
	}
	return 0;
}
stock IsANews(playerid)
{
	new team = GetTeamID(playerid);
	switch(team)
	{
	    case TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV: return 1;
	}
	return 0;
}
stock IsANewsCar(carid)
{
	switch(VehicleInfo[carid][vTeam])
	{
  		case TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV: return 1;
	}
	return 0;
}
stock IsACop(playerid, other = 1)
{
	new team = GetTeamID(playerid);
	if(other)
	{
		switch(team)
		{
		    case TEAM_LSPD..TEAM_RCPD, TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
		}
	}
	else
	{
	    switch(team)
		{
		    case TEAM_LSPD..TEAM_RCPD, TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
		}
	}
	return 0;
}
stock IsACopCar(carid, other = 1)
{
	if(other)
	{
		switch(VehicleInfo[carid][vTeam])
		{
      		case TEAM_LSPD..TEAM_RCPD, TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
		}
	}
	else
	{
	    switch(VehicleInfo[carid][vTeam])
		{
		    case TEAM_LSPD..TEAM_RCPD,TEAM_LVPD: return 1;
		}
	}
	return 0;
}
stock SendCopsMessage(color,const string[])
{
	foreach(new i: Player) {
	    if(IsACop(i) && PhoneImprovementsData[i][pdReportsDeath] == 0) SCM(i,color,string);
	}
	return 1;
}

stock SetFullness(playerid, ammount)
{
	if(GetPlayerADDVIP(playerid)) Fullness[playerid] = 100;
	else if(ammount > 100) Fullness[playerid] = 100;
	else if(ammount < 0) Fullness[playerid] = 1;
	else Fullness[playerid] = ammount;
		
	if(!PI[playerid][pHungryShow]) 
		Hunger(playerid, 0);

	return UpdatePlayerDataInt(playerid, "Fullness", ammount);
}

stock GiveFullness(playerid, ammount)
{
	Fullness[playerid] += ammount;
	if(Fullness[playerid] < 1) Fullness[playerid] = 1;
	if(Fullness[playerid] > 100) Fullness[playerid] = 100;
	if(!PI[playerid][pHungryShow]) Hunger(playerid,0);
	if(Fullness[playerid] < 25 && ammount < 0)
	{
	    new Float:playerhp;
	    GetPlayerHealth(playerid, playerhp);
 		GameTextForPlayer(playerid, !"you are hungry!", 0, 1);
 		UpdatePlayerHealth(playerid, playerhp-4);
	}
	if(Fullness[playerid] < 10 && ammount < 0) {
	    new Float:playerhp;
	    GetPlayerHealth(playerid, playerhp);
 		GameTextForPlayer(playerid, !"~r~you are very hungry!", 0, 1);
 		UpdatePlayerHealth(playerid, playerhp-10);
	}
	if(GetPlayerLauncher(playerid))
	{
		if(PI[playerid][pCustomInterface][2] > 3) executeEvent(playerid, 0, (str_f("window.executeEvent('event.%sSatiety', '[%d]');", PI[playerid][pCustomInterface][2] == 4 ? "hudViceCity.update" : "arizonahud.player", Fullness[playerid])));
		sendPlayerCustom_packet(playerid, 3, Fullness[playerid]);
	}

	return 1;
}
stock ASCMALL(color,const text[])
{
	foreach(new i: Player) {
	    if(PhoneImprovementsData[i][pdAdminAction]==0) SCM(i,color,text);
	}
}
stock SendTeamMessage(team,color,const text[])
{
	foreach(new i: Player)
	{
 		if(PhoneImprovementsData[i][pdWalkieTalkie]==0)
	    {
	    	if(PI[i][pMember] == team || Vnedren[i]==team )
		    SCM(i,color,text);
	 	}
    }
    return 1;
}
stock SendVIPMessage(color,const text[])
{
	foreach(new i: Player)
	{
        if(PhoneImprovementsData[i][pdVIPChat]==0)
		{
			if(PI[i][pVIP][0]>4)
	        {
			     SCM(i,color,text);
			}
	    }
    }
    return 1;
}
stock SendGosMessage(color,const text[])
{
	foreach(new i: Player)
	{
    	if(
		GetTeamID(i) == TEAM_LSPD 	||
		GetTeamID(i) == TEAM_RCPD 	||
		GetTeamID(i) == TEAM_FBI    ||
		GetTeamID(i) == TEAM_ARMY   ||
		GetTeamID(i) == TEAM_ARMYSF   ||
		GetTeamID(i) == TEAM_SFPD 	||
		GetTeamID(i) == TEAM_LICENSERS ||
        GetTeamID(i) == TEAM_M4C  	||
        GetTeamID(i) == TEAM_MEDICLV ||
        GetTeamID(i) == TEAM_MERIALS||
		GetTeamID(i) == TEAM_ARMYLV||

		GetTeamID(i) == TEAM_RADIO||
		GetTeamID(i) == TEAM_RADIOSF||
		GetTeamID(i) == TEAM_RADIOLV||

		GetTeamID(i) == TEAM_BANK	||
		GetTeamID(i) == TEAM_MEDICSF ||
		GetTeamID(i)== TEAM_LVPD)
		{
		    if(PhoneImprovementsData[i][pdDepartment]==0) SCM(i,color,text);
		}
    }
    return 1;
}
stock RespawnCars(first = 1, endcar = -1)
{
	if(endcar == -1) endcar = CountVehicles();
	
	for(new i = first; i <= endcar; i ++)
	{
	    if(IsValidVehicle(i))
	    {
		    if(VehicleSeat[i][0] == INVALID_PLAYER_ID)
			{
	            if(IsBazarVehicle(i) || (IsTrailerAttachedToVehicle(i) && GetVehicleModelEx(i) == 584))
                	continue;

				SetVehicleToRespawn(i);
				SetEngineStatus(i, false, -1);
			}
	    }
	}
	return 1;
}

stock SetPlayerCriminal(playerid, forplayerid, wanted, const reason[])
{
	if(wanted > 6) PI[forplayerid][pWanted] = 6;
	else PI[forplayerid][pWanted] = wanted;
	SetPlayerWantedLevel(forplayerid, PI[playerid][pWanted]);
	f(global_str, 200,"{FFFFFF} Вы были объявлены в розыск!\n Обвинитель: {FF6347}%s[%d].{FFFFFF}\n Причина: {FF6347}%s.",PN(playerid),playerid,reason);
	SPD(forplayerid, 0, 0, "", global_str, "Понял", "");
	f(global_str, 100,"Ваш текущий уровень розыска: {FF6347}%d",PI[forplayerid][pWanted]);
	SCM(forplayerid,COLOR_WHITE,global_str);
	f(global_str, 200,"Внимание!{FFFFFF} %s[%d] был(а) объявлен(a) в розыск! Обвинитель: %s[%d] | Причина: {FF6347}%s",PN(forplayerid),forplayerid,PN(playerid),playerid,reason);
	SendCopsMessage(COLOR_RED,global_str);
	return 1;
}

public: ModCar(carid)
{
	if(IsAOwnableCar(carid))
	{
		VehicleInfo[carid][vStyle] = CarInfo[GetVehicleID(carid)][cStyle];
		loadVehicleCustomTuning(carid, GetVehicleID(carid), CarInfo[GetVehicleID(carid)][cID]);
		for(new i; i < 8; i++)
		{
			if(!CarInfo[GetVehicleID(carid)][TuningComp][i]) continue;
			AddVehicleComponent(carid, CarInfo[GetVehicleID(carid)][TuningComp][i]);
		}
		for(new i; i < 10; i++) if(CarInfo[GetVehicleID(carid)][cInvCell][i]) InstallTun(carid, i, 0);
	}
	Streamer_Update(GetVehicleSeat(carid, 0));
	return 1;
}

stock IsPlayerInHisVehicle(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(IsPlayerHaveCar(playerid,GetPlayerVehicleID(playerid))) return 1;
	}
	return 0;
}
stock SendGovMessage(playerid,result[])
{
	if(IsPlayerConnected(playerid))
	{
	    new team = GetTeamID(playerid);
	    switch(team)
	    {
	    	case TEAM_LSPD,TEAM_LVPD,TEAM_RCPD,TEAM_FBI,TEAM_SFPD,TEAM_M4C,TEAM_MEDICLV,TEAM_MERIALS,TEAM_MEDICSF,TEAM_LICENSERS,TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV,TEAM_ARMY,TEAM_ARMYLV,TEAM_BANK,TEAM_ARMYSF:
			{
				f(global_str, 200,"Гос.Новости: %s[%d]: %s",PN(playerid),playerid,result);
				SCMALL(COLOR_GOV, global_str);
			}
			default: return 0;
		}
	}
	return 1;
}

public: PlayerFishing(playerid)
{
	new rand_fish = 1+random(sizeof(FishName) + 8);
	new Fished;
	TogglePlayerControllable(playerid, true);
	RemovePlayerAttachedObject(playerid, 7);
	ClearAnimationsEx(playerid);
	Fishing{playerid} = false;
	switch(rand_fish)
	{
	    case 1..13:
	    {
			for(new i;i < 5;i ++)
			{
			    if(!PlayerFish[playerid][i])
			    {
			        new fish_massa = 1 + random(5);
	        		f(global_str, 150,"Вы поймали ' {73B461}%s{FFFFFF} ' массой %d кг.",FishName[rand_fish],fish_massa);
	        		SCM(playerid,COLOR_WHITE, global_str);
			        PlayerFish[playerid][i] = rand_fish;
			        FishMassa[playerid][i] = fish_massa;
			        DeleteItem(playerid, 523, 1);
			        Fished = 1;
			        break;
			    }
			}
			if(!Fished)
			{
			    new fish_massa = 1 + random(5);
	        	f(global_str, 150,"{BE2D2D}Вы поймали {FFFFFF}( %s ){BE2D2D} массой %d Кг.",FishName[rand_fish],fish_massa);
	        	SCM(playerid,COLOR_WHITE, global_str);
			}
	    }
	    case 14..17:
	    {
	        f(global_str, 150,"{BE2D2D}Рыба {FFFFFF}( %s ){BE2D2D} сорвалась и съела наживку.",FishName[1+random(13)]);
	        SCM(playerid,COLOR_GREY, global_str);
	        DeleteItem(playerid, 523, 1);
	    }
	    default:
	    {
	        f(global_str, 150,"{BE2D2D}Рыба{FFFFFF} ( %s ){BE2D2D} сорвалась, но наживка осталась на крючке.",FishName[1+random(13)]);
	        SCM(playerid,COLOR_GREY, global_str);

	    }
	}
	for(new i;i < sizeof(FishZone);i ++)
	{
		if(IsPlayerInDynamicCP(playerid, Fish_CP[i]))return SPD(playerid,212,0,"Место для рыбалки","{FFFFFF}Вы действительно хотите порыбачить?\nДля рыболовли вам необходима удочка, которую можно приобрести в любом 24/7\nи наживка для рыбалки, ее так же можно там купить.\nРыбу можно продать в магазин.","да","Нет");
	}
	return 1;
}
stock ShowRules(playerid, dialogid = 0)
{
	global_str = "";
	strcat(global_str, "{9ACD32}1. Игровой процесс{FFFFFF}");
	strcat(global_str, "\n1.1 Запрещено использовать читы, трейнеры, моды и т.д");
	strcat(global_str, "\n1.2 Запрещено убивать игроков на месте спауна.");
	strcat(global_str, "\n1.3 Запрещено использовать <ESC> в целях 'спасения' от оппонента.");
	strcat(global_str, "\n1.4 Запрещено стоять на паузе в игре длительное время.");
	strcat(global_str, "\n1.5 Запрещено использование багов, ошибок, недоработок мода.");
	strcat(global_str, "\n1.6 Запрещена любая ускоренная прокачка персонажа и навыков.");
	strcat(global_str, "\n1.7 Запрещено заниматься не игровой коммерцией.");
	strcat(global_str, "\n1.8 Запрещено передавать свой пароль на сервере другим лицам.");
	strcat(global_str, "\n\n{9ACD32}2. Процесс общения{FFFFFF}");
	strcat(global_str, "\n2.1 Запрещено проявлять неуважение к серверу и его разработчикам.");
	strcat(global_str, "\n2.2 Запрещены угрозы игрокам (не относящиеся к игровому процессу).");
	strcat(global_str, "\n2.3 Запрещено слишком часто писать заглавными буквами.");
	strcat(global_str, "\n2.4 Запрещено рекламировать что-либо (сайты, форумы, сервера).");
	strcat(global_str, "\n2.5 Запрещено часто повторять одинаковые фразы.");
	strcat(global_str, "\n\n{9ACD32}3. Администрирование сервера{FFFFFF}");
	strcat(global_str, "\n3.1 Запрещено обсуждать/критиковать действия администрации.");
	strcat(global_str, "\n3.2 Запрещено препятствовать администрации в работе.");
	strcat(global_str, "\n3.3 Запрещено оскорблять администрацию сервера.");
	strcat(global_str, "\n\n{9ACD32}4. Помощь по игре{FFFFFF}");
	strcat(global_str, "\n4.1 Основные функции сервера в меню персонажа, нажмите Y");
	strcat(global_str, "\n4.2 Чтобы обратиться за помощью, нажмите ALT+N Report/Support");
	SPD(playerid,dialogid,0,"{FFFFFF}Правила сервера",global_str, !"Принять","");
	return 1;
}
stock IsGiveWarn(playerid, targetid)
{
	if(PI[playerid][pMember][0] == PI[targetid][pMember][0])
	{
	    if(PI[playerid][pRank] >= OrgInfo[PI[playerid][pMember][0]][Max_Rang]-1) return 1;
	}
	return 0;
}
stock IsACopDoor(door)
{
	switch(DoorInfo[door][dOrg])
	{
	    case TEAM_LSPD,TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsACopGate(gate)
{
	switch(GateInfo[gate][gOrg])
	{
	    case TEAM_LSPD,TEAM_FBI,TEAM_LVPD, TEAM_SFPD: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsACopBarrier(barrier)
{
	switch(BarrierInfo[barrier][brOrg])
	{
	    case TEAM_LSPD,TEAM_LVPD,TEAM_FBI,TEAM_SFPD: return 1;
	    default: return 0;
	}
	return 0;
}
stock IsPlayerToKvadrat(playerid,Float:min_x,Float:min_y,Float:max_x,Float:max_y)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
	if((x <= max_x && x >= min_x) && (y <= max_y && y >= min_y)) return 1;
	return 0;
}

stock endrabavt(i)
{
	if(pTemp[i][pArendaCar]!=-1)
	{
	    new carsid=GetPlayerVehicleID(i),playerid=i;
	    GetVehicleHealth(carsid,VehicleHealth[carsid] );
	    if(VehicleHealth[carsid]<700.0)
	    {
	        new money = floatround(1000.0-VehicleHealth[carsid]);
			if(PI[playerid][pMoney]>=money)
			{
				GiveMoney(playerid,-money);
				f(global_str, 200,"Вы заплатили {FFFFFF}%d${FF6347} за порчу государственного имущества! {FFFFFF}(( {FF6347}Вы сильно побили машину{FFFFFF} )).",money);
				SCM(playerid,COLOR_RED,global_str);
			}
			else if(PI[playerid][pBank]>=money)
			{
				PI[playerid][pBank] -= money;
				f(global_str, 200,"С банковского счета было изьято {FFFFFF}%d${FF6347} за порчу гос. имущества! {FFFFFF}(( {FF6347}Вы сильно побили машину{FFFFFF} )).",money);
				SCM(playerid,COLOR_RED,global_str);
			}
			else if(PI[playerid][pZKP]>=10)
			{
		 		PI[playerid][pZKP]-=10;
		 		SCM(playerid,COLOR_RED,"У вас не достаточно денег чтобы заплатить за разбитое авто. Ваша законопослушность была снижена!");
			}
	    }
		f(global_str, 100,"Рабочий день завершен. Вами заработано: {FFFFFF}%d$", BusMoney[i]);
		SCM(i, COLOR_ACHAT, global_str);
		GiveMoney(i,BusMoney[i]);
		UpdateDynamic3DTextLabelText(AutobCarText[pTemp[i][pArendaCar]], 0xFFFFFFFF, "{E06C1F}Автобус\n{73B461}[Для аренды]");
		SetVehicleToRespawn(pTemp[i][pArendaCar]);
		BusTime[i]=0;
		pTemp[i][pArendaCar] = -1;
		BusMoney[i]=0;
		pPressed[i] = 0;
		DisablePlayerRaceCheckpoint(i);
		Vehs[i][vReis] = 0;
	}
	return 1;
}
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(gpss[playerid]==1)
	{
		gpss[playerid]=0;
		DisablePlayerRaceCheckpoint(playerid);
	}
    new getcar = GetPlayerVehicleID(playerid);
   	if(PlayerJob[playerid] == 1 && GetVehicleModelEx(getcar) == 437 && GetPlayerState(playerid)==2)
    {
        DisablePlayerRaceCheckpoint(playerid);
        switch(Vehs[playerid][vReis])
		{
		    case 1:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 36)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusCityLS[0][BUSSTATION1],BusCityLS[0][BUS_COORD1][0],BusCityLS[0][BUS_COORD1][1],BusCityLS[0][BUS_COORD1][2],BusCityLS[1][BUS_COORD1][0],BusCityLS[1][BUS_COORD1][1],BusCityLS[1][BUS_COORD1][2],10.0);
			        return 1;
			    }
			    if(BusCityLS[pPressed[playerid]-1][BUSSTATION1] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str, 100,"Автобус по маршруту ( Внутри-городской ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid, global_str, COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusCityLS[pPressed[playerid]][BUSSTATION1],BusCityLS[pPressed[playerid]][BUS_COORD1][0],BusCityLS[pPressed[playerid]][BUS_COORD1][1],BusCityLS[pPressed[playerid]][BUS_COORD1][2],BusCityLS[pPressed[playerid]+1][BUS_COORD1][0],BusCityLS[pPressed[playerid]+1][BUS_COORD1][1],BusCityLS[pPressed[playerid]+1][BUS_COORD1][2],10.0);
			}
			case 2:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 66)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusFarm[0][BUSSTATION2],BusFarm[0][BUS_COORD2][0],BusFarm[0][BUS_COORD2][1],BusFarm[0][BUS_COORD2][2],BusFarm[1][BUS_COORD2][0],BusFarm[1][BUS_COORD2][1],BusFarm[1][BUS_COORD2][2],10.0);
			        return 1;
			    }
			    if(BusFarm[pPressed[playerid]-1][BUSSTATION2] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
                    f(global_str, 100,"Автобус по маршруту ( ЖД ЛС -> Jefferson -> Ферма -> Завод ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusFarm[pPressed[playerid]][BUSSTATION2],BusFarm[pPressed[playerid]][BUS_COORD2][0],BusFarm[pPressed[playerid]][BUS_COORD2][1],BusFarm[pPressed[playerid]][BUS_COORD2][2],BusFarm[pPressed[playerid]+1][BUS_COORD2][0],BusFarm[pPressed[playerid]+1][BUS_COORD2][1],BusFarm[pPressed[playerid]+1][BUS_COORD2][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,BusFarm[pPressed[playerid]-1][BUS_COORD2][0],BusFarm[pPressed[playerid]-1][BUS_COORD2][1],BusFarm[pPressed[playerid]-1][BUS_COORD2][2]))return Kick(playerid);
			}
			case 3:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 38)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusZav[0][BUSSTATION3],BusZav[0][BUS_COORD3][0],BusZav[0][BUS_COORD3][1],BusZav[0][BUS_COORD3][2],BusZav[1][BUS_COORD3][0],BusZav[1][BUS_COORD3][1],BusZav[1][BUS_COORD3][2],10.0);
			        return 1;
			    }
			    if(BusZav[pPressed[playerid]-1][BUSSTATION3] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str, 100,"Автобус по маршруту ( ЖД ЛС -> Завод ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusZav[pPressed[playerid]][BUSSTATION3],BusZav[pPressed[playerid]][BUS_COORD3][0],BusZav[pPressed[playerid]][BUS_COORD3][1],BusZav[pPressed[playerid]][BUS_COORD3][2],BusZav[pPressed[playerid]+1][BUS_COORD3][0],BusZav[pPressed[playerid]+1][BUS_COORD3][1],BusZav[pPressed[playerid]+1][BUS_COORD3][2],10.0);
			}
			case 4:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 27)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusAvto[0][BUSSTATION4],BusAvto[0][BUS_COORD4][0],BusAvto[0][BUS_COORD4][1],BusAvto[0][BUS_COORD4][2],BusAvto[1][BUS_COORD4][0],BusAvto[1][BUS_COORD4][1],BusAvto[1][BUS_COORD4][2],10.0);
			        return 1;
			    }
			    if(BusAvto[pPressed[playerid]-1][BUSSTATION4] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛС -> Лос Сантос -> Грузчики) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusAvto[pPressed[playerid]][BUSSTATION4],BusAvto[pPressed[playerid]][BUS_COORD4][0],BusAvto[pPressed[playerid]][BUS_COORD4][1],BusAvto[pPressed[playerid]][BUS_COORD4][2],BusAvto[pPressed[playerid]+1][BUS_COORD4][0],BusAvto[pPressed[playerid]+1][BUS_COORD4][1],BusAvto[pPressed[playerid]+1][BUS_COORD4][2],10.0);
			}
			case 5:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 50)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusLv[0][BUSSTATION5],BusLv[0][BUS_COORD5][0],BusLv[0][BUS_COORD5][1],BusLv[0][BUS_COORD5][2],BusLv[1][BUS_COORD5][0],BusLv[1][BUS_COORD5][1],BusLv[1][BUS_COORD5][2],10.0);
			        return 1;
			    }
			    if(BusLv[pPressed[playerid]-1][BUSSTATION5] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛС -> ЖД ЛВ -> Авиашкола ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusLv[pPressed[playerid]][BUSSTATION5],BusLv[pPressed[playerid]][BUS_COORD5][0],BusLv[pPressed[playerid]][BUS_COORD5][1],BusLv[pPressed[playerid]][BUS_COORD5][2],BusLv[pPressed[playerid]+1][BUS_COORD5][0],BusLv[pPressed[playerid]+1][BUS_COORD5][1],BusLv[pPressed[playerid]+1][BUS_COORD5][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,BusLv[pPressed[playerid]-1][BUS_COORD5][0],BusLv[pPressed[playerid]-1][BUS_COORD5][1],BusLv[pPressed[playerid]-1][BUS_COORD5][2]))return Kick(playerid);
			}
			case 6:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 51)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusLvv[0][BUSSTATION6],BusLvv[0][BUS_COORD6][0],BusLvv[0][BUS_COORD6][1],BusLvv[0][BUS_COORD6][2],BusLvv[1][BUS_COORD6][0],BusLvv[1][BUS_COORD6][1],BusLvv[1][BUS_COORD6][2],10.0);
			        return 1;
			    }
			    if(BusLvv[pPressed[playerid]-1][BUSSTATION6] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛВ -> Полиция ЛВ -> Спортзал -> Больница ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusLvv[pPressed[playerid]][BUSSTATION6],BusLvv[pPressed[playerid]][BUS_COORD6][0],BusLvv[pPressed[playerid]][BUS_COORD6][1],BusLvv[pPressed[playerid]][BUS_COORD6][2],BusLvv[pPressed[playerid]+1][BUS_COORD6][0],BusLvv[pPressed[playerid]+1][BUS_COORD6][1],BusLvv[pPressed[playerid]+1][BUS_COORD6][2],10.0);
			}
			case 7:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 53)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,BusLvvv[0][BUSSTATION7],BusLvvv[0][BUS_COORD7][0],BusLvvv[0][BUS_COORD7][1],BusLvvv[0][BUS_COORD7][2],BusLvvv[1][BUS_COORD7][0],BusLvvv[1][BUS_COORD7][1],BusLvvv[1][BUS_COORD7][2],10.0);
			        return 1;
			    }
			    if(BusLvvv[pPressed[playerid]-1][BUSSTATION7] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛВ -> Army LV -> Fort Carson -> Карьер ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,BusLvvv[pPressed[playerid]][BUSSTATION7],BusLvvv[pPressed[playerid]][BUS_COORD7][0],BusLvvv[pPressed[playerid]][BUS_COORD7][1],BusLvvv[pPressed[playerid]][BUS_COORD7][2],BusLvvv[pPressed[playerid]+1][BUS_COORD7][0],BusLvvv[pPressed[playerid]+1][BUS_COORD7][1],BusLvvv[pPressed[playerid]+1][BUS_COORD7][2],10.0);
			}
			case 8:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 66)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,bussf[0][BUSSTATION8],bussf[0][BUS_COORD8][0],bussf[0][BUS_COORD8][1],bussf[0][BUS_COORD8][2],bussf[1][BUS_COORD8][0],bussf[1][BUS_COORD8][1],bussf[1][BUS_COORD8][2],10.0);
			        return 1;
			    }
			    if(bussf[pPressed[playerid]-1][BUSSTATION8] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛС -> Jefferson -> ЖД СФ -> Автошкола ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,bussf[pPressed[playerid]][BUSSTATION8],bussf[pPressed[playerid]][BUS_COORD8][0],bussf[pPressed[playerid]][BUS_COORD8][1],bussf[pPressed[playerid]][BUS_COORD8][2],bussf[pPressed[playerid]+1][BUS_COORD8][0],bussf[pPressed[playerid]+1][BUS_COORD8][1],bussf[pPressed[playerid]+1][BUS_COORD8][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,bussf[pPressed[playerid]-1][BUS_COORD8][0],bussf[pPressed[playerid]-1][BUS_COORD8][1],bussf[pPressed[playerid]-1][BUS_COORD8][2]))return Kick(playerid);
			}
			case 9:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 68)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,buslvsf[0][BUSSTATION9],buslvsf[0][BUS_COORD9][0],buslvsf[0][BUS_COORD9][1],buslvsf[0][BUS_COORD9][2],buslvsf[1][BUS_COORD9][0],buslvsf[1][BUS_COORD9][1],buslvsf[1][BUS_COORD9][2],10.0);
			        return 1;
			    }
			    if(buslvsf[pPressed[playerid]-1][BUSSTATION9] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД ЛВ -> Казино -> Fort Carson -> ЖД СФ ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,buslvsf[pPressed[playerid]][BUSSTATION9],buslvsf[pPressed[playerid]][BUS_COORD9][0],buslvsf[pPressed[playerid]][BUS_COORD9][1],buslvsf[pPressed[playerid]][BUS_COORD9][2],buslvsf[pPressed[playerid]+1][BUS_COORD9][0],buslvsf[pPressed[playerid]+1][BUS_COORD9][1],buslvsf[pPressed[playerid]+1][BUS_COORD9][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,buslvsf[pPressed[playerid]-1][BUS_COORD9][0],buslvsf[pPressed[playerid]-1][BUS_COORD9][1],buslvsf[pPressed[playerid]-1][BUS_COORD9][2]))return Kick(playerid);
			}
			case 10:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 54)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,bussfsf[0][BUSSTATION10],bussfsf[0][BUS_COORD10][0],bussfsf[0][BUS_COORD10][1],bussfsf[0][BUS_COORD10][2],bussfsf[1][BUS_COORD10][0],bussfsf[1][BUS_COORD10][1],bussfsf[1][BUS_COORD10][2],10.0);
			        return 1;
			    }
			    if(bussfsf[pPressed[playerid]-1][BUSSTATION10] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str, 100,"Автобус по маршруту ( Городской СФ ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,bussfsf[pPressed[playerid]][BUSSTATION10],bussfsf[pPressed[playerid]][BUS_COORD10][0],bussfsf[pPressed[playerid]][BUS_COORD10][1],bussfsf[pPressed[playerid]][BUS_COORD10][2],bussfsf[pPressed[playerid]+1][BUS_COORD10][0],bussfsf[pPressed[playerid]+1][BUS_COORD10][1],bussfsf[pPressed[playerid]+1][BUS_COORD10][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,bussfsf[pPressed[playerid]-1][BUS_COORD10][0],bussfsf[pPressed[playerid]-1][BUS_COORD10][1],bussfsf[pPressed[playerid]-1][BUS_COORD10][2]))return Kick(playerid);
			}
			case 11:
			{
			    BusMoney[playerid]+=GLS[7];
        		pPressed[playerid]++;
			    if(pPressed[playerid] >= 74)
			    {
			        pPressed[playerid] = 0;
			        SetPlayerRaceCheckpoint(playerid,bussffa[0][BUSSTATION11],bussffa[0][BUS_COORD11][0],bussffa[0][BUS_COORD11][1],bussffa[0][BUS_COORD11][2],bussffa[1][BUS_COORD11][0],bussffa[1][BUS_COORD11][1],bussffa[1][BUS_COORD11][2],10.0);
			        return 1;
			    }
			    if(bussffa[pPressed[playerid]-1][BUSSTATION11] == 1)
				{
					TimeBus[playerid]=10;
					GameTextForPlayer(playerid, "~r~Stop", 2000, 1);
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					SCM(playerid, COLOR_GREY, !"Остановите автобус и подождите пассажиров!");
					f(global_str,100,"Автобус по маршруту ( ЖД СФ -> Ферма -> RCPD -> Завод ) отъезжает через 10 секунд.");
					ProxDetector(45,playerid,global_str,COLOR_PURPLE);
					return 1;
				}
    			SetPlayerRaceCheckpoint(playerid,bussffa[pPressed[playerid]][BUSSTATION11],bussffa[pPressed[playerid]][BUS_COORD11][0],bussffa[pPressed[playerid]][BUS_COORD11][1],bussffa[pPressed[playerid]][BUS_COORD11][2],bussffa[pPressed[playerid]+1][BUS_COORD11][0],bussffa[pPressed[playerid]+1][BUS_COORD11][1],bussffa[pPressed[playerid]+1][BUS_COORD11][2],10.0);
    			if(!IsPlayerInRangeOfPoint(playerid,30,bussffa[pPressed[playerid]-1][BUS_COORD11][0],bussffa[pPressed[playerid]-1][BUS_COORD11][1],bussffa[pPressed[playerid]-1][BUS_COORD11][2]))return Kick(playerid);
			}
		}
    }
	return 1;
}

stock ShowPhone(playerid, itemid)
{
	switch GetPlayerLauncher(playerid) do
	{
		case 0:
		{
			new phonePoint[][] = {"Звонок (набор номера)", "СМС", "Контакты", "Настройки телефона", "Банковское меню", "Заказ такси", "Работа в такси", "Криптовалюта", "Репорт", "Аукционы домов", "Аукционы бизнесов", "Экстренные службы", "Режим погони", "Трезвый водитель", "Ловля"};
			
			for(new i; i < sizeof(phonePoint); i++)
				strcat(global_str, (str_f("%s\n", phonePoint[i])));

			SPD(playerid, 26186, DIALOG_STYLE_LIST, !"Меню телефона", global_str, !"Выбрать", !"Закрыть");
		}

		case 1:
		{
			executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"Phone\"]');");
            executeEvent(playerid, 0, (str_f("window.executeEvent('event.phone.changePhoneBorder', '[%i]');", itemid - 674)));
            executeEvent(playerid, 0, (str_f("window.executeEvent('event.phone.changePhoneBg', '[%i]');", PI[playerid][pPhoneInfo][3])));
            executeEvent(playerid, 0, (str_f("window.executeEvent('event.phone.initializeServer', '[\"%s\"]');", Setting_Server[7])));
            cursorPlayer(playerid, 0, true);
		}
		case 2:
		{
			cursorPlayer(playerid, 47, true);
			eventMobile(playerid, {47, 0}, Setting_Server[7]);
			eventMobile(playerid, {47, 1}, IntToStr(PI[playerid][pPhoneInfo][3]));
			eventMobile(playerid, {47, 2}, IntToStr(itemid - 674));
		}
	}

	return true;
}

stock IsPhoneModel(modelId)
{
    if(modelId >= 18865 && modelId <= 18874 or modelId == 19513)
        return true;

    return false;
}

stock CheckPhones(playerid)
{
    new item;

    for(new i = 675; i < 729; i++)
        if(GetCount(playerid, i)) { item = i; break; }

    return item;
}

cmd:phone(playerid)
{
    if(!CheckPhones(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У Вас отсутствует мобильное устройство!");
    if(PI[playerid][pCalling] != -1 || PI[playerid][pONPhoneTalk] > 0) return SelectTextDraw(playerid, -16776961);

    global_str = "{FFFFFF}Мобильное устройство\t{FFFFFF}Цветовая гамма";

	new count;

    for(new i, color[24]; i < PI[playerid][pInvCell]; i++)
    {
		if(IsPhoneModel(ItemsInfo[Inventory[playerid][0][i]][itemModel]))
		{
			spdList(playerid, count, Inventory[playerid][0][i]);

			switch(ItemsInfo[Inventory[playerid][0][i]][itemModel])
			{
				case 18866: color = "голубой";
				case 18874: color = "белый";
				case 18872: color = "синий";
				case 18871: color = "зеленый";
				case 18867: color = "красный";
				case 19513: color = "серебряный";
				case 18865: color = "оранжевый";
				case 18873: color = "золотой";
				case 18869: color = "розовый";
				case 18868: color = "черный";
				case 18870: color = "темно красный";
			}

			f(global_str, sizeof(global_str), "%s\n%s\t%s", global_str, ItemsInfo[Inventory[playerid][0][i]][itemName], color);
			count++;
        }
    }

    if(count > 1) SPD(playerid, 1000, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Телефоны | {ae433d}Телефоны", global_str, !"»", !"x");
    else ShowPhone(playerid, CheckPhones(playerid));
    
	return true;
}

stock ShowPhoneMenu(playerid)
{
    f(global_str, 550, "\
    	{B03131}[1]{FFFFFF} Настройки\n\
    	{B03131}[2]{FFFFFF} Таймер (Будильник)\n\
    	{B03131}[3]{FFFFFF} Номера/мониторинг гос. работников\n\
    	{B03131}[4]{FFFFFF} Селфи{B03131}\n\
    	{B03131}[5]{FFFFFF} Радио[%s{FFFFFF}]\n\
    	{B03131}[6]{FFFFFF} Проверить баланс\n\
    	{B03131}[7]{FFFFFF} Перевести телефон в режим \"%s\"\n\
    	{B03131}[8]{FFFFFF} Убрать телефон\n\
    %s", PlayerPlayed{playerid} ? ("{7def58}ВКЛ") : ("{ef5858}ВЫКЛ"), PI[playerid][pPhoneInfo][1] ? ("Самолет") : ("Обычный"),
    !(FP_Data[playerid][F_FAMILY_ID] == -1) ?  (GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "brend") ? "\n{B03131}[9]{FFFFFF} Отдел коммерции\n{B03131}[10]{FFFFFF} Отдел недвижимости":""): "");
    
    return SPD(playerid, 966, DIALOG_STYLE_LIST, !"Меню", global_str, !"Принять", !"Отмена");
}

stock Send2BarBot(playerid)
{
    if(HouseEntered[playerid]!=-1) return 1;
    switch(random(3))
    {
        case 0: SendBotMessage(playerid,"Бармен:\n{FFFFFF}Приятного аппетита.");
        case 1: SendBotMessage(playerid,"Бармен:\n{FFFFFF}Как говорится, смотри не переедайся. *Улыбается*");
        case 2: SendBotMessage(playerid,"Бармен:\n{FFFFFF}Запивать чем-то будешь?");
    }
	return 1;
}
stock SendEatBot(playerid)
{
    if(HouseEntered[playerid]!=-1) return 1;
    switch(random(4))
    {
		case 0: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Спасибо за покупку. Хорошего дня!");
		case 1: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Недалеко от сюда есть хороший бар, советую заглянуть.");
		case 2: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Без сдачи не найдется? *Улыбается*");
		case 3: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Спасибо за покупку, надеюсь тебе понравилось.");
    }
	return 1;
}
stock SendAmmoBot(playerid)
{
    switch(random(3))
    {
        case 0: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Спасибо за покупку.");
        case 1: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Ты только эт смотри не балуйся.");
        case 2: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Ладно, держи и заходи еще *Улыбается*.");
    }
	return 1;
}

new Text3D:ACTOR_3ID_BOT_MSG[MAX_ACTORS];
public: ClearBotMessage(actorid)
{
	DestroyDynamic3DTextLabel(ACTOR_3ID_BOT_MSG[actorid]), ACTOR_3ID_BOT_MSG[actorid] = Text3D:0;
	ClearDynamicActorAnimations(actorid);
}

stock SendBotMessage(playerid, const mesage[])
{
	if(!IsAtBankomat(playerid,2.0))
	{
	    new Float:x, Float:y, Float:z, Float:distance = 30.0, id;

	    for(new i = 1; i < Streamer_CountItems(STREAMER_TYPE_ACTOR, true) + 1; i++)
		{
			//if(!Streamer_IsInArrayData(STREAMER_TYPE_ACTOR, i, E_STREAMER_WORLD_ID, GetPlayerVirtualWorld(playerid))) continue;
	
			//if(!IsDynamicActorStreamedIn(i, playerid)) continue; 

			GetDynamicActorPos(i, x, y, z);

			if(distance > GetPlayerDistanceFromPoint(playerid, x,y,z))
			{
				distance = GetPlayerDistanceFromPoint(playerid, x,y,z);
				id = i;
			}
		}

		ApplyDynamicActorAnimation(id, "PED", "IDLE_CHAT",4.1,0,1,1,1,1);
		GetDynamicActorPos(id, x, y, z);
		
		if(!ACTOR_3ID_BOT_MSG[id])
			ACTOR_3ID_BOT_MSG[id] = CreateDynamic3DTextLabel(mesage, COLOR_GREY, x, y, z + 1.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetDynamicActorVirtualWorld(id)),
			CallTimeOutFunction("ClearBotMessage", 10000, false, "d", id),
			Streamer_Update(playerid);
		else
			UpdateDynamic3DTextLabelText(ACTOR_3ID_BOT_MSG[id], COLOR_GREY, mesage);
	}
	if(strfind(mesage, "\n")==-1) SCM(playerid,COLOR_GREY,mesage);
	return false;
}
stock SendPedBot(playerid)
{
    switch(random(4))
    {
        case 0: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Ммм. Хороший выбор. Давно хотел себе такой.");
        case 1: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Этот костюм прям на вас сшитый *Улыбается*");
        case 2: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Такое чувство, что он прям на вас создан *Улыбается*");
        case 3: SendBotMessage(playerid,"Продавец:\n{FFFFFF}Вы просто восхетительны в нем.");
    }
	return 1;
}
stock SendBarBot(playerid)
{
    if(HouseEntered[playerid]!=-1) return 1;
    switch(random(3))
    {
        case 0: SendBotMessage(playerid, "Бармен:\n{FFFFFF}Ухх, смотри не напивайся. *Улыбается*");
        case 1: SendBotMessage(playerid, "Бармен:\n{FFFFFF}Хороший выбор.");
        case 2: SendBotMessage(playerid, "Бармен:\n{FFFFFF}Надеюсь тебе понравится.");
    }
	return 1;
}
stock SendBankBot(playerid)
{
	if(!IsAtBankomat(playerid,5))
	{
	    switch(random(4))
	    {
	        case 0: SendBotMessage(playerid, "Работник банка:\n{FFFFFF}Спасибо, обращайтесь еще.");
	        case 1: SendBotMessage(playerid, "Работник банка:\n{FFFFFF}Все готово, можете все проверить.");
	        case 2: SendBotMessage(playerid, "Работник банка:\n{FFFFFF}Хорошо что вы обратились именно ко мне *Улыбается*.");
	        case 3: SendBotMessage(playerid, "Работник банка:\n{FFFFFF}Спасибо за обращение. Можете все проверить.");
	    }
	}
	else SendBotMessage(playerid, "Всего доброго.");
	return 1;
}

cmd:unbomb(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(BreakBomb[playerid] == -1)
		{
			for(new i; i < MAX_BOMBS; i ++)
			{
			    if(BombInfo[i][bbCreated] && !BombInfo[i][bbBreak])
			    {
			    	if(IsPlayerInRangeOfPoint(playerid, 1.0, BombInfo[i][bbPos][0], BombInfo[i][bbPos][1], BombInfo[i][bbPos][2]))
			    	{
			    	    BombInfo[i][bbBreak] = true;
			    	    BreakBomb[playerid] = i;
			    	    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 0, 0, 0, 1);
						CallTimeOutFunction("UnBombPlayer", 5000, false, "ii", playerid, i);
						TogglePlayerControllable(playerid,false);
			    	    break;
			    	}
			    }
			}
		}
	}
	return 1;
}

cmd:bomb(playerid, params[])
{
	if(PI[playerid][pBomb] > 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 100.0, 265.9013,78.3257,1001.0391) || IsPlayerInRangeOfPoint(playerid, 100.0, 1468.6514,-1741.8002,13.5469)|| IsPlayerInRangeOfPoint(playerid, 100.0, 2388.1479,-1926.6962,13.5500)|| IsPlayerInRangeOfPoint(playerid, 100.0, 2587.1738,-1236.9465,1212.7019) ||
		IsPlayerInRangeOfPoint(playerid, 100.0, 1914.9935,177.8372,37.2813) || IsPlayerInRangeOfPoint(playerid, 100.0, 2571.9922,-1303.6332,1044.1250) || IsPlayerInRangeOfPoint(playerid, 100.0, 2065.4238,-1374.4506,1001.2960)|| IsPlayerInRangeOfPoint(playerid, 100.0, 1497.3561,-1281.8790,14.5419 ) ||
		IsPlayerInRangeOfPoint(playerid, 100.0, 1789.8708,-1897.3647,13.3965) || IsPlayerInRangeOfPoint(playerid, 100.0, 191.0939,-108.1999,1.5488) || IsPlayerInRangeOfPoint(playerid, 100.0, 760.6195,-1418.3060,13.6124) || IsPlayerInRangeOfPoint(playerid, 100.0, 1976.8551,-1965.9889,13.5825) || IsPlayerInRangeOfPoint(playerid, 35.0, 200.8742,-239.7395,1.5744) ||
		IsPlayerInRangeOfPoint(playerid, 100.0, 1392.5906,-2267.2756,13.5469) || IsPlayerInRangeOfPoint(playerid, 100.0, 2804.7432,-1448.3627,20.1999) || IsPlayerInRangeOfPoint(playerid, 70.0, 2817.6655,1289.3645,10.9609)|| IsPlayerInRangeOfPoint(playerid, 50.0, 1595.0094,1825.6066,10.8203)|| IsPlayerInRangeOfPoint(playerid, 50.0, 2235.1648,1628.0640,1006.1799) ||
		IsPlayerInRangeOfPoint(playerid, 50.0, -72.6627,30.2661,3.1172)) return SCM(playerid,COLOR_GREY, !"Вы не можете здесь заложить бомбу!");
		new time;
		if(sscanf(params,"d",time)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /bomb [таймер (сек)]");
		if(time >= 10 && time <= 900)
		{
		    new bombid = MAX_BOMBS;
		    for(new i; i < MAX_BOMBS;i ++)
		    {
		        if(!BombInfo[i][bbCreated])
		        {
	                bombid = i;
	                break;
		        }
		    }
		    if(bombid < MAX_BOMBS)
		    {
		        new Float:X, Float:Y, Float:Z;
		        GetPlayerPos(playerid, X, Y, Z);
		        ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
		        f(global_str, 120 ,"Вы заложили бомбу. Таймер на %s", Convert(time));
		        SCM(playerid, COLOR_LIME, global_str);
		        CreteBomb[playerid]=0;
		        RemovePlayerAttachedObject(playerid, 7);
		        BombInfo[bombid][bbCreated] = true;
		        BombInfo[bombid][bbTime] = time;
		        f(global_str, 120,"{FFFFFF} Бомба \n{FF9900}%s", Convert(time));
		        BombInfo[bombid][bbText] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, X, Y, Z, 10.0);
		        BombInfo[bombid][bbObject] = CreateDynamicObject(1252, X, Y, Z, 0, 0, 0);
		        BombInfo[bombid][bbPos][0] = X;
		        BombInfo[bombid][bbPos][1] = Y;
		        BombInfo[bombid][bbPos][2] = Z;
		        PI[playerid][pBomb] --;
		    }
		}
		else SCM(playerid, COLOR_GREY, !"Не больше 900 и не меньше 10");
	}
	else SCM(playerid, COLOR_GREY, !"У вас нет бомбы");
	return 1;
}
cmd:createbomb(playerid, params[])
{
    if(!IsAtGang(playerid) && !IsAtMafia(playerid)) return SCM(playerid,COLOR_RED,!"Вы не состоите ни в банде , ни в мафии.");
	if(GetCount(playerid, 511)<900)return SCM(playerid,COLOR_RED,!"У вас недостаточно патронов для изготовления! (( 900 ))");
	if(PI[playerid][pBomb]>=1)return SCM(playerid,COLOR_RED,!"Вы уже сделали бомбу!");
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
	DeleteItem(playerid, 511, 900);
	CreteBomb[playerid]=30;
	SCM(playerid,COLOR_GREY, !"Вы начали делать бомбу.");
	return 1;
}

cmd:setspawn(playerid)
{
	if(PI[playerid][pDCTime]==1 && PI[playerid][pHouseKey]==-1)PI[playerid][pDCTime]=0;
	switch(PI[playerid][pDCTime])
	{
	    case 0: global_str = "{BE2D2D}Вокзал{FFFFFF}";
	    case 1: global_str = "{33AA33}Дом{FFFFFF}";
	    case 2: global_str = "{33AA33}Организация{FFFFFF}";
	    case 4: global_str = "{33AA33}Трейлер{FFFFFF}";
	    case 5: global_str = "{33AA33}Отель{FFFFFF}";
		case 6: global_str = "{33AA33}Семейная квартира{FFFFFF}";
		case 7: f (global_str, 100, "{faac58}%.02f,%.02f,%.02f", PI[playerid][pPremiumPos][0], PI[playerid][pPremiumPos][1], PI[playerid][pPremiumPos][2]);
	}
	f(global_str, 500,"\
	Текущее место спавна: %s\n\
	Установить отель местом спавна\n\
	Установить дом местом спавна.\n\
	Установить организацию местом спавна.\n\
	Установить семейную квартиру спавном.\n\
	Установить вокзал местом спавна.\n\
	Установить трейлер местом спавна.",global_str);
	if(PI[playerid][pVIP][0] >= 6) strcat(global_str, "\n{faac58}Установить спавн в этой точке.");
	
	return SPD(playerid, 1781, 2 , !"Выберите место спавна", global_str, !"Принять", !"Закрыть");
}

cmd:sethousecost(playerid, params[])
{
	if(!IsOsnovatel(playerid))
		return 1;

	new
	    houseid,
	    cost,
		type;

    if(sscanf(params, "ddd", houseid, type, cost))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /sethousecost [id] [type] [cost]");

	HouseInfo[houseid][hType] = type;
    HouseInfo[houseid][hCost] = cost;
    return UpdateHouse(houseid);
}

cmd:setklass(playerid, params[])
{
	if(!IsOsnovatel(playerid))
	    return 1;

	extract params -> new houseid, klass; else
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /setklass [id] [klass]");

	if(houseid > OWNABLEHOUSES || klass > 6)
	    return 1;

	UpdateHouse(houseid);
	HouseInfo[houseid][hKlass] = klass;
	SCM(playerid, -1, !"GATOVA");
	UpdateHouse(houseid);
	return 1;
}

cmd:setbizcost(playerid, params[])
{
	if(!IsOsnovatel(playerid))
		return 1;

	new
	    bizid,
	    cost;

	if(sscanf(params, "dd", bizid, cost))
	    return SCM(playerid, COLOR_OLDRED, !"Используй: /setbizcost [id] [cost]");

    BizData[bizid][bCost] = cost;
    UpdateBusinessText(bizid, 1);
    return SCM(playerid, COLOR_RED, !"gotov");
}

cmd:map(playerid)
{
	if(!CheckAdm(playerid, 7))
		return false;
	
	return SPD(playerid, 7787, DIALOG_STYLE_LIST, !"Admin Mapping", "\
	- создать объект\n\
	- группы\n\
	- выбрать объект курсором\n\
	- список моих объектов\n\
	- список всех объектов\n\
	- удаление\n\
	{F4D048}Help: /map, /mapg, /mapobj", !"Выбрать", !"Закрыть");
}

cmd:removetune(playerid, params[])
{
	if(!CheckAdm(playerid, 3)) return false;
	extract params -> new vehicle; else
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Используй: /removetune [ид транспорта]");
	
	if(!IsAOwnableCar(vehicle)) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Удалить тюнинг можно только с личного транспорта игрока.");

	new car = GetVehicleID(vehicle);
	for(new i; i < 10; i++)
		InstallTun(vehicle, i, 1), CarInfo[car][TuningComp][i] = CarInfo[car][cInvCell][i] = 0;
	
	SCMF(playerid, COLOR_GREEN, "Вы успешно очистили весь тюнинг у транспорта ID: %d (владелец %s)!", vehicle, CarInfo[car][cOwner]);
	f(global_str, 150, "[%s] очистил весь тюнинг у транспорта ID: %d (владелец %s)", PN(playerid), vehicle, CarInfo[car][cOwner]);
	SendAdminsMessage(COLOR_GREY, global_str);
	SaveInvCar(vehicle);
	//
	f(global_str, 350, "Администратор <a href=../pages/user?name=%s>%s</a> очистил тюнинг автомобиля <a href=../pages/carlog.php?id=%d>№%d</a>",
	PN(playerid), PN(playerid), CarInfo[car][cID], CarInfo[car][cID]);
	aml(global_str, 5, "","");
	//
	return false;
}

cmd:cheatban(playerid, params[])
{
	if(!CheckAdm(playerid, 7)) return false;
    pAntiCheatSettingsPage{playerid} = 1; // Присваиваем переменной, хранящей номер страницы, на который находится игрок, значение 1 (т.е, теперь игрок на 1-ой странице)
    return ShowPlayer_AntiCheatSettings(playerid); // Показываем игрок главный диалог настроек анти-чита
}

stock ShowPlayer_AntiCheatSettings(playerid)
{
    static
        dialog_string[42 + 19 - 8 + (AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH + AC_MAX_TRIGGER_TYPE_NAME_LENGTH + 10)*AC_MAX_TRIGGERS_ON_PAGE] = EOS;

    new
        triggeredCount = 0,
        page = pAntiCheatSettingsPage{playerid},
        next = 0,
        index = 0;

    dialog_string = "Название\tНаказание\tКол-во срабатываний\n";

    for(new i = 0; i < AC_MAX_TRIGGERS; i++)
    {
        if(i >= (page * AC_MAX_TRIGGERS_ON_PAGE) && i < (page * AC_MAX_TRIGGERS_ON_PAGE) + AC_MAX_TRIGGERS_ON_PAGE)
            next++;

        if(i >= (page - 1) * AC_MAX_TRIGGERS_ON_PAGE && i < ((page - 1) * AC_MAX_TRIGGERS_ON_PAGE) + AC_MAX_TRIGGERS_ON_PAGE)
        {
            triggeredCount = AC_CODE_TRIGGERED_COUNT[i];

            f(dialog_string, sizeof(dialog_string), "%s[%s] %s\t%s\t%d\n",
                dialog_string,
                AC_CODE[i],
                AC_CODE_NAME[i],
                AC_TRIGGER_TYPE_NAME[AC_CODE_TRIGGER_TYPE[i]],
                triggeredCount);

            pAntiCheatSettingsMenuListData[playerid][index++] = i;
        }
    }

    if(next)
        strcat(dialog_string, ""AC_DIALOG_NEXT_PAGE_TEXT"\n");

    if(page > 1)
        strcat(dialog_string, AC_DIALOG_PREVIOUS_PAGE_TEXT);

    return SPD(playerid, DIALOG_ANTICHEAT_SETTINGS, DIALOG_STYLE_TABLIST_HEADERS, !"Настройки анти-чита", dialog_string, !"Выбрать", !"Отмена");
}

// Функция показа меню редактирования типа срабатывания определённого кода в анти-чите
stock ShowPlayer_AntiCheatEditCode(playerid, code)
{
    static dialog_header[22 - 4 + AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH],
        dialog_string[AC_MAX_TRIGGER_TYPE_NAME_LENGTH*AC_MAX_TRIGGER_TYPES];
    
    dialog_string = "";

    f(dialog_header, sizeof(dialog_header), "Код: %s | Название: %s", AC_CODE[code], AC_CODE_NAME[code]);

    for(new i = 0; i < AC_MAX_TRIGGER_TYPES; i++)
    {
        strcat(dialog_string, AC_TRIGGER_TYPE_NAME[i]);

        if(i + 1 != AC_MAX_TRIGGER_TYPES)
            strcat(dialog_string, "\n");
    }

    return SPD(playerid, DIALOG_ANTICHEAT_EDIT_CODE, DIALOG_STYLE_LIST, dialog_header, dialog_string, !"Выбрать", !"Назад");
}

cmd:sms(playerid)
{
    if(!PI[playerid][pPhoneInfo][0])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет SIM-карты!");

	static const fmt_str[] = "SELECT t.`Name`, t.`Namez`, t.`Text`, t.`read`, t.`time` FROM `phonemes` AS t JOIN (SELECT `Name`, `Text`, max(`time`) as `mtime` FROM `phonemes` WHERE `Namez` = '%s' GROUP BY `Name`) as t1 ON t.`Name` = t1.`Name` AND t.`time` = t1.`mtime` ORDER BY t.`time` DESC;";
	f(global_str, 512, fmt_str, PN(playerid));
	mysql_tquery(mysql, global_str, "ShowPlayerMessages", "d", playerid);

	return 1;
}

cmd:orgmembers(playerid) 
{
	if(!CheckAdm(playerid, 1)) return 0;

	static online[32];
	foreach(new i: Player)
	{
	    switch(PI[i][pMember][0])
	    {
			case 1: online[PI[i][pMember][0]] ++;
			case 2: online[PI[i][pMember][0]] ++;
			case 3: online[PI[i][pMember][0]] ++;
			case 4: online[PI[i][pMember][0]] ++;
			case 5: online[PI[i][pMember][0]] ++;
			case 6: online[PI[i][pMember][0]] ++;
			case 7: online[PI[i][pMember][0]] ++;
			case 8: online[PI[i][pMember][0]] ++;
			case 9: online[PI[i][pMember][0]] ++;
			case 10: online[PI[i][pMember][0]] ++;
			case 11: online[PI[i][pMember][0]] ++;
			case 12: online[PI[i][pMember][0]] ++;
			case 13: online[PI[i][pMember][0]] ++;
			case 14: online[PI[i][pMember][0]] ++;
			case 15: online[PI[i][pMember][0]] ++;
			case 16: online[PI[i][pMember][0]] ++;
			case 17: online[PI[i][pMember][0]] ++;
			case 18: online[PI[i][pMember][0]] ++;
			case 19: online[PI[i][pMember][0]] ++;
			case 20: online[PI[i][pMember][0]] ++;
			case 21: online[PI[i][pMember][0]] ++;
			case 22: online[PI[i][pMember][0]] ++;
			case 23: online[PI[i][pMember][0]] ++;
			case 24: online[PI[i][pMember][0]] ++;
			case 25: online[PI[i][pMember][0]] ++;
			case 26: online[PI[i][pMember][0]] ++;
			case 27: online[PI[i][pMember][0]] ++;
			case 28: online[PI[i][pMember][0]] ++;
			case 29: online[PI[i][pMember][0]] ++;
			case 30: online[PI[i][pMember][0]] ++;
			case 31: online[PI[i][pMember][0]] ++;
		}
	}
	global_str = "Организация\tОнлайн\n";
	for(new i = 1; i < MAX_ORGS; i++)
	{
		f(global_str, 1400, "%s{FFFFFF}%s\t{9ACD32}%d чел.\n",global_str,OrgInfo[i][oName], online[i]);
	}
	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Закрыть", !"");
}

/*
cmd:namestore(playerid, params[])
{
	if(sscanf(params, "s[24]", params[0]))
		return SCM(playerid, -1, !"/namestore [ Ник/ID ]");

	new
		oldname[MAX_PLAYER_NAME],
		data[16];

	if(strlen(params[0]) <= 3 && IsNums(params[0])) {
		new
			player_id = strval(params[0]);

		if(!IsPlayerConnected(player_id))
			return SCM(playerid, -1, !"/namestore [ Ник/ID ]");

		f(global_str, 150, "SELECT * FROM `nickname_history` WHERE `nh_owner` = '%d'", PI[player_id][pID]);
		new
			Cache:result = mysql_query(mysql, global_str),
			rows,
			fields;

		cache_get_data(rows,fields);

		if(!cache_num_rows())
		{
			f(global_str, 25, "%s", PN(player_id));
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, global_str, !"Этот игрок не менял ник", !"OK", !"");
			SCM(playerid, -1, !"Этот игрок не менял ник");
		    cache_delete(result);
		}
		else
		{

			global_str = "История ников:";
			for(new ns = 0 ; ns < rows ; ns ++ )
			{
				cache_get_row(ns, 1, oldname, mysql, MAX_PLAYER_NAME);
				cache_get_row(ns, 2, data, mysql, 16);
				if(strlen(oldname) || strlen(data))
					f(global_str, 500, "%s\n{FFFF00}%s\t{FFFFFF}%s",global_str, oldname, data);
			}

			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, PN(playerid), global_str, !"OK", !"");
		    cache_delete(result);
		}
	}
	else
	{
	    f(global_str, 150, "SELECT `ID` FROM `accounts` WHERE `NickName` = '%s'", params[0]);

		new Cache:result = mysql_query(mysql, global_str);
		if(cache_num_rows())
		{
			new
				id = cache_get_row_int(0, 0, mysql);

		    f(global_str, 150, "SELECT * FROM `nickname_history` WHERE `nh_owner` = '%d'", id);

			new
				Cache:r_get_nick = mysql_query(mysql, global_str),
				rows,
				fields;

			cache_get_data(rows,fields);

			if(!cache_num_rows())
			{
				f(global_str, 25, params[0]);
				SPD(playerid, 1488, DIALOG_STYLE_MSGBOX, global_str, !"Этот игрок не менял ник", !"OK", !"");
				SCM(playerid, -1, !"Этот игрок не менял ник");
			    cache_delete(r_get_nick, mysql);
			}
			else
			{
				global_str = "История ников:";
				for(new ns = 0 ; ns < rows ; ns ++ )
				{
					cache_get_row(ns, 1, oldname, mysql, MAX_PLAYER_NAME);
					cache_get_row(ns, 2, data, mysql, 16);
					if(strlen(oldname) || strlen(data))
						f(global_str, 500, "%s\n{FFFF00}%s\t{FFFFFF}%s",global_str, oldname, data);
				}

				SPD(playerid, 1488, DIALOG_STYLE_MSGBOX, params[0], global_str, !"OK", !"");
			    cache_delete(r_get_nick, mysql);
			}
		}
		else SCM(playerid, COLOR_GREY, !"Неверный никнейм");

		cache_delete(result);
	}
	return 1;
}
*/

cmd:buybiz(playerid)
{
    if(Int_GetPlayerData(playerid, "BuyData") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
	else if(!IsValidPassport(playerid)) return SCM(playerid, COLOR_GREY , !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");

	else if(PI[playerid][pLevel] < 3) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Участвовать в ловле имущества можно с 3 уровня!");

	for(new i; i < OWNABLEBIZES; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[i][bEnter][0],BizData[i][bEnter][1],BizData[i][bEnter][2]))
    	{
        	if(GetPlayerBizes(playerid))
        	{
		        if(GetString(BizData[i][bOwner], "The State"))
	     	    {
	     	        new money;
			 		switch BizData[i][bCostType] do
			 		{
			 			case 1: money = PI[playerid][pVirMoney];
			 			default: money = PI[playerid][pMoney];
			 		}
					if(money >= BizData[i][bCost]) InfoBiz[playerid] = i, function_InteractionProperty(playerid, 1);
		     	    else SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
     	        	break;
     	        }
     	        else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот бизнес уже кем то куплен");
 	        }
			else SCM(playerid,COLOR_GREEN, !">>>>{FFFFFF} - Вы не можете приобрести больше бизнесов! Покупайте улучшение 'Бизнесмен' чтобы иметь до 5-ти бизнесов!");
 	    }
    }
	return Int_SetPlayerData(playerid, "BuyData", Global_Time + 3);
}

stock GetMaxAmountAHelp(level)
{
	new count;

	for(new i; i < sizeof(AdminCommandList); i++) {

		if(!(AdminCommandList[i][adminLevel] == level)) 
			continue;
	
		count ++;
	}

	return floatround(float(count) / 35, floatround_ceil);
}

stock print_AdminCommand(playerid, level, page = 0)
{
	spdList(playerid, 1, page);

	global_str = "{FFFFFF}";

	new count;

	for(new i; i < sizeof(AdminCommandList); i++) {

		if(!(AdminCommandList[i][adminLevel] == level)) 
			continue;
		
		count ++;

		if(35 * page < count <= 35 * (page + 1))
			strcat(global_str, (str_f("%d. %s — %s\n", count, AdminCommandList[i][adminCommand], AdminCommandList[i][adminCommandInfo])));
	}

	return SPD(playerid, 25022, DIALOG_STYLE_MSGBOX, (str_f("{FFFFFF}Администратор %d уровня [%d/%d]", level, page + 1, GetMaxAmountAHelp(level))), global_str, !"Далее", !"Назад");
}

cmd:ahelp(playerid)
{
	if(!CheckAdm(playerid, 1)) 
		return false;

	global_str = "";

	for(new i = 1; i < 9; i++)
		strcat(global_str, (str_f("\n{B03131}[%d]{%s} %d уровень", i, PI[playerid][pAdmin] >= i ? "FFFFFF":"AFAFAF", i)));
    
	return SPD(playerid, 25021, DIALOG_STYLE_LIST, !"{FFFFFF}Команды администратора", global_str, !"Выбрать", !"Отмена");
}

cmd:sethousegarage(playerid, params[])
{
    if(!CheckAdm(playerid, 7)) return false;
	
	extract params -> new house_id, house_garage_status; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /sethousegarage [house id] [0/1]");

	if(!(0 <= house_garage_status <= 1))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /sethousegarage [house id] [0/1]");

	if(house_garage_status == HouseInfo[house_id][hGarage])
		return SCM(playerid, COLOR_RED, (HouseInfo[house_id][hGarage]) ? ("[Ошибка] {FFFFFF}Дом уже с гаражом") : ("[Ошибка] {FFFFFF}Дом и так без гаража"));

	if(house_id > OWNABLEHOUSES)
	    return 1;

	new
		Float:X,
		Float:Y,
		Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	HouseInfo[house_id][hGarage] = house_garage_status;
	if(house_garage_status)
	{
		HouseInfo[house_id][hGarage_X] = X;
		HouseInfo[house_id][hGarage_Y] = Y;
		HouseInfo[house_id][hGarage_Z] = Z;
	}
	UpdateHouse(house_id);
	UpdateHouseGarage(house_id);
	SCM(playerid, COLOR_RED, (HouseInfo[house_id][hGarage]) ? ("Вы добавили гараж к указанному вами дому") : ("Вы убрали гараж у указанного вами дома"));
	return 1;
}

stock CreateBiz(i)
{
	if(BizData[i][bEnter][0] == 0.0 && BizData[i][bEnter][1] == 0.0 && BizData[i][bEnter][2] == 0.0)
		return false;

	switch GetBizData(i, bState) do
	{
		case 13: CreateShopEat(i);
		default:
		{
			if(!IsNoEnterBiz(i))
				CreateDynamic3DTextLabel(!"[ Выход ]\nНажмите ALT", 0xAFAFAFFF, BizData[i][bExit][0], BizData[i][bExit][1], BizData[i][bExit][2], 20.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, i + 100, BizData[i][bInt]),
				CreateDynamicPickup(19132, 1, BizData[i][bExit][0], BizData[i][bExit][1], BizData[i][bExit][2], i + 100, BizData[i][bInt]),
				SetBizData(i, B_AREA_EXIT, CreateDynamicSphere(BizData[i][bExit][0], BizData[i][bExit][1], BizData[i][bExit][2], 2.0, i + 100, BizData[i][bInt])),
				SetBizData(i, B_PICKUP_ID, CreateDynamicPickup(BizData[i][bPickup] ? 1239:19132, 23, BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], 0, 0));
			else
				SetBizData(i, B_PICKUP_ID, CreateDynamicPickup(1317, 1, BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2] - 1.2, 0, 0));
			
		    SetBizData(i, B_AREA_ID, CreateDynamicSphere(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], 2.0, 0, 0));
			SetBizData(i, B_TEXT_ID, CreateDynamic3DTextLabel(" Бизнес ",0x4CD10FF,BizData[i][bEnter][0], BizData[i][bEnter][1],BizData[i][bEnter][2],20.0));
		}
	}
	return UpdateBusinessText(i);
}

stock CreateHouse(i)
{
	if(!IsValidHouse(i)) return false;
    
	HouseIcon[i] = CreateDynamicMapIcon(HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z], 31, 0, 500);
   	
	if(HouseInfo[i][hType] != 2) House3DText[i] = CreateDynamic3DTextLabel(" Дом ", 0xE1AE3CFF, HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z], 25.0);
   	else House3DText[i] = CreateDynamic3DTextLabel(" Дом ", 0xE1AE3CFF, HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z], 5.0);
	
	return UpdateHouseGarage(i), UpdateHouse(i);
}

cmd:changehouse(playerid, params[])
{
 	if(!IsOsnovatel(playerid))
	    return false;

    extract params -> new houseid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /changehouse [id]");

    if(houseid > OWNABLEHOUSES)
		return 1;

	GetPlayerPos(playerid, HouseInfo[houseid][hEnter_X], HouseInfo[houseid][hEnter_Y], HouseInfo[houseid][hEnter_Z]);

	DestroyDynamic3DTextLabel(House3DText[houseid]);
   	House3DText[houseid] = CreateDynamic3DTextLabel(" Дом ", 0xE1AE3CFF, HouseInfo[houseid][hEnter_X], HouseInfo[houseid][hEnter_Y], HouseInfo[houseid][hEnter_Z], 10.0);

	UpdateHouse(houseid);

    return SCM(playerid, COLOR_OLDRED, !"house suc transportation to you mark point");
}

cmd:changebiz(playerid, params[])
{
 	if(!IsOsnovatel(playerid))
	    return false;

    extract params -> new bizid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /changebiz [id]");

    if(bizid > OWNABLEBIZES)
		return 1;

	GetPlayerPos(playerid, BizData[bizid][bEnter][0], BizData[bizid][bEnter][1], BizData[bizid][bEnter][2]);

	DestroyDynamicPickup(GetBizData(bizid, B_PICKUP_ID));
	DestroyDynamicArea(GetBizData(bizid, B_AREA_ID));
	DestroyDynamic3DTextLabel(GetBizData(bizid, B_TEXT_ID));

	SetBizData(bizid, B_PICKUP_ID, CreateDynamicPickup(BizData[bizid][bPickup] ? 1239:19132, 23, BizData[bizid][bEnter][0], BizData[bizid][bEnter][1], BizData[bizid][bEnter][2], 0, 0));
	SetBizData(bizid, B_AREA_ID, CreateDynamicSphere(BizData[bizid][bEnter][0], BizData[bizid][bEnter][1], BizData[bizid][bEnter][2], 2.0, 0, 0));
	SetBizData(bizid, B_TEXT_ID, CreateDynamic3DTextLabel(" Бизнес ", 0x4CD10FF, BizData[bizid][bEnter][0], BizData[bizid][bEnter][1], BizData[bizid][bEnter][2], 20.0));

	UpdateBusinessText(bizid, 1);

    return SCM(playerid, COLOR_OLDRED, !"business suc transportation to you mark point");
}

cmd:addhousemenu(playerid)
{
	if(!IsOsnovatel(playerid)) return false;

	static const
		garage_Named[][] = {"Без гаража", "2(wplace) на 1 м/с", "3(prooms) на 3 м/с", "4(proomo) на 5 м/с", "5(reenok) на 2 м/с", "6(sreet) на 4 м/с"};

	global_str = "\
		{ae433d}[1]{FFFFFF} Установить точку двери\t{CCCCCC}[%.2f %.2f %.2f]\n\
		{ae433d}[2]{FFFFFF} Стоимость дома\t{42B02C}[$%d]\n\
		{ae433d}[3]{FFFFFF} Выбрать класс дома\t{CCCCCC}[%d]\n\
		{ae433d}[4]{FFFFFF} Выбрать тип гаража\t{CCCCCC}[%s]\n\
		{ae433d}[5]{FFFFFF} Установить точку выезда из гаража\t{CCCCCC}[%.2f %.2f %.2f]\n\
		>> {CCCCCC}Сбросить заполненные данные\n\
		{73B461}>> Создать дом\n";

	f(global_str, sizeof(global_str), global_str, AddHouseMenu_data[data_HousePos][0], AddHouseMenu_data[data_HousePos][1], AddHouseMenu_data[data_HousePos][2], AddHouseMenu_data[data_Price], AddHouseMenu_data[data_HouseType] + 1, garage_Named[ AddHouseMenu_data[data_GarageType] ], AddHouseMenu_data[data_GaragePos][0], AddHouseMenu_data[data_GaragePos][1], AddHouseMenu_data[data_GaragePos][2]);
	
    return spdList(playerid, 0, 0), SPD(playerid, 8019, DIALOG_STYLE_TABLIST, !"Создания дома", global_str, !"Выбрать", !"Отмена");
}

cmd:satiety(playerid, param[])
{
    switch(Fullness[playerid])
	{
	    case 0..10: global_str = "{E12525}очень голодны{A6A9A7}";
	    case 11..50: global_str = "{F99C32}голодны{A6A9A7}";
	    case 51..70: global_str = "{6ED947}немного проголодались{A6A9A7}";
	    case 71..150: global_str = "{54C977}сыты{A6A9A7}";
	}
	f(global_str,250,"{A6A9A7}На данный момент вы %s.\nВаша сытость: {FFFFFF}%d/100.{A6A9A7}\n\n\nПополнить сытость можно в любой закусочной штата.",global_str,Fullness[playerid]);
	SPD(playerid,0,0,!"",global_str, !"Закрыть","");
	return 1;
}

cmd:ffarm(playerid, param[])
{
	switch(PI[playerid][pContractTime])
	{
	    case 0..499: global_str = "начинаюшим фермером\n\n{928C85}Для работы трактористом необходимо: 500 очк. фермера\nДля работы комбайнером необходимо: 3200 очк. фермера\nДля работы на кукурузнике необходимо: 7000 очк. фермера.";
        case 500..3199: global_str = "трактористом\n\n{36972E}Для работы трактористом необходимо: 500 очк. фермера - [ Открыто ]\n{928C85}Для работы комбайнером необходимо: 3200 очк. фермера\nДля работы на кукурузнике необходимо: 7000 очк. фермера.";
		case 3200..6999: global_str = "комбайнером\n\n{36972E}Для работы трактористом необходимо: 500 очк. фермера - [ Открыто ]\nДля работы комбайнером необходимо: 3200 очк. фермера - [ Открыто ]\n{928C85}Для работы на кукурузнике необходимо: 7000 очк. фермера.";
		default: global_str = "водителем кукурузника\n\n{36972E}Для работы трактористом необходимо: 500 очк. фермера - [ Открыто ]\nДля работы комбайнером необходимо: 3200 очк. фермера - [ Открыто ]\nДля работы на кукурузнике необходимо: 7000 очк. фермера. - [ Открыто ]";
	}
	f(global_str,400,"{D38A37}Навык фермера: %d очк.{FFFFFF}\nНа данный момент вы можете работать:{D38A37} %s\n\n{D38A37}- Хорошей работы.",PI[playerid][pContractTime],global_str);
	SPD(playerid,0,0,!"",global_str, !"Закрыть","");
	return 1;
}

cmd:carm(playerid, params[])
{
	if(!IsAArmy(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не состоите в военных войсках!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_VALIK, !"Вы не на дежурстве");
    if(GetVehicleModelEx(GetPlayerVehicleID(playerid))==433)
    {
    	f(global_str,500,"Загрузиться\nРазгрузить на склад ЛСПД [%d/30к.] bank: {73B461}%d${FFFFFF}\nРазгрузить на склад Областной полиции [%d/30к.] bank: {73B461}%d${FFFFFF}\nРазгрузка в FBI [%d/30к.] bank: {73B461}%d${FFFFFF}\nРазгрузка SFPD [%d/30к.] bank: {73B461}%d$\nРазгрузка Полиция LV [%d/30к.] bank: {73B461}%d$",OrgInfo[TEAM_LSPD][oMats],OrgInfo[TEAM_LSPD][oBank],OrgInfo[TEAM_RCPD][oMats],OrgInfo[TEAM_RCPD][oBank],OrgInfo[TEAM_FBI][oMats],OrgInfo[TEAM_FBI][oBank],
		OrgInfo[TEAM_SFPD][oMats],OrgInfo[TEAM_SFPD][oBank],OrgInfo[TEAM_LVPD][oMats],OrgInfo[TEAM_LVPD][oBank]);
    	SPD(playerid,9653,2,"",global_str, !"Принять", !"Закрыть");
	}
	else if(GetVehicleModelEx(GetPlayerVehicleID(playerid))==548) SPD(playerid,9663,2,"","Загрузить вертолет [ с завода ]\nРазгрузить в Армии LS\nРазгрузить в Армии LV\nРазгрузить в Армии SF", !"Принять", !"Закрыть");
	return 1;
}
cmd:strafs(playerid, params[])
{
	if(!IsACop(playerid)) return  SCM(playerid,COLOR_RED,!"Вы не полицейский!");
    if(PI[playerid][pRank] < 4) return SCM(playerid,COLOR_RED,!"Эта возможность доступна с 4 ранга");
    if(GetPlayerState(playerid)!=2)return SCM(playerid,COLOR_RED,!"Вы должны находится за рулем!");
   	if(GetVehicleModelEx(GetPlayerVehicleID(playerid)) != 525) return SCM(playerid,COLOR_RED,!"Вы должны находится в евакуаторе!");
	SPD(playerid,193,1,"Введите сумму","Введите сумму залога\n\n{9ACD32}- Не менее $800 и не более $10000","Ок", !"Отмена");
	return 1;
}
cmd:clearhouseitem(playerid, params[])
{
	if(!IsOsnovatel(playerid)) return false;
	new id;
	if(sscanf(params, "d", id)) return false; //hItem
	//
	if(id > OWNABLEHOUSES) return false;
	//
	for(new i; i < 90; i++)
		HouseInfo[id][hItem][i] = 0,
		HouseInfo[id][hItemCount][i] = 0;

	//
	SCMF(playerid, COLOR_VALIK, "Дом %d был послан нахуй", id);
	SaveItemHouse(id);
	return false;
}

cmd:tp(playerid, params[])
{
	if(!CheckAdm(playerid, 1)) return 0;

	new meber;
    if(sscanf(params, "d", meber))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /tp [id фракции]");

    if(meber > 27 || meber < 1)
    	return SCM(playerid, COLOR_GREY, !"OT 1 DO 28");

    SetPlayerVirtualWorld(playerid, SpawnIntWorld[meber][1]), SetPlayerInterior(playerid, SpawnIntWorld[meber][0]);
	return UpdatePlayerPos(playerid, SpawnInfo[meber][0], SpawnInfo[meber][1], SpawnInfo[meber][2], SpawnInfo[meber][3]);
}

cmd:tpcor(playerid, data[])
{
	if(PI[playerid][pAdmin] < 5)
		return false;

	extract data -> new Float:x, Float:y, Float:z; else 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Используйте: /tpcor [x] [y] [z]");
	
	return UpdatePlayerPos(playerid, x, y, z);
}

cmd:beg(playerid)
{
    if(PI[playerid][pLevel] > 4)
		return false;
		
    if(!PI[playerid][pBeg][1])
    {
        if(IsPlayerInRangeOfPoint(playerid, 50.0, 1755.4108, -1893.7559, 13.5567)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}На территории спавна, нельзя просить деньги!");
        if(IsPlayerInAnyVehicle(playerid)) return 1;

        if(PI[playerid][pBeg][0] > Global_Time) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Попрошайничать можно раз в 10 секунд!");

        new
            Float:pos_x,
            Float:pos_y,
            Float:pos_z,
            Float:angle;

        GetPlayerPos(playerid, pos_x, pos_y, pos_z);
        GetXYInFrontOfPlayer(playerid, pos_x, pos_y, 1.0);
        GetPlayerFacingAngle(playerid, angle);

        PI[playerid][pBeg][2] = CreateDynamicObject(2599, pos_x, pos_y, pos_z - 0.6, 0.0, 0.0, angle, -1, -1, -1, 300.0, 300.0);
		SetDynamicObjectMaterial(PI[playerid][pBeg][2], 1, 1413, !"break_f_mesh", !"CJ_CORRIGATED", 0);
		SetDynamicObjectMaterialText(PI[playerid][pBeg][2], 0, !"Подайте\nбомжу на\nлечение", 140, !"Ariel", 75, 1, -1, 0, 1);

        Streamer_Update(playerid);

        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Псс Инфа!","  \n \n{FFFFFF}Вы начали попрошайничать деньги. Каждые 40 секунд вы будете получать по 10$.\
		\nА если вы будете под руководством мафии, то сможете получать до 15$ в 40 секунд!\
		\nДля того чтобы подключится к бизнесу мафии, достаточно найти одного их представителя\
		\n \n{e8793e}Попрошайничать вы можете даже в афк, это даст вам возможность заработать деньги,\
		\nпока вы занимаетесь делами в реальной жизни. Попрошайничать можно до 24 часов афк!\n", !"Понял", !"");

        PI[playerid][pBeg][0] = 10 + Global_Time;
        PI[playerid][pBeg][1] = 1;
        PI[playerid][pBeg][4] = 0;

        TogglePlayerControllable(playerid, 0);
        ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_W_loop", 4.1, 0, 1, 1, 1, 1);

        GameTextForPlayer(playerid, !"successfull", 5000, 1);
        return SCM(playerid, -1, !">> {FAAC58}Используйте {FFFFFF}/beg{FAAC58}, чтобы закончить попрошайничать!");
    }

    TogglePlayerControllable(playerid, 1);

    DestroyDynamicObject(PI[playerid][pBeg][2]);
    PI[playerid][pBeg][1] = 0;
    ApplyAnimationEx(playerid, !"CARRY", !"crry_prtial", 4.0, 0, 0, 0, 0, 0);

    return SCM(playerid, -1, !">> {73B461}Вы забрали табличку и перестали {FFFFFF}попрошайничать.");
}

cmd:minvite(playerid, params[])
{
    if(!IsAtMafia(playerid)){
        return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не состоите в мафии!");
    }
    if(isnull(params))
    {
        SCM(playerid, -1, !"Используйте команду: /minvite [id игрока]");
        return 1;
    }

    new
        targetid = strval(params);

    if(!IsPlayerConnected(targetid) || playerid == targetid)
    {
        SCM(playerid, -1, !"Данный игрок не подключён");
        return 1;
    }
    if(PI[playerid][pLevel] > 4)
    {
        SCM(playerid, -1, !"Данный игрок не подключён");
        return 1;
    }
    GetPlayerName(targetid, global_str, 25);
    strcat(global_str, " теперь попрошайничает под Вашим покровительством.");
    SCM(playerid, -1, global_str);

    global_str[0] = EOS;
    GetPlayerName(playerid, global_str, 25);
    strcat(global_str, " взял Вас под покровительство мафии.");
    return SCM(targetid, -1, global_str);
}
cmd:amember(playerid, data[])
{
	if(!CheckAdm(playerid, 4)) return false;
	
	extract data -> new orgid, rang; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /amember [id] [rang]");

    if(!(1 <= orgid < MAX_ORGS)) 
		return SCMF(playerid, COLOR_GREY, !"OT 1 DO %i", MAX_ORGS);
	
	else if(!(1 <= rang <= OrgInfo[orgid][Max_Rang]-1))
		return false;

	PI[playerid][pMember][0] = orgid;
	PI[playerid][pRank] = rang;
	TeamDuty{playerid} = true;
	SetPlayerColor(playerid, TeamColors[orgid][0]);
	SetPlayerSkinEx(playerid, GetSkinOfPlayer(playerid));
	f(global_str, 125, "Админ %s(%d) вступил в организацию %s на %d ранг", PN(playerid), playerid, OrgInfo[orgid][oName], rang);
	return SendAdminsMessage(COLOR_GREY, global_str);
}

cmd:asellbiz(playerid, params[])
{
    extract params -> new bizid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /asellbiz [bizid]");

	if(bizid > OWNABLEBIZES)
	    return false;
	
	amlf("Администратор <a href=../pages/user?id=%d>%s</a> продал бизнес %d [%s]!", 5, "", "", PI[playerid][pID], PN(playerid), bizid, BizData[bizid][bOwner]);
	
    SetString(BizData[bizid][bOwner], "The State");
	BizData[bizid][bMoney] = 0;
	BizData[bizid][bLevel] = 0;
	UpdateBusinessText(bizid, 1);
   	
	SCM(playerid, COLOR_LIGHTBLUE, !"Вы продали бизнес");
    f(global_str, 150, "Администратор %s продал бизнес %d!", PN(playerid), bizid);
    SendAdminsMessage(COLOR_GREY, global_str);
	
	
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:deletefamily(playerid, params[])
{
    if(!CheckAdm(playerid, 8)) return false;
	
    if(sscanf(params, "s[30]", params[0]))
        return SCM(playerid, COLOR_OLDRED, !"Используй: /deletefamily [name]");
	
	if(strlen(params[0]) > 30) return false;
	
    f(global_str, 80, "SELECT id FROM family WHERE name = '%s' LIMIT 1", params[0]);
    mysql_tquery(mysql, global_str, "DeleteFamily", "d", playerid);
    return 1;
}

cmd:asellhouse(playerid, params[])
{
    extract params -> new houseid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /asellhouse [houseid]");

	if(houseid > OWNABLEHOUSES)
	    return 0;

    foreach(new i: Player)
	{
	    if(PI[i][pHouseKey] == houseid) {
			PI[i][pHouseKey] = -1;
			PI[i][pDCTime] = 0;
		}
	}

	f(global_str, 256, "UPDATE `accounts` SET `HouseKey` = '-1', `DropCarTime` = '0' WHERE `NickName` = '%s';", HouseInfo[houseid][hOwner]);
	mysql_tquery(mysql, global_str);
	
	amlf("Администратор <a href=../pages/user?id=%d>%s</a> продал дом %d [ %s ]!", 5, "","", PI[playerid][pID], PN(playerid), houseid, HouseInfo[houseid][hOwner]);
	
    SetString(HouseInfo[houseid][hOwner], "The State");
	HouseInfo[houseid][hMoney] = 0;
	HouseInfo[houseid][hNalog] = 0;
	UpdateHouse(houseid);
   	
	SCM(playerid, COLOR_LIGHTBLUE, !"Вы продали дом");
    f(global_str, 150, "Администратор %s продал дом %d!", PN(playerid), houseid);
    SendAdminsMessage(COLOR_GREY, global_str);
	
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:deletecar(playerid, params[])
{
	extract params -> new carid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /deletecar [carid]");

	if(GetVehicleID(carid) != -1 && IsAOwnableCar(GetVehicleID(carid)))
	{
		amlf("Администратор <a href=../pages/user?id=%d>%s</a> продал автомобиль <a href=../pages/carlog.php?id=%d>%d</a>. Бывший владелец: %s", 5, "","", PI[playerid][pID], PN(playerid), CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cID], CarInfo[GetVehicleID(carid)][cOwner]);
		
		f(global_str, 150, "Администратор %s продал кар %d!", PN(playerid), carid);
    	SendAdminsMessage(COLOR_GREY, global_str);
		SellCar(carid, true);
	}
	else DestroyVehicleEx(carid);

	SCM(playerid, COLOR_LIGHTBLUE, !"Успешное удаление транспортного средства!");
	
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:passwd(playerid, params[])
{
	if(sscanf(params, "s[50]s[50]s[50]", SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1], SQL_GET_ROW_STR[2]))
		return SCM(playerid,COLOR_LIGHTBLUE,"/passwd [oldpass] [newpass] [newpass2]");
 	
	else if(Int_GetPlayerData(playerid, "changepasswordR") > Global_Time)
		return SCM(playerid, -1, "Пароли можно менять раз в 2 минуты!");
		
	Int_SetPlayerData(playerid, "changepasswordR", Global_Time + 120);
	
	f(global_str, 256, "SELECT `Password` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str); 
	cache_get_value_index(0, 0, SQL_GET_ROW_STR[3]); 
	cache_delete(result);
	
	if(strcmp(MD5_Hash(SQL_GET_ROW_STR[0]), SQL_GET_ROW_STR[3], true) !=0) 
		return SCM(playerid,COLOR_LIGHTBLUE,"Текущий пароль с введенным вами не совпадает!");
    
	else if(strcmp(SQL_GET_ROW_STR[1], SQL_GET_ROW_STR[2], true) !=0)
		return SCM(playerid,COLOR_LIGHTBLUE,"Новые пароли между собой не совпадают!");
    
	else if(strcmp("-", PlayerMail[playerid], true) !=0)
    {
        if(Int_GetPlayerData(playerid, "remail") > Global_Time) return SCM(playerid, -1, !"Повторно отправить письмо можно раз в 1 минуту.");
        new code = 1000 + random(9000);
        SPD(playerid,203,1,"","\n\n{FFFFFF}На ваш {ffd450}E-MAIL {FFFFFF}было отправлено\nписьмо с {ffd450}кодом{FFFFFF}, который необходимо\nввести в строку ниже.\n\n{ff5e50}Для того чтобы свернуть игру и\nзайти в браузер, используйте\nкомбинацию клавиш: ALT+TAB!\n\n","Отправить", !"Закрыть");
        SetPVarInt(playerid,"remail",Global_Time+60);
        f(global_str,256,"Код для смены пароля: %d",code);
        SendMail(PlayerMail[playerid], Setting_Server[1], "ARIZONA-RP подтверждение входа","Arizona Role Play Supreme", global_str);
        SetPVarInt(playerid, "authcode", code);
        SetPVarString(playerid, "rePassword", SQL_GET_ROW_STR[1]);//
        return 1;
    }
	
	SQL("UPDATE `accounts` SET `Password` = '%s' WHERE `ID` = '%d' LIMIT 1", MD5_Hash(SQL_GET_ROW_STR[1]), PI[playerid][pID]);
    
	SCM(playerid, COLOR_LIGHTBLUE, !"Пароль изменен!");

	return amlf("<a href=../pages/user?name=%d>%s</a> изменил пароль", 0, "", "", PI[playerid][pID], PN(playerid) );
}

cmd:mbiz(playerid)
{
	global_str = "";
    if(!IsAtMafia(playerid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в мафии");
    for(new i;i<OWNABLEBIZES;i++)
	{
 		if(BizData[i][bKrasher] != PI[playerid][pMember][0] || strcmp(BizData[i][bOwner],"The State",true) == 0 ) continue;
		f(global_str, 3000,"{FFFFFF}%s Бизнес:{42B02C} %s{FFFFFF}\t\t\tВладелец{42B02C} %s{FFFFFF}\n",global_str,BizData[i][bName],BizData[i][bOwner]);
	}
	if(strlen(global_str)) return SPD(playerid,0,0,"Бизнесы",global_str, !"Закрыть","");
	return SPD(playerid,0,0,"Информация","{FFFFFF}На данный момент под вашем контролем нет бизнесов!", !"Закрыть","");
}

cmd:bizwar(playerid)
{
    if(!IsAtMafia(playerid)) return SCM(playerid,COLOR_RED,!"Вы не в мафии");
    if(PI[playerid][pMember][1] == 0 && PI[playerid][pRank] < 9) return SCM(playerid,COLOR_RED,!"Доступно только лидеру и зместителю!");
    if(BizWarState > 0) return SCM(playerid,COLOR_RED,!"Вы не можете сейчас провести стрелу!");
	for(new i;i<OWNABLEBIZES;i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,10.0,BizData[i][bEnter][0],BizData[i][bEnter][1],BizData[i][bEnter][2])) continue;
	    if(GetString(BizData[i][bOwner],"The State")) return SCM(playerid,COLOR_GREY, !"Этим бизнесом никто не владеет!");
	    if(BizData[i][bKrasher] == PI[playerid][pMember][0]) return SCM(playerid,COLOR_GREY, !"Вы и так крешуете этот бизнес!");
	    if(RecoveryTime[PI[playerid][pMember][0]] > 0) return SCM(playerid,COLOR_GREY, !"Вы не восстановили еще силы после последнего захвата!");
	    if(BizData[i][bKrasher] == 0)
	    {
			BizData[i][bKrasher] = PI[playerid][pMember][0];
	        SCM(playerid,COLOR_VALIK, !"Теперь вы крышуете этот бизнес!");
	        UpdateBusinessText(i,1);
	        RecoveryTime[PI[playerid][pMember][0]] = 7200;
	    }
	    else
	    {
	        if(RecoveryTime[BizData[i][bKrasher]] > 0) return SCM(playerid,COLOR_GREY, !"Вражественная организация еще не восстановила силы!");
	        ClickBiz[playerid] = i;
	        SPD(playerid,9612,2,"Место проведения стрелы:","- Лесопилка\n- Заброшенный Аэродром\n- Ферма Fort Carson\n- Заброшенная деревня", !"Принять", !"Отмена");
			//SPD(playerid,591,0,"Информация","Вы хотите начать войну за этот бизнес?\nЕсли вы согласитесь вам придётся провести переговоры на лесопилке, взяв собой более 4 человек!\nПосле чего ждать 10 минут пока все соберутся и\nесли на точке соберутся по 4 человека с каждой мафии ,вы начнете войну!","Да","Нет");
	    }
	}
    return 1;
}

cmd:veh(playerid,params[])
{
	if(CountVehicles() == 1999) return SendErrorMessage(playerid);

    new Float:pX,Float:pY,Float:pZ;
 	if(sscanf(params, "ddd", params[0], params[1], params[2]))
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Используй: /veh [id машины] [цвет 1] [цвет 2]");

	//else if(!SearchVehicleMassiveID(params[0])) 
	//	return SCM(playerid, COLOR_VALIK, !"Неверный номер транспортного средства!");
    
	else if(params[0] == 538 || params[0] == 449 || params[0] == 570)
		return SCM(playerid, COLOR_OLDRED, "А хуй тебе..");
	
	if(VehID[playerid] > 0)
        DestroyVehicleIter(VehID[playerid]),
        	SCM(playerid, -1, !"[Информация] Предыдущая машина удалена т.к вы создали новую!"),
        		VehID[playerid] = 0;

    if(params[1] > 126 || params[1] < 0 || params[2] > 126 || params[2] < 0)
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}ID цвета от 0 до 126!");
    
	GetPlayerPos(playerid, pX,pY, pZ);

    VehID[playerid] = J_AddStaticVehicleEx(params[0],pX+2,pY,pZ,0.0,1,1);
    
	SCMF(playerid, COLOR_RED, "[Информация] {FFFFFF}Вы создали автомобиль №%d | CarID: %d.", params[0], VehID[playerid]);

    f(global_str, 144,"Администратор %s создал транспорт. ID: %d | [%d]",PN(playerid),params[0], VehID[playerid]);
    SendAdminsMessage(COLOR_GREY, global_str);
	return ChangeVehicleColor(VehID[playerid], params[1], params[2]);
}

cmd:delveh(playerid)
{
	if(VehID[playerid] > 0) 
    	DestroyVehicleIter(VehID[playerid]),
    		SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Машина удалена!"),
        		VehID[playerid] = 0;

    else SCM(playerid,COLOR_RED,"[Информация] {FFFFFF}Вы не создавали машину!");

    return true;
}

cmd:delvehall(playerid)
{
	new count;

	foreach(Player, i)
	{
	    if(!VehID[i]) continue;

	   	DestroyVehicleEx(VehID[i]), VehID[i] = 0, count ++;
	}

	f(global_str,100,"[A] %s удалил все админские авто %d", PN(playerid), count);
    return SendAdminsMessage(COLOR_GREEN, global_str);
}

cmd:enableworkshop(playerid)
{
	EnableWorkShop = !EnableWorkShop;

	SCMF(playerid, -1, "Вы %s систему мастерской одежды", !EnableWorkShop ? "выключили" : "включили");
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> %s систему мастерской одежды", 5, "","", PN(playerid), PN(playerid), !EnableWorkShop ? "выключил" : "включил");
}

cmd:plveh(playerid, params[])
{

    new
		id = playerid,
		veh = 462,
		TT;

    sscanf(params, "udd", id, veh, TT);
    
    if(!SearchVehicleMassiveID(veh)) return SCM(playerid, COLOR_VALIK, !"Неверный номер транспортного средства!");

   	if (veh == 538 || veh == 449 || veh == 570) return false;

	if(id == INVALID_PLAYER_ID)
	    return 0;

    if(GetPlayerState(id) != 1)
        return SCM(playerid, COLOR_GREY, !"Игрок за рулем!");

	if(CountVehicles() == 1999) return SendErrorMessage(playerid);
	SCM(playerid, -1, !"/plveh [id] [idcar] [TT 0/1]");
    new
		Float:X, Float:Y, Float:Z, Float:A;

	GetPlayerPos(id, X, Y, Z);
	GetPlayerFacingAngle(id, A);

	PLVEH_destroy(id);

	if(AnimPlayed{id}) return false;

    PI[id][plveh] = J_AddStaticVehicleEx(veh, X, Y, Z, A, random(127), random(127));
 	PutPlayerInVehicle(id, PI[id][plveh], 0);
 	
 	//if(TT)
 	//	OtherInstallTun(PI[id][plveh], 578),
 	//	VehicleInfo[PI[id][plveh]][vStyle] = true;

	f(global_str, 150, "[A] Администратор %s[%d] выдал временную машину игроку %s[%d] [%d]", PN(playerid), playerid, PN(id), id, PI[id][plveh]);
	SendAdminsMessage(COLOR_GREY, global_str);
    if(!IsAVelik(PI[id][plveh])) SetEngineStatus(PI[id][plveh], false, id);
	return 1;
}
cmd:wedding(playerid, params[])
{
	if(Merrit[0] != 0) return SCM(playerid, COLOR_RED, !"Свадьба уже проводится!");
    if(sscanf(params,"dd",params[0],params[1])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /wedding [id/Жениха] [id/Невесты]");
 	if(!IsAMeria(playerid))return SCM(playerid, COLOR_RED, !"Вы не сотрудник Мэрии");
	if(PI[playerid][pRank] < 8) return SCM(playerid, COLOR_RED, !"Провести помолвку может только человек имеющий должность 'Нач.юридического отдела' и выше");
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"Вы не возле места проведения помолвки");
	if(!IsPlayerInRangeOfPoint(params[0], 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"Жених не в церкови!");
	if(!IsPlayerInRangeOfPoint(params[1], 10.0, 2363.9543,-1958.5900,1601.0859 )) return SCM(playerid, COLOR_RED, !"Невеста не в церкови!");
	if(params[0] == playerid) return SCM(playerid, COLOR_RED, !"Вы не можете поженить человека на себе!");
	if(params[1] == playerid) return SCM(playerid, COLOR_RED, !"Вы не можете поженить человека на себе!");
	if(PI[params[0]][pSex] != 1) return SCM(playerid, COLOR_RED, !"Сначало укажите жениха , потом невесту");
	if(PI[params[1]][pSex] != 2) return SCM(playerid, COLOR_RED, !"Сначало укажите жениха , потом невесту");
	if(strcmp(PI[params[0]][pMerrit], "None") || strcmp(PI[params[1]][pMerrit], "None")) return SCM(playerid, COLOR_RED, !"Опачки а кто-то уже женат или замужем");
 	if(!Ring[params[0]]) return SCM(playerid, COLOR_RED, !"Похоже кто-то не купил кольца!");
	Merrit[0] = 1;
	Merrit[1] = playerid;
	Merrit[2] = params[0];
	Merrit[3] = params[1];
	f(global_str, 128, "%s: Жених %s готовы ли вы взять в жены %s?", PN(playerid), PN(params[0]), PN(params[1]));
	ProxDetector(25, playerid, global_str, COLOR_SCHAT, 1);
	SCM(params[0], COLOR_GREY, !"Для того чтобы сделать свой выбор напиши в игровой чат да/нет");
	return 1;
}
#include ../library/players
cmd:unwedding(playerid, params[])
{
	if(PI[playerid][pMoney] < 4000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF} У вас недостаточно денег!");
    if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2363.9543,-1958.5900,1601.0859)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Развестись можно только в церкови!");
	if(!strcmp(PI[playerid][pMerrit], "None")) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет супруги/супруга");
	foreach(new i: Player)
    {
        if(!strcmp(PN(playerid), PI[i][pMerrit], true) && IsPlayerConnected(i))
		{
			SCM(i, COLOR_RED, !"Ваш супруг/супруга покинула вас.");
			strmid(PI[i][pMerrit], "None", 0, MAX_PLAYER_NAME);
			strmid(PI[playerid][pMerrit], "None", 0, MAX_PLAYER_NAME);
			return 1;
		}
    }
	f(global_str, 256, "UPDATE `accounts` SET `Merrit` = 'None' WHERE `NickName` = '%s'", PI[playerid][pMerrit]);
	mysql_tquery(mysql, global_str);
	strmid(PI[playerid][pMerrit], "None", 0, MAX_PLAYER_NAME);
	return 1;
}
cmd:weather(playerid, params[])
{
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /weather [id]");
    new string[18 - 2 + MAX_PLAYER_NAME];
    f(string, sizeof(string), "%s сменил погоду.", PN(playerid));
	SendAdminsMessage(COLOR_GREY, string);
    Weather = params[0];
    SetWeather(Weather);
	return 1;
}

cmd:redice(playerid)
{
    if(KostiName[playerid] == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не предлагали никому игру!");

	Predlog[playerid] =
	Predlog[KostiName[playerid]] =
	KostiMoney[playerid] =
	KostiMoney[KostiName[playerid]] =
	ZapretDice[playerid] =
	ZapretDice[KostiName[playerid]] = 0;
	SCM(KostiName[playerid], COLOR_RED, !"[Информация] {FFFFFF}Игрок отказался от ставки!");
	SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы отказались играть!");
	KostiName[KostiName[playerid]] =
	KostiName[playerid] = INVALID_PLAYER_ID;
	return 1;
}

cmd:dice(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.4, 1982.7122, 1014.9030, 10.3906) && !IsPlayerInRangeOfPoint(playerid, 2.4, 1984.2723, 1013.2268, 11.0999))
		return SCM(playerid, COLOR_RED, !"Вы должны находиться у игрального стола!");

    if(KostiMoney[playerid] != 0 || ZapretDice[playerid] != 0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам уже предложили игру!");

    if(sscanf(params, "dd", params[0], params[1]))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте /dice [id игрока] [ставка (в фишках)]");

    if(params[1] < 1 || params[1] > 50000)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Минимальная ставка 1 фишка, максимальная 50.000 фишек.");

 	if(GetCount(playerid, 530) < params[1])
		return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно фишек. Вы можете купить фишки в обменнике Казино.");

    if(params[0] == 1001) {
        if(Int_GetPlayerData(playerid, !"timebot") > Global_Time)
            return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Играть с ботом можно раз в 20 секунд!");

	    global_str = "";
 	    new
		 	dice = random(5)+2,
	    	dice1 = random(5)+2;
	    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы предложили Оливии бросить кости. Ставка: %i", params[1]);
	    SCM(playerid, 0x6495EDFF, global_str);
	    f(global_str, sizeof(global_str), "Оливия и %s бросили кости. Результат: {CC9900}%i : %i", PN(playerid), dice, dice1);
	    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	    if(dice > dice1)
	    {
	        DeleteItem(playerid, 530, params[1]);

			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}К сожалению, вы проиграли!", !"Понял", !"");
	        f(global_str, 20, "~r~-%d", params[1]);
	        GameTextForPlayer(playerid, global_str, 3000, 1);
	    }
	    else if(dice < dice1)
	    {
	        AddItem(playerid, 530, params[1]);

			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Поздравляем, вы выиграли!", !"Понял", !"");
	        f(global_str, 20, "~g~+%d", params[1]);
	        GameTextForPlayer(playerid, global_str, 3000, 1);
	    }
	    else if(dice == dice1) {
			SCM(playerid, COLOR_ORANGE, !"[Информация] {FFFFFF}Игра закончилась в ничью!");
	    }
	    switch(dice1)
		{
		    case 1: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 90.0000, 0.0000);
		    case 2: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 180.0000, 0.0000);
		    case 3: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 90.0000);
		    case 4: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 270.0000);
		    case 5: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 0.0000);
		    case 6: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 270.0000, 0.0000);
		}
	    
		f(global_str, sizeof(global_str), "Выпало: {FFFFFF}%i", dice1);
		SetPlayerChatBubble(playerid, global_str, COLOR_ORANGE, 30.0, 10000);
		kostiKos[playerid] = 5;
		SetPVarInt(playerid, !"timebot", Global_Time+20);
		return 1;
    }
    if(params[0] == playerid)
		return 1;

	if(!ProxDetectorS(6.0, playerid, params[0]))
		return 1;

    if(!IsPlayerConnected(params[0]) || !pTemp[params[0]][tAuthorized])
		return 1;

    if(ZapretDice[params[0]] == 1)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В данный момент игрок не может играть!");

	if(kostiKos[playerid] > 0)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Сейчас вы не можете начать игру!");

    if(PlayerJob[playerid] == JOB_GUIDE && InJob[playerid] == 1)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Крупье не может играть в кости!");

	SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Для того чтобы отказатся от своей ставки введите [/redice]");
    global_str = "";
    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}Вы предложили %s бросить кости. Ставка: %i", PN(params[0]), params[1]);
    SCM(playerid, 0x6495EDFF, global_str);
    f(global_str, sizeof(global_str), "[Информация] {FFFFFF}%s предлагает бросить кости. Ставка: %i", PN(playerid), params[1]);
    SCM(params[0], 0x6495EDFF, global_str);
    SCM(params[0], COLOR_WHITE, !"Введите {48FC23}'/Yes'{FFFFFF}чтобы согласиться {FF0000}'/No' {FFFFFF}для отказа");
    ZapretDice[playerid] =
    ZapretDice[params[0]] = 1;
    KostiName[playerid] = params[0];
    KostiName[params[0]] = playerid;
    KostiMoney[params[0]] =
    KostiMoney[playerid] = params[1];
    Predlog[playerid] = 1;
    return 1;
}

cmd:no(playerid)
{
	if(KostiName[playerid] == INVALID_PLAYER_ID)
		return 1;

	Predlog[KostiName[playerid]] =
	KostiMoney[playerid] =
	KostiMoney[KostiName[playerid]] =
	ZapretDice[playerid] =
	ZapretDice[KostiName[playerid]] = 0;
	SCM(KostiName[playerid], COLOR_VALIK, !"[Информация] {FFFFFF}Игрок отказался от ставки!");
	SCM(playerid, COLOR_ORANGE, !"[Информация] {FFFFFF}Вы отказались играть!");
	KostiName[KostiName[playerid]] =
	KostiName[playerid] = INVALID_PLAYER_ID;
	return 1;
}

cmd:yes(playerid)
{
    if(KostiName[playerid] == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вам никто не предлагал бросить кости");

    if(kostiKos[playerid] > 0)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Сейчас вы не можете принять игру!");

    if(PlayerJob[playerid] == JOB_GUIDE && InJob[playerid] == 1)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Крупье не может играть в кости!");

    new
		dice = random(5)+2,
    	dice1 = random(5)+2;
	global_str = "";
	if(!ProxDetectorS(6.0, playerid, KostiName[playerid]))
		return 1;

	if(Predlog[playerid] != 0)
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете принять игру!");

	if(GetCount(playerid, 530) < KostiMoney[playerid] || GetCount(KostiName[playerid], 530) < KostiMoney[KostiName[playerid]])
	{
	    SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У одного из вас не хватает фишек для игры в кости.");
	    SCM(KostiName[playerid], COLOR_RED, !"[Ошибка] {FFFFFF}У одного из вас не фишек для игры в кости.");
	    callcmd::redice(playerid);
		callcmd::redice(KostiName[playerid]);
	    return 0;
	}

    f(global_str, 110, "%s и %s бросили кости. Результат: {CC9900}%i : %i", PN(KostiName[playerid]), PN(playerid), dice, dice1);
    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
    if(dice > dice1)
    {
        AddItem(KostiName[playerid], 530, KostiMoney[playerid]);
        DeleteItem(playerid, 530, KostiMoney[playerid]);

		SPD(KostiName[playerid], 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Поздравляем, вы выиграли!", !"Понял", !"");
		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}К сожалению, вы проиграли!", !"Понял", !"");
        f(global_str, 20, "~g~+%d", KostiMoney[playerid]);
        GameTextForPlayer(KostiName[playerid], global_str, 3000, 1);
        f(global_str, 20, "~r~-%d", KostiMoney[playerid]);
        GameTextForPlayer(playerid, global_str, 3000, 1);
    }
    else if(dice < dice1)
    {
        DeleteItem(KostiName[playerid], 530, KostiMoney[playerid]);
        AddItem(playerid, 530, KostiMoney[playerid]);

		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Поздравляем, вы выиграли!", !"Понял", !"");
		SPD(KostiName[playerid], 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}К сожалению, вы проиграли!", !"Понял", !"");
        f(global_str, 20, "~g~+%d", KostiMoney[playerid]);
        GameTextForPlayer(playerid, global_str, 3000, 1);
        f(global_str, 20, "~r~-%d", KostiMoney[playerid]);
        GameTextForPlayer(KostiName[playerid], global_str, 3000, 1);
    }
    else if(dice == dice1)
    {
		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Игра закончилась в ничью!", !"Понял", !"");
		SPD(KostiName[playerid], 0, DIALOG_STYLE_MSGBOX, !"{F1951B}Информация", !"{FFFFFF}Игра закончилась в ничью!", !"Понял", !"");
    }

    switch(dice1)
	{
	    case 1: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 90.0000, 0.0000);//+
	    case 2: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 180.0000, 0.0000);//+
	    case 3: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 90.0000);//+
	    case 4: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 270.0000);
	    case 5: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 0.0000); //+
	    case 6: SetPlayerAttachedObject(playerid, 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 270.0000, 0.0000); //+
	}

	switch(dice)
	{
     	case 1: SetPlayerAttachedObject(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 90.0000, 0.0000);//+
	    case 2: SetPlayerAttachedObject(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 180.0000, 0.0000);//+
	    case 3: SetPlayerAttachedObject(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 90.0000);//+
	    case 4: SetPlayerAttachedObject(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 270.0000);
	    case 5: SetPlayerAttachedObject(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 360.0000, 0.0000); //+
	    case 6: SetPlayerAttachedObject(KostiName[playerid], 7, 1851, 1, 0.062400, 0.453750, 0.000000, 360.0000, 270.0000, 0.0000); //+
	}

	kostiKos[KostiName[playerid]] =
    kostiKos[playerid] = 5;
	f(global_str, sizeof(global_str), "Выпало: %i", dice1);
	SetPlayerChatBubble(playerid,global_str,COLOR_ORANGE, 30.0, 10000);
	f(global_str, sizeof(global_str), "Выпало: %i", dice);
	SetPlayerChatBubble(KostiName[playerid], global_str, COLOR_VALIK, 30.0, 10000);
	FirstGiveBizMoney(2010.3718,989.1686,10.8127,KostiMoney[playerid]*90/10);
 	ZapretDice[playerid] =
	ZapretDice[KostiName[playerid]] =
	KostiMoney[playerid] =
	KostiMoney[KostiName[playerid]] =
	Predlog[KostiName[playerid]] = 0;
	KostiName[KostiName[playerid]] =
	KostiName[playerid] = INVALID_PLAYER_ID;
    return 1;
}

cmd:armour(playerid)
	return fuction_UsePlayerItemArmour(playerid, false);

alias:house("home", "hmenu");
cmd:house(playerid)
{
    if(PI[playerid][pDemorgan])
    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете использовать эту команду в этом месте!");
	
	new house = GetPlayerInHouseID(playerid), world = GetPlayerVirtualWorld(playerid);

	if(!GetPlayerHouses(playerid, 1))
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не живете ни в 1 из домов");

	if(!IsPlayerHouse(playerid, house) && !IsPlayerTenant(playerid, house))
		return SCM(playerid, COLOR_RED, world ? "[Ошибка] {FFFFFF}Вы не в своём доме!":"[Ошибка] {FFFFFF}Вы не у своего доме!");

	if(world && !IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[house][hExit_X], HouseInfo[house][hExit_Y], HouseInfo[house][hExit_Z]))
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не в своём доме!");
	
	if(!world && !IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z]))
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не у своего дома!");

	PI[playerid][pHouseOpen] = house;

	if(HouseEntered[playerid] == -1)
	{
		f(mysql_string, 16, "Дом №%d", house);
		f(global_str, 150, "{42B02C}- %s\n{42B02C}-{FFFFFF} Продать дом игроку", (HouseInfo[house][hLock] == 1) ? ("{A5EC67}Открыть {FFFFFF}дом") : "{EC6767}Закрыть {FFFFFF}дом");
		return SPD(playerid, 6698, DIALOG_STYLE_LIST, mysql_string, global_str, "Выбор", !"Отмена");
	}

	if(IsPlayerHouse(playerid, house))
		f(global_str, 500, "{42B02C}- %s\n{42B02C}-{FFFFFF} Меню дома\n{42B02C}-{FFFFFF} Улучшить дом\n{42B02C}-{FFFFFF} Продать дом\n{42B02C}-{FFFFFF} Продать дом игроку\n{42B02C}-{FFFFFF} %s\n{42B02C}-{FFFFFF} Налоги\n{42B02C}-{FFFFFF} Продукты\n{42B02C}-{FFFFFF} Подселить игрока\n{42B02C}-{FFFFFF} Список жителей", 
		(HouseInfo[house][hLock] == 1) ? ("{A5EC67}Открыть {FFFFFF}дом") : "{EC6767}Закрыть {FFFFFF}дом", HouseInfo[house][hAuction] ? "Снять дом с аукциона":"Выставить дом на аукцион"),
		f(mysql_string, 256, "Дом №%d | {42B02C}Объектов использовано %d из 10", HouseEntered[playerid], GetCountUsedObj(HouseEntered[playerid])),
		SPD(playerid, 174, DIALOG_STYLE_LIST, mysql_string, global_str, !"Выбор", !"Отмена");
	
	else
		f(global_str, 80, "{42B02C}- %s\n{42B02C}-{FFFFFF} Меню дома", (HouseInfo[house][hLock] == 1) ? ("{A5EC67}Открыть {FFFFFF}дом") : "{EC6767}Закрыть {FFFFFF}дом"),
		SPD(playerid, 174, DIALOG_STYLE_LIST, "", global_str, "Выбор", !"Отмена");

	return 1;
}

cmd:med(playerid)
{
	new house = HouseEntered[playerid];
	if(house ==-1)return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы ни в одном из домов!");
	if(HouseInfo[house][hMed]<1)return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}В доме нет аптечек!");
	HouseInfo[house][hMed]--;
	f(global_str, 214 ,"[Информация] {FFFFFF}Вы успешно использовали аптечку. В доме осталось: {DEAF79}%d{FFFFFF} аптечек!",HouseInfo[house][hMed]);
	SCM(playerid,COLOR_GREEN, global_str);

	new Float:Health = PI[playerid][pHealth];
	if(Health <= 50.0) UpdatePlayerHealth(playerid,Health+50);
	else UpdatePlayerHealth(playerid,100);
	PI[playerid][pHospital]=25;
 	ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
 	GameTextForPlayer(playerid, "Health +50", 0, 1);

	return 1;
}
cmd:usemed(playerid, params[])
{
	if(GetCount(playerid, 518) < 1) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У тебя нет аптечек!");
	if(GetPlayerVirtualWorld(playerid)==534) return 1;
	if(PI[playerid][pHeal] > 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы находитесь на лечении, аптечки тут не помогут!");
	if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 10 секунд!");
    SetPVarInt(playerid, !"itemtime", Global_Time+10);
	new Float: Health = PI[playerid][pHealth];
	DeleteItem(playerid, 518, 1);
	f(global_str, 48, "%s употребил(а) лекарство", PN(playerid));
	ProxDetector(25, playerid, global_str, COLOR_PURPLE);
	SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы выпили лекарство");
	if(Health <= 50) UpdatePlayerHealth(playerid, Health + 50);
	else UpdatePlayerHealth(playerid, 100);
	PI[playerid][pHospital] = 25;
 	ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

cmd:exit(playerid)
{
	new i = HouseEntered[playerid];

	if(i == INVALID_DATA_ID or !IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hExit_X], HouseInfo[i][hExit_Y], HouseInfo[i][hExit_Z]))
		return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не у двери дома!");

	if(HouseInfo[i][hType] == 2)
		return SPD(playerid, 9989, DIALOG_STYLE_LIST, "", "Выйти на улицу", !"Принять", !"Отмена");

	else if(!HouseInfo[i][hGarage])
		return SPD(playerid, 9989, DIALOG_STYLE_LIST, "", "Выйти на улицу\nВойти в подвал\n{9FFF29}Войти в подвал с вентиляцией", !"Принять", !"Отмена");
	
	return SPD(playerid, 9989, DIALOG_STYLE_LIST, "", "Выйти на улицу\nВойти в подвал\n{9FFF29}Войти в подвал с вентиляцией\n{ffc729}Войти в гараж", !"Принять", !"Отмена");
}

cmd:blacklist(playerid, params[])
{
	if(IsAtFrakcia(playerid) && PI[playerid][pMember][1]>0)
	{
	    if(sscanf(params,"us[72]",params[0],params[1])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /blacklist [id] [причина]");
     	if(!ProxDetectorS(4.0, playerid, params[0], 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
		if(PI[params[0]][pMember][1] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете добавить лидера в чс");
		if(!IsPlayerConnected(params[0])) return SCM(playerid,COLOR_GREY, !"Игрок не найден");
		if(!IsAtFrakcia(params[0]) && PI[params[0]][pMember][0]!=0) return SCM(playerid,COLOR_GREY, !"Игрок должен быть вне гос. организации!");
		if(PI[params[0]][pBL]) return SCM(playerid,COLOR_GREY, !"Игрок уже в черном списке организации");
		if(params[0]==playerid)return 0;
		PI[params[0]][pBL] = 1;
		global_str = "";
		f(global_str,115,"Вы занесли %s(%i) в чёрный список закона. Причина: %s", PN(params[0]), params[0], params[1]);
		SCM(playerid,COLOR_LIGHTBLUE,global_str);
		f(global_str,144,"%s занёс вас в чёрный список закона. Причина: %s", PN(playerid), params[1]);
		SCM(params[0],COLOR_GREY,global_str);
		SCM(params[0],COLOR_GREY, !"Чтобы выйти из него необходимо набрать 50 очков законопослушности");
	}
	else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет доступа к этой системе!");
    return 1;
}
cmd:unblacklist(playerid, params[])
{
	if(IsAtFrakcia(playerid) && PI[playerid][pMember][1]>0)
	{
		if(sscanf(params,"u",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /unblacklist [id]");
		if(!IsPlayerConnected(params[0])) return SCM(playerid,COLOR_GREY, !"Игрок не найден");
		if(!PI[params[0]][pBL]) return SCM(playerid,COLOR_GREY, !"Этого игрока нет в черном списке!");
		PI[params[0]][pBL] = 0;
		global_str = "";
		f(global_str,74,"Вы удалили %s(%i) чёрного списка закона",PN(params[0]),params[0]);
		SCM(playerid,COLOR_LIGHTBLUE,global_str);
		f(global_str,63,"%s удалил вас из чёрного списка закона",PN(playerid));
		SCM(params[0],COLOR_GREY,global_str);
    }
	else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет доступа к этой системе!");
    return 1;
}
cmd:lights(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 0;
	new carid = GetPlayerVehicleID(playerid);
	if(IsAVelik(carid) || IsAPlane(carid)) return 0;
	if(GetEngineStatus(carid)) SetLightsStatus(carid, !GetLightsStatus(carid), playerid);
	return 1;
}

cmd:rules(playerid) return ShowRules(playerid);

cmd:makeleader(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /makeleader [id]");
	global_str = "";
	for(new i = 1; i < MAX_ORGS; i++) f(global_str, 500, "%s%s\n", global_str, OrgInfo[i][oName]);
	SPD(playerid, 26, DIALOG_STYLE_LIST, PN(params[0]), global_str, !"Выбор", !"Отмена");
	return MLPlayer[playerid] = params[0];
}

cmd:showlic(playerid, data[])
{
    extract data -> new player:id; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /showlic [id]");

	if(Int_GetPlayerData(playerid,"reloader") > Global_Time) 
		return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	
	else if(!IsPlayerOnline(id))
		return false;

	else if(!ProxDetectorS(5.0, playerid, id))
		return SCM(playerid, COLOR_RED, !"Вы далеко от цели!");
    
	else if(SettingData[id][sdShowDocuments])
    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок отключил возможность показать ему что-либо!");
    

	if(ShowLicenses(id, playerid))
	{
		f(global_str, 100, "%s показал(а) свои лицензии %s", PN(playerid), PN(id));
		SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
		f(global_str, 100,"Вы успешно показали свои лицензии игроку {FFFFFF}%s",PN(id));
		SCM(playerid,COLOR_GREEN, global_str);
	}
	else 
		SCM(playerid, COLOR_GREY, !"Недоступно в данный момент");
 	
	return SetPVarInt(playerid,"reloader", Global_Time+10);
}

cmd:showbadge(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid, COLOR_GREY, !"У вас нет этого документа");
	if(Int_GetPlayerData(playerid,"reloader")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /showbadge [id]");
	if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
	new team = GetTeamID(playerid);
	new rank = PI[playerid][pRank];
	f(global_str, 150, "{FF9900}%s{FFFFFF}\n\nИмя: %s\nРанг: %s",OrgInfo[team][oName], PN(playerid), GetRankName(team, rank));
	SPD(id,0,0,"Удостоверение", global_str,"Ок","");
	f(global_str, 150, "%s показывает своё удостоверение %s", PN(playerid), PN(id));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	SetPVarInt(playerid,"reloader",Global_Time+2);
	return 1;
}

cmd:showpass(playerid, params[])
{
	if(!IsValidPassport(playerid)) return SCM(playerid, COLOR_GREY, !"У вас нет паспорта");
	if(Int_GetPlayerData(playerid, "reloader") > Global_Time)return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Командой можно пользоватсья раз в 5 секунд!");
    new id; static str[150];
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /showpass [id]");
    if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
    if(SettingData[playerid][sdShowDocuments]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок отключил возможность показать ему что-либо!");
	global_str = "";
    if(PI[playerid][pWanted] > 0)
    {
		f(str, sizeof(str), "{FFFFFF}Имя: {FFD700}%s [ {FCAB48}В розыске {FFD700}]\n", PN(playerid));
		strcat(global_str, str);
	}
	else
	{
		f(str, sizeof(str), "{FFFFFF}Имя: {FFD700}%s\n", PN(playerid));
		strcat(global_str, str);
	}
	f(str, sizeof(str), "{FFFFFF}Лет в штате: {FFD700}%d\n", PI[playerid][pLevel]);
	strcat(global_str, str);
	f(str, sizeof(str), "{FFFFFF}Серия: {FFD700}%d\n", PassInfo[playerid][psSeria]);
	strcat(global_str, str);
	f(str, sizeof(str), "{FFFFFF}Номер: {FFD700}%d\n", PassInfo[playerid][psNumber]);
	strcat(global_str, str);
	f(str, sizeof(str), "{FFFFFF}Законопослушность: {FFD700}%d/100\n", PI[playerid][pZKP]);
	strcat(global_str, str);
	if(!strcmp(PI[playerid][pMerrit], "None")) strcat(global_str,"{FFFFFF}Семейное положение: {FFD700}[ Не женат(а) ]\n");
	else
	{
        f(str, sizeof(str), "{FFFFFF}Семейное положение: {FFD700}[ %s ]\n", PI[playerid][pMerrit]);
	    strcat(global_str, str);
	}
	if(PI[playerid][pHouseKey] == -1) strcat(global_str,"{FFFFFF}Прописка: {FFD700}[ Без прописки ]\n\n\n");
	else if(PI[playerid][pHouseKey] != -1)
	{
	    f(str, sizeof(str), "{FFFFFF}Прописка: {FFD700}[ Номер дома: %d ]\n\n\n", PI[playerid][pHouseKey]);
	    strcat(global_str, str);
	}
	if(PI[playerid][pMember][0] != 0)
	{
	    if(!IsAtGang(playerid) && !IsAtMafia(playerid))
	    {
			f(str, sizeof(str), "{FFFFFF}Организация: {FFD700}%s\n", OrgInfo[GetTeamID(playerid)][oName]);
			strcat(global_str, str);
			f(str, sizeof(str),"{FFFFFF}Должность: {FFD700}%s\n", GetRankName(GetTeamID(playerid), PI[playerid][pRank]));
			strcat(global_str, str);
		}
	}
	f(str, sizeof(str), "{FFFFFF}Работа: {FFD700}%s", GetJobPN(PlayerJob[playerid]));
	strcat(global_str, str);
	if(PI[playerid][pPcix] > 0)
	{
		f(str, sizeof(str), "\n\n{FF6200}Лечился в Психиатрической больнице: %d раз (Необходимо обновить мед. карту)", PI[playerid][pPcix]);
		strcat(global_str, str);
	}
	SPD(id, 0, 0, "Паспорт", global_str, "Ок", "");
	f(global_str, 150, "%s показывает свой паспорт %s", PN(playerid), PN(id));
	SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	f(global_str, 150, "[Подсказка] {FFFFFF}Вы успешно показали свой паспорт игроку {FF6347}%s", PN(id));
	SCM(playerid, COLOR_RED, global_str);
	SetPVarInt(playerid, "reloader", Global_Time + 5);
	return 1;
}

cmd:carpass(playerid, params[])
{
	if(Int_GetPlayerData(playerid, !"reloader") > Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не флуди!");

    extract params -> new player:target, car; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /carpass [id игрока] [id машины]");

	if(target == INVALID_PLAYER_ID)
	    return false;

    if(!ProxDetectorS(5.0, playerid, target))
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока!");

    if(!IsPlayerHaveCar(playerid, car))
		return SCM(playerid, COLOR_GREY, !"Это не ваш транспорт");

	ProxDetector(25.0, playerid, (str_f("%s показывает тех. паспорт %s", PN(playerid), PN(target))), COLOR_PURPLE);
	UseableCMDCars(target, 5, car, GetVehicleID(car));
	SCMF(playerid, COLOR_GREEN, "Вы успешно показали документы на транспорт игроку {FFFFFF}%s", PN(target));
	return SetPVarInt(playerid, !"reloader", Global_Time + 2);
}

cmd:showskill(playerid, params[])
{
	if(Int_GetPlayerData(playerid,"reloader") > Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не флуди!");

    if(sscanf(params, "u", params[0])) 
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /showskill [id]");

    if(!ProxDetectorS(5.0, playerid, params[0])) 
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");

	ShowSkills(params[0], playerid);
	SetPlayerChatBubble(playerid, !"Что-то показал(а).", COLOR_PURPLE, 10.0, 5000);
	SCMF(playerid, COLOR_GREEN, "Вы успешно показали свои навыки игроку %s", PN(params[0]));

	return SetPVarInt(playerid,"reloader",Global_Time+2);
}

cmd:showmc(playerid, params[])
{
	if(!IsValidPassport(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет этого документа");
	if(Int_GetPlayerData(playerid, "reloader") > Global_Time)return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
    new id;
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Используйте: /showmc [id]");
    if(!ProxDetectorS(5.0, playerid, id)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(SettingData[playerid][sdShowDocuments]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок отключил возможность показать ему что-либо!");
	switch(MedCardInfo[playerid][mcState])
	{
	    case -1: return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет мед. карты!");
	   	case 0: global_str = "Не определен";
	   	case 1: global_str = "Психически не здоров(а)";
	   	case 2: global_str = "Наблюдаются отклонения";
	   	case 3: global_str = "Полностью здоровый(ая)";
	}
	f(global_str, 300, "\
	{FFFFFF}Имя: %s\n\n\
	Дата: %s\n\
	Статус: %s\n\
	{CEAD2A}Наркозависимость: %d", PN(playerid), MedCardInfo[playerid][mcDate], global_str, PI[playerid][pAllRepl]);
	SPD(id, 0, DIALOG_STYLE_MSGBOX, "Мед. карта", global_str, "Ок", "");
	f(global_str, 200, "%s показывает свою мед. карту %s", PN(playerid), PN(id));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	f(global_str, 200, "Вы успешно показали свою мед. карту игроку {FFFFFF}%s", PN(id));
	SCM(playerid, COLOR_GREEN, global_str);
	SetPVarInt(playerid,"reloader",Global_Time + 10);
	return 1;
}
cmd:setgangzone(playerid, params[])
{
	new gang;
	if(sscanf(params,"d",gang)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /setgangzone [11 - 15 или 25]");
	if((11 > gang || gang > 15) && gang != 25) return SCM(playerid, COLOR_OLDRED, !"Используйте: /setgangzone [11 - 15]");
	new zone = GetPlayerGangZone(playerid);
	if(CaptureZone == zone) return SCM(playerid, COLOR_GREY, !"Эту зону уже захватывают");
	new lastgang = GangZoneInfo[zone][gangOwnerId];
	GangZoneHideForAll(GangZone[zone]);
    GangZoneShowForAll(GangZone[zone], TeamColors[gang][0]);
    GangZoneInfo[zone][gangOwnerId] = gang;
    f(global_str, 50,"%d территория",zone);
    SCM(playerid,COLOR_WHITE,global_str);
    SendTeamMessage(gang,COLOR_VALIK, !"[Информация] {FFFFFF}Ваша банда захватила новую территорию");

    UpdateDorm(gang);
    UpdateDorm(lastgang);
    SaveGangZone(zone);
	
	f(global_str, 150, "Администратор <a href=../pages/user?id=%d>%s</a>. перекрасил GangZone №%d", PI[playerid][pID], PN(playerid), gang);
	aml(global_str, 5, "", "");
	return 1;
}
cmd:givebiz(playerid, params[])
{
    new giveplayerid;
    if(sscanf(params, "ud", giveplayerid)) return SCM(playerid, COLOR_GREY, !"Используй: /givebiz [ID/Name]");
    if(PI[playerid][pRank] < 9) return SCM(playerid,COLOR_RED,!"Доступно только лидеру и заместителю!");
    if(!IsAtMafia(playerid) || !IsAtMafia(giveplayerid))return SCM(playerid, COLOR_GREY, !"Либо вы либо тот кому вы хотите продать бизнес , не состоит в мафии!");
    if(giveplayerid == playerid) return SCM(playerid, COLOR_GREY, !"Вы не можете отдать самому себе!");
    if(!ProxDetectorS(5.0, playerid, giveplayerid, 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
    if(BizWarState > 0)return SCM(playerid,COLOR_GREY, !"У кого то сейчас стрела ,пока она идет вы не можете отдать бизнес!");
    for(new i;i<OWNABLEBIZES;i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,10.0,BizData[i][bEnter][0],BizData[i][bEnter][1],BizData[i][bEnter][2])) continue;
	    if(BizData[i][bKrasher] != PI[playerid][pMember][0]) return SCM(playerid,COLOR_GREY, !"Вы не крешуете этот бизнес!");
	    BizData[i][bKrasher] = PI[giveplayerid][pMember][0];
     	SCM(giveplayerid,COLOR_VALIK, !"Теперь вы крышуете этот бизнес!");
     	SCM(playerid,COLOR_VALIK, !"Вы отдали свой бизнес!");
     	UpdateBusinessText(i,1);
	}
	f(global_str, 150,"Игрок %s отдал вам контроль над своим бизнесом!",PN(playerid));
	SCM(giveplayerid,COLOR_RED,global_str);
	return 1;
}
cmd:sellgangzone(playerid, params[])
{
    new zone = GetPlayerGangZone(playerid);
    new giveplayerid, count;
    if(sscanf(params, "ud", giveplayerid, count)) return SCM(playerid, COLOR_GREY, !"Используй: /sellgangzone [ID/Name] [Цена]");
    if(!ProxDetectorS(2.0, playerid, giveplayerid, 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
	if(!IsAtGang(playerid) || !IsAtGang(giveplayerid))return SCM(playerid, COLOR_GREY, !"Либо вы либо тот кому вы хотите продать зону , не состоит в банде!");
	if(GangZoneInfo[zone][gangOwnerId] != PI[playerid][pMember][0]) return SCM(playerid, COLOR_GREY, !"Это не ваша зона");
	if(giveplayerid == playerid) return SCM(playerid, COLOR_GREY, !"Вы не можете продать самому себе!");
	if(PI[playerid][pMember][1]==0 || PI[giveplayerid][pMember][1]==0) return SCM(playerid, COLOR_GREY, !"Только лидер лидеру может продавать зоны!");
	if(CaptureZone == zone) return SCM(playerid, COLOR_GREY, !"Эту зону уже захватывают");
	if(count<0)return SCM(playerid,COLOR_RED,!"Вы указываете отрицательную сумму? серьезно? вы хотите ему заплатить?");
	if(PI[giveplayerid][pMoney]< count)return SCM(playerid,COLOR_RED,!"У этого бандита недостаточно денег чтобы оплатить!");
 	SellGzone[giveplayerid] = count;
	SellPGzone[giveplayerid] = playerid;
 	SCM(playerid,COLOR_GREY, !"Вы отправили предложение о покупке территории!");
	f(global_str, 100,"Игрок %s предлагает купить у него территорию за %d$\nВы согласны?",PN(playerid),count);
	SPD(giveplayerid,377,0,"Информация",global_str,"Согласен","Отклонить");
	return 1;
}
cmd:capture(playerid, params[])
{
	if(!IsAtGang(playerid))
		return false;

	else if(PI[playerid][pRank] < 7)
		return SCM(playerid, COLOR_GREY, !"Данная команда доступна с 7 ранга");
	
	else if(0 < CaptureTime[0] or 0 < CaptureTime[1])
		return SCM(playerid, COLOR_GREY, !"Уже идет атака на один из районов города.");
    
	new 
		Atac = GetTeamID(playerid),	hour,minuite,second;

    gettime(hour, minuite, second);

    if(RecoveryTime[Atac] > 0)
		return SCM(playerid, COLOR_GREY, !"Ваша банда уже воюет / воевала за территорию в этом часу.");

    new zone = GetPlayerGangZone(playerid);
    if(zone == -1 or zone > 130)
		return false;

	else if(!IsGangToZone(Atac, zone, 50.0))
		 return SCM(playerid, COLOR_GREY, !"Для захвата зоны хотябы половина всех членов банды должны присутствовать на захвате");

    else if(GangZoneInfo[zone][gangOwnerId] == Atac)
		return true;

	else if(RecoveryTime[GangZoneInfo[zone][gangOwnerId]] > 0)
		return SCM(playerid,COLOR_GREY, !"Нападаемая банда уже воюет / воевала за территорию в этом часу");
		
    else if(minuite < 5)
		return SCM(playerid,COLOR_GREY, !"Нужно подождать несколько минут после PayDay");
	
	if(!GangZoneInfo[zone][gangOwnerId])
	{
	    GangZoneHideForAll(GangZone[zone]);
        GangZoneShowForAll(GangZone[zone],TeamColors[Atac][0]);
        GangZoneInfo[zone][gangOwnerId] = Atac;
        RecoveryTime[Atac] = 1800;
        SendTeamMessage(Atac,COLOR_VALIK, !"Ваша банда захватила новую территорию");
        UpdateDorm(Atac);
        SaveGangZone(zone);
	}
	else
	{
	    if(hour < 13 && hour > 22) return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Захват территории может происходить с 13 до 22 часов.");
		f(global_str, 200,"[Внимание]: Ваша банда напала на территорию %s", GetGangName(GangZoneInfo[zone][gangOwnerId]));
		SendTeamMessage(Atac,0x00B953AA, global_str);
		f(global_str, 200, "[Внимание]: На вашу территорию напала банда %s", GetGangName(Atac));
		SendTeamMessage(GangZoneInfo[zone][gangOwnerId],0xFF8CEFAA, global_str);
		//
		f(global_str,300,"[A] Банда %s [%s(%d)] начала захват территории банды %s", OrgInfo[Atac][oName], PN(playerid), playerid, OrgInfo[GangZoneInfo[zone][gangOwnerId]][oName]);
		SendAdminsMessage(COLOR_ORANGE,global_str);
		///
		CaptureZone = zone;
		CaptureDef = GangZoneInfo[zone][gangOwnerId];
		CaptureAtac = Atac;
		CaptureAtacKill = 0;
		CaptureDefKill = 0;
		CaptureTime[0] = 10;
		CaptureTime[1] = 0; //10 минут
		GangZoneFlashForAll(GangZone[CaptureZone], TeamColors[CaptureAtac][0]);
		SCM(playerid,COLOR_WHITE, !"Территория будет мигать 10 минут. Победит банда, которая останется последней");
		SCM(playerid,COLOR_WHITE, !"Территория будет мигать до тех пор, пока на ней не останется 1 банда");
	}

	return true;
}

cmd:pobject(playerid)
{
    new Float:distance = 3.0, Float:player_dist = 5.0, object_id = -1;
    for(new i; i < TOTALOBJECTS; i++)
    {
        if(!BH_Object[i][objHouseID] && !BH_Object[i][objBizID]) continue;
        player_dist = GetPlayerDistanceFromPoint(playerid, BH_Object[i][objPosX], BH_Object[i][objPosY], BH_Object[i][objPosZ]);
        if(distance > player_dist) 
            distance = player_dist, object_id = i;
			
    }
    if(object_id == -1) return false;
    //
    if(BH_Object[object_id][objHouseID]) { if(!GetString(PN(playerid), HouseInfo[BH_Object[object_id][objHouseID]][hOwner])) return false; }
    else { if(!GetString(PN(playerid), BizData[BH_Object[object_id][objBizID]][bOwner])) return false; }
	
	format(mysql_string, 256, "SELECT `Owner`, %s FROM bh_objects WHERE ID = '%d' LIMIT 1;", "DATE_FORMAT(`Date`, '%Y-%m-%d %H:%i:%S ')", BH_Object[object_id][objBaseID]);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if(cache_num_rows())
	{
		cache_get_value_name(0, "Owner", SQL_GET_ROW_STR[0]);
		cache_get_value_name(0, "Date", SQL_GET_ROW_STR[1]);
		
		f(global_str, 550, "\
		{BFBBBA}Недвижимость:\t%s №%d\n\
		{BFBBBA}Установил:\t\t%s\n\
		{BFBBBA}Дата:\t\t\t%s\n{FFFFFF}\n\
		Передвинуть\n\
		{FF0000}Забрать", 
		BH_Object[object_id][objHouseID] ? "Дом":"Бизнес", 
		BH_Object[object_id][objHouseID] ? BH_Object[object_id][objHouseID]:BH_Object[object_id][objBizID], 
		SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1]);
	}
	
	cache_delete(result);
	
    SetPVarInt(playerid, "object_edit_id", object_id);
	
	return SPD(playerid, 4450, DIALOG_STYLE_LIST, ItemsInfo[BH_Object[object_id][objItemID]][itemName], global_str, !"Выбрать", !"Закрыть");
}

cmd:slap(playerid, params[])
{
	new id;
	if(sscanf(params,"ud",id,params[1])) return SCM(playerid, COLOR_OLDRED,"Используй: /slap [id] [1 - вверх/2 - вниз]");
	if(params[1] < 1 || params[1] > 2) return SCM(playerid, COLOR_OLDRED,"Используй: /slap [id] [1 - вверх/2 - вниз]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"Игрок не законектился еще!");
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(id,X,Y,Z);
	if(params[1] == 2) SetPlayerPos(id,X,Y,Z-5);
	else if(params[1] == 1) SetPlayerPos(id,X,Y,Z+5);
	f(global_str,sizeof(global_str),"[A] Администратор %s[%d] дал поджопник %s[%d]", PN(playerid),playerid,PN(id),id);
	SendAdminsMessage(COLOR_GREY, global_str);
	return true;
}
cmd:weap(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /weap [id]");

	if(!IsPlayerOnline(target))
	    return false;

   	_ResetGun(target);

	return SCMF(playerid, COLOR_LIGHTBLUE, "Вы отобрали оружие у игрока %s[%d]", PN(target), target);
}
cmd:sprunk(playerid)
{
	if(!GetCount(playerid, 513))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У тебя нет спранка!");

    if(PI[playerid][pHeal])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");
	if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    new
		Float:Health;
    GetPlayerHealth(playerid, Health);
    if(Health <= 92.0)
		UpdatePlayerHealth(playerid, Health + 8);

    else
		UpdatePlayerHealth(playerid, 100);

    DeleteItem(playerid, 513, 1);
	new
		string[25 - 2 + MAX_PLAYER_NAME];

    f(string, sizeof(string), "%s выпил(а) банку спранка", PN(playerid));
    ProxDetector(25.0, playerid, string, COLOR_PURPLE);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
    SetPVarInt(playerid, !"itemtime", Global_Time+3);
    return 1;
}
cmd:beer(playerid)
{
	if(!GetCount(playerid, 514))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У тебя нет пива!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);

    new
		Float:Health;
    GetPlayerHealth(playerid, Health);
    if(Health <= 90.0)
		UpdatePlayerHealth(playerid, Health + 10);

    else
		UpdatePlayerHealth(playerid, 100);

    DeleteItem(playerid, 514, 1);
    f(global_str, 80, "%s выпил(а) бутылку пива", PN(playerid));
    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
    return 1;
}
cmd:eat(playerid)
{
	f(global_str, 100, "Предмет\tКоличество\n\
	{FFFFFF}Чипсы\t%d\n\
	{FFFFFF}Рыбу\t%d\n\
	{FFFFFF}Оленина\t%d", GetCount(playerid, 512), GetCount(playerid, 523), GetCount(playerid, 778));
	SPD(playerid, 4332, DIALOG_STYLE_TABLIST_HEADERS, "{FFD700}Кушать", global_str, !"Принять", !"Отмена");
	return 1;
}
cmd:drink(playerid)
{
	if(HouseEntered[playerid] == -1) return SCM(playerid, COLOR_GREY, !"Вы не находитесь ни в 1-ом из домов");
	if(!HouseInfo[HouseEntered[playerid]][hBar]) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}В вашем доме нет минибара!");
    for(new A; A < 3; A++) TextDrawShowForPlayer(playerid, alcodraw[A]);
	TextDrawShowForPlayer(playerid, alcodraw1[0]);
	TextDrawShowForPlayer(playerid, alcodraw1[1]);
 	TextDrawShowForPlayer(playerid, alcodraw1[2]);
	TextDrawShowForPlayer(playerid, alcodraw1[5]);
	TextDrawShowForPlayer(playerid, alcodraw1[6]);
  	SelectTextDraw(playerid, 0xFF9933FF);
	return 1;
}
cmd:fwarn(playerid, params[])
{
	if(PI[playerid][pMember][1] == 0 && PI[playerid][pRank] < 8) return SCM(playerid,COLOR_GREY, !"Вы не можете это сделать!");
	new id;
	if(sscanf(params,"us[150]",id,params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /fwarn [id] [причина]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"Неверный id игрока!");
    if(!IsGiveWarn(playerid, id)) return SCM(playerid, COLOR_RED, !"Вы не можете ему дать выговор!");
    if(PI[id][pMember][1] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете выдать варн лидеру");
    if(PI[playerid][pRank]==PI[id][pRank])return SCM(playerid, COLOR_RED, !"Вы не можете ему дать выговор!");
    if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(params[0]))return 1;
    PI[id][pFWarns] ++;
    f(global_str, 150,"Вы дали выговор игроку %s с причиной %s",PN(id),params[0]);
    SCM(playerid,COLOR_LIGHTBLUE, global_str);
    f(global_str, 150,"%s дал вам выговор с причиной %s",PN(playerid),params[0]);
    SCM(id,COLOR_RED, global_str);
	if(PI[id][pFWarns] >= 3)
	{
	    SCM(id,COLOR_GREY, !"Вы были автоматически выгнаны из организации т.к у вас больше 2-х выговоров");
	    f(global_str, 200,"%s покидает нашу организацию т.к у него больше 2-х выговоров",PN(id));
	    SendTeamMessage(PI[id][pMember][0],COLOR_GREY, global_str);
	    PI[id][pFWarns] =
        PI[id][pRank] =
        PlayerJob[id] =
	    PI[id][pMember][0] =
	    PI[id][pDCTime]=0;
        UpdatePlayerDataInt(id, "DropCarTime", 0);
        UpdatePlayerDataInt(id, "Job", 0);
        UpdatePlayerDataInt(id, "FWarns", 0);
        UpdatePlayerDataInt(id, "Rank", 0);
        UpdatePlayerDataInt(id, "Member", 0);
	    SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
        SetBumSkin(id);
    	PlayerSpawn(id);
	}
	return 1;
}
cmd:unfwarn(playerid, params[])
{
	if(PI[playerid][pMember][1] == 0 && PI[playerid][pRank] < 9) return SCM(playerid,COLOR_GREY, !"Вы не можете это сделать!");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /unfwarn [id]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"Неверный id игрока!");
    if(GetTeamID(id) != GetTeamID(playerid)) return SCM(playerid, COLOR_RED, !"Вы не можете снять выговор этому человеку");
	if(PI[id][pFWarns] == 0) return SCM(playerid, COLOR_RED, !"У этого человека нет выговоров!");
	if(id==playerid)return SCM(playerid, COLOR_RED, !"Вы не можете снять выговор самому себе!");
    PI[id][pFWarns] --;
    f(global_str, 100,"Вы сняли выговор игроку %s",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,global_str);
    f(global_str, 100,"%s снял вам выговор",PN(playerid));
    SCM(id,COLOR_RED, global_str);
	return 1;
}
cmd:Newsredak(playerid, params[])
{
   	if(!IsANews(playerid)) return SCM(playerid,COLOR_GREY, !"Только для сотрудников СNN!");
	if(PI[playerid][pRank]<2)return SCM(playerid,COLOR_RED,!"Отказано в доступе! (Доступно с 2 ранга!)");
	global_str = "";
	foreach(new id: Player)
	{
		if(AddTimeMessages[id] > 0)
		{
			if(vipob[id] > 0) f(global_str, 1024,"{fcaa4d}[VIP] {ffffff}%s Отправитель: %s			%dc\n",global_str,PN(id),Global_Time - AddTimeMessages[id]);
            else f(global_str,1024,"%s Отправитель: %s			%dc\n",global_str,PN(id),Global_Time - AddTimeMessages[id]);
		}
	}
	if(strlen(global_str) > 0) SPD(playerid,556,2,"Редакция",global_str, !"Выбрать", !"Закрыть"); else SPD(playerid,0,0,"Редакция","На данный момент сообщений нет", !"Закрыть","");
	return 1;
}

cmd:ad(playerid, data[])
{
    if(!PI[playerid][pPhoneInfo][0] || !CheckPhones(playerid))
		return SCM(playerid, COLOR_GREY, !"У вас нет мобильного телефона или sim карты!");

    if(PI[playerid][pLevel] < 2)
		return SCM(playerid, COLOR_GREY, !"Подавать рекламу можно только с 2-го уровня");

    if(AddTimeMessages[playerid] > 0)
		return SCM(playerid, COLOR_RED, !"Вы уже подавали объявление на редакцию!");

    if(TimeMessage[playerid] > Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете так часто подавать объявления!");

	if(!ImprovementsData[playerid][idTablet] && !IsPlayerInRangeOfPoint(playerid, 50.0, 1538.2813,1951.8353,1020.9574))
			return SCM(playerid, COLOR_GREY, !"Вы не можете тут подать объявление! Отправляйтесь в LS/SF/LV-Радиостанции");
	
	new type;
	
	if(sscanf(data, "ds[128]", type, data[0]))
    {
        SCM(playerid, -1, !"Используй: /ad [Тип: 1 - обычное, 2 - VIP] [Текст]");
		SCM(playerid, COLOR_ORANGE, !">>>>{FFFFFF} - Стоимость Standart обьявления - 5 000$");
        return SCM(playerid, COLOR_ORANGE, !">>>>{FFFFFF} - Стоимость VIP обьявления - 25 000$");
    }

	if(!(1 <= strlen(data[0]) <= 100))
	   return SCM(playerid, COLOR_GREY, !"Количество символов в объявлении не может быть менее 1 или более 100.");
	
	if(!(1 <= type <= 2))
		return SCM(playerid, COLOR_ORANGE, !">>>>{FFFFFF} - Используйте 1 - обычное обьявление, 2 - VIP обьявление!");
		
	else if(PI[playerid][pMoney] < type > 1 ? 25000:5000)
		return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");

    SCM(playerid, COLOR_YELLOW, !"Ваше сообщение зарегистрировано в системе и будет опубликовано после редакции!");
    format(global_str, 128, "На обработку объявлений пришло сообщение от: %s", PN(playerid));
	
    SendTeamMessage(TEAM_RADIO, COLOR_WHITE, global_str);
    SendTeamMessage(TEAM_RADIOLV, COLOR_WHITE, global_str);
	SendTeamMessage(TEAM_RADIOSF, COLOR_WHITE, global_str);
    AddTimeMessages[playerid] = Global_Time;
	
    TimeMessage[playerid] = Global_Time + ( type > 1 ? 5:20);
	
	vipob[playerid] = type - 1;
	
    format(AddMessages[playerid], 128, "%s", data[0]);

	return GiveMoney(playerid, type > 1 ? 25000:5000, "объявление СМИ");
}

CMD:cure(playerid, data[])
{
	if(!IsAMedic(playerid)) return
	    SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не доктор!");
	    
    if(!TeamDuty{playerid}) return
		SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Чтобы поставить пациентов на ноги, Вы должны быть на дежурстве!");
	    
	extract data -> new player:targetid; else return
	    SCM(playerid, COLOR_OLDRED, !"Используйте: /cure [id]");
	    
	if(playerid == targetid) return
	    SCM(playerid, COLOR_OLDRED, !"Вы не можете указать свой ID!");
	    
	if(pTemp[targetid][tReturnDeath] <= 0) return
		SCM(playerid, COLOR_OLDRED, !"Данный пользователь в сознании!");
		
	KillTimer(DeathTimer[targetid]);
	if(DeathText[targetid]) DestroyDynamic3DTextLabel(DeathText[targetid]);
	pTemp[targetid][tReturnDeath] = 0;
	UpdatePlayerHealth(targetid, 100);
	ClearAnimations(targetid);
	TogglePlayerControllable(targetid, true);

	return GiveMoney(playerid, 40000);
}
cmd:heal(playerid, params[])
{
	if(!IsAMedic(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не доктор!");

	if(!TeamDuty{playerid})
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Чтобы лечить пациентов вы должны быть на дежурстве!");

    extract params -> new player:target; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /heal [id]");

	if(target == INVALID_PLAYER_ID)
	    return 0;

	if(!ProxDetectorS(4.0, playerid, target))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока");

   	new carid = GetPlayerVehicleID(playerid);
	if(VehicleInfo[carid][vTeam] == TEAM_M4C || VehicleInfo[carid][vTeam] == TEAM_MEDICSF || VehicleInfo[carid][vTeam] == TEAM_MEDICLV || IsPlayerInRangeOfPoint(playerid, 70, 1143.8265,-1310.5242,1019.4139))
	{
	    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы отправили предложение о лечении.");
		
		f(global_str, 150, "\n\nМедик {dad540}%s {FFFFFF}хочет вылечить вас за {dad540}$400\n\n", PN(playerid));
		SPD(target, 131, DIALOG_STYLE_MSGBOX, !"Лечение", global_str, !"Ок", !"Отмена");
		HealOffer[target] = playerid;
	}
	else SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Вы должны находится в больнице или машине!");
	return true;
}
cmd:number(playerid, params[])
{
	if(GetCount(playerid, 563) < 1)
		return SCM(playerid, COLOR_GREY, !"У вас нет телефонной книжки");

	new targetid;
    if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /number [id] чтобы узнать номер игрока!");

    if(targetid == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не в сети!");

	if(PI[targetid][pAdmin])
	    return 0;

    if(!PI[targetid][pPhoneInfo][0])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого игрока нет sim карты!");

    SetPlayerChatBubble(playerid, !"Смотрит телефонную книгу", COLOR_PURPLE, 10.0, 5000);
    new string[29 - 6 + MAX_PLAYER_NAME + 5 + 8];
	f(string, sizeof(string), "{FFFFFF}%s[%d]:    {33CCFF}%d", PN(targetid), targetid, PI[targetid][pPhoneInfo][0]);
    SCM(playerid, -1, string);
	return 1;
}
cmd:fishes(playerid, params[])
{
	global_str = "";
	for(new i;i < 5;i ++)
	{
		f(global_str, 200, "%s\n",global_str,FishName[PlayerFish[playerid][i]]);
	}
	if(!SPD(playerid,0,0,"Список рыб",global_str,"Ок",""))SCM(playerid, COLOR_GREY, !"Недоступно в данный момент.");
	return 1;
}
cmd:go_fished(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(!InJob[playerid])
		{
			if(GetCount(playerid, 519) > 0)
			{
				if(GetCount(playerid, 548) > 0)
				{
					if(!Fishing{playerid})
					{
						for(new i;i < sizeof(FishZone);i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid,2.0,FishZone[i][0],FishZone[i][1],FishZone[i][2]))
							{
								SetPlayerArmedWeapon(playerid, 0);
								if(!IsPlayerAttachedSlotUsedEx(playerid, 7))SetPlayerAttachedObject(playerid, 7,18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
								TogglePlayerControllable(playerid, false);
								ApplyAnimationEx(playerid,!"SWORD",!"SWORD_3",4.1, 0, 1, 1, 1, 0, 1);
								f(global_str, 150,"* %s закидывает крючок и ловит рыбу",PN(playerid));
								ProxDetector(25,playerid,global_str,COLOR_PURPLE);
								SetPlayerTimer(playerid,"PlayerFishing",15000 + random(10000),false);
								Fishing{playerid} = true;
							}
						}
					}
					else SCM(playerid,COLOR_GREY, !"Вы уже ловите рыбу");
				}
				else SCM(playerid,COLOR_GREY, !"У вас нет наживки");
			}
			else SCM(playerid,COLOR_GREY, !"У вас нет удочки");
		}
		else SCM(playerid,COLOR_GREY, !"Нельзя рыбачить во время работы");
	}
	return 1;
}
cmd:mask(playerid, params[])
{
    if(Cuffed[playerid]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");
	if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете двигаться");
    if(PI[playerid][pMaskON] ==0)
    {
		if(!GetCount(playerid, 515)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет маски!");
		if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 60 секунд!");
    	SetPVarInt(playerid, !"itemtime", Global_Time+60);
		DeleteItem(playerid, 515, 1);
		SetPlayerColor(playerid,0x665E5E01);
	    PI[playerid][pMaskON] = 600;
	    ApplyAnimationEx( playerid, "SHOP", "ROB_shifty", 4.1, 0, 1, 1, 0, 0 );
	    SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно одели маску.");
	    SCM(playerid,COLOR_BLUE, !"[Информация] {FFFFFF}Время действия маски 10 минут, после исхода времени ее придётся выбросить.");
    }
    else
	{
	    PI[playerid][pMaskON]=0;
		if(TeamDuty{playerid}) SetPlayerColor(playerid,TeamColors[GetTeamID(playerid)][0]);
		else SetPlayerColor(playerid,0xFFFFFF80);
        SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно выкинули маску.");
	}
	sendPlayerBattlepassAction(playerid, 29);
	return 1;
}

cmd:settime(playerid, params[])
{
	if(sscanf(params,"d", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /settime [hour]");
    return SetWorldTime(params[0]);
}

cmd:unban(playerid, params[])
{
	new
		name[MAX_PLAYER_NAME],
		reason[64];

    if(sscanf(params, "s[24]s[64]", name, reason))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unban [name] [reason]");

	SetPVarString(playerid, "ReasonBanString", reason);

    if(!IsBannedName(name))
		return SCM(playerid, -1, !"Этот игрок не забанен");

    mysql_escape_string(name, UnbanName[playerid]);

    new
		seconds,
		admin[MAX_PLAYER_NAME];

    f(global_str, 200, "SELECT * FROM `bannames` WHERE BINARY `Name` = '%s' LIMIT 1", UnbanName[playerid]);
	new Cache:result = mysql_query(mysql, global_str);
	if(cache_num_rows() > 0)
	{
		cache_get_value_name(0, "BanAdmin", admin, 24);
		cache_get_value_name(0, "BanReason", reason);
		cache_get_value_name_int(0, "BanSeconds", seconds);

		new
			times = Global_Time,
			tima[20],
			dima;

		if(floatround((seconds-times)/60/60/24) > 1)
		{
			tima = "дней";
			dima = floatround((seconds-times)/60/60/24,floatround_ceil);
		}
		else
	 	{
 			tima = "час(ов)";
 			dima = floatround((seconds-times)/60/60,floatround_ceil);
		}

	    f(global_str, 200, "\
		{FFFFFF}Блокиратор: \t{FF0000}%s\n\
		{FFFFFF}Причина: \t{FF0000}%s\n\
		{FFFFFF}До разблокировки: \t\t{FF0000}%d %s",
		admin, reason, dima, tima);
	}

	return SPD(playerid, 91, DIALOG_STYLE_MSGBOX, !"Информация о забаненном", global_str, !"Разбанить", !"Отмена"), cache_delete(result);
}

cmd:keys(playerid)
{
	global_str = "";
	new cars, carid; static Package[120];

	foreach(Vehicle, i)
	{
		if(i == INVALID_VEHICLE_ID) continue;
		carid = GetVehicleID(i);
		if(IsAOwnableCar(i) && GetString(CarInfo[carid][cKeyer], PN(playerid)))
		{
		    ShowCar[playerid][cars][0] = i;
			
			if(VehicleInfo[i][vModification] == 554) Package = "{FFD848}[Twin Turbo]{FFFFFF}";
			else if(VehicleInfo[i][vModification] == 548) Package = "{FFD848}[Launch]{FFFFFF}";
			else if(VehicleInfo[i][vModification] == 587) Package ="{FFD848}[Halloween]{FFFFFF}";
			else if(VehicleInfo[i][vModification] == 951) Package = "{FFD848}[PREMIUM]{FFFFFF}";
			else Package = "";

			if(CarInfo[carid][cShtraf]) f(global_str, 1024, "%s{FF6347}[X]{FFFFFF} %s(%d)\n", global_str, GetVehicleName(i), i);
			else f(global_str, 1024, "%s%s%s %s(%d)\n", global_str, CarInfo[carid][cParkedInPark] ? "{FF6347}[Не припарковано]{FFFFFF}":"", Package, GetVehicleName(i), i);
		    cars ++;
		}
	}
	if(!cars) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нет ключей от транспорта!");
	SPD(playerid, 162, DIALOG_STYLE_LIST, !"{FFFFFF}Ключи | {ae433d}Чужой транспорт", global_str, "»", "x");
	return 1;
}

cmd:cars(playerid)
	return ShowPlayerCars(playerid);
	
stock ShowPlayerCars(playerid, dialog = 162)
{
	format(global_str, 128, "SELECT * FROM ownable WHERE BINARY Owner = '%s'", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str), count, carid, sqlid, load;

	count = cache_num_rows();

	if(!count)
		return SCMF(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У вас нет личного транспорта! {FFFF00}Доступно слотов для транспорта: {FFFFFF}%d", ValidNumberCars(playerid));

	if(GetPlayerLauncher(playerid) == 1 && dialog == 162)
	{
		if(ShowVeh[playerid] != -1)
			executeEvent(playerid, 0, "window.executeEvent('event.vehicleMenu.setVehicleInfoList', '[ null ]');"),
			executeEvent(playerid, 0, "window.executeEvent('cef.modals.closeModal', `[\"carMenu\"]`);");

		executeEvent(playerid, 0, "window.executeEvent('cef.modals.showModal', `[\"carMenu\"]`);");
		hidePlayerHud(playerid);
 	}

	global_str = "";

	for(new idx, numberData[4][10], familyID; idx < count; idx++)
	{
		cache_get_value_name_int(idx, "family_id", familyID);

		if(familyID != -1)
			continue;

		cache_get_value_name_int(idx, "ID", ShowCar[playerid][idx][0]);
		cache_get_value_name_int(idx, "Model", ShowCar[playerid][idx][1]);
		cache_get_value_name_int(idx, "ConnectLoad", load);
		
		carid = OnPlayerCarLoad(ShowCar[playerid][idx][0]), sqlid = GetVehicleID(carid);

		if(carid > 0 && !(GetString(VehicleInfo[carid][vNumber], "Arizona ST")))
			sscanf(VehicleInfo[carid][vNumber], "P<,>a<s[10]>[4]", numberData);

		if(GetPlayerLauncher(playerid) == 1 && dialog == 162)
		{
			if(carid)
				f(mysql_string, sizeof(mysql_string), "{\"title\":\"%s\",\"icon\":\"icon-car-number\"},{\"title\":\"%s\",\"icon\":\"icon-fuel\"},", GetString(VehicleInfo[carid][vNumber], "Arizona ST") ? "Нет" : (str_f("[%s] %s (%s)", numberData[1], numberData[0], countryNumber[strval(numberData[3])])), !GetVehicleKindFuel(carid) ? "ДВЗ" : "Топливо");
			
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.pushVehicleItem', `[\
				{\"id\":\"%i\",\"title\":\"%s\",\"sysName\":\"%i.png\",\"status\":\"%s\",\"labels\":[\
					%s{\"title\":\"%s\",\"icon\":\"icon-id\"}]\
				}]\
			`);", idx, GetVehicleName(ShowCar[playerid][idx][1], true), 400 + SearchVehicleMassiveID(ShowCar[playerid][idx][1]), carid ? "loaded" : "notLoaded", carid ? mysql_string : "", carid ? (str_f("%i", carid)) : "Не загружена")));
		}
		else
		{ 
			if(!carid) 
				format(global_str, 1024, "%s{FF5E5E}[Не загружено]{FFFFFF} %s%s", global_str, GetVehicleName(ShowCar[playerid][idx][1], true), load ? "\t{cccccc}- загружается при входе\n" : "\n");

			else if(CarInfo[sqlid][cShtraf])
				format(global_str, 1024, "%s{FF6347}[X]{FFFFFF} %s(%d)\n", global_str, GetVehicleName(carid), carid);

			else
			{
				switch VehicleInfo[carid][vModification] do
				{
					case 548: mysql_string = "{EAD064}[Launch]{FFFFFF}";
					case 578: mysql_string = "{EAD064}[Twin Turbo]{FFFFFF}";
					case 587: mysql_string = "{EAD064}[Halloween]{FFFFFF}";
					case 951: mysql_string = "{EAD064}[PREMIUM]{FFFFFF}";
					default: mysql_string = "";
				}
				format(global_str, 1024, "%s%s%s %s(%d)%s", global_str, CarInfo[sqlid][cParkedInPark] ? "{FF6347}[Не припарковано]{FFFFFF}":"", mysql_string, GetVehicleName(carid), carid, CarInfo[sqlid][ConnectLoad] ? "\t{cccccc}- загружается при входе\n" : "\n");
			}
		}
	}

	if(GetPlayerLauncher(playerid) == 1 && dialog == 162)
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.setVehicleUsedSlot', `[%i]`);", count))),
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.setVehicleMaxSlot', `[%i]`);", ValidNumberCars(playerid)))),
		cursorPlayer(playerid, 0, true);

	else
		SPD(playerid, dialog, DIALOG_STYLE_LIST, !"Мой транспорт", global_str, !"Выбор", !"Отмена");

	return cache_delete(result);
}

stock GetPlayerBizes(playerid)
{
	new num;
    for(new i; i < OWNABLEBIZES; i++)
	{
	    if(GetString(BizData[i][bOwner], PN(playerid)) or GetString(BizData[i][bZam], PN(playerid)))
			num++;
	}

	if(PI[playerid][pVIP][0] == 8 && num < 25) return true;
	else if(PI[playerid][pVIP][0] == 7 && num < 15) return true;
	else if(PI[playerid][pVIP][0] >= 6 && num <=9) return true;
	else if(ImprovementsData[playerid][idBusinessman] == 0 && num <=1) return true;
	else if(ImprovementsData[playerid][idBusinessman] > 0 && num <=4) return true;

	return false;
}

stock GetPlayerBiz(playerid)
{
    for(new i;i<OWNABLEBIZES;i++)
	{
	    if(GetString(BizData[i][bOwner], PN(playerid)) || GetString(BizData[i][bZam], PN(playerid))) return i;
	}
	return -1;
}
cmd:showbinfo(playerid, params[])
{
	if(sscanf(params, "du", params[0], params[1])) return SCM(playerid, COLOR_OLDRED, "Используй: /showbinfo [bizid] [name/id]");
	if(params[1] == INVALID_PLAYER_ID) return false;
	if(params[0] < 0 || params[0] > OWNABLEBIZES) return false;
	if(!GetString(PN(playerid), BizData[params[0]][bOwner])) return false;
	ShowWeekBiz(params[1], params[0]);
	return false;
}

cmd:bizinfo(playerid)
{
	if(PI[playerid][pDemorgan])
    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете использовать эту команду в этом месте!");
	
	return ShowBusinessDialog(playerid);
}

cmd:agiveskin(playerid, data[])
{
	extract data -> new player:target, number; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /agiveskin [id игрока] [ид скина]");
	
	if(!(0 <= number <= 311)) return false;
	
	AddItem(target, number, 1);

	f(global_str, 150, "%s[%d] выдал вечный скин в инвентарь игроку %s[%d] №%d", PN(playerid), playerid, PN(target), target, number);
    SendAdminsMessage(COLOR_GREEN, global_str);

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> выдал вечный скин в инвентарь <a href=../pages/user?id=%d>%s</a> №%d", 5, "","", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target), number);
}

cmd:unjail(playerid, params[])
{
	if(sscanf(params, "us[48]", params[0],params[1])) 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unjail [id] [причина]");

	if(params[0] == INVALID_PLAYER_ID) 
		return false;

	if(IsAIP(params[1])) return 0;

	f(global_str, 150, " Администратор %s выпустил игрока %s, причина: %s", PN(playerid), PN(params[0]), params[1]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	
	PI[params[0]][pDemorgan] = 0;
	PlayerSpawn(params[0]);
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> выпустил игрока <a href=../pages/user?name=%s>%s</a> из деморгана. Причина: %s", 5, "", "", PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1]);
}
cmd:jail(playerid, params[])
{
    new time;
    if(sscanf(params,"uds[100]",params[0],time,params[1])) return SCM(playerid, COLOR_OLDRED, !"Используй: /jail [id] [time] [reason]");

	if(!IsPlayerOnline(params[0])) return false;

    if(IsAIP(params[1]))return 1;
    if(strlen(params[1])>30) return SCM(playerid,COLOR_RED,!"Не больше 30 символов!");
    if(PI[params[0]][pDemorgan]>0)return SCM(playerid,COLOR_RED,!"Этот игрок уже в ДЕМОРГАНЕ!");
    if(time == 0) return SCM(playerid, COLOR_RED, "Нельзя посадить на 0 минут");
    if(time> 3000) return SCM(playerid, COLOR_RED, "Нельзя посадить больше чем на 3000 минут");
    if(PI[params[0]][pDemorgan]>0 && PI[playerid][pAdmin] < 4) return SCM(playerid, COLOR_RED, !"Ваш уровень не дает возможность менять время отсидки этого игрока.");
	SetSpawnInfo(params[0], 255, 8, -799.1370,2831.1130,1501.9896, 90.0, 6, 6, 6, 6, 6, 6);
	f(global_str, 200, " Администратор %s[%d] посадил игрока %s[%d] в деморган на %d минут. Причина: %s",PN(playerid), playerid,PN(params[0]), params[0],time, params[1]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> посадил игрока <a href=../pages/user?name=%s>%s</a> в деморган на %d минут. Причина: %s",
	PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), time, params[1]);
	aml(global_str, 5, "","");
	//
	PlayerPlaySound(params[0], 1058, 0.0, 0.0, 0.0);
	_ResetGun(params[0]);
	PI[params[0]][pDemorgan] = time*60;
	PI[params[0]][pWanted] = 0;
	PI[params[0]][pPcix] ++;
	UpdatePlayerHealth(params[0],100);
	PlayerSpawn(params[0]);
	return 1;
}
cmd:take(playerid, params[])
{
	if(!IsACop(playerid) ) return SCM(playerid,COLOR_GREY, !"Вы не можете забрать лицензии");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /take [id]");
    if(PI[playerid][pRank] < 6) return SCM(playerid,COLOR_GREY, !"Вы не можете забрать лицензии");
    if(!ProxDetectorS(2.0,playerid,id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    TakeOffer[playerid] = id;
    SPD(playerid,88,2,"Что забрать","Наркотики\nПатроны\nОружие\nЛицензию","Забрать", !"Отмена");
	return 1;
}
cmd:incar(playerid, params[])
{
	new id,mesto;
	if(sscanf(params,"ud",id,mesto) || mesto < 1 || mesto > 3) return SCM(playerid, COLOR_OLDRED, !"Используй: /incar [id] [id места(1-3)]");
	if(!ProxDetectorS(4,playerid,id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	new imcop = IsACop(playerid);
	new cuffed = (imcop && Cuffed[id]);
	if( !cuffed ) return SCM(playerid, COLOR_GREY, !"Этот игрок не обездвижен");
	for(new i = 1;i < CountVehicles();i ++)
	{
		if(!IsACar(i)) continue;
		if(GetDoorsStatus(i)) continue;
		if(GetVehicleSeat(i, mesto) != INVALID_PLAYER_ID) continue;
		if( mesto > GetVehicleMaxSeat(i) ) continue;
		if( !( IsACopCar(i) && imcop )) continue;
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(i,X,Y,Z);
		if(!IsPlayerInRangeOfPoint(playerid,2.5,X,Y,Z)) continue;
		PutPlayerInVehicle(id, i, mesto);
		TogglePlayerControllable(id, false);
		f(global_str,150," %s затащил игрока %s в машину.",PN(playerid),PN(id));
		ProxDetector(25,playerid,global_str,COLOR_PURPLE);
		break;
	}
	return 1;
}

public: ChangeInterior(playerid)
{
	if(BuyInt[playerid] == 1)
	{
		InfoText[playerid] = CreatePlayerTextDraw(playerid, 400.000000, 270.000000, "_");
		PlayerTextDrawLetterSize(playerid, InfoText[playerid], 0.420000, 1.100000);
		PlayerTextDrawTextSize(playerid, InfoText[playerid], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, InfoText[playerid], 0);
		PlayerTextDrawColor(playerid, InfoText[playerid], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, InfoText[playerid], 0);
		PlayerTextDrawBoxColor(playerid, InfoText[playerid], 0x80808080);
		PlayerTextDrawSetShadow(playerid, InfoText[playerid], 1);
		PlayerTextDrawSetOutline(playerid, InfoText[playerid], 1);
		PlayerTextDrawBackgroundColor(playerid, InfoText[playerid], 0x000000FF);
		PlayerTextDrawFont(playerid, InfoText[playerid], 2);
		PlayerTextDrawSetProportional(playerid, InfoText[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, InfoText[playerid], 0);
	
	    SetPlayerInterior(playerid,IntInfo[1][iInterior]);
		SetPlayerCameraPos(playerid,IntInfo[1][iCam_X],IntInfo[1][iCam_Y],IntInfo[1][iCam_Z]); //
		SetPlayerCameraLookAt(playerid,IntInfo[1][iCamAt_X],IntInfo[1][iCamAt_Y],IntInfo[1][iCamAt_Z]); //
		
		f(global_str, 30,"Cost: $%d", IntInfo[1][iCost]);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
		ShowPlayerTD(playerid,InfoText[playerid]);
		//TextDrawShowForPlayer(playerid,Boxmenu0);
		//TextDrawShowForPlayer(playerid,Boxmenu1);
		//TextDrawShowForPlayer(playerid,Boxmenu2);
		//TextDrawShowForPlayer(playerid,Boxmenu3);
		//TextDrawShowForPlayer(playerid,ButtonRight);
		//TextDrawShowForPlayer(playerid,ButtonCancel);
		//TextDrawShowForPlayer(playerid,ButtonSelect);
		//TextDrawShowForPlayer(playerid,boxaccept);
		//TextDrawShowForPlayer(playerid,boxcancel);
		
		SelectTextDraw(playerid, -16776961); //0xFFFFFFFF
		SCM(playerid,COLOR_LIGHTBLUE,"Чтобы посмотреть следующий интерьер введите /next или нажмите {9ACD32}>");
		SCM(playerid,COLOR_LIGHTBLUE,"Чтобы посмотреть предыдущий интерьер введите /back или нажмите {9ACD32}<");
		SCM(playerid,COLOR_LIGHTBLUE,"Чтобы выбрать интерьер введите /done или нажмите {9ACD32}Select");
		SCM(playerid,COLOR_LIGHTBLUE,"Для отмены нажмите {9ACD32}Cancel");
	}
	
	return 1;
}
cmd:engine(playerid)
{
	if(!(GetPlayerState(playerid) == 2)) return false;

	else if(engines[playerid] > Global_Time) return SCM(playerid,COLOR_GREY, !"Нельзя так часто заводить двигатель");
	
	new carid = GetPlayerVehicleID(playerid);
	if(IsAVelik(carid) || IsARC(carid)) return false;
	else if(GetEngineStatus(carid) < 1)
	{
	    if(GetPlayerVirtualWorld(playerid)!=1228)
	    {
		    if(IsACar(carid) && !GetPlayerLicense(playerid, 0) && CarTest[playerid] == -1) return 0;
		    if(IsABike(carid) && !GetPlayerLicense(playerid, 1) && MotoTest[playerid] == -1) return 0;
		    if(IsABoat(carid) && !GetPlayerLicense(playerid, 3)) return 0;
	    }
	    if(Fuel[carid] > 0.0 or Fuel[carid] <= 0.0 && IsAPlane(carid))
	    {
	        if(IsASellCar(carid)) return 1;
			else if(!IsAOwnableCar(carid) && GetArendCarID(carid) != -1 && ArendInfo[GetArendCarID(carid)][aRentID] != playerid) return RemovePlayerFromVehicle(playerid);
   			else if(!IsAOwnableCar(carid) || VehicleInfo[carid][vFamily] != -1 || CarInfo[GetVehicleID(carid)][cKeyIN])
		    {
			    new Float:Health, string[50];
			    GetVehicleHealth(carid, Health);
			    if(Health > 1000) Health = 1000.0;
			    else if(Health < 400) return SCM(playerid, COLOR_GREY, !"Вы не можете завести двигатель. Для его починки вызовите механика");
			    new UNEngine = floatround(2000.0 - Health);
			    if(UNEngine < 0) UNEngine = 0;
			    else if(UNEngine > 2000) UNEngine = 2000;
			    CallTimeOutFunction("EngineVehicle", UNEngine, false, "ii", playerid, carid);
			    f(string, sizeof(string), " %s пытается завести двигатель", PN(playerid));
			    ProxDetector(25.0, playerid, string, COLOR_PURPLE);
			    engines[playerid]=Global_Time+4;
			    if(pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] == playerid) {
				    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Транспорт снят с продажи, из-за того что вы или транспорт покинули место!");
				    autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarCarID] = INVALID_VEHICLE_ID;
				    autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarplayerid] = INVALID_PLAYER_ID;
					DestroyDynamic3DTextLabel(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarText]);
					for(new z; z < 4; z++) DestroyDynamicObject(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarObject][z]);
				    DestroyDynamicArea(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarArea]);
			    	if(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarType] == 1) {
			    		UpdateDynamic3DTextLabelText(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вело/авто/мото\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
			    	}
			    	else {
			    		UpdateDynamic3DTextLabelText(autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarLabel], -1, !"Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: вертолёты\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять");
			    	}
					pTemp[playerid][pSellCar] = -1;
				}
		    }
		    else return SCM(playerid,COLOR_GREY, !"Ключи не вставлены");
	    }
	    else return SCM(playerid,COLOR_GREY, !"Нет топлива");
	}
	else
	{
		SetEngineStatus(carid,false, playerid);
		f(global_str, 70," %s заглушил(а) двигатель",PN(playerid));
		ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
		//SpeedOFF(playerid, carid, 2);
	}
	return 1;
}

cmd:live(playerid, params[])
{
	if(!IsANews(playerid)) return SCM(playerid,COLOR_RED, !"Вы не репортёр!");
	if(PI[playerid][pRank]<6)return SCM(playerid,COLOR_RED,!"Отказано в доступе! (Доступно с 6 ранга!)");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    new carid = GetPlayerVehicleID(playerid);
	if(IsANewsCar(carid) || IsPlayerInRangeOfPoint(playerid,50,-161.72, 1340.78, 1500.99))
	{
	    if(LiveOffer[playerid] != INVALID_PLAYER_ID) return 0;
	   	new id;
	    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED, !"Используй: /live [id/name]");
	    if(!IsPlayerConnected(id) || id == playerid) return 0;
        if(!IsPlayerInVehicle(id,GetPlayerVehicleID(playerid))) return 0;
	    f(global_str, 150 ,"Репортер %s предлагает вам провести с ним беседу в прямом эфире",PN(playerid));
	    SPD(id,146,0,"Беседа",global_str,"Согласен","Ненадо");
		LiveOfferID[id] = playerid;
	}
	else SCM(playerid, COLOR_GREY, !"Вы должны находится в машине радио студии или в знании новосного агентства!");
	return 1;
}

cmd:endlive(playerid, params[])
{
	if(!IsANews(playerid)) return SCM(playerid,COLOR_RED, !"Вы не репортёр!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(LiveOffer[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Недоступно в данный момент");
    new id = LiveOffer[playerid];
    static getradio[40];
    switch(PI[playerid][pMember][0])
    {
        case TEAM_RADIO: getradio = "LS";
        case TEAM_RADIOSF: getradio = "SF";
        case TEAM_RADIOLV: getradio = "LV";
        default: getradio = "";
    }
    if(!IsPlayerConnected(id) || id == playerid) return SCM(playerid, COLOR_GREY, !"Неверный id");
    TogglePlayerControllable(LiveOfferID[id], true);
    f(global_str, 200,"[Radio %s ]Репортер %s закончил беседу с %s.",getradio,PN(playerid), PN(id));
	SCMALL(COLOR_LIME, global_str);
    f(global_str, 200,"Репортер %s %s закончил беседу с вами.",getradio,PN(playerid));
	SCM(id, COLOR_GREY, global_str);
	f(global_str, 100,"Вы закончили беседу с %s.",PN(playerid));
	SCM(playerid, COLOR_GREY, global_str);
	LiveOfferID[playerid] = INVALID_PLAYER_ID;
	LiveOfferID[id] = INVALID_PLAYER_ID;
	return 1;
}

cmd:advokats(playerid)
{
	SCM(playerid, COLOR_ORANGE, !"Адвокаты онлайн:");
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerJob[i] == 6 && PI[i][pPhoneInfo][0] != 0)
			{
			    f(global_str, 68, "Адвокат %s(%d) | Номер телефона: %d", PN(i), i, PI[i][pPhoneInfo][0]);
				SCM(playerid, COLOR_LIGHTBLUE, global_str);
			}
		}
	}
	return 1;
}

stock FindOrgNumbers(playerid,id)
{
    new num = 1;
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pMember][0] == id && PI[i][pPhoneInfo][0]!=0 && TeamDuty{i})
			{
			    f(global_str, 150,"{FFFFFF}%d. {C7C4C4}%s %s(%d){FFFFFF} | Номер телефона: {C7C4C4}%d.{FFFFFF}",num,GetRankName(GetTeamID(i),PI[i][pRank]),PN(i),i,PI[i][pPhoneInfo][0]);
				SCM(playerid,-1, global_str);
				num++;
			}
		}
	}
	f(global_str,100,"{FFFFFF}\n\nВсего в онлайне %d человек.\n\n",(num-1));
	SPD(playerid,0,0,!"",global_str, !"Принять","");
	return 1;
}

stock FindJobNumbers(playerid,id)
{
    new num=1;
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerJob[i] == id && PI[i][pPhoneInfo][0]!=0)
			{
			    f(global_str, 100,"{FFFFFF}%d. {C7C4C4}%s %s(%d){FFFFFF} | Номер телефона: {C7C4C4}%d.{FFFFFF}",num,GetJobPN(id),PN(i),i,PI[i][pPhoneInfo][0]);
				SCM(playerid,-1, global_str);
				num++;
			}
		}
	}
	f(global_str,100,"{FFFFFF}\n\nВсего в онлайне %d человек.\n\n",(num-1));
	SPD(playerid,0,0,!"",global_str, !"Принять","");
	return 1;
}

cmd:cuff(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /cuff [id/name]");
 	if(IsACop(id))return SCM(playerid,COLOR_GREY, !"Нельзя надеть наручники на  полицейского");
	if(!ProxDetectorS(1.5,playerid,id)) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
	if(CuffedTime[id] <= 0 || PlayerSpeed(id)) return SCM(playerid, COLOR_GREY, !"Сначала нужно оглушить игрока");
    if(Cuffed[id]) return SCM(playerid, COLOR_GREY, !"Игрок уже скован");
    if(PlayerOfCuff[playerid] != INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Вы уже кого-то сковываете");
    if(PlayerOfCuff[id] != INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Игрока уже сковывают");
    PlayerOfCuff[playerid] = id;
    PlayerOfCuff[id] = playerid;
    TimeOfCuff[playerid] = 4;
    Recuffer[id]=playerid;
	CuffedTime[id] = 30;
    f(global_str, 150 ," %s начинает сковывать %s",PN(playerid),PN(id));
    ProxDetector(25,playerid, global_str,COLOR_PURPLE);
    ApplyAnimationEx(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, 0, 1, 1, 1, 0, 1);
	return 1;
}
cmd:uncuff(playerid, params[])
{
	if(!IsACop(playerid) && PI[playerid][pAdmin] < 1) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /uncuff [id/name]");
	if(!ProxDetectorS(2.5,playerid,id)) return SCM(playerid, -1, !"Вы далеко от игрока!");
	if(!Cuffed[id]) return SCM(playerid, -1, !"Игрок не скован");
	f(global_str, 150," %s расковал %s",PN(playerid),PN(id));
	ProxDetector(25,playerid,global_str,COLOR_PURPLE);
	Cuffed[id] = false;
	CuffedTime[id] = 0;
	Recuffer[id]=INVALID_PLAYER_ID;
	TogglePlayerControllable(id,true);
	SetPlayerSpecialAction(id, 0);
	if(GotoInfo[playerid][gtID] == id)
	{
	    CheckPlayerGoCuff(id);
		CheckPlayerGoCuff(playerid);
	}
	return 1;
}
cmd:bot(playerid, params[])
{
    if(!IsACop(playerid) && PI[playerid][pAdmin] < 1) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
    if(sscanf(params,"u",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /bot [id/name]");
    if(!ProxDetectorS(1.5,playerid,params[0])) return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	if(pTemp[params[0]][BreakCount]==0) return SCM(playerid,COLOR_RED,!"Этот игрок не пытается взломать наручники!");
    CheckBreakCuff(params[0]);
    CheckTheftCar(params[0]);
	DeleteItem(playerid, 558, GetCount(playerid, 558));
    SCM(params[0],COLOR_GREY, !"[Ошибка] {FFFFFF}У вас отобрали скрепки!");
	SCM(playerid,COLOR_VALIK, !"Вы успешно отобрали скрепки.");
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
	return 1;
}
cmd:break(playerid, params[])
{
	if(GotoInfo[playerid][gtGoID]!=INVALID_PLAYER_ID)return SCM(playerid, COLOR_GREY, !"Вы не можете использовать скрепки во время конвоя!");
	if(GetCount(playerid, 558) < 1) return SCM(playerid, COLOR_GREY, !"У вас нет скрепок");
	if(!Cuffed[playerid]) return SCM(playerid, COLOR_GREY, !"Вы не скованы");
    if(CuffedTime[playerid]) return SCM(playerid, COLOR_RED, !"Вы парализованы!");
    CheckMiner(playerid);
    CheckBreakCuff(playerid);
    CheckTheftCar(playerid);
    SetPlayerRandomKey(playerid, pTemp[playerid][BreakKey]);
    ShowPlayerActionBand(playerid, 0, 20);
    f(global_str, 100," %s достал скрепки для взлома наручников",PN(playerid));
    SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:breakcar(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы неможете двигаться");
    if(!GetCount(playerid, 5818)) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас нет отмычки, купите её в магазине автозапчастей");
	if(TheftCarID[playerid] != 0) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы уже взламываете транспорт");
    new Float:X, Float:Y, Float:Z;
    foreach(Vehicle, i)
    {
        if(OwnableCar[i] == INVALID_VEHICLE_ID) continue;
        new carid = OwnableCar[i];
        if(!IsAOwnableCar(carid)) continue;
        GetVehiclePos(carid, X, Y, Z);
        if(CarInfo[i][cLock] != 1) continue;
        if(IsABike(carid) || IsAVelik(carid) || IsAMoped(carid)) continue;
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z)) continue;
        if(!IsPlayerAimingAt(playerid, X, Y, Z, 2.0)) continue;
        CheckTheftCar(playerid);
        CheckMiner(playerid);
        CheckBreakCuff(playerid);
        TheftCarID[playerid] = carid;
        TheftCount[playerid] = 0;
        TogglePlayerControllable(playerid, false);
        ApplyAnimationEx(playerid, !"ROB_BANK", !"CAT_Safe_Rob", 4.1, 0, 1, 1, 1, 0, 1);
        SetPlayerRandomKey(playerid, TheftKey[playerid]);
        ShowPlayerActionBand(playerid, 0, 10);
		DeleteItem(playerid, 5818, 1);
        return 1;
    }
    SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Рядом с вами нету подходящего транспорта!");
    return 1;
}

cmd:freeze(playerid, params[])
{
   	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /freeze [id/name]");
	f(global_str, 128, " Администратор %s заморозил игрока %s", PN(playerid), PN(id));
	SendAdminsMessage(COLOR_YELLOW, global_str);
	TogglePlayerControllable(id, Controllable{id} = false);
	return 1;
}

cmd:unwarn(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /unwarn [id/name]");
	if(params[0] == playerid) return 1;
	if(!PI[params[0]][pWarns])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У него нет предупреждений!");

	f(global_str, 106, " Администратор %s снял 1 варн игроку %s", PN(playerid), PN(params[0]));
	SendAdminsMessage(COLOR_YELLOW, global_str);
	SCM(params[0], COLOR_GREEN, !"[Информация] {FFFFFF}Администратор снял вам 1 предупреждение!");
	PI[params[0]][pWarns] -= 1;

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> снял warn игроку <a href=../pages/user?id=%d>%s</a> %d/3.", 5, "", "", PI[playerid][pID], PN(playerid), PI[params[0]][pID], PN(params[0]), PI[params[0]][pAWarns]);
}

cmd:unfreeze(playerid, params[])
{
	new
	    targetid;

	if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unfreeze [id/name]");

	f(global_str, 125, " Администратор %s разморозил игрока %s", PN(playerid), PN(targetid));
	SendAdminsMessage(COLOR_YELLOW, global_str);
	TogglePlayerControllable(targetid, Controllable{targetid} = true);
	return 1;
}
cmd:clear(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
    if(PI[playerid][pRank] < 5) return SCM(playerid,COLOR_GREY, !"Ваш ранг мал для этой операции. Необходим 5-й ранг.");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    new id;
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /clear [id/name]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_RED, !"Неверный id игрока!");
    PI[id][pWanted] = 0;
    SetPlayerWantedLevel(id, 0);
    f(global_str, 100,"Полицейский %s очистил розыск %s[%i]",PN(playerid), PN(id), id);
    SendCopsMessage(COLOR_LIGHTBLUE,global_str);
    f(global_str, 100,"Полицейский %s очистил ваш розыск",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,global_str);
    f(global_str, 100,"Вы очистили розыск %s[%i]",PN(id), id);
    SCM(playerid,COLOR_LIGHTBLUE,global_str);
	return 1;
}
cmd:setskin(playerid, params[])
{
    new id, skin, oll;
    if(sscanf(params, "udd", id, skin, oll)) return SCMF(playerid, COLOR_OLDRED, "Используй: /setskin [id] [1 - %i] [0/1]", IsOsnovatel(playerid) ? skins_data[sizeof(skins_data)-1][skinID] : 311);
    if(oll == 1 && PI[playerid][pAdmin] < 5) return SCM(playerid, COLOR_RED, !"Ты не можешь выдать вечный скин!");
	if(skin > 311 && !IsOsnovatel(playerid)) return false;
   	if(!(1 <= skin <= skins_data[sizeof(skins_data)-1][skinID]) || !IsPlayerConnected(id) || oll < 0 || oll > 1) return false;

	if(oll)
		PI[id][pSkin][0] = skin;

	SetPlayerSkinEx(id, skin);
	SCMF(id, COLOR_RED, "Администратор %s выдал вам %s скин.", PN(playerid), oll ? "вечный" : "временный");
    f(global_str, 150, "[A] %s[%d] установил %s скин [ID: %d] игроку %s[%d]", PN(playerid), playerid, oll ? "вечный" : "временный", skin, PN(id), id);
	SendAdminsMessage(COLOR_GREY, global_str);
	SCMF(playerid, -1, "Вы дали %s скин %d", PN(id), skin);
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> установил %s скин %d игроку <a href=../pages/user?name=%s>%s</a>.", 5, "","", PN(playerid), PN(playerid), oll ? "вечный":"временный", skin, PN(id), PN(id));
}
cmd:givemoney(playerid, params[])
{
	if(!IsOsnovatel(playerid)) return false;

	new
		id,
		money;

    if(sscanf(params, "ud", id, money))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /givemoney [id/name] [money]");

    if(id == INVALID_PLAYER_ID)
		return false;

	GiveMoney(id, money);
	return SCMF(playerid, -1, "Вы дали игроку %s $%d", PN(id), money);
}

cmd:givedonate(playerid, params[])
{
	if(!IsOsnovatel(playerid)) return false;

	new
		id,
		money;

    if(sscanf(params, "ud", id, money))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /givedonate [id/name] [money]");

    if(id == INVALID_PLAYER_ID)
		return false;

	GiveDonate(id, money);
	SAMF(COLOR_OLDRED, "Администратор %s[%d] выдал %d AZ-Coins игроку %s[%d] !", PlayerName[playerid], playerid, money, PlayerName[id], id);
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> выдал %d AZ-Coins игроку <a href=../pages/user?id=%d>%s</a>", 5, "", "", PI[playerid][pID], PlayerName[playerid], money, PI[id][pID], PlayerName[id]);
}

cmd:giverub(playerid, params[])
{
	if(!IsOsnovatel(playerid)) return false;

	new
		id,
		money;

    if(sscanf(params, "ud", id, money))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /giverub [id/name] [money]");

    if(id == INVALID_PLAYER_ID)
		return false;

	GiveRoubles(id, money);
	SAMF(COLOR_OLDRED, "Администратор %s[%d] выдал %d AZ-Рублей игроку %s[%d] !", PlayerName[playerid], playerid, money, PlayerName[id], id);
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> выдал %d AZ-RUB игроку <a href=../pages/user?id=%d>%s</a>", 5, "", "", PI[playerid][pID], PlayerName[playerid], money, PI[id][pID], PlayerName[id]);
}

cmd:id(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid)) return SCM(playerid, COLOR_OLDRED, !"Используй: /id [id/name]");

    new insert_pos, i, LauncherName[3][18] = {"без лаунчера", "лаунчер", "мобильный лаунчер"};

	if(!IsNums(params) && strlen(params) < 3) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Введите минимум 3 символа для поиска!");
	if(!IsNums(params))
	{
		foreach(Player, id)
		{
			if(IsPlayerNPC(id)) continue;

			GetPlayerName(id, global_str, 25);

			insert_pos = strfind(global_str, params, true);
			if(!(insert_pos == -1))
			{
				strins(global_str, "{FFFFFF}", strlen(params) + insert_pos);
				strins(global_str, "{FF8888}", insert_pos);
				f(global_str, 128, "[%d] %s | Уровень: %d | UID: %d | packetloss: %0.2f (%s)", id, global_str, PI[id][pLevel], PI[id][pID], NetStats_PacketLossPercent(id), LauncherName[GetPlayerLauncher(id)]);
				SCM(playerid, -1, global_str);
				i++;
			}
		}
	}
	else if(!(targetid == INVALID_PLAYER_ID) && !IsPlayerNPC(targetid))
		return SCMF(playerid, -1, "[%d] %s | Уровень: %d | UID: %d | packetloss: %0.2f (%s)", targetid, PN(targetid), PI[targetid][pLevel], PI[targetid][pID], NetStats_PacketLossPercent(targetid), LauncherName[GetPlayerLauncher(targetid)]);
	
	if(!i) SCMF(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Игрок \'%s\' не найден!", params);
    return true;
}

cmd:admins(playerid)
{
	new afkPlayer, playerCount;

	foreach(Admin, i)
		if(PlayerAFKTime[i][0] > 0)
			afkPlayer++;

 	SCMF(playerid, 0x33CC00FF, "Администрация в сети (%d чел. | %i в AFK):", Iter_Count(Admin), afkPlayer);

	foreach(Admin, i)
	{
		if(!PI[i][pAdmin]) 
			continue;

		SCMF(playerid, COLOR_YELLOW, "%i) %s[%i]{ffffff} - %s%s{ffffff} - AFK: %i - Rep: %i", playerCount + 1, PN(i), i, SERIU[i][sID] != INVALID_PLAYER_ID ? (str_f("{ff6666}/re [%i]{ffffff} - ", SERIU[i][sID])) : "", GetString(AdminInfo[i][admTag], "None") ? Admin_Names[PI[i][pAdmin]] : (str_f("{%s}%s", AdminInfo[i][admTagColor], AdminInfo[i][admTag])), PlayerAFKTime[i], PI[i][pAdmRep]);
		playerCount++;
	}

	return true;
}

cmd:boom(playerid)
{
	if(!(AksSlot[playerid][0][5] == 348) && !(AksSlot[playerid][0][5] == 334))
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет бумбокса/колонки!");

	else if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете поставить бумбокс в машине!");

	if(bumboxobject[playerid])
	{

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
			return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы слишком далеко от бумбокса/колонки!");

		DestroyDynamic3DTextLabel(bumbox3D[playerid]);
		DestroyDynamicObject(bumboxobject[playerid]);
		boombox[playerid] = RadioID[playerid] = bumboxobject[playerid] = 0;
		
		foreach(Player,i)
		{
			if(IsPlayerInRangeOfPoint(playerid,30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
				StopAudioStreamForPlayerFix(i);
		}

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);
		return SCM(playerid, COLOR_RED, "[Информация] {ffffff}Вы забрали свой бумбокс/колонку!");
	}
	else
	{
		foreach(new i: Player)
		{
			if(!bumboxobject[i]) continue;
			
			if(IsPlayerInRangeOfPoint(playerid, 30.0, BumBoxPos[i][0], BumBoxPos[i][1], BumBoxPos[i][2]))
			    return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Кто-то по близости уже поставил бумбокс/колонку!");
   		}

		GetPlayerPos(playerid, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]);
		ApplyAnimationEx(playerid, !"BOMBER", !"BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
		SCM(playerid, COLOR_GREEN, !"Вы успешно установили бумбокс на пол.");
		SCM(playerid, COLOR_GREEN, !"Для того чтобы открылся плейлист, нажмите ALT у бумбокса.");
		SetPlayerChatBubble(playerid, (AksSlot[playerid][0][5] == 348) ? ("Положил бумбокс на землю") : ("Положил колонку на землю"), COLOR_PURPLE, 10.0, 5000);
		BumBoxPos[playerid][0] += 1.0;
	 	BumBoxPos[playerid][1] += 1.0;
	  	BumBoxPos[playerid][2] -= 1.0;
		bumboxobject[playerid] = CreateDynamicObject(ItemsInfo[ AksSlot[playerid][0][5] ][itemModel], BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2], 0.0, 0.0, 0.0);
		area_boombox[playerid] = CreateDynamicCircle(BumBoxPos[playerid][0], BumBoxPos[playerid][1], 30.0, 0, 0, -1);
        
        f(global_str, 60, "Поставил: {FFFFFF}%s", PN(playerid));
        bumbox3D[playerid] = CreateDynamic3DTextLabel(global_str, 0x3c7d4cFF, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2], 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
	    RemovePlayerAttachedObject(playerid, 5);
	    boombox[playerid] = 1;
	}

	return true;
}

cmd:leaders(playerid)
{
    SCM(playerid, COLOR_RED, !"Лидеры онлайн:");
    foreach(new i: Player)
	{
        if(!PI[i][pMember][1]) continue;
        
        if(!PlayerAFKTime[i][0])
			SCMF(playerid, -1, "{FFFFFF}%s[%i] - %s | Номер: %s", PN(i), i, OrgInfo[PI[i][pMember][1]][oName], PI[i][pPhoneInfo][0] ? IntToStr(PI[i][pPhoneInfo][0]) : "Не имеется");
			
        else SCMF(playerid, -1, "{FFFFFF}%s[%i] - %s | Номер: %s{FFFFFF} | AFK: %i секунд", PN(i), i, OrgInfo[PI[i][pMember][1]][oName], PI[i][pPhoneInfo][0] ? IntToStr(PI[i][pPhoneInfo][0]) : "Не имеется", PlayerAFKTime[i]);
    }
    return SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF}Используйте /phone - menu, чтобы найти членов организаций.");
}
cmd:help(playerid)
{
    return ShowPlayerDialogEx(playerid, 64, DIALOG_STYLE_LIST, !"Помощь по серверу",
		!"{B03131}Частые вопросы\n\
		{AFAFAF}[CMD] Телефон\n\
		{AFAFAF}[CMD] Работа\n\
		{AFAFAF}[CMD] Организация\n\
		{AFAFAF}[CMD] Дом\n\
		{AFAFAF}[CMD] Бизнес\n\
		{AFAFAF}[CMD] Личный транспорт\n\
		{AFAFAF}[CMD] Транспорт\n\
		{AFAFAF}[CMD] Анимации\n\
		{AFAFAF}[CMD] Чаты\n\
		{AFAFAF}[CMD] Админ\n\
		{AFAFAF}[CMD] Похищение\n\
		{AFAFAF}[CMD] Другое\n\
		{AFAFAF}[FAQ] Скиллы оружий\n\
		{AFAFAF}[FAQ] Работа\n\
		{B03131}[FAQ] Правила сервера\n\
		{B03131}[FAQ] Преимущества VIP/GOLD\n\
		{AFAFAF}[FAQ] Однорукий бандит\n\
		{B03131}[INFO] Сайт/Форум/VK\n\
		{AFAFAF}[INFO] Ответы на тесты\n\
  		{AFAFAF}[FAQ] Воровство материалов\n\
		{AFAFAF}[FAQ] Развитие на ферме\n\
		{AFAFAF}[FAQ] Банковская карта\n\
		{AFAFAF}[FAQ] Рыболовля\n\
		{AFAFAF}[FAQ] Ограбление матовозов\n\
		{AFAFAF}[FAQ] Багажник\n\
		{AFAFAF}[FAQ] Наркопритоны и Банды\n\
		{AFAFAF}[FAQ] Здоровье\n\
		{AFAFAF}[CMD] Семья",
		!"Выбор", !"Отмена");
}
cmd:settings(playerid) 
	return ShowUpdateSettings(playerid);

cmd:stats(playerid) 
	return ShowStats(playerid, playerid);

alias:menu("mm", "mn");
cmd:menu(playerid)
{
    if(pTemp[playerid][tSkinSelectedId] != -1 || BuyInt[playerid] != -1 || BuyGuns[playerid] != -1 || Buyitem[playerid] != -1) return 0;
	if(CuffedTime[playerid]) return SCM(playerid, COLOR_RED, !"Вы обездвижены и не можете двигаться");
	if(Cuffed[playerid]) return SCM(playerid, COLOR_RED, !"Вы скованы и не можете двигаться");

    SetString(global_str, GetPlayerUsePromo(playerid));

	f(global_str, 1024, "\
	{ff6666}[1]{FFFFFF} Действия персонажа\n\
	{ff6666}[2]{FFFFFF} Навыки персонажа\n\
	{ff6666}[3]{FFFFFF} Связь с администрацией\n\
	{ff6666}[4]{FFFFFF} Помощь по серверу\n\
	{ff6666}[5]{FFFFFF} Личные настройки\n\
	{ff6666}[6]{FFFFFF} Донат\n\
	{ff6666}[7]{FFFFFF} Телефон\n\
	{ff6666}[8]{FFFFFF} История ников\n\
	{ff6666}[9]{FFFFFF} История наказаний\n\
	{ff6666}[10]{FFFFFF} Премиум игроки онлайн\n\
	{ff6666}[11]{FFFFFF} Промо-код: {D2772C}%s{FFFFFF}\n\
	{ff6666}[12]{FFD700} Текущий VIP-статус", !isnull(global_str) ? global_str: "Не использован");
	return SPD(playerid, 722, DIALOG_STYLE_LIST, !"Игровое меню", global_str, !"Выбор", !"Отмена");
}

cmd:farmhelp(playerid) return SPD(playerid, 15188, DIALOG_STYLE_LIST, !"Фермерская деятельность", !"Общая информация\nКак работать на ферме?\nКак управлять фермой?\nСписок растений и время роста", !"Выбрать", !"Закрыть");
cmd:jobhelp(playerid) return ShowJobInfo(playerid, PlayerJob[playerid]);

cmd:quitjob(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 100.0, 2093.2317,797.1243,1027.1211))
		return SCM(playerid, COLOR_GREY, !"Уволится с работы можно только в центре занятости!");

	else if(PlayerJob[playerid] == JOB_NONE)
		return SCM(playerid, COLOR_GREY, !"Вы и так уже безработный.");

    else if(InJob[playerid] != 0)
		return SCM(playerid, COLOR_GREY, !"В данный момент вы работаете. Закончите работу и введите /quitjob");

    PlayerJob[playerid] = JOB_NONE;
    SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно уволились с работы.");
    _ResetGun(playerid);
    UpdatePlayerArmour(playerid, 0);
    ResetDynamicCPs(playerid);
	return 1;
}
cmd:unmute(playerid, params[])
{
	if(sscanf(params, "us[150]", params[0], params[1])) return SCM(playerid, COLOR_OLDRED, !"Используй: /unmute [id] [reason]");
	if(params[0] == INVALID_PLAYER_ID) return 0;
	if(PI[params[0]][pMuteTime]==0) return SCM(playerid, COLOR_RED, !"У игрока нету мута!");
	
	f(global_str, 144, " Администратор %s снял заглушку с игрока %s, причина: %s", PN(playerid), PN(params[0]), params[1]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	
	PI[params[0]][pMuteTime] = 0;
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> снял заглушку с игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1]);
}
cmd:getherecar(playerid, params[])
{
	extract params -> new car; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /getherecar [id]");

	new
	    Float:X,
	    Float:Y,
	    Float:Z;

    GetPlayerPos(playerid, X, Y, Z);
    LinkVehicleToInterior(car, GetPlayerInterior(playerid));
    SetVehicleVirtualWorld(car, GetPlayerVirtualWorld(playerid));
    SetVehiclePos(car, X - 4, Y, Z + 1);
	
    SCMF(playerid, COLOR_LIGHTBLUE, "Вы телепортировали к себе авто, index: %d", car);
	
    f(global_str, 150, "[%s] Телепортировал к себе авто, index: %d", PN(playerid), car);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}
cmd:gethere(playerid, params[])
{
	new
		id,
		Float:X,
		Float:Z,
		Float:Y,
		Float:A;

    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /gethere [id]");
    if(id == INVALID_PLAYER_ID) return 0;
	if(AdminInfo[id][admGethere])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данный администратор запретил телепортировать его к себе!");

    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerFacingAngle(playerid, A);
    ShiftCords(0, X, Y, A, 3.0);

    SetPlayerVirtualWorld(id,GetPlayerVirtualWorld(playerid)), SetPlayerInterior(id,GetPlayerInterior(playerid));

    if(GetPlayerState(id) != 2) UpdatePlayerPos(id, X, Y, Z);
    else SetVehiclePos(GetPlayerVehicleID(id), X, Y, Z);
    
    BizEntered[id] = BizEntered[playerid];
    HouseEntered[id] = HouseEntered[playerid];
    ParkingEntered[id] = ParkingEntered[playerid];
    
	SCMF(id, COLOR_LIGHTBLUE, " Вы были телепортированы администратором  %s",PN(playerid));
    SCMF(playerid, COLOR_LIGHTBLUE, "Вы телепортировали к себе игрока %s",PN(id));
    
	f(global_str, 150,"[%s] Телепортировал к себе игрока %s[%d]",PN(playerid),PN(id),id);
	SendAdminsMessage(COLOR_GREY, global_str);

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> телепортировал к себе игрока <a href=../pages/user?id=%d>%s</a>.", 5, "", "", PI[playerid][pID], PN(playerid),  PI[params[0]][pID], PN(params[0]));
}
cmd:getwarn(playerid, params[])
{
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /getwarn [id]");
    f(global_str,300,"Игрок: %s\n___________________\n\n\nДеморган: %d\nЗаглушка: %d\nВарны: %d\n\n___________________",PN(params[0]),PI[params[0]][pDemorgan],PI[params[0]][pMuteTime],PI[params[0]][pWarns]);
    SPD(playerid,0,0,!"",global_str, !"Закрыть","");
	return 1;
}
cmd:spcar(playerid, params[])
{	
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /spcar [id]");
	f(global_str, 90,"[A] %s[%d] зареспавнил авто под id: %d",PN(playerid),playerid,params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	SetVehicleToRespawn(params[0]);
	return 1;
}
/*cmd:rasform(playerid)
{
	for(new i = 1; i < GANGZONES; i++)
	{
		UpdateDorm(GangZoneInfo[i][gangOwnerId]);
		GangZoneInfo[i][gangOwnerId] = 0;
		GangZoneHideForAll(GangZone[i]);
		GangZoneShowForAll(GangZone[i], TeamColors[0][0]);
		SaveGangZone(i);
	}
	SCM(playerid, COLOR_VALIK, !"Вы успешно перекрасили все территории");

	f(global_str, 150, "Администратор <a href=../pages/user?id=%d>%s</a>. сделал РАСФОРМ GANGZONE", PI[playerid][pID], PN(playerid));
	aml(global_str, 5, "", "");
	return 1;
} */

cmd:buydrugs(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /buydrugs [количество]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(params[0]<1)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
            if(GLS[45]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[50]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[50]*params[0]));
            GLS[45]-=params[0];
            GLS[60]+=GLS[50]*params[0];
            SaveInformation();
			AddItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            if(GLS[46]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[51]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[51]*params[0]));
            GLS[46]-=params[0];
            GLS[61]+=GLS[51]*params[0];
            SaveInformation();
            AddItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            if(GLS[47]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[52]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[52]*params[0]));
            GLS[47]-=params[0];
            GLS[62]+=GLS[52]*params[0];
            SaveInformation();
            AddItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            if(GLS[48]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[53]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[53]*params[0]));
            GLS[48]-=params[0];
            GLS[63]+=GLS[53]*params[0];
            SaveInformation();
            AddItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
            if(GLS[49]<params[0])return SendBotMessage(playerid,"Брат, сорян но у меня уже нет товара!");
            if(PI[playerid][pMoney]<(GLS[54]*params[0]))return SendBotMessage(playerid,"Брат, у тебя же нет денег чтобы мне заплатить!");
            GiveMoney(playerid,-(GLS[54]*params[0]));
            GLS[49]-=params[0];
            GLS[64]+=GLS[54]*params[0];
            SaveInformation();
            AddItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свою траву!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:selldrugs(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /selldrugs [количество]");
    if(GetCount(playerid, 510)<params[0]) return SendBotMessage(playerid,"Брат, ну у тебя же нету столько товара на продажу!");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(params[0]<1)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
            if(GLS[60]<(params[0]*GLS[55])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[55]*params[0]));
            GLS[60]-=(GLS[55]*params[0]);
            GLS[45]+=params[0];
            SaveInformation();
			DeleteItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            if(GLS[61]<(params[0]*GLS[56])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[56]*params[0]));
            GLS[61]-=(GLS[56]*params[0]);
            GLS[46]+=params[0];
            SaveInformation();
            DeleteItem(playerid, 510, params[0]);
           	SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            if(GLS[62]<(params[0]*GLS[57])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[57]*params[0]));
            GLS[62]-=(GLS[57]*params[0]);
            GLS[47]+=params[0];
            SaveInformation();
            DeleteItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            if(GLS[63]<(params[0]*GLS[58])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[58]*params[0]));
            GLS[63]-=(GLS[58]*params[0]);
            GLS[48]+=params[0];
            SaveInformation();
            DeleteItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
            if(GLS[64]<(params[0]*GLS[59])) return SendBotMessage(playerid,"Брат, сорян но у меня нет денег чтобы тебе заплатить!");
            GiveMoney(playerid,(GLS[59]*params[0]));
            GLS[64]-=(GLS[59]*params[0]);
            GLS[49]+=params[0];
			SaveInformation();
            DeleteItem(playerid, 510, params[0]);
            SendBotMessage(playerid,"Вот, держи свои деньги!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:putmoney(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /putmoney [количество]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(CanUse[playerid]==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не имеете возможности управлять этим наркопритоном!");
    if(PI[playerid][pMoney]<params[0]) return SendBotMessage(playerid,"Брат, как ты мне можешь дать столько денег, если у тебя их нет?");
    if(params[0]<1)return 1;
	if(params[0]>5000000) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете за раз взять столько денег!");
    if(PI[playerid][pRank]<9)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
			GiveMoney(playerid,-params[0]);
			SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
			GLS[60]+=params[0];
			SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость продажи наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            GiveMoney(playerid,-params[0]);
            SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
            GLS[61]+=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            GiveMoney(playerid,-params[0]);
            SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
            GLS[62]+=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            GiveMoney(playerid,-params[0]);
            SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
            GLS[63]+=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
            GiveMoney(playerid,-params[0]);
            SendBotMessage(playerid,"Воу, норм теперь мы сможем скупать траву!");
            GLS[64]+=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:setdbuy(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /setdbuy [Стоимость продажи наркотиков]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(CanUse[playerid]==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не имеете возможности управлять этим наркопритоном!");
    if(params[0]<1)return 1;
    if(params[0]>5000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену!");
    if(PI[playerid][pRank]<9)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
			SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
			GLS[50]=params[0];
			SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
            GLS[51]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
            GLS[52]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
            GLS[53]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
           	SendBotMessage(playerid,"Окей, теперь наркопритон будет скупать траву по такой цене!");
            GLS[54]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}

cmd:setdsell(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /setdsell [Стоимость скупки наркотиков]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(CanUse[playerid]==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не имеете возможности управлять этим наркопритоном!");
    if(params[0]<1)return 1;
    if(params[0]>5000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете установить такую цену!");
    if(PI[playerid][pRank]<9)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
			SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
			GLS[55]=params[0];
			SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость покупки наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
            GLS[56]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
            SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
            GLS[57]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость продажи наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
            GLS[58]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
           	SendBotMessage(playerid,"Окей, будем продавать траву по такой цене!");
            GLS[59]=params[0];
            SaveInformation();
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:iwep(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /iwep [id]");

	global_str = "На данный момент у игрока имеется данный вид оружия, которое он получил без помощи читов:\n\n";
    for(new i = 0; i < 13; i++)
	{
	    if(PI[target][pGuns][i] > 0 && PI[target][pAmmos][i] > 0)
	    		f(global_str, 300,"%s\nID оружия/патроны - %d[%d]", global_str, PI[target][pGuns][i], PI[target][pAmmos][i]);
	}
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Принять", !"");
	return 1;
}
cmd:dropgun(playerid, param[])
{
    if(IsPlayerInAnyVehicle(playerid)) return 0;
	new weapon = GetPlayerWeaponEx(playerid);
	new ammo = GetPlayerAmmoEx(playerid);
	new slot = GetWeaponSlotEx(weapon);
	if(ammo < 1 ) return 0;
	if(weapon < 1) return SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}У тебя в руках нет оружия");
	if(PI[playerid][pGuns][GetWeaponSlotEx(weapon)] != weapon)return 0;
	if(PI[playerid][pAmmos][slot] != GetPlayerAmmoEx(playerid))return 0;
    new Float:x, Float:y, Float:z,Float:eagle;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,eagle);
	new idgun;
	switch(weapon)
    {
        case 17:idgun=343;
		case 22:idgun=346;
		case 23:idgun=347;
		case 24:idgun=348;
		case 25:idgun=349;
		case 28:idgun=352;
		case 29:idgun=353;
		case 30:idgun=355;
		case 31:idgun=356;
		case 32:idgun=372;
		case 33:idgun=357;
		case 34:idgun=358;
		case 42:idgun=366;
		case 43:idgun=367;
		default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Это оружие нельзя выкинуть!");
    }
	new idobject=-1;
    for(new i;i<MAX_DGUNS;i++)
    {
        if(dguns[i]==-1)
		{
 			idobject=i;
	 		break;
		}
    }
    if(idobject==-1)
    {
        new min1=Global_Time;
        for(new i;i<MAX_DGUNS;i++)
        {
            if(dguntime[i]<min1)
            {
                min1=dguntime[i];
                idobject=i;
            }
        }
        DestroyDynamicObject(dguns[idobject]);
    }
    dguntime[idobject]=Global_Time;
    dpatrons[idobject]=ammo;
    dgunn[idobject]=weapon;
    dguns[idobject] = CreateDynamicObject(idgun, x, y, z-0.97, 96, 110, eagle, GetPlayerVirtualWorld(playerid));
	_GiveGun(playerid,weapon,-ammo);
	PI[playerid][pGuns][slot] = 0;
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2, 0, 0, 0, 0, 0);
	SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы положили оружие на землю.");
	PI[playerid][pLastGun]=0;
	PI[playerid][pLastAmmo]=0;
    return 1;
}
cmd:firewood(playerid)
{
    if(Cuffed[playerid])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");

	if(IsANotControllable(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете двигаться!");

	if(GetCount(playerid, 566) < 1)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет дров! Купить их можно в магазине АЗС!");

    if(GetCount(playerid, 562) < 1)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет зажигалки! Купить можно в магазине 24/7!");

	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Использовать в здании запрещено!");

    if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В транспорте нельзя");

	if(IsPlayerToKvadrat(playerid, 850, 590, 2914, 2902) || IsPlayerToKvadrat(playerid, -2918, -1010, -1210, 1378) || IsPlayerToKvadrat(playerid, 82, -1882, 2906, -870) || IsPlayerToKvadrat(playerid, 1358, -2742, 2910, -1882))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В городе нельзя розжигать костры!");

	new
		Float:x,
		Float:y,
		Float:z,
		Float:a;
	for(new i; i < MAX_WOODS; i++)
	{
	    if(wwoods[i] != -1)
	    {
	        GetDynamicObjectPos(wwoods[i], x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 2, x, y, z))
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете здесь розжечь костер, так как рядом уже есть один!");
		}
	}
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

	new
		idobject = -1;
    for(new i; i < MAX_WOODS; i++)
    {
        if(wwoods[i] == -1)
		{
 			idobject = i;
	 		break;
		}
    }
    if(idobject == -1)
    {
        new min1 = Global_Time;
        for(new i; i < MAX_WOODS; i++)
        {
            if(wwoodtime[i] < min1)
            {
                min1 = wwoodtime[i];
                idobject = i;
            }
        }
        DestroyDynamicObject(wwoods[idobject]);
    }
    wwoodtime[idobject] = Global_Time;
   	wwTimer[idobject] = 1800;
    wwoods[idobject] = CreateDynamicObject(19632, x, y, z - 1.0, 0, 0, a);
	wOwner[idobject] = PN(playerid);

    f(global_str, 125, "Костер\nРазжёг: %s\n{FFFFFF}Горит. Осталось: {FAAC58}%d {FFFFFF}минут(ы).\n\nПожарить рыбу: /cook", wOwner[idobject],floatround(float(wwTimer[idobject]) / 60.0));
	wwText[idobject] = CreateDynamic3DTextLabel(global_str, -1, x, y, z, 4.0);

	DeleteItem(playerid, 1256, 1);
 	ApplyAnimationEx(playerid, !"CHAINSAW", !"CSAW_G", 4.0, 0, 0, 0, 0, 0, 1);
 	GameTextForPlayer(playerid, !"SUCCESSFUL", 0, 1);
	return 1;
}
cmd:cook(playerid, params[])
{
    new
		Float:x[MAX_WOODS],
		Float:y[MAX_WOODS],
		Float:z[MAX_WOODS],
		count;
    for(new i; i < MAX_WOODS; i++)
    {
		GetDynamicObjectPos(wwoods[i], x[i], y[i], z[i]);
        if(IsPlayerInRangeOfPoint(playerid, 2.0, x[i], y[i], z[i])) {
			count ++;
		}
    }
    if(!count)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Возле вас нет костра!");


    for(new i; i < 5; i ++)
    {
        if(!PlayerFish[playerid][i])
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет рыбы!");

        PlayerFish[playerid][i] --;
        break;
    }
    AddItem(playerid, 549, 1);
    GameTextForPlayer(playerid, !"fried fish + 1", 0, 1);
    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Вы успешно приготовили {9ACD32}1{ffffff}-ну жаренную рыбу!\nЧтобы покушать, используйте {9ACD32}/eat{FFFFFF}!", !"Понял", !"");
    return 1;
}
cmd:drug(playerid, params[])
{
	if(GetPlayerWeaponEx(playerid)!=6)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам нужна лопата чтобы посадить коноплю, купить ее можно в магазине механики!");
    if(!IsAtGang(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Садить коноплю могут только члены банд!");

    if(!IsPlayerToKvadrat(playerid,2163.3979,-1697.2588,  2166.3228,-1687.7272) && !IsPlayerToKvadrat(playerid,2165.2397,-1510.9233,  2171.0142,-1504.9988) &&
    !IsPlayerToKvadrat(playerid,1790.4725,-2014.1749,  1799.6927,-2004.0822) && !IsPlayerToKvadrat(playerid,1790.5725,-1989.2954,  1799.8381,-1978.8665) &&

    !IsPlayerToKvadrat(playerid,2306.3516,-2008.3705,  2320.1846,-2005.4993) && !IsPlayerToKvadrat(playerid,2351.5613,-1926.0016,  2360.9636,-1915.7379) &&
    !IsPlayerToKvadrat(playerid,2351.4980,-1904.1448,  2360.9351,-1893.7114)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Посадить семена можно только на огороде возле наркопритона!");
	///////////////
	if(IsPlayerInAnyVehicle(playerid)) return 0;
	if(PI[playerid][pD_Packets]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Для того чтобы посадить коноплю, необходимо иметь семя, которые можно найти в лесу за городом");
	new zone = GetPlayerGangZone(playerid),num=0;
	if(GangZoneInfo[zone][gangOwnerId] != PI[playerid][pMember][0]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Посадить коноплю можно только в своем наркопритоне!");
	//////////
	new Float:x, Float:y, Float:z,Float:eagle;
	for(new i;i<MAX_NARKO;i++)
	{
	    if(ddrugs[i]!=-1)
	    {
	        GetDynamicObjectPos(ddrugs[i],x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,2,x,y,z)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете здесь посадить коноплю, так как рядом есть уже саженец/конопля.");
			if(IsPlayerInRangeOfPoint(playerid,20,x,y,z)) num++;
		}
	}
	if(num>4)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}На этом огороде растет больше 5-ти саженцев! Соберите урожай или сажайте на другом огороде!");
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,eagle);
	new idgun = 859;

	new idobject=-1;
    for(new i;i<MAX_NARKO;i++)
    {
        if(ddrugs[i]==-1)
		{
 			idobject=i;
	 		break;
		}
    }
    if(idobject==-1)
    {
        new min1=Global_Time;
        for(new i;i<MAX_NARKO;i++)
        {
            if(ddrugtime[i]<min1)
            {
                min1=ddrugtime[i];
                idobject=i;
            }
        }
        DestroyDynamicObject(ddrugs[idobject]);
    }
    ddrugtime[idobject]=Global_Time;
   	ddTimer[idobject] = 5000;//изменить
    ddrugs[idobject] = CreateDynamicObject(idgun, x,y,z-1.0,0, 0, eagle);


    f(global_str, 256, "Саженец конопли\nВ процессе созревания. Осталось: {FAAC58}%d{FFFFFF} минут(ы).",floatround(float(ddTimer[idobject])/60.0));
	ddText[idobject] = CreateDynamic3DTextLabel(global_str,-1,x, y, z,4.0);

	PI[playerid][pD_Packets]--;
 	ApplyAnimationEx(playerid,"CHAINSAW","CSAW_G",4.0,0,0,0,0,0,1);
 	GameTextForPlayer(playerid, "planted", 0, 1);
	return 1;
}
cmd:getmoney(playerid, params[])
{
    if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /getmoney [количество]");
    if(!IsPlayerInRangeOfPoint(playerid,10,331.9075,1119.5465,1083.8903)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    if(CanUse[playerid]==0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не имеете возможности управлять этим наркопритоном!");
	if(params[0]<1)return 1;
	if(PI[playerid][pRank]<9)return 1;
    switch(GetPlayerVirtualWorld(playerid))
    {
        case 1:
        {
            if(GLS[60]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
			GiveMoney(playerid,params[0]);
			GLS[60]-=params[0];
			SaveInformation();
			SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
            UpdateDynamic3DTextLabelText(NarkoText[0], COLOR_WHITE, global_str);
        }
        case 2:
        {
            if(GLS[61]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
            GiveMoney(playerid,params[0]);
            GLS[61]-=params[0];
            SaveInformation();
            SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
            UpdateDynamic3DTextLabelText(NarkoText[1], COLOR_WHITE, global_str);
        }
        case 3:
        {
        	if(GLS[62]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
            GiveMoney(playerid,params[0]);
            GLS[62]-=params[0];
            SaveInformation();
            SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str,450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
            UpdateDynamic3DTextLabelText(NarkoText[2], COLOR_WHITE, global_str);
        }
        case 4:
        {
            if(GLS[63]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
            GiveMoney(playerid,params[0]);
            GLS[63]-=params[0];
            SaveInformation();
            SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str,450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
            UpdateDynamic3DTextLabelText(NarkoText[3], COLOR_WHITE, global_str);
        }
        case 5:
        {
            if(GLS[64]<params[0]) return SendBotMessage(playerid,"Брат, у меня нет столько денег!");
            GiveMoney(playerid,params[0]);
            GLS[64]-=params[0];
            SaveInformation();
            SendBotMessage(playerid,"Вот, держи свою прибыль!");
            f(global_str, 450, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
            UpdateDynamic3DTextLabelText(NarkoText[4], COLOR_WHITE, global_str);
        }
        default: return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не находитесь в вашем наркопритоне!");
    }
	return 1;
}
cmd:wanted(playerid, params[])
{
	if(!IsACop(playerid))
		return SCM(playerid, COLOR_RED, !"Вы не полицейский!");

	new wantedlevel;
	if(sscanf(params, "d", wantedlevel))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /wanted [уровень розыска 1-6]");

	if(wantedlevel > 6)
		return SCM(playerid, COLOR_OLDRED, !"Используй: /wanted [уровень преступления 1-6]");

	new num = 0;
	global_str = "";
	foreach(new i: Player)
	{
		if(PI[i][pWanted] == wantedlevel)
	    {
	        if(num == 25)
				break;

	        f(global_str, sizeof(global_str), "%s{FFFFFF}%s(%i) - %d-й уровень розыска\n", global_str, PN(i), i, PI[i][pWanted]);
	        num++;
		}
	}
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", global_str, !"Закрыть", !"");
	return 1;
}
cmd:orderlist(playerid, params[])
{
	if(!(PlayerJob[playerid] == 3)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не развозчик продуктов!");
	new num;
	global_str = "{FFFFFF}";
	for(new i; i < OWNABLEBIZES; i++)
	{
	    if(!GetString(BizData[i][bOwner],"The State"))
    	{
		    if(num < 21)
	      	{
				if(BizData[i][bBuyCost] && BizData[i][bNeedItem])
				{
				    f(global_str,sizeof(global_str),"%s - %s.{FFFFFF} Закупает: %d п. Цена: %d$\n",global_str,BizData[i][bName], BizData[i][bNeedItem], BizData[i][bBuyCost]);
				    DBizitem[playerid][num] = i;
				    num++;
				}
			}
			else break;
		}
	}
	if(num) return SPD(playerid,8761, 2, "Поиск предпринимателя", global_str, !"Принять", !"Отмена");
	return SPD(playerid,0,0,"Поиск предпринимателя","{FFFFFF}К сожалению на данный момент нет заказов!", !"Принять","");
}
cmd:checkbiz(playerid, params[])
{
	extract params -> new bizid; else
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /checkbiz [id]");

 	if(bizid > OWNABLEBIZES)
 		return 0;

 	return SCMF(playerid, -1, "[CheckBiz ID %d] Name: -1 | Владелец: %s Зам1: %s Деньги: %d$", bizid, BizData[bizid][bOwner], BizData[bizid][bZam], BizData[bizid][bMoney]);
}
cmd:houseinv(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SCM(playerid, COLOR_OLDRED, "Используй: /houseinv [houseid]");
	if(params[0] < 0 || params[0] > OWNABLEHOUSES) return false;
	new item, count;
	global_str = "Название\tКоличество\n";
	for(new i; i < 90; i++)
	{
		item = HouseInfo[params[0]][hItem][i], count = HouseInfo[params[0]][hItemCount][i];
		if(!count || !item) continue;
		f(global_str,  sizeof(global_str), "%s[%d] %s\t%d\n", global_str, i+1, ItemsInfo[item][itemName], count);
	}
	static head[50];
 	f(head, 50, "Шкаф дома №%d", params[0]);
	    
	SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, head, global_str, "Закрыть", "");
	return false;
}
cmd:checkhouse(playerid, params[])
{
	extract params -> new houseid; else
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /checkhouse [id]");

 	if(houseid > OWNABLEHOUSES)
 		return false;

	return SCMF(playerid, -1, "Владелец: %s | Налог: %i | Деньги: $%i", HouseInfo[houseid][hOwner], HouseInfo[houseid][hNalog], HouseInfo[houseid][hMoney]);
}
cmd:gotocar(playerid, params[])
{
	new carid;
    if(sscanf(params, "d", carid))
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /gotocar [id]");

	new
		Float:x,
		Float:y,
		Float:z;
	GetVehiclePos(carid, x, y, z);
	UpdatePlayerPos(playerid, x, y, z);
	SetPlayerInterior(carid, 0);
	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(carid));
	SCM(playerid, -1, !"+");
	return 1;
}
cmd:atune(playerid)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SCM(playerid, COLOR_GREY, !"Вы не за рулём!");

	SPD(playerid, 8004, DIALOG_STYLE_LIST, !"Тюнинг меню", !"Диски\nГидравлика\nАрхангел Тюнинг\nЦвет\nВинилы\nАзот", !"Выбрать", !"Отмена");
	return 1;
}

cmd:lzal(playerid, params[])
{
    if(!GetString(BuildsInfo[0][blArenderID],PN(playerid)))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не арендуете концертный зал!");
	if(BuildsInfo[0][blTime]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Концертный зал никто не арендует");
	if(!IsPlayerInRangeOfPoint(playerid,30,649.3248,-1353.8834,13.5470) && !IsPlayerInRangeOfPoint(playerid,30,-575.709, 2594.2, 1705.09))
	{
	    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится у входа или выхода из концертного зала!");
	    return 1;
	}
	if(BuildsInfo[0][blClosed]==0) return 0;
	global_str = "";
	switch(BuildsInfo[0][blCanEnter])
	{
	    case 0: global_str = "{49A430}Свободный{FFFFFF}";
	    case 1: f(global_str, 80,"{E37A45}Платный: %d${FFFFFF}",BuildsInfo[0][blCanEnter]);
	    case 2: global_str = "{A48330}По приглашению{FFFFFF}";
	    default: f(global_str,80,"{E37A45}Платный: %d${FFFFFF}",BuildsInfo[0][blCanEnter]);
	}
	f(global_str, 950,"\
	Вход: %s [Изменить]\nОбьявить о начале мероприятия\nОтчеты по {46AB2A}доходам{FFFFFF}\n\
	Забрать прибыль: {46AB2A}%d${FFFFFF}\nВыдать пропуск %s",global_str,ZallFunction[1],
	BuildsInfo[0][blCanEnter]==2 ? "[ {46AB2A}Доступно{FFFFFF} ]":"[ {AB2A2A}НЕДоступно{FFFFFF} ]");
	SPD(playerid,798,2,"",global_str, !"Принять", !"Отмена");

    return 1;
}
cmd:gototrailer(playerid, params[])
{
	extract params -> new trailer; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /gototrailer [id]");
	
	if(trailer > OWNABLETRAILERS) return false;

	SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
	UpdatePlayerPos(playerid, TrailerInfo[trailer][tPos_X], TrailerInfo[trailer][tPos_Y], TrailerInfo[trailer][tPos_Z]);
	return SCMF(playerid, -1, "Вы телепортировались к трейлеру ID:%d", trailer);
}
cmd:gotobiz(playerid, params[])
{
	extract params -> new bizid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /gotobiz [id]");

	if(bizid > OWNABLEBIZES)
	    return 0;

	SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
	UpdatePlayerPos(playerid, BizData[bizid][bEnter][0], BizData[bizid][bEnter][1], BizData[bizid][bEnter][2]);
	return SCMF(playerid, -1, "Вы телепортировались к бизнесу ID:%d", bizid);
}
cmd:gotohouse(playerid, params[])
{
	extract params -> new houseid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /gotohouse [id]");

	if(houseid > OWNABLEHOUSES)
	    return 0;

	SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
	UpdatePlayerPos(playerid, HouseInfo[houseid][hEnter_X], HouseInfo[houseid][hEnter_Y], HouseInfo[houseid][hEnter_Z]);
	return SCMF(playerid, -1, "Вы телепортировались к дому ID:%d", houseid);
}
cmd:gotoint(playerid, params[])
{
	extract params -> new int; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /gotoint [id]");
	
	WarpToInterior(playerid, int);
	return false;
}
cmd:az(playerid, params[])
{
	if(!sscanf(params, "u", params[0]))
		WarpToInterior(params[0], GLS[65]),
		SCMF(params[0], COLOR_LIGHTBLUE, "Администратор %s[%d] телепортировал вас на собеседование.", PN(playerid), playerid);
		//SCMF(params[0], COLOR_GREY, "Вы были телепортированы в админ-зону №%d (%s)", GLS[65], NameInt[GLS[65]]);

	WarpToInterior(playerid, GLS[65]);
	return 1;
}
cmd:changeadminint(playerid, params[])
{
	if(sscanf(params, "d", params[0]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /changeadminint [id (0-145)]");

    if(!(0 <= params[0] <= 145))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /changeadminint [id (0-145)]");

	GLS[65] = params[0];
	global_str = "";
	SendAdminsMessage(-1, " ");
	SendAdminsMessage(-1, " ");
    f(global_str, sizeof(global_str), "[ADMIN]{FFFFFF} %s сменил админ-зону!", PN(playerid));
	SendAdminsMessage(COLOR_RED, global_str);
	SendAdminsMessage(-1, " ");
	SendAdminsMessage(-1, " ");
	SaveInformation();
	return 1;
}
cmd:scutes(playerid, params[])
{
	if(PI[playerid][pMember][0]!=TEAM_FBI)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не состоите в FBI!");
	if(!TeamDuty{playerid})return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не в рабочем состоянии!");
	new id;

	if(PI[playerid][pMScutes]!=-1)
	{
	 	f(global_str, 300,"{4D7D22}-{FFFFFF} Носитель: {4D7D22}%s{FFFFFF}\n\n{FFFFFF}Вы будете получать сообщения как только человек за которым включена\nслежка позвонит кому-либо или напишет смс.",PN(PI[playerid][pMScutes]));
		SPD(playerid,1081,0,"",global_str,"{DE3737}Отключить{FFFFFF}", !"Отмена");
		return 0;
	}
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /scutes [id]");
	if(PI[id][pPhoneInfo][0]<=0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого игрока нет телефона!");
	if(id==playerid)return 0;
	if(!IsPlayerConnected(id)) return 0;
	if(!ProxDetectorS(2.0, playerid, id, 1)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
	if(PI[id][pScutes]==-1)
	{
		PI[id][pScutes]=playerid,f(global_str,200,"Вы успешно прикрепили жучек к мобильному телефону игрока %s.",PN(id));
		PI[playerid][pMScutes]=id;
	}
	else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}К этому игроку уже прикреплен жучек!");
	ApplyAnimationEx(playerid,"CRIB","CRIB_Use_Switch",4.0,0,0,0,0,0);
	SetPlayerChatBubble(playerid, "Сделал что-то странное", COLOR_PURPLE, 10.0, 5000);
	SCM(playerid,COLOR_GREEN,global_str);
	return 1;
}

cmd:goto(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /goto [id]");

	if(target == INVALID_PLAYER_ID)
	    return 1;

    if(SERIU[target][sID] != INVALID_PLAYER_ID && !IsPlayerNPC(target))
		return SCM(playerid, COLOR_RED, !"Админ за кем-то следит!");

	if(PI[target][pAdmin] && AdminInfo[target][admGoto] && !IsOsnovatel(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данный администратор запретил к себе телепорт!");

	new
		Float:X,
		Float:Z,
		Float:Y;
    GetPlayerPos(target, X, Y, Z);
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(target)), SetPlayerInterior(playerid, GetPlayerInterior(target));
    if(GetPlayerState(playerid) != 2) UpdatePlayerPos(playerid, X+2, Y+2, Z);
    else SetVehiclePos(GetPlayerVehicleID(playerid), X+2, Y+2, Z);

    BizEntered[playerid] = BizEntered[target];
    HouseEntered[playerid] = HouseEntered[target];

    SCMF(playerid, -1, "Вы телепортировались к игроку %s", PN(target));
	//
	amlf("Администратор <a href=../pages/user?name=%s>%s</a> т/п к игроку <a href=../pages/user?name=%s>%s</a>", 5, "", "", PN(playerid), PN(playerid), PN(target), PN(target));
	return 1;
}
alias:goto("g");

cmd:kick(playerid, params[])
{
    new id, reason[30];
    if(sscanf(params,"us[30]",id,reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /kick [id] [Причина]");
    if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
  
    if(IsAIP(reason))return 1;
    if(PI[playerid][pAdmin]<PI[id][pAdmin]) PI[playerid][pAdmin]=0;
	if(id == playerid) return SCM(playerid,COLOR_RED,"Нельзя кикать самого себя");
	f(global_str, 150," Администратор %s[%d] кикнул игрока %s[%d]. Причина: %s",PN(playerid),playerid,PN(id),id,reason);
    ASCMALL(COLOR_RED,global_str);
	ANL(PN(id), global_str);
    J_Kick(id);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> кикнул игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s",
	PN(playerid), PN(playerid), PN(id), PN(id), reason);
	aml(global_str, 5, "","");
	//
	return 1;
}
cmd:setrep(playerid, params[])
{
	new id, amount;

	if(sscanf(params, "ud", id, amount))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /setrep [ID игрока] [кол-во репутации]");
	
	if(!PI[id][pAdmin])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игроку нельзя изменить репутацию!");

	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> изменил репутацию <a href=../pages/user?name=%s>%s</a> с %d на %d едениц.",
	PN(playerid), PN(playerid), PN(id), PN(id), PI[id][pAdmRep], amount);
	aml(global_str, 5, "","");
	//
	PI[id][pAdmRep] = amount;
	SaveAccount(id);
	SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы успешно ему изменили репутацию!");
	return 1;
}
cmd:smute(playerid, params[])
{
	if(sscanf(params, "uds[30]", params[0], params[1], params[2])) return SCM(playerid, COLOR_OLDRED, !"Используй: /smute [id] [время] [причина]");
	if(strlen(params[2]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
	if(params[0] == INVALID_PLAYER_ID) return 0;
	
    if(IsAIP(params[2])) return 1;
 	if(params[1] < 1) return SCM(playerid, COLOR_OLDRED, !"Используй: /mute [id] [время > 1] [причина]");
 	if(strlen(params[2]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
 	if(params[1] > 300) return SCM(playerid, COLOR_RED, !"Нельзя выдать БЧ больше чем на 300 минут!");
 	if(PI[params[0]][pMuteTime] > 0) return SCM(playerid, COLOR_RED, !"У этого игрока уже есть бан чата!");
	f(global_str, 144, " Администратор %s[%d] тихо заглушил игрока %s[%d] на %d минут. Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], params[1], params[2]);
	SendAdminsMessage(COLOR_RED, global_str);
	SPDF(params[0], 0, DIALOG_STYLE_MSGBOX, !"", "Вы получили бан чата, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}%s", !"Закрыть", !"", Setting_Server[4]);
	PI[params[0]][pMuteTime] = params[1] * 60;
	return 1;
}

cmd:mute(playerid, params[])
{
	if(sscanf(params, "uds[30]", params[0], params[1], params[2])) return SCM(playerid, COLOR_OLDRED, !"Используй: /mute [id] [время] [причина]");
	if(strlen(params[2]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
	if(params[0] == INVALID_PLAYER_ID) return 0;
	
    if(IsAIP(params[2])) return 1;
 	if(params[1] < 1) return SCM(playerid, COLOR_OLDRED, !"Используй: /mute [id] [время > 1] [причина]");
 	if(strlen(params[2]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
 	if(params[1] > 300) return SCM(playerid, COLOR_RED, !"Нельзя выдать БЧ больше чем на 300 минут!");
 	if(PI[params[0]][pMuteTime] > 0) return SCM(playerid, COLOR_RED, !"У этого игрока уже есть бан чата!");
	f(global_str, 144, " Администратор %s[%d] заглушил игрока %s[%d] на %d минут. Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], params[1], params[2]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> заглушил игрока <a href=../pages/user?name=%s>%s</a> на %d минут. Причина: %s",
	PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1], params[2]);
	aml(global_str, 5, "","");
	//
	SPDF(params[0], 0, DIALOG_STYLE_MSGBOX, !"", "Вы получили бан чата, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}%s", !"Закрыть", !"", Setting_Server[4]);
	PI[params[0]][pMuteTime] = params[1]*60;
	return 1;
}

cmd:rmute(playerid, params[])
{
	if(sscanf(params, "uds[30]", params[0], params[1], params[2]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /rmute [id] [время] [причина]");
	
	else if(strlen(params[2]) > 30)
		 return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");

	else if(params[0] == INVALID_PLAYER_ID)
		return false;
	
 	else if(!(1 <= params[1] <= 300))
	  	return SCM(playerid, COLOR_RED, !"Нельзя выдать мут репорта больше чем на 300 минут и меньше чем на минуту!");
 	
 	else if(PI[params[0]][pRMuteTime] > 0)
	 	return SCM(playerid, COLOR_RED, !"У этого игрока уже есть бан репорта!");

	f(global_str, 144, " Администратор %s[%d] заблокировал репорт игроку %s[%d] на %d минут. Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], params[1], params[2]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> заблокировал репорт игроку <a href=../pages/user?name=%s>%s</a> на %d минут. Причина: %s", 5, "","", PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1], params[2]);
	
	SPDF(params[0], 0, DIALOG_STYLE_MSGBOX, !"", "Вам заблокировали доступ к репорту, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}%s", !"Закрыть", !"", Setting_Server[4]);
	
	return UpdatePlayerDataInt(params[0], "rMuteTime", PI[params[0]][pRMuteTime] = params[1] * 60);
}

cmd:unrmute(playerid, params[])
{
	if(sscanf(params, "us[150]", params[0], params[1]))
		 return SCM(playerid, COLOR_OLDRED, !"Используй: /unrmute [id] [reason]");
	
	else if(params[0] == INVALID_PLAYER_ID)
		return false;

	if(!PI[params[0]][pRMuteTime])
		return SCM(playerid, COLOR_RED, !"У игрока нету блокировки репорта!");
	
	f(global_str, 144, " Администратор %s снял блокировку репорта с игрока %s, причина: %s", PN(playerid), PN(params[0]), params[1]);
	ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	
	PI[params[0]][pRMuteTime] = 0;
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> снял блокировку репорта с игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), params[1]);
}

cmd:sban(playerid, params[])
{
	new id, days, reason[30];
    if(sscanf(params, "uds[30]", id, days, reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /sban [id] [days 1-30] [Причина]");
	if(id == INVALID_PLAYER_ID) return 0;
	if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
 	if(IsAIP(reason)) return 1;

	if(!(1 <= days <= 30)) return SCM(playerid, COLOR_OLDRED, !"Используй: /sban [id] [days 1-30] [Причина]");
    f(global_str, 150, "Администратор %s[%d] тихо забанил игрока %s[%d] на %d дней. Причина: %s", PN(playerid), playerid, PN(id), id, days, reason);
    SendAdminsMessage(COLOR_RED, global_str);
	SPDF(id, 0, DIALOG_STYLE_MSGBOX, !"", "Вы получили бан аккаунта, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}%s", !"Закрыть", !"", Setting_Server[4]);
    PI[id][pWarns] = 0;
    J_Kick(id);
    BanName(PN(id), PN(playerid), days, reason);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	return 1;
}

cmd:fakesms(playerid, params[])
{
	new targetid;

	if(sscanf(params, "us[144]", targetid, global_str))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /fakesms [id/name] [text]");

	if(targetid == INVALID_PLAYER_ID)
		return 0;

	SCM(targetid, COLOR_RED, global_str);
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> написал fakesms (%s)", 5, "","", PI[playerid][pID], PN(playerid), global_str);
}

cmd:ban(playerid, data[])
{
    new id, days, reason[30];

    if(sscanf(data, "uds[30]", id, days, reason))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /ban [id] [days 1-30] [Причина]");

	if(id == INVALID_PLAYER_ID)
		return 0;

	if(strlen(reason) > 30)
		return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");

 	if(IsAIP(reason))
	 	return 1;

	if(!(1 <= days <= 30))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /ban [id] [days 1-30] [Причина]");
		
    f(global_str, sizeof(global_str), "Администратор %s[%d] забанил игрока %s[%d] на %d дней. Причина: %s", PN(playerid), playerid, PN(id), id, days, reason);
    ASCMALL(COLOR_RED, global_str);
	ANL(PN(id), global_str);
	SPDF(id, 0, DIALOG_STYLE_MSGBOX, !"", "Вы получили бан аккаунта, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\n{2D8E35}%s", !"Закрыть", !"", Setting_Server[4]);
    PI[id][pWarns] = 0;
    BanName(PN(id), PN(playerid), days, reason);
    J_Kick(id);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> забанил игрока <a href=../pages/user?name=%s>%s</a> на %d дней. Причина: %s",
	PN(playerid), PN(playerid), PN(id), PN(id), days, reason);
	aml(global_str, 5, "","");
	//
	return 1;
}
cmd:banip(playerid, params[])
{
    new id, reason[30];
    if(sscanf(params, "us[30]", id, reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /banip [id] [Причина]");
	if(id == INVALID_PLAYER_ID) return 0;
 	if(IsAIP(reason)) return 1;

    
    f(global_str, 150, " Администратор %s[%d] забанил игрока %s[%d]. Причина: %s", PN(playerid), playerid, PN(id), id, reason);
    ASCMALL(COLOR_RED, global_str);
	ANL(PN(id), global_str);

    f(global_str, 150, "Забанен: %s. IP: %s. REGIP: %s", PN(id), PlayerIP(id), PlayerRegIP[id]);
    SCM(playerid, 0xEFEFF7AA, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> забанил игрока <a href=../pages/user?name=%s>%s</a> по IP. Причина: %s", 5, "","", PN(playerid), PN(playerid), PN(id), PN(id), reason);

	PI[id][pWarns] = 0;
    BanIP(PlayerIP(id));
    BanName(PN(id), PN(playerid), 666, reason);
    J_Kick(id);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	return 1;
}

cmd:banipoff(playerid, params[])
{
    static ip[16];
    if(sscanf(params,"s[16]s[30]",ip,params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /banipoff [ip] [Причина]");
    if(strlen(params[0]) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
    
    if(IsAIP(params[0]))return 1;
    f(global_str,150," Администратор %s забанил ip %s. Причина: %s",PN(playerid),ip, params[0]);
    SendAdminsMessage(COLOR_RED,global_str);

    BanIP(ip);
	return 1;
}

cmd:sbanoff(playerid, params[])
{
    new day; static name[24], reason[30];
    if(sscanf(params,"s[24]ds[30]",name,day, reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /sbanoff [name] [дней] [Причина]");
    if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
	if(day <1 && 30<day) return SCM(playerid, COLOR_OLDRED, !"Используй: /sbanoff [name] [дней] [Причина]");
	
    if(IsAIP(reason))return 1;
 	new player = GetPlayerID(name);
    if(player != INVALID_PLAYER_ID) return SCM(playerid,COLOR_RED,!"ОН ОНЛАЙН!");
    f(global_str, 150 ," Администратор %s тихо забанил в оффлайне игрока %s. Причина: %s",PN(playerid),name,reason);
    SendAdminsMessage(COLOR_RED,global_str);

	return BanName(name, PN(playerid), day, reason);
}

cmd:unbanip(playerid, data[])
{
	extract data -> new string:ip[16]; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unbanip [ip]");

	SQL("DELETE FROM `banip` WHERE `IP` = '%s'", ip);

    f(global_str, 70, "[A] %s[%d] разблокировал IP: %s", PN(playerid), playerid, ip);
	return SendAdminsMessage(COLOR_RED, global_str);
}

cmd:swarn(playerid, params[])
{
    new
		reason[30];
    if(sscanf(params, "us[30]", params[0], reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /swarn [id] [Причина]");
    if(params[0] == INVALID_PLAYER_ID) return 0;

    if(IsAIP(reason)) return 1;
    if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
   
	UnInvite(params[0]);
	PlayerUnleader(params[0], PN(params[0]));

    PI[params[0]][pTimeToLastWarn] = Global_Time;
	PI[params[0]][pWarns] ++;
    f(global_str, 256, "Администратор %s[%d] тихо выдал предупреждение игроку %s[%d] [%d/3] Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], PI[params[0]][pWarns], reason);
    ASCMALL(COLOR_RED, global_str);
	SPDF(params[0], 0, DIALOG_STYLE_MSGBOX, !"", "Вы получили предупреждение, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\nВарн можно снять с помощью /donate.\n{2D8E35}%s", !"Закрыть", !"", Setting_Server[4]);
    
	if(PI[params[0]][pWarns] > 2)
	{
	    PI[params[0]][pWarns] = 0;
		BanName(PN(params[0]), PN(playerid), 10, reason);
	}
    
	J_Kick(params[0]);

	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:warn(playerid, params[])
{
    new reason[30];
    
	if(sscanf(params, "us[30]", params[0], reason)) return SCM(playerid, COLOR_OLDRED, !"Используй: /warn [id] [reason]");
    if(params[0] == INVALID_PLAYER_ID) return 0;
	
    if(IsAIP(reason)) return 1;
    if(strlen(reason) > 30) return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
   
	UnInvite(params[0]);
	PlayerUnleader(params[0], PN(params[0]));

    PI[params[0]][pTimeToLastWarn] = Global_Time;
	PI[params[0]][pWarns] ++;
    f(global_str, 150, "Администратор %s[%d] выдал предупреждение игроку %s[%d] [%d/3] Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], PI[params[0]][pWarns], reason);
    ASCMALL(COLOR_RED, global_str);
	ANL(PN(params[0]), global_str);
	//
	f(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> выдал предупреждение игроку <a href=../pages/user?name=%s>%s</a> [%d/3] Причина: %s",
	PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), PI[params[0]][pWarns], reason);
	aml(global_str, 5, "","");
	//
	SPDF(params[0], 0, DIALOG_STYLE_MSGBOX, !"", "Вы получили предупреждение, если вы не согласны с решением Администратора, то напишите жалобу на форум, приложив данный скриншот.\nВарн можно снять с помощью /donate.\n{2D8E35}%s", !"Закрыть", !"", Setting_Server[4]);
    
	if(PI[params[0]][pWarns] > 2)
	{
	    PI[params[0]][pWarns] = 0;
		BanName(PN(params[0]), PN(playerid), 10, reason);
	}

    J_Kick(params[0]);
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:awarnoff(playerid, params[])
{
	if(sscanf(params, "s[24]s[30]", mysql_string, params[1]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /awarnoff [name] [reason]");
	
	else if(!strcmp(mysql_string, "Ilya_Melnikov", true) || !strcmp(mysql_string, "Ilya_Melnikov", true)) return false;
	
	if(!(GetPlayerID(mysql_string) == INVALID_PLAYER_ID)) 
		return callcmd::awarn(playerid, params);
	
	format(global_str, 150, "SELECT `Admin`, `AWarns` FROM `accounts` WHERE `NickName` = BINARY('%s')", mysql_string);
	new Cache:result = mysql_query(mysql, global_str);
	
	if(!cache_num_rows()) return 
		cache_delete(result);
	
	new admin, awarns;
	cache_get_value_name_int(0, "Admin", admin);
	cache_get_value_name_int(0, "AWarns", awarns);
	cache_delete(result);
	
	if(!admin)
		return SCM(playerid, COLOR_GREY, "Данный игрок не является администратором");
		
	mysql_format(mysql, global_str, 256, "UPDATE `accounts` SET `AWarns` = `AWarns` + 1 WHERE `NickName` = BINARY('%s') LIMIT 1", mysql_string);
	mysql_tquery(mysql, global_str);
	
	awarns++;
	f(global_str, 256, "Администратор %s выдал выговор администратору оффлайн %s. Причина: %s. [%d/3]", PN(playerid), mysql_string, params[1], awarns);
	SendAdminsMessage(COLOR_RED, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал выговор администратору <a href=../pages/user?name=%s>%s</a> [%d/3]. Причина: %s", 5, "","", PN(playerid), PN(playerid), mysql_string, mysql_string, awarns, params[1]);

	if(awarns >= 3)
	{
		mysql_format(mysql, global_str, 150, "DELETE FROM admin WHERE name = '%s'", mysql_string);
		mysql_tquery(mysql, global_str);

		mysql_format(mysql, global_str, 150, "UPDATE `accounts` SET `Admin` = '0', `AWarns` = '0' WHERE `NickName` = BINARY('%s')", mysql_string);
		mysql_tquery(mysql, global_str);
	}
	return false;
}

cmd:awarn(playerid, params[])
{
    new reason[30];
    if(sscanf(params, "us[30]", params[0], reason))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /awarn [id] [Причина]");
    
	else if(!IsPlayerOnline(params[0]))
		return false;

  	else if(IsOsnovatel(params[0])) 
		return false;

  	else if(!PI[params[0]][pAdmin])
  		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Данный игрок не администратор!");

    else if(strlen(reason) > 30)
		return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");
    
	else if(PI[params[0]][pAdmin] > PI[playerid][pAdmin])
		return false;

	PI[params[0]][pAWarns] ++;
    f(global_str, 150, "Администратор %s[%d] выдал выговор администратору %s[%d] [%d/3] Причина: %s", PN(playerid), playerid, PN(params[0]), params[0], PI[params[0]][pAWarns], reason);
    ASCMALL(COLOR_RED, global_str);
	//
	f(global_str, 350, "Администратор <a href=../pages/user?name=%s>%s</a> выдал выговор администратору <a href=../pages/user?name=%s>%s</a> [%d/3]. Причина: %s",
	PN(playerid), PN(playerid), PN(params[0]), PN(params[0]), PI[params[0]][pAWarns], reason);
	aml(global_str, 5, "","");

	SPDF(params[0], 0, DIALOG_STYLE_MSGBOX, !"Awarn`S", "{FF0033}[AWarn] %s[%d] выдал вам административное предупреждение! Причина: %s", !"Закрыть", !"", PN(playerid),playerid, reason);

	if(PI[params[0]][pAWarns] > 2)
	{
		PI[params[0]][pAWarns]=
		PI[params[0]][pAdmin] = 0;
		SCM(params[0], COLOR_RED, !"[Информация]{FFFFFF} Вы были сняты с поста администратора!");
		mysql_format(mysql, global_str, 150, "DELETE FROM admin WHERE name = '%s'", PN(params[0]));
		mysql_tquery(mysql, global_str, "", "");
		J_Kick(params[0]);
	}
	return true;
}

cmd:unawarn(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /unawarn [id/name]");

	if(!PI[params[0]][pAWarns])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У него нет выговоров!");

	f(global_str, 106, " Администратор %s снял 1 выговор у администратора %s", PN(playerid), PN(params[0]));
	SendAdminsMessage(COLOR_YELLOW, global_str);
	SCM(params[0], COLOR_GREEN, !"[Информация] {FFFFFF}Администратор снял вам 1 выговор!");
	PI[params[0]][pAWarns] -- ;

	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> снял админ выговор <a href=../pages/user?id=%d>%s</a> %d/3.", 5, "", "", PI[playerid][pID], PN(playerid), PI[params[0]][pID], PN(params[0]), PI[params[0]][pAWarns]);
}

cmd:bankmenu(playerid, params[])
{
	if(GetTeamID(playerid) != TEAM_BANK)
		return SCM(playerid, COLOR_RED, !"Отказано в доступе");

	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /bankmenu [id]");

    if(target == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"Игрок не в сети!");

	if(!IsPlayerInRangeOfPoint(playerid, 8.0, -2683.8354, 807.3682, 1500.9688))
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Воспользоватся этой командой вы можете только в Банке!");

    if(!TeamDuty{playerid})
		return SCM(playerid, COLOR_RED, !"Вы не на дежурстве!");

	PanelPlayerID[playerid] = target;
	new rank = PI[playerid][pRank];
	if(rank < 5)
		return SCM(playerid, COLOR_RED, !"Отказано в доступе");

    ShowPlayerDialogEx(playerid, 713, DIALOG_STYLE_LIST, !"Выберите действие",
		!"{B03131}[1]{73B461} Выдать кредит [6]\n\
		{B03131}[2]{73B461} Узнать долг банку [1]\n\
		{B03131}[3]{73B461} Узнать количество денег в банке [1]\n\
		{B03131}[4]{73B461} Выдать банковскую карту [1]\n\
		{B03131}[5]{73B461} Восстановить банковскую карту [5]\n\
		{B03131}[6]{73B461} Принять деньги на депозит [4]\n\
		{B03131}[7]{73B461} Снять деньги с депозита [4]",
		!"Выбрать", !"Отмена");

	return 1;
}
cmd:givelicense(playerid, params[])
{
	if(PI[playerid][pAdmin] < 4 && GetTeamID(playerid) != TEAM_LICENSERS) return SCM(playerid, COLOR_GREY, !"Отказано в доступе!");
	new id;
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /givelicense [id]");
    if(!ProxDetectorS(10, playerid, id)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока.");
    if(!IsPlayerConnected(id) || !pTemp[id][tAuthorized]) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок не в сети!");
    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не на дежурстве!");
    if(id == playerid && PI[playerid][pAdmin] == 0) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не можете выдать лицензии сами себе!");
    if(PI[playerid][pAdmin] == 0 && !IsPlayerInRangeOfPoint(playerid, 70, -2584.6873,-1381.9734,1500.7570)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Лицензии можно продавать только в автошколе!");
	PanelPlayerID[playerid] = id;
	PanelPlayerID[id] = playerid;
	new rank = PI[playerid][pRank];
	if(rank >= 3)
	{
        SPD(playerid, 6, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите лицензию", !"Лицензия\tСтоимость\t\n\
			На вождение авто\t{52A32A}1000${FFFFFF}\n\
			На вождение мото\t{52A32A}2000${FFFFFF}\n\
			На полеты\t{52A32A}\n\
			{FFFFFF}На рыбалку\t{52A32A}1000${FFFFFF}\n\
			На вождение водного транспорта\t{52A32A}5000${FFFFFF}\n\
			На оружие\t{52A32A}10000${FFFFFF}", !"Выдать", !"Отмена");
	}
	else
	{
	    if(GetTeamID(playerid) == TEAM_LICENSERS) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш ранг слишком мал");
	    SPD(playerid, 6, DIALOG_STYLE_TABLIST_HEADERS, !"Выберите лицензию", !"Лицензия\tСтоимость\t\n\
			На вождение авто\t{52A32A}1000${FFFFFF}\n\
			На вождение мото\t{52A32A}2000${FFFFFF}", !"Выдать", !"Отмена");
	}
	return 1;
}

alias:recon("re", "spec");
cmd:recon(id, params[])
{
	if(IsPlayerInAnyVehicle(id)) return SCM(id, COLOR_WHITE, !"С транспорта нельзя следить!");
	else if(sscanf(params, "u", params[0])) return SCM(id, COLOR_OLDRED, !"Введите: /re [ид игрока]");
	else if(!IsPlayerConnected(params[0]) || params[0] == id) return false;
	else if(!pTemp[params[0]][tAuthorized]) return SCM(id,COLOR_RED, !"Он еще не авторизировался!!!!!");
	
 	AdminInfo[id][admMember] = PI[id][pMember][0];
	AdminInfo[id][admMemberRank] = PI[id][pRank];
	AdminInfo[id][admWorld] = GetPlayerVirtualWorld(id);
	AdminInfo[id][admInterior] = GetPlayerInterior(id);
	GetPlayerPos(id, AdminInfo[id][admPos][0], AdminInfo[id][admPos][1], AdminInfo[id][admPos][2]);
	
	Vnedren[id] = PI[params[0]][pMember][0];
	SpecPlayer(id, params[0]);
    return ShowRecon(id);
}

cmd:reoff(playerid,params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) 
		PlayerSpawn(playerid), SpecPl(playerid, false);

	return HideRecon(playerid);
}

stock ShowRecon(playerid)
{
	if(Int_GetPlayerData(playerid,"reconopen")) return false;
	#include textdraws/recon
	for(new i = 6; i < 56; i++) ShowPlayerTD(playerid,recon_p[playerid][i]);
	SetPVarInt(playerid,"reconopen",1);
	SelectRecon(playerid,0);
	return true;
}

stock HideRecon(playerid)
{
	if(!Int_GetPlayerData(playerid,"reconopen")) return false;
	for(new i; i < 56; i++) DestroyPlayerTD(playerid,recon_p[playerid][i]);
	DeletePVar(playerid,"reconopen"),DeletePVar(playerid,"selectrecon"),DeletePVar(playerid,"selectrecon1"),DeletePVar(playerid,"configrecon");
	return Vnedren[playerid] = 0;
}
stock SelectRecon(playerid, config = 0)
{

	if(!config) 
	{
		for(new i = 46; i < 55; i++)
		{
			PlayerTextDrawHide(playerid,recon_p[playerid][i]);
			PlayerTextDrawColor(playerid, recon_p[playerid][i], i == 54-Int_GetPlayerData(playerid,"selectrecon") ? 0xC0C0C0FF:0xA52A2AFF);
			ShowPlayerTD(playerid,recon_p[playerid][i]);
		}
		DeletePVar(playerid, "configrecon");
	}
 	else
	{
		for(new i; i < 6; i++) DestroyPlayerTD(playerid, recon_p[playerid][i]);
		new position = Int_GetPlayerData(playerid,"selectrecon");
		#include <textdraws/cataloges/recon>
		for(new i; i < 6; i++) 
		{
			if(i > 0 && i < 5) PlayerTextDrawColor(playerid, recon_p[playerid][i], i == 4-Int_GetPlayerData(playerid,"selectrecon1") ? 0xC0C0C0FF:0xA52A2AFF);
			ShowPlayerTD(playerid,recon_p[playerid][i]);
		}
		//
		switch position do 
		{
			case 1:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"PASS");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"JSTAT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"IWEP");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"USTAT");
			}
			case 2:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"RWEAP");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"-HEALT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"+HEALT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"SLAP");
			}
			case 3,4:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"WARN");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"JAIL");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"MUTE");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"BAN");
			}
			case 5:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"SPAWN");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"GHEALT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"FLIP");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"GCAR");
			}
			case 6:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"LIC");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"INV");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"CSKILLS");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"SKILLS");
			}
			case 8:
			{
				PlayerTextDrawSetString(playerid, recon_p[playerid][1],"EXIT");
				PlayerTextDrawSetString(playerid, recon_p[playerid][2],"GETHER");
				PlayerTextDrawSetString(playerid, recon_p[playerid][3],"GOTO");
				PlayerTextDrawSetString(playerid, recon_p[playerid][4],"AZ");
			}
		}
		//
		SetPVarInt(playerid,"configrecon",1);
	}
	return false;
}
stock SelectMenuRecon(playerid, keys)
{
	new id = Int_GetPlayerData(playerid,"selectrecon");
	
	switch keys do 
	{
		case 0:
		{
			if(!Int_GetPlayerData(playerid,"configrecon"))
			{
				if(id == 8) SetPVarInt(playerid,"selectrecon",0);
				else SetPVarInt(playerid,"selectrecon",id+1);
				SelectRecon(playerid,0);
			}
			else
			{
				id = Int_GetPlayerData(playerid,"selectrecon1");
				if(id == 3) SetPVarInt(playerid,"selectrecon1",0);
				else SetPVarInt(playerid,"selectrecon1",id+1);
				SelectRecon(playerid,1);
			}
		}
		case 1:
		{
			if(!Int_GetPlayerData(playerid,"configrecon"))
			{
				if(!id) SetPVarInt(playerid,"selectrecon",8);
				else SetPVarInt(playerid,"selectrecon",id-1);
				SelectRecon(playerid,0);
			}
			else
			{
			    id = Int_GetPlayerData(playerid,"selectrecon1");
				if(!id) SetPVarInt(playerid,"selectrecon1",3);
				else SetPVarInt(playerid,"selectrecon1",id-1);
				SelectRecon(playerid,1);
			}
		}
	}
	return false;
}
stock OpenMenuRecon(playerid)
{
	if(Int_GetPlayerData(playerid,"reconopen") == 1)
		switch Int_GetPlayerData(playerid,"selectrecon") do { case 1..6,8: SelectRecon(playerid, 1); }
	
	return true;
}
stock FunciaRecon(playerid)
{
	if(Int_GetPlayerData(playerid,"reconopen") == 1)
	{
		new 
			id = Int_GetPlayerData(playerid,"selectrecon"),
				id2 = Int_GetPlayerData(playerid,"selectrecon1"),
					targetid = SERIU[playerid][sID];
					
		switch id do
		{
			case 0:
			{
				if(SERIU[playerid][sID] != INVALID_PLAYER_ID)
				{
					if(onkey[playerid]>0)return false;
					SelectTextDraw(playerid, 0xC0C0C0FF);
					onkey[playerid]=1;
					return SpecPlayer(playerid,SERIU[playerid][sID]);
				}
			}
			case 1://ShowStats(playerid,id);
			{
    			if(Int_GetPlayerData(playerid,"configrecon") == 1)
    			{
			    	switch id2 do
				    {
						case 0: ShowStats(playerid,SERIU[playerid][sID]);
						case 1:
						{
  							global_str = "На данный момент у игрока имеется данный вид оружия, которое он получил без помощи читов:";
							for(new i; i<13; i++)
							{
								if(PI[SERIU[playerid][sID]][pGuns][i]>0 && PI[SERIU[playerid][sID]][pAmmos][i]>0) f(global_str, 600,"%s\nID оружия/патроны - %d[%d]",global_str,PI[SERIU[playerid][sID]][pGuns][i],PI[SERIU[playerid][sID]][pAmmos][i]);
							}
							SPD(playerid,0,0,"",global_str,"Принять","");
						}
						case 2:
						{
							f(global_str, 300,"Статистика деморгана:\n\nосталось сидеть - %d sec. - %s minute:sec.",PI[SERIU[playerid][sID]][pDemorgan],Convert(PI[SERIU[playerid][sID]][pDemorgan]));
							SPD(playerid,0,0,"",global_str,"Принять","");
						}
			    	}
			    }
 			}
			case 2:
			{
				if(Int_GetPlayerData(playerid,"configrecon") == 1)
    			{
				    switch id2 do
				    {
						case 0: f(global_str, 20, "%d 1", targetid), callcmd::slap(playerid, global_str);
						case 1: f(global_str, 20, "%d 150", targetid), callcmd::sethp(playerid, global_str);
						case 2: f(global_str, 20, "%d 0", targetid), callcmd::sethp(playerid, global_str);
						case 3: callcmd::weap(playerid, IntToStr(targetid));
					}
				}
			}
 			case 3,4:
			{
				if(Int_GetPlayerData(playerid,"configrecon") == 1)
    			{
				    switch id2 do
				    {
	        			case 0: SPD(playerid,125,1,"BAN","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,Чит )\n\nМаксимум 30 символов!","Принять","Отмена");
						case 1: SPD(playerid,125,1,"MUTE","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,Чит )\n\nМаксимум 30 символов!","Принять","Отмена");
						case 2: SPD(playerid,129,1,"JAIL","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку время и причину.\nВводить через запятую без пробелов ( 10,ДМ )\n\nМаксимум 30 символов!","Посадить","Отмена");
						case 3: SPD(playerid,124,1,"WARN","{73B461}Внимание!\n\n{FFFFFF}Введите в строчку причину.\n","Принять","Отмена");
					}
				}
			}
			case 5:
			{
				if(Int_GetPlayerData(playerid,"configrecon") == 1)
    			{
				    switch id2 do
				    {
				    	case 0: callcmd::plveh(playerid, IntToStr(targetid));
				    	case 1: callcmd::flip(playerid, IntToStr(targetid));
				    	case 2: f(global_str, 20, "%d 150", targetid), callcmd::sethp(playerid, global_str);
				    	case 3: callcmd::spplayer(playerid, IntToStr(targetid));
				    }
				}
			}
			case 6:
			{
				if(Int_GetPlayerData(playerid,"configrecon") == 1)
    			{
				    switch id2 do
				    {
						case 0: ShowSkills(playerid, targetid);
						case 1:
							f(global_str, 256, "Игрок %s[%d] показал отчет по своему навыку вождения. Навык вождения: {FFFFFF}[%d/100]", PN(targetid), targetid, PI[targetid][pCarSkill]),
								SCM(playerid, COLOR_LIGHTBLUE, global_str);
						case 2: CheckItemInv(playerid, targetid);
						case 3: ShowLicenses(playerid, targetid);
					}
				}
			} 
			case 8:
			{
				if(Int_GetPlayerData(playerid,"configrecon") == 1)
    			{
					callcmd::reoff(playerid,"");
				    switch id2 do
				    {
						case 0: callcmd::az(playerid, IntToStr(targetid));
						case 1: callcmd::goto(playerid, IntToStr(targetid));
						case 2: callcmd::gethere(playerid, IntToStr(targetid));
					}
				}
			}
		}
	}
	return true;
}
cmd:skick(playerid, params[])
{
	new targetid;
    if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /skick [id]");

    if(targetid == INVALID_PLAYER_ID)
		return 1;

	if(targetid == playerid)
		return SCM(playerid, COLOR_RED, !"Нельзя кикать самого себя");

    J_Kick(targetid);
	f(global_str, 128, "[A] %s[%d] тихо кикнул игрока %s [ID:%d]", PN(playerid), playerid, PN(targetid), targetid);
	SendAdminsMessage(COLOR_YELLOW, global_str);
	Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
	return 1;
}

CMD:getip(playerid, params[])
{
	new targetid;

    if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Введите: /getip [id]");

    if(targetid == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не найден!");

	return SCMF(playerid, 0x6ab1ffaa, "Nick [%s]  R-IP [%s]  IP | A-IP [{6AFF99}%s | %s {6ab1ff}]", PN(targetid), PlayerRegIP[targetid], PlayerIp[targetid], PlayerIp[targetid]);
}

cmd:setstat(playerid, params[])
{
    new id, param1, param2;
    if(sscanf(params,"udd",id,param1,param2))
	{
		SCM(playerid, -1, !"Используй: /setstat [id] [код] [значение]");
		SCM(playerid, -1, !"[0]Уровень | [1]Уважения | [2]Пол | [3]Подарок | [4]Предупреждения | [5]VIP | [6]Выговоры");
		SCM(playerid, -1, !"[7]Номер телефона | [8]Ключи от дома | [9]Патроны | [10]Детали");
		SCM(playerid, -1, !"[11]Работа | [12]Наркотики | [13]Счет в банке | [14]Donate счет" );
		SCM(playerid, -1, !"[15]Очки фермы | [16]Спавн[0/3] | [17]Чемодан[0/1] | [18]Семейные талоны");
		return 1;
	}
	switch(param1)
	{
	    case 0:
	    {
	        J_SetPlayerScore(id,param2);
			f(global_str, 150 ,"Вы изменили уровень игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 1:
	    {
	        PI[id][pExp] = param2;
			f(global_str,150,"Вы изменили уважения игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			CheckNextLevel(id);
	    }
	    case 2:
	    {
	        PI[id][pSex] = param2;
			f(global_str,150,"Вы изменили пол игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 3:
	    {
			f(global_str,150,"Вы изменили подарков %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 4:
	    {
	        PI[id][pWarns] = param2;
			f(global_str, 150,"Вы изменили кол-во предупреждений игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 5:
	    {
			if(param2 > 6) return false;
	        PI[id][pVIP][0] = param2;
	        PI[id][pVipTime] = Global_Time+(30*24*60*60);
			f(global_str,150,"Вы изменили VIP статус игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 6:
	    {
	        PI[id][pFWarns] = param2;
			f(global_str,150,"Вы изменили кол-во выговоров %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 7:
	    {
		    PI[id][pPhoneInfo][0] = param2;
			f(global_str,150,"Вы изменили телефон %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
	    }
	    case 8:
	    {
	        f(global_str,150,"Вы изменили ключи от дома игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pHouseKey] = param2;
	    }
	    case 10:
	    {
	        f(global_str, 150,"Вы изменили кол-во ингредиентов игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pPackets] = param2;
	    }
	    case 11:
	    {
	        f(global_str, 150,"Вы изменили работу игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PlayerJob[id] = param2;
	    }
	    case 13:
	    {
	        f(global_str,150,"Вы изменили счет в банке игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1,global_str);
			PI[id][pBank] = param2;
	    }
	    case 14:
	    {
	        f(global_str,150,"Вы изменили Donate счет игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1,global_str);
			PI[id][pVirMoney] = param2;
	    }
	    case 15:
	    {
	        f(global_str, 150, "Вы изменили Очки фермера игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pContractTime] = param2;
	    }
	    case 16:
	    {
	        if(param2>2 || param2<0)return SCM(playerid,-1, !"Error");
	        f(global_str, 150 ,"Вы изменили спавн игрока %s(%d) на %d",PN(id),id,param2);
			SCM(playerid,-1, global_str);
			PI[id][pDCTime] = param2;
			SCM(id, COLOR_WHITE, !">> {FF6347} Место спавна изменилось. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	    }
	    case 18: 
	    {
	        f(global_str, 150, "Вы изменили семейные талоны %s(%d) на %d", PN(id), id, param2);
	        SCM(playerid, -1, global_str);
	    }
	}
	format(global_str, 256, "Администратор <a href=../pages/user?name=%s>%s</a> использовал команду setstat [ %s ]. На игроке: <a href=../pages/user?name=%s>%s</a>",
	PN(playerid),PN(playerid), global_str, PN(id), PN(id));
	aml(global_str, 5, "", "");
	SaveAccount(id);
	return 1;
}
cmd:radio(playerid)
{
	return true;
}
cmd:news(playerid, params[])
{
    if(!pTemp[playerid][tAuthorized]) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(!IsANews(playerid)) return SCM(playerid,COLOR_GREY, !"Вам не доступна эта команда!");
    if(PI[playerid][pRank]<5)return SCM(playerid,COLOR_GREY, !"Вам не доступна эта команда! (Необходим 5-тый ранг!)");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(sscanf(params,"s[150]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /news [текст]");
	if(IsADomen(params[0]) || IsAMg(params[0]))
    {
        f(global_str, 256,"%s %d подозревается в попытке слива! Text: %s",PN(playerid),playerid,params[0]);
		SendAdminsMessage(COLOR_RED,global_str);
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(params[0]))return 1;
    if(Int_GetPlayerData(playerid,"newser")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	new carid = GetPlayerVehicleID(playerid);
	new getradio[40];
    switch(PI[playerid][pMember][0])
    {
        case TEAM_RADIO: getradio = "LS";
        case TEAM_RADIOSF: getradio = "SF";
        case TEAM_RADIOLV: getradio = "LV";
        default: getradio = "";
    }
	if(IsANewsCar(carid) || IsPlayerInRangeOfPoint(playerid,50,1716.1687,-1663.5651,20.2279)|| IsPlayerInRangeOfPoint(playerid,50,1654.9037,-1640.4658,57.1529))
	{
	 	f(global_str, 350,"[ News %s ] %s %s[%d]:{FFFFFF} %s",getradio,GetRankName(TEAM_RADIO,PI[playerid][pRank]),PN(playerid),playerid,params[0]);
		SCMALL(0x73B461FF,global_str);
		SetPVarInt(playerid,"newser",Global_Time+4);
	}
	else SCM(playerid,COLOR_BLUENEW,"Вы не находитесь в транспорте радио студии");
	return 1;
}
cmd:gov(playerid, params[])
{
    if(!IsAtFrakcia(playerid)) return 0;
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    static result[150]; result[0] = EOS;
	if(sscanf(params,"s[150]",result)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gov [текст]");
    if(GLS[36] >= 3) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Все организации имеют право только на 3 гос. строки в 10 минут!");
    if(!pTemp[playerid][tAuthorized]) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(PI[playerid][pRank] >= 9 && IsAtFrakcia(playerid)) SendGovMessage(playerid,result);
	GLS[36]++;
	return 1;
}
cmd:m(playerid, params[])
{
    if(!pTemp[playerid][tAuthorized]) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	if(sscanf(params,"s[100]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /m [текст]");
	if( IsAIP(params[0]) ) return 0;
	new carid = GetPlayerVehicleID(playerid);
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
	if(!IsPlayerInAnyVehicle(playerid) && !IsACopCar(carid)) return SCM(playerid,COLOR_GREY, !"Не могу!");
	f(global_str, 200,"[M] %s %s(%d): %s",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	ProxDetector(30,playerid, global_str,COLOR_YELLOW);
	SetPlayerChatBubble(playerid,  global_str, COLOR_YELLOW, 10.0, 5000);
	return 1;
}
cmd:megafon(playerid, params[])
{
    if(!pTemp[playerid][tAuthorized]) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	if(sscanf(params,"s[100]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /megafon [текст]");
	if( IsAIP(params[0]) ) return 0;
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
	f(global_str, 200,"[Рупор] %s %s(%d): %s",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	ProxDetector(30,playerid,global_str,COLOR_YELLOW);
	SetPlayerChatBubble(playerid, global_str, COLOR_YELLOW, 10.0, 5000);
	return 1;
}
cmd:s(playerid, params[])
{
    if(!pTemp[playerid][tAuthorized]) return SCM(playerid,COLOR_GREY, !"Сначала нужно авторизироваться");
	if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
	if(sscanf(params,"s[100]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /s [текст]");
	if( IsAIP(params[0]) ) return 0;
	if(Int_GetPlayerData(playerid,"payer")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
	SetPVarInt(playerid,"payer",Global_Time+3);
	SetPlayerChatBubble(playerid, params[0], COLOR_SCHAT, 25.0, 5000);
	f(global_str, 200,"%s[%d] кричит: %s!!",PN(playerid),playerid,params[0]);
	ProxDetector(25,playerid, global_str,COLOR_SCHAT,1);
	if(!IsPlayerInAnyVehicle(playerid) && !PlayerLie{playerid})	ApplyAnimationEx(playerid, "ON_LOOKERS", "shout_01",1000.0,0,0,0,0,0,1);
	return 1;
}
alias:b("n");
cmd:b(playerid, params[])
{
	if(PI[playerid][pMuteTime]) return SendMuteMessage(playerid);
	if(sscanf(params, "s[100]", global_str)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /b [текст]");
	if(IsAIP(global_str)) return false;
	f(global_str, 150, "(( %s%s[%d]: {AFAFAF}%s{FFFFFF} ))", PI[playerid][pAdmin] ? "Администратор ":"", PN(playerid), playerid, global_str);
	ProxDetector(10,playerid,global_str,COLOR_WHITE,1);
	return 1;
}
cmd:c(playerid, params[])
{
	if(PI[playerid][pMuteTime]) return SendMuteMessage(playerid);
	if(sscanf(params,"s[100]",global_str)) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Используйте: /c [текст]");
	if(IsAIP(global_str)) return 0;
	f(global_str,150,"%s[%d] говорит шепотом: {FFFFFF}%s",PN(playerid),playerid,global_str);
	ProxDetector(2,playerid,global_str,COLOR_BLUE);
	return 1;
}
cmd:todo(playerid, params[])
{
	if(PI[playerid][pMuteTime]) return SendMuteMessage(playerid);
    if(sscanf(params, "p<*>s[128]s[128]", params[0], params[1])) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}/todo Фраза*Действие");
    if(IsAIP(params[0]) || IsAIP(params[1])) return 0;
    f(global_str, 400, "\"%s\", - сказал %s,{FF99FF} %s.",params[0],PN(playerid),params[1]);
    ProxDetector(30.0, playerid, global_str, -1);
    return 1;
}
cmd:me(playerid, params[])
{
	if(PI[playerid][pMuteTime]) return SendMuteMessage(playerid);
	if(sscanf(params,"s[100]",params[0])) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Используйте: /me [действие]");
	if(IsAIP(params[0])) return 0;
	f(global_str, 300,"%s[%d] %s",PN(playerid),playerid,params[0]);
	ProxDetector(25,playerid,global_str,COLOR_ME);
	SetPlayerChatBubble(playerid, params[0], COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:do(playerid, params[])
{
	if(PI[playerid][pMuteTime]) return SendMuteMessage(playerid);
	if(sscanf(params,"s[100]", params[0])) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Используйте: /do [действие]");
	if(IsAIP(params[0])) return 0;
	f(global_str, 200," %s  - |  %s[%d] ",params[0], PN(playerid),playerid);
	ProxDetector(25,playerid,global_str,COLOR_DOCHAT);
	SetPlayerChatBubble(playerid, params[0], COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:try(playerid, params[])
{
	if(PI[playerid][pMuteTime]) return SendMuteMessage(playerid);
	if(sscanf(params,"s[100]",params[0])) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Используйте: /try [действие]");
	if(IsAIP(params[0])) return 0;
	
	switch random(10) do
	{
		case 0..4: f(global_str, 150," %s[%d] %s -{9ACD32} Удачно ", PN(playerid),playerid, params[0]);
		case 5..9: f(global_str, 150," %s[%d] %s - {FF0000} Неудачно ", PN(playerid),playerid, params[0]);
	}
	
	ProxDetector(25,playerid,global_str,COLOR_ME);
	f(global_str, 150 ,"%s",params[0]);
	SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:lmenu(playerid,params[])
{
	new org = PI[playerid][pMember][0];
	if(!org) return false;
	else if(!PI[playerid][pMember][1] && PI[playerid][pRank] < OrgInfo[org][Max_Rang]-1) return false;
	else if(!IsAtMafia(playerid)&& !IsAtGang(playerid))
	{
		f (global_str, 100, "{FFFFFF}Банк: {E1E948}%d$", OrgInfo[org][oBank]);
		return SPD(playerid, 1214, DIALOG_STYLE_LIST, global_str, PI[playerid][pMember][0] == TEAM_FBI ? "\
		{AFAFAF}Пригласить в организацию\n\
		{AFAFAF}Управление членами организации\n\
		{AFAFAF}Перевод\n\
		{F2D253}Собеседования\n\
		{FFFFFF}Изменить зарплаты\n\
		Управление рангами":!"\
		{AFAFAF}Пригласить в организацию\n\
		{AFAFAF}Управление членами организации\n\
		{F2D253}Собеседования\n\
		{FFFFFF}Изменить зарплаты\n\
		Управление рангами", !"Далее", !"Отмена");
	}
	else
		f(mysql_string, 50, "{FFFFFF}Банк: {009327}%d$",OrgInfo[org][oBank]),
		f(global_str, 128,"{AFAFAF}Пригласить в организацию\n{AFAFAF}Игроки онлайн\n{AFAFAF}Общак [%s]\n{AFAFAF}Спавн транспорта [{009327}25 000${AFAFAF}]\n{AFAFAF}Заправка транспорта [{009327}35 000${AFAFAF}]", !OrgInfo[org][oOb4ak] ? ("{407930}Открыт") : ("{D24449}Закрыт")),
		SPD(playerid,1214,2,mysql_string,global_str,"Далее", !"Отмена");
	
	return false;
}
cmd:invite(playerid, params[])
{
    if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /invite [id]");
	if(CuffedTime[params[0]] > 0) return SCM(playerid, COLOR_RED, !"Игрок находится в шоковом состоянии!");
 	if(PI[playerid][pMember][1] == 0 && PI[playerid][pRank] < 9) return SCM(playerid, COLOR_RED, !"Отказано в доступе!");
	if(PI[params[0]][pMember][0] > 0) return SCM(playerid, COLOR_GREY, !"Игрок состоит в другой организации!");
	if(!IsPlayerConnected(params[0]) || !pTemp[params[0]][tAuthorized]) return SCM(playerid, COLOR_GREY, !"Игрок не найден");
	if(PI[playerid][pMember][0] == TEAM_FBI) return SCM(playerid, COLOR_RED, !"В FBI можно попасть только переводом из полиции!");
	if(IsAtFrakcia(playerid) && PI[params[0]][pBL] != 0)
    {
        SCM(playerid, COLOR_GREY, !"Вы не можете принять этого игрока. Возможные причины:");
		SCM(playerid, COLOR_GREY, !"- Этот игрок находится в чёрном списке закона");
		return 1;
	}
//	if(Clother[params[0]] != -1) return 0;
	if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(params[0])) return 0;
	if(!ProxDetectorS(5.0, playerid, params[0])) return SCM(playerid, COLOR_GREY, !"Вы должны находиться рядом с игроком");
	if(InviteOffer[params[0]] != INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, !"Этому игроку уже было выслано приглашение на вступление в организацию");
	new Leader[15];
	global_str = "";
	if(PI[params[0]][pWarns] > 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрока с варном нельзя принять в организацию!");
	if(IsAtFrakcia(playerid, 1) && PI[params[0]][pZKP] < 35)
	{
	    SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Законопослушность этого гражданина не позволяет ему вступить в организацию! (Необходимо 35 законопослушности!)");
	    SCM(params[0], COLOR_RED, !"[Ошибка] {FFFFFF}Вас не смогли принять в организацию, тк. у вас слишком мало законопослушности! (Необходимо 35 законопослушности!)");
	    return 0;
	}
	else if(IsAtFrakcia(playerid, 1) && VoenikTimer[params[0]] < Global_Time)
		return 	SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У данного игрока не имеется военный билет!");

	if(PI[playerid][pMember][1] > 0) Leader = "Лидер";
	else Leader = "Зам. лидера";
	InviteOffer[params[0]] = playerid;
	f(global_str, 100, "Вы приглашаете игрока %s к себе в организацию", PN(params[0]));
	SCM(playerid, COLOR_LIGHTBLUE, global_str);
	f(global_str, 100, "%s %s приглашает вас к себе в организацию %s", Leader, PN(playerid), OrgInfo[GetTeamID(playerid)][oName]);
	SPD(params[0], 8, DIALOG_STYLE_MSGBOX, !"Инвайт", global_str, !"Принять", !"Отмена");

	return 1;
}
cmd:frisk(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED,!"Вы не полицейский");
	new id,Drugs[20],Mats[20],Gun[20];
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /frisk [id]");
    if(!ProxDetectorS(1.0,playerid,id)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    global_str = "{FFFFFF}";
    if(GetCount(id, 511) > 0) Mats = "{33AA33}[Есть]\n";
    else Mats = "{FF0000}[Нет]";
    if(GetCount(id, 510) > 0) Drugs = "{33AA33}[Есть]\n";
    else Drugs = "{FF0000}[Нет]";
    new gunid, ammo;
    Gun = "{FF0000}[Нет]";
    for(new i;i < 13;i ++)
    {
        GetPlayerWeaponData(id, i, gunid, ammo);
        if(!gunid || !ammo) continue;
        Gun = "{33AA33}[Есть]\n";
        break;
    }
    f(global_str, 200, "Патроны: \t%s\n", Mats);
    f(global_str, 200, "%sНаркотики: \t%s\n", global_str, Drugs);
    f(global_str, 200, "%sОружие: \t%s\n", global_str, Gun);
    SPD(playerid,0,0,PN(id),global_str,"Ок","");
    f(global_str,150," %s обыскивает %s",PN(playerid),PN(id));
	ProxDetector(25,playerid,global_str,COLOR_PURPLE);
    return 1;
}
cmd:ticket(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED,!"Вы не полицейский!");
	new id,ticket,reason[50];
    if(sscanf(params,"uds[50]",id,ticket,reason)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /ticket [id] [сумма] [причина]");
    if(!ProxDetectorS(5.0,playerid,id)) return SCM(playerid, COLOR_WHITE, !"Вы далеко от игрока");
    if(PI[id][pLevel] < 2) return SCM(playerid, COLOR_RED, !"Нельзя выписывать штраф игрокам с 1-ым уровнем");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(ticket < 1 || ticket > 10000) return SCM(playerid, COLOR_RED, !"Штраф не менее $1 и не более $10000");
	f(global_str, 150 ,"Полицейский %s выписал вам штраф.\n\n{FF9900}Сумма: $%d\nПричина: %s",PN(playerid),ticket,reason);
	SPD(id,87,0,"Штраф",global_str,"Оплатить", !"Отмена");
	f(global_str,150,"Вы выписали штраф %s. Сумма: $%d | Причина: %s",PN(id),ticket,reason);
	SCM(playerid,COLOR_LIGHTBLUE,global_str);
	TicketOffer[id] = playerid;
	TicketPrice[id] = ticket;
	return 1;
}
cmd:throwfish(playerid, params[])
{
	new massa;
	static string[100], Fish[20];
	string[0] = EOS, Fish[0] = EOS;
	for(new i; i < 5; i ++)
 	{
 		new fish = PlayerFish[playerid][i];
 		if(fish == 0) strcat(string, "{AFAFAF}None\n");
 		else
 		{
 			f(Fish, sizeof(Fish), "{33CCFF}%s %d Kg\n", FishName[fish], FishMassa[playerid][fish]);
 			strcat(string, Fish);
 			massa += FishMassa[playerid][fish];
 		}
 	}
	if(massa > 0)
	{
		f(Fish, sizeof(Fish), "{33CCFF}Всю рыбу %d Kg\n", massa);
		strcat(string, Fish);
	}
 	SPD(playerid,263,2,"Что выбросить?",string,"Выбросить", !"Отмена");
 	return 1;
}
cmd:credit(playerid, params[])
{
	if(PI[playerid][pMember][0]!=TEAM_BANK) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы не состоите в фракции БАНК!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	if(PI[playerid][pMember][1]==0 && PI[playerid][pRank]<9) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Данная функция доступна только лидеру и заместителю банка!");
	SPD(playerid,329,2,"Меню банка","{B03131}[1]{FFFFFF} Процент\n{B03131}[2]{FFFFFF} Процента\n{B03131}[3]{FFFFFF} Процента\n{B03131}[4]{FFFFFF} Процента\n{B03131}[5]{FFFFFF} Процентов\n{B03131}[6]{FFFFFF} Процентов", !"Принять", !"Отмена");
	return 1;
}
cmd:pay(playerid, params[])
{
    if(PI[playerid][pDemorgan])
    	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете обмениваться/передавать деньги в этом месте!");

	new id,money;
	if(Int_GetPlayerData(playerid,"payer")>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
    if(sscanf(params,"ud",id,money)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /pay [id] [сумма]");
	//if(TradeInfo[playerid][tradeID] != INVALID_PLAYER_ID) return 0;
    if(!ProxDetectorS(3.0,playerid,id)) return SCM(playerid,COLOR_GREY, !"Вы далеко от игрока");
	if(playerid == id) return SCM(playerid,COLOR_GREY, !"Нельзя передавать деньги самому себе");
	if(money < 1 || PI[playerid][pMoney] < money) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	if(PI[playerid][pLevel]==1 && money > 200)return SCM(playerid,COLOR_RED,!"Игроки ниже 2 уровня могут передавать только по 200$");
	
	if(money > 50000 or GetPlayerADDVIP(playerid) && money > 1000000) 
		return SCM(playerid, COLOR_VALIK, !"Нельзя передавать больше $50000");
	
	if(PI[id][pMoney] + money < 0)
		return SendErrorMessage(playerid);

	GiveMoney(playerid,-money);
	GiveMoney(id,money);
	SetPVarInt(playerid,"payer",Global_Time+2);
	ApplyAnimationEx(playerid,"DEALER","shop_pay",4.1, 0, 1, 1, 0, 0, 1);
	f(global_str, 200,"%s передаёт конверт с деньгами %s",PN(playerid),PN(id));
	SetPlayerChatBubble(playerid, global_str, COLOR_PURPLE, 10.0, 5000);
	f(global_str, 200,"%s передал вам $%d",PN(playerid),money);
	SCM(id,COLOR_GREY, global_str);
	f(global_str, 200,"Вы передали $%d %s",money,PN(id));
	SCM(playerid,COLOR_GREY, global_str);
	sendPlayerBattlepassAction(playerid, 104);
	return 1;
}
cmd:putobject(playerid, params[])
{
	if(!IsACop(playerid) && !PI[playerid][pAdmin]) return SCM(playerid, COLOR_RED, !"Вы не сотрудник PD/FBI!");
	if(PI[playerid][pRank] < 5 && !PI[playerid][pAdmin]) return SCM(playerid,COLOR_RED,!"Эта возможность доступна с 5 ранга.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid)!=0) return SCM(playerid, COLOR_RED, !"Использовать в здании запрещено!");
	f(global_str, 200,"{FFFFFF}Осталось: {94B0C1}%d{FFFFFF} обьектов.",PI[playerid][pObjikt]);
	SPD(playerid,399,2,global_str,"-{B03131} Ограждние [1]\n-{B03131} Отбойник\n-{B03131} Конус\n-{B03131} Ограждние [2]\n-{B03131} Табличка\n-{B03131} Лежачий полицеский\nЖелезный заборчик\nЖелезный заборчик [2]\n[ЗНАК] Ограничение скорости\n[ЗНАК] Запрет движения прямо\n[ЗНАК] Закрыто\n[ЗНАК] Stop\n[ЗНАК] Уступить дорогу\n[ЗНАК] Ремонт дороги\n[ЗНАК] Ехать прямо!\n[ЗНАК] Поворот налево\n[ЗНАК] Поворот направо\n- Радар\nУбрать обьект", !"Принять", !"Отмена");
	return 1;
}
cmd:demoute(playerid, params[])
{
	if(PI[playerid][pMember][0]!= TEAM_FBI && PI[playerid][pMember][0]!= TEAM_MERIALS)return SCM(playerid,COLOR_RED,!"Доступно только правительству и FBI!");
    if(!PI[playerid][pMember][1] && PI[playerid][pRank] != 9) return SCM(playerid,COLOR_RED,!"Отказано в доступе! (Доступно только лидеру/Заместителю)");
    if(!IsPlayerConnected(playerid) ||  !pTemp[playerid][tAuthorized]) return 0;
    new id;
    if(sscanf(params,"us[100]",id, params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /demoute [id] [причина]");
    if(!ProxDetectorS(5.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"Вы далеко от игрока!");
	if(!IsAtFrakcia(id)) return SCM(playerid,COLOR_RED,!"Вы можете уволить только гос.служащих!");
	if(id == playerid) return SCM(playerid,COLOR_GREY, !"Вы не можете уволить сами себя!");
	if(PI[id][pMember][1] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете уволить лидера");
	if(IsACop(id)) if(UsingShield[id]) RemovePlayerAttachedObject(id, 7);
	PI[id][pMember][0] =
	PI[id][pDCTime]=
	PI[id][pRank] =
	pSportZal[id]=0;
	SCM(id, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	TeamDuty{id} = false;
	f(global_str, 200,"{FFFFFF}%s выгнал вас из организации.\nПричина: %s",PN(playerid), params[0]);
	SCM(id,COLOR_LIGHTBLUE,global_str);
	f(global_str, 200,"Вы выгнали %s. Причина: %s",PN(id), params[0]);
	SCM(playerid,COLOR_LIGHTBLUE,global_str);
	f(global_str, 200,"[D]%s[%d] Уволил %s, Причина: %s",PN(playerid),playerid,PN(id), params[0]);
	SendGosMessage(COLOR_DEPAR,global_str);
	SetPlayerColor(id,0xFDFCFC15);
	_ResetGun(id);
	UpdatePlayerArmour(id,0);
	ResetSpawnInfo(id, 0);
	SetBumSkin(id);
	return 1;
}

cmd:uninvite(playerid, params[])
{
	if(PI[playerid][pMember][0] && PI[playerid][pRank] < OrgInfo[PI[playerid][pMember][0]][Max_Rang]-1 && !PI[playerid][pMember][1])
		return SCM(playerid,COLOR_RED,!"Отказано в доступе!");
	
	new id;
	if(sscanf(params,"us[100]", id, params[0])) 
		return SCM(playerid,COLOR_OLDRED,!"Используйте: /uninvite [id] [причина]");
	
	else if(IsADomen(params[0]) || IsAMg(params[0]) || IsAIP(params[0]))
    {
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }

	if(PI[playerid][pRank] == PI[id][pRank])
		return false;

	else if(!IsGiveWarn(playerid, id))
		return SCM(playerid,COLOR_GREY, !"Этот игрок состоит в другой организации");
	else if(id == playerid)
		return SCM(playerid,COLOR_GREY, !"Себя нельзя");
	else if(PI[id][pMember][1])
		return SCM(playerid,COLOR_RED,!"Вы не можете уволить лидера");

	UnInvite(id);

	SCMF(id, COLOR_LIGHTBLUE, "{FFFFFF}%s выгнал вас из организации.\nПричина: %s", PN(playerid), params[0]);

	f(global_str, 400,"{FFFFFF}%s выгнал %s из организации.\nПричина: %s",PN(playerid),PN(id), params[0]);
	SendTeamMessage(PI[playerid][pMember][0],COLOR_LIGHTBLUE, global_str);

	return SCMF(playerid ,COLOR_LIGHTBLUE, "Вы выгнали %s. Причина: %s",PN(id), params[0]);
}

cmd:giverank(playerid, params[])
{
	if(PI[playerid][pMember][0] <=0)return 0;
    if(PI[playerid][pRank] < 9 && PI[playerid][pMember][1] == 0) return SCM(playerid,COLOR_RED,!"Отказано в доступе!");
	if(sscanf(params,"ud",params[0],params[1])) return SCM(playerid,COLOR_VALIK, !"Используйте: /giverank [id] [rank]");
	if(!ProxDetectorS(8.0, playerid, params[0])) return SCM(playerid,COLOR_GREY, !"Вы должны находиться рядом с игроком!");
    if(PI[params[0]][pMember][1] > 0 ) return SCM(playerid,COLOR_RED,!"Вы не можете изменять ранг лидеру");
    if(params[1] < 1) return SCM(playerid,COLOR_GREY, !"Нельзя повысть до этого ранга");
	if(GetPlayerVirtualWorld(playerid)!=GetPlayerVirtualWorld(params[0]))return 0;

	if(!IsPlayerConnected(params[0])) return SCM(playerid, COLOR_GREY, !"Игрок не найден");
	if(PI[playerid][pRank] <= PI[params[0]][pRank]) return SCM(playerid, COLOR_GREY, !"Вы не можете повысить/понизить этого игрока");
	if(PI[playerid][pRank] == 9 && params[1] > 8) return SCM(playerid,COLOR_RED,!"Нельзя выдать ранг больше 8");
 	if(params[1] > 9) return SCM(playerid,COLOR_GREY, !"Нельзя повысть до этого ранга");
	if(PI[params[0]][pMember][0] != PI[playerid][pMember][0]) return SCM(playerid, COLOR_GREY, !"Игрок находиться в другой организации!");
	global_str = "";
	f(global_str,100,"Лидер %s %s до %d ранга",PN(playerid),PI[params[0]][pRank] > params[1] ? ("понизил"):("повысил"),params[1]);
	SCM(params[0],COLOR_LIGHTBLUE,global_str);
	f(global_str,100,"Вы %sи игрока %s до %d ранга",PI[params[0]][pRank] > params[1] ? ("понизил"):("повысил"),PN(params[0]),params[1]);
	SCM(playerid,COLOR_LIGHTBLUE,global_str);
	PI[params[0]][pRank] = params[1];
    UpdatePlayerDataInt(params[0], "Rank", params[1]);
	if(PI[params[0]][pSex] == 2)
	{
	    if(TeamDuty{params[0]})
		{
			SetPlayerSkinEx(params[0],GOrgSkins[GetTeamID(params[0])][params[1]]);
			TogglePlayerControllable(params[0],true);
		}
	}
	else
	{
	    if(TeamDuty{params[0]})
		{
			SetPlayerSkinEx(params[0],MOrgSkins[GetTeamID(params[0])][params[1]]);
			TogglePlayerControllable(params[0],true);
		}
	}
	return 1;
}
cmd:queryacceptadmin(playerid, params[])
{
	if(!PI[playerid][pAdmin] || AcceptAdm{playerid}) return false;
	
	extract params -> new code; else
	{
		
		new list;
		
		global_str = "";
		foreach(Admin, i)
		{
			if(PI[i][pAdmin] < 6 || !PI[i][pVkontakte] || i == playerid) continue;
			strcat(global_str, PN(i));
			spdList(playerid, list, i);
			list++;
		}
		return SPD(playerid, 4344, DIALOG_STYLE_LIST, !"Кому отправить письмо", global_str, !"Отправить", "Отмена");
	}
	if(!(Int_GetPlayerData(playerid, "QueryCode") == code)) return false;
	
	AcceptAdm{playerid} = true;
	UpdatePlayerDataInt(playerid, "AcceptAdmin", true);
	return SCM(playerid, COLOR_VALIK, !"Вы подтвердили права на админа.");
}

cmd:acceptadmin(playerid, data[])
{
	if(PI[playerid][pAdmin] < 6) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {cccccc}У Вас нет доступа к этой команде.");
	
	extract data -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, "Используй: /acceptadmin [-]");
	
	if(!IsPlayerOnline(target)) return false;

	AcceptAdm{target} = true;
	SCM(playerid, COLOR_VALIK, !"Ты подтвердил права на админа.");
	SCM(target, COLOR_VALIK, !"Вам подтвердили права на админа.");
	UpdatePlayerDataInt(target, "AcceptAdmin", AcceptAdm{target});
	return true;
}

cmd:spawn(playerid)
{
    if(!(SERIU[playerid][sID] == INVALID_PLAYER_ID)) return SCM(playerid,COLOR_GREY, !"Не доступно! [/reoff]");
	return PlayerSpawn(playerid);
}

cmd:cc(playerid)
{
    for(new i; i < 20; i++)
		SCMALL(-1, !" ");

	new
	    string[14 - 2 + MAX_PLAYER_NAME];

    f(string, sizeof(string), "%s Очистил Чат", PN(playerid));
    SendAdminsMessage(COLOR_LIGHTBLUE, string);
	return 1;
}

cmd:jp(playerid)
	return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);

cmd:carskill(playerid) 
{
    f(global_str, 80," Текущий навык вождения автомобилем: {FFFFFF}%d/100.", PI[playerid][pCarSkill]),
	SCM(playerid, COLOR_LIGHTBLUE, global_str);
	SCM(playerid, -1, !"Чтобы повысить навык вождения необходимо адекватно передвигаться на своем авто,");
	SCM(playerid, -1, !"держать своё авто в отличном состоянии и не сбивать пешеходов.");
	SCM(playerid, COLOR_GREY, !"Чтобы показать свой навык другому игроку, используйте /showcarskill.");
	return 1;
}

cmd:showcarskill(playerid, params[]) 
{
	new targetid;
	if(sscanf(params, "d", targetid))
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /showcarskill [id]");

	if(targetid == INVALID_PLAYER_ID)
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не в сети!");

    if(!ProxDetectorS(5.0, playerid, targetid))
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока!");

	f(global_str, 256, "Игрок %s[%d] показал отчет по своему навыку вождения. Навык вождения: {FFFFFF}[%d/100]", PN(playerid), playerid, PI[playerid][pCarSkill]);
	SCM(targetid, COLOR_LIGHTBLUE, global_str);
	f(global_str, 256, "Вы успешно показали отчет по вождению игроку {FFFFFF}%s[%d]", PN(targetid), targetid);
	SCM(targetid, COLOR_GREY, global_str);
	return 1;
}
 
cmd:apanel(playerid)
{
	if(GetString(AdminInfo[playerid][admPassword], "default"))
        return SetPVarInt(playerid, !"alogin", 1), SPD(playerid, 211, DIALOG_STYLE_PASSWORD, !"Авторизация", !"{FFFFFF}Придумайте и введите админ-пароль\n\nПримечание:\n\t{FF6347}- Пароль должен состоять из латинских букв и цифр\n\t- Размер пароля может быть от 5 до 16 символов", !"Ввод", !"Отмена");
   
    if(!ADuty{playerid}) 
		return SPD(playerid, 211, DIALOG_STYLE_PASSWORD, !"Авторизация", !"{FFFFFF}Введите админ-пароль", !"Ок", !"Отмена");
		
	f(global_str, sizeof(global_str), "\
		{FFFFFF}[1] Admins\n\
		[2] Очистить Чат\n\
		{FF0000}[4] BANLIST\n\
		{FFFFFF}[4] Лидеры/Снять лидера\n\
		[5] Очистка склада фракций\n\
		[5] Пенсионеры (бывшие лидеры)/Снять пенсионера\n\
		[6] Пенсионеры (бывшие администраторы)/Снять пенсионера\n\
		{C0C0C0}[A] {FFFFFF}Управление транспортом\n\
		[8] Настройки\n\
		[3] Мониторинг баннеров\n\
		{F2C934}[3]{FFFFFF} Теракты [%s]\n\
		{E98E52}[3]{FFFFFF} Пополнить склад фермы и грузчиков и завода\n\
		{E98E52}[5]{FFFFFF} Обязательные ответы ХЕЛП. [%s]\n\
		{E98E52}[5]{FFFFFF} Управление ZZ\n\
		{E98E52}[4]{FFFFFF} Подтверждение E-mail [{45FB66}0 заявок{FFFFFF}]\n\
		{E98E52}[6]{FFFFFF} Изменить название сервера\n\
		{E98E52}[5]{FFFFFF} Пополнить продукты для гос. бизнесов\n\
		{E98E52}[6]{FFFFFF} Пополнить банкоматы\n\
		{E98E52}[5] Авто респаун транспорта: [%s]\n\
		{E98E52}[5] Система репорта: [%s]\n\
		{F2C934}[1]{FFFFFF} КилЛист [%s]\n\
		{F2C934}[1]{FFFFFF} Онлайн организаций\n\
		{F2C934}[1]{FFFFFF} IP адреса в сообщениях [%s]\n\
		{F2C934}[1]{FFFFFF} Ежедневные админские квесты\n\
		{F2C934}[4]{FFFFFF} Управление базой данных музыки {CCCCCC}(радио, бумбоксы)\n\
		{F2C934}[5]{FFFFFF} Старая система капчи: [%s]\n\
		{F2C934}[1]{800080} Админ-магазин\n\
		{F2C934}[1]{FFFFFF} Отображение тега ADMIN над головой [%s]\n\
		[2]{FFFFFF} Warning о рекламе {E95252}ВКЛ\n\
		[3]{FFFFFF} Админ-софт (flycar, езда по воде)\n\
		[6]{FFD700} Заявки на разбан под залог\n\
		[3]{FFD700} Налоговики\n\
		[4] Видеореклама на билбордах [Заявок: 0]\n\
		[6] Аллея славы\n\
		[7] Статистика", \
		ACTIVEpanel[0] ? ("{AAE952}Вкл{FFFFFF}") : ("{E95252}Откл{FFFFFF}"),
		ACTIVEpanel[1] ? ("{AAE952}Вкл{FFFFFF}") : ("{E95252}Откл{FFFFFF}"),
		ACTIVEpanel[2] ? ("{AAE952}Вкл{FFFFFF}") : ("{E95252}Откл{FFFFFF}"),
		ACTIVEpanel[3] ? ("{AAE952}Новая{FFFFFF}") : ("{E95252}Старая{FFFFFF}"),
		ACTIVEpanel[4] ? ("{AAE952}ВКЛ{FFFFFF}") : ("{E95252}ОТКЛ{FFFFFF}"),
		AdminInfo[playerid][admIP] ? ("{AAE952}ВЫКЛ{FFFFFF}") : ("{E95252}ВКЛ{FFFFFF}"),
		ACTIVEpanel[5] ? ("{AAE952}Вкл{FFFFFF}") : ("{E95252}Откл{FFFFFF}"),
		AdminInfo[playerid][admNickNameTag] ? ("{AAE952}ВЫКЛЮЧЕНО{FFFFFF}") : ("{E95252}ВКЛЮЧЕНО{FFFFFF}"));

    return SPD(playerid, 27084, DIALOG_STYLE_LIST, !"Панель администратора", global_str, !"Выбрать", !"Закрыть");
}

cmd:sethp(playerid, params[])
{
	extract params -> new player:target, Float:hp; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /sethp [id] [ammount]");

	if(hp < 0.0 || hp > 150.0)
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /sethp [id] 150 > hp > 0");

    if(target == INVALID_PLAYER_ID)
		return 0;

	UpdatePlayerHealth(target, hp);

	f(global_str, 150, "[%s] установил игроку %s[%d] %.0f ХП", PN(playerid), PN(target), target, hp);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}

cmd:a(playerid, params[])
{
    if(sscanf(params, "s[150]", params[0]))
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /a [текст]");

   	return SAMF(COLOR_ACHAT, "[A] %s{99CC00} %s[%d]: %s", GetString(AdminInfo[playerid][admTag], "None") ? Admin_Names[PI[playerid][pAdmin]] : (str_f("{%s}%s", AdminInfo[playerid][admTagColor], AdminInfo[playerid][admTag])), PN(playerid), playerid, params[0]);
}

cmd:setint(playerid, data[])
{
    extract data -> new player:targetid, interior; else
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /setint [id игрока] [id интерьера]"), SCMF(playerid, -1, "Ваш интерьер: %d", GetPlayerInterior(playerid));

	return SetPlayerInterior(targetid, interior);
}

cmd:setvw(playerid, data[])
{
   	extract data -> new player:targetid, virtualworld; else
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /setvw [id игрока] [id виртуального мира]"), SCMF(playerid, -1, "Ваш виртуальный мир: %d", GetPlayerVirtualWorld(playerid));

    return SetPlayerVirtualWorld(targetid, virtualworld);
}

cmd:bizfin(playerid, data[])
{
	extract data -> new id; else 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /bizfin [id бизнеса]");

	if(id < 0 or id > OWNABLEBIZES) return false;

	return ShowWeekBiz(playerid, id);
}

cmd:spcars(playerid, params[])
{
	new Float:radius;

    if(sscanf(params, "f", radius))
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /spcars [радиус]");

    if(!(1.0 <= radius <= 100.0))
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /spcars [радиус > 0 или < 100]");

    new
        Float:x,
        Float:y,
        Float:z;

    foreach(Vehicle, i)
    {
        GetPlayerPos(playerid, x, y, z);
        if(IsVehicleInRangeOfPoint(i, radius, x, y, z))
        {
            if(IsBazarVehicle(i))
                continue;

            SetVehicleToRespawn(i);
        }
    }

    f(global_str, 150, "%s[%d] Заспавнил транспорт в радиусе %.01f", PN(playerid), playerid, radius);
    SendAdminsMessage(COLOR_ORANGE, global_str);
    return 1;
}

stock IsBazarVehicle(veh_id)
{
    for(new i = 0; i < MAX_AUTO_BAZAR; i++)
    {
        if(autoBazarInfo[i][autoBazarCarID] != veh_id)
            continue;

        return 1;
    }
    return 0;
}
cmd:skinall(playerid, params[])
{
	extract params -> new Float:radius, skinid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /skinall [radius] [skinID]");

    if(!(1.0 <= radius <= 100.0))
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /skinall [радиус > 0 или < 100]");

    if(!(1 <= skinid <= 381))
		return 0;

	new
		Float:x,
		Float:y,
		Float:z,
		num = 0;
	foreach(new i: Player)
    {
        GetPlayerPos(playerid, x, y, z);
        if(IsPlayerInRangeOfPoint(i, radius, x, y, z))
		{
			SetPlayerSkinEx(i, skinid);
			num ++;
			TogglePlayerControllable(i, true);
		}
    }
    f(global_str, 150, "[Информация] {FFFFFF}Вы успешно выдали скин %d игрокам в вашем радиусе.", num);
    SCM(playerid, COLOR_GREEN, global_str);
	f(global_str, 150, "[A] %s выдал временный скин %d игрокам!", PN(playerid), num);
    SendAdminsMessage(COLOR_GREEN, global_str);
	return 1;
}
cmd:gunall(playerid, params[])
{
	new num;
    new Float:x,Float:y,Float:z;
    new Float:id,mid,did;
    if(sscanf(params,"fii",id,mid,did)) return SCM(playerid, COLOR_OLDRED, !"Используй: /gunall [radius] [gunid] [ammo]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /gunall [радиус > 0 или < 100]");
    foreach(new i: Player)
    {
        if(pTemp[i][tAuthorized])
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z)) _GiveGun(i,mid,did),num++;
		}
    }
    f(global_str,150,"[A] %s выдал оружие %s %d игрокам!",PN(playerid),GunPN(mid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:spplayers(playerid, params[])
{
	new Float:radius,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",radius)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /spplayers [радиус]");
    if(radius<1 || radius > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /spplayers [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
    	if(PI[i][pAdmin]) continue;

        GetPlayerPos(playerid,x,y,z);
        if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
		{
			SCMF(i, COLOR_OLDRED, "Администратор %s[%d] вас заспавнил", PN(playerid), playerid);
            PlayerSpawn(i);
			num++;
		}
    }
    f(global_str, 150,"[Информация] {FFFFFF}Вы успешно заспавнили %d игроков в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
	f(global_str, 100,"[A] %s заспавнил %d игроков!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:azakon(playerid, params[])
{
    new Float:radius,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",radius)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /azakon [радиус]");
    if(radius<1 || radius > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /azakon [радиус > 0 или < 100]");
	new num;
	foreach(new i: Player)
	{
		if(pTemp[i][tAuthorized])
		{
			GetPlayerPos(playerid,x,y,z);
			if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
			{
		        /*r_wanted = radius;*/
                position_unjail[0] = x;
                position_unjail[1] = y;
                position_unjail[2] = z;
				num++;
			}
		}
	}
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно выдали игнор звезд %d игроков в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
	f(global_str, 100,"[A] %s выдал игнор звезд %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:freezeall(playerid, params[])
{
	new Float:radius,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",radius)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /freezeall [радиус]");
    if(radius<1 || radius > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /freezeall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        GetPlayerPos(playerid,x,y,z);
        if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
		{
		    TogglePlayerControllable(i,false);
			num++;
		}
	}
    f(global_str, 256,"[Информация] {FFFFFF}Вы успешно заморозили %d игроков в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
	f(global_str,100,"[A] %s заморозил %d игроков!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:unfreezeall(playerid, params[])
{ 
	new Float:radius,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",radius)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /unfreezeall [радиус]");
    if(radius<1 || radius > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /unfreezeall [радиус > 0 или < 100]");
    new num;
	foreach(new i: Player)
    {
        GetPlayerPos(playerid,x,y,z);
        if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
		{
		    TogglePlayerControllable(i,true);
			num++;
		}
	}
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно разморзил %d игроков в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
	f(global_str,100,"[A] %s разморозил %d игроков!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:armourall(playerid, params[])
{
	new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /armourall [радиус]");
    if(id<1 || id > 100) return SCM(playerid,COLOR_OLDRED,!"Используйте: /armourall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(pTemp[i][tAuthorized])
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            UpdatePlayerArmour(i,100);
	            num++;
	        }
		}
    }
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно выдали броню %d игрокам в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
    f(global_str,100,"[A] %s выдал броню %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:unarmorall(playerid, params[])
{
	new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /unarmourall [радиус]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /unarmourall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(pTemp[i][tAuthorized])
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            UpdatePlayerArmour(i,0);
	            num++;
	        }
		}
    }
    f(global_str,100,"[A] %s забрал броню %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:setarmour(playerid, params[])
{
	new
		target,
		Float:armour;

	if(sscanf(params, "uf", target, armour))
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /setarmour [id] [ammount]");

	if(armour > 1000.0)
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /setarmour [id] am < 1000");

	if(armour < 0.0)
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /setarmour [id] am > 0");

	if(target == INVALID_PLAYER_ID)
		return 0;

	UpdatePlayerArmour(target, armour);
	f(global_str, 256, "[A] Администратор %s установил игроку %s[%d] показатель брони на %.0f", PN(playerid), PN(target), target, armour);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}
cmd:slapall(playerid, params[])
{
    new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /slapall [радиус]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /slapall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(pTemp[i][tAuthorized])
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
             	new Float:X,Float:Y,Float:Z;
                GetPlayerPos(i,X,Y,Z);
                SetPlayerPos(i,X,Y,Z+5);
	            num++;
	        }
		}
    }
    f(global_str,256,"[A] Администратор %s[%d] дал поджопник %d игрокам",PN(playerid),playerid,num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:eatall(playerid, params[])
{
    new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /eatall [радиус]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /eatall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(pTemp[i][tAuthorized])
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            Fullness[i] = 100;
	            SetFullness(i, 100);
	            num++;
	        }
		}
    }
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно выдали сытость %d игрокам в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
    f(global_str,100,"[A] %s выдал сытость %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:hpall(playerid, params[])
{
    new Float:id,Float:x,Float:y,Float:z;
    if(sscanf(params,"f",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /hpall [радиус]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /hpall [радиус > 0 или < 100]");
    new num;
    foreach(new i: Player)
    {
        if(pTemp[i][tAuthorized])
        {
	        GetPlayerPos(playerid,x,y,z);
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            UpdatePlayerHealth(i,100);
	            num++;
	        }
		}
    }
    f(global_str,256,"[Информация] {FFFFFF}Вы успешно выдали хп %d игрокам в вашем радиусе.",num);
    SCM(playerid,COLOR_GREEN,global_str);
    f(global_str,100,"[A] %s выдал здоровье %d игрокам!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:weapall(playerid, params[])
{
	new num, Float:x,Float:y,Float:z,Float:id;
    if(sscanf(params,"f",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /weapall [radius]");
    if(id<1 || id > 100)return SCM(playerid,COLOR_OLDRED,!"Используйте: /weapall [радиус > 0 или < 100]");
    GetPlayerPos(playerid,x,y,z);
    foreach(new i: Player)
    {
        if(pTemp[i][tAuthorized])
        {
	        if(IsPlayerInRangeOfPoint(i,id,x,y,z))
	        {
	            _ResetGun(i);
	            num++;
	        }
		}
    }
    f(global_str,100,"[A] %s удалил оружие у %d игроков!",PN(playerid),num);
    SendAdminsMessage(COLOR_GREEN,global_str);
    return 1;
}
cmd:givegun(playerid, params[])
{
	if(sscanf(params, "udd", params[0], params[1], params[2])) return SCM(playerid, COLOR_OLDRED, !"Используй: /givegun [id] [gunid] [ammo]");
	if(params[0] == INVALID_PLAYER_ID)
	    return 0;

    if(params[1] < 0 || params[1] > 91) return SCM(playerid, COLOR_GREY, !"ID оружия не может быть ниже 0 и больше 91!");
 	if(params[2] > 500) return SCM(playerid, COLOR_GREY, !"Не больше 500 патронов!");
	_GiveGun(params[0], params[1], params[2]);
	f(global_str, 150, "[A] %s [ID: %d] выдал %s игроку %s[%d] !", PN(playerid), playerid, params[1] > 47 ? ("custom") : GunPN(params[1]), PN(params[0]), params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}

cmd:smp(playerid, params[])
{
	if(sscanf(params,"s[100]", params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /smp [текст]");
	if( IsAIP(params[0]) ) return 0;
	f(global_str,150,"[МП] %s: %s!!",PN(playerid),params[0]);
	ProxDetector(100,playerid,global_str,COLOR_GOLD,1);
	return 1;
}

cmd:eventmenu(playerid)
{
	format(global_str, 500, "\
		{9ACD32}» {FFFFFF}Позиция телепорта\n\
	    {9ACD32}» {FFFFFF}\"%s\"\n\
	    {9ACD32}» {FFFFFF}Выдача HP: %d\n\
	    {9ACD32}» {FFFFFF}Выдача Брони: %d\n\
	    {9ACD32}» {FFFFFF}Отбирать оружие при телепорте: %s\n\
	    {9ACD32}» {FFFFFF}Повторный телепорт: %s\n\
	    {9ACD32}» {FFFFFF}Лимит игроков: %d игроков\n\
		{9ACD32}» {FFFFFF}Время действия телепорта: %d секунд\n\
		{9ACD32}» %s{FFFFFF} телепорт", MPName,MPHealth,MPArmour,MPWeapon ? ("{05B212}Нет{FFFFFF}") : ("{FF1C05}Да{FFFFFF}"),MPTeleport ? ("{FF1C05}Запрещён{FFFFFF}") : ("{05B212}Разрешён{FFFFFF}"),MPPlayerLimit,MPTimeStatic,Teleport ? ("{FF1C05}Остановить{FFFFFF}") : ("{05B212}Запустить{FFFFFF}"));
	
	return SPD(playerid, 4690, DIALOG_STYLE_LIST, !"{9ACD32}Teleport Event", global_str, !"Выбрать", !"Закрыть");
}

cmd:gotp(playerid)
{
	if(PI[playerid][pDemorgan])
		return false;
	if(!Teleport)
		return SCM(playerid, -1, !"[Ошибка] Мероприятие еще не начиналось или время телепорта уже вышло.");
    if(MPTeleport == 1)
		return SCM(playerid, COLOR_LIGHTBLUE, !"[Мероприятие] {FFFFFF}По правилам мероприятия повторно телепортироватся запрещено.");
	if(!MPWeapon)
		return SPD(playerid, 4697, DIALOG_STYLE_MSGBOX, !"Предупреждение", !"{FFFFFF}По правилам мероприятия Ваше оружие будет изьято.\n\nВы согласны с этим?", !"Да", !"Нет");
	UpdatePlayerArmour(playerid, MPArmour);
	UpdatePlayerHealth(playerid, MPHealth);
    SetPlayerInterior(playerid, TeleportInfoq[1]);
	SetPlayerVirtualWorld(playerid, TeleportInfoq[0]);
	UpdatePlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]);
	SCM(playerid, COLOR_LIGHTBLUE, !"[Мероприятие] {FFFFFF}Вы телепортированы на мероприятие.");
	MPPlayersLimit --;
	if(!MPPlayersLimit)
	{
	    SCMALL(0x40FF00FF, !"[Мероприятие]{ffffff} Телепорт на мероприятие закрыт, лимит игроков закончился.");
		Teleport = 0;
		MPTime = 60;
	   	for(new i; i < 14; i++) TextDrawHideForAll(TeleportEvent[i]);
	}
	if(MPTeleport == 1)
		MPTeleportPlayer{playerid} = true;

	sendPlayerBattlepassAction(playerid, 62);

	return 1;
}
cmd:sp(playerid, params[])
{
	new targetid;
    if(sscanf(params, "us[64]", targetid, global_str))
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /sp [id] [Текст]");

   	if(targetid == INVALID_PLAYER_ID or targetid == playerid)
    	return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не найден!");

	amlf("Администратор <a href=../pages/user?id=%d>%s</a> написал за игрока <a href=../pages/user?id=%d>%s</a> | %s", 5, "","", PI[playerid][pID], PN(playerid), PI[targetid][pID], PN(targetid), global_str);

    return OnPlayerText(targetid, global_str);
}
cmd:spc(playerid, params[])
{
	new targetid;
    if(sscanf(params, "us[200]", targetid, params[0]))
    	return SCM(playerid, COLOR_OLDRED, !"Используй: /spc [id] [cmd]");

    if(targetid == INVALID_PLAYER_ID) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не найден!");
	if(!pTemp[playerid][tAuthorized] || !pTemp[targetid][tAuthorized] || targetid == playerid || IsOsnovatel(targetid))
    	return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок не найден!");

	if(!IsOsnovatel(playerid))
	{
		if(PI[targetid][pAdmin] > 0) return SendErrorMessage(playerid);
	}

	amlf("Администратор <a href=../pages/user?id=%d>%s</a> выполнил команду за игрока <a href=../pages/user?id=%d>%s</a> | %s", 5, "","", PI[playerid][pID], PN(playerid), PI[targetid][pID], PN(targetid), params[0]);

    PC_EmulateCommand(targetid, params[0]);
    return 1;
}

CMD:ao(playerid, params[])
{
	if(sscanf(params, "s[150]", params[0]))
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /ao [текст]");

	if(strlen(params[0]) > 150)
	    return SCM(playerid, COLOR_OLDRED, !"Используйте: /ao [текст]");

    if(IsAIP(params[0]) && PI[playerid][pAdmin] < 6) return 1;

	f(global_str, 300," %s {FFD700}%s: %s", GetString(AdminInfo[playerid][admTag], "None") ? Admin_Names[PI[playerid][pAdmin]] : (str_f("{%s}%s", AdminInfo[playerid][admTagColor], AdminInfo[playerid][admTag])), PN(playerid), params[0]),
    	SCMALL(COLOR_GOLD, global_str);
    	
	return 1;
}

cmd:taxi(playerid, params[])
{
	new carid = GetPlayerVehicleID(playerid);
	if( PlayerJob[playerid] != JOB_TAXI)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не таксист!");
	if(!IsATaxi(carid))return 0;
	if(!TaxiTarif[playerid]) SPD(playerid,56,1,"Тариф","{FFFFFF}Введите ваш тариф и слоган через запятую\n\n{9ACD32}- Тариф не менее $1 и не более $70\nСлоган не более 30-и символов","Ок", !"Отмена");
	else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже установили тариф!");
	return 1;
}

cmd:kiss(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_GREY, !"Используй: /kiss [id]");

	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(target))
		return 1;

	if(AnimPlayed{playerid} || AnimPlayed{target})
		 return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже используете анимации!");

 	if(PI[playerid][pHeal] > 0 || PI[target][pHeal] > 0)
	 	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");

    if(Cuffed[playerid] || Cuffed[target])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");

    if(CuffedTime[playerid] || CuffedTime[target])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы парализованы!");

	else if(GetPlayerVirtualWorld(playerid) == 534 or GetPlayerVirtualWorld(target) == 534)
		return false;

	if(!IsPlayerOnline(target))
		return false;

	else if(playerid == target)
		return SCM(playerid, COLOR_GREEN, !"Вы не можете поцеловать сами себя!");

	else if(!ProxDetectorS(3.0, playerid, target))
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");

	if(IsPlayerInRangeOfPoint(playerid, 100.0, 36.26, 2242.85, 1501.65) || IsPlayerInRangeOfPoint(target, 100.0, 36.26, 2242.85, 1501.65))
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Тут нельзя целоваться!");

    if(Int_GetPlayerData(playerid, !"payer") > Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не флуди!");

    SetPVarInt(playerid, !"payer", Global_Time + 5);
    new
        string[15 - 2 + MAX_PLAYER_NAME];

	f(string, sizeof(string), "Поцеловал(a) %s", PN(target));
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);

    f(string, sizeof(string), "Поцеловал(a) %s", PN(playerid));
    SetPlayerChatBubble(target, string, COLOR_PURPLE, 30.0, 5000);

	new
		Float:angle;
	GetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(target, angle + 180);

	sendPlayerBattlepassAction(playerid, 102);

	ApplyAnimationEx(playerid, !"BD_FIRE", !"GRLFRD_KISS_03", 4.0, 0, 0, 0, 0, 0);
	return ApplyAnimationEx(target, !"BD_FIRE", !"PLAYA_KISS_03", 4.0, 0, 0, 0, 0, 0);
}

cmd:anims(playerid, params[])
{
    if(!pTemp[playerid][tAuthorized] or GetPlayerVirtualWorld(playerid) == 534) return false;

	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В машине вы не можете использовать анимации!");

    if(AnimPlayed{playerid})
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже используете анимации!");

	if(PI[playerid][pHeal])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");

    if(Cuffed[playerid])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");

    if(CuffedTime[playerid])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы парализованы!");

	if(GetPlayerLauncher(playerid) == 1) 
	{
		SCM(playerid, COLOR_VALIK, "[Подсказка]{ffffff} Для быстрого доступа к меню анимаций, используйте {ff6666}клавишу U");
		executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', `[\"AnimationsMenu\"]`);");
		executeEvent(playerid, 0, "window.executeEvent('event.animationsMenu.ClearAnimations', '[ null ]');");
		for(new i; i < 29; i++)
		{
			if(!PI[playerid][pCustomDance][i]) continue;
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.animationsMenu.initializeAnimations', `[[{\"id\":%i,\"category\":\"uniq\",\"name\":\"%s\",\"image\":\"%s.png\",\"imageHover\":\"%s.gif\",\"liked\":0}]]`);", AnimInfo[126+i][anim_SelectID], ItemsInfo[4746+i][itemName], AnimInfo[126+i][anim_Name], AnimInfo[126+i][anim_Name])));
		}
		cursorPlayer(playerid, 0, true);
	}

	else if(GetPlayerLauncher(playerid) == 2)
	{
		cursorPlayer(playerid, 7, true);

		eventMobile(playerid, {7, 0}, !"[{\"id\":1,\"name\":\"Общение\"},{\"id\":2,\"name\":\"Действия\"},{\"id\":3,\"name\":\"Жесты\"},{\"id\":4,\"name\":\"Стойки\"},{\"id\":5,\"name\":\"Реакции\"},{\"id\":6,\"name\":\"Отдых\"},{\"id\":7,\"name\":\"Развлечения\"},{\"id\":8,\"name\":\"Самочувствие\"},{\"id\":9,\"name\":\"Уникальные анимации [NEW]\"}]");
		global_str = "[";

		for(new i, count; i < sizeof(AnimInfo); i++)
		{
			strcat(global_str, (str_f("{\"id\":%d,\"categoryId\":%d,\"name\":\"%s\",\"image\":\"%s.png\",\"imageHover\":\"%s.gif\",\"favorited\":0}", AnimInfo[i][anim_SelectID], AnimInfo[i][anim_CategoryID], i > 125 ? ItemsInfo[4746 - (i - 126)][itemName] : AnimInfo[i][anim_Named], AnimInfo[i][anim_Name], AnimInfo[i][anim_Name])));
			count ++;
			if(count == 24 || i == sizeof(AnimInfo) - 1)
			{
				strcat(global_str, "]");
				eventMobile(playerid, {7, 1}, global_str);

				if(i == sizeof(AnimInfo) - 1)
					break;
				else
					global_str = "[";

				count = 0;
			}
			else
				strcat(global_str, ",");
		}
	}

	else
	{
    	extract params -> new animid; else
			SCM(playerid, COLOR_OLDRED, !"Используй: {FFFFFF}( /anims id ) чтобы быстрей переключаться.");

		switch animid do
		{
			case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
			case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
			case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
			case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
			case 5: ApplyAnimationEx(playerid, !"DANCING", !"DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 0);
			case 6: ApplyAnimationEx(playerid, !"DANCING", !"dnce_M_a", 4.1, 1,0, 0, 0, 0, 0);
			case 7: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"wave_loop", 4.1, 1, 1, 1, 0, 0);
			case 8: ApplyAnimationEx(playerid, !"BEACH", !"bather", 4.0, 1, 0, 0, 0, 0);
			case 9: ApplyAnimationEx(playerid, !"ped", !"endchat_03", 4.1, 1, 0, 0, 0, 0, 0);
			case 10: ApplyAnimationEx(playerid, !"benchpress", !"gym_bp_celebrate", 4.0, 0, 0, 0, 0, 0);
			case 11: ApplyAnimationEx(playerid, !"PED", !"COWER", 4.1, 0, 0, 0, 0, 0, 1);
			case 12: ApplyAnimationEx(playerid, !"SHOP", !"ROB_SHIFTY", 4.1, 0, 0, 0, 0, 0, 1);
			case 13: ApplyAnimationEx(playerid, !"SHOP", !"ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 0, 1);
			case 14: ApplyAnimationEx(playerid, !"COP_AMBIENT", !"Coplook_loop", 4.0, 0, 1, 1, 1, -1);
			case 15: ApplyAnimationEx(playerid, !"FOOD", !"EAT_VOMIT_P", 4.1, 0, 0, 0, 0, 0, 1);
			case 16: ApplyAnimationEx(playerid, !"FOOD", !"EAT_BURGER", 4.1, 0, 0, 0, 0, 0, 1);
			case 17: ApplyAnimationEx(playerid, !"DEALER", !"DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
			case 18: ApplyAnimationEx(playerid, !"CRACK", !"CRCKDETH2", 4.1, 0, 0, 0, 0, 0, 1);
			case 19: ApplyAnimationEx(playerid, !"LOWRIDER", !"M_SMKLEAN_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 20: ApplyAnimationEx(playerid, !"LOWRIDER", !"F_SMKLEAN_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 21: ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_M_loop", 4.0, 0, 0, 0, 1, 1, 1);
			case 22: ApplyAnimationEx(playerid, !"PARK", !"Tai_Chi_Loop",4.0,1,0,0,0,0,1);
			case 23: ApplyAnimationEx(playerid, !"BAR", !"dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
			case 24: ApplyAnimationEx(playerid, !"DANCING", !"DAN_RIGHT_A", 4.1, 0, 0, 0, 0, 0, 1);
			case 25: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_DEF_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 26: ApplyAnimationEx(playerid, !"MISC", !"PLYR_SHKHEAD", 4.1, 0, 0, 0, 0, 0, 1);
			case 27: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
			case 28: ApplyAnimationEx(playerid, !"CAMERA", !"camstnd_cmon", 4.0, 0, 0, 0, 0, 0);
			case 29: ApplyAnimationEx(playerid, !"SHOP", !"SHP_ROB_HANDSUP", 4.1, 0, 0, 0, 0, 0, 1);
			case 30: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE2", 4.1, 0, 0, 0, 0, 0, 1);
			case 31: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE4", 4.1, 0, 0, 0, 0, 0, 1);
			case 32: ApplyAnimationEx(playerid, !"DEALER", !"DEALER_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
			case 33: ApplyAnimationEx(playerid, !"GANGS", !"LEANIDLE", 4.1, 0, 0, 0, 0, 0, 1);
			case 34: ApplyAnimationEx(playerid, !"GANGS", !"SHAKE_CARSH", 4.1, 0, 0, 0, 0, 0, 1);
			case 35: ApplyAnimationEx(playerid, !"GANGS", !"SMKCIG_PRTL", 4.1, 0, 0, 0, 0, 0, 1);
			case 36: ApplyAnimationEx(playerid, !"BEACH", !"ParkSit_W_loop", 3.0, 0, 1, 1, 1, 0);
			case 37: ApplyAnimationEx(playerid, !"INT_HOUSE", !"LOU_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 38: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_BORED_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 39: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_IDLE_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 40: ApplyAnimationEx(playerid, !"INT_OFFICE", !"OFF_SIT_TYPE_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 41: ApplyAnimationEx(playerid, !"INT_SHOP", !"SHOP_SHELF", 4.1, 0, 0, 0, 0, 0, 1);
			case 42: ApplyAnimationEx(playerid, !"JST_BUISNESS", !"girl_02", 4.1, 0, 0, 0, 1, 1, 1);
			case 43: ApplyAnimationEx(playerid, !"KISSING", !"GF_STREETARGUE_02", 4.1, 0, 0, 0, 0, 0, 1);
			case 44: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0, 1);
			case 45: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0, 1);
			case 46: ApplyAnimationEx(playerid, !"KISSING", !"Grlfrd_Kiss_02", 4.0, 0, 0, 0, 0, 0, 1);
			case 47: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_B_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 48: ApplyAnimationEx(playerid, !"MEDIC", !"CPR", 4.0, 0, 0, 0, 0, 0);
			case 49: ApplyAnimationEx(playerid, !"MISC", !"BITCHSLAP", 4.1, 0, 0, 0, 0, 0, 1);
			case 50: ApplyAnimationEx(playerid, !"MISC", !"BNG_WNDW", 4.1, 0, 0, 0, 0, 0, 1);
			case 51: ApplyAnimationEx(playerid, !"MISC", !"KAT_THROW_K", 4.1, 0, 0, 0, 0, 0, 1);
			case 52: ApplyAnimationEx(playerid, !"MISC", !"SEAT_LR", 4.1, 0, 0, 0, 0, 0, 1);
			case 53: ApplyAnimationEx(playerid, !"PED", !"SEAT_IDLE", 4.1, 0, 0, 0, 0, 0, 1);
			case 54: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"LKUP_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 55: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"POINTUP_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 56: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"PANIC_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 57: ApplyAnimationEx(playerid, !"ON_LOOKERS", !"SHOUT_02", 4.1, 0, 0, 0, 0, 0, 1);
			case 58: ApplyAnimationEx(playerid, !"GHANDS", !"gsign1LH", 4.0, 0, 0, 0, 0, 1, 1);
			case 59: ApplyAnimationEx(playerid, !"PED", !"IDLE_taxi", 4.0, 0, 0, 0, 0, 0);
			case 60: ApplyAnimationEx(playerid, !"POLICE", !"DOOR_KICK", 4.1, 0, 0, 0, 0, 0, 1);
			case 61: ApplyAnimationEx(playerid, !"POLICE", !"COPTRAF_STOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 62: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_ANGRY_B", 4.1, 0, 0, 0, 0, 0, 1);
			case 63: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
			case 64: ApplyAnimationEx(playerid, !"SWAT", !"GNSTWALL_INJURD", 4.1, 0, 0, 0, 0, 0, 1);
			case 65: ApplyAnimationEx(playerid, !"SWEET", !"SWEET_INJUREDLOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 66: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
			case 67: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN2", 4.1, 0, 0, 0, 0, 0, 1);
			case 68: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN4", 4.1, 0, 0, 0, 0, 0, 1);
			case 69: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN5", 4.1, 0, 0, 0, 0, 0, 1);
			case 70: ApplyAnimationEx(playerid, !"CRACK", !"CRCKIDLE1", 4.1, 0, 0, 0, 0, 0, 1);
			case 71: ApplyAnimationEx(playerid, !"SPRAYCAN", !"spraycan_full", 4.0, 0, 0, 0, 0, 0);
			case 72: ApplyAnimationEx(playerid, !"GRAFFITI", !"SPRAYCAN_FIRE", 4.1, 0, 0, 0, 0, 0, 1);
			case 73: ApplyAnimationEx(playerid, !"SMOKING", !"M_SMKSTND_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 74: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_CHANT", 4.1, 0, 0, 0, 0, 0, 1);
			case 75: ApplyAnimationEx(playerid, !"RIOT", !"RIOT_PUNCHES", 4.1, 0, 0, 0, 0, 0, 1);
			case 76: ApplyAnimationEx(playerid, !"PED", !"fucku", 4.0, 0, 0, 0, 0, 0, 1);
			case 77: ApplyAnimationEx(playerid, !"LOWRIDER", !"RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
			case 78: ApplyAnimationEx(playerid, !"CAR", !"FIXN_CAR_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 79: ApplyAnimationEx(playerid, !"CAR_CHAT", !"CAR_TALKM_LOOP", 4.1, 0, 0, 0, 0, 0, 1);
			case 80: ApplyAnimationEx(playerid, !"CRACK", !"BBALBAT_IDLE_01", 4.1, 0, 0, 0, 0, 0, 1);
			case 81: ApplyAnimationEx(playerid, !"CRACK", !"BBALBAT_IDLE_02", 4.1, 0, 0, 0, 0, 0, 1);
			case 82: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN1", 4.0, 0, 0, 0, 0, 1, 1);
			case 83: ApplyAnimationEx(playerid, !"GHANDS", !"GSIGN3", 4.0, 0, 0, 0, 0, 1, 1);
			case 84: ApplyAnimationEx(playerid, !"GRAVEYARD", !"mrnF_loop", 4.1, 0, 1, 1, 0, 0);
			case 85: ApplyAnimationEx(playerid, !"MISC", !"scratchballs_01", 4.0, 0, 0, 0, 0, 0);
			case 86: ApplyAnimationEx(playerid, !"INT_HOUSE", !"LOU_In", 4.1, 0, 0, 0, 1, 1, 1);
			case 87: ApplyAnimationEx(playerid, !"SUNBATHE", !"Lay_Bac_in", 3.0, 0, 1, 1, 1, 0);
			case 88: ApplyAnimationEx(playerid, !"BEACH", !"SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
			case 89: ApplyAnimationEx(playerid, !"PED", !"DLE_armed", 4.1, 0, 1, 1, 1, 1, 1);
			case 90: ApplyAnimationEx(playerid, !"PED", !"Gun_stand", 4.1, 0, 1, 1, 1, 1, 1);
			case 91: ApplyAnimationEx(playerid, !"KISSING", !"gfwave2", 4.1, 0, 1, 1, 0, 0);
			case 92: ApplyAnimationEx(playerid, !"PED", !"BIKE_fall_off", 4.1, 0, 1, 1, 1, 1, 1);
			case 93: ApplyAnimationEx(playerid, !"PED", !"BIKE_pickupL", 4.1, 0, 0, 0, 0, 0, 1);
			case 94: ApplyAnimationEx(playerid, !"GANGS", !"hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			case 95: ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			case 96: ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa_swt", 4.0, 0, 0, 0, 0, 0, 1);
			case 97: ApplyAnimationEx(playerid, !"GANGS", !"shake_carK", 4.0, 0, 0, 0, 0, 0);
			case 98: ApplyAnimationEx(playerid, !"GANGS", !"shake_cara", 4.0, 0, 0, 0, 0, 0);
			case 99: ApplyAnimationEx(playerid, !"PED", !"KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
			case 100: ApplyAnimationEx(playerid, !"PED", !"EV_DIVE", 4.0, 0, 1, 1, 1, 0);
			case 101: ApplyAnimationEx(playerid, !"PED", !"BIKE_fallR", 4.0, 0, 1, 1, 1, 0);
			case 102: ApplyAnimationEx(playerid, !"GYMNASIUM", !"GYMshadowbox", 4.0, 1, 1, 1, 1, 0);
			case 103: ApplyAnimationEx(playerid, !"PED", !"gang_gunstand", 3.0, 0, 1, 1, 1, 0);
			default:
			{
				return ShowPlayerDialogEx(playerid, 133, DIALOG_STYLE_LIST, !"Анимации",
					!"[1] Танцевать (1)\n\
					[2] Танцевать (2)\n\
					[3] Танцевать (3)\n\
					[4] Танцевать (4)\n\
					[5] Танцевать (5)\n\
					[6] Танцевать (6)\n\
					[7] Махать рукой\n\
					[8] Лечь на землю\n\
					[9] Попрощаться\n\
					[10] Читать рэп\n\
					[11] Сесть закрыв руками голову\n\
					[12] Надеть маску\n\
					[13] Вытянуть руки перед собой\n\
					[14] Сложить руки вмести\n\
					[15] Блювать (съел что-то не то...)\n\
					[16] Перекусить\n\
					[17] Предложить наркотики\n\
					[18] Лежать на земле (подёргиваясь)\n\
					[19] Курить по мужски\n\
					[20] Курить по женски\n\
					[21] Присесть на землю\n\
					[22] Восточное единоборство\n\
					[23] Выпить напиток\n\
					[24] Танцевать на одной ноге\n\
					[25] Встать в позу вратаря\n\
					[26] Facepalm\n\
					[27] Элемент восточного танца\n\
					[28] Позвать кого-то\n\
					[29] Поднять руки вверх\n\
					[30] Лежать на боку на земле\n\
					[31] Лежать на спине на земле\n\
					[32] Стоять как диллер (оборачиваясь)\n\
					[33] Облокотиться спиной\n\
					[34] Толкнуть боком\n\
					[35] Съесть что-то (правой рукой)\n\
					[36] Лечь, оперевшись на ладонь\n\
					[37] Сесть на стул\n\
					[38] Сидеть уставшим за компьютером\n\
					[39] Сидеть за столлом\n\
					[40] Сидеть и печатать\n\
					[41] Взять что-то и рассмотреть\n\
					[42] Сесть, закинув ногу на ногу\n\
					[43] Отказаться от чего-либо\n\
					[44] Поцелуй 1\n\
					[45] Поцелуй 2\n\
					[46] Поцелуй 3\n\
					[47] Размахивать руками на месте\n\
					[48] Искуственное дыхание\n\
					[49] Пощёчины для лежачего\n\
					[50] Подглядывать через что-то\n\
					[51] Элемент восточных единоборств\n\
					[52] Сесть на стул (2)\n\
					[53] Сесть на стул (3)\n\
					[54] Смотреть в небо\n\
					[55] Указать рукой наверх\n\
					[56] Очковать чего-то (быть в страхе)\n\
					[57] Призывать к чему-то (забастовка)\n\
					[58] Гангстерский жест\n\
					[59] Голосовать на остановке\n\
					[60] Удар ногой\n\
					[61] Стучаться в дверь\n\
					[62] Устроить бунт\n\
					[63] Пританцовывать\n\
					[64] Лежать на земле (как быдло)\n\
					[65] Плохое самочувствие\n\
					[66] Приветствие (гангста)\n\
					[67] Приветствие\n\
					[68] Жестикулировать (1)\n\
					[69] Жестикулировать (2)\n\
					[70] Сидеть раненым\n\
					[71] Наносить граффити (1)\n\
					[72] Наносить граффити (2)\n\
					[73] Курить\n\
					[74] Болельщик (2)\n\
					[75] Болельщик (3)\n\
					[76] Показать фак\n\
					[77] Читать реп\n\
					[78] Чинить машину\n\
					[79] Облокотиться на машину\n\
					[80] Держать биту (1)\n\
					[81] Держать биту (2)\n\
					[82] Жестикулировать (3)\n\
					[83] Жестикулировать (4)\n\
					[84] Плакать\n\
					[85] Чесать яйца\n\
					[86] Сесть [3]\n\
					[87] Ложиться [2]\n\
					[88] Ложиться [4]\n\
					[89] Встать в стойку с AK-47\n\
					[90] Встать в стойку с Deagle\n\
					[91] Махать рукой\n\
					[92] Упасть\n\
					[93] Подняться\n\
					[94] Поздороваться [1]\n\
					[95] Поздороваться [2]\n\
					[96] Поздороваться [3]\n\
					[97] Ударить с ноги\n\
					[98] Толкнуть\n\
					[99] Умирать\n\
					[100] Прыгнуть\n\
					[101] Перекатиться\n\
					[102] Бокс\n\
					[103] Навести пушку",
					!"Выбрать", !"Отмена");
			}
		}
		if(!(animid == 0))
			AnimPlayed{playerid} = true,
				TextDrawShowForPlayer(playerid, StopAnimation);
	}

	return 1;
}
alias:anims("anim", "animlist");
cmd:park(playerid)
{
	if(GetPlayerState(playerid) != 2) return SCM(playerid, COLOR_OLDRED, !"Вы должны быть за рулём cвоего авто!");
	if(!IsPlayerInHisVehicle(playerid) && !PI[playerid][pAdmin]) return SCM(playerid, COLOR_RED, !"Это не ваша машина!");
	for(new i; i < MAX_ZONE; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, nzone[i][zDistance], nzone[i][zEnter_x], nzone[i][zEnter_y], nzone[i][zEnter_z]))
	    {
	        SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"{B8F64D}Подсказка", !"{FFFFFF}В этом месте {B8F64D}нельзя {FFFFFF}припарковать личный авто!", !"Понял", !"");
	        return 1;
	    }
	}
	new Float: vhealth;
	new carid = GetPlayerVehicleID(playerid);
	new panels, doors_, lights_, tires;
	GetVehicleDamageStatus(carid, panels, doors_, lights_, tires);
	new number = GetVehicleID(carid);

	new Float: car_x, Float: car_y, Float: car_z;
	GetVehiclePos(carid, car_x, car_y, car_z);

	CarInfo[number][cPos][0] = car_x;
	CarInfo[number][cPos][1] = car_y;
	CarInfo[number][cPos][2] = car_z + 0.8;
	CarInfo[number][cParkedInPark] = 0;
	GetVehicleZAngle(carid, CarInfo[number][cPos][3]);
	GetVehicleHealth(carid, vhealth);
	CarInfo[number][cVirtualWorld] = GetPlayerVirtualWorld(playerid);
	CarInfo[number][cInterior] = GetPlayerInterior(playerid);
	RestartCar(carid);
	J_SetVehicleHealth(carid, vhealth);
	UpdateVehicleDamageStatus(carid, panels, doors_, lights_, tires);
	if(!IsAVelik(carid)) SetEngineStatus(carid, false, playerid);
	else SetEngineStatus(carid, true, playerid);
	CallTimeOutFunction("ModCar", 1000, false, "d", carid);
	if(GarageEntered[playerid] != -1) {
		if(GetPlayerVirtualWorld(playerid) != 0) {
			CarInfo[number][cParkedInGarage] = 1;
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно припарковали ваш автомобиль в гараже!\nТеперь ваша машина будет {ECE146}спавнится{FFFFFF} в этом месте.\nТеперь вам не надо платить {ECE146}налог{FFFFFF} за авто, которое стоит в гараже!\n\n", !"Понял", !"");
		}
	}
	else if(ParkingEntered[playerid] != -1) {
		if(GetPlayerVirtualWorld(playerid) != 0) {
			CarInfo[number][cParkedInParking] = 1;
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно припарковали ваш автомобиль в подземном паркинге!\nТеперь ваша машина будет {ECE146}спавнится{FFFFFF} в этом месте.\nТеперь вам не надо платить {ECE146}налог{FFFFFF} за авто, которое стоит в гараже!\n\n", !"Понял", !"");
		}
	} else {
		if(CarInfo[number][cParkedInGarage]) CarInfo[number][cParkedInGarage] = 0;
	}
	SaveOwnableCar(number);
	sendPlayerBattlepassAction(playerid, 28);
	return 1;
}
cmd:aparkcar(playerid, params[])
{
	new vehid;
	if(!sscanf(params, "d", vehid)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /aparkcar [vehicleid]");
	if(!IsAOwnableCar(vehid)) return false;
	
	DetachTrailerFromVehicle(vehid);
	new number = GetVehicleID(vehid);
	if(CarInfo[number][cShtraf]>0)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете поставить данное транспортное средство на штраф стоянку , так как оно уже там стоит!");
	SPD(playerid,0,0,!"","Вы поставили транспорт на штрафстоянку и получили 800$ в виде поощрения.", !"Закрыть","");
	SetString(CarInfo[number][cShtrafName], PN(playerid));
	new Float:Health,panels,doors_,lights_,tires;
	GetVehicleDamageStatus(vehid,panels,doors_,lights_,tires);
	GetVehicleHealth(vehid,Health);
	CarInfo[number][cShtraf] = 10000;
	CarInfo[number][cKeyIN] = 0;
	GetVehiclePos(vehid,CarInfo[number][cPos][0],CarInfo[number][cPos][1],CarInfo[number][cPos][2]);
	GetVehicleZAngle(vehid,CarInfo[number][cPos][3]);
	VehicleInfo[vehid][vAntiRepair]=2;
	VehicleHealth[vehid] = Health;
	SetVehiclePos(vehid, CarInfo[number][cPos][0],CarInfo[number][cPos][1],CarInfo[number][cPos][2]);
	SetVehicleHealth(vehid, Health);
	UpdateVehicleDamageStatus(vehid,panels,doors_,lights_,tires);
	SaveOwnableCar(number);
	SetVehicleToRespawn(vehid);
	return false;
}
cmd:sellcar(playerid)
{
    new carid = GetPlayerVehicleID(playerid);

	if(!IsAOwnableCar(carid))
		return false;

	if(!GetString(CarInfo[GetVehicleID(carid)][cOwner], PN(playerid)))
		return SCM(playerid, COLOR_GREY, !"Вы должны сидеть в личном транспорте");

	if((pTemp[playerid][pSellCar] != -1 && autoBazarInfo[pTemp[playerid][pSellCar]][autoBazarCarID] == carid))
	    return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете продать транспорт, пока вы торгуете на автобазаре");

	return SPD(playerid, 803, DIALOG_STYLE_MSGBOX, !"Предупреждение", !"{FFFFFF}Вы действительно хотите продать свой автомобиль?\nВнимание при продаже авто вам дадут только\nне большую часть от его гос. стоимости", !"Дальше", !"Отмена");
}

cmd:tradecar(playerid, params[])
{
    new id,dop;
    new carid = GetPlayerVehicleID(playerid);
    if(!GetString(CarInfo[GetVehicleID(carid)][cOwner], PN(playerid)))
		return SCM(playerid, COLOR_GREY, !"Вы должны сидеть в личном транспорте");
    if(!IsABoat(carid))
    {
	    if(IsPlayerInRangeOfPoint(playerid, 250, -2123.6548,-854.3079,32.0939))
		{
		    if(sellcarto[playerid]>Global_Time)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Делать предложение о покупке/обмене можно раз в минуту!");
		    if(sscanf(params,"ud",id,dop)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /tradecar [id] [Доплата (если без доплаты то ставьте 0)]");
            if(!IsPlayerConnected(id)) return SCM(playerid,COLOR_RED,!"Неверный id игрока!");
			if(!SettingData[id][sdActionTrade]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Игрок отключил возможность предлагать ему продажу/обмен авто!");
			if(dop>12000000)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Доплата не может превышать 12 000 000$");
		    if(IsPlayerInHisVehicle(playerid)) return SCM(playerid,COLOR_RED,!"Вы не в своем авто!");
		    if(IsPlayerInHisVehicle(id)) return SCM(playerid,COLOR_RED,!"Игрок с которым вы хотите обменятся авто, не в своем транспорте.");
		    if(id == playerid) return 0;
		    if(dop<0 || dop > 100000000)return 0;
		    new pcaridd = GetPlayerVehicleID(id);
		    if(!ProxDetectorS(10.0, playerid, id)) return SCM(playerid,COLOR_GREY, !"Игрок должен находится рядом с вами.");

			f(global_str,400,"{FFFFFF}Вы предлагаете %s обменяться транспортом\n\n_____________________\nВаша модель: %s\nКомплектация: %s\n{FFFFFF}Номер: %d\n\n{C16060}Модель %s: %s\nКомплектация: %s\n{FFFFFF}Номер: %d\nДоплата: %d\n\n{FFFFFF}_____________________",PN(id), GetVehicleName(carid),VehicleInfo[carid][vModification] == 554 ? ("{e54c4c}TT") : ("{96e54c}Сток"),carid,PN(id), GetVehicleName(pcaridd), VehicleInfo[pcaridd][vModification] == 578 ? ("{dd565f}TT") : ("{9ACD32}Сток"),pcaridd,dop);
			SPD(playerid,0,0,"Обмен транспортом",global_str,"Ок","");
			f(global_str,400,"{FFFFFF}%s предлагает вам обменяться транспортом\n\n_____________________\nВаша модель: %s\nКомплектация: %s\n{FFFFFF}Номер: %d\n\n{C16060}Модель %s: %s\nКомплектация: %s\n{FFFFFF}Номер: %d\nДоплата: %d\n\n{FFFFFF}_____________________",
			PN(playerid), GetVehicleName(GetPlayerVehicleID(id)), VehicleInfo[GetPlayerVehicleID(playerid)][vModification] == 578 ? ("{e54c4c}TT") : ("{96e54c}Сток"),GetPlayerVehicleID(id),PN(playerid), GetVehicleName(GetPlayerVehicleID(playerid)),VehicleInfo[carid][vModification] == 554 ? ("{e54c4c}TT") : ("{96e54c}Сток"),GetPlayerVehicleID(playerid),dop);
			SPD(id,2999,0,"Обмен транспортом",global_str, !"Принять","Отменить");
		 	caoffer[id]=playerid;
		 	caoffer[playerid]=id;
		 	cardop[playerid] = dop;
		 	cartrade[playerid]= GetPlayerVehicleID(playerid);
            cartrade[id] = GetPlayerVehicleID(id);
		 	sellcarto[playerid]=Global_Time+60;
		}
		else
		{
		    SCM(playerid,COLOR_RED,!"Продавать/обменеваться транспортом можно только на автобазаре! /GPS -> Другое -> Автобазар!");
		    EnableGPSForPlayer(playerid,-2154.3662,-970.6815,32.0234);
		}
	}
	return 1;
}

cmd:sellcarto(playerid, params[])
{
	if(!GetString(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cOwner], PN(playerid))) return SCM(playerid,COLOR_RED,!"Вы не в своем авто!");
	new carid = GetPlayerVehicleID(playerid);
    {
		if(IsPlayerInRangeOfPoint(playerid, 250, -2123.6548,-854.3079,32.0939))
		{
			if(sellcarto[playerid]>Global_Time)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Делать предложение о покупке/обмене можно раз в минуту!");
		    new number = GetVehicleID(carid);
		    if(!IsPlayerRegCar(playerid, carid)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не в своем авто!");
		    new id, cost;
		    if(sscanf(params,"ud",id,cost)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /sellcarto [id] [цена]");

			if(!SettingData[id][sdActionTrade])
				return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Игрок отключил возможность предлагать ему продажу/обмен авто!");
		    
			if(cost<10000)return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Слишком маленькая цена! [ Минимум 10000$ ]");
			if(!IsPlayerConnected(id)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Неверный id игрока!");
			if(id == playerid) return 0;
			if(!ProxDetectorS(7.0, playerid, id)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок должен быть рядом с транспортом");
			if(IsACar(carid) && cost > (CarInfo[number][cCost]*8)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Цена может быть не больше чем в 8 раз от гос. стоимости.");
			sellcarto[playerid]=Global_Time+60;
			f(global_str,150,"{FFFFFF}Вы предлагаете %s купить у вас транспорт\n\nМодель: %s\nНомер: %d\nЦена: %d$\nКомплектация: %s",
			PN(id), GetVehicleName(carid), carid,cost, VehicleInfo[carid][vModification] == 554 ? ("{e54c4c}TT") : ("{96e54c}Сток") );
			SPD(playerid,0,0,"Продажа транспорта",global_str,"Ок","");
			f(global_str,150,"{FFFFFF}%s предлагает вам купить у него транспорт\n\nМодель: %s\nНомер: %d\nЦена: %d$\nКомплектация: %s",
			PN(id), GetVehicleName(carid), carid,cost, VehicleInfo[carid][vModification] == 554 ? ("{e54c4c}TT") : ("{96e54c}Сток") );
			SPD(id,3000,0,"Покупка транспорта",global_str,"Купить", !"Отмена");
			CarOffer[id] = playerid;
			CarOffer[playerid] = id;
			CarPrice[id] = cost;
		}
		else
		{
		    SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Продавать/обменеваться транспортом можно только на автобазаре! /GPS -> Другое -> Автобазар!");
		    EnableGPSForPlayer(playerid,-2154.3662,-970.6815,32.0234);
		}
	}
	return 1;
}

cmd:key(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не в своем авто!");
	if(!IsPlayerInHisVehicle(playerid) && !PI[playerid][pAdmin])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не в своем авто!");

	if(IsANotControllable(playerid))
		return SCM(playerid, COLOR_GREY, !"Вы не можете двигаться в данный момент.");

	new
		carid = GetPlayerVehicleID(playerid),
		number = GetVehicleID(carid);
	
	if(IsAVelik(carid))
		return 1;

	if(VehicleInfo[carid][vFamily] != -1)
		return 1;
	
	if(CarInfo[number][cShtraf])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот транспорт стоит на штрафстоянке!");
	
	if(CarInfo[number][cKeyIN])
	{
		CarInfo[number][cKeyIN] = 0;
	    f(global_str, 128, " %s вытащил(а) ключи из замка зажигания", PN(playerid));
	    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	    SetEngineStatus(carid, false, playerid);
 	}
	else
	{
	    CarInfo[number][cKeyIN] = 1;
	    f(global_str, 128, " %s вставил(а) ключи в замок зажигания", PN(playerid));
	    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	}
	return SaveOwnableCar(number);
}
cmd:alarm(playerid, params[])
{
	extract params -> new car; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /alarm [id]");

	if(!IsPlayerHaveCar(playerid, car))
		return false;

    new number = GetVehicleID(car);

	CarInfo[number][cAlarmON] = !CarInfo[number][cAlarmON];
	SCMF(playerid, COLOR_RED, "Сигнализация %s", !CarInfo[number][cAlarmON] ? "включена" : "выключена");
	if(CarInfo[number][cAlarmON]) SetAlarmStatus(car, false);

	return 1;
}

cmd:jlock(playerid, params[])
{
    new Float: x, Float: y, Float: z, tyk = jlock[playerid];
    if(tyk != 0) GetVehiclePos(tyk, x, y, z);
    if(VehicleInfo[tyk][vLock] && IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
	{
	    if(VehicleInfo[tyk][vJob] == 0 && !IsAArendCar(tyk) ) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Закрывать/Открывать можно только рабочий и арендованый транспорт!");

	    VehicleInfo[tyk][vLock] = 0;
	    SetDoorsStatus(tyk, 0, playerid);
		GameTextForPlayer(playerid, "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~g~ UNLOCK~n~/jlock", 3000, 3);
		SetPlayerChatBubble(playerid, "* Открывает рабочий транспорт", COLOR_PURPLE, 10.0, 5000);
		tyk = 0;
		jlock[playerid] = tyk;
	}
	else
	{
	    if(GetPlayerState(playerid) != 2) return SCM(playerid, COLOR_RED, !"Доступно только на водительском месте!");
	    if(VehicleInfo[GetPlayerVehicleID(playerid)][vJob] == 0 && !IsAArendCar(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Закрывать/Открывать можно только рабочий и арендованый транспорт!");
	    VehicleInfo[GetPlayerVehicleID(playerid)][vLock] = 1;
		SetDoorsStatus(GetPlayerVehicleID(playerid), 1, playerid);
		GameTextForPlayer(playerid, "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~r~ LOCK~n~/jlock", 3000, 3);
		SetPlayerChatBubble(playerid, "* Закрывает рабочий транспорт", COLOR_PURPLE, 10.0, 5000);
		tyk = GetPlayerVehicleID(playerid);
		jlock[playerid] = tyk;
	}
	return 1;
}

cmd:style(playerid)
{
    if(!pTemp[playerid][tAuthorized])
		return false;
		
    if(GetPlayerState(playerid) != 2)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы должны находиться на водительском месте!");

    new vehid = GetPlayerVehicleID(playerid);

	if(GetVehicleID(vehid) == -1)
		return false;
    
    if(!CarInfo[GetVehicleID(vehid)][cInvCell][20])
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Изменить стиль езды можно только если у вас установлены технические модификации или на полицейских авто!");

    VehicleInfo[vehid][vStyle] = !VehicleInfo[vehid][vStyle];
	if(GetPlayerLauncher(playerid)) SendVehiclePacketData(vehid, 162, bool:VehicleInfo[vehid][vStyle]);
    if(IsAOwnableCar(vehid)) CarInfo[GetVehicleID(vehid)][cStyle] = !CarInfo[GetVehicleID(vehid)][cStyle];
    GameTextForPlayer(playerid, VehicleInfo[vehid][vStyle] ? ("~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~STYLE:~r~ SPORT!") : ("~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~STYLE:~g~ COMFORT!"), 3000, 3);
    return PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0);
}

cmd:remkey(playerid)
{
	if(!(AksSlot[playerid][0][5] == 1159)) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас нету уникального аксессуара 'Молоток'.");
	if(Int_GetPlayerData(playerid, "remkey") > Global_Time) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Использовать данный аксессуар можно 1 раз в час!");

	new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vY, Float:vZ;

	GetPlayerPos(playerid, pX, pY, pZ);

	new Float:minS = 1.50, Float:dist, car = INVALID_VEHICLE_ID;

	foreach(Vehicle, i)
	{
		GetVehiclePos(i, vX, vY, vZ);
		dist = PointToPoint(pX, pY, pZ, vX, vY, vZ);
		if(dist < minS)
		{
			car = i;
			minS = dist;
		}
	}
	if(car == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от транспорта, который нужно починить!");
	J_RepairVehicle(car);
	SetPVarInt(playerid, "remkey", Global_Time+3600);
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);
    f(global_str, 100, " %s отремонтировал свою машину.", PN(playerid));
	ProxDetector(25, playerid, global_str, COLOR_ME);
    GameTextForPlayer(playerid, !"~w~CAR IS ~g~REPAIRED", 5000, 6);
	return 1;
}

cmd:lock(playerid)
{
	new
		Float:pX, Float:pY, Float:pZ,
		Float:minS = 9.50, Float:CurrentDistance,
	    car = INVALID_VEHICLE_ID;

	GetPlayerPos(playerid, pX, pY, pZ);

	foreach(Vehicle, i)
	{
		if(!IsAOwnableCar(i)) continue;
		else if(IsPlayerHaveCar(playerid, i) or PI[playerid][pAdmin])
		{
			CurrentDistance = GetVehicleDistanceFromPoint(i, pX, pY, pZ);
			if(CurrentDistance < minS)
				car = i, minS = CurrentDistance;
		}
	}
	
	if(car == INVALID_VEHICLE_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Рядом с вами нет транспорта!");

	new
	    number = GetVehicleID(car);

	SetDoorsStatus(car, CarInfo[number][cLock] = !CarInfo[number][cLock], playerid);

	if(!GetPlayerLauncher(playerid))
		GameTextForPlayer(playerid, CarInfo[number][cLock] ? "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~r~ LOCK~n~/lock":"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~g~ UNLOCK~n~/lock", 3000, 3);
	
	else sendPlayerNotification(playerid, 0, "Уведомление", (str_f("Двери %s", CarInfo[number][cLock] ? "закрыты" : "открыты")), 3);

	SetPlayerChatBubble(playerid,  CarInfo[number][cLock] ? !"закрывает личный транспорт" : !"открывает личный транспорт", COLOR_PURPLE, 10.0, 5000);
	return true;
}

cmd:findibiz(playerid, params[])
{
	if(PI[playerid][pMoney] < 15000) return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	new id;
	if(sscanf(params,"d",id)) return SCM(playerid, COLOR_OLDRED, !"Используйте: /findibiz [id]");
	if(id > OWNABLEBIZES) return 0;
	EnableGPSForPlayer(playerid,BizData[id][bEnter][0],BizData[id][bEnter][1],BizData[id][bEnter][2]);
	GiveMoney(playerid,-15000);
	SCM(playerid,COLOR_LIGHTBLUE,"[Информация] {FFFFFF}На миникарте отмечено место где будет продаваться бизнес.");
	FirstGiveBizMoney(-2240.6787,577.6776,35.1719,15000);
	sendPlayerBattlepassAction(playerid, 6);

	return true;
}

cmd:findihouse(playerid, params[])
{
	if(PI[playerid][pMoney] < 15000) return SCM(playerid, COLOR_RED, !">>>>{FFFFFF} - У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
	new id;
	if(sscanf(params,"d",id)) return SCM(playerid,COLOR_OLDRED, !"Используйте: /findihouse [id]");
	if(id > OWNABLEHOUSES) return 0;
	EnableGPSForPlayer(playerid,HouseInfo[id][hEnter_X],HouseInfo[id][hEnter_Y],HouseInfo[id][hEnter_Z]);
	GiveMoney(playerid,-15000);
	SCM(playerid,COLOR_LIGHTBLUE,"[Информация] {FFFFFF}На миникарте отмечено место где будет продаваться дом.");
	FirstGiveBizMoney(-2240.6787,577.6776,35.1719,15000);
	sendPlayerBattlepassAction(playerid, 6);

	return true;
}

CMD:agl(playerid, params[])
{
	extract params -> new player:id, days; else
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Используй: /agl [id] [days]");

	if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Используй: /agl [id] [days]");

	if(days < 1 || days > 365) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Используй: /agl [id] [days (1 - 365)]");

	for(new i; i < 12; i++)
		GivePlayerLic(id, i, days);

	SavePlayerLicense(id);

 	return SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы успешно выдали игроку %s(%d) все лицензии!", PN(id), id);
}

cmd:setname(playerid, params[])
{
 	new id, name[MAX_PLAYER_NAME];
    if(sscanf(params, "us[24]", id, name)) return SCM(playerid, COLOR_OLDRED, !"Используй: /setname [id] [name]");
	if(PI[id][pAdmin]) return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Администратору не дозволено менять игровое имя!");

    mysql_format(mysql, global_str, 256, "SELECT `ID` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", name);
    mysql_tquery(mysql, global_str, "MysqlCheckNameSetName", "dds", playerid, id, name);
    return 1;
}

public: MysqlCheckNameSetName(playerid, id, name[])
{
    if(cache_num_rows() > 0) return SCM(playerid, -1, !"Это имя уже занято");
    else if(PI[id][pMember][1]) return SCM(playerid, COLOR_RED, !"Лидер не может сменить ник!");
    else if(RenamePlayer(id, name)) return 
    	SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Похоже что у игрока осталось имущество на аккаунте!");

    f(global_str, 256, "Вы сменили имя игрока %s[%d] на %s", PN(id), id, name);
    SCM(playerid, -1, global_str);
    f(global_str, 256, " Администратор %s сменил вам ник на %s", PN(playerid), name);
    SCM(id, -1, global_str);
    return true;
}

cmd:uvalall(playerid, params[])
{
	extract params -> new org_id; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /uvalall [ID организации (1-28)]");
	
	if(org_id > 28 || org_id < 1) return SCM(playerid,COLOR_GREY, !"OT 1 DO 28");

	foreach(Player, i)
	{
		if(PI[i][pMember][0] == org_id) UnInvite(i);
	}

	format(global_str, 128, "[A] %s[%d] сделал расформ организации \'%s\'.", PN(playerid), playerid, OrgInfo[org_id][oName]);
	SendAdminsMessage(COLOR_GREY, global_str);
	format(mysql_string, 128, "UPDATE accounts SET Member = 0, Rank = 0, Leader = 0 WHERE Member = %d", org_id);
	mysql_query(mysql, mysql_string);
	amlf("Администратор <a href=../pages/user?id=%d>%s</a> сделал полный расформ организации %s", 0, "","", PI[playerid][pID], PN(playerid), OrgInfo[org_id][oName]);
	return false;
}

cmd:uval(playerid, data[])
{
	extract data -> new player:targetid; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /uval [id]");

	if(!IsPlayerOnline(targetid))
	    return false;

	else if(PI[targetid][pMember][1])
		return SCM(playerid,COLOR_RED, !"Данный игрок лидер его можно снять только через /apanel");

	UnInvite(targetid);

    f(global_str, 150,  "[A] %s[ID: %d] Уволил игрока %s [%d] из организации", PN(playerid), playerid, PN(targetid), targetid);
	SendAdminsMessage(COLOR_OLDRED, global_str);

 	return SCMF(playerid, COLOR_LIGHTBLUE, "Вы выгнали %s из организации", PN(targetid));
}

cmd:uvaloff(playerid, data[])
{
	extract data -> new string:name[24]; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /uvaloff [name]");

	if(!(GetPlayerID(name) == INVALID_PLAYER_ID)) 
		return SCM(playerid, COLOR_OLDRED, !"ИГРОК ОНАЙЛАН!");

	format(mysql_string, 200, "UPDATE accounts SET Leader = '0', Member = '0', Rank = '0' WHERE `NickName` = '%s' LIMIT 1;", name);
	mysql_query(mysql, mysql_string);

	f(global_str, 150,  "[A] %s[ID: %d] Уволил игрока %s из организации оффлайн", PN(playerid), playerid, name);
	return SendAdminsMessage(COLOR_OLDRED, global_str);
}

cmd:out(playerid)
{
	if(PI[playerid][pVIP][0] < 5)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Команда доступна с 5 уровня VIP!");

    else if(PI[playerid][pMember][1])
		return SCM(playerid, COLOR_RED, !"Вы не можете уволится с лидерки!");

    else if(!PI[playerid][pMember][0])
		return SCM(playerid, COLOR_RED, !"Вы не состоите не в одной организации!");
		
    
	f(global_str, 100, "[Важно] {FFFFFF}%s[%d] покинул организацию по собственному желанию!", PN(playerid), playerid);
	SendTeamMessage(PI[playerid][pMember][0], COLOR_RED, global_str);

	UnInvite(playerid);
 	return SCM(playerid, COLOR_LIGHTBLUE, !"Вы ушли из организации");
}
cmd:su(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_GREY, !"Вы не полицейский!");
	if(PI[playerid][pRank]<5 ) return SCM(playerid,COLOR_RED,!"Подавать в розыск доступно с 5 ранга!");
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
	new id, wanted;
    if(sscanf(params, "uds[100]", id, wanted, global_str)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /su [id] [розыск] [причина]");
    if(IsADomen(global_str) || IsAMg(global_str))
    {
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
	if(id == INVALID_PLAYER_ID) return 0;
    if(IsAIP(global_str))return 1;
    if(PI[id][pWanted]>=6)return SCM(playerid,COLOR_GREY, !"У этого игрока уже 6-ой уровень розыска!");
    if(PI[id][pWanted]==wanted) return SCM(playerid,COLOR_GREY, !"Этот игрок и так уже имеет такой уровень розыска.");
    if(!IsPlayerConnected(id)) return SCM(playerid,COLOR_GREY, !"Неверный id игрока!");
    if(IsACop(id))return SCM(playerid,COLOR_GREY, !"Нельзя объявить в розыск полицейского");
    if(wanted < 1 || wanted > 6) return SCM(playerid,COLOR_GREY, !"Нельзя дать меньше 1 и больше 6 звезд");
	SetPlayerCriminal(playerid,id,PI[id][pWanted]+wanted,global_str);
    return 1;
}
cmd:f(playerid, params[])
{
    if(!IsAtGang(playerid) && !IsAtMafia(playerid))return 1;
	if(GetTeamID(playerid) == 0) return 0;
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
    if(PI[playerid][pFMuteTime] > 0) return SCM(playerid, COLOR_GREY, !"Лидер заглушил(а) вас и вы не можете писать в /f чат");
    if(sscanf(params,"s[150]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /f [text]");
    if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 1;
    }
    if(IsAIP(params[0]))return 1;
	f(global_str,200,"[F] %s %s[%d]: %s",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	SendTeamMessage(GetTeamID(playerid),COLOR_RACIO,global_str);
	return 1;
}
cmd:r(playerid, params[])
{
    global_str = "";
	if(IsAtGang(playerid) || IsAtMafia(playerid))return SCM(playerid,COLOR_RED,!"Используйте [/f]");
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(PI[playerid][pFMuteTime] > 0) return SCM(playerid, COLOR_GREY, !"Лидер заглушил(а) вас и вы не можете писать в /r чат");
	if(GetTeamID(playerid) == 0) return 1;
    if(sscanf(params,"s[150]",params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /r [text]");
    if(IsADomen(global_str))
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 1;
    }
    if(IsAIP(global_str))return 1;
	if(strlen(PI[playerid][pTag]) < 2) f(global_str,sizeof(global_str),"[R] %s %s[%d]: %s",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	else f(global_str,sizeof(global_str),"[R] [%s] %s %s[%d]: %s",PI[playerid][pTag],GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	SendTeamMessage(GetTeamID(playerid),COLOR_RACIO,global_str);
	SetPlayerChatBubble(playerid, "Сообщение по рации", COLOR_PURPLE, 10.0, 5000);
	return 1;
}
cmd:fb(playerid, params[])
{
    if(!IsAtGang(playerid) && !IsAtMafia(playerid))return 0;
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
    if(PI[playerid][pFMuteTime] > 0) return SCM(playerid, COLOR_GREY, !"Лидер заглушил(а) вас и вы не можете писать в /fb чат");
	if(GetTeamID(playerid) == 0) return 0;
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(sscanf(params,"s[150]", params[0])) return SCM(playerid,COLOR_OLDRED,!"Используйте: /fb [text]");
    if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(params[0]))return 1;
	if(PI[playerid][pAdmin]==0) f(global_str, 200,"[F] %s %s[%d]:(( %s ))",GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,params[0]);
	else f(global_str, 200,"[F] Администратор %s[%d]:(( %s ))",PN(playerid),playerid,params[0]);
	SendTeamMessage(GetTeamID(playerid),COLOR_RACIO,global_str);
	return 1;
}
cmd:rb(playerid, params[])
{
	if(IsAtGang(playerid) || IsAtMafia(playerid))return SCM(playerid,COLOR_RED,!"Используйте [/fb]");
    if(PI[playerid][pMuteTime] > 0) return SendMuteMessage(playerid);
    if(PI[playerid][pFMuteTime] > 0) return SCM(playerid, COLOR_GREY, !"Лидер заглушил(а) вас и вы не можете писать в /rb чат");
	if(GetTeamID(playerid) == 0) return 0;
	if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"Вы не на дежурстве!");
    if(sscanf(params,"s[150]", global_str)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /rb [text]");
    if(IsADomen(global_str)  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,-1, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(global_str)) return false;
	if(!PI[playerid][pAdmin]) f(global_str, 128,"[R] [%s] %s %s[%d]:(( %s ))",PI[playerid][pTag],GetRankName(GetTeamID(playerid),PI[playerid][pRank]),PN(playerid),playerid,global_str);
	else f(global_str, 128,"[R] Администратор %s[%d]:(( %s ))",PN(playerid),playerid, global_str);
	SendTeamMessage(GetTeamID(playerid),COLOR_RACIO, global_str);
	SetPlayerChatBubble(playerid, "Сообщение по рации", COLOR_PURPLE, 10.0, 5000);
	return 1;
}

cmd:d(playerid, params[])
{
	if(!IsAtFrakcia(playerid, 1))
		return SCM(playerid, COLOR_GREY, !"Вы не уполномочены писать в государственный чат");

	if(PI[playerid][pRank] < 5)
		return SCM(playerid, COLOR_RED, !"Писать можно с 5-го ранга!");

    if(PI[playerid][pMuteTime] > 0)
		return SendMuteMessage(playerid);

    if(sscanf(params, "s[150]", global_str))
		return SCM(playerid, COLOR_RED, !"Используйте /d [text]");

    if(IsADomen(global_str) && PI[playerid][pAdmin] < 6)
    {
		SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid, -1, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(!TeamDuty{playerid})
		return SCM(playerid, COLOR_RED, !"Вы не на дежурстве!");

	if(!PI[playerid][pAdmin])
		if(strlen(PI[playerid][pTag]) < 2) f(global_str, 200, "[D] %s %s[%d]: %s", GetRankName(GetTeamID(playerid),PI[playerid][pRank]), PN(playerid), playerid, global_str);
		else f(global_str, 200, "[D] [%s] %s %s[%d]: %s", PI[playerid][pTag], GetRankName(GetTeamID(playerid),PI[playerid][pRank]), PN(playerid), playerid, global_str);
	else
		f(global_str, 200, "[D] Администратор %s[%d]: %s", PN(playerid), playerid, global_str);

	SendGosMessage(COLOR_DEPAR, global_str);
	return 1;
}

CMD:vr(playerid, data[])
{
	if(PI[playerid][pVIP] < 5)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вип чат доступ для игроков статуса Titan VIP и выше!");

	if(PhoneImprovementsData[playerid][pdVIPChat])
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас выключен VIP чат!");

	if(PI[playerid][pMuteTime])
		return SendMuteMessage(playerid);

	if(sscanf(data, "s[145]", mysql_string))
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /vr [text]");

    if(IsAIP(mysql_string))
		return f(global_str, sizeof(global_str), "[Подозрение на рекламу] %s[%d]: [%s]", PN(playerid), playerid, mysql_string), SendAdminsMessage(COLOR_RED, global_str);

	if(Int_GetPlayerData(playerid, !"vr") > Global_Time && !IsOsnovatel(playerid, 1) && !GetPlayerADDVIP(playerid))
		return SCMF(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Для возможности повторной отправки сообщения в этот чат осталось 00:%d", Int_GetPlayerData(playerid, !"vr")-Global_Time);

	else if(!IsOsnovatel(playerid, 1) && !GetPlayerADDVIP(playerid)) if(PI[playerid][pVIP] == 6) SetPVarInt(playerid, !"vr", Global_Time + 2); 
	else SetPVarInt(playerid, !"vr", Global_Time + 15);
	
	switch PI[playerid][pVIP][0] do
	{
		case 5: global_str = "{6495ED}[VIP]";
		case 6: global_str = "{F345FC}[PREMIUM]";
		default: f(global_str, 50, "%s", PI[playerid][pVipName]);
	}

	f(global_str, 300, "%s{FFFFFF} %s[%d]{FFFFFF}: %s", !PI[playerid][pAdmin] ? global_str : (str_f("{FCC645}[ADMIN | %s{FCC645}]", GetString(AdminInfo[playerid][admTag], "None") ? Admin_Names[PI[playerid][pAdmin]] : (str_f("{%s}%s", AdminInfo[playerid][admTagColor], AdminInfo[playerid][admTag])))), PN(playerid), playerid, mysql_string);
	return SendVIPMessage(-1, global_str);
}

cmd:tow(playerid, params[])
{
    if(GetPlayerState(playerid) != 2) return SCM(playerid,COLOR_RED,!"Вы не за рулём!");
    new carid = GetPlayerVehicleID(playerid);
	if(GetVehicleModelEx(carid) != 525) return SCM(playerid,COLOR_RED,!"Вы не за рулём эвакуатора!");
    if(IsTrailerAttachedToVehicle(carid)) DetachTrailerFromVehicle(carid);
	else
	{
	    for(new i = 1; i < CountVehicles(); i ++)
	    {
	        new Float:X,Float:Y,Float:Z;
	        GetVehiclePos(i,X,Y,Z);
	        if(IsPlayerInRangeOfPoint(playerid,7.0,X,Y,Z) && i != carid)
			{
				AttachTrailerToVehicle(i,carid);
				break;
			}
			else continue;
	    }
    }
	return 1;
}
cmd:stopjob(playerid, params[])
{
	switch(PlayerJob[playerid])
	{

	    case JOB_NALOG:
	    {
	        HouseNalogState2[playerid] = 0;
		    HouseNalog[playerid] = -1;
		    SCM(playerid,COLOR_VALIK, !"Вы успешно закончили работу.");
	    }
	    case JOB_PIZZA:
	    {
	        if(InJob[playerid]==0)return SCM(playerid,COLOR_RED,!"Вы не работаете сейчас!");
	        InJobs[playerid]=0;
	        NumInc_CP[playerid]=-1;
	        if(PI[playerid][pOldSkin]!=0) SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
	        if(IsPlayerAttachedSlotUsedEx(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	        ClearAnimationsEx(playerid);
	        SCM(playerid,COLOR_VALIK, !"Вы успешно закончили работу.");
	    }
	}
	InJob[playerid]=0;

	ResetDynamicCPs(playerid);
	DisableAllRaceCPs(playerid);
	return 1;
}
cmd:gotaxi(playerid, params[])
{
	if(PlayerJob[playerid] != JOB_TAXI) return SCM(playerid,COLOR_RED,!"Вы не таксист");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gotaxi [id]");
    if(!IsPlayerConnected(id)) return 0;
    if(TaxiTarif[playerid]==0)return SCM(playerid,COLOR_LIGHTBLUE,"Принять вызов можно только с автомобиля такси с настроеным тарифом!");
    if(!TaxiON[id]) return SCM(playerid,COLOR_LIGHTBLUE,"Этот игрок не заказывал такси либо его заказ уже приняли");
    new string[100];
    f(string,sizeof(string),"Таксист %s принял ваш вызов, ждите",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,string);
    f(string,sizeof(string),"Игрок %s отмечен на карте",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,string);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(id,X,Y,Z);
    EnableGPSForPlayer(playerid,X,Y,Z);
    TaxiON[id] = false;
    f(string,sizeof(string),"Таксист %s принял вызов игрока %s",PN(playerid),PN(id));
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i)) continue;
	    if(PlayerJob[i] == JOB_TAXI) SCM(i,COLOR_LIGHTBLUE,string);
	}
	return 1;
}
cmd:gomechanic(playerid, params[])
{
	if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid,COLOR_RED,!"Вы не механик!");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gomechanic [id]");
    if(!IsPlayerConnected(id)) return 0;
    if(!MehanON[id]) return SCM(playerid,COLOR_LIGHTBLUE,"Этот игрок не вызывал механика либо его заказ уже приняли");
    new string[100];
    f(string,sizeof(string),"Механик %s принял ваш вызов, ждите",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,string);
    f(string,sizeof(string),"Игрок %s отмечен на карте",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,string);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(id,X,Y,Z);
    EnableGPSForPlayer(playerid,X,Y,Z);
    MehanON[id] = false;
    f(string,sizeof(string),"Механик %s принял вызов игрока %s",PN(playerid),PN(id));
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i)) continue;
	    if(PlayerJob[i] == JOB_MECHANIC) SCM(i,COLOR_LIGHTBLUE,string);
	}
	return 1;
}

stock LoadPBAccess(playerid, bool:type) {

	if(type) {

    	f(global_str, 128, "SELECT * FROM `accounts` WHERE `ID` = '%d' LIMIT 1", PI[playerid][pID]);
		new Cache:result = mysql_query(mysql, global_str);

		cache_get_value_name(0, !"battlepass_freeReward", global_str), sscanf(global_str, "p<,>a<d>[100]", battlepassReward[playerid][0]);
		cache_get_value_name(0, !"battlepass_premiumReward", global_str), sscanf(global_str, "p<,>a<d>[100]", battlepassReward[playerid][1]);

		cache_delete(result);
	}
	else {

	    SQL("UPDATE `accounts` SET `battlepass_freeReward` = '%s', `battlepass_premiumReward` = '%s' WHERE `ID` = '%d'", Int_PackMassive(0, battlepassReward[playerid][0]), Int_PackMassive(1, battlepassReward[playerid][1]), PI[playerid][pID]);
	}
	return 1;
}

cmd:gomedik(playerid, params[])
{
	if(!IsAMedic(playerid)) return SCM(playerid,COLOR_RED,!"Вы не врач!");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gomedik [id]");
    if(!IsPlayerConnected(id)) return 0;
    if(!MedikON[id]) return SCM(playerid,COLOR_LIGHTBLUE,"Этот игрок не вызывал скорую помощь либо его заказ уже приняли");
    new string[100];
    f(string,sizeof(string),"Медик %s принял ваш вызов, ждите",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,string);
    f(string,sizeof(string),"Игрок %s отмечен на карте",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,string);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(id,X,Y,Z);
    EnableGPSForPlayer(playerid,X,Y,Z);
    MedikON[id] = false;
	return 1;
}
cmd:gopolice(playerid, params[])
{
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED,!"Вы полицейский!");
    new id;
    if(sscanf(params,"u",id)) return SCM(playerid,COLOR_OLDRED,!"Используйте: /gopolice [id]");
    if(!IsPlayerConnected(id)) return 0;
    if(!PoliseON[id]) return SCM(playerid,COLOR_LIGHTBLUE,"Этот игрок не вызывал полицию либо его заказ уже приняли");
    new string[100];
    f(string,sizeof(string),"Дежурный %s принял ваш вызов, ждите",PN(playerid));
    SCM(id,COLOR_LIGHTBLUE,string);
    f(string,sizeof(string),"Игрок %s отмечен на карте",PN(id));
    SCM(playerid,COLOR_LIGHTBLUE,string);
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(id,X,Y,Z);
    EnableGPSForPlayer(playerid,X,Y,Z);
    PoliseON[id] = false;
	return 1;
}

cmd:giveweapon(playerid, params[])
{
	extract params -> new player:target, patrons; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /giveweapon [id] [патроны]");

	new
		weapon = GetPlayerWeaponEx(playerid),
		ammo = GetPlayerAmmoEx(playerid),
		slot = GetWeaponSlotEx(weapon);

	if(ammo < patrons || patrons <= 0)
		return SCM(playerid, COLOR_GREY, !"У тебя в руках нет оружия");

	if(PI[playerid][pGuns][slot] != weapon || target == INVALID_PLAYER_ID)
		return 0;

	if(!IsAFireGun(weapon))
		return SCM(playerid, COLOR_GREY, !"Передавать можно только огнестрельное оружие!");

	if(playerid == target)
		return SCM(playerid, COLOR_GREEN, !"Вы не можете передать оружие сами себе!");

	if(!ProxDetectorS(3.0, playerid, target))
		return SCM(playerid, COLOR_GREY, !"Вы далеко от игрока");

	SetPlayerChatBubble(playerid, !"Что-то передал", COLOR_PURPLE, 30.0, 5000);
	SetPlayerChatBubble(playerid, !"Взял оружие", COLOR_GREY, 30.0, 5000);
	_GiveGun(target, weapon, patrons);
	_GiveGun(playerid, weapon, -patrons);
	return 1;
}

cmd:ekonom(playerid, params[])
{
	if(PI[playerid][pMember][0]!= TEAM_MERIALS) return SCM(playerid,COLOR_RED,!"Данная возможность доступна только Правительству!");
	if(PI[playerid][pMember][1]==0 && PI[playerid][pAdmin]<5)return SCM(playerid,COLOR_RED,!"Проводить изменения в экономике может только губернатор!");
	if(!IsPlayerInRangeOfPoint(playerid,30.0,2000.0127,1139.0483,1038.6882))return SCM(playerid,COLOR_OLDRED,"Вы должны находится в здании мэрии на последнем этаже!");
 	SPD(playerid,401,2,"Управление штатом","{73B461}[1]{FFFFFF} Внести изменения в налоги.\n{73B461}[2]{FFFFFF} Изменить цены на аренду транспорта\n{73B461}[3]{FFFFFF} Изменить премию за службу закону\n{73B461}[4]{FFFFFF} Глобальные настройки", !"Принять", !"Отмена");
	return 1;
}

cmd:findcollectors(playerid)
{
	EnableGPSForPlayer(playerid,-2263.4514,177.9965,35.3056);
	return SCM(playerid, -1, !"->> Место проведения мероприятия отмечено на карте! Начало: {BCE63B}20.15.");
}

cmd:gps(playerid)
{
    if(InJob[playerid])
	    return SCM(playerid, COLOR_OLDRED, !"Вы не можете включить GPS во время работы.");

    else if(VehicleInfo[GetPlayerVehicleID(playerid)][vJob] == 1)
        return SCM(playerid, COLOR_RED, !"Сейчас вы не можете открыть GPS");

    return SPD(playerid, 705, DIALOG_STYLE_LIST, "GPS Навигатор", "\
	{B03131}-{FFFFFF} Важные места\n\
	{B03131}-{FFFFFF} Работы для новичков\n\
	{B03131}-{FFFFFF} По работе\n\
	{B03131}-{FFFFFF} Автосалоны\n\
	{B03131}-{FFFFFF} Отели\n\
	{B03131}-{FFFFFF} Разное\n\
	{B03131}-{FFFFFF} Автомастерские\n\
	{B03131}-{FFFFFF} Фермы\n\
	{B03131}-{FFFFFF} Секонд-хенды {FF0000}(new)\n\
	{B03131}-{FFFFFF} Бизнес/игровые организации\n\
	{B03131}-{FFFFFF} Ближайшая АЗС\n\
	{B03131}-{FFFFFF} Ближайшая АЗС на воде\n\
	{B03131}-{FFFFFF} Ближайший магазин 24/7\n\
	{B03131}-{FFFFFF} Ближайший магазин аксессуаров\n\
	{B03131}-{FFFFFF} Ближайшая закусочная\n\
	{B03131}-{FFFFFF} Ближайший магазин одежды\n\
	{B03131}-{FFFFFF} Ближайшая аренда\n\
	{B03131}-{FFFFFF} Ближайший магазин оружия\n\
	{B03131}-{FFFFFF} Ближайший банкомат\n\
	{B03131}-{FFFFFF} Ближайший паркинг\n\
	{B03131}-{FFFFFF} Ближайший ларек\n\
	{B03131}-{FFFFFF} Ближайшая мусорка\n\
	{FFD61A}-{FFFFFF} Ближайшая мастерская одежды\n\
	{FFD61A}-{FFFFFF} Ближайший магазин видеокарт\n\
	{B03131}-{FFFFFF} Мероприятия ({ECA63C}Ивенты{FFFFFF})\n\
	{B03131}-{FFFFFF} Эдвард ({ECA63C}Подарки/Гражданские талоны{FFFFFF})\n\
	{B03131}-{FFFFFF} Найти свой дом ({ECA63C}500${FFFFFF})\n\
	{B03131}-{FFFFFF} Найти семейный спавн ({ECA63C}500${FFFFFF})\n\
	{B03131}-{FFFFFF} Квестовые персонажи\n\
	{B03131}-{FFFFFF} Нефтевышки\n\
	{B03131}-{FFFFFF} Отключить", "Выбор", "Отмена");
}

cmd:time(playerid)
{
    if(CreateMats[playerid] == 4 || CreateMats[playerid] == 3) return 1;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PI[playerid][pHeal] == 0 && !PlayerLie{playerid}) ApplyAnimationEx(playerid, !"COP_AMBIENT", !"Coplook_watch", 4.1, 0, 0, 0, 0, 0, 1);

    new month, day, hour, minuite;
    gettime(hour, minuite, _); getdate(_, month, day);

	GameTextForPlayer(playerid, (str_f("~y~%d ~y~%s~n~~w~%02d:%02d~n~~g~played ~w~%d min.%s", day, mtext[month - 1][0], hour, minuite, floatround(float(PI[playerid][pPlayedTime]) / 60.0), PI[playerid][pMaskON] > 0 ? (str_f("~n~~r~mask: %d", PI[playerid][pMaskON])) : "")), 4000, 1);
    SetPlayerChatBubble(playerid, (str_f("%s взглянул(a) на часы", PN(playerid))), COLOR_PURPLE, 10.0, 5000);

    return true;
}

cmd:donate(playerid) 
	return ShowDonate(playerid);

cmd:licensers(playerid, params[])
{
	foreach(new i: Player)
	{
	    if(IsPlayerConnected(i))
	    {
		    if(GetTeamID(i) == TEAM_LICENSERS)
		    {
		        f(global_str, 150 ,"%s[%i] | Тел: %d\n",PN(i),i,PI[i][pPhoneInfo][0]);
		        SCM(playerid, COLOR_WHITE, global_str);
		    }
	    }
	}
	return 1;
}

cmd:blackplayers(playerid, params[])
{
    if(IsAtFrakcia(playerid) && PI[playerid][pMember][1])
	{
	    new s;
	    global_str = "";
		foreach(new i: Player)
		{
		    if(PI[i][pBL] != 0)
		    {
                f(global_str, 512, "%s{FFFFFF}%s[%i]{FFFFFF}\n", global_str, PN(i), i);
		        s ++;
		    }
		}
		f(global_str, 512, "%s\n\n\n{FAAC58}Всего: %d человек.", global_str, s);
		SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Черный список закона штата.", global_str, !"Принять", !"");
	}
	else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет доступа к этой системе!");
	return 1;
}

cmd:members(playerid,params[])
{
 	if(!PI[playerid][pMember][0]) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Ты не состоишь в организации");
	new kolvo = 0;
	global_str = "{FFFF00}Ник игрока\t{FFFF00}Ранг\t{FFFFFF}Выговоров\t{FFFFFF}АФК\n";
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
	    {
	  		if(GetTeamID(i) == GetTeamID(playerid) && !PI[i][pAdmin])
	  		{
	  			f(global_str, 2048,"%s{FFFFFF}%s(%i)\t%s(%d)\t%d\t%d\n",global_str,PN(i),i,GetRankName(GetTeamID(i),PI[i][pRank]),PI[i][pRank], PI[i][pFWarns],PlayerAFKTime[i]);
	  			kolvo++;
			}
		}
	}
	f(mysql_string,200, "{FFFFFF}%s(В сети: %d) | {ae433d}Организация",OrgInfo[GetTeamID(playerid)][oName],kolvo);
	if(kolvo) SPD(playerid,0,DIALOG_STYLE_TABLIST_HEADERS,mysql_string, global_str,"»","x");
	return 1;
}

cmd:limit(playerid, params[])
{
	if(GetPlayerState(playerid) != 2) 
		return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Вы должны быть в машине!");

	if(sscanf(params, "d", params[0])) 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Используй: /limit [ скорость ( 0 - чтобы выключить ) ]");

	if(params[0] == 0)
	{
		pTemp[playerid][pLimit] = 0;
		GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~LIMIT:~g~ OFF!",3000,3);
		return 1;
	}

	if(params[0] < 30 || params[0] > 150) 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Используйте число от 30 до 150!");

	pTemp[playerid][pLimit] = params[0];
	GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~LIMIT:~r~ ON!",3000,3);

	SCM(playerid, COLOR_ORANGE, !"[Подсказка] {FFFFFF}Используйте /limit для установки ограничителя скорости!");
	SCM(playerid,-1, !"/limit 0, отключить ограничитель!");
	return 1;
}

cmd:hi(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Нельзя использовать в машине");

	new
		id;

	if(sscanf(params, "u", id))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /hi [id]");

	if(id == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не найден");

    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(id, X, Y, Z);
    new Float:distance = GetPlayerDistanceFromPoint(playerid, X, Y, Z);
	if(distance < 1.5 && distance > 0.5 )
	{
    	if(PlayerLie{id} || !GetPlayerFaceToPlayer(playerid, id, 25.0))
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Повернитесь лицом к игроку");

    	if(!GetPlayerFaceToPlayer(id, playerid, 25.0))
			return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Этот игрок не повернут к вам лицом");

		new Float:angle;
		GetPlayerFacingAngle(playerid, angle);
		SetPlayerFacingAngle(id, angle + 180);
		f(global_str, 200, " %s пожал(а) руку %s", PN(playerid),PN(id));
		ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
		ApplyAnimationEx(playerid, !"GANGS", !"hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
		ApplyAnimationEx(id, !"GANGS", !"hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
		return 1;
	}
	else if(distance < 20.0)
	{
		f(global_str, 200, " %s машет рукой %s", PN(playerid), PN(id));
		ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
		ApplyAnimationEx(playerid, !"PED", !"endchat_03", 4.1, 0, 1, 1, 0, 0, 1);
	}
	else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы находитесь либо слишком близко от игрока, либо слишком далеко от игрока");
	return 1;
}

cmd:killme(playerid, params[])
{
	if(!GetCount(playerid, 550))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет яда или шприца!");

	if(PI[playerid][pHealth] > 40.0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Использовать яд можно только при смерти!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 10 секунд!");
    SetPVarInt(playerid, !"itemtime", Global_Time+10);
	if(!Crack{playerid} && !IsPlayerInAnyVehicle(playerid))
	{
		new
			string[19 - 2 + MAX_PLAYER_NAME];

	    f(string, sizeof(string), " %s принял дозу яда", PN(playerid));
	    ProxDetector(25.0, playerid, string, COLOR_PURPLE);
	    SetPlayerDrunkLevel(playerid, 50000);
		ApplyAnimationEx(playerid, !"KNIFE", !"KILL_Knife_Ped_Damage", 4.1, 0, 1, 1, 0, 0, 1);
		DeleteItem(playerid, 550, 1);
		SetPlayerTimer(playerid, "DeathPlayer", 1700, false);
	}
	else
		DeathPlayer(playerid);

	return 1;
}

public: DeathPlayer(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
	PI[playerid][pHeal] = 1;
    return
		UpdatePlayerHealth(playerid, 0);
}

cmd:smoke(playerid, params[])
{
	if(PI[playerid][pHeal]) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Пока вы находитесь на лечении вам запрещено курить");
	if(GetCount(playerid, 561) < 1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет сигарет");
	if(Cuffed[playerid])return 0;
	if(GetCount(playerid, 562) < 1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет зажигалки");
	if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);
    if(!Smoke[playerid])
    {
        new randsig = random(2);
	    if(!randsig)
	    {
	        f(global_str, 200," %s[%d] достал сигарету с зажигалкой и попытался закурить (Неудачно)",PN(playerid),playerid);
	        ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
	    }
	    else
	    {
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	        f(global_str, 200," %s[%d] достал сигарету с зажигалкой и закурил",PN(playerid),playerid);
	        ProxDetector(25.0,playerid,global_str,COLOR_PURPLE);
	        DeleteItem(playerid, 561, 1);
	        Smoke[playerid] = 1;
			SmokeTime[playerid] = 10;
			Smokes[playerid] = 0;
	    }
    }
	return 1;
}
cmd:skill(playerid) return ShowSkills(playerid, playerid, 0);
cmd:repcar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны быть не за рулём!");

    if(!GetCount(playerid, 520))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет набора для починки!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 10 секунд!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);

	new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vY, Float:vZ;
	GetPlayerPos(playerid, pX, pY, pZ);
	new Float:minS = 2.0, Float:dist, car = INVALID_VEHICLE_ID;
	foreach(Vehicle, i)
	{
		GetVehiclePos(i, vX, vY, vZ);
		dist = PointToPoint(pX, pY, pZ, vX, vY, vZ);
		if(dist < minS)
		{
			car = i;
			minS = dist;
		}
	}
	if(car == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от транспорта, который нужно починить!");
    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);
	J_RepairVehicle(car);
    DeleteItem(playerid, 520, 1);
    f(global_str, 80, " %s отремонтировал свою машину.", PN(playerid));
	ProxDetector(25, playerid, global_str, COLOR_ME);
    GameTextForPlayer(playerid, !"~w~CAR IS ~g~REPAIRED", 5000, 6);
	return 1;
}
cmd:ot(playerid)
{
	if(!ACTIVEpanel[3])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте /pm.");

	if(ReportID[playerid] != -1)
		return false;

	if(TotalReport <= 0)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Сейчас нет вопросов в репорт!");

	static stringer[61 - 2 + MAX_PLAYER_NAME];
    
    global_str = "";
    f(stringer, 90, "[Подсказка]{FFFFFF} Администратор %s принялся за ваш репорт!", PN(playerid));
    foreach(Player, i)
    {
        if(ReportON{i})
        {
            if(ReportSlot{i}) continue;
           	GetPVarString(i, "ReportMessage", global_str, 128);
    		f(global_str, 400, "{FFFFFF}Жалоба/Вопрос от: %s[%i]\n\n{c8e464}%s\n\n", PN(i), i, global_str);
			ReportID[playerid] = i;
			ReportID[i] = playerid;
			ReportSlot{i} = true;
			SCM(i, COLOR_RED, stringer);
			TotalReport --;
			break;
        }
    }
	return SPD(playerid, 6370, DIALOG_STYLE_INPUT, !"", global_str, !"Принять", !"Отмена");
}

cmd:pm(playerid, params[])
{
	new id,
		value;

    if(sscanf(params, "uds[150]", id, value, params[0]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /pm [id/name] [0-chat/1-dialog] [answer]");

    if(id == INVALID_PLAYER_ID)
		return 0;

	f(global_str, 300, "Администратор %s ответил вам:{FFFFFF} %s", PN(playerid), params[0]);
    if(!value) SCM(id, COLOR_ORANGE, global_str);
    else
	{
		f(global_str, 300, "{6666FF}Администратор %s ответил вам:{FFFFFF} %s",PN(playerid), params[0]);
		SPD(id, 9870, DIALOG_STYLE_MSGBOX,"",global_str, "Понял","");
		SetPVarString(id, "AdmIDPM", PN(playerid));
	}
	f(global_str, 300, "[A] %s[%d] написал игроку %s[%d]:{FFFFFF} %s", PN(playerid), playerid, PN(id), id, params[0]);
    SendAdminsMessage(COLOR_LIGHTBLUE, global_str);
    return 1;
}

alias:report("rep", "ask");
cmd:report(playerid)
{
	if(PI[playerid][pRMuteTime])
		return SCMF(playerid, COLOR_GREY, "У вас заблокирована возможность написания репорта. Оставшееся время блокировки %d секунд.", PI[playerid][pRMuteTime]);

    else if(PI[playerid][pMuteTime])
		return SendMuteMessage(playerid);

    else if(ReReport[playerid] > Global_Time && !GetPlayerADDVIP(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Писать репорт можно раз в 3 минуты!");

	else if(ReportSend{playerid})
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете задать вопрос в репорт!"), SCM(playerid, -1, !"Ожидайте ответа от администрации!");

	return SPDF(playerid, 32, DIALOG_STYLE_INPUT, !"{E88813}Репорт", "{ffffff}Вы собираетесь написать сообщение Администрации.\n{ffffff}Перед тем как отправить сообщение убедитесь,\n{ffffff}что не один из пунктов помощи не дал вам ответа на ваш вопрос.\n\n{AA3333}Запрещено:\n{AA3333}1. Флуд,оскорбления,оффтоп\n{AA3333}2. Просьбы (Дайте денег, дайте лидерку, дайте  дайте..)\n{AA3333}3. Ложные сообщения\n\n{DF4F4F}За нарушение правил администрация может: \n{DF4F4F}1. Предупредить (Warn)\n{DF4F4F}2. Кикнуть с сервера\n{DF4F4F}3. Заблокировать аккаунт (Ban)\n{DF4F4F}4. Удалить аккаунт (Dell) \n\n{65C360}Помните!\n{65C360}Мы всегда готовы помочь если вы соблюдаете правила.\n{65C360}Данные правила установлены для всех игроков %s RP\n\n{ffffff}Если вам долго не отвечают, подождите пару минут\n{ffffff}Вы не один на сервере.\n{E91BE9}Прежде чем задавать вопрос в репорт, попробуйте найти решение с помощью /help.\n{ffffff}Спасибо за понимание, с уважением Администрация State-%s\n\n", !"Отправить", !"Отмена", Setting_Server[0], Setting_Server[0]);
}

cmd:creategun(playerid)
{
    if(!IsAtGang(playerid) && !IsAtMafia(playerid)) return SCM(playerid, COLOR_GREEN, !"[Ошибка] {FFFFFF}Вы не находитесь в банде или мафии!");
	if(IsAtGang(playerid))
	{
		new zona = GetPlayerGangZone(playerid);
		if(zona < 0 || GangZoneInfo[zona][gangOwnerId] != PI[playerid][pMember][0]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF} Вы не можете создавать оружие вне своей территории!");
	}
    if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не можете двигаться!");
    return SPD(playerid, 353, DIALOG_STYLE_TABLIST_HEADERS, "", "Номер\tОружие\tРасход патронов\n{A0FF80}1.{FFFFFF}\tDeagle\t{FBAD2F}2{FFFFFF}к1\n{A0FF80}2.{FFFFFF}\tShotgun\t{FBAD2F}2{FFFFFF}к1\n{A0FF80}3.{FFFFFF}\tMp5\t{FBAD2F}2{FFFFFF}к1\n{A0FF80}4.{FFFFFF}\tM4\t{FBAD2F}2{FFFFFF}к1\n{A0FF80}5.{FFFFFF}\tAk47\t{FBAD2F}3{FFFFFF}к1\n{A0FF80}6.{FFFFFF}\tRifle\t{FBAD2F}10{FFFFFF}к1\n{A0FF80}7.{FFFFFF}\tSniper\t{FBAD2F}50{FFFFFF}к1\n{A0FF80}8.{FFFFFF}\tUzi\t{FBAD2F}2{FFFFFF}к1", !"Принять", !"Отмена");
}
/*cmd:sellgun(playerid, params[])
{
	if(!IsAtGang(playerid) && !IsAtMafia(playerid)) return SCM(playerid, COLOR_GREEN, !"[Ошибка] {FFFFFF}Вы не находитесь в банде или мафии!");
	if(IsAtGang(playerid))
	{
		new zona = GetPlayerGangZone(playerid);
		if(zona < 0 || GangZoneInfo[zona][gangOwnerId] != PI[playerid][pMember][0]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF} Вы не можете создавать оружие вне своей территории!");
	}
	if(Int_GetPlayerData(playerid, "sellgun") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
	if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не можете двигаться!");
	new id, name[30], ammo, price;
    if(id == playerid)
	{
	    SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не можете продавать себе оружие!");
		return SCM(playerid, -1, !"Используйте /creategun, чтобы сделать себе оружие.");
	}
	if(sscanf(params, "us[10]dd", id, name, ammo, price))
	{
		SCM(playerid, COLOR_GREEN, !"[Ошибка] {FFFFFF}Используйте: /sellgun [id] [Название] [Кол-во] [цена]");
		SCM(playerid, COLOR_GREEN, !"[Ошибка] {FFFFFF}Названия: deagle,shotgun,mp5,m4,ak47,rifle,sniper,uzi");
		return 1;
	}
	if(PI[id][pLevel] < 2) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Продавать оружие можно игрокам, выше 1-го уровня!");
	if(ammo > 300) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не можете сразу сделать больше 300 патронов!");
	if(!ProxDetectorS(3, playerid, id)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(price > 0 && ammo > 0)
	{
		if(price > 15000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}За свои услуги вы можете брать не более $15000");
		SGunOffer[id] = playerid;
		SGunPrice[id] = price;
		SGunAmmo[id] = ammo;
		if(GetString(name, "deagle"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 24;
		}
		else if(GetString(name, "shotgun"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 25;
		}
		else if(GetString(name, "mp5"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 29;
		}
		else if(GetString(name, "m4"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 31;
		}
		else if(GetString(name, "ak47"))
		{
			SGunMats[id] = ammo * 3;
			SGunID[id] = 30;
		}
		else if(GetString(name, "rifle"))
		{
			SGunMats[id] = ammo * 10;
			SGunID[id] = 33;
		}
		else if(GetString(name, "sniper"))
		{
			SGunMats[id] = ammo * 50;
			SGunID[id] = 34;
		}
		else if(GetString(name, "uzi"))
		{
			SGunMats[id] = ammo * 2;
			SGunID[id] = 28;
		}
		else return 1;
        SetPVarInt(playerid, "sellgun", Global_Time + 5);
		if(GetCount(playerid, 553) >= SGunMats[id])
		{
			f(global_str, 200, "{FFFFFF}\
				%s предлагает вам купить у него оружие.\n\n\
				Оружие: \t%s\n\
				Боеприпасы: \t%d\n\
				Цена: \t\t$%d",
				PN(playerid),
				GunPN(SGunID[id]),
				ammo,
				price);
			SPD(id, 24, DIALOG_STYLE_MSGBOX, "Вам предложили купить оружие", global_str, "Купить", !"Отмена");
		}
		else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно патронов для изготовления этого оружия!");
	}
	return 1;
} */
cmd:fightstyle(playerid, params[])
{
	SPD(playerid,58,2,"Выберите стиль боя","Обычный\nBoxing\nKungfu\nKneehead\nElbow\nКак изучить?", !"Выбрать", !"Отмена");
	return 1;
}

cmd:next(playerid, params[])
{
    if(BuyInt[playerid] != -1)
	{
	    if(BuyInt[playerid] == sizeof(IntInfo) -1)
			return TextDrawHideForPlayer(playerid, clothChois[4]), PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		
		TextDrawShowForPlayer(playerid, clothChois[9]);
    
		BuyInt[playerid] ++;
		new dnt = BuyInt[playerid];
		
		f(global_str, 100 , "Cost: $%d", IntInfo[dnt][iCost]);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
		
		SetPlayerCameraPos(playerid,IntInfo[dnt][iCam_X],IntInfo[dnt][iCam_Y],IntInfo[dnt][iCam_Z]); //
		SetPlayerCameraLookAt(playerid,IntInfo[dnt][iCamAt_X],IntInfo[dnt][iCamAt_Y],IntInfo[dnt][iCamAt_Z]); //
		SetPlayerInterior(playerid,IntInfo[dnt][iInterior]);
	}
	else if(pTemp[playerid][tSkinSelectedId] != -1)
	{
	    new nskin = PI[playerid][pSkin][0];
		if(IsPlayerInRangeOfPoint(playerid,2.0,199.1063, -128.3574, 1003.5152) && PI[playerid][pSkin][0] != 0)
		{
		    new race = PI[playerid][pRace];
		    new clother = pTemp[playerid][tSkinSelectedId];
			if(PI[playerid][pSex] < 2)
			{
				if( (clother + 1) == sizeof(MSkins[]) ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if( (clother + 2) == sizeof(MSkins[]) ) TextDrawHideForPlayer(playerid, clothChois[4]);
				else if(!MSkins[race][clother + 1]) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if(!MSkins[race][clother + 2]) TextDrawHideForPlayer(playerid, clothChois[4]);
				TextDrawShowForPlayer(playerid, clothChois[9]);
				pTemp[playerid][tSkinSelectedId] ++;
				clother = pTemp[playerid][tSkinSelectedId];
				if(MSkins[race][clother] != 0)
				{
					SetPlayerSkinEx(playerid,MSkins[race][clother]);
					f(global_str,100,"~g~Cost: ~r~$%d",MSkinCost[clother]);
				}
			}
			else
			{
			    if( (clother + 1) == sizeof(GSkins[]) ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				else if( (clother + 2) == sizeof(GSkins[]) ) TextDrawHideForPlayer(playerid, clothChois[4]);
				TextDrawShowForPlayer(playerid, clothChois[9]);
				pTemp[playerid][tSkinSelectedId] ++;
				clother = pTemp[playerid][tSkinSelectedId];
				SetPlayerSkinEx(playerid,GSkins[race][clother]);
				f(global_str,100,"~g~Cost: ~r~$%d",GSkinCost[clother]);
			}
			if(nskin != 0)
			{
  	 			PlayerTextDrawSetString(playerid, InfoText[playerid],global_str);
				ShowPlayerTD(playerid,InfoText[playerid]);
			}
			else DestroyPlayerTD(playerid,InfoText[playerid]);
		}
		else if(!nskin)
		{
			pTemp[playerid][tSkinSelectedId]++;
			ShowCefPublic(playerid, (str_f("updateCharacter|%s|%s|%i", PI[playerid][pSex] ? ("girl") : ("man"), PI[playerid][pRace] ? ("black") : ("white"), pTemp[playerid][tSkinSelectedId])), "0,0,0");

			if(nskin != 0)
			{
  	 			PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
				ShowPlayerTD(playerid, InfoText[playerid]);
			}
			else DestroyPlayerTD(playerid, InfoText[playerid]);
		}
	}
	else if(Buyitem[playerid] != -1)
	{
	    new race = PI[playerid][pType];
 		if(ItemsId[race][Buyitem[playerid]+2]==1) TextDrawHideForPlayer(playerid, clothChois[4]);
 		if(ItemsId[race][Buyitem[playerid]+1]==1) return 0;
 		ClearChatForPlayer(playerid);
 		TextDrawShowForPlayer(playerid, clothChois[9]);
 		Buyitem[playerid] ++;
 		DestroyPlayerObject(playerid, TempBGObject[playerid]);
 		new price = ItemsCost[race][Buyitem[playerid]];

		switch(ItemsId[race][Buyitem[playerid]])
		{
			case 19421,19422,19423,19424: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1407,0.0000, 0.0000, 198.9623);
			case 19069,19068,19067: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,360.0000, 30.0000, 93.3478);
			case 19554: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2006,331.0000, -94.0000, 89.0000);
			case 18953,18954: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,342.0000, -94.0000, 89.0000);
			case 18968,18967,18969: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,360.0000, 11.0000, 215.0000);
			case 18955,18956,18957,18959: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1406,360.0000, -328.0000, 153.0000);
			case 18926,18927,18928,18929,18930,18931,18932,18933: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1406,360.0000, -90.0000,42.2641);
			case 19104,19105,19106,19107,19108,19109: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 153.0000);
			case 18925,18922,18923,18924,18921: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 342.2888);
			case 19519,19274: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.8487, 2231.0430, 1801.5002,180.0000, 86.0000, 18.0000);
			case 19011,19012,19013,19014,19015,19016,19017,19018,19019,19024,19027,19028,19029,19022,19035,19031,19032,19033: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1604,360.0000, -2.0000, 213.3229);
			case 18911,18912,18913,18914,18915,18916,18917,18918,18919,18920: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.2166,61.0000, 10.0000, 226.0000);
			//шляпы
			case 18947,18948,18949,18950,18951: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1564,350.0000, 270.0000, 107.3994);
			//часы
			case 19042,19041,19040,19039,19043,19044,19045,19046,19048,19049,19050,19051,19053: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1364,158.0000, 360.0000, 278.0000);
			//портфели
			case 3026: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.2441, 2230.6956, 1801.1604,270.0000, -76.0000, 105.0000);
			case 371: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.4285, 2230.7007, 1801.1604,270.0000, -76.0000, 13.8877);
			case 19559: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.4285, 2230.7007, 1801.0804,270.0000, -76.0000, 16.9056);
			case 18910, 18909, 18908, 18907, 18906: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]], -397.5894, 2230.7183, 1801.1122, 106.1400, -2.6400, -110.5800 );
			case 18970, 18973, 18972, 18971: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]], -397.5000, 2230.7065, 1801.1350, -0.3000, 11.7600, -24.9600 );
		}
		f(global_str, 100, "~g~Cost: ~r~$%d", price);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}

	else if(BuyGuns[playerid] != -1)
	{
	    if(BuyGuns[playerid] == MAX_GUNS) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	    else if(BuyGuns[playerid] == MAX_GUNS-1) TextDrawHideForPlayer(playerid, clothChois[4]);
	    TextDrawShowForPlayer(playerid, clothChois[9]);
		BuyGuns[playerid] ++;
		BuyGunAmmo[playerid] = 0;
	    new bgid = BuyGuns[playerid];
		new gunid = BuyGunInfo[bgid][bgGunid];
	    new model = GetWeaponModel(gunid);
	    new price;
	    switch(BuyGuns[playerid])
	    {
	        case 1: price = BizData[BizEntered[playerid]][bItem][1];
	        case 2: price = BizData[BizEntered[playerid]][bItem][2];
	        case 3: price = BizData[BizEntered[playerid]][bItem][3];
	        case 4: price = BizData[BizEntered[playerid]][bItem][4];
	        case 5: price = BizData[BizEntered[playerid]][bItem][5];
	        case 6: price = BizData[BizEntered[playerid]][bItem][6];
	        case 7: price = BizData[BizEntered[playerid]][bItem][7];
	        case 8: price = BizData[BizEntered[playerid]][bItem][8];
	        case 9: price = BizData[BizEntered[playerid]][bItem][9];
	        case 10: price = BizData[BizEntered[playerid]][bItem][10];
		}
  		price += BuyGunInfo[bgid][bgGPrice];
     	//if(BuyGunInfo[bgid][bgAmmo][1] != 0) TextDrawShowForPlayer(playerid, ButtonUp);
	   	//else TextDrawHideForPlayer(playerid, ButtonUp);
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
		//TextDrawHideForPlayer(playerid, ButtonDown);
	    if(IsAFireGun(BuyGunInfo[bgid][bgGunid])) TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, 90.0, 0.0, 5.0);
	    else TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, GUN_ROT);
        f(global_str, 100, "~w~Name: %s~n~Ammo: %d~n~Cost: $%d", WeaponNames[gunid], BuyGunInfo[bgid][bgAmmo][0], price);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	return 1;
}
cmd:back(playerid, params[])
{
    if(BuyInt[playerid] != -1)
	{
	    if(BuyInt[playerid] == 1) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	    else if(BuyInt[playerid] == 2) TextDrawHideForPlayer(playerid, clothChois[9]);
		TextDrawShowForPlayer(playerid, clothChois[4]);
	    BuyInt[playerid] --;
		new dnt = BuyInt[playerid];
		SetPlayerInterior(playerid,IntInfo[dnt][iInterior]);
		SetPlayerCameraPos(playerid,IntInfo[dnt][iCam_X],IntInfo[dnt][iCam_Y],IntInfo[dnt][iCam_Z]); //
		SetPlayerCameraLookAt(playerid,IntInfo[dnt][iCamAt_X],IntInfo[dnt][iCamAt_Y],IntInfo[dnt][iCamAt_Z]); //
		f(global_str, 150 ,"Cost: $%d", IntInfo[dnt][iCost]);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	else if(pTemp[playerid][tSkinSelectedId] != -1)
	{
	    new nskin = PI[playerid][pSkin][0];
		if(IsPlayerInRangeOfPoint(playerid,2.0,199.1063, -128.3574, 1003.5152) && PI[playerid][pSkin][0] != 0)
		{
	        new race = PI[playerid][pRace];
	        if(pTemp[playerid][tSkinSelectedId] == 0 ) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	        else if(pTemp[playerid][tSkinSelectedId] == 1 ) TextDrawHideForPlayer(playerid, clothChois[9]);
			TextDrawShowForPlayer(playerid, clothChois[4]);
			pTemp[playerid][tSkinSelectedId] --;
			if(PI[playerid][pSex] < 2)
			{
				SetPlayerSkinEx(playerid,MSkins[race][pTemp[playerid][tSkinSelectedId]]);
				f(global_str, 80 ,"~g~Cost: ~r~$%d",MSkinCost[pTemp[playerid][tSkinSelectedId]]);
			}
			else
			{
				SetPlayerSkinEx(playerid,GSkins[race][pTemp[playerid][tSkinSelectedId]]);
				f(global_str, 80,"~g~Cost: ~r~$%d",GSkinCost[pTemp[playerid][tSkinSelectedId]]);
			}
			if(nskin != 0)
			{
  	 			PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
				ShowPlayerTD(playerid,InfoText[playerid]);
			}
			else DestroyPlayerTD(playerid,InfoText[playerid]);
		}
		else if(!nskin)
		{
		    pTemp[playerid][tSkinSelectedId]--;
			ShowCefPublic(playerid, (str_f("updateCharacter|%s|%s|%i", PI[playerid][pSex] ? ("girl") : ("man"), PI[playerid][pRace] ? ("black") : ("white"), pTemp[playerid][tSkinSelectedId])), "0,0,0");

  	 		if(nskin != 0)
			{
  	 			PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
				ShowPlayerTD(playerid,InfoText[playerid]);
			}
			else DestroyPlayerTD(playerid,InfoText[playerid]);
		}
	}
	else if(Buyitem[playerid] != -1)
	{
	    new race = PI[playerid][pType];
 		if(Buyitem[playerid]==1) TextDrawHideForPlayer(playerid, clothChois[9]);
 		if(Buyitem[playerid]==0) return 0;
 		ClearChatForPlayer(playerid);
 		TextDrawShowForPlayer(playerid, clothChois[4]);
 		Buyitem[playerid] --;
 		DestroyPlayerObject(playerid, TempBGObject[playerid]);
 		new price = ItemsCost[race][Buyitem[playerid]];
 		switch(ItemsId[race][Buyitem[playerid]])
		{
			case 19421,19422,19423,19424: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1407,0.0000, 0.0000, 198.9623);
			case 19069,19068,19067: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,360.0000, 30.0000, 93.3478);
			case 19554: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2006,331.0000, -94.0000, 89.0000);
			case 18953,18954: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,342.0000, -94.0000, 89.0000);
			case 18968,18967,18969: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1606,360.0000, 11.0000, 215.0000);
			case 18955,18956,18957,18959: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1406,360.0000, -328.0000, 153.0000);
			case 18926,18927,18928,18929,18930,18931,18932,18933: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.1406,360.0000, -90.0000,42.2641);
			case 19104,19105,19106,19107,19108,19109: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 153.0000);
			case 18925,18922,18923,18924,18921: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3705, 2230.6846, 1801.2004,349.0000, 271.0000, 342.2888);
			case 19519,19274: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.8487, 2231.0430, 1801.5002,180.0000, 86.0000, 18.0000);
			case 19011,19012,19013,19014,19015,19016,19017,19018,19019,19024,19027,19028,19029,19022,19035,19031,19032,19033: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1604,360.0000, -2.0000, 213.3229);
			case 18911,18912,18913,18914,18915,18916,18917,18918,18919,18920: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.2166,61.0000, 10.0000, 226.0000);
			//шляпы
			case 18947,18948,18949,18950,18951: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1564,350.0000, 270.0000, 107.3994);
			//часы
			case 19042,19041,19040,19039,19043,19044,19045,19046,19048,19049,19050,19051,19053: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.3884, 2230.6755, 1801.1364,158.0000, 360.0000, 278.0000);
			//портфели
			case 3026: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.2441, 2230.6956, 1801.1604,270.0000, -76.0000, 105.0000);
			case 371: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.4285, 2230.7007, 1801.1604,270.0000, -76.0000, 13.8877);
			case 19559: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]],-397.4285, 2230.7007, 1801.0804,270.0000, -76.0000, 16.9056);
			case 18910, 18909, 18908, 18907, 18906: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]], -397.5894, 2230.7183, 1801.1122, 106.1400, -2.6400, -110.5800 );
			case 18970, 18973, 18972, 18971: TempBGObject[playerid] = CreatePlayerObject(playerid,ItemsId[race][Buyitem[playerid]], -397.5000, 2230.7065, 1801.1350, -0.3000, 11.7600, -24.9600 );
		}
		f(global_str, 80 , "~g~Cost: ~r~$%d", price);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	else if(BuyGuns[playerid] != -1)
	{
	    if(BuyGuns[playerid] == 0) return PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
	    else if(BuyGuns[playerid] == 1) TextDrawHideForPlayer(playerid, clothChois[9]);
		TextDrawShowForPlayer(playerid, clothChois[4]);
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
//		TextDrawHideForPlayer(playerid, ButtonDown);
		BuyGuns[playerid] --;
	    BuyGunAmmo[playerid] = 0;
	    new bgid = BuyGuns[playerid];
		new gunid = BuyGunInfo[bgid][bgGunid];
	    new model = GetWeaponModel(gunid);
	    new price;
	    switch(BuyGuns[playerid])
	    {
	        case 0: price = BizData[BizEntered[playerid]][bItem][0];
	        case 1: price = BizData[BizEntered[playerid]][bItem][1];
	        case 2: price = BizData[BizEntered[playerid]][bItem][2];
	        case 3: price = BizData[BizEntered[playerid]][bItem][3];
	        case 4: price = BizData[BizEntered[playerid]][bItem][4];
	        case 5: price = BizData[BizEntered[playerid]][bItem][5];
	        case 6: price = BizData[BizEntered[playerid]][bItem][6];
	        case 7: price = BizData[BizEntered[playerid]][bItem][7];
	        case 8: price = BizData[BizEntered[playerid]][bItem][8];
	        case 9: price = BizData[BizEntered[playerid]][bItem][9];
		}
 		price += BuyGunInfo[bgid][bgGPrice];
		//if(BuyGunInfo[bgid][bgAmmo][1] != 0) TextDrawShowForPlayer(playerid, ButtonUp);
	    //else TextDrawHideForPlayer(playerid, ButtonUp);
	    if(IsAFireGun(BuyGunInfo[bgid][bgGunid])) TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, 90.0, 0.0, 5.0);
	    else TempBGObject[playerid] = CreatePlayerObject(playerid, model, GUN_POS, GUN_ROT);
        f(global_str, 150, "~w~Name: %s~n~Ammo: %d~n~Cost: $%d", WeaponNames[gunid], BuyGunInfo[bgid][bgAmmo][0], price);
		PlayerTextDrawSetString(playerid, InfoText[playerid], global_str);
	}
	return 1;
}
cmd:done(playerid, params[])
{
    if(BuyInt[playerid] != -1)
 	{
 	    if(PI[playerid][pHouseKey] != -1)
 	    {
		    new inte = BuyInt[playerid];
			if(PI[playerid][pMoney] >= IntInfo[inte][iCost])
		    {
		        switch(HouseInfo[PI[playerid][pHouseKey]][hKlass])
		        {
					case 1: if(HouseRooms[inte]>1)return SPD(playerid,0,0,!"","Увы, но в ваш дом не поместится такой ремонт!", !"Принять","");
				    case 2: if(HouseRooms[inte]>2)return SPD(playerid,0,0,!"","Увы, но в ваш дом не поместится такой ремонт!", !"Принять","");
				    case 3: if(HouseRooms[inte]>3)return SPD(playerid,0,0,!"","Увы, но в ваш дом не поместится такой ремонт!", !"Принять","");
					case 4: if(HouseRooms[inte]>4)return SPD(playerid,0,0,!"","Увы, но в ваш дом не поместится такой ремонт!", !"Принять","");
		        }
		        if(PI[playerid][pDCTime]!=1) PI[playerid][pDCTime]=1;
		        TogglePlayerControllable(playerid, true);
				SCM(playerid,COLOR_GREEN, !"Поздравляю вас с покупкой нового интерьера!");
				GiveMoney(playerid,-IntInfo[inte][iCost]);
				SetHouseInt( PI[playerid][pHouseKey], inte);
				BuyInt[playerid] = -1;
     			SettingSpawn(playerid);
				if(pTemp[playerid][SPECTPLAYER]==true) SpecPl(playerid, false);
				DestroyPlayerTD(playerid,InfoText[playerid]);
				SaveHouse(PI[playerid][pHouseKey]);
				PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			}
			else
			{
			    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
				SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
				return 1;
			}
		}
	}
	else if(pTemp[playerid][tSkinSelectedId] != -1)
	{
	    new nskin = PI[playerid][pSkin][0];
	    new skin = pTemp[playerid][tSkinSelectedId];
	    if(nskin != 0)
	    {
		    new cost;
		    new race = PI[playerid][pRace];
		    new clother = pTemp[playerid][tSkinSelectedId];//tika
		    if(PI[playerid][pSex]==1)
			{
				if(MSkins[race][clother]!=GetPlayerSkin(playerid))return 0;
			}
			if(PI[playerid][pSex]==2)
			{
			    if(GSkins[race][clother]!=GetPlayerSkin(playerid))return 0;
			}
            new bizid = BizEntered[playerid];
		    if(PI[playerid][pSex] == 2) cost = GSkinCost[skin];
		    else cost = MSkinCost[skin];
		    if(cost <= 0) cost = 140;
		    if(PI[playerid][pMoney] < cost) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}У вас недостаточно денег. Вы можете пополнить свой баланс [/donate]");
		    if(BizData[bizid][bProducts]<(cost/100))return SCM(playerid,-1, !"{FFFFFF}Извините, но у нас закончился товар!");
			pTemp[playerid][tSkinSelectedId] = -1;
			TogglePlayerControllable(playerid, true);
			UpdatePlayerPos(playerid, 199.0545,-131.5248,1003.5152);
			TogglePlayerDynamicCP(playerid, Binko_CP, true);
			AddItem(playerid, GetPlayerSkin(playerid), 1);
			GiveMoney(playerid,-cost);
   			GiveBizMoney(bizid,cost);
			BizData[bizid][bProducts]-=(cost/100);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid,OldWorld[playerid]);
			SendPedBot(playerid);
			SetPlayerSkinEx(playerid, PI[playerid][pOldSkin] > 311 ? GetSkinInfo(PI[playerid][pOldSkin], 2) : PI[playerid][pOldSkin]);
		}
		else
		{
			SetFullness(playerid, 100);
			SetPlayerWeather(playerid, Weather);
			UpdatePlayerDataInt(playerid, "Skin", PI[playerid][pSkin][0] = GetSkinInfo(skinRegistration[PI[playerid][pSex]][PI[playerid][pRace]][pTemp[playerid][tSkinSelectedId]], 2));
			pTemp[playerid][tSkinSelectedId] = -1;

		    if(pTemp[playerid][SPECTPLAYER]==true)SpecPl(playerid, false);
		    SetPlayerVirtualWorld(playerid, 0);
 			SetPlayerInterior(playerid, 0);

			if(PI[playerid][pRace]==0)
		    {
				switch(random(4))
				{
      				case 0:UpdatePlayerPos(playerid,1765.5046,-1892.7008,13.5611);
		  			case 1:UpdatePlayerPos(playerid,1765.3536,-1902.9863,13.5661);
		  			case 2:UpdatePlayerPos(playerid,1758.8562,-1903.0684,13.5646);
		  			case 3:UpdatePlayerPos(playerid,1758.8551,-1892.5815,13.5559);
				}
				SetPlayerFacingAngle(playerid, 199.2585);
			}
			else
			{
				UpdatePlayerPos(playerid, 2229.4236,-1156.9237,25.8201);
				SetPlayerFacingAngle(playerid,39.4635);
			}
			StopAudioStreamForPlayer(playerid);
			ClearChatForPlayer(playerid);

	 		SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}На сервере есть инвентарь, используйте клавишу Y для работы с ним.");
		 	SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}Вы можете задать вопрос в нашу техническую поддержку /report");
		 	SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка] {DC4747}Советуем получить паспорт, а затем отправиться на ферму или завод для заработка денег на права.");
		 	SCM(playerid, COLOR_WHITE, !"{DFCFCF}[Подсказка]{8F1E1E} У вас не привязан e-mail адрес. Привяжите его дабы подтвердить ваш аккаунт /mm - Настройки - e-mail.");
		 	
            PlayerSpawn(playerid);
			TogglePlayerControllable(playerid,true);

		   	PI[playerid][pHungryShow] = 0;
		   	SetFullness(playerid, 100);
		   	Hunger(playerid, 0);
		   	SettingData[playerid][sdActionTrade] = 1;
            PI[playerid][pZKP] = 20;
	   		PI[playerid][pHospital] = 25;
			UpdatePlayerHealth(playerid, 100);
		    SetCameraBehindPlayer(playerid);

		    CheckPointForPlayer(playerid,1773.6903,-1891.7493,13.5504);

			AddItem(playerid, 569, 1), AddItem(playerid, 679, 1), AddItem(playerid, 6508, 2);
		}
	}
	else if(Buyitem[playerid] != -1)
	{
	    new race = PI[playerid][pType],
	    	price = ItemsCost[race][Buyitem[playerid]],
	    		biz = BizEntered[playerid],
	    			item = ItemsIdInv[race][Buyitem[playerid]]+1;

        if(PI[playerid][pMoney]<price)return SendBotMessage(playerid,"Извините, но у вас не достаточто денег для покупки!");
        if(BizData[biz][bProducts]<(price/100))return SendBotMessage(playerid,"Извините, но у нас закончился товар!");

	    SendBotMessage(playerid,"Спасибо за покупку, приходите еще!");
		GiveMoney(playerid,-price);
		GiveBizMoney(biz,price);
		BizData[biz][bProducts] -= (price/100);
		AddItem(playerid, item, 1);
        TogglePlayerControllable(playerid, true);
        PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		SetCameraBehindPlayer(playerid);
		Buyitem[playerid] = PI[playerid][pType] = -1;
		DeletePVar(playerid, "timetobuy2");
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
	}
    else if(BuyGuns[playerid] != -1)
	{
	    new bgid = BuyGuns[playerid], ammo = BuyGunAmmo[playerid], weaponid = BuyGunInfo[bgid][bgGunid], ammos = BuyGunInfo[bgid][bgAmmo][ammo], money;
	    switch(BuyGuns[playerid])
	    {
	        case 0: money = BizData[BizEntered[playerid]][bItem][0];
	        case 1: money = BizData[BizEntered[playerid]][bItem][1];
	        case 2: money = BizData[BizEntered[playerid]][bItem][2];
	        case 3: money = BizData[BizEntered[playerid]][bItem][3];
	        case 4: money = BizData[BizEntered[playerid]][bItem][4];
	        case 5: money = BizData[BizEntered[playerid]][bItem][5];
	        case 6: money = BizData[BizEntered[playerid]][bItem][6];
	        case 7: money = BizData[BizEntered[playerid]][bItem][7];
	        case 8: money = BizData[BizEntered[playerid]][bItem][8];
	        case 9: money = BizData[BizEntered[playerid]][bItem][9];
	        case 10: money = BizData[BizEntered[playerid]][bItem][10];
		}
	    money += BuyGunInfo[bgid][bgGPrice];
     	new biz = BizEntered[playerid];
	    if(biz != -1)
		{
			if(BizData[biz][bProducts] < (money/10) ) return SendBotMessage(playerid,"Приносим свои извинения, так как у нас закончились продукты.");
			if(PI[playerid][pMoney]<money)return SendBotMessage(playerid,"Извините, но у вас недостаточно денег!");
		    BizData[biz][bProducts] -= (money/10);
			GiveBizMoney(biz,money);
		}
	    if(_GiveGun(playerid, weaponid, ammos) != -1)
	    {
	        if(PI[playerid][pMoney]<money) return SendBotMessage(playerid,"Извините, но у вас недостаточно денег!");
		    GiveMoney(playerid, -money);
		    f(global_str,100, "[Информация] {FFFFFF}Вы купили %s с %d боеприпасами за $%d", WeaponNames[weaponid], ammos, money);
		    SCM(playerid, COLOR_VALIK, global_str);
		    SendAmmoBot(playerid);
		    PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
			sendPlayerBattlepassAction(playerid, 21);
			return 0;
		}
	}
	DestroyPlayerTD(playerid,InfoText[playerid]);

	for(new i; i < 10; i++)
		TextDrawHideForPlayer(playerid, clothChois[i]);

	CancelSelectTextDraw(playerid);
	return 0;
}
cmd:cancel(playerid, params[])
{
    if(BuyInt[playerid] != -1)
 	{
 	    if(PI[playerid][pDCTime]!=1) PI[playerid][pDCTime]=1;
        TogglePlayerControllable(playerid, true);
		BuyInt[playerid] = -1;
		SettingSpawn(playerid);
		SpecPl(playerid, false);
		DestroyPlayerTD(playerid,InfoText[playerid]);
		PlayerPlaySound(playerid, 30800, 0.0, 0.0, 0.0);
	}
	else if(pTemp[playerid][tSkinSelectedId] != -1)
	{
	    new nskin = PI[playerid][pSkin][0];
	    if(nskin != 0)
	    {
	        UpdatePlayerPos(playerid, 199.0545, -131.5248, 1003.5152);
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
	  		SetPlayerVirtualWorld(playerid, OldWorld[playerid]);
			TogglePlayerDynamicCP(playerid, Binko_CP, true);
			PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
			pTemp[playerid][tSkinSelectedId] = -1;
			SetPlayerSkinEx(playerid, PI[playerid][pSkin][0]);
	    }
		else return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны выбрать скин!");
	}
	else if(Buyitem[playerid] != -1)
	{
        TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		Buyitem[playerid] = -1;
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
		PI[playerid][pType]=-1;
		SetPVarInt(playerid,"timetobuy2",0);
	}
	else if(BuyGuns[playerid] != -1)
	{
	    BuyGuns[playerid] = -1;
	    DestroyPlayerTD(playerid, InfoText[playerid]);
	    SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы отказались покупать оружие");
	    PlayerPlaySound(playerid, 30802, 0.0, 0.0, 0.0);
		SetCameraBehindPlayer(playerid);
		DestroyPlayerObject(playerid, TempBGObject[playerid]);
	}
	DestroyPlayerTD(playerid,InfoText[playerid]);

	for(new i; i < 10; i++)
		TextDrawHideForPlayer(playerid, clothChois[i]);

	CancelSelectTextDraw(playerid);
	return 1;
}
cmd:opengate(playerid)
{
    if(OGReset[playerid] > 0) return false;
    OGReset[playerid] = 2;
	if(!(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING))
	{
	    new forcount = MuchNumber(sizeof(GateInfo), sizeof(BarrierInfo), sizeof DoorInfo);
	    for(new i;i < forcount;i ++)
		{
			if(i < sizeof DoorInfo)
		    {
				if(IsPlayerInRangeOfPoint(playerid,3.0,DoorInfo[i][dPos][0],DoorInfo[i][dPos][1],DoorInfo[i][dPos][2]))
				{
					if(DoorInfo[i][dWorld] ==-1 || GetPlayerVirtualWorld(playerid) == DoorInfo[i][dWorld])
					{
						if(DoorInfo[i][dOrg] == TEAM_NONE || GetTeamID(playerid) == DoorInfo[i][dOrg] || ( IsACopDoor(i) && IsACop(playerid) ) || PI[playerid][pAdmin])
						{
							if(!DoorInfo[i][dStatus])
							{
								MoveDynamicObject(dDoor[i],DoorInfo[i][dPosEnd][0],DoorInfo[i][dPosEnd][1],DoorInfo[i][dPosEnd][2],DoorInfo[i][dSpeed],0.0,0.0, DoorInfo[i][dTypeMove] ? (DoorInfo[i][dPosEnd][3]+float(getMeToDoor(playerid, i))):(DoorInfo[i][dPosEnd][3]));
								CallTimeOutFunction("DoorClose", 6000, false, "i", i);
								DoorInfo[i][dStatus] = true;
								SetPlayerChatBubble(playerid, !"Открыл дверь", COLOR_GREEN, 10.0, 5000);
							}
							break;
						}
						else return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этой двери!");
					}
				}
			}
		    if(i < sizeof(GateInfo))
		    {
		        if(GateInfo[i][gCreated])
		        {
					if(IsPlayerInRangeOfPoint(playerid,6.2,GateInfo[i][gClose_X],GateInfo[i][gClose_Y],GateInfo[i][gClose_Z]))
					{
					    if(GateInfo[i][gWorld]==-1 || GetPlayerVirtualWorld(playerid)==GateInfo[i][gWorld])
					    {
							if(GateInfo[i][gOrg] == TEAM_NONE || GetTeamID(playerid) == GateInfo[i][gOrg] || ( IsACopGate(i) && IsACop(playerid) ) || PI[playerid][pAdmin] )
							{
								if(!GateInfo[i][gOpen])
								{
									MoveDynamicObject(gGate[i],GateInfo[i][gOpen_X],GateInfo[i][gOpen_Y],GateInfo[i][gOpen_Z],3.0);
									CallTimeOutFunction("GateClose",7000,0,"i",i);
									GateInfo[i][gOpen] = true;
									if(GateInfo[i][gForGateid] != -1)
									{
									    new gateid = GateInfo[i][gForGateid];
									    MoveDynamicObject(gGate[gateid],GateInfo[gateid][gOpen_X],GateInfo[gateid][gOpen_Y],GateInfo[gateid][gOpen_Z],3.0);
										GateInfo[gateid][gOpen] = true;
										SetPlayerChatBubble(playerid, "Открыл ворота", COLOR_GREEN, 10.0, 5000);
									}
								}
							}
							else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас нет ключей от этих ворот!");
							break;
						}
					}
				}
			}
			if(i < sizeof(BarrierInfo))
			{
				if(IsPlayerInRangeOfPoint(playerid, 8.0 ,BarrierInfo[i][brPos_X], BarrierInfo[i][brPos_Y], BarrierInfo[i][brPos_Z]))
				{
					if(BarrierInfo[i][brOrg] == TEAM_NONE || GetTeamID(playerid) == BarrierInfo[i][brOrg] || ( IsACopBarrier(i) && IsACop(playerid) ) || PI[playerid][pAdmin] )
					{
						if(!BarrierInfo[i][brOpen])
						{
							switch i do
							{
								case 2, 3, 22, 23, 24:
								{
									if(PI[playerid][pMoney] < 100)
										return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег чтобы оплатить проезд!");

									GiveMoney(playerid, -100);
								}
								case 26, 27:
								{
									if(PI[playerid][pMoney] < 15000) 
										return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас недостаточно денег чтобы оплатить комиссию авторынка!");
									
									GiveMoney(playerid,-floatround(BizData[AutoMarket][bEnterPrice]));
							        GiveBizMoney(AutoMarket, floatround(BizData[AutoMarket][bEnterPrice]));
								}
							}

							GetDynamicObjectPos(gBarrier[i], BarrierInfo[i][brData][0], BarrierInfo[i][brData][1], BarrierInfo[i][brData][2]);
							GetDynamicObjectRot(gBarrier[i], BarrierInfo[i][brData][3], BarrierInfo[i][brData][4], BarrierInfo[i][brData][5]);

							if(i == 2 or i == 3 or i == 22 or i == 23)
                           		MoveDynamicObject(gBarrier[i], BarrierInfo[i][brPos_X], BarrierInfo[i][brPos_Y], BarrierInfo[i][brPos_Z] + 0.07, BARRIER_SPEED * 5, 0.0, BarrierInfo[i][brPos_A] - 90, BarrierInfo[i][brData][5]);
							else
								MoveDynamicObject(gBarrier[i], BarrierInfo[i][brPos_X], BarrierInfo[i][brPos_Y], BarrierInfo[i][brPos_Z] + 0.7, BARRIER_SPEED, 0.0, 0.0, BarrierInfo[i][brPos_A]+180);

							CallTimeOutFunction("BarrierClose", 15000, false, "i", i);
						  	
						  	BarrierInfo[i][brOpen] = true;
							SCM(playerid, COLOR_LIGHTGREEN, !"[В] Шлагбаум закроется через 15 секунд");
							SetPlayerChatBubble(playerid,  !"Открыл шлагбаум", COLOR_GREEN, 10.0, 5000);

							if(!(BarrierInfo[i][brForBarrierID] == -1))
							{
							    new barrierid = BarrierInfo[i][brForBarrierID];
							    MoveDynamicObject(gBarrier[barrierid],BarrierInfo[barrierid][brPos_X],BarrierInfo[barrierid][brPos_Y],BarrierInfo[barrierid][brPos_Z]+0.7,BARRIER_SPEED,0.0,0.0,BarrierInfo[barrierid][brPos_A]+180);
								BarrierInfo[barrierid][brOpen] = true;
							}
							
						}
					}
					else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет ключей от этого шлагбаума!");
					break;
				}
			}
		}
	}
	return 1;
}
cmd:eject(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Используйте: /eject [ID/Name]");
	if(playerid == id) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Нельзя выкинуть самого себя.");
	if(GetPlayerState(playerid) != 2) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Только водитель может сделать это");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(id)) return 0;
	new power = random(10);
	if(power > 5)
	{
		f(global_str, 100, " %s неудачно попытался выкинуть из транспорта игрока %s", PN(playerid), PN(id));
		ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	}
	else
	{
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(id,true);
		f(global_str, 100, " %s выкинул из транспорта %s", PN(playerid), PN(id));
		ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
		RemovePlayerFromVehicle(id);
	}
	return 1;
}
cmd:medcard(playerid, params[])
{
	if(!IsAMedic(playerid)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не состоите в больнице штата!");
    if(PI[playerid][pRank] < 3) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Ваш ранг недостаточно высок для этого.");
    new id, status;
    if(sscanf(params, "ui", id, status))
	{
		SCM(playerid, COLOR_OLDRED, !"Используйте: /medcard [id] [статус]");
		SCM(playerid, COLOR_WHITE, !"__________ Статусы __________");
		SCM(playerid, COLOR_GREY, !" 0. Не определен");
		SCM(playerid, COLOR_WHITE, !" 1. Психически не здоров(а)");
		SCM(playerid, COLOR_WHITE, !" 2. Наблюдаются отклонения");
		SCM(playerid, COLOR_WHITE, !" 3. Полностью здоровый(ая)");
		return 1;
	}
	if(status == -1) return 1;
	if(!ProxDetectorS(3.0, playerid, id, 1)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы далеко от игрока");
    if(!IsValidPassport(id)) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У этого игрока нет паспорта.");
    if(!TeamDuty{playerid}) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не на дежурстве!");
    new Med[30];
    MedCardInfo[id][mcState] = status;
	switch(MedCardInfo[id][mcState])
	{
	    case 0: Med = "Не определен";
	    case 1: Med = "Психически не здоров(а)";
	    case 2: Med = "Наблюдаются отклонения";
	    case 3: Med = "Полностью здоровый(ая)";
	}
    new year, month, day;
    getdate(year, month, day);
    f(global_str, 100, "%i/%i/%i", day, month, year);
    SetString(MedCardInfo[id][mcDate], global_str);
    if(status == 3) f(global_str, 200, "{FFFFFF}Медик %s выдал вам медицинскую карту: %s\nПоказать карту: '/showmc'\n{D84343}Список посещений псих. больницы, очищен!", PN(playerid), Med);
    else f(global_str, 200, "{FFFFFF}Медик %s выдал вам медицинскую карту: %s\nПоказать карту: '/showmc'", PN(playerid), Med);
    SPD(id, 0, DIALOG_STYLE_MSGBOX, "", global_str, "Понял", "");
    f(global_str, 200, "[Информация] {FFFFFF}Вы выдали медицинскую карту %s: %s", PN(id), Med);
    SCM(playerid, COLOR_LIGHTBLUE, global_str);
    if(status == 3) PI[id][pPcix] = 0;
 
    f(global_str, 200, "UPDATE `passports` SET `McDate` = '%s', `McState` = '%d' WHERE `Name` = '%s'",
	    MedCardInfo[id][mcDate],
	    MedCardInfo[id][mcState],
		PN(id));
    mysql_tquery(mysql, global_str);
	return 1;
}
cmd:fmute(playerid, params[])
{
	if(!PI[playerid][pMember][1] && PI[playerid][pRank] < 8) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вам не доступна эта команда!");
    new id, time;
    if(sscanf(params,"dds[100]", id, time, params[0])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /fmute [id] [time] [reason]");
    if(IsADomen(params[0])  && PI[playerid][pAdmin]<6)
    {
		SCM(playerid,COLOR_RED,!"В таких сообщениях запрещается использовать английские символы");
    	SCM(playerid,COLOR_WHITE, !"Не повторяйте это действие во избежание наказания.");
		return 0;
    }
    if(IsAIP(params[0]))return 1;
    if(PI[playerid][pMuteTime]>0)return 0;
    if(time>180)return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Установить время заглушки можно не более на 60 минут!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не на дежурстве!");
    if(GetTeamID(id) != GetTeamID(playerid)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не состоит в твоей организации!");
    if(time == 0) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}На 0 минут нельзя!");
    if(PI[id][pMember][1] > 0 ) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не можете выдать мут лидеру");
    f(global_str, 150 ,"Сотрудник %s заглушил(а) игрока %s на %d минут. Причина: %s",PN(playerid),PN(id),time,params[0]);
    SendTeamMessage(GetTeamID(playerid), COLOR_RED, global_str);
    PI[id][pFMuteTime] = time*60;
	return 1;
}
cmd:funmute(playerid, params[])
{
	if(!PI[playerid][pMember][1] && PI[playerid][pRank] < 8) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вам не доступна эта команда!");
    new id;
    if(sscanf(params,"d", id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /funmute [id]");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не на дежурстве!");
    if(GetTeamID(id) != GetTeamID(playerid)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этот игрок не состоит в твоей организации!");
    f(global_str, 150 ,"Сотрудник %s разглушил игрока %s",PN(playerid),PN(id));
	SendTeamMessage(GetTeamID(playerid), COLOR_RED, global_str);
	PI[id][pFMuteTime] = 0;
	return 1;
}
alias:referals("ref");
cmd:referals(playerid)
	return OpenReferalMenu(playerid);

cmd:unrentcar(playerid, params[])
{
	if(ArendKey[playerid] == INVALID_VEHICLE_ID) return 0;
    new car = ArendKey[playerid];
	new vehid = ArendCar[0] + car;
	if(ArendInfo[car][aRentID] == playerid)
	{
		ArendInfo[car][aRentID] = INVALID_PLAYER_ID;
		SetVehicleToRespawn(vehid);
	}
	ArendKey[playerid] = INVALID_VEHICLE_ID;
	SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы отказались от аренды транспорта");
	return 1;
}
cmd:fillcar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны находится в не транспорта!");

    if(!GetCount(playerid, 516))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет канистры!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 10 секунд!");
    SetPVarInt(playerid, !"itemtime", Global_Time+10);

	new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vY, Float:vZ;
	GetPlayerPos(playerid, pX, pY, pZ);
	new Float:minS = 2.0, Float:dist, car = INVALID_VEHICLE_ID;
	foreach(Vehicle, i)
	{
		GetVehiclePos(i, vX, vY, vZ);
		dist = PointToPoint(pX, pY, pZ, vX, vY, vZ);
		if(dist < minS)
		{
			car = i;
			minS = dist;
		}
	}
	if(car == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от транспорта, который нужно заправить!");

    Fuel[car] += 15;
    if(Fuel[car] >= 100)
		Fuel[car] = 100;

	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);
    DeleteItem(playerid, 516, 1);

    new
		string[25 - 2 + MAX_PLAYER_NAME];
    f(string, sizeof(string), " %s заправил свою машину.", PN(playerid));
	ProxDetector(25, playerid, string, COLOR_ME);
    GameTextForPlayer(playerid, !"~w~CAR IS ~g~REFUELED", 5000, 6);
	sendPlayerBattlepassAction(playerid, 3);

	return 1;
}
cmd:fixmycar(playerid, params[])
{
	if(PI[playerid][pVIP][0] < STATUS_PLATIN)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эта функция доступна только для игроков с VIP статусом выше 3-го уровня!");
	extract params -> new car; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /fixmycar [id]");
	if(!IsPlayerHaveCar(playerid, car))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш транспорт!");
	if(PI[playerid][pMoney] < 1000)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не достаточно денег! Необходимо 1000$");
	if(GetPlayerState(playerid) == 2) 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Нужно находится вне транспорта.");
	GiveMoney(playerid, -1000);
	SetVehicleToRespawn(car);
	if(!IsAOwnableCar(car)) return 0;
	new debil = GetVehicleID(car);
	SetVehiclePos(car, CarInfo[debil][cPos][0], CarInfo[debil][cPos][1], CarInfo[debil][cPos][2]);
	GameTextForPlayer(playerid, !"Car is returned", 0, 1);
	return 1;
}

cmd:deltun(playerid, params[])
{
	extract params -> new car; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /deltun [id транспорта]");
	new
		number = GetVehicleID(car);
	if(!GetString(CarInfo[number][cOwner], PN(playerid)))
		return 0;
	if(PI[playerid][pMoney] < 10000)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не достаточно денег! Необходимо 10 000$");
	GiveMoney(playerid, -10000);
	if(!IsAVelik(car))
		SetEngineStatus(car, false, -1);
	else
		SetEngineStatus(car, true, -1);
	SetVehicleToRespawn(car);
	SaveOwnableCar(number);
	SCM(playerid, COLOR_LIGHTBLUE, !"[Информация] {FFFFFF}Вы удалили тюнинг с вашего транспорта");
	return 1;
}

stock CreateFillTD(playerid)
{
	#include <textdraws/fill>
}

cmd:fill(playerid)
{
	new carid = GetPlayerVehicleID(playerid),
		fuelid = IsAtGasStation(playerid);

	if(carid > 0 && fuelid != -1)
	{
		new 
			bizid = GoFuel[fuelid][gfBizzID],
			Float:cost = BizData[bizid][bEnterPrice];

		if(IsVehicleElectroCar(carid)) return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} У вас электрокар...");
		else if(GetVehicleKindFuel(carid) == -1) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Топлива для вашего вида транспорта у нас нет");
		else if(BizData[bizid][bProducts] < 100) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}На этой заправке не осталось топлива");
		else if(Fuel[carid] > 100.0) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш транспорт полностью заправлен");
		else if(KindFuel[playerid] != -1) return false;

		switch(GetPlayerLauncher(playerid))
		{
			case 0:
			{
				if(GetVehicleKindFuel(carid) != 0) 
					GameTextForPlayer(playerid,"~w~This type of fuel ~r~is not suitable~w~~n~for your vehicles!",10000,4);

				SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Используйте курсор чтобы выбрать тип топлива и его кол-во");
				SCM(playerid, COLOR_GREEN, !"[Информация] {FFFFFF}Вы можете заправить полный бак - нажав на стоимость топлива");

				CreateFillTD(playerid);

				for(new i; i < 34; i++) ShowPlayerTD(playerid, FillUp[playerid][i]);
				SelectTextDraw(playerid, 0xAFAFAFFF);
			}

			case 1:
			{
				executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"GasStation\"]');");
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.gasstation.initializeFuelTypes', '[[{\"id\":0,\"title\":\"Дизель\",\"price\":%.1f,\"available\": 1},{\"id\":1,\"title\":\"АИ-92\",\"price\":%.1f,\"available\": 1},{\"id\":2,\"title\":\"АИ-95\",\"price\":%.1f,\"available\": 1},{\"id\":3,\"title\":\"АИ-98\",\"price\":%.1f,\"available\": 1}]]');", cost, cost, cost, cost)));
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.gasstation.initializeProducts', '[[{\"id\":0,\"title\":\"Рем.комплект\",\"image\":520,\"price\":%i},{\"id\":1,\"title\":\"Канистра\",\"image\":516,\"price\":%i},{\"id\":2,\"title\":\"Повербанк для зарядки авто\",\"image\":700054,\"price\":%i}]]');", BizData[bizid-1][bItem][1], BizData[bizid-1][bItem][2], BizData[bizid-1][bItem][3])));
				executeEvent(playerid, 0, "window.executeEvent('event.gasstation.initializeMaxLiters', '[100]');");
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.gasstation.initializeCurrentLiters', '[%i]');", floatround(Fuel[carid]))));
				cursorPlayer(playerid, 0, true);
			}

			case 2:
			{
				cursorPlayer(playerid, 48, true);
				eventMobile(playerid, {48, 0}, (str_f("[{\"id\":0,\"title\":\"Дизель\",\"price\":%.1f,\"available\": 1},{\"id\":1,\"title\":\"АИ-92\",\"price\":%.1f,\"available\": 1},{\"id\":2,\"title\":\"АИ-95\",\"price\":%.1f,\"available\": 1},{\"id\":3,\"title\":\"АИ-98\",\"price\":%.1f,\"available\": 1}]", cost, cost, cost, cost)));
				eventMobile(playerid, {48, 1}, (str_f("[{\"id\":0,\"title\":\"Рем. комплект\",\"image\":520,\"price\":%i},{\"id\":1,\"title\":\"Канистра\",\"image\":516,\"price\":%i},{\"id\":2,\"title\":\"Повербанк для зарядки авто\",\"image\":700054,\"price\":%i}]", BizData[bizid-1][bItem][1], BizData[bizid-1][bItem][2], BizData[bizid-1][bItem][3])));
				eventMobile(playerid, {48, 2}, "100");
				eventMobile(playerid, {48, 3}, (str_f("%d", floatround(Fuel[carid]))));
			}
		}
	
		PlayerFuel[playerid] = fuelid;
		CountFuel[playerid] = 0.0;
		KindFuel[playerid] = 0;
	}

	return true;
}
cmd:find(playerid, params[])
{
	if(sscanf(params,"d",params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /find [id]");
	if(!IsACop(playerid)) return SCM(playerid,COLOR_RED, !"Вы не полицейский!");
    if(IsANotControllable(playerid)) return SCM(playerid, COLOR_RED, !"Вы не можете двигаться!");
	if(playerid == params[0]) return 0;
	if(PI[params[0]][pMaskON]>0) return SCM(playerid, COLOR_VALIK, !"[Ошибка] {FFFFFF}Невозможно найти местонахождение этого человека!");
	if(GetPlayerInterior(params[0]) != GetPlayerInterior(playerid)) return SCM(playerid, COLOR_VALIK, !"[Ошибка] {FFFFFF}Игрок находится в каком-то здании");
	if(PI[params[0]][pWanted]==0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете разыскивать игрока который не преступник!");
	if(!IsPlayerConnected(params[0])) return 0;
	new Float:POS[3];
	GetPlayerPos(params[0], POS[0], POS[1], POS[2]);
	EnableGPSForPlayer(playerid, POS[0], POS[1], POS[2]);
	return 1;
}
cmd:usebad(playerid, params[])
{
    if(GetCount(playerid, 564) == 0) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет таблеток от наркозависимости!");
	if(medlomka[playerid]>0)return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Вы уже приняли лекарство!");
	if(PI[playerid][pAllRepl]==0)return SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы не больны наркозависимостью!");
	if(startlomka[playerid]==1) return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете принять лекарства во время ломки!");
	if(CuffedTime[playerid]!=0 || Cuffed[playerid])return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете сейчас принять лекарства!");
	if(!IsPlayerInRangeOfPoint(playerid, 100.0,2065.5859,-1374.3174,1001.2960))return SCM(playerid,COLOR_RED, !"Принять лекарства можно только в больнице!");
	SCM(playerid,COLOR_RED, !"[Информация] {FFFFFF}Вы приняли лекарство для лечения от наркозависимости!");
	SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Скоро могут начатся побочные эфекты!");
	ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	medlomka[playerid]=240;
	DeleteItem(playerid, 564, 1);
	return 1;
}
cmd:recept(playerid, params[])
{
	new id;
	if(CuffedTime[playerid]!=0 || Cuffed[playerid])return 0;
	if(!IsAMedic(playerid))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Рецепт может выдать только доктор!");
	if(PI[playerid][pRank]<4)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Рецепт может выдать только доктор с 4-го ранга!");
	if(sscanf(params,"u",id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /recept [id]");
    if(!ProxDetectorS(3.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не на дежурстве!");
    f(global_str, 100 ,"%s выдал %s рецепт для покупки лекарств.",PN(playerid),PN(id));
    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
    SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Вы успешно выдали рецепт.");
    SCM(id,COLOR_GREY, !"[Информация] {FFFFFF}Вам выдали рецепт, благодаря которому вы можете купить аптечки или лекарство от нарк.зависимости.");
 	PlayerDrunkLevel[id]=1;
	return 1;
}
cmd:delldrugs(playerid, params[])
{
    if(GetCount(playerid, 510) < 1) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет наркотиков");
    DeleteItem(playerid, 510, GetCount(playerid, 510));
    SetPlayerChatBubble(playerid, "Выкинул наркотики", COLOR_GREEN, 10.0, 5000);
    SCM(playerid,COLOR_GREEN, !"[Информация] {FFFFFF}Вы успешно выкинули все наркотики.");
	return 1;
}
cmd:usedrugs(playerid, params[])
{
    if(GetPlayerVirtualWorld(playerid)==534)return 0;
	if(GetCount(playerid, 510) < 1) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}У вас нет наркотиков");
    if(Cuffed[playerid]) return SCM(playerid,COLOR_RED,"[Ошибка] {FFFFFF}Вы скованы и не можете двигаться");
	if(PI[playerid][pHeal] > 0) return SCM(playerid,COLOR_GREY, !"[Информация] {FFFFFF}Пока ты в больнице , ты не можешь использовать наркотики!");
    if(UseDrugsTime[playerid] > 120) return 0;
    if(Int_GetPlayerData(playerid,"narko")>Global_Time)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Подождите несколько секунд!");
    new Float:Health;
    GetPlayerHealth(playerid,Health);
	Health += 30;
	if(Health > 100) Health = 100;
    UpdatePlayerHealth(playerid,Health);
    if(IsPlayerInAnyVehicle(playerid)) ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
	DeleteItem(playerid, 510, 1);
	UseDrugsTime[playerid] += 60;
	PI[playerid][pAllRepl]++;
	if(301 <= PI[playerid][pAllRepl] <= 400) sendPlayerBattlepassAction(playerid, 133);
	if(startlomka[playerid]==1)PI[playerid][pOldRepl]=0;
	startlomka[playerid]=0;
	SetPlayerDrunkLevel (playerid, 3900);
	f(global_str, 100," %s принимает дозу наркотиков",PN(playerid));
	ProxDetector(30,playerid,global_str,COLOR_PURPLE);
	if(!IsPlayerInAnyVehicle(playerid))ApplyAnimationEx(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
	SetPVarInt(playerid,"narko",Global_Time+6);
	return 1;
}

stock SeccureAnimation(playerid, animlib[], animname[])
{
	ClearAnimations(playerid);
    ApplyAnimationEx(playerid, animlib, animname, 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

stock J_AddStaticVehicleEx(model, Float:x,Float:y,Float:z,Float:a,color_1 = 0,color_2 = 0, spawntime = -1, interior = 0,world = 0, id = -1, ida = -1, ids = -1)
{
	new carid = AddStaticVehicleEx(model >= 612 ? SearchVehicleMassiveID(model) == 0 ? 411 : vehicleModelInfo[SearchVehicleMassiveID(model)][vehicleClientModel] : model, x, y, z, a, color_1, color_2, spawntime);
	spawntime = 0;
	VehicleInfo[carid][vAntiRepair]=2;
	VehicleInfo[carid][vLock]=0;
	VehicleInfo[carid][vModel] = model;
	VehicleInfo[carid][vPos_X] = x;
	VehicleInfo[carid][vPos_Y] = y;
	VehicleInfo[carid][vPos_Z] = z;
	VehicleInfo[carid][vPos_A] = a;
	VehicleInfo[carid][vIDa] = ida;
	VehicleInfo[carid][vColor_1] = color_1;
	VehicleInfo[carid][vColor_2] = color_2;
	LinkVehicleToInterior(carid, interior);
	SetVehicleVirtualWorld(carid, world);
	J_SetVehicleHealth(carid, IsAUniqueVehicle(carid) ? 5000 : 1500);
	VehicleInfo[carid][vID] = id;
	SellCard[carid] = ids;

	for(new i, default_value[] = {0, 0, 0, 1, 1, 0, 0, 0, 0, 0}; i < 10; i++)
	{
		if(model > 611 && vehicleModelInfo[SearchVehicleMassiveID(model)][vehicleBonnetData][0] > 0 && i < 1) default_value[i] = vehicleModelInfo[SearchVehicleMassiveID(model)][vehicleBonnetData][0];
		if(vehicleTuning[carid][i] <= 0) vehicleTuning[carid][i] = default_value[i];
		if(IsAUniqueVehicle(carid) && i == 9) vehicleTuning[carid][i] = 1;
	}

	switch GetVehicleModelEx(carid) do
	{
	    case 430, 446, 452, 453, 454, 472, 473, 484, 493: VehicleState[carid] = VEHICLE_STATE_BOAT;
		case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: VehicleState[carid] = VEHICLE_STATE_PLANE;
		case 581, 522, 461, 521, 523, 463, 468, 471, 586: VehicleState[carid] = VEHICLE_STATE_BIKE;
		case 509, 481, 510: VehicleState[carid] = VEHICLE_STATE_VELIK;
		case 462, 448: VehicleState[carid] = VEHICLE_STATE_MOPED;
		case 538, 537: VehicleState[carid] = VEHICLE_STATE_TRAIN;
		case 564, 441, 464, 465, 501: VehicleState[carid] = 7;
		case 15882, 15883: VehicleState[carid] = 8;
		default: VehicleState[carid] = VEHICLE_STATE_CAR;
	}
	
	return Iter_Add(Vehicle, carid), carid;
}

stock J_GetPlayerDrunkLevel(playerid)
	return PlayerDrunkLevels[playerid];

stock J_SetPlayerDrunkLevel(playerid, level)
    return PlayerDrunkLevels[playerid] = level, SetPlayerDrunkLevel(playerid, level);

stock J_SetPlayerScore(playerid, score)
    return PI[playerid][pLevel] = score, SetPlayerScore(playerid, score);

stock J_SetVehicleHealth(carid,Float:health)
{
    VehicleInfo[carid][vAntiRepair]=2;
	VehicleHealth[carid] = health;
	SetVehicleHealth(carid, health);
	return 1;
}

stock UpdatePlayerPos(playerid, Float:X, Float:Y, Float:Z, Float:A = -1.0)
{
	if(!(A == -1.0)) SetPlayerFacingAngle(playerid, A);
	return Streamer_UpdateEx(playerid, X,Y,Z, -1, -1, -1, 500, 1);
}

stock UpdatePlayerHealth(playerid, Float:hp)
{
	if(InventoryOpen{playerid} && !IsPlayerInAnyVehicle(playerid))
		PlayerTextDrawSetStringf(playerid, InvTextDraws[playerid][12], "HP: %.0f", hp);

	return SetPlayerHealth(playerid, PI[playerid][pHealth] = hp);
}

stock UpdatePlayerArmour(playerid, Float:arm)
{
	if(InventoryOpen{playerid} && !IsPlayerInAnyVehicle(playerid))
		PlayerTextDrawSetStringf(playerid, InvTextDraws[playerid][13], "ARM: %.0f", arm);

	return SetPlayerArmour(playerid, PI[playerid][pArmour] = arm);
}

stock J_RepairVehicle(carid)
{
	RepairVehicle(carid);
	J_SetVehicleHealth(carid, 1500);
	return 1;
}

stock J_Kick(playerid)
{
	if(PI[playerid][pAdmin] >= 7) return 0;

	Kick(playerid);
	
	return 1;
}

stock SpecPl(playerid,bool:spec)
{
	pTemp[playerid][SPECTPLAYER] = spec;
	return TogglePlayerSpectating(playerid,spec);
}
stock SpecPlayer(playerid,i)
{
    if(i == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не найден!");

	if(SERIU[playerid][sID] != i && PI[playerid][pAdmin] < 5)
	{
		f(global_str, 150, "%s[%i] начал следить за %s[%d]", PN(playerid), playerid, PN(i), i);
		SendAdminsMessage(COLOR_GREY, global_str);
	}
	if(pTemp[playerid][SPECTPLAYER] == false)
		SpecPl(playerid, true);

	if(SERIU[playerid][sID] != INVALID_PLAYER_ID)
		PI[SERIU[playerid][sID]][pHSpectr] = -1;

	PI[i][pHSpectr] = playerid;

 	SERIU[playerid][sID] = i;
 	SetPlayerInterior(playerid, GetPlayerInterior(i));
 	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(i));
 	if(IsPlayerInAnyVehicle(i))
	 	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(i));

 	else
	 	PlayerSpectatePlayer(playerid, i);

	return 1;
}
stock Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
	new Float:TGTDistance;
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));
	new Float:tmpX, Float:tmpY, Float:tmpZ;
	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;
	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y)
{
  	new Float:DX, Float:DY;
  	new Float:angle;

  	DX = floatabs(floatsub(x2,X));
  	DY = floatabs(floatsub(y2,Y));

  	if (DY == 0.0 || DX == 0.0)
	{
	    if(DY == 0 && DX > 0) angle = 0.0;
	    else if(DY == 0 && DX < 0) angle = 180.0;
	    else if(DY > 0 && DX == 0) angle = 90.0;
	    else if(DY < 0 && DX == 0) angle = 270.0;
	    else if(DY == 0 && DX == 0) angle = 0.0;
  	}
  	else
	{
    	angle = atan(DX/DY);
    	if(X > x2 && Y <= y2) angle += 90.0;
    	else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    	else if(X < x2 && Y >= y2) angle -= 90.0;
    	else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  	}
  	return floatadd(angle, 90.0);
}
stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}
stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
  	new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
  	GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
  	GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);
	new Float:vertical, Float:horizontal;
	switch (GetPlayerWeaponEx(playerid))
	{
	  	case 34,35,36:
	  	{
	  		if(DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return 1;
	  		return 0;
	  	}
	  	case 30,31: {vertical = 4.0; horizontal = -1.6;}
	  	case 33: {vertical = 2.7; horizontal = -1.0;}
	  	default: {vertical = 6.0; horizontal = -2.2;}
	}
  	new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
  	new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
  	GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));
  	if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return 1;
  	return 0;
}
Text:CreateSprite(Float:X,Float:Y,Name[25],Float:Width,Float:Height)
{
    new Text:RetSprite;
    RetSprite = TextDrawCreate(X, Y, Name);
    TextDrawFont(RetSprite, 4);
    TextDrawColor(RetSprite,0xFFFFFFFF);
    TextDrawTextSize(RetSprite,Width,Height);
    return RetSprite;
}
Text:CreateBox(Float:X,Float:Y,Float:Width,Float:Height,color)
{
    global_str = "";
    for(new i=floatround(Y); i < floatround(Y+Height);i++) strcat(global_str,"~n~_");
	new Text:RetSprite;
    RetSprite = TextDrawCreate(X, Y, global_str);
    TextDrawFont(RetSprite, 0);
    TextDrawColor(RetSprite,0xFFFFFFFF);
    TextDrawTextSize(RetSprite,Width+X,Height+Y);
    TextDrawUseBox(RetSprite,1);
    TextDrawBoxColor(RetSprite,color);
    TextDrawLetterSize(RetSprite,0.0001,0.1158);
    return RetSprite;
}
stock GetPlayerAngleToPoint(playerid, Float:x, Float:y)
{
	new Float:ix, Float:iy, Float:iz, Float:a;
	GetPlayerFacingAngle(playerid, a);
	GetPlayerPos(playerid, ix, iy, iz);
	return floatround(GetAngleToPoint(ix, iy, a, x, y));
}
stock Float:GetPlayerAngleToPlayer(playerid, facingtoid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(facingtoid, x, y, z);
	return float(GetPlayerAngleToPoint(playerid, x, y));
}
stock GetPlayerFaceToPlayer(playerid, targetid, Float:facing)
{
	new Float:radius = GetPlayerAngleToPlayer(playerid, targetid);
	return (radius > -facing && radius < facing);
}
stock TurnPlayerFaceToPlayer(playerid, facingtoid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(facingtoid, x, y, z);
	SetPlayerFaceToPoint(playerid, x, y);
	return 1;
}
stock SetPlayerFaceToPoint(playerid, Float:X, Float:Y)
{
    new Float:angle;
	new Float:misc = 5.0;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	angle = 180.0-atan2(x-X,y-Y);
	angle += misc;
	misc *= -1;
	SetPlayerFacingAngle(playerid, angle+misc);
    return 1;
}
stock CheckBanned(playerid,listitem)
{
	if(listitem == 20) FirstBL[playerid] += 20;
	else FirstBL[playerid] -= 20;
	if(FirstBL[playerid] < 0)
	{
		FirstBL[playerid] = 0;
		return SCM(playerid, COLOR_GREY, !"Больше нет забаненных");
	}
	f(global_str, 90, "SELECT `Name` FROM `bannames` ORDER BY `ID` DESC LIMIT %i , 20", FirstBL[playerid]);
	mysql_tquery(mysql, global_str, "MysqlCheckBanned", "d", playerid);
	return 1;
}

public: MysqlCheckBanned(playerid)
{
	static Name[MAX_PLAYER_NAME];
	new accounts = cache_num_rows();
	if(!accounts) return SCM(playerid, COLOR_GREY, !"Больше нет забаненных");
	global_str = "";
	for(new i; i < accounts; i ++)
		cache_get_value_index(i, 0, Name),
		f(global_str, 600, "%s%s\n", global_str, Name);
		
	if(accounts == 20) strcat(global_str, "{FF9900}Далее >>>\n");
	if(FirstBL[playerid]) strcat(global_str, "{FF9900}<<< Назад");
	return SPD(playerid, 96, 2, "Забаненые", global_str, "Выбор", "Назад");
}

stock IsOsnovatel(playerid, access_level = 2)
{
	new checked = 0;

	if(!pTemp[playerid][tAuthorized])
		return false;

	if(CallRemoteFunction("GetOwnerNickName", "s", PN(playerid)))
		checked = 2;
	
	if(AdminInfo[playerid][admFullDostup] >= access_level) 
		checked = 1;

	if(checked >= access_level)
		return true;

	return false;
}

stock GetWeaponModel(weaponid)
{
	switch weaponid do
	{
		case 1: 		return 331;
		case 2..8: 		return weaponid+331;
		case 9: 		return 341;
		case 10..15: 	return weaponid+311;
		case 16..18: 	return weaponid+326;
		case 22..29: 	return weaponid+324;
		case 30,31: 	return weaponid+325;
		case 32: 		return 372;
		case 33..45: 	return weaponid+324;
		case 46: 		return 371;
		default: return false;
	}
	return false;
}

stock NoRoof(playerid)
{
    new carid = GetPlayerSurfingVehicleID(playerid);
    if(!(carid == INVALID_VEHICLE_ID ))
    {
        new Float:speed = GetVehicleSpeed(carid);
       
        switch GetVehicleModelEx(carid) do
        {
            case 430, 446, 452, 453, 454, 472, 473, 478, 484, 493, 554, 543, 595, 422, 605, 600, 592: return false;
        }

        if(speed > 30)
        {
            new Float:Pos[3];
            GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
            UpdatePlayerPos(playerid, Pos[0], Pos[1], Pos[2] + 2.5);
			ApplyAnimationEx(playerid, "ped", "getup", 4.0, 0, 1, 0, 0, 0,0);
        }
    }
    return true;
}

public: LoginDialogMySQL(playerid, const inputtext[])
{
	static password[33];

	cache_get_value_name_int(0, "ID", PI[playerid][pID]);
	cache_get_value_name(0, "Password", password, 33);

	if(GetString(password, MD5_Hash(inputtext))) OnPlayerLogin(playerid);
	else 
	{
		pTemp[playerid][tPasswordAttemp]--;

		if(pTemp[playerid][tPasswordAttemp] <= 0)
			return SCM(playerid, -1, !"Вы исчерпали количество попыток. Вы отключены от сервера");

		if(GetPlayerLauncher(playerid) == 1 && pTemp[playerid][cefAuth]) executeEvent(playerid, 0, !"window.executeEvent('event.auth.sendPasswordError', '[ \"Данные от аккаунта неверны или аккаунт не существует!\" ]');");
		else if(GetPlayerLauncher(playerid) == 2) eventMobile(playerid, {9, 3}, !"error");	
		else SPDF(playerid, 2, DIALOG_STYLE_PASSWORD, !"Авторизация", "{FFFFFF}Добро пожаловать на {EBA225}Arizona Role Play{FFFFFF}\n\n{FF0000}Неверный пароль!\n{FFFFFF}Попыток для ввода пароля: {28910B}%d", !"Принять", !"Контекст", pTemp[playerid][tPasswordAttemp]);
	}

	return true;
}

stock GetVehicleSpeed(vehicleid)
{
    new Float:Px,Float:Py,Float:Pz;
    GetVehicleVelocity(vehicleid,Px,Py,Pz);
    return floatround(floatsqroot(Px*Px+Py*Py+Pz*Pz) * 100.0);
}

stock LoadInformation()
{
	new Cache:result = mysql_query(mysql, "SELECT * FROM `configuration`");

	if(cache_num_rows())
	{
		cache_get_value_name_int(0, "credit", GLS[0]);
		cache_get_value_name_int(0, "cnalog", GLS[1]);
		cache_get_value_name_int(0, "hnalogi", GLS[2]);
		cache_get_value_name_int(0, "bnalog", GLS[3]);
		cache_get_value_name_int(0, "ferma", GLS[4]);
		cache_get_value_name_int(0, "zavod", GLS[5]);
		cache_get_value_name_int(0, "gryz", GLS[6]);
		cache_get_value_name_int(0, "avob", GLS[7]);
		cache_get_value_name_int(0, "mysor", GLS[8]);
		cache_get_value_name_int(0, "daln", GLS[9]);
		cache_get_value_name_int(0, "metal", GLS[10]);
		cache_get_value_name_int(0, "incas", GLS[11]);
		cache_get_value_name_int(0, "naloga", GLS[12]);
		cache_get_value_name_int(0, "GLS[13]", GLS[13]);
		cache_get_value_name_int(0, "GLS[14]", GLS[14]);
		cache_get_value_name_int(0, "GLS[15]", GLS[15]);
		cache_get_value_name_int(0, "arest", GLS[16]);
		cache_get_value_name_int(0, "dostav", GLS[17]);
		cache_get_value_name_int(0, "ybil", GLS[18]);
		cache_get_value_name_int(0, "redak", GLS[19]);
		cache_get_value_name_int(0, "pomol", GLS[20]);
		cache_get_value_name_int(0, "bail", GLS[21]);
		cache_get_value_name_int(0, "exp", GLS[23]);
		cache_get_value_name_int(0, "armyls", GLS[25]);
		cache_get_value_name_int(0, "armylv", GLS[26]);
		cache_get_value_name_int(0, "farmsklad", GLS[27]);
		cache_get_value_name_int(0, "GLS[28]", GLS[28]);
		cache_get_value_name_int(0, "GLS[29]", GLS[29]);
		cache_get_value_name_int(0, "GLS[31]", GLS[31]);
		cache_get_value_name_int(0, "X2PAYDAY", GLS[37]);
		cache_get_value_name_int(0, "X3PAYDAY", GLS[40]);
		cache_get_value_name_int(0, "X5PAYDAY", GLS[41]);
		cache_get_value_name_int(0, "GLS[43]", GLS[43]);
		cache_get_value_name_int(0, "Narko1", GLS[45]);
		cache_get_value_name_int(0, "Narko2", GLS[46]);
		cache_get_value_name_int(0, "Narko3", GLS[47]);
		cache_get_value_name_int(0, "Narko4", GLS[48]);
		cache_get_value_name_int(0, "Narko5", GLS[49]);
		cache_get_value_name_int(0, "buyNarko1", GLS[50]);
		cache_get_value_name_int(0, "buyNarko2", GLS[51]);
		cache_get_value_name_int(0, "buyNarko3", GLS[52]);
		cache_get_value_name_int(0, "buyNarko4", GLS[53]);
		cache_get_value_name_int(0, "buyNarko5", GLS[54]);
		cache_get_value_name_int(0, "sellNarko1", GLS[55]);
		cache_get_value_name_int(0, "sellNarko2", GLS[56]);
		cache_get_value_name_int(0, "sellNarko3", GLS[57]);
		cache_get_value_name_int(0, "sellNarko4", GLS[58]);
		cache_get_value_name_int(0, "sellNarko5", GLS[59]);
		cache_get_value_name_int(0, "bankNarko1", GLS[60]);
		cache_get_value_name_int(0, "bankNarko2", GLS[61]);
		cache_get_value_name_int(0, "bankNarko3", GLS[62]);
		cache_get_value_name_int(0, "bankNarko4", GLS[63]);
		cache_get_value_name_int(0, "bankNarko5", GLS[64]);
		cache_get_value_name_int(0, "adminzona", GLS[65]);
		cache_get_value_name_int(0, "google", GLS[66]);
		cache_get_value_name_int(0, "casinoclose", GLS[67]);
		cache_get_value_name_int(0, "tnalog", GLS[68]);
		cache_get_value_name_int(0, "euro", GLS[69]);
		cache_get_value_name_int(0, "bankeuro", GLS[70]);
		cache_get_value_name_int(0, "ctrailers", ctrailers);
		cache_get_value_name_int(0, "BTC_count", bankbitcoin);
		cache_get_value_name_int(0, "PayDayXBonus", PayDayXBonus);
		cache_get_value_name_int(0, "XDonate", XDonate);
		cache_get_value_name_int(0, "XPayDay", XPayDay);
	}
	else print("Настройки сервера не найдены в базе данных! Table Configuration!!");

	return cache_delete(result);
}

stock SaveInformation()
{
	global_str = "";

	f(global_str, 2000, "UPDATE `configuration` SET \
		`credit` = '%d', `cnalog` = '%d', `hnalogi` = '%d', `bnalog` = '%d', `ferma` = '%d', \
		`zavod` = '%d', `gryz` = '%d', `avob` = '%d', `mysor` = '%d', `daln` = '%i', `metal` = '%i' ,`incas` = '%d', \
		`naloga` = '%d', `GLS[13]` = '%d', `GLS[14]` = '%d', `GLS[15]` = '%d', `arest` = '%d', \
		`dostav` = '%d', `ybil` = '%d', `redak` = '%d', `pomol` = '%d', \
	    `bail` = '%d', `exp` = '%d', `armyls` = '%i', `armylv` = '%i', \
	    `farmsklad` = '%i', `GLS[28]` = '%i', `GLS[29]` = '%i',`GLS[31]` = '%d', \
		`X2PAYDAY` = '%i', `X3PAYDAY` = '%i', `X5PAYDAY` = '%i', `GLS[43]` = '%i', \
		`Narko1` = '%i', `Narko2` = '%i', `Narko3` = '%i', `Narko4` = '%i', \
		`Narko5` = '%i', `buyNarko1` = '%i', `buyNarko2` = '%i', `buyNarko3` = '%i', \
		`buyNarko4` = '%i', `buyNarko5` = '%i', `sellNarko1` = '%i', `sellNarko2` = '%i', `sellNarko3` = '%i', \
		`sellNarko4` = '%i', `sellNarko5` = '%i', `bankNarko1` = '%i', `bankNarko2` = '%i', `bankNarko3` = '%i', \
		`bankNarko4` = '%i', `bankNarko5` = '%i', `adminzona` = '%i', `google` = '%i', `casinoclose` = '%i', \
		`tnalog` = '%i', `euro` = '%i', `bankeuro` = '%i', `ctrailers` = '%i', `BTC_count` = '%i', \
		`PayDayXBonus` = '%i', `XDonate` = '%i', `XPayDay` = '%i'",
		GLS[0],GLS[1],GLS[2],GLS[3],GLS[4],GLS[5],GLS[6],GLS[7],GLS[8],GLS[9],GLS[10],
		GLS[11],GLS[12],GLS[13],GLS[14],GLS[15],GLS[16],GLS[17],GLS[18],GLS[19],GLS[20],
		GLS[21],GLS[23],GLS[25],GLS[26],GLS[27],GLS[28],GLS[29],GLS[31],GLS[37],GLS[40],
		GLS[41],GLS[43],GLS[45],GLS[46],GLS[47],GLS[48],GLS[49],GLS[50],GLS[51],GLS[52],
		GLS[53],GLS[54],GLS[55],GLS[56],GLS[57],GLS[58],GLS[59],GLS[60],GLS[61],GLS[62],
		GLS[63],GLS[64],GLS[65],GLS[66],GLS[67],GLS[68],GLS[69],GLS[70],ctrailers,bankbitcoin,
		PayDayXBonus,XDonate,XPayDay);

	return mysql_tquery(mysql, global_str);
}

stock strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	static result[20]; result = "";
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
///////////казино
ShowPlayerSlots(playerid,slot1,slot2,slot3)
{
	TextDrawHideForPlayer(playerid,Digit1[0]);
    TextDrawHideForPlayer(playerid,Digit2[0]);
    TextDrawHideForPlayer(playerid,Digit3[0]);
    TextDrawHideForPlayer(playerid,Digit1[1]);
    TextDrawHideForPlayer(playerid,Digit2[1]);
    TextDrawHideForPlayer(playerid,Digit3[1]);
    TextDrawHideForPlayer(playerid,Digit1[2]);
    TextDrawHideForPlayer(playerid,Digit2[2]);
    TextDrawHideForPlayer(playerid,Digit3[2]);
    TextDrawHideForPlayer(playerid,Digit1[3]);
    TextDrawHideForPlayer(playerid,Digit2[3]);
    TextDrawHideForPlayer(playerid,Digit3[3]);
    TextDrawHideForPlayer(playerid,Digit1[4]);
    TextDrawHideForPlayer(playerid,Digit2[4]);
    TextDrawHideForPlayer(playerid,Digit3[4]);
    TextDrawHideForPlayer(playerid,Digit1[5]);
    TextDrawHideForPlayer(playerid,Digit2[5]);
    TextDrawHideForPlayer(playerid,Digit3[5]);
    TextDrawShowForPlayer(playerid,Digit1[slot1]);
    TextDrawShowForPlayer(playerid,Digit2[slot2]);
    TextDrawShowForPlayer(playerid,Digit3[slot3]);
    TextDrawShowForPlayer(playerid,Box);
}
HideSlotsForPlayer(playerid)
{
    TextDrawHideForPlayer(playerid,Digit1[0]);
    TextDrawHideForPlayer(playerid,Digit2[0]);
    TextDrawHideForPlayer(playerid,Digit3[0]);
    TextDrawHideForPlayer(playerid,Digit1[1]);
    TextDrawHideForPlayer(playerid,Digit2[1]);
    TextDrawHideForPlayer(playerid,Digit3[1]);
    TextDrawHideForPlayer(playerid,Digit1[2]);
    TextDrawHideForPlayer(playerid,Digit2[2]);
    TextDrawHideForPlayer(playerid,Digit3[2]);
    TextDrawHideForPlayer(playerid,Digit1[3]);
    TextDrawHideForPlayer(playerid,Digit2[3]);
    TextDrawHideForPlayer(playerid,Digit3[3]);
    TextDrawHideForPlayer(playerid,Digit1[4]);
    TextDrawHideForPlayer(playerid,Digit2[4]);
    TextDrawHideForPlayer(playerid,Digit3[4]);
    TextDrawHideForPlayer(playerid,Digit1[5]);
    TextDrawHideForPlayer(playerid,Digit2[5]);
    TextDrawHideForPlayer(playerid,Digit3[5]);
    TextDrawHideForPlayer(playerid,Box);
}
PutPlayerInSlotMachine(playerid, firstBet=MIN_Bet,  startBalance=0)
{
    if(Gambling[playerid] != 0) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже запустили автомат!");
   	if(kasmenu[playerid]==0)
    {
		if(GetCount(playerid, 530)<startBalance) return SCM(playerid,COLOR_RED,!"У вас недостаточно фишек в инвентаре!");
	    Gambling[playerid] = 1;

	    BetText[playerid] = TextDrawCreate(320.000000, 203.000000, "Bat:200");
		TextDrawAlignment(BetText[playerid], 2);
		TextDrawBackgroundColor(BetText[playerid], 255);
		TextDrawFont(BetText[playerid], 1);
		TextDrawLetterSize(BetText[playerid], 0.519999, 2.200000);
		TextDrawColor(BetText[playerid], -1);
		TextDrawSetOutline(BetText[playerid], 1);
		TextDrawSetProportional(BetText[playerid], 1);
		TextDrawUseBox(BetText[playerid], 1);
		TextDrawBoxColor(BetText[playerid], 64);
		TextDrawTextSize(BetText[playerid], 0.000000, 80.000000);
		TextDrawSetSelectable(BetText[playerid], 0);
		BalanceText[playerid] = TextDrawCreate(320.000000, 233.000000, "Balance:500");
		TextDrawAlignment(BalanceText[playerid], 2);
		TextDrawBackgroundColor(BalanceText[playerid], 255);
		TextDrawFont(BalanceText[playerid], 1);
		TextDrawLetterSize(BalanceText[playerid], 0.310000, 2.500000);
		TextDrawColor(BalanceText[playerid], -1);
		TextDrawSetOutline(BalanceText[playerid], 1);
		TextDrawSetProportional(BalanceText[playerid], 1);
		TextDrawUseBox(BalanceText[playerid], 1);
		TextDrawBoxColor(BalanceText[playerid], 64);
		TextDrawTextSize(BalanceText[playerid], 0.000000, 80.000000);
		TextDrawSetSelectable(BalanceText[playerid], 0);


	    TextDrawShowForPlayer(playerid,BetText[playerid]);
	    TextDrawShowForPlayer(playerid,BalanceText[playerid]);

	    SelectTextDraw(playerid, -16776961);
	    for(new i;i<10;i++) TextDrawShowForPlayer(playerid,Bandito[i]);
	    Slots[playerid][0] = random(5);
	    Slots[playerid][1] = random(5);
	    Slots[playerid][2] = random(5);
	    ShowPlayerSlots(playerid,Slots[playerid][0],Slots[playerid][1],Slots[playerid][2]);
	    Bet[playerid] = firstBet;

	    kasmenu[playerid]=1;

	    //GiveMoney(playerid,-startBalance);
	    Balance[playerid] = startBalance;
	    UpdateBetText(playerid);
	    TogglePlayerControllable(playerid,0);
	}
    return 1;
}
stock ExitPlayerFromSlotMachine(playerid)
{
    if(Gambling[playerid] == 0) return 0;
    HideSlotsForPlayer(playerid);
    Gambling[playerid] = 0;
    TogglePlayerControllable(playerid,1);
    if(kasmenu[playerid]==1)
    {
	    TextDrawDestroy(BetText[playerid]);
	    TextDrawDestroy(BalanceText[playerid]);
	    kasmenu[playerid]=0;
    }

    for(new i;i<10;i++) TextDrawHideForPlayer(playerid,Bandito[i]);
    if(Balance[playerid] > 0) f(global_str, 100,"~g~Your balance: %d",Balance[playerid]);
    GameTextForPlayer(playerid,global_str,5000,4);
    CancelSelectTextDraw(playerid);
    return 1;
}
forward Gambler(playerid);
public Gambler(playerid)
{
    if(Gambling[playerid] != 2)
    {
        KillTimer(SlotTimer[playerid]);
        SlotTimer[playerid] = -1;
        Gambling[playerid] = 0;
        return 0;
    }
    SlotCounter[playerid] -= 1;
    new slot = SlotCounter[playerid];
    if(slot < 10) Slots[playerid][2]+=random(3)+1;
    else if(slot < 20)
    {
        Slots[playerid][1]+=random(3)+1;
        Slots[playerid][2]+=random(3)+1;
    }
    else
    {
        Slots[playerid][0]+=random(3)+1;
        Slots[playerid][1]+=random(3)+1;
        Slots[playerid][2]+=random(3)+1;
    }
    if(Slots[playerid][0] >= 6) Slots[playerid][0] = 0;
    if(Slots[playerid][1] >= 6) Slots[playerid][1] = 0;
    if(Slots[playerid][2] >= 6) Slots[playerid][2] = 0;

    ShowPlayerSlots(playerid,Slots[playerid][0],Slots[playerid][1],Slots[playerid][2]);

    if(SlotCounter[playerid] == 0)
    {
        KillTimer(SlotTimer[playerid]);
        SlotTimer[playerid] = -1;
        Gambling[playerid] = 3;

        if(Slots[playerid][0] == Slots[playerid][1] && Slots[playerid][0] == Slots[playerid][2])
        {
            new Multiplier=1;
            switch(Slots[playerid][0])
            {
            	case 0: Multiplier = 5;
                case 1: Multiplier = 10;
                case 2: Multiplier = 20;
                case 3: Multiplier = 25;
                case 4: Multiplier = 50;
                case 5: Multiplier = 100;
            }
            new money = floatround(Bet[playerid] * Multiplier * 1.0);
            f(global_str, 100,"~w~Winner: ~g~%d~w~!",money);
            GameTextForPlayer(playerid,global_str,5000,4);
            Balance[playerid] += money;
            UpdateBetText(playerid);
            Slots[playerid][0] = random(5);
            Slots[playerid][1] = random(5);
            Slots[playerid][2] = random(5);
        }
        else
        {
            if(Slots[playerid][0] == Slots[playerid][1] || Slots[playerid][1] == Slots[playerid][2] || Slots[playerid][0] == Slots[playerid][2]) GameTextForPlayer(playerid,"Almost!",3000,4);
            else GameTextForPlayer(playerid,"Bad luck!",3000,4);
        }
        CallTimeOutFunction("PlayAgainTimer",750,0,"d",playerid);
        return 1;
    }
    return 0;
}
forward PlayAgainTimer(playerid);
public PlayAgainTimer(playerid)
{
    Gambling[playerid] = 1;
    new keys,lr,ud;
    GetPlayerKeys(playerid,keys,ud,lr);
    if(keys & KEY_SPRINT) OnPlayerKeyStateChange(playerid,KEY_SPRINT,0);
}
GetNextValidBet(value)
{
    if(value + 5 > MAX_Bet) return MIN_Bet;
    return value + 5;
}
GetNextValidMBet(value)
{
    if(value - 5 > MAX_Bet) return MIN_Bet;
    if(value <= 5)return MIN_Bet;
    return value - 5;
}
stock UpdateBetText(playerid)
{
    if(kasmenu[playerid]==1)
    {
	    new prefix[4];
	    if(Balance[playerid] == 0) strcat(prefix,"~r~");
	    if(Balance[playerid]  > 0) strcat(prefix,"~g~");

	    f(global_str,80,"~w~Bet: ~g~%d",Bet[playerid]);
	    TextDrawSetString(BetText[playerid],global_str);

		f(global_str, 100,"~w~Balance: ~g~%s%d",prefix,Balance[playerid]);
	    TextDrawSetString(BalanceText[playerid],global_str);
	}
}
stock BombTimer(i)
{
	if(BombInfo[i][bbCreated])
    {
		BombInfo[i][bbTime] --;
		if(BombInfo[i][bbTime] <= 0)
		{
			BombInfo[i][bbTime] = 0;
			BombInfo[i][bbCreated] = false;
			BombInfo[i][bbBreak] = false;
			DestroyDynamicObject(BombInfo[i][bbObject]);
			DestroyDynamic3DTextLabel(BombInfo[i][bbText]);
			CreateExplosion(BombInfo[i][bbPos][0], BombInfo[i][bbPos][1], BombInfo[i][bbPos][2], 7, 20.0);
			foreach(Vehicle, s)
			{
				new Float: x,Float: y,Float: z;
				GetVehiclePos(s,x,y,z);
				if(IsVehicleInRangeOfPoint(s, 10.0,BombInfo[i][bbPos][0], BombInfo[i][bbPos][1], BombInfo[i][bbPos][2]))
				{
				    OnVehicleDeath(s, INVALID_PLAYER_ID);
				    SetVehicleToRespawn(s);
				}
			}
			foreach(new p: Player)
			{
			    if(IsPlayerConnected(p))
			    {
			        if(IsPlayerInRangeOfPoint(p, 20.0, BombInfo[i][bbPos][0], BombInfo[i][bbPos][1], BombInfo[i][bbPos][2]))
			        {
						if(BreakBomb[p] == i)
						{
						    UpdatePlayerHealth(p, 0);
						    SCM(p, COLOR_GREY, !"Вы не успели обезвредить бомбу...");
						    BreakBomb[p] = -1;
						}
						else
						{
						    SCM(p, COLOR_GREY, !"Рядом взорвалась бомба!");
						}
			        }
			    }
			}
		}
		else
		{
			f(global_str, 50,"{FFFFFF} Бомба *\n{FF9900}%s", Convert(BombInfo[i][bbTime]));
			UpdateDynamic3DTextLabelText(BombInfo[i][bbText], COLOR_WHITE, global_str);
		}
	}
	return 1;
}
forward UnBombPlayer(playerid, bombid);
public UnBombPlayer(playerid, bombid)
{
	if(BreakBomb[playerid] == bombid)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, BombInfo[bombid][bbPos][0], BombInfo[bombid][bbPos][1], BombInfo[bombid][bbPos][2]))
		{
		    ClearAnimationsEx(playerid);
		    BombInfo[bombid][bbBreak] = false;
		    BombInfo[bombid][bbCreated] = false;
		    BombInfo[bombid][bbTime] = 0;
			DestroyDynamicObject(BombInfo[bombid][bbObject]);
			DestroyDynamic3DTextLabel(BombInfo[bombid][bbText]);
			if(random(10) < 5)
			{
				SCM(playerid, COLOR_LIME, "Вы успешно обезвредили бомбу");
				TogglePlayerControllable(playerid,true);
			}
			else
			{
			    SCM(playerid, COLOR_GREY, !"Вы не смогли обезвредить бомбу...");
			    CreateExplosion(BombInfo[bombid][bbPos][0], BombInfo[bombid][bbPos][1], BombInfo[bombid][bbPos][2], 7, 20.0);
	            foreach(new i: Player)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(IsPlayerInRangeOfPoint(i, 20.0, BombInfo[bombid][bbPos][0], BombInfo[bombid][bbPos][1], BombInfo[bombid][bbPos][2]))
				        {
							SCM(i, COLOR_GREY, !"Рядом взорвалась бомба!");
				        }
				    }
				}
			}
	    }
	}
	BreakBomb[playerid] = -1;
	return 1;
}

stock Hunger(playerid, type)
{
	if(GetPlayerLauncher(playerid))
		return false; 

	switch type do
	{
	    case 0:
		{
		    for(new i; i < 2; i++) TextDrawShowForPlayer(playerid,HungerFon[i]);
			PlayerTextDrawTextSize(playerid,HungerProgres[playerid], 549.5 + Fullness[playerid] / 100.0 * 54.5, 40.000000);
			ShowPlayerTD(playerid,HungerProgres[playerid]);
		}
		case 1:
		{
			PlayerTextDrawHide(playerid,HungerProgres[playerid]);
		    for(new i; i < 2; i++) TextDrawHideForPlayer(playerid,HungerFon[i]);
		}
	}

	return true;
}

stock CheckPlayerGoCuff(playerid)
{
    GotoInfo[playerid][gtX] = 0.0;
    GotoInfo[playerid][gtY] = 0.0;
    GotoInfo[playerid][gtZ] = 0.0;
    GotoInfo[playerid][gtTPX] = 0.0;
    GotoInfo[playerid][gtTPY] = 0.0;
    GotoInfo[playerid][gtTPZ] = 0.0;
    GotoInfo[playerid][gtID] = INVALID_PLAYER_ID;
    GotoInfo[playerid][gtGoID] = INVALID_PLAYER_ID;
    GotoInfo[playerid][gtState] = 0;
    GotoInfo[playerid][gtStayed] = 0;
    Recuffer[playerid]=INVALID_PLAYER_ID;
    cuffer[playerid]=0;
    return 1;
}
cmd:gotome(playerid, params[])
{
	if(IsACop(playerid))
	{
	    new id;
		if(sscanf(params,"u",id)) return SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Используй: /gotome [id]");
		if(!TeamDuty{playerid}) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не на дежурстве");
		if(ProxDetectorS(2.0, playerid, id))
		{
		    if(GotoInfo[playerid][gtID] == INVALID_PLAYER_ID)
		    {
		        if(GotoInfo[id][gtGoID] == INVALID_PLAYER_ID)
		        {
					if(Cuffed[id])
					{
                        CheckPlayerGoCuff(playerid);
                        CheckPlayerGoCuff(id);
					    GotoInfo[id][gtID] = INVALID_PLAYER_ID;
					    GotoInfo[playerid][gtGoID] = INVALID_PLAYER_ID;
					    GotoInfo[playerid][gtID] = id;
					    GotoInfo[id][gtGoID] = playerid;
					    GotoInfo[id][gtState] = GetPlayerState(playerid);
					    GetPlayerPos(id, GotoInfo[id][gtX], GotoInfo[id][gtY], GotoInfo[id][gtZ]);
					    SCM(playerid, COLOR_WHITE, !"[Информация] {FFFFFF}Чтобы перестать тащить игрока введите {33AA33}/ungotome");
					    f(global_str, 150, "* %s потащил игрока %s за собой", PN(playerid), PN(id));
					    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
					    TogglePlayerControllable(id, true);
					}
					else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Игрок не скован");
		        }
		        else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Этого игрока уже кто-то ведет за собой");
		    }
		    else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы уже кого-то ведете за собой");
		}
		else SCM(playerid, COLOR_GREY, !"[Ошибка] {FFFFFF}Вы далеко от игрока");
	}
	return 1;
}
cmd:ungotome(playerid, params[])
{
	if(IsACop(playerid))
	{
		new id;
		if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /ungotome [id/name]");
		if(ProxDetectorS(1.5,playerid,id))
		{
			if(Cuffed[id] && GotoInfo[playerid][gtID] == id)
			{
				f(global_str, 200 ,"* %s перестал тащить за собой игрока %s",PN(playerid),PN(id));
				ProxDetector(25,playerid,global_str,COLOR_PURPLE);
				TogglePlayerControllable(id, Cuffed[id]);
				CheckPlayerGoCuff(id);
				CheckPlayerGoCuff(playerid);
			}
			else SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не скован, либо вы не тащите его");
		}
	}
	return 1;
}
stock GoPlayerAnimation(playerid, Float:X, Float:Y, Float:Z)
{
	if(IsPlayerInAnyVehicle(playerid)) return 0;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z)) return ApplyAnimationEx(playerid, "PED", "IDLE_STANCE", 4.1, 0, 1, 1, 0, 0, 1);
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, X, Y, Z)) return ApplyAnimationEx(playerid, "PED", "WALK_PLAYER", 4.1, 0, 1, 1, 0, 0, 1);
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, X, Y, Z)) return ApplyAnimationEx(playerid, "PED", "RUN_GANG1", 4.1, 0, 1, 1, 0, 0, 1);
	ApplyAnimationEx(playerid, "PED", "SPRINT_PANIC", 4.1, 0, 1, 1, 0, 0, 1);
	return 1;
}
CMD:pgetip(playerid, params[])
{
	if(sscanf(params,"u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используйте: /pgetip [name/id]");

	if(params[0] == INVALID_PLAYER_ID)
		return false;

	else if(!IsOsnovatel(playerid))
		return false;

	f(global_str, 100, "- - - - Совпадение с: %s. - - - -", PlayerIp[params[0]]);
    SCM(playerid,COLOR_ACHAT,global_str);
    SCM(playerid,COLOR_ACHAT," ");
	foreach(new i: Player)
	{
		GetPlayerIp(i,global_str,16);
		if(GetString(global_str, PlayerIp[params[0]]))
			f(global_str, 50,"- %s[%d]",PN(i),i,global_str),
			SCM(playerid,COLOR_ORANGE, global_str);
	}
    return 1;
}
cmd:accept(playerid,param[])
{
	new id=PanelPlayerID[playerid],Float: money = CenaRaboti[playerid] ;

    if(id == INVALID_PLAYER_ID)return 0;
    if(PI[id][pPhoneInfo][0]<=0)return 0;

    new price = floatround( money, floatround_floor );
    if(PI[playerid][pMoney]<price)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас не достаточно денег чтобы заплатить продавцу!");
    if(!ProxDetectorS(9.0, playerid, id, 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(price<1)return 0;
    switch(Ingatre[playerid])
    {
        case 1:
        {
            f(global_str,400,"[Информация]{FFFFFF} %s успешно продал вам SIM карту с номером {52A32A}%d{FFFFFF} за {52A32A}%d$.",PN(id),PI[id][pPhoneInfo][0],price);
			SCM(playerid,COLOR_VALIK,global_str);
			f(global_str,256,"[Информация] {FFFFFF}%s принял ваше предложение о покупке SIM карты. Вы получили {52A32A}%d$.",PN(playerid),price);
		    SCM(id,COLOR_VALIK,global_str);
		    if(price > 10000)
		    {
			    f(global_str,400,"Игрок %s[%d] [IP: %s] продал симку игроку %s[%d] [IP: %s] на счет $%d [$%d]",PN(id),id,PlayerIP(id),PN(playerid),playerid,PlayerIP(playerid),price);
			 	SendAdminsMessage(COLOR_RED, global_str);
			}
			PI[playerid][pPhoneInfo][0] = PI[id][pPhoneInfo][0];
			PI[id][pPhoneInfo][0] = 0;
		    GiveMoney(playerid,-price);
			GiveMoney(id,price);
        }
    }
    CenaRaboti[playerid]=0;
	Ingatre[playerid]=0;
	PanelPlayerID[playerid]=-1;
	return 1;
}
cmd:nope(playerid,param[])
{
	if(CenaRaboti[playerid]==0)return SCM(param[0],COLOR_WHITE, !"[Ошибка] {FFFFFF}Вам никто не предлагал купить SIM карту!");
	if(PanelPlayerID[playerid]==-1)return SCM(param[0],COLOR_WHITE, !"[Ошибка] {FFFFFF}Вам никто не предлагал купить SIM карту!");
	SCM(playerid,COLOR_RED,!"[Информация] {FFFFFF}Вы успешно отказались от предложения купить SIM карту.");
	f(global_str,150,"[Информация] {FFFFFF} %s отказался от вашего предложения!",PN(playerid));
	SCM(PanelPlayerID[playerid],COLOR_RED,global_str);
	CenaRaboti[playerid]=0;
	Ingatre[playerid]=0;
	PanelPlayerID[playerid]=-1;
	return 1;
}
cmd:sellcard(playerid,param[])
{
    if(Getemer[playerid]>Global_Time)return SCM(playerid,COLOR_RED,"[Ошибка]{FFFFFF} Не флуди!");
    if(sscanf(param,"ud",param[0],param[1])) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Используйте: /sellcard [id] [цена]");
    if(param[1]<1)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Используйте цену больше 1$!");
    if(PI[param[0]][pMoney]<param[1])return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека нет столько денег чтобы вам заплатить!");
    if(!ProxDetectorS(9.0, playerid, param[0], 1)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы далеко от игрока!");
    if(param[0]==playerid)return 0;
    if(!PI[playerid][pPhoneInfo][0])return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}У вас нет SIM карты!");
	if(!pTemp[param[0]][tAuthorized])return 0;
	PanelPlayerID[param[0]] = playerid;
	CenaRaboti[param[0]] = param[1];

	f(global_str,400,"[Информация] {52A32A}%s{FFFFFF} предлагает продать SIM карту {52A32A}%d{FFFFFF} ,за {52A32A}%d${FFFFFF}.",PN(playerid),PI[playerid][pPhoneInfo][0],param[1]);
	SCM(param[0],COLOR_GREEN,global_str);
	SCM(param[0],COLOR_WHITE, !"[Информация] {FFFFFF}/accept - чтобы принять предложение /nope - чтобы отклонить.");

    f(global_str,400,"Вы предложили {52A32A}%s{FFFFFF} продать свою SIM карту за {52A32A}%d${FFFFFF}.",PN(param[0]),param[1]);
	SCM(playerid,COLOR_WHITE,global_str);

	Ingatre[param[0]] = 1;
	Getemer[playerid]= Global_Time + 5;
	return 1;
}
cmd:repare(playerid, params[])
{
	if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не механик!");
	new carid = GetPlayerVehicleID(playerid);
	if(VehicleInfo[carid][vJob] != JOB_MECHANIC) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны находится в машине механика!");
	if(sscanf(params, "ud", params[0], params[1])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /repare [id] [цена]");
	if(params[1] < 1 || params[1] > 1000) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Цена не может быть меньше $1 и не больше $1000!");
	if(PI[params[0]][pMoney] < params[1]) return SCM(playerid, COLOR_RED,!"[Ошибка] {FFFFFF}У этого человека нет столько денег чтобы вам заплатить!");
	if(GetPlayerState(params[0]) != 2) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок которому вы хотите помочь, должен быть за рулем!");
 	if(!ProxDetectorS(9.0, playerid, params[0], 1)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
	if(params[0] == playerid) return 0;
	if(!pTemp[params[0]][tAuthorized]) return 0;
	PanelPlayerID[params[0]] = playerid;
	CenaRaboti[params[0]] = params[1];

	f(global_str, 400, "Механик {52A32A}%s{FFFFFF} предлагает починить ваш транспорт за {52A32A}%d${FFFFFF}.", PN(playerid), params[1]);
	SPD(params[0], 1898, DIALOG_STYLE_MSGBOX, !"Вы согласны?", global_str, !"Принять", !"Отмена");

    f(global_str, 400, "Вы предложили {52A32A}%s{FFFFFF} починить транспорт за {52A32A}%d${FFFFFF}.", PN(params[0]), params[1]);
	SCM(playerid, COLOR_WHITE, global_str);

	Ingatre[params[0]] = 1;
    return 1;
}
cmd:filscar(playerid, params[])
{
	if(PlayerJob[playerid] != JOB_MECHANIC) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не механик!");
	new carid = GetPlayerVehicleID(playerid);
	if(VehicleInfo[carid][vJob] != JOB_MECHANIC) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы должны находится в машине механика!");
	if(sscanf(params, "ud", params[0], params[1])) return SCM(playerid ,COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /filscar [id] [количество в литрах]");
	if(params[1] < 1 || params[1] > 100) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не можете продать меньше 1-го литра и не больше 100 литров!");
	if(PI[params[0]][pMoney] < (params[1] * BenzinCena[carid])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У этого человека нет столько денег чтобы вам заплатить!");
	if(params[0] == playerid) return 0;
	if(GetPlayerState(params[0]) != 2) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок которому вы хотите помочь, должен быть за рулем!");
	if(!ProxDetectorS(9.0, playerid, params[0], 1)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы далеко от игрока!");
	if(!pTemp[params[0]][tAuthorized]) return 0;
	if(BenzinCount[carid] < params[1]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В вашей машине не достаточно бензина для продажи!");
	PanelPlayerID[params[0]] = playerid;
	CenaRaboti[params[0]] = (params[1] * BenzinCena[carid]);

	f(global_str, 400, "Механик {52A32A}%s{FFFFFF} предлагает заправить ваш транспорт на {52A32A}%d{FFFFFF}л. за {52A32A}%.1f${FFFFFF}.", PN(playerid), params[1], (params[1] * BenzinCena[carid]));
	SPD(params[0], 1898, DIALOG_STYLE_MSGBOX, !"Вы согласны?", global_str, !"Принять", !"Отмена");

    f(global_str, 400, "Вы предложили {52A32A}%s{FFFFFF} заправить транспорт за {52A32A}%.1f${FFFFFF}.", PN(params[0]), (params[1] * BenzinCena[carid]));
	SCM(playerid, COLOR_WHITE, global_str);

	Ingatre[params[0]] = 2;
	return 1;
}
cmd:azsmonitor(playerid, params[])
{
    new carid = GetPlayerVehicleID(playerid);
    if(PlayerJob[playerid]!= JOB_MECHANIC) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не механик!");
	if(VehicleInfo[carid][vJob]!=JOB_MECHANIC)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится в машине механика!");
    global_str = "";
    SCM(playerid,COLOR_GREY, !"Мониторинг АЗС.");
	for(new i;i<OWNABLEBIZES;i++)
	{
	    if(BizData[i][bState] == 6 && !GetString(BizData[i][bOwner],"The State"))
	    {
	        f(global_str, 150,"-{FFFFFF} Номер заправки: %d. Стоимость {AFAFAF}1-го{FFFFFF} литра бензина: {AFAFAF}$%.1f${FFFFFF}",i,BizData[i][bEnterPrice]);
	        SCM(playerid,COLOR_GREY, global_str);
	    }
	}
	return 1;
}
cmd:contractfill(playerid,param[])
{
	new carid = GetPlayerVehicleID(playerid);
	if(PlayerJob[playerid]!= JOB_MECHANIC) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы не механик!");
	if(VehicleInfo[carid][vJob]!=JOB_MECHANIC)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится в машине механика!");
    if(IsAtGasStation(playerid) == -1) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы должны находится возле одной из заправок!");
	new bizid = GoFuel[IsAtGasStation(playerid)][gfBizzID];
	new Float:cost = BizData[bizid][bEnterPrice],benz = BizData[bizid][bProducts];
	if(benz< (1000-BenzinCount[carid]))return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В этой заправке не достаточно бензина чтобы заполнить ваш автомобиль!");
	if(cost<2)return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}В этой заправке слишком дешевый бензин для продажи!");
	if(BenzinCount[carid]>950)return 0;
	BizData[bizid][bProducts]-=(1000-BenzinCount[carid]);
	UpdateFuels(bizid);

	Contracter[carid] = bizid;
	BenzinCount[carid]= 1000;
	BenzinCena[carid]=cost;

	f(global_str, 150,"{57B22C}Заправка %.1f$\n{FFFFFF}Бензина: %d/1000",BenzinCena[carid],BenzinCount[carid]);
	UpdateDynamic3DTextLabelText(Benzin[carid], 0xFFFFFFFF, global_str);
	f(global_str,400,"[Инфорация] {FFFFFF}Вы успешно заключили контракт с этой АЗС и вы будете получать по {52A32A}%.1f${FFFFFF} за каждый литр бензина!",BenzinCena[carid]/2);
	SCM(playerid,COLOR_VALIK,global_str);
	SCM(playerid,COLOR_VALIK, !"[Информация] {FFFFFF}Чтобы прервать контракт с этой АЗС достаточно заключить его с другой!");

	return 1;
}

cmd:spplayer(playerid, params[])
{
	extract params -> new player:target; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /spplayer [id]");

	if(target == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_GREY, !"Этот игрок не в сети");

    f(global_str, 150, "<<<<< %s[%d] Заспавнил игрока %s[%d]!", PN(playerid), playerid, PN(target), target);
    SendAdminsMessage(COLOR_OLDRED, global_str);
    SCMF(target, COLOR_OLDRED, "Администратор %s[%d] вас заспавнил", PN(playerid), playerid);
	PlayerSpawn(target);
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> заспавнил игрока <a href=../pages/user?id=%d>%s</a>", 5, "","", PI[playerid][pID], PN(playerid), PI[target][pID], PN(target));

}

cmd:checkpunish(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, !"Используй: /checkpunish [id/name]");

	if(!IsPlayerConnected(params[0])) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Данного игрока нету в сети.");

	if(Int_GetPlayerData(playerid, "nakaztimer") > Global_Time) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Данную команду можно использовать раз в 5 секунд.");

	f(global_str, 200, "SELECT %s, msg FROM history WHERE Name = '%s' ORDER BY Date DESC LIMIT 10;", "DATE_FORMAT(`Date`, '[%Y-%m-%d %H:%i:%S]')", PlayerName[params[0]]);
	mysql_tquery(mysql, global_str, "show_ANL", "d", playerid);
	
	return SetPVarInt(playerid, "nakaztimer", Global_Time+5);
}

cmd:pobjectdel(playerid, params[])
{
	new Float:radius;

    if(sscanf(params, "f", radius))
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /pobjectdel [радиус]");

    if(!(1.0 <= radius <= 100.0))
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /pobjectdel [радиус > 0 или < 100]");

	new count;
	
	for(new i; i < MAX_CREATE_OBJECTS; i++)
	{
		if(BH_Object[i][objItemID] && (BH_Object[i][objHouseID] || BH_Object[i][objBizID]))
		{
			if(IsPlayerInRangeOfPoint(playerid, radius, BH_Object[i][objPosX], BH_Object[i][objPosY], BH_Object[i][objPosZ])) 
				f(global_str, 128, "DELETE FROM `bh_objects` WHERE `ID` = '%d'", BH_Object[i][objBaseID]),
				mysql_query(mysql, global_str, false),
				DestroyDynamicObject(BH_Object[i][objID]),
				BH_Object[i][objItemID] = 
				BH_Object[i][objBizID] =
				BH_Object[i][objHouseID] = 0, 
				count ++;
		}
	}

	amlf("Администратор <a href=../pages/user?id=%d>%s</a> удалил объекты недвижимости %d штук!", 0, "", "", PI[playerid][pID], PN(playerid), count);

    SCMF(playerid, COLOR_GREEN, "[Информация] {FFFFFF}Вы успешно удалили объекты недвижимости %d штук в вашем радиусе.", count);
    f(global_str, 100, "[A] %s удалил объекты недвижимости %d штук!", PN(playerid), count);

	return SendAdminsMessage(COLOR_GREEN, global_str);
}
cmd:clearhotel(playerid, params[])
{
	new name[24];
	if(sscanf(params, "s[24]", name)) return SCM(playerid, COLOR_OLDRED, !"Используй: /clearhotel [name]");
	
	format(mysql_string, 128, "SELECT `ID` FROM accounts WHERE NickName = '%s'", name);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if(cache_num_rows())
	{
		f(mysql_string, 150, "[A] Администратор %s[%d] выселил игрока %s из отеля.", PN(playerid), playerid, name);
		SendAdminsMessage(COLOR_OLDRED, mysql_string);
		
		SQL("UPDATE accounts SET From = -1 WHERE NickName = '%s'", name);
	}
	else SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Такого игрока не существует!");
	cache_delete(result);

	return false;
}
cmd:delhname(playerid, params[])
{
	extract params -> new house; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /delhname [id]");
	
	if(!(0 <= house <= OWNABLEHOUSES))
		return false;

	f(global_str, 200, "UPDATE `houses` SET `Name` = '' WHERE `ID` = '%d'", house);
	mysql_tquery(mysql, global_str);
	CallTimeOutFunction("MysqlRefreshMS", 50, false, "dd", 982, house);

	format(global_str, 128, "[A] %s[%d] удалил название дома №%d", PN(playerid), playerid, house);
	return SendAdminsMessage(COLOR_GREY, global_str);
}

cmd:delbname(playerid, params[])
{
	extract params -> new biz; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /delbname [id]");
	
	if(!(0 <= biz <= OWNABLEBIZES))
		return false;

	f(global_str, 200, "UPDATE `businesses` SET `opisanie` = '' WHERE `ID` = '%d'", biz);
	mysql_tquery(mysql, global_str);
	CallTimeOutFunction("MysqlRefreshMS", 50, false, "dd", 583, biz);

	format(global_str, 128, "[A] %s[%d] удалил название бизнеса №%d", PN(playerid), playerid, biz);
	return SendAdminsMessage(COLOR_GREY, global_str);
}

cmd:getplayerfamid(playerid, params[])
{
	extract params -> new player:targetid; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /getplayerfamid [id]");
	
	if(targetid == INVALID_PLAYER_ID) return false;

	return SCMF(playerid, -1, "FAMILY ID = %d", FP_Data[targetid][F_FAMILY_ID]);
}

cmd:check(playerid, params[])
{	
	new
		targetid;

    if(sscanf(params, "u", targetid))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /check [id]");

	if(targetid == INVALID_PLAYER_ID || targetid == playerid)
		return SCM(playerid, COLOR_GREY, !"Этот игрок не в сети");

    if(PI[playerid][pAdmin] < PI[targetid][pAdmin])
		return SCM(playerid, COLOR_GREY, !"Нельзя смотреть статистику админа");

    ShowStats(playerid, targetid);
	return 1;
}

cmd:checklic(playerid, params[])
{
	new id;
    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /checklic [id]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, !"Этот игрок не в сети");
    ShowLicenses(playerid,id);
	return 1;
}

cmd:checkskills(playerid, params[])
{
	new id;
    if(sscanf(params,"u",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /checkskills [id]");
	if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_GREY, !"Этот игрок не в сети");
    ShowSkills(playerid,id);
	return 1;
}
cmd:givekey(playerid, params[])
{
	new id,car;
	if(sscanf(params,"ud",id,car)) return SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Используйте: /givekey [id] [carid]");
	if(!IsPlayerRegCar(playerid,car)) return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Вы не владелец этого транспорта!");
	if(ProxDetectorS(10.0,playerid,id))
	{
	    if(IsPlayerHaveCar(playerid,car))
	    {
	        if(IsValidNumberCars(id))
			{
		        SetCarKeyer(car,PN(id));
		        f(global_str, 333, "\n\n{FFFFFF}Игрок %s дал вам копию ключей от транспорта {ae433d}%s\n{ae433d}[Внимание]: {FFFFFF}Используйте ""/keys"" для просмотра доступных ключей\n", PN(playerid), GetVehicleName(car));
		        SPD(id, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Передача | {ae433d}Ключи", global_str, "x", "");
		        f(global_str, 200,"[Информация] {FFFFFF}Вы дали игроку %s копию ключей от транспорта № %d",PN(id),car);
		        SCM(playerid,COLOR_LIGHTBLUE,global_str);
		        GetNumberCars(id,PI[id][pCars]);
	        }
			else SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Игрок которому вы хотите дать ключи, не может их взять!");
	    }
	}
	return 1;
}

alias:setfulldostup("setfd","setf");
cmd:setfulldostup(playerid, params[])
{
	if(!IsOsnovatel(playerid))
	    return false;

	extract params -> new player:id; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /setfulldostup [id]");

	else if(!IsPlayerConnected(id))
		return false;
 
 	SCMF(playerid, COLOR_LIGHTBLUE, "Вы дали игроку %s[%d] FullDostup!", PN(id), id);
    return SQL("UPDATE accounts SET FullDostup = '%d' WHERE NickName = '%s'", AdminInfo[id][admFullDostup] = 1, PN(id));
}

cmd:makeadmin(playerid, params[])
{
	new max_level = IsOsnovatel(playerid) ? 8:5;
	if(sscanf(params, "ud", params[0], params[1]))
		return SCMF(playerid, COLOR_OLDRED, !"Используй: /makeadmin [name/id] [0-%i]", max_level);
	
	if(params[0] == INVALID_PLAYER_ID) return 0;

	if(!(0 <= params[1] <= max_level))
		return SCMF(playerid, COLOR_OLDRED, !"Используй: /makeadmin [name/id] [0-%i]", max_level);

	f(global_str, 128, "SELECT * FROM `admin` WHERE `name` = '%s'", PN(params[0]));
	mysql_tquery(mysql, global_str, "SetAdmin", "isi", playerid, PN(params[0]), params[1]);
	PI[params[0]][pAdmin] = params[1];
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> назначил игрока <a href=../pages/user?id=%d>%s</a> администратором %d уровня.", 5, "", "", PI[playerid][pID], PN(playerid), PI[params[0]][pID], PN(params[0]), params[1]);
}

cmd:makeadminoff(playerid, params[])
{
	static name[24]; name[0] = EOS;

	if(sscanf(params, "s[24]d", name, params[1]))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /makeadminoff [name/id] [0-5]");

	new max_level = IsOsnovatel(playerid) ? 8:5;

	if(!(0 <= params[1] <= max_level))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /makeadminoff [name/id] [0-5]");

	f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", name);
	mysql_tquery(mysql, global_str, "SetAdmin", "isi", playerid, name, params[1]);
	return amlf("Администратор <a href=../pages/user?id=%d>%s</a> назначил игрока <a href=../pages/user?name=%s>%s</a> администратором %d уровня.", 5, "", "", PI[playerid][pID], PN(playerid), name, name, params[1]);
}

stock SetPlayerAccessory(playerid, id, slot)
{
	if(PlayerModification[playerid])
		return SetPlayerModification(playerid, PlayerModification[playerid]);

	if(AksSlot[playerid][2][slot] <= 10)
	    return SCMF(playerid, COLOR_GREY, "Аксессуар '%s' сломан и не будет отображаться пока вы его не почините!", ItemsInfo[AksSlot[playerid][0][slot]][itemName]);
	
	return SetAttachToSkin(playerid, ItemsInfo[id][itemModel], id, slot), GetPlayerAura(playerid);
}

stock SetPlayerModification(playerid, mod)
{
	AksDel[playerid][0] = AksDel[playerid][1] = AksDel[playerid][2] = AksDel[playerid][3] = AksDel[playerid][4] = AksDel[playerid][5] = AksDel[playerid][6] = AksDel[playerid][7] = 1;

	new skin = GetPlayerSkin(playerid);

	switch mod do
	{
		case 958:
		{
			if(!(skin == 68)) return false;

			SetPlayerAttachedObject(playerid, 4, 324, 2, -0.0030, 0.1469, -0.0789, 0.0000, 76.1999, 164.9000, 0.9390, 1.2189, 0.3759, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 324, 1, -0.5830, -0.2709, -0.4239, 113.4999, 98.1999, -25.6000, 1.4079, 10.4469, 4.7259, 0, 0);
			SetPlayerAttachedObject(playerid, 6, 18646, 14, 0.4529, -0.7260, -0.0270, 96.3000, 7.8000, 0.0000, 0.2109, 0.2339, 8.9059, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19022, 2, 0.0599, 0.0609, 0.0030, 107.4000, -68.1000, -162.3000, 1.0000, 1.2130, 1.2369, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 19163, 2, 0.0649, 0.0349, 0.0000, 0.0000, 83.5000, -179.8000, 1.2609, 1.1389, 1.2809, 0, 0);
			SetPlayerAttachedObject(playerid, 0, 18967, 2, 0.0439, -0.0020, 0.0019, 74.5999, 68.0000, 13.8999, 0.9139, 1.6009, 1.8389, 0, 0);
		}
		case 959:
		{
			if(!(skin == 68)) return false;

			SetPlayerAttachedObject(playerid, 0, 1108, 14, 0.8569, -0.7969, -0.1349, 0.1000, -4.2999, 100.1999, 2.7099, 0.3100, 0.1010, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19069, 1, 0.3149, 0.0529, -0.0199, -88.0999, 177.9000, 5.8999, 2.3849, 1.4539, 1.9559, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 333, 14, 0.4919, 0.6150, 0.2409, -74.8999, 176.5999, 2.1000, 2.6779, 1.9849, 1.8320, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19163, 2, 0.0529, 0.0319, -0.0020, 176.3000, 96.7000, 4.0999, 1.1929, 1.2500, 1.3279, -16777216, 0);
			SetPlayerAttachedObject(playerid, 4, 635, 1, -0.2819, -0.0670, 0.0000, 84.0000, 0.0000, 1.8999, 1.0169, 0.1729, 0.4089, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 18729, 14, 0.4090, -0.8539, -0.3019, 0.0000, 0.0000, -85.4999, 0.0000, 0.4599, 0.0719, 0, 0);
		}
		case 963:
		{
			if(!(skin == 154)) return false;

			SetPlayerAttachedObject(playerid, 0, 1111, 2, 0.1289, 0.0710, -0.0899, -15.1000, -2.7999, -96.6000, 0.4989, 0.8410, 1.0629, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 1111, 2, 0.1229, 0.0710, 0.0939, -164.9000, 4.9000, -88.8000, 0.4989, 0.8410, 1.0629, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 19516, 2, 0.0489, -0.0040, -0.0040, -2.0000, -3.0000, -3.2000, 1.0249, 0.8489, 0.7869, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19274, 2, 0.1499, -0.0779, 0.0049, 0.0000, -5.5999, 17.5999, 1.0000, 0.8100, 0.3279, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 2237, 14, 0.2610, 0.6930, 0.2069, -81.5999, -7.4999, 0.0000, 0.9089, 0.9290, 2.1449, 0, 167772159);
			SetPlayerAttachedObject(playerid, 5, 2726, 13, 0.0949, -0.0449, 0.0769, 0.0000, 174.8000, -2.1999, 3.1589, 3.1459, 0.0499, -1, 0);
			SetPlayerAttachedObject(playerid, 6, 19515, 1, 0.0190, 0.0500, 0.0030, 0.0000, -1.0000, 0.1000, 1.1340, 1.1780, 1.0890, -1, -1);
		}
		case 964:
		{
			if(!(skin == 98)) return false;

			SetPlayerAttachedObject(playerid, 0, 19141, 2, 0.1099, 0.0219, 0.0000, 0.0000, 0.0000, 0.0000, 1.0329, 1.0469, 1.0319, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19141, 2, 0.1040, 0.0909, 0.0000, 0.0000, 0.0000, 0.8999, 0.5759, 0.7089, 0.9150, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 3932, 2, 0.0839, 0.1190, 0.0030, -83.1000, 22.8999, 176.8999, 0.0359, 0.0280, 0.0259, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19581, 14, 0.3759, -0.0230, 0.0459, 18.0000, -73.5999, 0.0000, 1.0000, 1.0000, 1.0000, -1, 0);
			SetPlayerAttachedObject(playerid, 4, 363, 7, -0.1279, 0.1650, 0.0409, 102.2999, -101.4999, -35.9999, 0.5419, 0.7799, 0.4979, 0, 0);
		}
		case 965:
		{
			if(!(skin == 125)) return false;

			SetPlayerAttachedObject(playerid, 0, 3524, 2, -0.4410, -0.1299, 0.0070, 85.4999, 107.3999, 91.1998, 0.2440, 0.2799, 0.2300, 0, 16777215);
			SetPlayerAttachedObject(playerid, 1, 19801, 2, 0.0740, 0.0179, -0.0039, 85.6000, 90.4000, 96.0999, 1.1920, 1.0629, 1.0569, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 2680, 14, 0.3930, -0.0269, 0.0879, 26.0000, 66.4000, -81.5999, 1.0000, 1.0000, 1.0000, 0, 16777215);
			SetPlayerAttachedObject(playerid, 3, 2680, 14, 0.7269, -0.0419, 0.0879, -17.6000, 61.4999, -48.3999, 1.0599, 1.0739, 1.1639, 0, 16777215);
			SetPlayerAttachedObject(playerid, 4, 2061, 1, 0.1710, 0.0000, -0.1039, 0.0000, 107.6999, 173.7998, 0.3379, 0.2890, 0.7950, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 2061, 1, 0.1650, 0.0000, 0.1080, 0.0000, 73.4999, -171.6000, 0.3379, 0.2890, 0.7950, 0, 0);
		}
		case 966:
		{
			if(!(skin == 163)) return false;

			SetPlayerAttachedObject(playerid, 0, 19352, 2, 0.0829, 0.0130, 0.0000, -100.6999, 120.0999, -85.4000, 0.9490, 1.1439, 1.1269, 0, 0),
			SetPlayerAttachedObject(playerid, 1, 19030, 2, 0.0680, 0.0349, 0.0000, 107.0000, -83.4001, -163.0996, 0.8470, 1.0709, 1.2939, 0, 0),
			SetPlayerAttachedObject(playerid, 2, 11731, 1, 0.0099, 0.0419, 0.0610, -3.9000, 153.6000, -84.2000, 0.1140, 0.2629, 0.1879, 0, 16777215),
			SetPlayerAttachedObject(playerid, 3, 19347, 1, -0.0549, 0.2680, -0.1000, 83.7999, -12.1000, 0.0000, 1.8899, 1.8039, 0.4760, 0, 0),
			SetPlayerAttachedObject(playerid, 4, 19339, 1, 0.5440, -0.0390, -0.5799, -0.9999, 102.1999, -88.4999, 0.9319, 0.8089, 0.8119, 0, 0); 
		}
		case 967:
		{
			if(!(skin == 214)) return false;

			SetPlayerAttachedObject(playerid, 0, 2992, 2, 0.2460, 0.0000, 0.0000, 0.0000, -92.7000, 0.0000, 1.3660, 1.3940, 1.0000, -1, -1),
			SetPlayerAttachedObject(playerid, 1, 2992, 2, 0.2460, 0.0000, 0.0120, 0.0000, 88.6000, 0.0000, 1.3660, 1.3940, 1.0000, -1, -1),
			SetPlayerAttachedObject(playerid, 2, 19517, 1, -0.3739, -0.2639, -0.2249, 52.5999, 7.1999, 1.9000, 6.7819, 2.7469, 0.2979, 0, 0),
			SetPlayerAttachedObject(playerid, 3, 19517, 1, -0.3739, -0.2450, 0.2549, -62.4000, -7.0000, 3.7000, 6.7819, 2.7469, 0.2979, 0, 0);
		}
		case 1123:
		{
			if(!(skin == 206)) return false;

			SetPlayerAttachedObject(playerid, 0, 3070, 2, 0.0649, 0.0029, -0.0439, 24.0000, -175.1000, -28.6999, 0.4359, 0.7739, 0.4549, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19527, 2, 0.0909, 0.0630, -0.0189, -98.2999, 0.0000, 0.0000, 0.0299, 0.0329, 0.0549, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 2711, 14, 0.1280, -0.0139, -0.0189, 5.1999, 84.0000, 13.7999, 0.9819, 1.0000, 1.6250, 0, -1);
			SetPlayerAttachedObject(playerid, 3, 2976, 8, 0.5090, 0.0250, 0.0539, -73.5000, -92.9999, 113.0999, 0.3569, 0.3610, 0.6489, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 2976, 11, 0.4510, 0.0149, 0.0670, -73.7000, -91.0999, 113.0999, 0.2569, 0.2829, 0.6489, 0, 0);
		}
		case 1128:
		{
			SetPlayerAttachedObject(playerid, 0, 2805, 2, 0.0419, -0.0020, 0.0079, -5.1999, -97.4000, 0.0000, 0.4149, 0.6319, 0.2369, 0, 16777215);
			SetPlayerAttachedObject(playerid, 1, 19319, 2, 0.0639, 0.1110, 0.0430, 101.5000, -62.1000, 78.5999, 0.1069, 0.9589, 0.0529, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 19319, 2, 0.0689, 0.1150, -0.0369, 117.8000, -49.2000, 87.8999, 0.0639, 0.9359, 0.0649, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 1133, 13, 0.3579, -0.2370, 0.0379, 163.6000, -15.1999, -170.4000, 2.4829, 0.4919, 0.1129, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19583, 13, 0.3569, -0.0189, -0.0280, -17.0000, -168.5999, 6.8999, 1.2510, 1.2279, 0.9700, 0, 0);
		}
		case 1129:
		{
			SetPlayerAttachedObject(playerid, 0, 19320, 2, 0.1179, -0.0060, 0.0099, 0.0000, 80.9000, 0.0000, 0.5400, 0.4989, 0.5239, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 636, 1, -0.2829, -0.1899, 0.0000, 90.0999, 11.5999, 0.0000, 0.4159, 0.2029, 0.5080, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 1247, 2, 0.0409, 0.0939, -0.0140, -6.8000, -3.4999, 28.2000, 0.1699, 1.3129, 0.5879, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 1247, 2, 0.1119, 0.0969, 0.0060, -18.7000, -3.4999, 28.2000, 0.1699, 1.3989, 0.2730, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 1247, 2, 0.1030, 0.1079, 0.0469, 24.3999, 8.3000, -22.6999, 0.2579, 0.7160, 0.3470, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 1247, 2, 0.1140, 0.0819, -0.0859, -39.0000, -20.1000, -31.2999, 0.2579, 0.7160, 0.3470, 0, 0);
		}
		case 981:
		{
			SetPlayerAttachedObject(playerid, 0, 1944, 1, 0.084899999201298, 0.22089999914169, -0.039900001138449, -5, 0, -21, 0.79290002584457, 0.83300000429153, 1.6908999681473, 0xFFffb836, 0);
			SetPlayerAttachedObject(playerid, 1, 18902, 1, 0.0049000000581145, 0.032000001519918, -0.032900001853704, -95.89990234375, -176.30009460449, -91.499900817871, 6.2228999137878, 7.3109002113342, 2.3970000743866, 0xFFffb836, 0);
			SetPlayerAttachedObject(playerid, 2, 18902, 1, 0.25690001249313, 0.032000001519918, -0.032900001853704, 88.599998474121, -176.00010681152, 88.599998474121, 6.2228999137878, 6.0848999023438, 2.3970000743866, 0xFFffb836, 0);
			SetPlayerAttachedObject(playerid, 3, 19993, 1, 0.26800000667572, 0.29100000858307, -0.14890000224113, 81.599899291992, -4.8998999595642, -1.5, 2.0520000457764, 1.9738999605179, 0.82200002670288, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19993, 1, 0.25900000333786, 0.30390000343323, 0.10300000011921, 93.300003051758, -4.8998999595642, -1.5, 2.0520000457764, 1.9738999605179, 0.82200002670288, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 1575, 1, -0.061900001019239, 0.15989999473095, -0.008899999782443, -91.89990234375, 12.799900054932, -2.1998999118805, 0.61589998006821, 0.46689999103546, 0.74690002202988, 0, 0);
		}
		case 979:
		{
			SetPlayerAttachedObject(playerid, 0, 19135, 2, 0.2319, -0.0139, 0.0700, 10.0999, -119.0999, -6.9999, 0.2790, 0.2999, 0.3269, -16776961, 0);
			SetPlayerAttachedObject(playerid, 1, 19087, 14, 0.3600, 0.0000, 0.0209, -59.0000, 75.6999, -84.8999, 0.0809, 0.0460, 0.4699, -16777216, 0);
			SetPlayerAttachedObject(playerid, 2, 19063, 14, -0.9300, -0.2700, -0.1389, -60.3000, 78.8999, 165.8999, 0.2829, 0.2689, 0.3650, 0, -16776961);
			SetPlayerAttachedObject(playerid, 3, 19054, 13, 0.2720, -0.0390, -0.0579, 0.0000, 0.0000, 0.0000, 0.2070, 0.2860, 0.0949, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19087, 14, 0.3600, 0.0000, 0.0209, 1.7999, 75.6999, -84.8999, 0.0809, 0.0460, 0.3970, -16777216, 0);
			SetPlayerAttachedObject(playerid, 5, 19063, 14, -0.7319, 0.0109, -0.2469, 0.0999, 78.8999, 165.8999, 0.3079, 0.2939, 0.4029, 0, -16711681);

		}
		case 960:
		{	
			SetPlayerAttachedObject(playerid, 2, 3528, 1, 0.1560, -0.1870, -0.3460, -21.6000, 0.0000, 0.0000, 0.2500, 0.0080, 0.1670, -1, -1);
			SetPlayerAttachedObject(playerid, 1, 3528, 1, 0.1560, -0.1870, 0.2950, -159.3000, 0.0000, 0.0000, 0.2500, 0.0080, 0.1670, -1, -1);
			SetPlayerAttachedObject(playerid, 0, 3528, 2, 0.0640, 0.0830, -0.0340, 0.0000, 81.4000, 80.6000, 0.0790, 0.0940, 0.0910, -1, -1);
		}
		case 961:
		{
			SetPlayerAttachedObject(playerid, 0, 11704, 2, 0.0750, 0.1250, -0.0020, 90.6000, 84.2000, 87.1000, 0.2890, 0.4580, 0.3920, -1, -1);
			SetPlayerAttachedObject(playerid, 0, 6865, 2, 0.0020, 0.0350, 0.0000, -124.3000, 105.3000, -7.6000, 0.1390, 0.1550, 0.1170, -1, -1);
			SetPlayerAttachedObject(playerid, 1, 815, 1, 0.0000, 0.0000, -0.0710, 29.3000, 0.0000, 0.0000, 0.4030, 0.0030, 0.3330, -1, -1);
			SetPlayerAttachedObject(playerid, 2, 815, 1, 0.0000, 0.0000, 0.0820, 147.9000, 0.0000, 0.0000, 0.4030, 0.0030, 0.3330, -1, -1);
			SetPlayerAttachedObject(playerid, 3, 18688, 1, -0.3980, -0.0420, -1.6170, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, -1, -1);
			SetPlayerAttachedObject(playerid, 4, 18701, 2, -1.5530, 0.1100, -0.0080, 0.0000, 86.3000, 0.0000, 1.0000, 1.0000, 1.0000, -1, -1);
			SetPlayerAttachedObject(playerid, 5, 18701, 2, -1.5530, 0.1100, -0.2000, 0.0000, 86.3000, 0.0000, 1.0000, 1.0000, 1.0000, -1, -1);
		}
		case 962:
		{
			SetPlayerAttachedObject(playerid, 5, 1254, 2, 0.0560, 0.1139, 0.0379, 17.6000, 18.4999, 9.0999, 0.3649, 0.2709, 0.4749, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 1254, 2, 0.0630, 0.1169, -0.0379, -17.4999, 144.1000, -2.2000, 0.3649, 0.2709, 0.4749, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19094, 2, 0.0099, 0.0590, -0.0030, 178.2999, 7.5999, -85.5999, 0.9799, 0.3459, 0.5720, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 3100, 2, -0.0199, -0.1139, 0.0040, 84.6000, 128.8000, 99.4999, 2.2759, 1.4839, 3.9309, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 3100, 2, 0.1150, -0.1019, 0.0040, 80.2000, 147.6000, 99.4999, 2.8569, 1.8839, 4.0079, 0, 0);
			SetPlayerAttachedObject(playerid, 0, 3100, 2, 0.0680, 0.0020, 0.0040, 82.6000, 0.2000, 99.4999, 3.5159, 3.9499, 4.0079, 0, 0);
		}
		case 1122:
		{
			SetPlayerAttachedObject(playerid, 0, 19577, 2, 0.058899, 0.032000, -0.004900, -98.099998, 130.500000, -142.199905, 2.918900, 2.933900, 4.034900, -65536, 0);
			SetPlayerAttachedObject(playerid, 1, 19577, 17, 0.077899, 0.019899, -0.004900, -98.099998, 110.000000, -142.199905, 1.911900, 2.141000, 3.638999, -65536, 0);
			SetPlayerAttachedObject(playerid, 2, 19582, 2, 0.0949, 0.1129, 0.0399, 121.7999, 164.6999, -26.8000, 0.8409, 0.3479, 0.9199, -16777216, 0);
			SetPlayerAttachedObject(playerid, 3, 19582, 2, 0.1030, 0.1010, -0.0619, -130.4000, -160.9001, -17.2000, 0.8259, 0.3479, 0.9199, -16777216, 0);
			SetPlayerAttachedObject(playerid, 4, 19874, 2, 0.0710, 0.1000, -0.0489, 46.0999, 59.5999, 106.0000, 0.3689, 0.7209, 0.4979, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 19874, 2, 0.0740, 0.1059, 0.0179, 46.0999, 86.3999, 152.6999, 0.3689, 0.7209, 0.4979, 0, 0);
		}
		case 1359:
		{
			if(!(skin == 42)) return false;
			
			SetPlayerAttachedObject(playerid, 0, 2006, 2, 0.0680, 0.0780, 0.0089, 96.0000, -101.7000, -85.4000, 1.1269, 1.1160, 0.9639, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 2006, 2, 0.0040, 0.1270, -0.0020, -176.4999, -173.0001, -3.4000, 0.7329, 1.0340, 0.6709, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 19022, 2, 0.0520, 0.0519, -0.0020, 11.1999, -92.2000, 99.6000, 1.0000, 1.1019, 1.2050, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 1636, 2, -0.0089, 0.1279, -0.0829, -86.6999, 0.0000, 0.0000, 0.4139, 0.1229, 0.4090, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19801, 2, 0.0489, 0.0130, -0.0020, 89.4999, 74.9000, 91.8999, 1.1829, 1.2139, 1.1939, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 11700, 14, 0.3910, -0.0399, 0.0140, 0.0000, -98.1999, 0.0000, 0.5799, 1.0000, 0.6200, 0, 0);
		}
		case 1360:
		{
			SetPlayerAttachedObject(playerid, 0, 19576, 2, 0.1539, 0.0089, 0.0080, 0.0000, -89.2999, 176.6000, 2.4859, 2.7650, 3.7630, -16711936, 0);
			SetPlayerAttachedObject(playerid, 1, 19570, 2, 0.2010, 0.1009, 0.0309, -89.3998, 13.5000, 7.8999, 0.2649, 0.4979, 0.0619, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 19570, 2, 0.2029, 0.0969, -0.0160, -103.5000, 14.3999, -11.8000, 0.2680, 0.5139, 0.0619, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19576, 2, 0.0999, 0.0359, 0.0049, 79.6000, -144.2998, -85.4999, 3.5090, 3.0060, 2.9150, -16711936, 0);
			SetPlayerAttachedObject(playerid, 4, 19078, 2, 0.2969, 0.0000, 0.0049, 176.4000, -176.1999, -51.7999, 0.5049, 0.5529, 0.5590, -16711936, 0);
			SetPlayerAttachedObject(playerid, 5, 19576, 1, 0.0409, 0.0099, -0.0109, 13.9001, -91.9997, -160.6998, 5.0939, 4.4000, 7.5530, -16711936, 0);
			SetPlayerAttachedObject(playerid, 6, 2788, 1, 0.3109, 0.0309, -0.0249, 84.7999, -88.2000, -89.5000, 0.5860, 0.5490, 1.7079, 16777215, 0);
		}
		case 1361:
		{
			if(!(skin == 97)) return false;

			SetPlayerAttachedObject(playerid, 0, 635, 1, -0.3770, 0.1479, -0.0289, 89.0000, 162.3000, 174.9999, 0.3829, 0.1509, 0.6749, -1, 0);
			SetPlayerAttachedObject(playerid, 1, 635, 1, -0.4230, 0.0409, -0.0289, -86.9999, 166.1000, -177.0000, 0.4639, 0.1509, 0.9449, -1, 0);
			SetPlayerAttachedObject(playerid, 2, 19078, 2, 0.1049, 0.0080, 0.0389, 84.0000, -15.7000, 164.6000, 0.4439, 0.6009, 0.6349, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19793, 14, 0.3829, -0.2569, -0.0469, 15.2999, -6.1999, 89.1999, 1.4119, 0.3709, 0.4230, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 11747, 14, 0.3759, -0.5279, -0.1260, -74.9000, 0.0000, 0.0000, 1.2960, 1.3530, 1.8689, -1, 0);
			SetPlayerAttachedObject(playerid, 5, 18693, 14, 0.3540, 0.7929, 0.6589, 119.8999, 0.0000, 5.7999, 1.0000, 1.0000, 1.0000, 0, 0);
		}
		case 1362:
		{
			SetPlayerAttachedObject(playerid, 0, 18645, 2, 0.0560, 0.0250, 0.0010, 88.6000, 91.1000, 0.0000, 1.1420, 1.0190, 1.0000, -1, -1);
			SetPlayerAttachedObject(playerid, 1, 18645, 1, 0.0000, -0.2010, 0.2660, 0.0000, 0.0000, 0.0000, 2.9280, 0.1080, 1.5020, -1, -1);
			SetPlayerAttachedObject(playerid, 2, 18645, 1, 0.0000, -0.2010, -0.2340, -174.1001, 0.0000, 0.0000, 2.9280, 0.1080, 1.5020, -1, -1);
		}
		case 1363:
		{
			SetPlayerAttachedObject(playerid, 0, 18977, 2, 0.0560, 0.0250, 0.0010, 88.6000, 91.1000, 0.0000, 1.1420, 1.0190, 1.0000, -1, -1);
			SetPlayerAttachedObject(playerid, 1, 18977, 1, 0.0000, -0.2010, 0.2660, 0.0000, 0.0000, 0.0000, 2.9280, 0.1080, 1.5020, -1, -1);
			SetPlayerAttachedObject(playerid, 2, 18977, 1, 0.0000, -0.2010, -0.2340, -174.1001, 0.0000, 0.0000, 2.9280, 0.1080, 1.5020, -1, -1);
		}
		case 1364:
		{
			SetPlayerAttachedObject(playerid, 0, 18978, 2, 0.0560, 0.0250, 0.0010, 88.6000, 91.1000, 0.0000, 1.1420, 1.0190, 1.0000, -1, -1);
			SetPlayerAttachedObject(playerid, 1, 18978, 1, 0.0000, -0.2010, 0.2660, 0.0000, 0.0000, 0.0000, 2.9280, 0.1080, 1.5020, -1, -1);
			SetPlayerAttachedObject(playerid, 2, 18978, 1, 0.0000, -0.2010, -0.2340, -174.1001, 0.0000, 0.0000, 2.9280, 0.1080, 1.5020, -1, -1);
		}
		case 1365:
		{
			SetPlayerAttachedObject(playerid, 0, 18979, 2, 0.0560, 0.0250, 0.0010, 88.6000, 91.1000, 0.0000, 1.1420, 1.0190, 1.0000, -1, -1);
			SetPlayerAttachedObject(playerid, 1, 18979, 1, 0.0000, -0.2010, 0.2660, 0.0000, 0.0000, 0.0000, 2.9280, 0.1080, 1.5020, -1, -1);
			SetPlayerAttachedObject(playerid, 2, 18979, 1, 0.0000, -0.2010, -0.2340, -174.1001, 0.0000, 0.0000, 2.9280, 0.1080, 1.5020, -1, -1);
		}
		case 1366:
		{
			SetPlayerAttachedObject(playerid, 0, 19518, 2, 0.0939, -0.0119, 0.0020, 0.0000, 0.0000, 0.0000, 0.8439, 0.8809, 0.8000, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 18978, 1, 0.0389, 0.0289, 0.0000, 6.3000, -90.8999, -9.4000, 1.3529, 1.5239, 2.2310, -1, 16777215);
			SetPlayerAttachedObject(playerid, 2, 19516, 1, -0.0240, -0.1930, 0.2070, -56.0999, 0.0000, 0.0000, 2.9319, 1.7560, 0.3459, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19516, 1, -0.0020, -0.1930, -0.2479, 54.2999, 0.0000, 0.0000, 2.9319, 1.7560, 0.3459, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19314, 13, 0.3560, 0.0019, -0.0489, 71.4999, 0.0000, 96.3999, 0.2949, 0.3440, 0.7080, -16711681, 0);
			SetPlayerAttachedObject(playerid, 5, 19348, 13, 0.1249, -0.0450, -0.0280, 0.0000, 85.8000, 0.0000, 0.5699, 0.5549, 0.6729, -16711681, 0);
			SetPlayerAttachedObject(playerid, 6, 1240, 13, 0.7260, -0.0439, 0.0159, 0.0000, -95.8000, 80.3000, 0.3569, 0.1710, 0.4429, -16711681, 0);
		}
		case 1367:
		{
			if(!(skin == 96)) return false;
		
			SetPlayerAttachedObject(playerid, 0, 701, 2, -0.0199, 0.0750, 0.0000, -7.6999, 1.1000, -13.3000, 0.2360, 0.1299, 0.1770, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19085, 2, 0.1019, 0.0280, 0.0040, -81.1000, 93.7000, 167.3999, 1.0000, 1.0000, 1.0000, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 19610, 14, 0.2590, 0.0049, 0.0060, 9.0999, -9.2999, -88.9000, 2.5480, 0.6999, 2.6649, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 2590, 14, -0.0359, 0.0099, -0.0329, 2.7999, -96.6999, -73.6000, 0.3829, 0.4359, 0.2249, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19078, 15, 0.0869, 0.0619, 0.0790, 117.1000, 87.8000, 57.0999, 0.6159, 0.7089, 0.7069, 0, 0);
		}
		case 1368:
		{
			SetPlayerAttachedObject(playerid, 1, 19200, 1, -0.1939, -0.0049, 0.1040, 94.0999, -178.1000, -173.6999, 5.7839, 2.4639, 2.5679, 0, 0);
			SetPlayerAttachedObject(playerid, 0, 19200, 1, -0.1629, 0.0139, -0.1249, -99.8000, -178.1000, -173.6999, 5.4299, 2.2039, 2.3589, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 19200, 1, 0.0820, -0.0010, 0.0000, -4.4000, 176.4999, 176.6000, 5.7839, 1.5939, 2.1279, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 11741, 1, 0.4619, 0.1789, -0.0469, 79.1999, 0.0000, -59.7999, 0.2479, 0.4869, 1.0000, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 11741, 1, 0.4619, 0.1789, 0.0609, 95.7999, -5.9999, -117.7000, 0.2479, 0.4869, 1.0000, 0, 0);
		}
		case 1369:
		{
			if(!(skin == 189)) return false;

			SetPlayerAttachedObject(playerid, 0, 19352, 2, 0.1399, 0.0099, 0.0000, -0.6999, 87.1999, 90.3999, 0.8920, 0.8690, 1.4720, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 1017, 1, -0.2779, -0.1169, 0.1219, 86.4000, -172.6999, 88.7999, 2.2149, 2.6709, 1.1089, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 1007, 1, -0.2709, -0.1350, -0.1459, 86.4000, -172.6999, 88.7999, 2.2149, 2.6709, 1.1089, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 324, 14, 0.2820, -0.1239, 0.0000, 96.8999, -1.3999, 3.3000, 0.8750, 0.7490, 2.1169, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 18717, 14, 0.3499, -0.0499, 0.0709, 101.3999, -5.6999, -1.3999, 0.2020, 0.1569, 0.2680, 0, 0);
		}
		case 1370:
		{
			if(!(skin == 162)) return false;

			SetPlayerAttachedObject(playerid, 0, 19202, 2, 0.0790, 0.0930, 0.0320, -75.3999, 167.7999, -2.1999, 1.3009, 1.5659, 0.7709, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 2769, 2, 0.0839, 0.0370, -0.0209, 84.3000, 120.2999, 143.0999, 0.7440, 1.1149, 1.6299, 0xFFFF0000, 255);
			SetPlayerAttachedObject(playerid, 2, 2769, 1, 0.0249, 0.0859, 0.0120, 175.7999, -76.4000, 114.3998, 0.8489, 2.3710, 2.5329, 0xFFFF0000, 255);
			SetPlayerAttachedObject(playerid, 3, 2769, 1, 0.1969, -0.0179, 0.1159, -140.3000, -179.1999, -49.3001, 1.0060, 1.6109, 1.8199, 0xFFFF0000, 255);
			SetPlayerAttachedObject(playerid, 4, 8548, 1, 0.2339, 0.0179, 0.0340, 44.4000, 47.0000, 0.0000, 0.4779, 0.4609, 0.4699, -1, 0);
			SetPlayerAttachedObject(playerid, 5, 1603, 1, 0.0370, 0.1199, -0.0729, -118.3999, 109.4999, -9.9999, 0.0670, 0.3230, 0.2790, 0xFFFF0000, 0);
		}
		case 1371:
		{
			SetPlayerAttachedObject(playerid, 0, 18978, 1, 0.2889, 0.1359, 0.3490, 0.0000, 86.2999, -11.8000, 4.1660, 2.8220, 4.9510, 0xFFFF0000, 16777215);
			SetPlayerAttachedObject(playerid, 1, 18978, 1, 0.3359, 0.0000, -0.3699, 0.0000, 86.2999, 171.5999, 4.1660, 2.8220, 4.9510, 0xFFFF0000, 16777215);
			SetPlayerAttachedObject(playerid, 2, 1240, 1, 0.3269, 0.0389, -0.0060, 5.9000, 88.3000, -17.3000, 2.5829, 7.9499, 2.4530, 0xFFFF0000, 0);
			SetPlayerAttachedObject(playerid, 3, 19517, 1, 0.3160, -0.6019, 0.9610, -54.9000, -16.0000, 44.7999, 10.0579, 5.3779, 1.1069, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19517, 1, 0.3849, -0.9150, -0.7709, 37.0999, 10.3999, 47.5999, 10.0579, 5.3779, 1.1069, 0, 0);
		}
		case 1372:
		{
			SetPlayerAttachedObject(playerid, 0, 19578, 2, 0.1990, -0.0120, -0.0679, -93.5999, 5.0000, 74.7000, 1.0970, 2.4959, 3.1189, -16711936, 0);
			SetPlayerAttachedObject(playerid, 1, 11722, 2, 0.1309, -0.0040, 0.0000, 0.0000, 87.3999, 7.0000, 1.1679, 1.4650, 0.2049, -1, 0);
			SetPlayerAttachedObject(playerid, 2, 18893, 1, -0.4729, -0.2440, 0.0000, 89.3000, 12.7999, -89.5999, 2.5970, 9.8959, 0.6219, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19314, 2, 0.0140, -0.0089, 0.0000, 0.0000, 0.0000, -137.6000, 0.5719, 0.4009, 0.1340, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 1228, 14, 0.3489, -0.0919, 0.0159, 0.0000, 0.0000, 0.0000, 0.4090, 1.5359, 0.1189, 16777215, 0);
			SetPlayerAttachedObject(playerid, 5, 18718, 14, 0.1220, 2.0000, 0.1089, 91.1000, 3.8999, -1.1000, 1.0000, 1.0000, 2.0519, 0, 0);
			SetPlayerAttachedObject(playerid, 6, 18718, 14, 0.0850, -2.1639, 0.2329, -93.0999, 3.8999, -1.1000, 1.0000, 1.0000, 2.0519, 0, 0);
		}
		case 1373:
		{
			if(!(skin == 292)) return false;

			SetPlayerAttachedObject(playerid, 0, 339, 13, 0.2039, 0.0239, -0.0659, 165.4000, 86.5998, 27.6999, 0.8989, 0.4120, 0.4210, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 339, 13, 0.1940, -0.0130, -0.0609, 73.1001, 98.9998, 82.3999, 0.8989, 0.4120, 0.4329, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 339, 13, 0.1940, 0.0329, -0.0659, 116.5001, 76.2999, 82.3999, 0.8989, 0.4120, 0.4329, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 339, 14, 0.1529, -0.0319, 0.0560, -55.7000, 77.0998, 71.6998, 0.8989, 0.4120, 0.4210, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 339, 14, 0.1550, -0.0279, 0.0500, -14.6000, 78.3998, 20.1998, 0.8989, 0.4120, 0.4210, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 339, 14, 0.1550, -0.0139, 0.0630, -67.4000, 70.5998, 73.6997, 0.8989, 0.4120, 0.4210, 0, 0);
		}
		case 1374:
		{
			if(!(skin == 128)) return false;

			SetPlayerAttachedObject(playerid, 0, 1240, 2, 0.0780, 0.0650, 0.0000, 0.0000, 90.6000, 0.0000, 0.4090, 1.0000, 0.0650, -1, -1);
			SetPlayerAttachedObject(playerid, 1, 677, 1, 0.0650, -0.0820, 0.0000, 20.3000, 0.5000, -4.1000, 1.0000, 0.0000, 1.0000, -1, -1);
			SetPlayerAttachedObject(playerid, 2, 677, 1, 0.0650, -0.0820, 0.0000, 156.9999, 0.5000, -0.2000, 1.0000, 0.0000, 1.0000, -1, -1);
			SetPlayerAttachedObject(playerid, 3, 677, 2, 0.0000, 0.0000, 0.0000, 0.0000, 82.0000, 0.0000, 0.6530, 0.0000, 0.5830, -1, -1);
		}
		case 1375:
		{
			if(!(skin == 217)) return false;

			SetPlayerAttachedObject(playerid, 0, 11727, 1, 0.1739, 0.1509, -0.0010, -179.1999, 0.0000, 16.0000, 0.1679, 0.1739, 0.1539, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19555, 13, 0.2379, -0.0149, 0.0000, 6.6999, -82.5999, -94.5999, 0.8600, 0.7519, 1.2839, 0, 0);
			SetPlayerAttachedObject(playerid, 2, 18952, 13, 0.0000, 0.0179, -0.0079, 0.0000, -7.1999, 7.5999, 1.1899, 0.6069, 0.7179, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 18952, 13, 0.1399, 0.0149, 0.0030, 0.0000, 178.7999, 7.5999, 1.7389, 0.6459, 0.6389, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19804, 13, 0.2539, -0.0070, 0.0270, -77.3999, 99.5000, -102.9001, 0.5589, 2.5840, 1.3309, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 19804, 13, 0.1879, 0.0309, 0.0010, -147.5998, 93.5000, 54.7998, 0.5309, 2.1680, 1.6009, 0, 0);
		}
		case 1376:
		{
			if(!(skin == 62)) return false;

			SetPlayerAttachedObject(playerid, 0, 19064, 2, 0.1019, 0.0289, 0.0130, -2.5999, 84.0999, 96.8999, 1.1269, 1.1009, 1.3119, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19348, 13, 0.3169, -0.8069, -0.0399, 90.7000, -176.1999, 0.0000, 1.6079, 1.4249, 1.7790, -256, 0);
			SetPlayerAttachedObject(playerid, 2, 19064, 1, -0.1489, 0.1849, 0.0130, -94.0999, 47.5999, -173.8000, 2.4499, 3.4600, 3.4530, 0, 0);
			SetPlayerAttachedObject(playerid, 3, 19064, 4, 0.0710, -0.0419, 0.1039, -142.9000, -7.5000, -172.2999, 2.4499, 1.5430, 2.0580, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 19064, 3, 0.0710, -0.0320, -0.0909, -0.7000, -7.5000, -172.2999, 2.4499, 1.5430, 2.0580, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 19064, 1, -0.5090, 0.0039, -0.0040, -94.0999, 81.1999, -173.8000, 1.2899, 3.9160, 7.0389, 0, 0);
			SetPlayerAttachedObject(playerid, 6, 19064, 1, -0.3549, 0.1519, -0.0040, -94.0999, 130.3998, 5.4998, 2.3079, 3.5320, 6.8949, 0, 0);
		}
		case 1377:
		{
			SetPlayerAttachedObject(playerid, 0, 19063, 2, 0.0989, 0.0000, 0.0160, 0.0000, -99.4000, 0.0000, 0.7990, 0.5500, 0.6019, -1, 0);
			SetPlayerAttachedObject(playerid, 1, 19063, 2, 0.3429, 0.0029, -0.2159, 0.0000, -65.2000, 0.0000, 0.2380, 0.1709, 0.1749, -1, 0);
			SetPlayerAttachedObject(playerid, 2, 19063, 2, 0.2779, 0.0000, 0.2939, 0.0000, -127.0000, 0.0000, 0.2289, 0.1719, 0.1899, -1, 0);
			SetPlayerAttachedObject(playerid, 3, 1974, 2, 0.0230, 0.2169, -0.0149, 0.0000, -4.9999, 0.0000, 2.0190, 1.4929, 2.9730, -1, 0);
			SetPlayerAttachedObject(playerid, 4, 2061, 2, 0.1409, 0.2349, 0.0149, -91.3999, 3.1000, 81.8999, 0.4359, 0.5509, 0.0669, -16777216, 0);
			SetPlayerAttachedObject(playerid, 5, 18948, 2, 0.0729, 0.2540, 0.0049, 12.9000, 85.1999, 94.4000, 0.9299, 0.5629, 0.4650, 0, 0);
			SetPlayerAttachedObject(playerid, 6, 2689, 1, -0.0289, 0.0549, -0.0019, 0.0000, 89.8000, 176.5999, 1.3789, 4.1639, 1.0989, 16777215, -256);
		}
		case 1378:
		{
			SetPlayerAttachedObject(playerid, 0, 19063, 2, 0.0989, 0.0000, 0.0160, 0.0000, -99.4000, 0.0000, 0.7990, 0.5500, 0.6019, -1, 0);
			SetPlayerAttachedObject(playerid, 1, 19063, 2, 0.3429, 0.0029, -0.2159, 0.0000, -65.2000, 0.0000, 0.2380, 0.1709, 0.1749, -1, 0);
			SetPlayerAttachedObject(playerid, 2, 19063, 2, 0.2779, 0.0000, 0.2939, 0.0000, -127.0000, 0.0000, 0.2289, 0.1719, 0.1899, -1, 0);
			SetPlayerAttachedObject(playerid, 3, 1974, 2, 0.0230, 0.2169, -0.0149, 0.0000, -4.9999, 0.0000, 2.0190, 1.4929, 2.9730, -1, 0);
			SetPlayerAttachedObject(playerid, 4, 2061, 2, 0.1409, 0.2349, 0.0149, -91.3999, 3.1000, 81.8999, 0.4359, 0.5509, 0.0669, -16777216, 0);
			SetPlayerAttachedObject(playerid, 5, 18948, 2, 0.0729, 0.2540, 0.0049, 12.9000, 85.1999, 94.4000, 0.9299, 0.5629, 0.4650, 0, 0);
			SetPlayerAttachedObject(playerid, 6, 2689, 1, -0.0289, 0.0549, -0.0019, 0.0000, 89.8000, 176.5999, 1.3789, 4.1639, 1.0989, 16777215, 0xFFFF0000);
		}
		case 1379:
		{
			SetPlayerAttachedObject(playerid, 1, 19063, 2, 0.3429, 0.0029, -0.2159, 0.0000, -65.2000, 0.0000, 0.2380, 0.1709, 0.1749, -1, 0);
			SetPlayerAttachedObject(playerid, 0, 19063, 2, 0.0989, 0.0000, 0.0160, 0.0000, -99.4000, 0.0000, 0.7990, 0.5500, 0.6019, -1, 0);
			SetPlayerAttachedObject(playerid, 2, 19063, 2, 0.2779, 0.0000, 0.2939, 0.0000, -127.0000, 0.0000, 0.2289, 0.1719, 0.1899, -1, 0);
			SetPlayerAttachedObject(playerid, 3, 1974, 2, 0.0230, 0.2169, -0.0149, 0.0000, -4.9999, 0.0000, 2.0190, 1.4929, 2.9730, -1, 0);
			SetPlayerAttachedObject(playerid, 4, 2061, 2, 0.1409, 0.2349, 0.0149, -91.3999, 3.1000, 81.8999, 0.4359, 0.5509, 0.0669, -16777216, 0);
			SetPlayerAttachedObject(playerid, 5, 18948, 2, 0.0729, 0.2540, 0.0049, 12.9000, 85.1999, 94.4000, 0.9299, 0.5629, 0.4650, 0, 0);
			SetPlayerAttachedObject(playerid, 6, 2689, 1, -0.0289, 0.0549, -0.0019, 0.0000, 89.8000, 176.5999, 1.3789, 4.1639, 1.0989, 16777215, -16711936);
		}
		case 1380:
		{
			if(!(skin == 68)) return false;

			SetPlayerAttachedObject(playerid, 0, 19063, 2, 0.0719, 0.0409, 0.0309, 0.0000, 0.0000, 0.0000, 0.0329, 0.1319, 0.0589, 0, -16777216);
			SetPlayerAttachedObject(playerid, 1, 19063, 2, 0.0719, 0.0409, -0.0209, 0.0000, 0.0000, 0.0000, 0.0319, 0.1319, 0.0649, 0, -16777216);
			SetPlayerAttachedObject(playerid, 2, 19314, 2, 0.1089, 0.0610, -0.0009, 177.6999, 2.0999, -130.4999, 0.4539, 0.3579, 0.1509, 0xFFFF0000, 0);
			SetPlayerAttachedObject(playerid, 3, 19624, 13, 0.3249, 0.0000, -0.0089, 0.0000, -10.0000, -4.5999, 0.2389, 1.0129, 0.1070, 0, 0);
		}
		case 1381:
		{
			if(!(skin == 206)) return false;

			SetPlayerAttachedObject(playerid, 0, 19117, 2, 0.0929, 0.0089, 0.0069, 170.1000, 4.0999, 10.5999, 2.7359, 1.1360, 1.3409, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19177, 2, 0.0849, 0.1119, -0.0430, 63.9000, -10.8999, 11.9999, 0.9149, 1.7610, 1.5789, -16777216, 0);
			SetPlayerAttachedObject(playerid, 2, 19177, 2, 0.0780, 0.1209, 0.0309, 103.6999, -10.8999, 0.0000, 0.9149, 1.7610, 1.5789, -16777216, 0);
			SetPlayerAttachedObject(playerid, 3, 19793, 14, 0.4210, -0.2290, -0.1349, 38.2000, -4.9999, -76.8999, 2.4689, 0.4529, 0.2669, 0, 0);
			SetPlayerAttachedObject(playerid, 4, 18936, 1, 0.0619, 0.1330, -0.0109, -2.7000, 0.0000, 170.6999, 2.2899, 0.9639, 2.2189, 0, 0);
			SetPlayerAttachedObject(playerid, 5, 11716, 14, 0.6849, -0.6029, -0.3790, 39.6000, -8.7999, -80.8000, 11.9559, 0.9739, 2.8770, 0, 0);
		}
		case 1382:
		{
			if(!(skin == 83)) return false;

			SetPlayerAttachedObject(playerid, 0, 1111, 1, 0.2040, -0.0580, 0.0110, 88.9000, 0.0000, -88.4000, 3.8600, 2.0920, 2.2710, -1, -1);
			SetPlayerAttachedObject(playerid, 1, 1112, 1, 0.1880, -0.0920, -0.0220, 11.5000, 5.3000, -89.2000, 0.1460, 4.3910, 5.2540, -1, -1);
			SetPlayerAttachedObject(playerid, 2, 1112, 1, 0.1700, -0.0550, -0.0460, 149.6000, 5.4000, -89.2000, 0.1460, 4.3910, 5.2540, -1, -1);
		}
		case 1383:
		{
			SetPlayerAttachedObject(playerid, 0, 19274, 1, -0.2980, -0.2680, -0.2919, -134.2998, 0.0000, 90.9000, 1.9649, 5.2719, 0.4139, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19274, 1, -0.3000, -0.2630, 0.2879, 135.8002, 0.0000, 92.3000, 1.9649, 5.2719, 0.4139, 0, 0);
		}
		case 1384:
		{
			SetPlayerAttachedObject(playerid, 0, 19555, 13, 0.4790, -0.0099, 0.0000, -5.6999, -72.7999, -68.9999, 1.6689, 3.4190, 3.7400, 0, 0);
			SetPlayerAttachedObject(playerid, 1, 19556, 14, 0.4790, -0.0159, 0.0000, 5.4000, -107.7999, -96.5999, 1.6689, 3.4190, 3.7400, 0, 0);
		}
	}

	return true;
}

stock GetPlayerAura(playerid)
{
	new count;

	for(new i; i < 6; i++) 
		count += AksSlot[playerid][1][i];

	if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) 
		RemovePlayerAttachedObject(playerid, 9);

	if(pTemp[playerid][tCustomAuraObject] != INVALID_OBJECT_ID) 
		DestroyObject(pTemp[playerid][tCustomAuraObject]); 

	if(count >= 70 && GetPlayerLauncher(playerid))
	{
		pTemp[playerid][tCustomAuraObject] = CreateObject(SettingData[playerid][sdCustomAura] ? 11776 : 15995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachObjectToPlayer(pTemp[playerid][tCustomAuraObject], playerid, -0.025000, 0.035000, -0.870000, 0.500000, -90.000000, -90.000000);
		Streamer_Update(playerid);
	}

	else if(count >= 50 && SettingData[playerid][sdAccessoryFire]) 
		SetPlayerAttachedObject(playerid, 9, 1276, 1, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.3900);	

	return count;
}

stock SetPlayerSkinEx(playerid, skin)
{
	if(PI[playerid][pSkin][0] == skin && GetStripeInfo(Inventory[playerid][3][InventoryMaxSlot-1], 2) < 2)
		sendPlayerCustom_packet(playerid, GetStripeInfo(Inventory[playerid][3][InventoryMaxSlot-1], 2) == 0 ? 163 : 91, Inventory[playerid][3][InventoryMaxSlot-1] > 0 ? 128 : 0);

	SetPlayerSkin(playerid, skin > 311 ? GetSkinInfo(skin) : skin);
	SetInventorySkin(playerid);
	
	for(new i; i < 8; i++)
	{
		if(IsPlayerAttachedSlotUsedEx(playerid, i))
			RemovePlayerAttachedObject(playerid, i);
		
		AksDel[playerid][i] = 0;
		
		if(AksSlot[playerid][0][i]) 
			SetPlayerAccessory(playerid, AksSlot[playerid][0][i], i);
		
		UpdateInventoryAcessory(playerid, i);
	}
	
	SetPlayerChatBubble(playerid, "Переоделся", COLOR_GREEN, 10.0, 5000);
	if(PlayerModification[playerid]) SetPlayerAccessory(playerid, ItemsInfo[PlayerModification[playerid]][itemModel], -1);
	if(PlayerLie{playerid}) ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 1, 1, 1, 0, 1);
	if(Int_GetPlayerData(playerid, "P_SEAT_STATUS")) ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, false, false, false, true, 0, true);
	return 1;
}

stock createPlayerAccessory(forplayerid = INVALID_PLAYER_ID, playerid, index, bool:create, boneid = -1, modelid = -1, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 0.0, Float:fScaleY = 0.0, Float:fScaleZ = 0.0, materialcolor1 = 0, materialcolor2 = 0)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
		PR_UINT8, 220,
		PR_UINT8, 155,
		PR_UINT16, playerid,
		PR_UINT32, index,
		PR_BOOL, create);

	if(create)
		BS_WriteValue(bs,
			PR_UINT32, boneid,
			PR_UINT32, modelid,
			PR_FLOAT, fOffsetX,
			PR_FLOAT, fOffsetY,
			PR_FLOAT, fOffsetZ,
			PR_FLOAT, fRotX,
			PR_FLOAT, fRotY,
			PR_FLOAT, fRotZ,
			PR_FLOAT, fScaleX,
			PR_FLOAT, fScaleY,
			PR_FLOAT, fScaleZ,
			PR_UINT32, materialcolor1,
			PR_UINT32, materialcolor2);

	if(forplayerid == INVALID_PLAYER_ID)
		PR_SendPacketToPlayerStream(bs, playerid), PR_SendPacketEx(bs, playerid);

	else PR_SendPacketEx(bs, forplayerid);
		
    return BS_Delete(bs), pTemp[playerid][tCustomAccessory][index] = create;
}

stock IsPlayerAttachedSlotUsedEx(playerid, slot)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slot) or pTemp[playerid][tCustomAccessory][slot]) return true;
	return false;
}

stock RemovePlayerAttachedObjectEx(playerid, slot)
{
	if(!IsPlayerAttachedSlotUsedEx(playerid, slot))
		return false;

	if(pTemp[playerid][tCustomAccessory][slot])
		createPlayerAccessory(INVALID_PLAYER_ID, playerid, slot, false);

	else 
		RemovePlayerAttachedObject(playerid, slot);

	return true;
}

stock SetAttachToSkin(playerid, setobject, itemid, slot)
{
	if(PlayerModification[playerid]) 
		return false;

	if(ItemsInfo[itemid][itemAccesotySlot] != -1 && ItemsInfo[itemid][itemCustom] == 2)
		AksDel[playerid][slot] = createPlayerAccessory(INVALID_PLAYER_ID, playerid, slot, true, AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_data[playerid][slot][2] : ItemsInfo[itemid][itemAttachInfo][0], setobject, AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][0] : ItemsInfo[itemid][itemAttachPosition][0], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][1] : ItemsInfo[itemid][itemAttachPosition][1], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][2] : ItemsInfo[itemid][itemAttachPosition][2], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][3] : ItemsInfo[itemid][itemAttachPosition][3], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][4] : ItemsInfo[itemid][itemAttachPosition][4], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][5] : ItemsInfo[itemid][itemAttachPosition][5], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][6] : ItemsInfo[itemid][itemAttachPosition][6], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][7] : ItemsInfo[itemid][itemAttachPosition][7], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][8] : ItemsInfo[itemid][itemAttachPosition][8], AksSlot[playerid][3][slot] ? AksMassive[AksSlot[playerid][3][slot]][AksColorAttach] : ItemsInfo[itemid][itemAttachInfo][1], AksSlot[playerid][3][slot] ? AksMassive[AksSlot[playerid][3][slot]][AksColorAttach] : ItemsInfo[itemid][itemAttachInfo][2]);

	else AksDel[playerid][slot] = SetPlayerAttachedObject(playerid, slot, setobject, AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_data[playerid][slot][2] : ItemsInfo[itemid][itemAttachInfo][0], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][0] : ItemsInfo[itemid][itemAttachPosition][0], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][1] : ItemsInfo[itemid][itemAttachPosition][1], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][2] : ItemsInfo[itemid][itemAttachPosition][2], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][3] : ItemsInfo[itemid][itemAttachPosition][3], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][4] : ItemsInfo[itemid][itemAttachPosition][4], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][5] : ItemsInfo[itemid][itemAttachPosition][5], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][6] : ItemsInfo[itemid][itemAttachPosition][6], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][7] : ItemsInfo[itemid][itemAttachPosition][7], AksSlot[playerid][5][slot] && playerEditAccessories_data[playerid][slot][0] == AksSlot[playerid][0][slot] && GetPlayerSkin(playerid) == playerEditAccessories_data[playerid][slot][1] ? playerEditAccessories_attach[playerid][slot][8] : ItemsInfo[itemid][itemAttachPosition][8], AksSlot[playerid][3][slot] ? AksMassive[AksSlot[playerid][3][slot]][AksColorAttach] : ItemsInfo[itemid][itemAttachInfo][1], AksSlot[playerid][3][slot] ? AksMassive[AksSlot[playerid][3][slot]][AksColorAttach] : ItemsInfo[itemid][itemAttachInfo][2]);

	if(!AksDel[playerid][slot])
		SCMF(playerid, COLOR_GREY, "Аксессуар '%s', не будет отображаться на этом скине!", ItemsInfo[itemid][itemName]);

	return true;
}

public: MysqlCheckPlayerBanIP(playerid)
{
	if(cache_num_rows() > 0)
	{
	    SCM(playerid, COLOR_RED, "Данный IP заблокирован на нашем сервере!");
		return Kick(playerid);
	}
	return true;
}

stock TogglePlayerMap(playerid, toggle)
{
	if(toggle)
	{
		if(!ShowMap[playerid])
		{
			TextDrawShowForPlayer(playerid, Map[0]);
			TextDrawShowForPlayer(playerid, Map[1]);
			TextDrawShowForPlayer(playerid, Map[2]);
			TextDrawShowForPlayer(playerid, Map[3]);
			ShowMap[playerid] = true;
			foreach(new i: Player)
			{
				if(!IsPlayerConnected(i)) continue;
				TextDrawShowForPlayer(playerid, PlayerDraw[i]);
				TextDrawHideForPlayer(playerid, StatsDraw[i]);
			}
			SCM(playerid, COLOR_LIME, "Вы открыли карту штата San Andreas. Чтобы закрыть её нажмите {FF9900}ESC");
			SelectTextDraw(playerid, 0xFFFFFFAA);
		}
	}
	else
	{
	    foreach(new i: Player)
		{
			TextDrawHideForPlayer(playerid, PlayerDraw[i]);
			TextDrawHideForPlayer(playerid, StatsDraw[i]);
	   	}
  		TextDrawHideForPlayer(playerid, Map[0]);
		TextDrawHideForPlayer(playerid, Map[1]);
		TextDrawHideForPlayer(playerid, Map[2]);
		TextDrawHideForPlayer(playerid, Map[3]);
		ShowMap[playerid] = false;
	}
	return 1;
}

stock CheckMapCords(Float:x, Float:y, &Float:X, &Float:Y)
{
    if(y < -3000) y = -3000;
	else if(y > 3000) y = 3000;
	if(x < -3000) x = -3000;
	else if(x > 3000) x = 3000;
	if(y > -3000 && y < 3000 && x > -3000 && x < 3000)
	{
		if(y < 0) Y = 207 + 224 * -y / 3000;
		else if(y >= 0) Y = 207 - 224 * y / 3000;
		if(x < 0) X = 318 - -x * 320 / 3000;
		else if(x >= 0) X = 318 + x * 320 / 3000;
	}
	return 1;
}

stock CreatePlayerMapDraws(playerid)
{
    if(NeedDell[playerid]==false)
    {
        if(IsACop(playerid) || IsAArmy(playerid))
        {
			new Float:x, Float:y, Float:z, Float:Pos_X, Float:Pos_Y;
   			GetPlayerPos(playerid, x, y, z);
			CheckMapCords(x, y, Pos_X, Pos_Y);

			new ss=0;
			foreach(new i: Player)
			{
				if(!IsPlayerConnected(i)) continue;
				if(ShowMap[i])
				{
				    if(PI[playerid][pMember][0]==PI[i][pMember][0])
				    {
				        if(ss==0)
				        {
					        new team = GetTeamID(playerid);
						 	PlayerDraw[playerid] = TextDrawCreate(Pos_X, Pos_Y, "-");
							TextDrawFont(PlayerDraw[playerid], 1);
							TextDrawLetterSize(PlayerDraw[playerid], 0.49, 2.9);
							TextDrawColor(PlayerDraw[playerid], TeamColors[team][0]);
							TextDrawSetOutline(PlayerDraw[playerid], 1);

							f(global_str, 50, "ID: %i ~y~ %s", playerid, PN(playerid));
							StatsDraw[playerid] = TextDrawCreate(Pos_X+10, Pos_Y+8, global_str);
							TextDrawFont(StatsDraw[playerid], 1);
							TextDrawLetterSize(StatsDraw[playerid], 0.16, 0.6);
							TextDrawColor(StatsDraw[playerid], 0xFFFFFFFF);
							TextDrawSetOutline(StatsDraw[playerid], 1);
							ss++;
						}
						TextDrawShowForPlayer(i, PlayerDraw[playerid]);
						TextDrawShowForPlayer(i, StatsDraw[playerid]);
						NeedDell[playerid]=true;
					}
				}
			}
		}
	}
	return 1;
}

stock DestroyPlayerMapDraws(playerid)
{
	if(NeedDell[playerid]==true)
	{
	    TextDrawHideForAll(PlayerDraw[playerid]);
		TextDrawDestroy(PlayerDraw[playerid]);
		TextDrawHideForAll(StatsDraw[playerid]);
		TextDrawDestroy(StatsDraw[playerid]);
		NeedDell[playerid]=false;
	}
	return 1;
}

stock UpdateMap(playerid)
{
	if(pTemp[playerid][tAuthorized])
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		{
		    if(GetPlayerInterior(playerid)==0 && GetPlayerVirtualWorld(playerid)==0)
			{
			    DestroyPlayerMapDraws(playerid);
				CreatePlayerMapDraws(playerid);
			}
		}
	}
	return 1;
}

stock GetPlayerSpeed(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}

stock InstallTun(vehicleid, id, deleted)
{
	if(GetVehicleID(vehicleid) == -1) 
		return true;
	
	new model = CarInfo[GetVehicleID(vehicleid)][cInvCell][id];

	DestroyDynamicObjectModel(vehicleid, TunInvCar[vehicleid][0][id], ItemsInfo[model][itemModel]);
	
	if(deleted) 
		return DestroyDynamicObjectModel(vehicleid, TunInvCar[vehicleid][0][id], TunInvCar[vehicleid][1][id]), TunInvCar[vehicleid][0][id] = TunInvCar[vehicleid][1][id] = 0;

	TunInvCar[vehicleid][0][id] = CreateDynamicObject(ItemsInfo[model][itemModel], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1,-1,-1, 300.0, 300.0);
	TunInvCar[vehicleid][1][id] = ItemsInfo[model][itemModel];
	
	AttachDynamicObjectToVehicle(TunInvCar[vehicleid][0][id], vehicleid, CarInfo[GetVehicleID(vehicleid)][TunPosX][id],CarInfo[GetVehicleID(vehicleid)][TunPosY][id], CarInfo[GetVehicleID(vehicleid)][TunPosZ][id], CarInfo[GetVehicleID(vehicleid)][TunRotX][id], CarInfo[GetVehicleID(vehicleid)][TunRotY][id], CarInfo[GetVehicleID(vehicleid)][TunRotZ][id]);
	return 1;
}

stock LoadObjects()
{
	mysql_query(mysql, "SELECT * FROM `bh_objects`");
	TOTALOBJECTS = cache_num_rows();

    if(TOTALOBJECTS)
    {
    	for(new i; i < TOTALOBJECTS; i++)
    	{
			cache_get_value_name_int(i, "ID", BH_Object[i][objBaseID]);
    		cache_get_value_name_int(i, "Model", BH_Object[i][objModel]);
    		cache_get_value_name_float(i, "PosX", BH_Object[i][objPosX]);
    		cache_get_value_name_float(i, "PosY", BH_Object[i][objPosY]);
    		cache_get_value_name_float(i, "PosZ", BH_Object[i][objPosZ]);
    		cache_get_value_name_float(i, "RotX", BH_Object[i][objRotX]);
    		cache_get_value_name_float(i, "RotY", BH_Object[i][objRotY]);
    		cache_get_value_name_float(i, "RotZ", BH_Object[i][objRotZ]);
    		cache_get_value_name_int(i, "HouseID", BH_Object[i][objHouseID]);
    		cache_get_value_name_int(i, "BizID", BH_Object[i][objBizID]);
			cache_get_value_name_int(i, "ItemID", BH_Object[i][objItemID]);
			cache_get_value_name_int(i, "World", BH_Object[i][objWorld]);
			cache_get_value_name_int(i, "Interior", BH_Object[i][objInterior]);
    		BH_Object[i][objID] = CreateDynamicObject(BH_Object[i][objModel], BH_Object[i][objPosX], BH_Object[i][objPosY], BH_Object[i][objPosZ], BH_Object[i][objRotX], BH_Object[i][objRotY], BH_Object[i][objRotZ], BH_Object[i][objWorld], BH_Object[i][objInterior]);
    	}
    }
}

stock IsNums(const string[])
{
    for(new i = 0, j = strlen(string); i < j; i++)
        if(string[i] > '9' || string[i] < '0') return 0;

    return 1;
}

@__MineProgressGrow(mineid);
@__MineProgressGrow(mineid)
{
    MineInfo[mineid][mineStatus] = true;
	MineInfo[mineid][mineObject] = CreateDynamicObject(3930, MineInfo[mineid][minePosX], MineInfo[mineid][minePosY], MineInfo[mineid][minePosZ] - 1.2, -5.499997, 0.000000, -26.200012, -1, -1);
	SetDynamicObjectMaterial(MineInfo[mineid][mineObject], 0, 12871, "ce_ground01", "cs_rockdetail2", 0);
	switch(random(50))
	{
	    case 0..15: MineInfo[mineid][minePoroda] = 5;
	    case 16..25: MineInfo[mineid][minePoroda] = 4;
	    case 26..35: MineInfo[mineid][minePoroda] = 3;
	    case 36..45: MineInfo[mineid][minePoroda] = 2;
	    case 46..49: MineInfo[mineid][minePoroda] = 1;
	}

	new
		string[75 - 2 + 8];
    f(string, sizeof(string), "Месторождение ресурсов\n{73B461}Для добычи ископаемого");
    MineInfo[mineid][mineLabel] = CreateDynamic3DTextLabel(string, -1, MineInfo[mineid][minePosX], MineInfo[mineid][minePosY], MineInfo[mineid][minePosZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
    return 1;
}

stock StopAudioStreamForPlayerFix(playerid)
{
	if(!bumreader{playerid}) return false;
	StopAudioStreamForPlayer(playerid);
	bumreader{playerid} = false;
	return DeletePVar(playerid, "Bumboxing");
}
stock PlayAudioStreamForPlayerFix(playerid, url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0)
{
	if(bumreader{playerid}) return false;
	PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	bumreader{playerid} = true;
	return true;
}

stock BoomDelete(playerid)
{
	SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);

	DestroyDynamicObject(bumboxobject[playerid]), bumboxobject[playerid] = boombox[playerid] = RadioID[playerid] = 0;
	DestroyDynamic3DTextLabel(bumbox3D[playerid]);
	if(IsValidDynamicArea(area_boombox[playerid])) DestroyDynamicArea(area_boombox[playerid]);

	foreach(new i: Player)
	{
		if(IsPlayerInRangeOfPoint(i, 30.0, BumBoxPos[playerid][0], BumBoxPos[playerid][1], BumBoxPos[playerid][2]))
			StopAudioStreamForPlayerFix(i);
	}
	return StopAudioStreamForPlayerFix(playerid);
}

stock GetXYInFrontOfPlayer(playerid, &Float:q, &Float:w, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, q, w, a);
    GetPlayerFacingAngle(playerid, a);
    q += (distance * floatsin(-a, degrees));
    w += (distance * floatcos(-a, degrees));
    return 1;
}

stock GetXYInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:angle, Float:distance)
{
    new Float:z;
	GetVehiclePos(vehicleid, x, y, z);
    x += (distance * floatsin(-angle, degrees));
    y += (distance * floatcos(-angle, degrees));
}

stock GetXYInFrontOfObject(objectid, &Float:x, &Float:y, Float:angle, Float:distance)
{
    new Float:z;
	GetDynamicObjectPos(objectid, x, y, z);
    x += (distance * floatsin(-angle, degrees));
    y += (distance * floatcos(-angle, degrees));
}

stock LoadVehicles()
{
	//army ls
	CreateTeamVehicle(TEAM_ARMY,1,433,2796.5266,-2496.8662,13.9776,90.3614,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,433,2796.4177,-2492.3276,14.0364,93.8404,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2779.5984,-2447.4360,13.4833,179.3648,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2788.1213,-2447.8513,13.4795,182.5593,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2796.5056,-2463.7385,13.4744,0.9013,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2788.7822,-2463.7356,13.6392,0.1850,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2781.6511,-2464.5125,13.5236,2.0303,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,433,2796.1270,-2415.8147,13.8713,90.1646,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,433,2796.4626,-2420.4980,13.8710,90.5001,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,548,2778.2288,-2351.2422,15.2747,180.8769,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,431,2779.9485,-2508.6799,13.7760,90.1165,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,500,2768.6787,-2528.3557,13.7429,90.9090,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2767.0381,-2535.8367,13.6601,91.2952,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2761.3728,-2548.3899,13.6594,0.7985,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,470,2757.1416,-2548.0508,13.6713,0.0874,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,487,2743.0557,-2522.8801,29.9789,89.6559,44,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_ARMY,1,487,2743.0391,-2540.8938,29.9631,90.7937,44,1,RES_CAR_TIME);
	//
   	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.5748, -1693.0895, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.5333, -1696.9873, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.4792, -1704.1243, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.5447, -1700.5864, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,582, 1668.4730, -1708.0327, 15.5849, 88.9162, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,488, 1668.1779, -1714.1947, 20.5305, 24.2905, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,445, 1646.1866, -1709.1534, 20.3465, 269.8665, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,445, 1646.2244, -1705.6493, 20.3519, 271.5544, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIO,1,426, 1646.2777, -1702.4156, 20.2413, 269.6584, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1959.5035, 584.8771, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1953.4304, 584.8774, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1950.3208, 584.8360, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1947.2937, 584.8109, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1941.2451, 584.8881, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,582, -1938.3971, 584.8671, 35.0797, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,585, -1932.2831, 585.4850, 34.6767, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,585, -1929.3038, 585.4374, 34.6767, 180.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOSF,1,488, -1904.0132, 437.0794, 35.7320, 358.0000, 5,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2674.3630, 1167.9310, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2669.0906, 1167.9784, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2664.0469, 1168.0015, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2659.0396, 1168.0638, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2653.9482, 1168.0232, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,582, 2643.9392, 1167.9216, 10.7936, 359.0000, 17,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RADIOLV,1,488, 2645.1099, 1210.6233, 27.2443, 19.5005, 17,1,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_MERIALS, 1, 3207, 1493.5492, -1232.9856, 14.0166, 89.9505, 2, 2, RES_CAR_TIME, "number_goverement", randomizeNumber(4));
	CreateTeamVehicle(TEAM_MERIALS, 1, 3251, 1488.0349, -1241.9122, 14.2514, 359.9887, 2, 2, RES_CAR_TIME, "number_goverement", randomizeNumber(4));
	CreateTeamVehicle(TEAM_MERIALS, 1, 3251, 1492.0427, -1241.9213, 14.2760, 0.2464, 2, 2, RES_CAR_TIME, "number_goverement", randomizeNumber(4));
	CreateTeamVehicle(TEAM_MERIALS, 1, 3234, 1496.0347, -1241.9362, 14.2989, 0.0165, 2, 2, RES_CAR_TIME, "number_goverement", randomizeNumber(4));
	CreateTeamVehicle(TEAM_MERIALS, 1, 3234, 1500.0369, -1241.9445, 14.3203, 0.0195, 2, 2, RES_CAR_TIME, "number_goverement", randomizeNumber(4));
	CreateTeamVehicle(TEAM_MERIALS, 1, 3234, 1504.4333, -1241.9774, 14.3304, 0.1597, 2, 2, RES_CAR_TIME, "number_goverement", randomizeNumber(4));
	CreateTeamVehicle(TEAM_MERIALS, 1, 6611, 1502.5161, -1232.9858, 15.0278, 90.0189, 2, 2, RES_CAR_TIME, "number_goverement", randomizeNumber(4));
	CreateTeamVehicle(TEAM_MERIALS, 1, 487, 1496.0646, -1319.2361, 23.8105, 271.1159, 2, 2, RES_CAR_TIME);

	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2068.5571, -84.3098, 35.1,180.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2072.8169, -84.3098, 35.1,180.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2068.5403, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2072.6775, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2076.7915, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2080.7405, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2084.6289, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LICENSERS,1,426, -2088.6370, -127.1712, 36.0,0.0, 3,3,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2544.0093, 586.9008, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2543.9749, 592.9135, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2543.9980, 598.9249, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2543.9631, 604.8779, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,416, -2544.0520, 610.7438, 14.4942, 90.0000, 6,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,426, -2572.4500, 627.6297, 14.1200, 270.0000, 2,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,426, -2572.5378, 632.8685, 14.1200, 270.0000, 2,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,426, -2572.7861, 647.4091, 14.1200, 270.0000, 2,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICSF,1,426, -2572.7981, 658.3743, 14.1200, 270.0000, 2,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1593.6510, 1840.2689, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1597.9547, 1840.3273, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1602.2014, 1840.3251, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1606.3016, 1840.2615, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,416, 1610.6777, 1840.2601, 10.9372, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,426, 1620.2689, 1850.2357, 10.4923, 180.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_MEDICLV,1,426, 1616.0072, 1850.2614, 10.4923, 180.0000, 7,1,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_BANK,1,428, 1407.0927, -1804.5696, 13.5566, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,428, 1407.0927, -1801.4896, 13.5566, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,428, 1407.0927, -1798.4095, 13.5566, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,533, 1407.4656, -1783.6151, 13.2766, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,533, 1407.4656, -1786.7612, 13.2766, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,580, 1407.1735, -1792.4543, 13.2166, 90.0000, 36,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BANK,1,487, 1535.4736,-1788.3174,33.6588,180.8290, 36,0,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_M4C,1,416, 1124.1484, -1328.4871, 13.6256, 360.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,416, 1110.8409, -1328.4871, 13.6256, 360.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,416, 1097.7611, -1328.4871, 13.6256, 360.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,416, 1136.3181, -1344.0048, 13.8266, 270.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,416, 1136.3181, -1338.6698, 13.8266, 270.0000, 3,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_M4C,1,426, 1178.1130,-1339.1445,13.6469,270.4954, 3,1,RES_CAR_TIME);

	RMCars[0] = CreateTeamVehicle(TEAM_RM,1,579, 984.4582, 1747.0344, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[1] = CreateTeamVehicle(TEAM_RM,1,579, 984.4969, 1742.9897, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[2] = CreateTeamVehicle(TEAM_RM,1,579, 984.4497, 1738.9713, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[3] = CreateTeamVehicle(TEAM_RM,1,409, 950.2493, 1743.6547, 8.2832, 179.4013, 0,0,RES_CAR_TIME);
	RMCars[4] = CreateTeamVehicle(TEAM_RM,1,580, 984.4694, 1719.4099, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[5] = CreateTeamVehicle(TEAM_RM,1,580, 984.3997, 1723.1316, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[6] = CreateTeamVehicle(TEAM_RM,1,580, 984.5228, 1727.1056, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
	RMCars[7] = CreateTeamVehicle(TEAM_RM,1,468, 947.9976, 1724.3361, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
	RMCars[8] = CreateTeamVehicle(TEAM_RM,1,468, 948.0338, 1725.7334, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
	RMCars[9] = CreateTeamVehicle(TEAM_RM,1,468, 947.8561, 1722.8571, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
	RMCars[10] = CreateTeamVehicle(TEAM_RM,1,421, 971.9404, 1769.3865, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
	RMCars[11] = CreateTeamVehicle(TEAM_RM,1,421, 971.8877, 1778.1040, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
	RMCars[12] = CreateTeamVehicle(TEAM_RM,1,421, 971.9247, 1787.2513, 8.5141, 180.0000, 0,0,RES_CAR_TIME);

	YakuzaCars[0] = CreateTeamVehicle(TEAM_YAKUZA,1,409, -2446.0315,133.0861,34.7638,272.9593, 0,0,RES_CAR_TIME);
	YakuzaCars[1] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2442.7847,141.9793,34.8783,269.9984, 0,0,RES_CAR_TIME);
	YakuzaCars[2] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2434.5728,141.2890,34.8992,269.8872, 0,0,RES_CAR_TIME);
	YakuzaCars[3] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2452.3250,149.9029,34.9176,0.0004, 0,0,RES_CAR_TIME);
	YakuzaCars[4] = CreateTeamVehicle(TEAM_YAKUZA,1,505, -2462.1074,154.1508,35.0971,0.0017, 0,0,RES_CAR_TIME);
	YakuzaCars[5] = CreateTeamVehicle(TEAM_YAKUZA,1,505, -2461.9407,164.1662,35.1050,0.1147, 0,0,RES_CAR_TIME);
	YakuzaCars[6] = CreateTeamVehicle(TEAM_YAKUZA,1,550, -2452.7681,167.5494,34.8352,359.5991, 0,0,RES_CAR_TIME);
	YakuzaCars[7] = CreateTeamVehicle(TEAM_YAKUZA,1,550, -2452.8779,158.3322,34.8348,359.5431, 0,0,RES_CAR_TIME);
	YakuzaCars[8] = CreateTeamVehicle(TEAM_YAKUZA,1,530, -2465.9961,174.6347,34.8529,229.8133, 0,0,RES_CAR_TIME);

	LCNCars[0] = CreateTeamVehicle(TEAM_LCN,1,409, 1472.1443, 2778.5149, 10.2784, 0.7317, 72,0,RES_CAR_TIME);
	LCNCars[1] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2818.3545, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
	LCNCars[2] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2822.7544, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
	LCNCars[3] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2827.2556, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
	LCNCars[4] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2831.7986, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
	LCNCars[5] = CreateTeamVehicle(TEAM_LCN,1,445, 1495.9521, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[6] = CreateTeamVehicle(TEAM_LCN,1,445, 1500.3752, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[7] = CreateTeamVehicle(TEAM_LCN,1,445, 1504.7489, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[8] = CreateTeamVehicle(TEAM_LCN,1,445, 1509.1300, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[9] = CreateTeamVehicle(TEAM_LCN,1,445, 1513.6281, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
	LCNCars[10] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2830.3674, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
	LCNCars[11] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2834.5801, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
	LCNCars[12] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2838.8606, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
	LCNCars[13] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.1582, 2761.9631, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
	LCNCars[14] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.3872, 2760.5962, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
	LCNCars[15] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.5973, 2759.4551, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
    LCNCars[16] = CreateTeamVehicle(TEAM_LCN,1,545, 1491.3921, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
    LCNCars[17] = CreateTeamVehicle(TEAM_LCN,1,545, 1486.9521, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
    LCNCars[18] = CreateTeamVehicle(TEAM_LCN,1,545, 1482.4321, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_SFPD,1,4803, -1572.4406, 726.4545, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,4803, -1572.4470, 730.6609, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,4802, -1572.3829, 738.8925, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,4802, -1572.3927, 743.1780, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,4803, -1572.3944, 722.4703, -5.5320, 90.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,523, -1600.0791, 695.4734, -5.7520, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,523, -1608.4055, 695.5201, -5.7520, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,523, -1612.2900, 695.5635, -5.7520, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,523, -1616.7273, 695.5120, -5.7520, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,599, -1621.0616, 694.3557, -5.1920, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,599, -1628.7274, 694.2426, -5.1920, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,599, -1632.6772, 694.2825, -5.1920, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,525, -1640.1775, 682.1177, -5.3920, 270.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,525, -1640.4412, 678.0385, -5.3920, 270.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,525, -1640.4945, 673.9135, -5.3920, 270.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,525, -1640.5835, 669.6574, -5.3920, 270.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,601, -1584.3610, 750.1661, -5.5720, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,601, -1588.7886, 750.3608, -5.5720, 180.0000, 1,15,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_SFPD,1,497, -1679.8936, 705.5067, 30.7259, 47.0480, 1,15,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_FBI,1,415, -2439.8962,501.1184,29.6982,212.9155, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,415, -2444.0156,510.2275,29.6827,190.2442, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,415, -2429.8555,515.0704,29.6838,213.7434, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,490, -2425.9792,518.5383,30.0720,221.8816, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,490, -2422.3567,521.5685,30.0282,224.3069, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,490, -2419.1121,524.8293,30.0198,228.8295, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,490, -2416.6768,528.4944,30.0656,238.0834, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,560, -2415.0549,531.9811,29.6054,247.5954, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,560, -2413.6753,535.8023,29.5869,257.3448, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,560, -2413.4897,539.7662,29.6041,268.3483, 0,0,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_FBI,1,497, -2479.0791,522.6041,51.2348,90.5490, 0,0,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_LVPD,1,525, 2256.0334, 2444.7419, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,525, 2260.3821, 2444.7588, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4802, 2251.8115, 2460.4656, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4802, 2260.4568, 2460.4656, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4803, 2269.1169, 2460.4917, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4803, 2273.6724, 2460.4656, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,4803, 2277.9561, 2460.4656, 10.6057, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,601, 2269.1628, 2445.0547, 10.4757, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,601, 2273.4543, 2445.2400, 10.4757, 360.0000, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,523, 2251.5850, 2475.3740, 10.2757, 180.2271, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,523, 2256.1052, 2475.3740, 10.2757, 180.2271, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,523, 2269.0781, 2475.3740, 10.2635, 180.2271, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,523, 2273.1946, 2475.3740, 10.2635, 180.2271, 7,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LVPD,1,497, 2342.6707, 2472.6902, 39.0477, 176.9832, 7,1,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_LSPD,1,4802, 1574.3335, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4802, 1578.5250, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4802, 1583.3390, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4803, 1587.3566, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4803, 1591.5785, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,4803, 1595.4098, -1711.3812, 6.0469, 0.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1672.7449, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1675.3800, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1676.9354, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1679.3687, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,523, 1546.8660, -1680.9663, 5.4869, 90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,599, 1528.5093, -1687.8639, 6.4869, -90.0000, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,599, 1528.5093, -1683.7883, 6.4869, -90.5400, 0,1,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,497, 1552.8477, -1610.5408, 14.0469, 90.0000, 0,1,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_LSPD,1,525,1526.6047,-1643.5181,5.6177,179.7686, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,525,1530.5017,-1643.5320,5.6177,181.1458, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,427,1534.7737,-1643.4572,5.6181,180.4515, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_LSPD,1,427,1538.6315,-1643.4637,5.6177,181.2151, 1,16,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_RCPD,1,4802,614.4224,-596.8713,16.9544,270.9448, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,4802,613.7486,-601.6826,16.9514,270.0360, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,4803,615.7883,-591.2003,16.9545,269.4611, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,4803,616.6922,-584.9808,16.9492,269.8435, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,599,621.4668,-605.8457,17.3525,270.5647, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,599,621.4632,-610.5536,17.3580,270.5844, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,523,636.0141,-611.2366,15.9026,358.7955, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,523,633.9724,-611.4705,15.9080,0.4383, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,523,631.4586,-611.6922,15.9061,359.6254, 1,16,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_RCPD,1,599,637.3110,-542.4899,17.3446,179.4867, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,599,637.2239,-559.2595,17.3484,179.3916, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,523,638.1916,-611.2606,15.8589,3.0959, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,497,  614.5333, -549.9294, 23.1049, 215.0000, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,525, 669.0193, -620.7942, 16.1555, 360.0000, 1,16,RES_CAR_TIME);
    CreateTeamVehicle(TEAM_RCPD,1,525, 665.1553, -620.8279, 16.1555, 360.0000, 1,16,RES_CAR_TIME);

	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2188.4895, -2348.0159, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 482, -2190.0908, -2321.6782, 30.6460, 51.1400, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 413, -2192.9907, -2325.3586, 30.5650, 51.1400, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2187.4729, -2346.7527, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2186.4050, -2345.5525, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2208.3918, -2322.3496, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2212.6418, -2318.9141, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);
	CreateTeamVehicle(TEAM_BIKERS,1, 463, -2210.6152, -2320.5139, 30.0650, 200.0000, 0, 3,RES_CAR_TIME);

	J_AddStaticVehicleEx(473, -733.0216, -2033.5288, 5.2137, 114.0388, -1, -1, 100);
	J_AddStaticVehicleEx(473, -731.3942, -2020.5775, 5.2138, 60.6919, -1, -1, 100);

	CreateJobVehicle(JOB_PIZZA,448, 686.0101,-1567.8412,13.8424,179.3411, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 687.9260,-1568.1115,13.8423,187.1912, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 690.6421,-1567.9688,13.8416,174.7638, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 694.3134,-1567.9852,13.8404,173.1375, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 695.6133,-1568.0505,13.8410,179.2073, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 696.9920,-1567.8237,13.8421,176.1919, 44, 44, RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1471,2242.9351,10.4204,94.2715, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1877,2241.4224,10.4204,92.1274, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1769,2240.3376,10.4192,91.8053, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1233,2236.6389,10.4198,88.3445, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1876,2235.4705,10.4207,92.8598, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1750.6255,2233.9568,10.4141,87.8024, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1750.7683,2227.1809,10.4182,93.9982, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.1205,2225.6960,10.4197,91.3303, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.2262,2224.5493,10.4200,87.7106, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.2468,2220.2297,10.4206,90.0917, 3, 3,  RES_CAR_TIME);
	CreateJobVehicle(JOB_PIZZA,448, 1751.6473,2218.6179,10.4188,93.0859, 3, 3,  RES_CAR_TIME);
	
	new productmin = CreateJobVehicle(3, 456, 1635.9636,2303.1755,10.5882, 90.0, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 1636.4476,2312.3328,10.5619, 90.0, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 1636.9746,2358.4033,10.9714, 93.0, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 1636.0696,2340.4041,10.5931, 90.0, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, -28.2670,47.2077,3.3078, 249.8801, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, -30.8757,39.9725,3.3071, 250.2568, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, -33.3484,33.0556,3.3084, 250.1479, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, -36.0660,25.2636,3.3049, 241.9240, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 900.8983,-1207.9601,17.1330,178.4953, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 867.2451,-1207.6951,17.1313,179.5756, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 831.0262,-1208.3289,17.1309,180.2903, 43, 1, RES_CAR_TIME);
	CreateJobVehicle(3, 456, 866.2861,-1245.2487,15.0633,270.7383, 43, 1, RES_CAR_TIME);
	new productmax =  CreateJobVehicle(3, 456, 866.9750,-1255.2280,15.0910,273.5939, 43, 1, RES_CAR_TIME);

	for(new i = productmin; i <= productmax; i++)
	{
		CarProductText[i-productmin] = CreateDynamic3DTextLabel("{D78787}Развозчик продуктов\n{FFFFFF}Загружено: 0 товара",COLOR_GOLD,0,0,3.0,15.0,INVALID_PLAYER_ID,i);
		VehicleInfo[i][vListID] = i-productmin;
	}
	
	GroveCar[0] = CreateTeamVehicle(TEAM_GROOVE,1, 600, 2485.0903, -1680.8488, 13.2813, 19.7400, 86, 86,RES_CAR_TIME);
	GroveCar[1] = CreateTeamVehicle(TEAM_GROOVE,1, 600, 2488.3083, -1680.7385, 13.2813, 19.7400, 86, 86,RES_CAR_TIME);
	GroveCar[2] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2506.0962, -1676.6655, 13.2813, -35.0400, 86, 86,RES_CAR_TIME);
	GroveCar[3] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2508.0857, -1666.6547, 13.2813, 11.1000, 86, 86,RES_CAR_TIME);
	GroveCar[4] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2501.6204, -1657.3187, 13.2813, 54.4800, 86, 86,RES_CAR_TIME);
	GroveCar[5] = CreateTeamVehicle(TEAM_GROOVE,1, 478, 2498.6013, -1684.0957, 13.2813, 13.5600, 86, 86,RES_CAR_TIME);
	GroveCar[6] = CreateTeamVehicle(TEAM_GROOVE,1, 482, 2505.4092, -1694.1656, 14.2813, 0.0000, 86, 86,RES_CAR_TIME);

	VagosCar[0] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2771.5327, -1623.8390, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
	VagosCar[1] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2776.0544, -1623.9009, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
	VagosCar[2] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2780.4949, -1623.8438, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
	VagosCar[3] = CreateTeamVehicle(TEAM_VAGOS,1, 474, 2779.6228, -1603.3281, 10.8047, -125.0400, 6, 1,RES_CAR_TIME);
	VagosCar[4] = CreateTeamVehicle(TEAM_VAGOS,1, 474, 2785.9009, -1603.1583, 10.8047, -125.0400, 6, 1,RES_CAR_TIME);
	VagosCar[5] = CreateTeamVehicle(TEAM_VAGOS,1, 478, 2769.9705, -1615.0035, 10.8047, -90.0000, 6, 1,RES_CAR_TIME);
	VagosCar[6] = CreateTeamVehicle(TEAM_VAGOS,1, 482, 2769.9705, -1606.8324, 10.8047, -90.0000, 6, 1,RES_CAR_TIME);

	BallasCar[0] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 2003.6793, -1120.1661, 26.4723, 181.2332, 179, 179,RES_CAR_TIME);
	BallasCar[1] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 2008.8434, -1129.2593, 25.0132, 90.0000, 179, 179,RES_CAR_TIME);
	BallasCar[2] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 1985.5564, -1141.6482, 25.5184, 270.8255, 179, 179,RES_CAR_TIME);
	BallasCar[3] = CreateTeamVehicle(TEAM_BALLAS,1, 482, 1993.8208, -1141.5947, 25.3474, 270.0000, 179, 179,RES_CAR_TIME);
	BallasCar[4] = CreateTeamVehicle(TEAM_BALLAS,1, 419, 2001.6429, -1141.5061, 25.1574, 270.8112, 179, 179,RES_CAR_TIME);
	BallasCar[5] = CreateTeamVehicle(TEAM_BALLAS,1, 478, 1994.4465, -1095.7386, 24.9574, 344.2161, 179, 179,RES_CAR_TIME);
	BallasCar[6] = CreateTeamVehicle(TEAM_BALLAS,1, 478, 1998.7805, -1096.9128, 24.9574, 346.3077, 179, 179,RES_CAR_TIME);
	BallasCar[7] = CreateTeamVehicle(TEAM_BALLAS,1, 419, 2002.2770, -1097.8044, 24.9574, 345.6925, 179, 179,RES_CAR_TIME);
	BallasCar[8] = CreateTeamVehicle(TEAM_BALLAS,1, 468, 1988.2346, -1127.2072, 25.4664, 159.4789, 179, 179, RES_CAR_TIME);
	BallasCar[9] = CreateTeamVehicle(TEAM_BALLAS,1, 468, 1985.2548, -1127.1553, 25.5491, 161.5554, 179, 179, RES_CAR_TIME);


	CoronosCar[0] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2516.9424, -2005.0195, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
	CoronosCar[1] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2512.8218, -2004.6410, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
	CoronosCar[2] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2508.7004, -2004.2294, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
	CoronosCar[3] = CreateTeamVehicle(TEAM_CORONOS,1, 535, 2514.5210, -2014.6700, 13.2656, 90.0000, 2, 2,RES_CAR_TIME);
	CoronosCar[4] = CreateTeamVehicle(TEAM_CORONOS,1, 535, 2506.8916, -2014.6700, 13.2656, 90.0000, 2, 2,RES_CAR_TIME);
	CoronosCar[5] = CreateTeamVehicle(TEAM_CORONOS,1, 478, 2530.8352, -2007.6204, 13.6256, 89.5200, 2, 2,RES_CAR_TIME);
	CoronosCar[6] = CreateTeamVehicle(TEAM_CORONOS,1, 482, 2530.8257, -2011.7937, 13.6256, 89.5200, 2, 2,RES_CAR_TIME);

	RifaCar[0] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2177.5630, -1808.2943, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
	RifaCar[1] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2173.5139, -1808.3468, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
	RifaCar[2] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2169.4451, -1808.4357, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
	RifaCar[3] = CreateTeamVehicle(TEAM_RIFA,1, 439, 2172.6543, -1790.9640, 13.3516, -90.0000, 135, 135,RES_CAR_TIME);
	RifaCar[4] = CreateTeamVehicle(TEAM_RIFA,1, 439, 2165.4509, -1790.9640, 13.3516, -90.0000, 135, 135,RES_CAR_TIME);
	RifaCar[5] = CreateTeamVehicle(TEAM_RIFA,1, 478, 2190.1111, -1796.2930, 13.3516, 0.0000, 135, 135,RES_CAR_TIME);
	RifaCar[6] = CreateTeamVehicle(TEAM_RIFA,1, 482, 2190.1111, -1804.5145, 13.3516, 0.0000, 135, 135,RES_CAR_TIME);

	CarWolfs[0] = CreateTeamVehicle(TEAM_WOLFS,1, 475, 2461.7173, -1424.3177, 23.5287, 90.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[1] = CreateTeamVehicle(TEAM_WOLFS,1, 475, 2461.7173, -1413.2618, 23.5287, 90.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[2] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.4966, -1424.3262, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[3] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.6265, -1416.9812, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[4] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.7156, -1409.9048, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[5] = CreateTeamVehicle(TEAM_WOLFS,1, 518, 2518.3918, -1419.1108, 28.1375, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[6] = CreateTeamVehicle(TEAM_WOLFS,1, 518, 2518.4070, -1411.1537, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[7] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6436, -1402.2551, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[8] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6597, -1400.8583, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[9] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6648, -1399.6414, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[10] = CreateTeamVehicle(TEAM_WOLFS,1, 478, 2458.3862, -1407.9395, 23.7760, 90.0000, 37, 0,RES_CAR_TIME);
    CarWolfs[11] = CreateTeamVehicle(TEAM_WOLFS,1, 478, 2458.3862, -1419.0396, 23.7760, 90.0000, 37, 0,RES_CAR_TIME);
}

stock LoadOther()
{
	cr_spawn = CreateDynamic3DTextLabel(!"Центральный рынок {99CC00}\nПарковать{FFFFFF} авто на улице, запрещено!\nСпавн транспорта у рынка через 5 секунд!\nИспользуйте подземный паркинг!", 0xFFFFFFFF, 1113.5105, -1412.7322, 14.4744, 13.0000);
	Bitcoin3DText = CreateDynamic3DTextLabel(!"[ Операции с криптовалютой ]\n{ffffff}Сейчас в банке: 0 BTC\n\nБанк покупает 1 BTC за $-1\nБанк продаёт 1 BTC за $-1\n\n{cccccc}Нажмите N", 0xFFFF00FF, -2666.7024, 792.7377, 1500.9688, 10.0);
	//Квартиры
	for(new i; i < sizeof(LiftInfo); i++) UpdateLiftText(i,0,LiftPosition[LiftInfo[i][liftID]], -1);

	for(new i; i < sizeof(CarSellMarket); i++)
		f(global_str, 100, "{ffffff}Купить {FA5858}%s\n\n{cccccc}[ ALT ]", GetVehicleName(CarSellMarket[i][data_Models], true)),
		CreateDynamic3DTextLabel(global_str, 0x73B461FF, CarSellMarket[i][data_Position][0], CarSellMarket[i][data_Position][1], CarSellMarket[i][data_Position][2], 5.0000),
		CreateDynamicPickup(1239, 23, CarSellMarket[i][data_Position][0], CarSellMarket[i][data_Position][1], CarSellMarket[i][data_Position][2], 0),
		CarSellMarket[i][data_CarID] = AddStaticVehicleEx(CarSellMarket[i][data_Models], CarSellMarket[i][data_PositionCar][0], CarSellMarket[i][data_PositionCar][1], CarSellMarket[i][data_PositionCar][2], CarSellMarket[i][data_PositionCar][3], 0, 0, -1);

	// Кары люкс слет
	CarSletInfo[0] = slet_car_models[random ( sizeof(slet_car_models) )];
	CarSletInfo[1] = 28800 + gettime();

	// Двери для лифтов
	for(new i; i < sizeof(DoorLift); i++)
	{
		DoorLift[i] = CreateDynamicObject(DoorLiftInfo[i][doorModel], DoorLiftInfo[i][doorPos][0], DoorLiftInfo[i][doorPos][1], DoorLiftInfo[i][doorPos][2],
				DoorLiftInfo[i][doorPos][3], DoorLiftInfo[i][doorPos][4], DoorLiftInfo[i][doorPos][5], DoorLiftInfo[i][doorWorld], DoorLiftInfo[i][doorInterior]);
	}

	for(new i; i < max_trains; i++) TrainArea[i] = CreateDynamicCircle(TrainLocationPos[i][0], TrainLocationPos[i][1], 300.0, 0, 0, -1);
	
	BuildsInfo[0][blBuildText] = CreateDynamic3DTextLabel("{23BA8F}Концертный зал{FFFFFF}\nВход: ALT\nЗдание: {EBA22D}Не арендовано", -1, 649.3248,-1353.8834,13.5470, 15.0);
    SetString(BuildsInfo[0][blArenderID],"The State");
	// ============= нефтивышки
	for(new s; s < 2; s++)
	{
		for(new i; i < (!s ? 8 : 17); i++)
		{
			CreateDynamicPickup(1559, 23, NeftPos[s][i][0], NeftPos[s][i][1], NeftPos[s][i][2], 0);
			NeftText[s][i] = CreateDynamic3DTextLabel("Нефтевышка", 0x4CD10FF, NeftPos[s][i][0], NeftPos[s][i][1], NeftPos[s][i][2], 10.0);
			UpdateNeftText(NeftBizID[s][i]);
		}
	}
	NeftPick[0] = CreateDynamicPickup(1239, 23, -2082.9087, 1343.1514, 7.0990, 0);
	NeftPick[1] = CreateDynamicPickup(1559, 23, -2072.3931, 1363.2417, 7.1016, 0);

	for(new i; i < sizeof(parking); i++)
	{
	    CreateDynamic3DTextLabel("Подземный паркинг\nВойти: {F7E352}ALT{FFFFFF}\nЗаехать: {F7E352}H", -1, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z] + 1.4, 20.0);
		CreateDynamicPickup(19134, 1, parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z], -1);
		Create3DTextLabel("Ворота\nВыход: {F7AA5A}ALT{FFFFFF}\nВыезд: {F7AA5A}H{FFFFFF}\n\nЛичные авто, которые припаркованы\n\
								 с помощью /park в этом месте, автоматически\nуклоняются от налога на транспорт!\n\n\
								 Любые автомобили, которые находятся на этой парковке,\n\
								 не исчезают при серверном или администрационном респавне.", -1, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z] + 1.0, 10.0, parking[i][pVWorld], 0);
		CreateDynamicPickup(19134, 1, parking[i][pExit_x], parking[i][pExit_y], parking[i][pExit_z], parking[i][pVWorld]);
		//Второй этаж паркинг
		Create3DTextLabel("Ворота\nВыход: {F7AA5A}ALT{FFFFFF}\nВыезд: {F7AA5A}H{FFFFFF}\n\nЛичные авто, которые припаркованы\n\
								 с помощью /park в этом месте, автоматически\nуклоняются от налога на транспорт!\n\n\
								 Любые автомобили, которые находятся на этой парковке,\n\
								 не исчезают при серверном или администрационном респавне.", -1, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z] + 1.0, 10.0, parking[i][pVWorld], 0);
		CreateDynamicPickup(19134, 1, parking[i][pVExit_x], parking[i][pVExit_y], parking[i][pVExit_z], parking[i][pVWorld]);
		gAreas[arParking][i] = CreateDynamicSphere(parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z], 3, -1, -1);
	}
	//
	for(new i; i < MAX_LEVEL_GARAGES; i++) CreateDynamic3DTextLabel("Ворота\nВыезд: {FAAC58}H\n{FFFFFF}Выход: {FAAC58}ALT", -1, GaragesInteriors[i][e_GARAGE_INTERIOR_X], GaragesInteriors[i][e_GARAGE_INTERIOR_Y], GaragesInteriors[i][e_GARAGE_INTERIOR_Z]+2.0, 10.0);
	//demorgan
    demorgan[0] = CreatePickup(19132, 1, -809.5127, 2799.1362, 1501.9896, -1);

	GetPizza[0] = CreatePickup(1318, 1,670.8947,-1575.9595,14.2514,-1);
	GetPizza[1] = CreatePickup(1318, 1,1752.4005,2214.5081,10.8203,-1);

	healthpd[0] = CreatePickup(1240, 1, -452.7586, 2219.2275, 1601.0859, -1);
	healthpd[1] = CreatePickup(1240, 1,-2521.3796,-641.3273,1327.9659, -1);
	healthpd[2] = CreatePickup(1240, 1,2352.32, 83.59, 1501.99, -1);
	healthpd[3] = CreatePickup(1240, 1,-2589.78, -1393.19, 1500.76, -1);
	healthpd[5] = CreatePickup(1240, 1,-2056.1763,2709.4063,1500.9766, -1);
	healthpd[6] = CreatePickup(1240, 1,-172.5682,1314.9355,1500.9888, -1);
	healthpd[7] = CreatePickup(1240, 1,-2665.65796,818.17340,1500.71143, -1);
	
	for(new i; i < sizeof(bandos); i++) CreateDynamic3DTextLabel("[ Однорукий бандит ]\n{ffffff}Автомат свободен", 0xF5BB1BFF, bandos[i][0], bandos[i][1], bandos[i][2], 0, 1);

	EnterSklad[0] = CreatePickup(1318,1,2729.3306,-2451.4917,17.5937,-1);
    EnterSklad[1] = CreatePickup(1318,1,455.93, 864.44, 1500.96,-1);
    EnterSklad[2] = CreatePickup(1318,1,251.3932,1838.8508,17.6562,-1);
    EnterSklad[3] = CreatePickup(1318,1,594.3306,1455.2648,1900.7979,-1);
    EnterSklad[4] = CreatePickup(1318,1,-1373.0448,499.0130,11.1953,-1);
    EnterSklad[5] = CreatePickup(1318,1,-1613.2837,-126.1334,1501.0859,-1);

    nalogoffise[0] = CreatePickup(19132,23,1530.7826,-1074.1027,25.0625,-1);
    nalogoffise[1] = CreatePickup(19132,23,1494.4149,1304.1705,1093.2891,1);

    EventLeave = CreatePickup(1318, 1, -2263.2837,192.0340,35.1641, 1);

	portpick[0] = CreatePickup(1559,1,2042.6489,-1958.4153,14.3989,-1);
    portpick[1] = CreatePickup(1559,1,2033.5723,-1958.2524,14.3989,-1);
    portpick[2] = CreatePickup(1559,1,2051.4802,-1958.2751,14.3989,-1);
    portpick[3] = CreatePickup(1559,1,2024.5681,-1958.1749,14.3989,-1);
    portpick[4] = CreatePickup(1559,1,2015.6310,-1958.1852,14.3989,-1);
	
	// ларьки пикапы и актерe

	ShopEatPick[0] = CreateDynamicPickup(2663,23,1771.0034,-1902.5177,13.5557, 0, 0);
	CreateDynamicPickup(2663,23,2405.9805,-1933.0472,13.5538, 0, 0);
	CreateDynamicPickup(2663,23,-103.7395,-310.0467,1.4297, 0, 0);
	CreateDynamicPickup(2663,23,1502.1321,-1279.6311,14.5651, 0, 0);
	CreateDynamicPickup(2663,23,1433.6545,-1738.7367,13.5469, 0, 0);
	CreateDynamicPickup(2663,23,1184.5985,-1315.1580,13.5720, 0, 0);
	CreateDynamicPickup(2663,23,1748.5256,-1922.6953,2001.0000, 0, 0);
	CreateDynamicPickup(2663,23,195.4181,-115.9060,1.5500, 0, 0);
	CreateDynamicPickup(2663,23,214.4591,-247.0783,1.9079, 0, 0);
	CreateDynamicPickup(2663,23,-2022.6366,460.3604,35.1723, 0, 0);
	CreateDynamicPickup(2663,23,1105.0247,1379.9026,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,1574.4995,1844.3917,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2030.1499,987.5954,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2327.8806,2420.2002,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2351.5396,2406.6335,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2536.7700,2137.0681,10.8203, 0, 0);
	CreateDynamicPickup(2663,23,2600.4695,1060.3147,10.8125, 0, 0);
	CreateDynamicPickup(2663,23,2244.9023,570.9419,7.7802, 0, 0);
	CreateDynamicPickup(2663,23,157.5782,-1812.6079,3.7416, 0, 0);
	CreateDynamicPickup(2663,23,2221.0222,-1149.9821,25.7730, 0, 0);
	CreateDynamicPickup(2663,23,1382.1482,-1804.9459,13.5469, 0, 0);
	CreateDynamicPickup(2663,23,-87.3811,100.6966,3.1172, 0, 0);
	CreateDynamicPickup(2663,23,-1290.5806,2366.1538,865.3589, 0, 0);
	CreateDynamicPickup(2663,23,-2399.1362,336.8928,35.1719, 0, 0);
	CreateDynamicPickup(2663,23,-2681.2913,584.9332,14.4531, 0, 0);
	CreateDynamicPickup(2663,23,-1984.5005,127.6157,27.6875, 0, 0);
	CreateDynamicPickup(2663,23,-1982.6625,174.4855,27.6799, 0, 0);
	CreateDynamicPickup(2663,23,-1549.8600,673.9366,7.1875, 0, 0);
	CreateDynamicPickup(2663,23,-1825.6996,-567.4372,16.4844, 0, 0);
	CreateDynamicPickup(2663,23,1143.7935,-1472.9805,15.7969, 0, 0);
	CreateDynamicPickup(2663,23,1123.9476,-1467.5033,15.7572, 0, 0);
	CreateDynamicPickup(2663,23,947.9772,1717.1001,8.8578, 0, 0);
	CreateDynamicPickup(2663, 23, 194.8092,-274.8752,1.5703, 0, 0);
	CreateDynamicPickup(2663, 23, -2690.4844,383.2209,4.3750, 0, 0);
	CreateDynamicPickup(2663, 23, 1522.8370,-1026.6055,23.8667, 0, 0);
	CreateDynamicPickup(2663, 23, 2826.4939,1290.6855,10.7672, 0, 0);
	CreateDynamicPickup(2663, 23, 1976.1765,-1979.1403,13.5469, 0, 0);
	CreateDynamicPickup(2663, 23, -63.1613,1207.8503,19.6959, 0, 0);
	CreateDynamicPickup(2663, 23, 1589.7191,-1288.5636,17.5130, 0, 0);
	ShopEatPick[1] = CreateDynamicPickup(2663,23,1460.0521,2783.0557,10.8203, 0, 0);

	ShopEatObj[0] = CreateDynamicObject(1340, 1976.180054, -1980.189941, 13.546900, 0.000000, 0.000000, 90.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1460.329956, 2784.800049, 10.812500, 0.000000, 0.000000, 258.789001, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 947.921021, 1719.160034, 8.851600, 0.000000, 0.000000, 272.652008, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2824.770020, 1290.680054, 10.765000, 0.000000, 0.000000, 0.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1143.170410, -1473.834839, 15.919396, 0.000000, 0.000000, 47.600002, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1123.405396, -1466.597168, 15.919396, 0.000000, 0.000000, -57.599998, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340,-1981.620, 174.636, 27.707, 0.000, 0.000, -169.400, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2244.239990, 571.760010, 7.850000, 0.000000, 0.000000, -47.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -1983.44, 127.66, 27.68,   0.00, 0.00, 180.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -2020.19, -91.12, 35.33,   0.00, 0.00, 181.58, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -104.79, -309.98, 1.43,   0.00, 0.00, 0.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1183.17, -1315.10, 13.59,   0.00, 0.00, 0.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1433.7545, -1739.7864, 13.6800,   0.0000, 0.0000, 90.0000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1502.14, -1278.58, 14.58,   0.00, 0.00, -90.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2405.02, -1933.97, 13.65,   0.00, 0.00, 46.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0// getto продавец хотдог
	CreateDynamicObject(1340,-88.370,101.050,3.230,-1.000,0.000,340.000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1104.78, 1380.93, 10.93,   360.00, 360.00, -83.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1575.50, 1844.07, 10.93,   360.00, 360.00, 164.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2351.41, 2405.59, 10.94,   360.00, 360.00, -273.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2599.42, 1060.38, 11.06,   360.00, 360.00, 0.24, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2029.71, 986.64, 10.94,   360.00, 360.00, 62.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -63.12, 1208.90, 19.80,   360.00, 360.00, 269.53, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 158.63, -1812.59, 3.87,   360.00, 360.00, 180.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1381.10, -1805.03, 13.66,   360.00, 360.00, 1.43, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2244.239990, 571.760010, 7.850000, 0.000000, 0.000000, -47.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 194.751007, -273.822998, 1.570300, 0.000000, 0.000000, 270.000000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1500.244263, -1628.786987, 13.368955, 0.000000, 0.000000, -152.599960, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2220.29, -1150.74, 25.87,   360.00, 360.00, 42.63, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 1771.74, -1903.27, 13.61,   0.00, 0.00, 130.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340,1521.9909668,-1025.0710449,23.9839993,0.0000000,0.0000000,297.7500000, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2115.75, 912.81, 10.88,   0.00, 0.00, 270.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, 2118.24, 912.81, 10.88,   0.00, 0.00, 270.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -2022.61, 459.31, 35.27,   360.00, 360.00, 90.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -1548.81, 673.91, 7.29,   360.00, 360.00, 180.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -2681.61, 583.93, 14.59,   360.00, 360.00, 69.98, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	CreateDynamicObject(1340, -2400.04, 337.43, 35.31,   360.00, 360.00, 331.00, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	ShopEatObj[1] = CreateDynamicObject(1340, -1826.43, -566.68, 16.61,   360.00, 360.00, 314.98, -1, -1, -1, STREAMER_OBJECT_SD, 100.0); // 0
	//

	RingCP = CreateDynamicCP(2520.0012,918.5114,11.0234, 1.0, -1, -1, -1,  5.0);
	HealSG[0] = CreatePickup(1241, 23, 1152.1946,-1303.6064,1019.4307, -1);
	HealSG[1] = CreatePickup(1318, 23, -1768.1641, -1992.0632, 1500.7856, -1);
	HealSG[2] = CreatePickup(1318, 23, 1147.9972,-1343.0070,13.6483, -1);
	HealSG[3] = CreatePickup(1241, 23, 1169.6074,-1333.3698,-0.8618, -1);
	HealSG[4] = CreatePickup(1239, 23, 1490.3748,1305.7142,1093.2964, 2);
	HealSG[5] = CreatePickup(1274, 23,1492.7451,1308.4236,1093.2927, 1);
	HealSG[6] = CreatePickup(1318, 23,-618.6426,-679.4822,1001.0859, -1);
	//HealSG[7] = CreatePickup(1318, 23,279.5766,-1619.0736,114.6778, -1);
	HealSG[9] = CreatePickup(1318, 23,2847.9468,-2519.4592,11.9786, -1);
	HealSG[10] = CreatePickup(1318, 23,2842.3452,-2523.9382,17.7489, -1);
	HealSG[11] = CreatePickup(1241, 23,462.35, 874.83, 1500.96, -1);
	HealSG[12] = CreatePickup(1318,23,1583.3033,-1637.5920,13.3905,-1);
	HealSG[13] = CreatePickup(1318,23,1583.3656,-1638.4817,13.3333,-1);
	HealSG[14] = CreatePickup(1318,23,216.7613,-247.8414,1.9079,-1);
	HealSG[15] = CreatePickup(1318,23,1289.0641,-1271.5160,13.5400,-1);
	HealSG[16] = CreatePickup(1318,23,1285.9365,-1270.2250,13.5939,-1);
	HealSG[17] = CreatePickup(1318,23,1287.2783,-1261.7417,20.6199,-1);
	HealSG[18] = CreatePickup(1239,23,-38.9923,173.5192,2.4297,-1);
	HealSG[19] = CreatePickup(1239,23,-83.2843,-302.1633,2.7646,-1);
	HealSG[20] = CreatePickup(1239,23,1969.3076,-1981.4128,13.5469,-1);
	HealSG[21] = CreatePickup(1239,23,1460.8505,-1743.3596,13.5469,-1);
	HealSG[22] = CreatePickup(1318,23,1165.4773,1346.2273,10.9219,-1);
	HealSG[23] = CreatePickup(1318,23,1165.4714,1344.7832,10.8125,-1);
	HealSG[24] = CreatePickup(1241, 23, 550.3827,1472.2921,1900.7980, -1);
	HealSG[25] = CreatePickup(1318,23,592.9380,1428.2743,1900.7980,-1);
	HealSG[26] = CreatePickup(1318,23,592.8829,1426.6675,1900.7980,-1);
	HealSG[27] = CreatePickup(1239, 1,2570.1045,-1281.3558,1044.1250, 11);
	HealSG[28] = CreatePickup(1239, 1,2570.1045,-1281.3558,1044.1250, 12);
	HealSG[29] = CreatePickup(1318,23,483.0550,246.8815,3197.7139,-1);
	HealSG[30] = CreatePickup(1318,23,474.5011,216.2406,3194.6360,-1);
	HealSG[31] = CreatePickup(1318,23,481.3205,216.2760,3194.6360,-1);
	HealSG[32] = CreatePickup(1318,23,461.6805,223.6825,3197.7139,-1);
	HealSG[33] = CreatePickup(1318,23,1593.2783,1724.0553,10.8203,-1);
	HealSG[34] = CreatePickup(2228,23,-77.9217,90.3327,3.1172,-1);
	HealSG[35] = CreatePickup(1274,23,-80.5815,82.6753,3.1096,-1);
	HealSG[36] = CreatePickup(954,23,-2034.3145,-114.1021,1035.1719,-1);
	HealSG[37] = CreatePickup(1318, 23 , 1547.6816,-1623.1069,13.3725,-1);
	HealSG[38] = CreatePickup(1318, 23 , 1547.7014,-1622.3954,13.5366,-1);
	HealSG[39] = CreatePickup(1318, 23 , 618.9825,-568.0446,26.1432,-1);
	HealSG[40] = CreatePickup(1239, 23 , 2365.59, 72.03, 1502.01,11);
	HealSG[41] = CreatePickup(1239, 1,1531.3723,1112.4895,1033.8420,-1);
	HealSG[42] = CreatePickup(1318, 1, 1310.0968,-1367.2446,13.5254,-1);
	HealSG[44] = CreatePickup(1318, 1, -2514.1074,-634.8470,1327.9960,-1);
	HealSG[45] = CreatePickup(1318, 1, -2467.6902,529.4441,51.0896,-1);
	HealSG[46] = CreatePickup(1318, 23, -2594.7959,642.3338,14.4531, -1);
	HealSG[47] = CreatePickup(1239, 1,2570.1045,-1281.3558,1044.1250, 13);
	HealSG[48] = CreatePickup(1241, 23, -1609.7928,-110.7104,1501.0859, -1);
	HealSG[49] = CreatePickup(1247, 1, -463.8202, 2216.9792, 1601.0859, -1);
	HealSG[50] = CreatePickup(1239, 23,-954.5001,-2350.5596,1701.0869, -1);
	HealSG[51] = CreatePickup(1239, 23,2327.74, 70.09, 1502.00, -1);
	HealSG[52] = CreatePickup(1239, 23,-2502.4258,-650.1299,1331.6520, -1);
	HealSG[53] = CreatePickup(1239, 23,583.2088,1433.3907,1904.2689, -1);
	HealSG[54] = CreatePickup(1239, 23,485.16, 849.70, 1500.96, -1);
	HealSG[55] = CreatePickup(1239, 23,-1587.6157,-121.8007,1501.0859, -1);
	HealSG[56] = CreatePickup(1239, 23,363.6908,153.9987,1025.7964, -1);
	HealSG[57] = CreatePickup(1239, 23,354.0459,170.0928,1025.7964, -1);
	HealSG[58] = CreatePickup(1318, 23,2761.0051, -2565.0754, 13.6281, -1);
	HealSG[59] = CreatePickup(1318, 23,2760.6651, -2566.2554, 13.6281, -1);
	HealSG[60] = CreatePickup(1318, 23,2755.5088, -2515.5393, 13.6281, -1);
	HealSG[61] = CreatePickup(1318, 23,2726.0520, -2521.9421, 29.8281, -1);
	HealSG[63] = CreatePickup(1241, 23, -1324.4010, 9.3590, 1601.0859, -1);
	HealSG[64] = CreatePickup(19133, 23, -1769.3776, -2019.0920, 1500.7853, -1);
	HealSG[65] = CreatePickup(19133, 23, -1312.6182, 20.8936, 1597.6073, -1);
	HealSG[66] = CreatePickup(1239, 23, -2083.3413, 2675.4199, 1500.9647, -1);
	HealSG[67] = CreatePickup(1239, 1, 1152.1932,-1305.5453,1019.4307, -1);
	HealSG[68] = CreatePickup(1310, 1, 1451.6128, -2285.0105, 13.5469, -1);
	HealSG[69] = CreatePickup(1310, 1, 1673.0103, 1447.5935, 10.7867, -1);
	HealSG[70] = CreatePickup(1310, 1, -1409.4084, -298.2005, 14.1484, -1);
	HealSG[71] = CreatePickup(1254, 1, 3.0257, 32.9454, 1199.5938, -1);
	HealSG[72] = CreatePickup(1318, 1, 2154.7354, 1493.4109, 10.8203, -1);
	HealSG[73] = CreatePickup(1318, 1, 2351.2886, 720.3787, 1500.9688, -1);
	HealSG[74] = CreatePickup(1242, 1, 295.20001220703, -38.299999237061, 1001.5, -1);
	HealSG[75] = CreatePickup(19133, 1, -1415.0663, 2081.2036, 1502.0225, -1);
	HealSG[76] = CreatePickup(19133, 1, -1426.0897, 2091.5784, 1508.2068, -1);
	HealSG[77] = CreatePickup(1272, 1, 544.7178, -587.9365, 23.0899, -1);
	HealSG[78] = CreatePickup(1318, 1, -2661.8655,785.9218,1500.9688, -1);
	HealSG[79] = CreatePickup(1318, 1, 1518.4906,-1777.8580,33.4269, -1);
	
	HealSG[82] = CreatePickup(1247, 1, -955.6700,-2358.0708,1701.0859, -1);
	HealSG[84] = CreatePickup(325, 1, 2350.7820,-1961.5228,1601.0859, 0);
	HealSG[85] = CreatePickup(1239, 1, -2682.5276,796.4670,1501.0259, -1);
	//Пикапы без GameTextForPlayer
	HealSG[86] = CreatePickup(1314, 1, 1542.2581,1112.4895,1033.8420, -1);
	HealSG[87] = CreatePickup(1274, 1, 665.9590, -567.7969, 1700.7394,-1);
	HealSG[88] = CreatePickup(19133, 1, 1079.0709, 937.4053, 1604.8663, -1);
	HealSG[89] = CreatePickup(1239, 23, 2000.4484, 1139.0625, 1038.6882, -1);
	HealSG[90] = CreatePickup(1318, 1, -2064.8579,2709.9797,1500.9766, -1);
	HealSG[91] = CreatePickup(1318, 1, 954.2499,1054.3884,1059.8274, -1);
	amybank = CreatePickup(1239, 2, -2064.8579,2709.9797,1500.9766, -1);

	Bar_CP[0] = CreatePickup(1274,23, 497.4280, -75.7883, 998.7578, -1);
	Bar_CP[1] = CreatePickup(1274,23, 499.7772, -20.6834, 1000.6797, -1);
	Bar_CP[2] = CreatePickup(1274,23 ,-2653.8188, 1407.3539, 906.2734, -1);
	Bar_CP[3] = CreatePickup(1274,23, 784.6830, 2514.6926, 1501.9751, -1);
	Bar_CP[5] = CreatePickup(1274,23, 461.3756, 209.5736, 3194.6460, -1);
	Bar_CP[6] = CreatePickup(1274,23, 2297.6724, -823.6151, 1407.1273, -1);
    Bar_CP[7] = CreatePickup(1274,23, 1978.2777, 1016.0410, 10.3906, -1);
    
	Eatery_CP[0] = CreateDynamicCP(1082.0736, 992.7753, 1600.9989, 1.0, -1, -1, -1, 5.0);
	Eatery_CP[1] = CreateDynamicCP(1544.7767, 1287.2882, 10.8475, 1.0, 5, 240, -1, 5.0);
	Eatery_CP[2] = CreateDynamicCP(-2039.4631,2673.7061,1500.0656,1.0,-1,-1,-1,5.0);
	Eatery_CP[3] = CreateDynamicCP(-2581.7578, -1370.5360, 1499.9574, 1.0, -1, -1, -1, 5.0);
	Eatery_CP[4] = CreateDynamicCP(-1322.6569, 20.1318, 1601.0859, 1.0, -1, -1, -1, 5.0);
	Eatery_CP[5] = CreateDynamicCP(1484.8135,-1771.4929,18.7929,1.0,-1,-1,-1,5.0);
	Eatery_CP[6] = CreateDynamicCP(-171.1462,1334.3427,1500.0656,1.0,-1,-1,-1,5.0);
	Eatery_CP[7] = CreateDynamicCP(1146.9917,-1543.7808,1010.2957,1.0,-1,-1,-1,5.0);
	Eatery_CP[8] = CreateDynamicCP(-461.3648,2207.2625,1600.5859,1.0,-1,-1,-1,5.0);

   
	HealExitPickup = CreateDynamicPickup(19132, 1, 1172.3636,-1306.0862,1019.4160, -1);
	EnterBankPickup = CreateDynamicPickup(1318, 23, 1481.055,-1772.040,18.796, 0);
	ExitBankPickup = CreateDynamicPickup(1318, 1, -2693.5984, 796.5676, 1500.9659, 1);

	FactoryClothes = CreatePickup(1275, 23, 2568.0, -1281.5, 1044.12, -1);

	Inc_CP[0] = CreatePickup(1275, 2, -2678.46851, 796.50763, 1501.0,-1);
	Inc_CP[1] = CreatePickup(1275, 2, 498.1447,1318.5439,774.4839,-1);
	Inc_CP[2] = CreatePickup(1275, 2, 948.5161,2447.8325,1601.9871,-1);
	Yakydzapick = CreatePickup(11722, 1 , -1417.99, 2085.67, 1502.04,-1);
	Zek_CP = CreateDynamicCP(1550.7634,-1681.3251,13.5540, 1.0,-1,-1,-1,5.0);
 	MatsDel_CP = CreateDynamicCP(-117.0112,-313.7268,2.7646, 1.0, -1, -1, -1, 25.0);

	f(global_str, 350, "{FFFFFF}Металла: {10F441}%dкг\n{FFFFFF}Материалов: {10F441}%d\n\n{FFFFFF}Встаньте на чекпоинт чтобы купить материалы", FactoryFerum, FactoryMats);
	FactoryText[0] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, -117.0112,-313.7268,2.7646, 10.0);
	f(global_str, 350, "Склад фермы\n\n\n{D38A37}%d{FFFFFF} продуктов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[27],GLS[31]);
	FactoryText[1] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, -48.8906,26.7353,3.1172, 25.0);
	f(global_str, 350, "Склад разгрузочной станции\n\n\n{D38A37}%d{FFFFFF} предметов\nСтоимость закупки: {D38A37}%d$\n\n{D38A37}Для загрузки посигнальте!",GLS[28],GLS[29]);
	FactoryText[2] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 1976.6340,-2029.4700,13.5469, 25.0);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[45],GLS[60],GLS[55],GLS[50] );
	NarkoText[0] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE,331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 5);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[46],GLS[61],GLS[56],GLS[51]  );
	NarkoText[1] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 5);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[47],GLS[62],GLS[57],GLS[52]  );
	NarkoText[2] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 5);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[48],GLS[63],GLS[58],GLS[53]  );
	NarkoText[3] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5);

	f(global_str, 350, "Наркопритон\nВ наличии: {D38A37}%d{FFFFFF} товара\nНа балансе: {D38A37}%d{FFFFFF}$\n\nСтоимость скупки наркотиков: {D38A37}%d{FFFFFF}\nСтоимость наркотиков: {D38A37}%d{FFFFFF}\n\nКупить наркотики - {10F441}/buydrugs{FFFFFF}\nПродать наркотики - {10F441}/selldrugs{FFFFFF}",GLS[49],GLS[64],GLS[59],GLS[54]  );
	NarkoText[4] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, 331.9075,1119.5465,1083.8903, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5, 5);

	ScrapCP = CreateDynamicCP(-117.00000000,-326.89999390,1.10000002, 3.0, -1, -1, -1, 10000.0);

	MeriaGun = CreatePickup(334, 23,-2068.6096, 2701.9302, 1500.9766,-1);//Jekazzz
	prost = CreatePickup(1239, 1, 2356.92, 76.57, 1502.01, -1);
	FerumEndCP = CreateDynamicCP(2565.5493,-1292.9424,1044.0,2.5);
	PorterDownCP = CreateDynamicCP(2012.1073,-1989.7375,13.5469, 2.0, -1, -1, -1, 180.0);
	BankCP[0] = CreateDynamicCP(1482.7710,-1738.1262,13.5469, 3.0, -1, -1, -1, 10000.0);
	BankCP[1] = CreateDynamicCP(1481.1355,-1769.7352,18.7958, 1.0, -1, -1, -1, 10000.0);
	BankCP[2] = CreateDynamicCP(2419.6230,2342.5767,10.8203, 3.0, -1, -1, -1, 10000.0);
	BankCP[3] = CreateDynamicCP(2375.5564,2308.2996,8.1406, 1.0, -1, -1, -1, 10000.0);

	RazdPickup = CreatePickup(1212, 23, 2107.1008,789.9330,1027.1191, -1);

	SvalkaCP[0] = CreateDynamicCP(2180.7395,-1990.5044,13.5469, 5.0);
	SvalkaCP[1] = CreateDynamicCP(111.0156,1073.1621,13.6094, 5.0);
	SvalkaCP[2] = CreateDynamicCP(-1867.2306,-1669.6919,21.7500, 5.0);

	if(GLS[69] > 4500 or GLS[69] < 3500) GLS[69] = 4000; 
	else GLS[69] += random(100);

	// BTC
	CryptoUpdate_BitCoin();
	//

	format(global_str, 512, "Получение кредитa\nКредитная ставка {84E268}%d{FFFFFF} процента(ов).\nПолучить кредит или начать работу с {84E268}депозитом{FFFFFF},\n(Получить/снять деньги) можно через сотрудника банка!\n\nФонд премии инкасаторам: {84E268}49600${FFFFFF}\nВыделеная премия на одного работника: {84E268}0${FFFFFF}\n\n{FFE51A}Курс ЕВРО: {FFFFFF}%d$", GLS[0], GLS[69]);
	cretits = CreateDynamic3DTextLabel(global_str, -1, -2679.9958, 807.8365, 1502.5649, 9.0);

	//== Depo Poezd
	ObjectDepo[0] = CreateDynamicObject(18662, -2102.934326, 506.865753, 1488.914429, 0.000007, -0.000007, 179.999924, -1, 1, -1, STREAMER_OBJECT_SD, 50.0); // 1
	ObjectDepo[1] = CreateDynamicObject(18662, -2102.934326, 508.065765, 1488.914429, 0.000007, -0.000007, 179.999924, -1, 1, -1, STREAMER_OBJECT_SD, 50.0); // 1
	ObjectDepo[2] = CreateDynamicObject(18662, -2102.934326, 512.915710, 1488.914429, 0.000007, -0.000007, 179.999924, -1, 1, -1, STREAMER_OBJECT_SD, 50.0); // 1
	ObjectDepo[3] = CreateDynamicObject(18662, -2102.934326, 514.115723, 1488.914429, 0.000007, -0.000007, 179.999924, -1, 1, -1, STREAMER_OBJECT_SD, 50.0); // 1
	UpdateDepoList();

    for(new i; i < MAX_EGGS; i++)
		Eggs[i][eCreate] = -1;

    foreach(new i: Player)
	{
	    for(new t; t < 8; t ++)
	    {
	    	if(t < 6) HInfoDraw[i][t] = (PlayerText:-1);
		}
	}
    new Float:Y = 350.0;
    Box = CreateBox(194.0,Y-20,3*64.0 + 3*20,84,-1961026049);
    Digit1[0] = CreateSprite(214.0,Y,"LD_SLOT:cherry",64,64);
    Digit2[0] = CreateSprite(288.0,Y,"LD_SLOT:cherry",64,64);
    Digit3[0] = CreateSprite(362.0,Y,"LD_SLOT:cherry",64,64);
    Digit1[1] = CreateSprite(214.0,Y,"LD_SLOT:grapes",64,64);
    Digit2[1] = CreateSprite(288.0,Y,"LD_SLOT:grapes",64,64);
    Digit3[1] = CreateSprite(362.0,Y,"LD_SLOT:grapes",64,64);
    Digit1[2] = CreateSprite(214.0,Y,"LD_SLOT:r_69",64,64);
    Digit2[2] = CreateSprite(288.0,Y,"LD_SLOT:r_69",64,64);
    Digit3[2] = CreateSprite(362.0,Y,"LD_SLOT:r_69",64,64);
    Digit1[3] = CreateSprite(214.0,Y,"LD_SLOT:bell",64,64);
    Digit2[3] = CreateSprite(288.0,Y,"LD_SLOT:bell",64,64);
    Digit3[3] = CreateSprite(362.0,Y,"LD_SLOT:bell",64,64);
    Digit1[4] = CreateSprite(214.0,Y,"LD_SLOT:bar1_o",64,64);
    Digit2[4] = CreateSprite(288.0,Y,"LD_SLOT:bar1_o",64,64);
    Digit3[4] = CreateSprite(362.0,Y,"LD_SLOT:bar1_o",64,64);
    Digit1[5] = CreateSprite(214.0,Y,"LD_SLOT:bar2_o",64,64);
    Digit2[5] = CreateSprite(288.0,Y,"LD_SLOT:bar2_o",64,64);
    Digit3[5] = CreateSprite(362.0,Y,"LD_SLOT:bar2_o",64,64);

	fermalen[0] = 150+random(100);
	fermalen[1] = 150+random(100);
	shafta[0] = 100+random(50);
	shafta[1] = 120+random(80);
	shafta[2] = 200+random(100);
	shafta[3] = 200+random(100);
	shafta[4] = 200+random(100);

	for(new i; i < MAX_AUTO_BAZAR; i++)
    {
    	autoBazarInfo[i][autoBazarplayerid] = INVALID_PLAYER_ID;
    	autoBazarInfo[i][autoBazarCarID] = INVALID_VEHICLE_ID;
    	autoBazarInfo[i][autoBazarLabel] = CreateDynamic3DTextLabel((str_f("Место для продажи {33aa33}[Свободно]\n{d1ca61}Тип: %s\n{FFFFFF}Нажмите 'H' (сигнал) чтобы занять", autoBazarInfo[i][autoBazarType] == 1 ? "вело/авто/мото" : "вертолёты")), -1, autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ], 3.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID);
		gAreas[arAutobazar][i] = CreateDynamicSphere(autoBazarInfo[i][autoBazarPosX], autoBazarInfo[i][autoBazarPosY], autoBazarInfo[i][autoBazarPosZ], 3, -1, -1);
	}
	
	#include ../library/map/LoadOther

	for(new i; i < MAX_HOUSES; i++)
	{
		if(i < MAX_BIZ) CreateBiz(i);
		if(i < sizeof(DynamicZones_data)) gAreas[arOther][i] = CreateDynamicSphere(DynamicZones_data[i][data_Position][0], DynamicZones_data[i][data_Position][1], DynamicZones_data[i][data_Position][2], 3, DynamicZones_data[i][data_OnlyInterior] ? -1 : DynamicZones_data[i][data_VirtualVorld], DynamicZones_data[i][data_Interior]);
		CreateHouse(i);
	}
	
	new objectHAND[8];
	objectHAND[0] = CreateDynamicObject(11319, 2280.611328, -2347.159424, 15.006873, 0.000042, -0.000050, 135.000000, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[0], 0, 7985, "vgsswarehse02c", "GB_truckdepot12", 0xFFFFFFFF);
	objectHAND[1] = CreateDynamicObject(1897, 2283.013916, -2344.939697, 16.273350, -0.000029, -0.000004, -134.999954, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[1], 0, 1381, "cranes_dyn2", "ws_sheetsteel", 0xFF707070);
	objectHAND[2] = CreateDynamicObject(1897, 2282.999268, -2344.954346, 14.041904, -0.000029, -179.999969, -134.999954, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[2], 0, 1381, "cranes_dyn2", "ws_sheetsteel", 0xFF707070);
	objectHAND[3] = CreateDynamicObject(19866, 2283.157715, -2344.579102, 15.132897, 89.999992, 42.544189, -87.544144, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[3], 0, 5461, "glenpark6d_lae", "GB_truckdepot20", 0xFFFFFFFF);
	
	
	objectHAND[4] = CreateDynamicObject(11319, 2285.725830, -2342.044922, 15.006873, 0.000031, -0.000039, 135.000000, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[4], 0, 7985, "vgsswarehse02c", "GB_truckdepot12", 0xFFFFFFFF);
	
	objectHAND[5] = CreateDynamicObject(1897, 2283.552734, -2344.449219, 16.273350, -0.000012, 0.000011, -134.999954, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[5], 0, 1381, "cranes_dyn2", "ws_sheetsteel", 0xFF707070);
	objectHAND[6] = CreateDynamicObject(1897, 2283.538086, -2344.463867, 14.041904, -0.000012, -179.999969, -134.999954, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[6], 0, 1381, "cranes_dyn2", "ws_sheetsteel", 0xFF707070);
	
	objectHAND[7] = CreateDynamicObject(19866, 2283.146729, -2344.590088, 15.132897, -89.999992, 89.999992, 45.000008, -1, -1, -1, STREAMER_OBJECT_SD, 300.0); // 1
	SetDynamicObjectMaterial(objectHAND[7], 0, 5461, "glenpark6d_lae", "GB_truckdepot20", 0xFFFFFFFF);
	
	SecondHand_Timer3D = CreateDynamic3DTextLabel("-", 0xFA5858FF, 2285.0281, -2343.2974, 13.5469, 10.0000);
	SecondHand_Timer = UNIX_TO_TIME(11, 0, 0);
	
	// AutoService
	for(new i; i < sizeof(AutoService); i++)
	{
		CreateDynamicPickup(3096, 23, AutoService[i][asPosX], AutoService[i][asPosY], AutoService[i][asPosZ], 0, 0);
		CreateDynamic3DTextLabel(!"Место проведения ремонта\n\n{ffffff}Посигнальте, чтобы начать ремонт", 0xFFFF00FF, AutoService[i][asPosX], AutoService[i][asPosY], AutoService[i][asPosZ], 10.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	}
	
	return true;
}
stock LoadTextDraws()
{
	nopark[3] = TextDrawCreate(518.666626, 362.336853, "LD_BEAT:chit");
	TextDrawLetterSize(nopark[3], 0.000000, 0.000000);
	TextDrawTextSize(nopark[3], 16.559900, 19.389900);
	TextDrawAlignment(nopark[3], 1);
	TextDrawColor(nopark[3], 0x141414FF);
	TextDrawUseBox(nopark[3], 0);
	TextDrawBoxColor(nopark[3], 0x80808080);
	TextDrawSetShadow(nopark[3], 0);
	TextDrawSetOutline(nopark[3], 0);
	TextDrawBackgroundColor(nopark[3], 0x000000FF);
	TextDrawFont(nopark[3], 4);
	TextDrawSetProportional(nopark[3], 0);
	TextDrawSetSelectable(nopark[3], 0);

	nopark[2] = TextDrawCreate(614.633301, 362.351563, "LD_BEAT:chit");
	TextDrawLetterSize(nopark[2], 0.000000, 0.000000);
	TextDrawTextSize(nopark[2], 16.559900, 19.389900);
	TextDrawAlignment(nopark[2], 1);
	TextDrawColor(nopark[2], 0x141414FF);
	TextDrawUseBox(nopark[2], 0);
	TextDrawBoxColor(nopark[2], 0x80808080);
	TextDrawSetShadow(nopark[2], 0);
	TextDrawSetOutline(nopark[2], 0);
	TextDrawBackgroundColor(nopark[2], 0x000000FF);
	TextDrawFont(nopark[2], 4);
	TextDrawSetProportional(nopark[2], 0);
	TextDrawSetSelectable(nopark[2], 0);

	nopark[1] = TextDrawCreate(526.766602, 365.370148, "LD_SPAC:white");
	TextDrawLetterSize(nopark[1], 0.000000, 0.000000);
	TextDrawTextSize(nopark[1], 96.120003, 13.210000);
	TextDrawAlignment(nopark[1], 1);
	TextDrawColor(nopark[1], 0x141414FF);
	TextDrawUseBox(nopark[1], 0);
	TextDrawBoxColor(nopark[1], 0x80808080);
	TextDrawSetShadow(nopark[1], 0);
	TextDrawSetOutline(nopark[1], 0);
	TextDrawBackgroundColor(nopark[1], 0x000000FF);
	TextDrawFont(nopark[1], 4);
	TextDrawSetProportional(nopark[1], 0);
	TextDrawSetSelectable(nopark[1], 0);

	nopark[0] = TextDrawCreate(575.066528, 366.996307, "NO_PARK_ZONE");
	TextDrawLetterSize(nopark[0], 0.239999, 1.023407);
	TextDrawTextSize(nopark[0], 1280.000000, 1280.000000);
	TextDrawAlignment(nopark[0], 2);
	TextDrawColor(nopark[0], 0xA52A2AFF);
	TextDrawUseBox(nopark[0], 0);
	TextDrawBoxColor(nopark[0], 0x80808080);
	TextDrawSetShadow(nopark[0], 0);
	TextDrawSetOutline(nopark[0], 0);
	TextDrawBackgroundColor(nopark[0], 0x000000FF);
	TextDrawFont(nopark[0], 1);
	TextDrawSetProportional(nopark[0], 1);
	TextDrawSetSelectable(nopark[0], 0);
	#include <textdraws/textdraw>
}

stock LoadCity()
{
	ScreenAreaId[0] = CreateDynamicCircle(1479.914917, -1689.026733, 100.0);
	gAreas[arGhetto] = CreateDynamicSphere(2196.3599, -1692.1859, 13.7727, 100);

	for(new i; i < 2; i++)
		autoSelectionData[i] = INVALID_DATA_ID,
		SetString(autoSelectionWinnerName, "None");

	CreateDynamic3DTextLabel(!"Информация о автоподборщике\n\n{FFFFFF}Используйте: 'Действие'", 0xFFFF00FF, 214.4270, -266.1833, 1.5688, 7.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	CreateDynamicPickup(1239, 23, 214.4270, -266.1833, 1.5688);

	CreateDynamic3DTextLabel(!"Автоподборщик\n\n{4A870B}[{FFFFFF} Чтобы подобрать авто, используйте: 'Действие' {4A870B}]", 0xFFFF00FF, 219.9615, -269.2213, 1.8221, 5.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	CreateDynamicActor(1, 219.9615, -269.2213, 1.8221, 359.1170);

	autoSelectionText = CreateDynamic3DTextLabel(!"[ Свободен ]", 0x31B404FF, 219.9615, -269.2213, 2.8721, 7.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);	

    for(new i; i < sizeof(Tir); i++)
	{
		if(i < 6)
		{
			CreateDynamicPickup(6635, 1, RentBikePosition[i][0], RentBikePosition[i][1], RentBikePosition[i][2]);
			CreateDynamic3DTextLabel("Пункт выдачи Велосипедов", -1, RentBikePosition[i][0], RentBikePosition[i][1], RentBikePosition[i][2], 5.0000);
			BikeAreaID[i] = CreateDynamicCircle(RentBikePosition[i][0], RentBikePosition[i][1], 1);
		}
		if(i < 3) 
		{
			tuningCenter3DText[i] = CreateDynamic3DTextLabel("Для въезда в гараж\n{70CFFA}Посигнальте ( H )", COLOR_WHITE, tuningStation_boxInfo[i][0][0], tuningStation_boxInfo[i][0][1], tuningStation_boxInfo[i][0][2], 7.0);
			CreateDynamic3DTextLabel("[ {ffffff}Семейный автопарк {D45B5B}]", 0xFFFFFFFFD45B5BFF, FKV_Data_Int[i][kvAutoparkPos][0], FKV_Data_Int[i][kvAutoparkPos][1], FKV_Data_Int[i][kvAutoparkPos][2], 10.0000);
			CreateDynamicPickup(15591, 1, FKV_Data_Int[i][kvAutoparkPos][0], FKV_Data_Int[i][kvAutoparkPos][1], FKV_Data_Int[i][kvAutoparkPos][2]);
		}
		if(i < 2) UpdateBattlesText(i + 1, true);
		TirObj[i] = CreateObject(1586, Tir[i][ftirPosX],Tir[i][ftirPosY],Tir[i][ftirPosZ], 0, 0, 0);
	    CreateDynamic3DTextLabel("{AFAFAF}ТИР{FFFFFF}\nЗаймите кабинку и стреляйте по\nмишени для улучшения\nнавыка стрельбы",COLOR_WHITE,Tir[i][tirPosX],Tir[i][tirPosY],Tir[i][tirPosZ], 3);
	}

	for(new i;i < sizeof(DoorInfo); i ++)
	{
		if(!GetString(DoorInfo[i][dName],"None"))
		{
			if(DoorInfo[i][dPos][3] == 90.0)
				CreateDynamic3DTextLabel(DoorInfo[i][dName],COLOR_BLUENEW, DoorInfo[i][dPos][0], DoorInfo[i][dPos][1]+0.7400, DoorInfo[i][dPos][2]+1.017587, 5.0);
			else if(DoorInfo[i][dPos][3] == 180.0)
				CreateDynamic3DTextLabel(DoorInfo[i][dName],COLOR_BLUENEW, DoorInfo[i][dPos][0]-0.7400, DoorInfo[i][dPos][1], DoorInfo[i][dPos][2]+1.017587, 5.0);
			else if(DoorInfo[i][dPos][3] == 270.0)
				CreateDynamic3DTextLabel(DoorInfo[i][dName],COLOR_BLUENEW, DoorInfo[i][dPos][0], DoorInfo[i][dPos][1]-0.7400, DoorInfo[i][dPos][2]+1.017587, 5.0);
			else
				CreateDynamic3DTextLabel(DoorInfo[i][dName],COLOR_BLUENEW, DoorInfo[i][dPos][0]+0.7400, DoorInfo[i][dPos][1], DoorInfo[i][dPos][2]+1.017587, 5.0);
		}
		CreateDoor(i);
		gAreas[arDoor][i] = CreateDynamicSphere(DoorInfo[i][dPos][0],DoorInfo[i][dPos][1],DoorInfo[i][dPos][2], 3, DoorInfo[i][dWorld], DoorInfo[i][dInterior]);
	}
    for(new i;i < sizeof(GateInfo);i ++) CreateGate(i);
	for(new i;i < sizeof(BarrierInfo);i ++)
	{
		if(i == 2 or i == 3 or i == 22 or i == 23) continue;

	    new
			Float:X = BarrierInfo[i][brPos_X],
			Float:Y = BarrierInfo[i][brPos_Y];
		ShiftCords(0, X, Y, BarrierInfo[i][brPos_A]+90.0, 3.5);
     	CreateDynamicObject(966,BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z],0.00000000,0.00000000,BarrierInfo[i][brPos_A]);
		gAreas[arBarrier][i] = CreateDynamicSphere(BarrierInfo[i][brPos_X], BarrierInfo[i][brPos_Y], BarrierInfo[i][brPos_Z], 3, -1, -1);

     	if(!BarrierInfo[i][brOpen])
     	{
			gBarrier[i] = CreateDynamicObject(968,BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z]+0.8,0.00000000,90.00000000,BarrierInfo[i][brPos_A]+180);
			MoveObject(gBarrier[i],BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z]+0.7,BARRIER_SPEED,0.0,0.0,BarrierInfo[i][brPos_A]+180);
			MoveObject(gBarrier[i],BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z]+0.75,BARRIER_SPEED,0.0,90.0,BarrierInfo[i][brPos_A]+180);
		}
		else gBarrier[i] = CreateDynamicObject(968,BarrierInfo[i][brPos_X],BarrierInfo[i][brPos_Y],BarrierInfo[i][brPos_Z]+0.8,0.00000000,20.00000000,BarrierInfo[i][brPos_A]+180);
	}
	// Новые шлагбаумы
	gBarrier[2] = CreateDynamicObject(968, 73.637833, -1535.661255, 5.043927, 0.000000, 90.000000, 261.799988, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD);
	gBarrier[3] = CreateDynamicObject(968, 31.207512, -1527.308350, 4.993926, 0.000000, 90.000000, 441.499939, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD);
	gBarrier[22] = CreateDynamicObject(968, 1792.316772, 800.371582, 10.961740, 0.000000, 90.000000, 179.099884, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 2
	gBarrier[23] = CreateDynamicObject(968, 1800.232666, 822.460571, 10.511731, 0.000000, 90.000000, 359.999695, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 2


	SetDynamicObjectMaterial(gBarrier[2], 1, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[2], 0, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[3], 1, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[3], 0, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[22], 1, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[22], 0, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[23], 1, 18631, "nomodelfile", "hazardtile6", 0);
	SetDynamicObjectMaterial(gBarrier[23], 0, 18631, "nomodelfile", "hazardtile6", 0);
	//для отдельных createdoor
	SetDynamicObjectMaterial(dDoor[9], 2, 1560, "7_11_door", "CJ_CHROME2", 0);
	SetDynamicObjectMaterial(dDoor[9], 1, 16640, "a51", "a51_glass", 0);
	SetDynamicObjectMaterial(dDoor[9], 0, 1560, "7_11_door", "CJ_CHROME2", 0);
	SetDynamicObjectMaterial(dDoor[45], 0, 3922, "bistro", "sw_door11", 0xFFFFFFFF);

	for(new i;i < sizeof(DormPos);i ++)
	{
		if(DormPos[i][0] + DormPos[i][1] + DormPos[i][2] != 0.0)
		{
		    new allzone = 0,narkoz=0;
			static urik[30];
			OrgInfo[i][oOb4ak] = 1;
			if(OrgInfo[i][oOb4ak] == 1) urik = "{A92424}Закрыт{FFFFFF}";
			if(OrgInfo[i][oOb4ak] == 0) urik = "{3FA924}Открыт{FFFFFF}";
			Dorm_CP[i] = CreateDynamicCP(DormPos[i][0],DormPos[i][1],DormPos[i][2],1.0,SpawnIntWorld[i][1],SpawnIntWorld[i][0],-1,10.0);
			if((i>=11 && i<=15) || i == 25)
			{
	            for(new d = 1; d < GANGZONES; d++)
				{
					if(GangZoneInfo[d][gangOwnerId] == i)
					{
						allzone++;
						if (d == 33)narkoz++;
						if (d == 43)narkoz++;
						if (d == 10)narkoz++;
						if (d == 14)narkoz++;
						if (d == 24)narkoz++;
					}
				}
				f(global_str,512,"Количество\nТерриторий: {FAAC58}%d{FFFFFF}\nНаркопритонов: {FAAC58}%d{FFFFFF}\n\nСклад %s\n{FAAC58}%s{FFFFFF}\n\nНаркотики: {FAAC58}%d г{FFFFFF}\nПатроны: {FAAC58}%d шт{FFFFFF}\nКанистры: {FAAC58}%d шт{FFFFFF}\nИнструменты: {FAAC58}%d шт{FFFFFF}\nМаски: {FAAC58}%d шт{FFFFFF}\n",allzone,narkoz,urik,OrgInfo[i][oName],OrgInfo[i][oDrugs],OrgInfo[i][oMats],OrgInfo[i][oBenz],OrgInfo[i][oRemont],OrgInfo[i][oMask]);
			}
			else
			{
			    for(new bizid;bizid < MAX_BIZ;bizid++)
				{
				    if(BizData[bizid][bKrasher] != i || strcmp(BizData[bizid][bOwner],"The State",true) == 0 ) continue;
					allzone++;
				}
				f(global_str,512,"Количество\nбизнесов {FAAC58}%d{FFFFFF}\n\nСклад %s\n{FAAC58}%s{FFFFFF}\n\nНаркотики: {FAAC58}%d г{FFFFFF}\nПатроны: {FAAC58}%d шт{FFFFFF}\nКанистры: {FAAC58}%d шт{FFFFFF}\nИнструменты: {FAAC58}%d шт{FFFFFF}\nМаски: {FAAC58}%d шт{FFFFFF}",allzone,urik,OrgInfo[i][oName],OrgInfo[i][oDrugs],OrgInfo[i][oMats],OrgInfo[i][oBenz],OrgInfo[i][oRemont],OrgInfo[i][oMask]);
			}
			DormText[i] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE,DormPos[i][0],DormPos[i][1],DormPos[i][2]+1.2, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, SpawnIntWorld[i][1], SpawnIntWorld[i][0]);
		}
	}
	// OTELS
	for(new i; i < MAX_OTELS; i++) 
		OtelPickup[i] = CreateDynamicPickup(19132, 1, OtelInfo[i][otEnter_X], OtelInfo[i][otEnter_Y], OtelInfo[i][otEnter_Z]);

	OtelPickup[MAX_OTELS] = CreateDynamicPickup(19132, 1, 1803.6194,2652.5393,1500.9967);
	OtelPickup[MAX_OTELS + 1] = CreateDynamicPickup(19132, 1, 2011.9275,2671.0142,1500.9493);
	OtelPickup[MAX_OTELS + 2] = CreateDynamicPickup(19132, 1, -1028.3639,-606.2128,1500.9709);
	//
	for(new i; i < sizeof(TeleportInfo); i++)
       	SetString(global_str, TeleportInfo[i][tpName]), strcat(global_str,"\n\n{FFFFFF}Встаньте на пикап чтобы войти/выйти"),
		CreateDynamic3DTextLabel(global_str, COLOR_ORANGE, TeleportInfo[i][tpEnterPos_X], TeleportInfo[i][tpEnterPos_Y], TeleportInfo[i][tpEnterPos_Z], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, TeleportInfo[i][tpEnterWorld], TeleportInfo[i][tpEnterInt]),
		TeleportPickup[i] = CreateDynamicPickup(19132, 1, TeleportInfo[i][tpEnterPos_X], TeleportInfo[i][tpEnterPos_Y], TeleportInfo[i][tpEnterPos_Z], TeleportInfo[i][tpEnterWorld], TeleportInfo[i][tpEnterInt]);
	
	for(new i; i < sizeof(FerumCPPos); i ++)FerumCP[i] = CreateDynamicCP(FerumCPPos[i][0], FerumCPPos[i][1], FerumCPPos[i][2], 0.5);
	for(new i; i < sizeof(FerumPickupPos); i ++) FerumPickup[i] = CreatePickup(1559, 1, FerumPickupPos[i][0], FerumPickupPos[i][1], FerumPickupPos[i][2], -1);
	for(new i; i < sizeof(MinPos); i ++) MinerCP[i] = CreateDynamicCP(MinPos[i][0], MinPos[i][1], MinPos[i][2], 2.0);
	for(new i;i < sizeof(TestCP);i ++)
	{
	    if(i < sizeof(TestCP)-1) Test_CP[i] = CreateDynamicRaceCP(0,TestCP[i][0],TestCP[i][1],TestCP[i][2],TestCP[i+1][0],TestCP[i+1][1],TestCP[i+1][2],2.0,-1,-1,-1,1000.0);
	    else Test_CP[i] = CreateDynamicRaceCP(1,TestCP[i][0],TestCP[i][1],TestCP[i][2],TestCP[i][0],TestCP[i][1],TestCP[i][2],2.0,-1,-1,-1,1000.0);
	}
	for(new i;i < sizeof(MotoCP);i ++)
	{
	    if(i < sizeof(MotoCP)-1) MTest_CP[i] = CreateDynamicRaceCP(0,MotoCP[i][0],MotoCP[i][1],MotoCP[i][2],MotoCP[i+1][0],MotoCP[i+1][1],MotoCP[i+1][2],2.0,-1,-1,-1,1000.0);
	    else MTest_CP[i] = CreateDynamicRaceCP(1,MotoCP[i][0],MotoCP[i][1],MotoCP[i][2],MotoCP[i][0],MotoCP[i][1],MotoCP[i][2],2.0,-1,-1,-1,1000.0);
	}
    for(new i;i < sizeof(ZfarmCP);i ++)
	{
	    if(i < sizeof(ZfarmCP)-1) Zfarm_CP[i] = CreateDynamicRaceCP(3,ZfarmCP[i][0],ZfarmCP[i][1],ZfarmCP[i][2],ZfarmCP[i+1][0],ZfarmCP[i+1][1],ZfarmCP[i+1][2],7.0,-1,-1,-1,1000.0);
	    else Zfarm_CP[i] = CreateDynamicRaceCP(4,ZfarmCP[i][0],ZfarmCP[i][1],ZfarmCP[i][2],ZfarmCP[i][0],ZfarmCP[i][1],ZfarmCP[i][2],7.0,-1,-1,-1,1000.0);
	}
    for(new i;i < sizeof(KfarmCP);i ++)
	{
	    if(i < sizeof(KfarmCP)-1) Kfarm_CP[i] = CreateDynamicRaceCP(0,KfarmCP[i][0],KfarmCP[i][1],KfarmCP[i][2],KfarmCP[i+1][0],KfarmCP[i+1][1],KfarmCP[i+1][2],7.0,-1,-1,-1,1000.0);
	    else Kfarm_CP[i] = CreateDynamicRaceCP(1,KfarmCP[i][0],KfarmCP[i][1],KfarmCP[i][2],KfarmCP[i][0],KfarmCP[i][1],KfarmCP[i][2],7.0,-1,-1,-1,1000.0);
	}
    for(new i;i < sizeof(TfarmCP);i ++)
	{
	    if(i < sizeof(TfarmCP)-1) Tfarm_CP[i] = CreateDynamicRaceCP(0,TfarmCP[i][0],TfarmCP[i][1],TfarmCP[i][2],TfarmCP[i+1][0],TfarmCP[i+1][1],TfarmCP[i+1][2],3.0,-1,-1,-1,1000.0);
	    else Tfarm_CP[i] = CreateDynamicRaceCP(1,TfarmCP[i][0],TfarmCP[i][1],TfarmCP[i][2],TfarmCP[i][0],TfarmCP[i][1],TfarmCP[i][2],3.0,-1,-1,-1,1000.0);
	}
	for(new i;i < sizeof(FTestCP);i ++)
	{
	    if(i < sizeof(FTestCP)-1) FTest_CP[i] = CreateDynamicRaceCP(3,FTestCP[i][0],FTestCP[i][1],FTestCP[i][2],FTestCP[i+1][0],FTestCP[i+1][1],FTestCP[i+1][2],15.0,-1,-1,-1,1000.0);
	    else FTest_CP[i] = CreateDynamicRaceCP(4,FTestCP[i][0],FTestCP[i][1],FTestCP[i][2],FTestCP[i][0],FTestCP[i][1],FTestCP[i][2],12.0,-1,-1,-1,1000.0);
	}
	for(new i;i < sizeof(GoFuel);i ++) 
	{
		f(global_str, 256,"\
		{FAAC58} Заправка \n\n\
		{FFFFFF}Используйте клавишу {73B461}H (Сигнал){FFFFFF} около бензоколонки\n\
		Стоимость 1-го литра: {73B461}$%.1f\n\
		{FFFFFF}Всего топлива: {73B461}%dл.", BizData[GoFuel[i][gfBizzID]][bEnterPrice], BizData[GoFuel[i][gfBizzID]][bProducts]);

		CreatePickup(1274, 1, GoFuel[i][gfPos_X], GoFuel[i][gfPos_Y], GoFuel[i][gfPos_Z], -1);
	    GoFuel[i][gf3DText] = CreateDynamic3DTextLabel(global_str, COLOR_WHITE, GoFuel[i][gfPos_X], GoFuel[i][gfPos_Y], GoFuel[i][gfPos_Z], 30.0);

		GoFuelCP[i] = CreateDynamicCP(GoFuel[i][gfPos_X],GoFuel[i][gfPos_Y],GoFuel[i][gfPos_Z],6.0, -1, -1, -1, 10000.0);
		gAreas[arFuels][i] = CreateDynamicSphere(GoFuel[i][gfPos_X],GoFuel[i][gfPos_Y],GoFuel[i][gfPos_Z], 3, -1, -1);
	}
	for(new i; i < sizeof(GoGunShop); i ++) GoGunShopCP[i] = CreateDynamicCP(GoGunShop[i][gsPosX], GoGunShop[i][gsPosY], GoGunShop[i][gsPosZ], 12.0, -1, -1, -1, 10000.0);
	for(new i; i < sizeof(DutyPos); i++)
	{
     	TeamDutyCP[i] = CreatePickup(1275, 1, DutyPos[i][dutyposX], DutyPos[i][dutyposY], DutyPos[i][dutyposZ], DutyPos[i][dutyposWorld]);
	}
	for(new i;i < sizeof(IncCP);i ++)
	{
	    IncCP[i][0] = CreateDynamicCP(IncCPPos[i][0], IncCPPos[i][1], IncCPPos[i][2], 3.0, -1, -1, -1, 10000.0);
	    IncCP[i][1] = CreateDynamicCP(IncCPPos[i][3], IncCPPos[i][4], IncCPPos[i][5], 1.0, -1, -1, -1, 10000.0);
	}
	for(new i;i < sizeof(PizzCP);i ++)
	{
	    PizzCP[i][0] = CreateDynamicCP(PizzaCPPos[i][0], PizzaCPPos[i][1], PizzaCPPos[i][2], 3.0, -1, -1, -1, 10000.0);
	    PizzCP[i][1] = CreateDynamicCP(PizzaCPPos[i][3], PizzaCPPos[i][4], PizzaCPPos[i][5], 1.0, -1, -1, -1, 10000.0);
	}
	
	for(new i;i < sizeof(HealInfo);i ++) 
	{
		HealText[i] = CreateDynamic3DTextLabel("Койка {33AA33}[Свободна]\nНеобходимо начать лечение!",COLOR_WHITE,HealInfo[i][hCP][0],HealInfo[i][hCP][1],HealInfo[i][hCP][2], 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HealInfo[i][hWorld], HealInfo[i][hInt]);
    	gAreas[arHealBads][i] = CreateDynamicSphere(HealInfo[i][hCP][0],HealInfo[i][hCP][1],HealInfo[i][hCP][2], 1, -1, -1);
	}
	for(new i;i < sizeof(ZoneForCollision);i ++) gAreas[arCollision][i] = CreateDynamicSphere(ZoneForCollision[i][0], ZoneForCollision[i][1], ZoneForCollision[i][2], 150.0);
	for(new i;i < sizeof(FishZone);i ++)
	{
	    Fish_CP[i] = CreateDynamicCP(FishZone[i][0], FishZone[i][1], FishZone[i][2], 0.7, -1, -1, -1, 5.0);
	    CreateDynamic3DTextLabel(" Место для рыбалки ",COLOR_WHITE,FishZone[i][0], FishZone[i][1], FishZone[i][2], 10.0);
	}

	for(new i;i < sizeof(Bankomats);i ++)
	{
 		SetDynamicObjectMaterialText(CreateDynamicObject(2754,Bankomats[i][0],Bankomats[i][1],Bankomats[i][2],0.0,0.0,Bankomats[i][3]), 2,"\n\n        \n        \n        \n        \n        ",OBJECT_MATERIAL_SIZE_256x256,"Tahoma", 48, 1, 0xFF000000,0xFFCD5C5C, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		CreateDynamic3DTextLabel("{A19D9D}Банкомат\n{FFFFFF}Нажмите: ALT",COLOR_WHITE,Bankomats[i][0],Bankomats[i][1],Bankomats[i][2]+1,5.0);
		gAreas[arBankomats][i] = CreateDynamicSphere(Bankomats[i][0], Bankomats[i][1], Bankomats[i][2], 1.5, -1, -1);
	}

	for(new i = 0;i < sizeof(ArendInfo);i ++)
	{
	    ArendCar[i] = J_AddStaticVehicleEx(ArendInfo[i][aID], ArendInfo[i][aPos_X], ArendInfo[i][aPos_Y], ArendInfo[i][aPos_Z], ArendInfo[i][aPos_A], ArendInfo[i][aColor_1], ArendInfo[i][aColor_2], 100000, 0, 0, -1, ARENDCARS);
		ARENDCARS ++;
	}

	for(new i; i < MAX_MUSORS; i++)
	{
		new objectdd;
	    switch random(90) do
	    {
	        case 0..29: objectdd = 1334;
	        case 30..60: objectdd = 1332;
	        case 61..89: objectdd = 1333;
		}

		
	    MusorObject[i] = CreateDynamicObjectEx(objectdd, MusorPos[i][0], MusorPos[i][1], MusorPos[i][2], 0.0, 0.0, MusorPos[i][3]+180,150.00,150.00);
	    MusorCP[i] = CreateDynamicCP(MusorPos[i][0], MusorPos[i][1], MusorPos[i][2], 8.0, -1, -1, -1, 20);
	    MusorCOP[i] = CreateDynamicSphere(MusorPos[i][0],  MusorPos[i][1], MusorPos[i][2], 3, -1, -1);
        MusorText[i] = CreateDynamic3DTextLabel("Мусора: 100%/100%\nПосмотреть содержимое - 'ALT'", 0xAFAFAFFF, MusorPos[i][0], MusorPos[i][1]-1.3, MusorPos[i][2], 20.0);
       	MusorObject[i] = CreatePickup(1265,23,MusorPos[i][0], MusorPos[i][1]-1.3, MusorPos[i][2]);
	}

	for(new i; i < 91;i ++) GribInfo[i][gribCreat] = CreatePickup(859,1,GribInfo[i][gribPos][0], GribInfo[i][gribPos][1], GribInfo[i][gribPos][2],-1);
	for(new i; i < MAX_VEHICLES; i++)
	{
	    Fuel[i] = GasMax;
	    VehicleInfo[i][vAntiRepair]=2;
	    VehicleHealth[i] = 1000;
     	TempStripObject[i] = -1;
	    if(IsAVelik(i)) SetEngineStatus(i,true, -1);
	    for(new d;d < 50;d ++) VehicleSeat[i][d] = INVALID_PLAYER_ID;
        SetVehicleToRespawn(i);
	}
	return 1;
}

stock ConvertTD(number)
{
	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	if(hours > 0) f(string, 30, "%d.%02d.%02d", hours, mins, secs);
	else f(string, 30, "%d.%02d", mins, secs);
	return string;
}
public: EggsSpawn()
{
	new
		hour;
	gettime(hour, _, _);
	for(new i; i < MAX_EGGS; i++)
	{
		if(hour > 21)
		{
		    KillTimer(Eggs[i][eTimer]);
		    return 1;
		}
	    if(Eggs[i][eCreate] == -1) {
			Eggs[i][eCreate] = CreateDynamicPickup(19343, 1, Eggs[i][ePos_X], Eggs[i][ePos_Y], Eggs[i][ePos_Z], Eggs[i][eVWorld]);
		}
	}
	return 1;
}
public: mysql_ReportSend(playerid, text[])
{
    if(cache_num_rows())
		return false;
		
	foreach(Admin, i)
		GameTextForPlayer(i, !"Report ++", 0, 1);
	
	if(ACTIVEpanel[3])
		SetPVarString(playerid, "ReportMessage", text),
		ReportSend{playerid} = true,
		ReportON{playerid} = true,
		TotalReport ++;

	f(global_str, 128, "[Жалоба] от %s[%d]: {ffffff}%s. Уже %d жалоб!!!", PN(playerid), playerid, text, TotalReport);
	SendAdminsMessage(COLOR_RED, global_str);
	SCMF(playerid, COLOR_RED, "[Информация] {FFFFFF}Вы отправили жалобу: %s", text);
	SCMF(playerid, -1, "На ваш вопрос обязательно ответит администрация! Вы %d в очереди!", TotalReport);
	SCM(playerid, -1, !"Если за вами необходимо срочно проследить, администрация сделает это вне очереди!");
	return true;
}

stock GetCoordBonnetVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:distance, Float:angle = 65535.0)
{
    new
        Float:dis;

    dis = dis/2 + distance;
    GetVehiclePos(vehicleid, x, y, z);
    if(angle == 65535.0)
        GetVehicleZAngle(vehicleid, angle);
    x -= (dis * floatsin(-angle+180, degrees));
    y -= (dis * floatcos(-angle+180, degrees));
    return 1;
}

public: MysqlDonationBlago(playerid)
{
	if(cache_num_rows())
	{
        new name[MAX_PLAYER_NAME], money;

		global_str = "Место\tИгрок\tПожертвовал денег\n";
        for(new i; i < cache_num_rows(); i++)
		{
            cache_get_value_name(i, !"NickName", name, MAX_PLAYER_NAME);
            cache_get_value_name_int(i, !"donation", money);
            f(global_str, 1500, "%s\n{b2ff52}%d.\t{FFFFFF}%s\t{b2ff52}$%d\n", global_str, i+1, name, money);
            SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"Топ благотворителей",global_str, !"Закрыть", !"");
        }
    }
    return 1;
}

forward CarSkill(playerid);
public CarSkill(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) {
		if(PI[playerid][pCarSkill] > 100)
			return 1;

	    PI[playerid][pCarSkill] += 2;
	    static string[80];
	    f(string, sizeof(string), "Ваш навык вождения повышен! Теперь ваш навык: {FFFFFF}%d/100", PI[playerid][pCarSkill]);
	    SCM(playerid, COLOR_LIGHTBLUE, string);
	    string[0] = EOS;
    }
    return 1;
}

stock LoadAntiDM()
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `antidm`");
	
    for(new idx; idx < (ANTIDMLOAD = cache_num_rows()); idx++)
	{
		cache_get_value_name_int(idx, "id", AntiDm[idx][zID]);
		cache_get_value_name_int(idx, "status", AntiDm[idx][zStatus]);
		cache_get_value_name_float(idx, "x", AntiDm[idx][zX]);
		cache_get_value_name_float(idx, "y", AntiDm[idx][zY]);
		cache_get_value_name_float(idx, "z", AntiDm[idx][zZ]);
		cache_get_value_name(idx, "name", AntiDm[idx][zName]);
	}

	return cache_delete(result);
}

stock GetPlayerGZ(playerid)
{
	for(new i; i < ANTIDMLOAD; i++)
		if(AntiDm[i][zStatus] && IsPlayerInRangeOfPoint(playerid, 100.0, AntiDm[i][zX], AntiDm[i][zY], AntiDm[i][zZ]))
			return true;

	return false;			    
}

stock ShowDamageTextDrawForPlayer(playerid, hitplayerid, idweapon, Float:amount)
{
	if(playerid == -1 or playerid == 65535)
		return false;

    GetWeaponName(idweapon, global_str, 32);
    if(!idweapon) global_str = "Fist";

	if(SettingData[hitplayerid][sdDamageInformer]) {

		f(global_str, 50 ,"%s - %s -%.2f", PN(playerid), global_str, amount);
		PlayerTextDrawSetString(hitplayerid, td_damage[hitplayerid][1], global_str);
		ShowPlayerTD(hitplayerid, td_damage[hitplayerid][1]);
	}

	if(SettingData[playerid][sdDamageInformer]) {

		f(global_str, 50 ,"%s - %s +%.2f", PN(hitplayerid), global_str, amount);
		PlayerTextDrawSetString(playerid, td_damage[playerid][0], global_str);
		ShowPlayerTD(playerid, td_damage[playerid][0]);
	}

    return CallTimeOutFunction("@HideDamageTD", 5000, false, "ii", playerid, hitplayerid);
}

public: @HideDamageTD(playerid, hitplayerid)
{
	PlayerTextDrawHide(hitplayerid, td_damage[hitplayerid][1]);
    return PlayerTextDrawHide(playerid, td_damage[playerid][0]);
}

stock getDayEx()
{
    new hour, minuite, second, year, month, day, w = Global_Time, saturday = 1310155200, day_week;
    gettime(hour, minuite, second);
	getdate(year, month, day);
	while(w - saturday > 60 * 60 * 24)
    {
        w -= 60 * 60 * 24;
        day_week ++;
    }
    while(day_week >= 7) day_week -= 7;
	return day_week;
}

public: AloginAuth(playerid, password[])
{	
	if(!GetString(AdminInfo[playerid][admPassword], password))
		return SCMF(playerid, COLOR_OLDRED, "[Ошибка] {ffffff}Если вы забыли пароль от админки, напиши в тех раздел на форуме! (%s)", Setting_Server[4]);
		
	AdminInfo[playerid][admInterior] = -1;
	cache_get_value_name_int(0, "admid", AdminInfo[playerid][admID]);

	SAMF(-1, "[A] %s {FFFFFF}%s вошел в систему администратирования%s", Admin_Names[PI[playerid][pAdmin]], PN(playerid), GetString(AdminInfo[playerid][admTag], "None") ? "" : (str_f(" {FFFFFF}(Его тег: {%s}%s{FFFFFF})", AdminInfo[playerid][admTagColor], AdminInfo[playerid][admTag])));
	SCMF(playerid, -1, "[A] Вы успешно авторизовались как %s%s", Admin_Names[PI[playerid][pAdmin]], GetString(AdminInfo[playerid][admTag], "None") ? "" : (str_f(" {FFFFFF}(Ваш тег: {%s}%s{FFFFFF})", AdminInfo[playerid][admTagColor], AdminInfo[playerid][admTag])));
	amlf("А: <a href=../pages/user?id=%d>%s</a> авторизировался в %d уровень админки", 5, PN(playerid), "", PI[playerid][pID], PN(playerid), PI[playerid][pAdmin]);
			 	
	f(global_str, 144, "UPDATE admin SET last_connect = CURDATE() WHERE name = '%s' LIMIT 1", PN(playerid));
	mysql_tquery(mysql, global_str, "", "");

	for(new i; i < 53; i++) 
		EnableAntiCheatForPlayer(playerid, i, 0);

	Iter_Add(Admin, playerid);
	AdminInfo[playerid][admIP] =
 	ADuty{playerid} = true;
 	callcmd::apanel(playerid);

    if(!AcceptAdm{playerid})
	{
		SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Наблюдается попытка взлома!");
		f(global_str, 150, "%s[%d] подозревается во взломе, проверьте его и авторизируйте /acceptadmin [6+ lvl]", PN(playerid), playerid);
		SendAdminsMessage(COLOR_OLDRED, global_str);
 	}
 	
 	return false;
}

public: OnCheckStatsAdmin(playerid, name[])
{
	new IntData;
	
	static StringData[24]; StringData[0] = EOS;
	
	if(cache_num_rows() == 0)
		return SCM(playerid, COLOR_GREY , "Адмнистратора несуществует.");
	
	f(global_str, 100, "{FFFFFF}Имя:\t\t\t\t\t\t{8d41b0}%s", name);
	cache_get_value_name_int(0, "level", IntData);
	f(global_str, 150, "%s\n{FFFFFF}Адмнистративный уровень: {8d41b0}\t\t\t%d", global_str, IntData);
	cache_get_value_name(0, "data", StringData);
	f(global_str, 200, "%s\n{FFFFFF}Назначен: {8d41b0}\t\t\t\t\t%s", global_str, StringData);
	cache_get_value_name(0, "put_admin", StringData);
	f(global_str, 250, "%s\n{FFFFFF}Назначил: {8d41b0}\t\t\t\t\t%s", global_str, StringData);
	cache_get_value_name(0, "last_connect", StringData);
	f(global_str, 300, "%s\n{FFFFFF}Последнее подключение: {8d41b0}\t\t\t%s", global_str, StringData);
	
	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Статистика администратора", global_str, "x", "");
}

public: @ListAllAdmins(playerid)
{
	if(!cache_num_rows())
		return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Список всех администраторов", !"{FFFFFF}Ничего не найдено", !"Закрыть", "");

	global_str = "";
	static aname[MAX_PLAYER_NAME], alastcon[20], adata[20]; new alevel;
	strcat(global_str, "{FFFF00}Ник\t{FFFF00}Уровень админа\t{FFFF00}Последний вход\t{FFFF00}Поставлен\n");
	for(new i; i < cache_num_rows(); i++)
	{
	    cache_get_value_name(i, "name", aname, MAX_PLAYER_NAME);
		cache_get_value_name_int(i, "level", alevel);
		cache_get_value_name(i, "last_connect", alastcon, 20);
		cache_get_value_name(i, "data", adata, 20);
		f(global_str, sizeof(global_str), "%s{FFFFFF}%s\t%d\t%s\t%s\n", global_str, aname, alevel, alastcon, adata);
	}
	SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"Список всех администраторов", global_str, !"Закрыть", !"");
	return 1;
}

public: BuyAdm(playerid, level)
{
	if(cache_num_rows())
	{
		f(global_str, 200, "[A] %s[%d] приобрел повышение админ-прав с %d уровня на %d уровень", PN(playerid), playerid, PI[playerid][pAdmin], level);
	    SendAdminsMessage(COLOR_YELLOW, global_str);
	    PI[playerid][pAdmin] = level;
	    mysql_format(mysql, global_str, 250, "UPDATE admin SET level = %d WHERE name = '%s'", level, PN(playerid));
		mysql_tquery(mysql, global_str, "", "");
		mysql_format(mysql, global_str, 250, "UPDATE accounts SET Admin = %d WHERE NickName = '%s'", level, PN(playerid));
		mysql_tquery(mysql, global_str, "", "");
	}
	else
	{	
		mysql_format(mysql, global_str, 350, "INSERT INTO admin (name,level,last_connect,put_admin,data) VALUES ('%s',%d,CURDATE(),'Server',CURDATE())", PN(playerid), level);
		mysql_tquery(mysql, global_str, "", "");
		mysql_format(mysql, global_str, 150, "UPDATE accounts SET Admin = %d WHERE NickName = '%s'", level, PN(playerid));
		mysql_tquery(mysql, global_str, "", "");
		f(global_str, 145, "[A] %s[%d] приобрел админ-права. Уровень полномочий %i", PN(playerid), playerid, level);
		SendAdminsMessage(COLOR_YELLOW, global_str);
		PI[playerid][pAdmin] = level;
	}
	return 1;
}

public: SetAdmin(playerid, name[], level)
{
	new targetid = GetPlayerID(name), prev_level;

	if(!(targetid == INVALID_PLAYER_ID))
		PI[targetid][pAdmin] = level;
			
	if(cache_num_rows())
	{	
		cache_get_value_name_int(0, "level", prev_level);

		if(!level)
			mysql_format(mysql, global_str, 150, "DELETE FROM admin WHERE name = '%s'", name),
			mysql_tquery(mysql, global_str, "", ""),
			SQL("UPDATE accounts SET `AWarns` = '0', `Reputation` = '0' WHERE NickName = BINARY('%s') LIMIT 1;", name);
		else
			mysql_format(mysql, global_str, 256, "UPDATE admin SET level = %d WHERE name = '%s' LIMIT 1", level, name),
			mysql_tquery(mysql, global_str, "", "");
	}
	else 
		mysql_format(mysql, global_str, 350, "INSERT INTO admin (name,level,last_connect,put_admin,data) VALUES ('%s',%d,CURDATE(),'%s',CURDATE())", name, level, PN(playerid)),
		mysql_tquery(mysql, global_str, "", "");
	
	SQL("UPDATE accounts SET Admin = %d WHERE NickName = BINARY('%s') LIMIT 1;", level, name);
	
	SetString(mysql_string, Admin_Names[level]);
	strdel(mysql_string, 0 , 8);
	if(playerid != -1) SCMF(playerid, COLOR_LIGHTBLUE, "Вы выдали %s %d-й уровень администратирования [%s]", name, level, mysql_string);
	format(global_str, 256, "[MakeAdmin] %s установил %d [%s] уровень администратора игроку %s (был: %d ур)", playerid == -1 ? (str_f("Нейросеть %sVkBot[666]", Setting_Server[7])) : (str_f("Администратор %s[%i]", PN(playerid), playerid)), level, mysql_string, name, prev_level);	
	return SendAdminsMessage(COLOR_OLDRED, global_str);
}

stock RemovePlayerWeapon(playerid, weaponid)
{
    if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50)
        return;

    new saveweapon[13], saveammo[13];

    for(new slot = 0; slot < 13; slot++)
        GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
    
	ResetPlayerWeapons(playerid);
    
	for(new slot; slot < 13; slot++)
    {
        if(saveweapon[slot] == weaponid || saveammo[slot] == 0)
            continue;
        GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
    }

    GivePlayerWeapon(playerid, 0, 1);
}

stock UpdateInvSlotVehicle(playerid, slotId)
{
	new vehicleid = GetVehicleID(GetPlayerVehicleID(playerid)),
		item = CarInfo[vehicleid][cInvCell][20 + slotId];

	if(!slotId && IsPlayerTextDrawVisible(playerid, InvTextDraws[playerid][2]))
		PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);

	else { if(IsPlayerTextDrawVisible(playerid, CarInvTextDraws[playerid][slotId == 1 ? 8 : 9])) PlayerTextDrawHide(playerid, CarInvTextDraws[playerid][slotId == 1 ? 8 : 9]); }

	PlayerTextDrawBackgroundColor(playerid, !slotId ? InvTextDraws[playerid][2] : CarInvTextDraws[playerid][slotId == 1 ? 8 : 9], ItemsInfo[item][itemColor]),
	PlayerTextDrawSetPreviewModel(playerid, !slotId ? InvTextDraws[playerid][2] : CarInvTextDraws[playerid][slotId == 1 ? 8 : 9], ItemsInfo[item][itemModel]),
	PlayerTextDrawSetPreviewRot(playerid, !slotId ? InvTextDraws[playerid][2] : CarInvTextDraws[playerid][slotId == 1 ? 8 : 9], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][1], ItemsInfo[item][itemRotation][2], ItemsInfo[item][itemRotation][3]);

	if(item && ItemsInfo[item][itemCustom])
		UpdateCarSlotTD(playerid, !slotId ? InvTextDraws[playerid][2] : CarInvTextDraws[playerid][slotId == 1 ? 8 : 9], 20 + slotId, CarInvText[playerid][20 + slotId], CarInvLevel[playerid][20 + slotId], true);

	return true;
}

stock SetInventorySkin(playerid, slotId = -1)
{
	if(!InventoryOpen{playerid}) return false;
	
	if(!IsPlayerInHisVehicle(playerid))
 	{
		new skinmodel = GetPlayerSkin(playerid);
		f(global_str, 15, "ID: %d", GetSkinInfo(skinmodel, 2));
		if(skinmodel == 18) global_str = ""; 
	
		PlayerTextDrawSetString(playerid, InvTextDraws[playerid][1], global_str);
		PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][2], skinmodel == 18 ? 1649 : 2386);
		PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][2], skinmodel == 18 ? 0.000000 : 346.000000, 0.000000, skinmodel == 18 ? 90.000000 : 129.000000, skinmodel == 18 ? 2.000000 : 0.900000);
		PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], skinmodel == 18 ? 0x333333FF : ItemsInfo[GetSkinInfo(GetSkinInfo(skinmodel, 2), 1)][itemColor]);
		PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][3], skinmodel);
		PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);

		if(PlayerModification[playerid])
			PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][2], ItemsInfo[PlayerModification[playerid]][itemModel]),
			PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][2], ItemsInfo[PlayerModification[playerid]][itemRotation][0], ItemsInfo[PlayerModification[playerid]][itemRotation][1], ItemsInfo[PlayerModification[playerid]][itemRotation][2], ItemsInfo[PlayerModification[playerid]][itemRotation][3]);
	
		PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], true);
	}
	else
	{
		DestroyPlayerTD(playerid, InvTextDraws[playerid][1]);
		PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][3], GetVehicleModelEx(GetPlayerVehicleID(playerid)));
		PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][3], 352.000000, 345.000000, 20.000000, 1.032325);
		PlayerTextDrawSetPreviewVehCol(playerid, InvTextDraws[playerid][3], VehicleInfo[GetPlayerVehicleID(playerid)][vColor_1], VehicleInfo[GetPlayerVehicleID(playerid)][vColor_2]);
	
		PlayerTextDrawSetPreviewModel(playerid, InvTextDraws[playerid][2], 1649);
		PlayerTextDrawSetPreviewRot(playerid, InvTextDraws[playerid][2], 0.000000, 0.000000, 0.000000, 0.000000);
		PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF);

		for(new i; i < 3; i++)
		{
			UpdateCarSlotTD(playerid, (slotId == -1 ? !i : !slotId) ? InvTextDraws[playerid][2] : CarInvTextDraws[playerid][(slotId == -1 ? i : slotId) == 1 ? 8 : 9], 20 + (slotId == -1 ? i : slotId), CarInvText[playerid][20 + (slotId == -1 ? i : slotId)], CarInvLevel[playerid][20 + (slotId == -1 ? i : slotId)], true);
			if(slotId != -1) break;
		}
	}

	for(new i; i < 3; i++)
		ShowPlayerTD(playerid, InvTextDraws[playerid][i + 1]);

	return true;
}

stock CreateInventoryAcessory(playerid, Float:X, Float:Y)
{	
	new td = 0;
	
	for(new i; i < 3; i++)
	{
		for(new s; s < 3; s++)
		{
			td = s + i * 3;

			if(td > 7) continue;
			
			else if(td == 6) X += 10.645019;
			
			InvItemSlot[playerid][td] = CreatePlayerTextDraw(playerid, X - (79.377472 - 22.290009 * s) + 2.047593 * pTemp[playerid][inventorySize][0] + pTemp[playerid][inventorySize][0] * s, Y + 29.100006 + 25.629639 * i + 0.799988 * pTemp[playerid][inventorySize][1] + pTemp[playerid][inventorySize][1] * i, "LD_SPAC:white");
			
			PlayerTextDrawLetterSize(playerid, InvItemSlot[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, InvItemSlot[playerid][td], 21.290020 + pTemp[playerid][inventorySize][0], 24.629631 + pTemp[playerid][inventorySize][1]);
			PlayerTextDrawAlignment(playerid, InvItemSlot[playerid][td], 1);
			PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, InvItemSlot[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, InvItemSlot[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, InvItemSlot[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, InvItemSlot[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, InvItemSlot[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, InvItemSlot[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, InvItemSlot[playerid][td], 1);
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], 1649);
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], 0.000000, 0.000000, 0.000000, 0.000000);
		}
	}	

	return true;
}

stock UpdateInventoryAcessory(playerid, td)
{
    if(!InventoryOpen{playerid} && !(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1))
		return false;
	
	new OG = AksSlot[playerid][0][td];

	DestroyPlayerTD(playerid, InvColorSlot[playerid][td]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][td]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][8 + td]);
	
	if(!IsPlayerInHisVehicle(playerid))
	{
		if(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)
		{
			switch td do
			{
				case 0..5: executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":2,\"items\":[{\"slot\":%i%s}]}}]`);", td, !OG ? "" : (str_f(",\"item\":%i,\"amount\":1,\"text\":\"%s\",\"background\":%i,\"available\":1,\"time\":0", OG, !AksSlot[playerid][1][td] ? "" : (str_f("+%i", AksSlot[playerid][1][td])), ItemsInfo[OG][itemColor])))));
				case 6, 7: executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":17,\"items\":[{\"slot\":%i%s}]}}]`);", td == 7 ? 0 : 1, !OG ? "" : (str_f(",\"item\":%i,\"amount\":1,\"text\":\"%s\",\"background\":%i,\"available\":1,\"time\":0", OG, !AksSlot[playerid][1][td] ? "" : (str_f("+%i", AksSlot[playerid][1][td])), ItemsInfo[OG][itemColor])))));
			}
		}
		else
		{
			PlayerTextDrawFont(playerid, InvItemSlot[playerid][td], (ItemsInfo[OG][itemCustom] == 2 && ItemsInfo[OG][itemAccesotySlot] != -1) ? 100 : 5);
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], ItemsInfo[OG][itemModel]);
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], ItemsInfo[OG][itemRotation][0], ItemsInfo[OG][itemRotation][1], ItemsInfo[OG][itemRotation][2], ItemsInfo[OG][itemRotation][3]);
			PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], ItemsInfo[OG][itemColor]);
				
			if(OG > 0 and (td == 6 && (PI[playerid][pMoney] < 5000000 || !SettingData[playerid][sdCaseDisplay]))) 
				PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0x999999FF);
			
			else if(OG && AksSlot[playerid][2][td] <= 10)
				PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xde8787FF);

			else 
				PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);

			if(OG)
				UpdateCellAccesory(playerid, td, InvItemSlot[playerid][td], InvLevelSlot[playerid][td], InvColorSlot[playerid][td], InvLevelSlot[playerid][8 + td], 0.0, 0.0);
		}
	}
	else
	{
		new item = CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][td];

		if(!CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][td] or ItemsInfo[item][itemModel] == -1)
		{
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], 1649);
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], ItemsInfo[0][itemRotation][0], ItemsInfo[0][itemRotation][1], ItemsInfo[0][itemRotation][2], ItemsInfo[0][itemRotation][3]);
			PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], 0x333333FF);
		}
		else
			PlayerTextDrawSetPreviewModel(playerid, InvItemSlot[playerid][td], ItemsInfo[item][itemModel]),
			PlayerTextDrawSetPreviewRot(playerid, InvItemSlot[playerid][td], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][1], ItemsInfo[item][itemRotation][2], ItemsInfo[item][itemRotation][3]),
			PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][td], ItemsInfo[item][itemColor]),
			PlayerTextDrawColor(playerid, InvItemSlot[playerid][td], 0xFFFFFFFF);
	}

	return ShowPlayerTD(playerid, InvItemSlot[playerid][td]);
}

stock GetInvSet(playerid)
{
	new count;
	for(new i; i < PI[playerid][pInvCell]; i++)
 		if(Inventory[playerid][0][i]) count++;

	return count;
}

cmd:cheeps(playerid) eatcheeps(playerid);
stock eatcheeps(playerid)
{
	if(GetCount(playerid, 512) < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет чипсов!");
	if(PI[playerid][pHeal])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);

	new Float:Health;
	GetPlayerHealth(playerid,Health);
	f(global_str, 100, "%s скушал(а) пачку чипсов", PN(playerid));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	if(Fullness[playerid] <= 95) GiveFullness(playerid,2);
	else SetFullness(playerid, 100);
	DeleteItem(playerid, 512, 1);
	ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
    return 1;
}
cmd:jfish(playerid)
{
    if(GetCount(playerid, 549) < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет жареной рыбы!");
    if(PI[playerid][pHeal])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}В больнице нельзя!");

    if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Между использованием предметов должно пройти 3 секунды!");
    SetPVarInt(playerid, !"itemtime", Global_Time+3);

	new Float:Health;
	GetPlayerHealth(playerid,Health);
	f(global_str, 100, "%s съел(а) жареную рыбу", PN(playerid));
	ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	if(Fullness[playerid] <= 95) GiveFullness(playerid,4);
	else SetFullness(playerid, 100);
	DeleteItem(playerid, 549, 1);
	return ApplyAnimationEx(playerid,"FOOD","EAT_Burger",4.1,0,0,0,0,0,1);
}

stock GiveColorCell(playerid)
{
	ColorSlotReset(playerid);
	
	new incar = IsPlayerInAnyVehicle(playerid), item = Inventory[playerid][0][PickInvent[playerid]];
	  
	if(!incar)
	{
		if(IsASkinInv(item))
		{
			PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0xd67373FF);
			PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
			PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);
			ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
			timeskin[playerid] = 1;
		}
		else if(IsAAks(item)) 
			timeaks[playerid] = ItemsInfo[item][itemAccesotySlot];
	}
	
	else
	{
		switch item do
		{
			case 554, 5797:
			{
				PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0xd67373FF);
				PlayerTextDrawSetSelectable(playerid, InvTextDraws[playerid][2], 1);
				PlayerTextDrawHide(playerid, InvTextDraws[playerid][2]);
				timeskin[playerid] = 2;
				return ShowPlayerTD(playerid, InvTextDraws[playerid][2]);
			}

			case 2354..2370, 7034, 7366, 7367:
			{
				PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][item == 7034 ? 9 : 8], 0xd67373FF);
				PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][item == 7034 ? 9 : 8], 1);
				PlayerTextDrawHide(playerid, CarInvTextDraws[playerid][item == 7034 ? 9 : 8]);
				timeskin[playerid] = (item == 7034 ? 4 : 3);
				return ShowPlayerTD(playerid, CarInvTextDraws[playerid][item == 7034 ? 9 : 8]);
			}
		}

		new vehicle = GetPlayerVehicleID(playerid), veh = GetVehicleID(vehicle);
		if(GetWheelDisks(ItemsInfo[item][itemModel]) != -1 or (item >= 7747 && item <= 7751) or IsALimitedKangaroo(item) or item == 4125 or item == 6518 or TextFind(ItemsInfo[item][itemName], "[деталь тюнинга]") or TextFind(ItemsInfo[item][itemName], "Капот для ") or TextFind(ItemsInfo[item][itemName], "Спойлер для ") or TextFind(ItemsInfo[item][itemName], "Выхлоп для ") or (item >= 2324 && item <= 2353) or (item >= 2563 && item <= 2579) or (item >= 7123 && item <= 7133))
		{
			new carcell = -1;
			if(GetWheelDisks(ItemsInfo[item][itemModel]) != -1)
			{
				for(new i; i < sizeof(WheelDisks); i++) 
					if(GetMassiveArray(CarInfo[veh][cInvCell], WheelDisks[i][1][0]) != -1) 
					{ 
						carcell = GetMassiveArray(CarInfo[veh][cInvCell], WheelDisks[i][1][0]); 
						break; 
					}
			}
			else
				carcell = GetFreeSlotCarInv(veh, (item >= 2324 && item <= 2353) ? 10 : 0);

			if(carcell == -1) 
				return false;

			timeaks[playerid] = carcell;
			PlayerTextDrawBackgroundColor(playerid, CarInvSlot[playerid][carcell], 0xd67373FF);
			PlayerTextDrawSetSelectable(playerid, CarInvSlot[playerid][carcell], 1);
			PlayerTextDrawHide(playerid, CarInvSlot[playerid][carcell]);

			return ShowPlayerTD(playerid, CarInvSlot[playerid][carcell]);
		}
	}

	if(timeaks[playerid] == -1 || Int_GetPlayerData(playerid, "DialogOpen")) return false;
	PlayerTextDrawBackgroundColor(playerid, InvItemSlot[playerid][timeaks[playerid]], 0xd67373FF);
	ShowPlayerTD(playerid, InvItemSlot[playerid][timeaks[playerid]]);
	return PlayerPlaySound(playerid, 6801, 0, 0, 0);
}

stock ColorSlotReset(playerid)
{
	if(timeskin[playerid])
		PlayerTextDrawBackgroundColor(playerid, InvTextDraws[playerid][2], 0x333333FF),
		ShowPlayerTD(playerid, InvTextDraws[playerid][2]),
		timeskin[playerid] = false;

	if(timeaks[playerid] == -1) return false;

	new td = timeaks[playerid];

	if(IsPlayerInHisVehicle(playerid))
	{
		PlayerTextDrawBackgroundColor(playerid, CarInvSlot[playerid][td], 0x333333FF);
		timeaks[playerid] = -1;
		return ShowPlayerTD(playerid, CarInvSlot[playerid][td]);
	}

	return UpdateInventoryAcessory(playerid, td), timeaks[playerid] = -1;
}

stock closeuse(playerid)
{
	for(new i = 0; i < 35; i++)
	{
		if(i < 8) DestroyPlayerTD(playerid, InvItemSlot[playerid][i]), DestroyPlayerTD(playerid, InvColorSlot[playerid][i]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][i]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][8 + i]);
		if(i < 7) for(new s; s < 3; s++) DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][i][s]);
		DestroyPlayerTD(playerid,InvTextDraws[playerid][i]);
		if(i < 7) DestroyPlayerTD(playerid, TDinv[playerid][i]);
		if(i < 18) DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
	}
	CancelSelectTextDraw(playerid);
	return PI[playerid][pInvPage] = 0;
}

stock ChangeModification(playerid)
{
	new slot = PickInvent[playerid];

	if(PlayerModification[playerid])
		AddItem(playerid, PlayerModification[playerid], 1);

	if(!(slot == InventoryMaxSlot+1))
	{
		PlayerModification[playerid] = Inventory[playerid][0][slot];
		Inventory[playerid][0][slot] = Inventory[playerid][1][slot] = false;
		InventSlotUpdate(playerid, PickInventSlot[playerid], slot);
	}
	else PlayerModification[playerid] = false;
	timeskin[playerid] = false;
	SetPlayerSkinEx(playerid, PI[playerid][pSkin][0]);
	UpdatePlayerDataInt(playerid, "ModificationPlayer", PlayerModification[playerid]);
	return false;
}

stock ChangeInventorySkin(playerid, slot_id = -1)
{
	if((PickInvent[playerid] == InventoryMaxSlot + 1 && !(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)) or IsPlayerInHisVehicle(playerid)) 
		return false;

    new id = (slot_id == -1 ? PickInvent[playerid] : slot_id), slot = PickInventSlot[playerid], skin = PI[playerid][pSkin][0];
	
	PI[playerid][pSkin][0] = ItemsInfo[Inventory[playerid][0][id]][itemModel];
	Inventory[playerid][0][InventoryMaxSlot-1] = GetSkinInfo(PI[playerid][pSkin][0], 1);
	Inventory[playerid][3][InventoryMaxSlot-1] = Inventory[playerid][3][id];
	Inventory[playerid][4][InventoryMaxSlot-1] = Inventory[playerid][4][id];

	SaveInventory(playerid);
	UpdatePlayerDataInt(playerid, "Skin", PI[playerid][pSkin][0]);
	
	if(skin != 18)
		Inventory[playerid][0][id] = GetSkinInfo(skin, 1), Inventory[playerid][1][id] = 1, Inventory[playerid][3][id] = Inventory[playerid][3][InventoryMaxSlot-1], Inventory[playerid][4][id] = Inventory[playerid][4][InventoryMaxSlot-1];
	else
		Inventory[playerid][0][id] = Inventory[playerid][1][id] = Inventory[playerid][3][id] = Inventory[playerid][4][id] = 0;

	if(GetPlayerLauncher(playerid) == 1 && PI[playerid][pCustomInterface][4])
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory',`[{\"action\":1,\"data\":{\"skin\":{\"model\":%i,\"background\":%i},\"security\":1}}]`);", ItemsInfo[GetSkinInfo(PI[playerid][pSkin], 1)][itemModel], ItemsInfo[GetSkinInfo(PI[playerid][pSkin], 1)][itemColor]))),
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":22,\"items\":[{\"slot\":0%s}]}}]`);", PI[playerid][pSkin] == 18 ? "" : (str_f(",\"item\":%i,\"amount\":1,\"text\":\"ID:%i\",\"available\":1,\"time\":0", GetSkinInfo(PI[playerid][pSkin], 1), PI[playerid][pSkin]))))), UpdateCellInventory(playerid, 0, 0, slot_id);

	else timeskin[playerid] = 0, InventSlotUpdate(playerid, slot, id);

	return SetPlayerSkinEx(playerid, PI[playerid][pSkin][0]);
}

stock ChangeModificationCar(playerid)
{
	if(!IsPlayerInHisVehicle(playerid)) return false;

    new veh = GetPlayerVehicleID(playerid),
		vehicle = GetVehicleID(veh),
		id = PickInvent[playerid],
		slot = PickInventSlot[playerid],
		slotId = (timeskin[playerid] - 2),
		number_text[4][24];

	if(!(id == InventoryMaxSlot+1))
	{
		switch(timeskin[playerid])
		{
			case 2,3,4:
			{
				new modif = CarInfo[vehicle][cInvCell][20 + slotId];
				CarInfo[vehicle][cInvCell][20 + slotId] = Inventory[playerid][0][id];

				if(modif)
				{
					if(timeskin[playerid] == 4)
						sscanf(VehicleInfo[veh][vNumber], "P<,>a<s[24]>[4]", number_text);

					AddItem(playerid, modif, 1, 0, strval(number_text[3]), 0, -1, 0, (str_f("%s|%s|%s", number_text[0], number_text[1], number_text[2])));
				}
				
				if(timeskin[playerid] == 4)
				{
					SetString(VehicleInfo[veh][vNumber], (str_f("%s,%s,%s,%i", InventoryNumber[playerid][0][id], InventoryNumber[playerid][1][id], InventoryNumber[playerid][2][id], Inventory[playerid][3][id])));
					sscanf(VehicleInfo[veh][vNumber], "P<,>a<s[24]>[4]", number_text);
					SetVehicleNumberPlates(veh, strval(number_text[3]) + 1, number_text[0], number_text[strval(number_text[3]) == 4 ? 2 : 1]);
					sendPlayerBattlepassAction(playerid, 83);
				}
				else OtherInstallTun(veh, CarInfo[vehicle][cInvCell][20 + slotId], slotId, !CarInfo[vehicle][cInvCell][20 + slotId] ? 1:0);

				ClearItem(playerid, GetInvID(playerid, slot, 0), 1);
				InventSlotUpdate(playerid, slot, id);
			}
		}
	}
	else if(!timeskin[playerid])
	{
		for(new s; s < 3; s++)
			if(CarInfo[vehicle][cInvCell][20 + s] && GetPVarInt(playerid, "slotId") == 20 + s) 
				slotId = s;

		if(!CarInfo[vehicle][cInvCell][20 + slotId]) 
			return false;

		if(slotId == 2)
			sscanf(VehicleInfo[veh][vNumber], "P<,>a<s[24]>[4]", number_text);

		OtherInstallTun(veh, CarInfo[vehicle][cInvCell][20 + slotId], slotId, 1),
		AddItem(playerid, CarInfo[vehicle][cInvCell][20 + slotId], 1, 0, strval(number_text[3]), 0, -1, 0, (str_f("%s|%s|%s", number_text[0], number_text[1], number_text[2])));
		CarInfo[vehicle][cInvCell][20 + slotId] = 0;
	}

	timeskin[playerid] = 0;
	return SetInventorySkin(playerid, slotId), SaveOwnableCar(vehicle);
}

stock SaveInvCar(vehicleid)
	return SQL("UPDATE `ownable` SET InvCell = '%s' WHERE ID = '%d'", Int_PackMassive(0, CarInfo[GetVehicleID(vehicleid)][cInvCell]), CarInfo[GetVehicleID(vehicleid)][cID]);

stock PutVehAcc(playerid, vehicleid, click)
{
	new id = GetInvID(playerid, click, 0), vehId = GetVehicleID(vehicleid), carcell = GetFreeSlotCarInv(vehId, (Inventory[playerid][0][id] >= 2324 && Inventory[playerid][0][id] <= 2353) ? 10 : 0);

	if(GetWheelDisks(ItemsInfo[Inventory[playerid][0][id]][itemModel]) != -1)
		for(new i; i < sizeof(WheelDisks); i++)
			if(GetMassiveArray(CarInfo[vehId][cInvCell], WheelDisks[i][1][0]) != -1) { carcell = GetMassiveArray(CarInfo[vehId][cInvCell], WheelDisks[i][1][0]); AddItem(playerid, CarInfo[vehId][cInvCell][carcell], 1, CarInfo[vehId][cInvCellColor][carcell]); break; }

	for(new i; i < sizeof(kangarooVehicleInfo); i++)
		if(GetMassiveArray(CarInfo[vehId][cInvCell], kangarooVehicleInfo[i][kItemId]) != -1)
			{ carcell = GetMassiveArray(CarInfo[vehId][cInvCell], kangarooVehicleInfo[i][kItemId]); AddItem(playerid, CarInfo[vehId][cInvCell][carcell], 1); break; }

    if(2324 <= Inventory[playerid][0][id] <= 2353)
		if(GetMassiveArray(CarInfo[vehId][cInvCell], Inventory[playerid][0][id]) >= 10 && GetHandlingItemType(Inventory[playerid][0][id]) == GetHandlingItemType(CarInfo[vehId][cInvCell][GetMassiveArray(CarInfo[vehId][cInvCell], Inventory[playerid][0][id])]))
            carcell = GetMassiveArray(CarInfo[vehId][cInvCell], Inventory[playerid][0][id]), AddItem(playerid, CarInfo[vehId][cInvCell][carcell], 1);

	CarInfo[vehId][cInvCell][carcell] = Inventory[playerid][0][id];
	CarInfo[vehId][cInvCellColor][carcell] = Inventory[playerid][2][id];

	ClearItem(playerid, id, Inventory[playerid][1][id]);
	UpdateCarSlotTD(playerid, CarInvSlot[playerid][carcell], carcell, CarInvText[playerid][carcell], CarInvLevel[playerid][carcell]);
	OtherInstallTun(vehicleid, CarInfo[vehId][cInvCell][carcell], -1, 0, CarInfo[vehId][cInvCellColor][carcell]);

	return InventSlotUpdate(playerid, click, id), SaveOwnableCar(vehId);
}

stock PutAcc(playerid, td, ac, slot_id = -1)
{
    if(GetInvSet(playerid) >= PI[playerid][pInvCell] && AksSlot[playerid][0][ac])
    	return InventSlotUpdate(playerid, td, PickInvent[playerid]), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
		
	new id = (slot_id != -1 ? slot_id : GetInvID(playerid, td, 0));
    AksDel[playerid][ac] = 0;
	
	if(AksSlot[playerid][0][ac])
   		DeletePlayerAccessory(playerid, ac);
	
	AksSlot[playerid][0][ac] = Inventory[playerid][0][id];
	AksSlot[playerid][1][ac] = Inventory[playerid][4][id];
	AksSlot[playerid][2][ac] = Inventory[playerid][5][id];
	AksSlot[playerid][3][ac] = Inventory[playerid][2][id];
	AksSlot[playerid][4][ac] = Inventory[playerid][3][id];
 	
	SetPlayerAccessory(playerid, AksSlot[playerid][0][ac], ac);
	UpdateInventoryAcessory(playerid, ac);

	if(ac == 6)
		SetPVarInt(playerid, !"updateArmourTime", 25 + randomF(5, 10));
	
	if(addskate[playerid] && AksSlot[playerid][0][ac] == 421 && IsPlayerAttachedSlotUsedEx(playerid, 6))
		RemovePlayerAttachedObject(playerid, 6), addskate[playerid] = 0;
	
	ClearItem(playerid, id, 1);
	timeaks[playerid] = -1;
	PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
    ApplyAnimationEx(playerid,"goggles","goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);

	return SaveInventory(playerid);
}

stock GetCount(playerid, id)
{
	new s;
	for(new z; z < PI[playerid][pInvCell]; z++) if(Inventory[playerid][0][z] == id && !InventSlotUse[playerid][z]) s = s + Inventory[playerid][1][z];
	return s;
}

public: IsPlayerInWater(playerid)
{
	new Float:FXF_wpos[3];
    GetPlayerPos(playerid,FXF_wpos[0],FXF_wpos[1],FXF_wpos[2]);
    if((FXF_wpos[2] > 0.00) || IsPlayerInZone(playerid,1808.2019,1424.5392,-2230.5024,-2347.7979)) { return 0; }
    else if((FXF_wpos[2] < 0.00) && (FXF_wpos[2] > -1.00)) { return 1; }
    else if(FXF_wpos[2] < -1.00) { return 2; }
    return 0;
}

public: IsPlayerInZone(playerid, Float:minX, Float:minY, Float:maxX, Float:maxY)
{
    new Float:FXF_ZoneX, Float:FXF_ZoneY, Float:FXF_ZoneZ;
    GetPlayerPos(playerid, FXF_ZoneX, FXF_ZoneY, FXF_ZoneZ);

    if((FXF_ZoneX >= minX && FXF_ZoneX <= maxX) && (FXF_ZoneY >= minY && FXF_ZoneY <= maxY) && FXF_ZoneZ <= 500)
        return 1;
    
    return 0;
}

cmd:trade(playerid, data[])
{
	if(PI[playerid][pLevel] < 2) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Функция обмена товарами доступна со 2-го уровня.");
	else if(!(GetDataTrade(playerid, tradePlayer) == INVALID_PLAYER_ID)) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы уже с кем-то торгуетесь!");
	
	extract data -> new player:target; else
		return SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Используй: /trade [ID]");

	//if(!IsPlayerOnline(target) or !ProxDetectorS(10.0, playerid, target, 1) or playerid == target) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы далеко от игрока!");

	if(!SettingData[target][sdActionTrade]) 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Данный игрок отключил возможность предложения об обмене!");
	
	if(PI[playerid][pDemorgan] or PI[target][pDemorgan])
    	return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не можете обмениваться/передавать вещи в этом месте!");

	else if(tradeopen{playerid} or tradeopen{target}) return false;
	
	else if(!(GetDataTrade(target, tradePlayer) == INVALID_PLAYER_ID)) return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Игрок уже торгует!");
	
	else if(GetDataTrade(target, tradeLastTime) > Global_Time) return SCMF(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Игрок совсем недавно совершал торговлю. Подождите ещё %d секунд", GetDataTrade(target, tradeLastTime) - Global_Time);
	
	SCMF(playerid, COLOR_YELLOW, "Вы предложили %s[%d] совершить торговлю, ожидайте ответа!", PN(target), target);

	SetDataTrade(target, tradeTime, 10);
	SetDataTrade(target, tradeAccept, 0);
	SetDataTrade(target, tradePlayer, playerid);
	SetDataTrade(playerid, tradePlayer, target);
	SetDataTrade(playerid, tradeSendTrade, true);
	SetDataTrade(target, tradeTimer, CallTimeOutFunction("UpdateTrade", 1000, true, "d", target));
	sendPlayerBattlepassAction(playerid, 103);
	return SPDF(target, 7372, DIALOG_STYLE_MSGBOX, !"{AFAFAF}Торговля", "{FFFFFF}Игрок %s[%d] предлагает вам торговлю.\nУ вас есть 10 секунд на ответ", !"Принять", !"Отмена", PN(playerid), playerid);
}

public: UpdateTrade(playerid)
{
	new id = GetDataTrade(playerid, tradePlayer), time = GetDataTrade(playerid, tradeTime) - 1;
	
	if(!IsPlayerConnected(playerid) or !IsPlayerConnected(id)) time = 0;
	
	SetDataTrade(playerid, tradeTime, time);

	switch time do
	{
		case 1..10: SPDF(playerid, 7372, DIALOG_STYLE_MSGBOX, !"{AFAFAF}Торговля", "{FFFFFF}Игрок %s[%d] предлагает вам торговлю.\nУ вас есть %d секунд на ответ", !"Принять", !"Отмена", PN(id), id, time);
		default: AcceptTrade(playerid, false);
	}
}

stock AcceptTrade(playerid, bool:status = false)
{
	if(!status)
	{
		new target = GetDataTrade(playerid, tradePlayer);
		SetDataTrade(playerid, tradeTime, 0);
		SetDataTrade(playerid, tradeAccept, 0);

		if(!(target == INVALID_PLAYER_ID))
			SetDataTrade(target, tradePlayer, INVALID_PLAYER_ID),
			SCMF(target, COLOR_YELLOW, "Игрок %s[%d] отказался от вашего предложения торговли.", PN(playerid), playerid);

		SetDataTrade(playerid, tradePlayer, INVALID_PLAYER_ID);
		ShowPlayerDialog(playerid, -1, 0, " ", " ", " ", " ");
	}
	return KillTimer(GetDataTrade(playerid, tradeTimer));
}
	
stock ShowTrade(playerid, targetid, Float:rX, Float:rY)
{
	if(tradeopen{playerid}) return false;

	HideTrade(playerid);

	tradeopen{playerid} = true;	

	#include <textdraws/cataloges/TradeTextDraws>
	PlayerTextDrawSetString(playerid, TradeTD[playerid][17], PN(playerid));
	PlayerTextDrawSetString(playerid, TradeTD[playerid][10], PN(targetid));

	for(new i; i < sizeof(TradeTD[]); i++) 
		ShowPlayerTD(playerid, TradeTD[playerid][i]);
			
	for(new i, td; i < 4; i++)
	{
		for(new s; s < 5; s++)
		{
			td = s + i * 5;
			
			PlayerTextDrawLetterSize(playerid, KletkaTrade[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, KletkaTrade[playerid][td], 25.500000 + rX, 29.500000 + rY);
			PlayerTextDrawAlignment(playerid, KletkaTrade[playerid][td], 1);
			PlayerTextDrawColor(playerid, KletkaTrade[playerid][td], 0x999999FF);
			PlayerTextDrawUseBox(playerid, KletkaTrade[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, KletkaTrade[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, KletkaTrade[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, KletkaTrade[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, KletkaTrade[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, KletkaTrade[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, KletkaTrade[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, KletkaTrade[playerid][td], false);
			PlayerTextDrawSetPreviewModel(playerid, KletkaTrade[playerid][td], 1649);
			PlayerTextDrawSetPreviewRot(playerid, KletkaTrade[playerid][td], 0.000000, 0.000000, 90.000000, 2.000000);

			ShowPlayerTD(playerid, KletkaTrade[playerid][td]);
		}
	}

	ShowInventoryPage(playerid, 485.299988 - 5.799865 * pTemp[playerid][inventorySize][0], 138.642853, E_INVENTORY_TYPE_TRADE);
	SelectTextDraw(playerid, PI[playerid][pSelectTD]);
	return true;
}

stock HideTrade(playerid, reason = 0)
{
	tradeopen{playerid} = false;

	for(new i, slot; i < sizeof(TradeTD[]); i++) 
	{
		DestroyPlayerTD(playerid, TradeTD[playerid][i]);
		if(i < 20)
			DestroyPlayerTD(playerid, KletkaTrade[playerid][i]),
			DestroyPlayerTD(playerid, KletkaTradeText[playerid][i]),
			DestroyPlayerTD(playerid, KletkaTradeText[playerid][20 + i]),
			DestroyPlayerTD(playerid, KletkaTradeLevel[playerid][i]);

		if(i < 10)
		{
			slot = TradeInfo[playerid][tradeItem][i];
			if(!(slot == -1) && InventSlotUse[playerid][slot])
				InventSlotUse[playerid][slot] = false;
			
			TradeInfo[playerid][tradeItem][i] = 
			TradeInfo[playerid][tradeItemCount][i] = -1;
		}
	}

	if(reason)
	{
		SCM(playerid, COLOR_OLDRED, "Вы отменили сделку");
		new target = GetDataTrade(playerid, tradePlayer);
		if(!(target == INVALID_PLAYER_ID))
			SCMF(target, COLOR_OLDRED, "%s[%d] отменил сделку", PN(playerid), playerid),
			HideTrade(target), CancelSelectTextDraw(target),
			SetDataTrade(target, tradePlayer, INVALID_PLAYER_ID),
			SetDataTrade(target, tradeSendTrade, false);
		
		SetDataTrade(playerid, tradeSendTrade, false);
		SetDataTrade(playerid, tradePlayer, INVALID_PLAYER_ID);

		CancelSelectTextDraw(playerid);
	}

	SetDataTrade(playerid, tradeSEND, 0);
	SetDataTrade(playerid, tradeSendId, 0);
	
	HideInventoryPage(playerid);
	return SetDataTrade(playerid, tradeLastTime, Global_Time + 10);
}

stock ClearTrade(playerid)
{
	SetDataTrade(playerid, tradeAccept, 0);
	SetDataTrade(playerid, tradeTime, 0);
	SetDataTrade(playerid, tradeSendTrade, false);
	return SetDataTrade(playerid, tradePlayer, INVALID_PLAYER_ID);
}

stock TradeSlotUpdate(playerid, td, item, slot)
{
	for(new i; i < 2; i++)
	{
		if(i == 1)
			td += 10, playerid = GetDataTrade(playerid, tradePlayer);

		PlayerTextDrawFont(playerid, KletkaTrade[playerid][td], ItemsInfo[item][itemCustom] == 2 ? 100 : 5);

		PlayerTextDrawSetPreviewModel(playerid, KletkaTrade[playerid][td], IsASkinInv(item) && ItemsInfo[item][itemModel] > 311 ? GetSkinInfo(ItemsInfo[item][itemModel]) : ItemsInfo[item][itemModel]),
		PlayerTextDrawSetPreviewRot(playerid, KletkaTrade[playerid][td], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][1], ItemsInfo[item][itemRotation][2], ItemsInfo[item][itemRotation][3]);

		PlayerTextDrawSetSelectable(playerid, KletkaTrade[playerid][td], !item ? false : true);
		PlayerTextDrawColor(playerid, KletkaTrade[playerid][td], !item ? 0x999999FF : 0xFFFFFFFF);
		PlayerTextDrawBackgroundColor(playerid, KletkaTrade[playerid][td], ItemsInfo[item][itemColor]);

		if(item) UpdateCellInventory(playerid, 5, td, slot, KletkaTrade[playerid][td], KletkaTradeText[playerid][td], KletkaTradeLevel[playerid][td], false, KletkaTradeText[playerid][20 + td]);
		else DestroyPlayerTD(playerid, KletkaTradeText[playerid][td]), DestroyPlayerTD(playerid, KletkaTradeText[playerid][20 + td]), DestroyPlayerTD(playerid, KletkaTradeLevel[playerid][td]);

		ShowPlayerTD(playerid, KletkaTrade[playerid][td]);
	}
	return true;
}

cmd:balon(playerid, params[])
{
	if(GetCount(playerid, 7332) < 1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет балончика с краской");
	SPD(playerid,2393,1, "Введите цвет","{FFFFFF}Введите цвет 1 и цвет 2 через запятую\n{9ACD32}- Пример: {0AD6FF}132,132","Далее", !"Отмена");
	return 1;
}
cmd:checkinv(playerid, params[])
{
	new id;
    if(sscanf(params,"d",id)) return SCM(playerid, COLOR_OLDRED, !"Используй: /checkinv [id]");
    if(!pTemp[id][tAuthorized]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрока нет в сети!");
    CheckItemInv(playerid, id);
	return 1;
}

stock CheckItemInv(playerid, giveplayerid)
{
	global_str = "{ffcd66}[слот] Название\t{ffcd66}Количество\n";
	
	
	for(new i; i < PI[playerid][pInvCell]; i ++)
	{
		if(!Inventory[giveplayerid][0][i])
			continue;
		
		if(Inventory[giveplayerid][1][i] == 1)
			f(global_str, sizeof(global_str), "%s\n{FFFFFF}[%d] %s%s\t \n", global_str, i, ItemsInfo[Inventory[giveplayerid][0][i]][itemName], Inventory[giveplayerid][4][i] ? (str_f(" (+%d)", Inventory[giveplayerid][4][i])):"");
		else 
			f(global_str, sizeof(global_str), "%s\n{FFFFFF}[%d] %s%s\t{9090dd}[%d шт.]\n", global_str, i, ItemsInfo[Inventory[giveplayerid][0][i]][itemName], Inventory[giveplayerid][4][i] ? (str_f(" (+%d)", Inventory[giveplayerid][4][i])):"", Inventory[giveplayerid][1][i]);
	}
	
	format(mysql_string, 64, "{b59d4f}%s [ID:%d]", PN(giveplayerid), giveplayerid);
	
	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, mysql_string, global_str, !"Выход", !"");
}

cmd:removeitem(playerid, data[])
{
   	extract data -> new player:id, slot; else 
		return SCM(playerid, COLOR_OLDRED, "Используй: /removeitem [id] [slot]");
	
	slot -= 1;

	if(!IsPlayerOnline(id))
		return false;

	else if(GetInvSet(playerid) >= PI[playerid][pInvCell])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

	else if(!(0 <= slot <= PI[id][pInvCell])) 
		return false;
	
	else if(!Inventory[id][0][slot])
		return false;
	
	SCMF(id, COLOR_RED, "Администратор %s забрал у вас %s (%d шт.)", PN(playerid), ItemsInfo[Inventory[id][0][slot]][itemName], Inventory[id][1][slot]);
	SCMF(playerid, COLOR_GREEN, "Вы успешно забрали у %s %s (%d шт.) из слота %d!", PN(id), ItemsInfo[Inventory[id][0][slot]][itemName], Inventory[id][1][slot], slot + 1 );
	SAMF(COLOR_OLDRED, "[%s] забрал у игрока %s[%d] предмет %s (%d шт.) из слота %d", PN(playerid), PN(id), id, ItemsInfo[Inventory[id][0][slot]][itemName], Inventory[id][1][slot], slot + 1);
	
	AddItem(playerid, Inventory[id][0][slot], Inventory[id][1][slot], Inventory[id][2][slot], Inventory[id][3][slot], Inventory[id][4][slot], Inventory[id][5][slot]);
	Inventory[id][0][slot] = Inventory[id][1][slot] = Inventory[id][2][slot] = Inventory[id][3][slot] = Inventory[id][4][slot] = Inventory[id][5][slot] = Inventory[id][6][slot] = 0;

	SaveInventory(id), SaveInventory(playerid);
  	
	return true;
}

cmd:removeinv(playerid, data[])
{
	extract data -> new player:id; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /removeinv [id игрока]");

	if(!IsPlayerOnline(id))
		return false;

	for(new i; i < PI[id][pInvCell]; i++) ClearItem(id, i, Inventory[id][1][i]);
	
	SCMF(playerid, -1, "Действие выполнено, вы удалили инвентарь игроку %s", PN(id));
	SCMF(id, COLOR_OLDRED, "[Информация] {FFFFFF}Ваш инвентарь был полностью очищен за нарушение правил сервера! [%s]", PN(playerid));
	
	format(global_str, 150, "Администратор %s очистил инвентарь %s", PN(playerid), PN(id));
	SendAdminsMessage(COLOR_GREY, global_str);
	
	return SaveInventory(id);
}

stock SaveInventory(playerid)
{
	if(!IsPlayerOnline(playerid)) 
		return false;

	SQL("UPDATE `accounts` SET `InventoryItem` = '%s', `InventoryCount` = '%s', `InventoryColor` = '%s', `InventoryId` = '%s', `InventoryEnchant` = '%s', `InventoryMending` = '%s', `InventoryTimer` = '%s' WHERE `ID` = '%d'", Int_PackMassive(0, Inventory[playerid][0]), Int_PackMassive(1, Inventory[playerid][1]), Int_PackMassive(2, Inventory[playerid][2]), Int_PackMassive(3, Inventory[playerid][3]), Int_PackMassive(4, Inventory[playerid][4]), Int_PackMassive(5, Inventory[playerid][5]), Int_PackMassive(6, Inventory[playerid][6]), PI[playerid][pID]);

    return SavePlayerAccessory(playerid);
}

stock SaveNumbers(playerid)
{
	global_str[0] = EOS, SQL_STRING[0] = EOS, mysql_string[0] = EOS;

	for(new i; i < InventoryMaxSlot; i ++)
	{
		f(global_str, sizeof(global_str), "%s%s,", global_str, strlen(InventoryNumber[playerid][0][i]) > 0 ? InventoryNumber[playerid][0][i] : "0");
		f(SQL_STRING, sizeof(SQL_STRING), "%s%s,", SQL_STRING, strlen(InventoryNumber[playerid][1][i]) > 0 ? InventoryNumber[playerid][1][i] : "0");
		f(mysql_string, sizeof(mysql_string), "%s%s,", mysql_string, strlen(InventoryNumber[playerid][2][i]) > 0 ? InventoryNumber[playerid][2][i] : "0");
	}

	return SQL("UPDATE `accounts` SET `InventoryNumber` = '%s', `InventoryNumberRegion` = '%s', `InventoryNumberRegionType` = '%s' WHERE `ID` = '%d'", global_str, SQL_STRING, mysql_string, PI[playerid][pID]);
}
	
stock SaveMasiveTimer(playerid)
{
	global_str = "";

	for(new i; i < 7; i++)
		f(global_str, 400, "%s%d,", global_str, GetMasiveTimer(playerid, i));
	
	return SQL("UPDATE `accounts` SET `SecondTimers` = '%s' WHERE `ID` = '%d'", global_str, PI[playerid][pID]);
}

stock GetMasiveTimer(playerid, int)
	return PlayerTimerItem[playerid][int];

stock NullMasiveTimer(playerid)
{
	for(new i; i < 7; i++)
		PlayerTimerItem[playerid][i] = 0;

	return false;
}

stock RewardSet(playerid, id, value)
{
	if(RewardDone[playerid][id]) 
		return false;

	RewardProgress[playerid][id] += value;

	if(RewardProgress[playerid][id] > Reward[id][rewCount]) 
		RewardProgress[playerid][id] = Reward[id][rewCount];

	if(Reward[id][rewCount] == RewardProgress[playerid][id]) 
		RewardDone[playerid][id] = 1, AddItem(playerid, 731, Reward[id][rewPrize]);

	SaveRewards(playerid);
	return 0;
}

new testErInv;

stock SaveRewards(playerid)
{
	f(global_str, 150, "SELECT * FROM `rewards` WHERE `Name` = '%s'",PN(playerid));
	new Cache:result = mysql_query(mysql, global_str);
	
	new value = cache_num_rows();
	
	if(!value)
		SQL("INSERT INTO `rewards` (`Name`,`QuestProgress`,`QuestDone`) VALUES ('%s','%s','%s')", PN(playerid), Int_PackMassive(0, RewardProgress[playerid]), Int_PackMassive(1, RewardDone[playerid]));
	else 
		SQL("UPDATE `rewards` SET `QuestProgress`='%s', `QuestDone`='%s' WHERE `Name` = '%s'", Int_PackMassive(0, RewardProgress[playerid]), Int_PackMassive(1, RewardDone[playerid]), PN(playerid));
		
	cache_delete(result);
	
    return 0;
}

public: LoadRewards(playerid)
{
	new value = cache_num_rows();
	if(!value) return 1;

	global_str = "";
   	cache_get_value_name(0, !"QuestProgress", global_str), sscanf(global_str, "p<,>a<i>[25]", RewardProgress[playerid]);
	cache_get_value_name(0, !"QuestDone", global_str), sscanf(global_str, "p<,>a<i>[25]", RewardDone[playerid]);
	return 1;
}

stock SavePlayerAccessory(playerid)
	return SQL("UPDATE `accounts` SET `AccessoryItem` = '%s', `AccessoryEnchant` = '%s', `AccessoryMending` = '%s', `AccessoryColor` = '%s', `AccessoryStripe` = '%s' WHERE `ID` = %d;", Int_PackMassive(0, AksSlot[playerid][0]), Int_PackMassive(1, AksSlot[playerid][1]), Int_PackMassive(2, AksSlot[playerid][2]), Int_PackMassive(3, AksSlot[playerid][3]), Int_PackMassive(4, AksSlot[playerid][4]), PI[playerid][pID]);

stock ShowInvent(playerid)
{
	if(!GetInventoryType(playerid, E_INVENTORY_TYPE_NONE)) 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вас уже открыт инвентарь!");

	else if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		AksDel[playerid][5] = 1, RemovePlayerAttachedObject(playerid, 5), SpeedometrSetting(playerid);

	InventoryOpen{playerid} = true;

	if(GetPlayerLauncher(playerid) == 1 && PI[playerid][pCustomInterface][4])
		sendInventoryCEF(playerid), InventoryPage[playerid] = E_INVENTORY_TYPE_PLAYER;

	else
	{
		for(new s,i; s < PI[playerid][pInvCell]; s++)
		{
			i = GetInvID(playerid, s, 1);
			if(Inventory[playerid][1][i] < 1) Inventory[playerid][1][i] = Inventory[playerid][0][i] = 0;
			if(!Inventory[playerid][0][i] && Inventory[playerid][1][i]) Inventory[playerid][1][i] = 0;
			if(s < 8) DestroyPlayerTD(playerid, InvItemSlot[playerid][s]), DestroyPlayerTD(playerid, InvColorSlot[playerid][s]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][s]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][8 + s]);
			if(s < 35) DestroyPlayerTD(playerid, InvTextDraws[playerid][s]);
			if(s < 18) DestroyPlayerTD(playerid, InventMenuTD[playerid][s]);
			if(s < 7) 
			{
				for(new j; j < 3; j++) DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][s][j]);

				DestroyPlayerTD(playerid, TDinv[playerid][s]); 
			}
			if(s < 36) 
			{
				DestroyPlayerTD(playerid, Kletka[playerid][s]);
				DestroyPlayerTD(playerid, KletkaText[playerid][s]);
				DestroyPlayerTD(playerid, KletkaText[playerid][36 + s]);
				DestroyPlayerTD(playerid, KletkaLevel[playerid][s]);
			}
			if(s < 5) TextDrawHideForPlayer(playerid, Logotype[s]), DestroyPlayerTD(playerid, InvPageTD[playerid][s]);
		}

		SetPVarInt(playerid, "Kletki", 0);
		PI[playerid][pInvPage] = 0;

		if(!testErInv)
			ShowInventoryTextDraw(playerid, testErInv ? 507.351745 : 462.401703, testErInv ? 166.962860 : 101.500000);

		ShowInventoryPage(playerid, testErInv ? 485.251709 : 629.401672, testErInv ? 181.850891 : 101.500000);

		PickInvent[playerid] = InventoryMaxSlot+1;
		timeaks[playerid] = -1;
		SelectTextDraw(playerid, PI[playerid][pSelectTD]);
	}

	Int_SetPlayerData(playerid, !"InvLastOpen", Global_Time + 2);
	return SetPlayerChatBubble(playerid, !"Заглянул в карман.", COLOR_PURPLE, 10.0, 1500);
}

stock GetInventoryType(playerid, type)
	return (InventoryPage[playerid] == type);

stock UpdateCarSlotTD(playerid, PlayerText:td, slot, &PlayerText:td_text, &PlayerText:td_text2, bool:upper_slot = false)
{
	new item = CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][slot];
	PlayerTextDrawSetPreviewModel(playerid, td, ItemsInfo[item][itemModel]),
    PlayerTextDrawSetPreviewRot(playerid, td, ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][1], ItemsInfo[item][itemRotation][2], ItemsInfo[item][itemRotation][3]);
	PlayerTextDrawBackgroundColor(playerid, td, ItemsInfo[item][itemColor]);
	UpdateCellInventory(playerid, 4, GetVehicleID(GetPlayerVehicleID(playerid)), slot, td, td_text, td_text2, upper_slot);
	return ShowPlayerTD(playerid, td);
}

stock ShowInventoryTextDraw(playerid, Float:X, Float:Y)
{
	#include textdraws/inventory
	
	if(!IsPlayerInHisVehicle(playerid) or VehicleInfo[IsPlayerInHisVehicle(playerid)][vFamily] != -1)
 	{
	    PlayerTextDrawSetStringf(playerid, InvTextDraws[playerid][12], "HP: %.0f", PI[playerid][pHealth]);
	   	PlayerTextDrawSetStringf(playerid, InvTextDraws[playerid][13], "ARM: %.0f", PI[playerid][pArmour]);
		CreateInventoryAcessory(playerid, X, Y);
	}
	else
	{
		CarInvTextDraws[playerid][0] = CreatePlayerTextDraw(playerid, X - 121.401703, Y + 29.100006, "hud:radar_centre");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][0], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][0], 7.889803, 6.820000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][0], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][0], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][0], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][0], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][0], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][0], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][0], 4);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][0], 1);

		CarInvTextDraws[playerid][1] = CreatePlayerTextDraw(playerid, X - 74.161041, Y + 31.282013, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][1], 0.000000, 0.279798);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][1], 348.889801, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][1], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][1], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][1], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][1], 0x6C7B9570);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][1], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][1], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][1], 0);

		CarInvTextDraws[playerid][2] = CreatePlayerTextDraw(playerid, X - 109.469177, Y + 31.282013, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][2], 0.000000, 0.279798);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][2], 348.889801, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][2], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][2], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][2], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][2], 0x56BF4CFF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][2], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][2], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][2], 0);

		CarInvTextDraws[playerid][3] = CreatePlayerTextDraw(playerid, X - 121.401703, Y + 38.920013, "hud:radar_SWEET");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][3], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][3], 7.889803, 6.820000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][3], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][3], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][3], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][3], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][3], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][3], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][3], 4);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][3], 1);

		CarInvTextDraws[playerid][4] = CreatePlayerTextDraw(playerid, X - 74.161041, Y + 41.10202, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][4], 0.000000, 0.279798);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][4], 348.889801, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][4], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][4], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][4], 0x6C7B9570);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][4], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][4], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][4], 0);

		CarInvTextDraws[playerid][5] = CreatePlayerTextDraw(playerid, X - 75.257568, Y + 41.10202, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][5], 0.000000, 0.279798);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][5], 348.889801, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][5], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][5], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][5], 0x407088FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][5], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][5], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][5], 0);

		CarInvTextDraws[playerid][6] = CreatePlayerTextDraw(playerid, X - 124.879669 + 0.115997 * pTemp[playerid][inventorySize][0], Y + 112.274292 + 3.494263 * pTemp[playerid][inventorySize][1], SettingData[playerid][sdLanguage] ? FixText("ТЕХНИЧЕСКИЕ МОДИФИКАЦИИ"):"TECHNICAL MODIFICATION");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][6], 0.158629 + 0.005028 * pTemp[playerid][inventorySize][0], 0.793143 + 0.025143 * pTemp[playerid][inventorySize][1]);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][6], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][6], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][6], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][6], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][6], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][6], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][6], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][6], 0);
		
		CarInvTextDraws[playerid][7] = CreatePlayerTextDraw(playerid, X - 124.879669 + 0.115997 * pTemp[playerid][inventorySize][0], Y + 181.674286 + 5.694275 * pTemp[playerid][inventorySize][1], SettingData[playerid][sdLanguage] ? FixText("ВИЗУАЛЬНЫЕ МОДИФИКАЦИИ"):"VISUAL MODIFICATION");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][7], 0.158629 + 0.005028 * pTemp[playerid][inventorySize][0], 0.793143 + 0.025143 * pTemp[playerid][inventorySize][1]);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][7], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][7], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][7], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][7], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][7], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][7], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][7], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][7], 0);

		SetPosTD(playerid, InvTextDraws[playerid][2], X - 118.877472, Y + 86.633331);

		CarInvTextDraws[playerid][8] = CreatePlayerTextDraw(playerid, X - 100.377472, Y + 86.633331, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][8], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][8], 17.000000, 19.666666);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][8], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][8], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][8], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][8], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][8], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][8], 0x333333FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][8], 5);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][8], 1);
		PlayerTextDrawSetPreviewModel(playerid, CarInvTextDraws[playerid][8], 1649);
		PlayerTextDrawSetPreviewRot(playerid, CarInvTextDraws[playerid][8], 0.000000, 0.000000, 90.000000, 2.000000);

		CarInvTextDraws[playerid][9] = CreatePlayerTextDraw(playerid, X - 81.877472, Y + 86.633331, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][9], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][9], 17.000000, 19.666666);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][9], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][9], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][9], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][9], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][9], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][9], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][9], 0x333333FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][9], 5);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][9], 1);
		PlayerTextDrawSetPreviewModel(playerid, CarInvTextDraws[playerid][9], 1649);
		PlayerTextDrawSetPreviewRot(playerid, CarInvTextDraws[playerid][9], 0.000000, 0.000000, 90.000000, 2.000000);
				
		for(new i, td; i < 4; i++)
		{
			for(new s; s < 5; s++)
			{
				td = s + i * 5;

				CarInvSlot[playerid][td] = CreatePlayerTextDraw(playerid, X - 126.140717 + ( 24.715943 + 1.136841 * pTemp[playerid][inventorySize][0] ) * s, 
				Y + (td >= 10 ? 123.180008 : 192.580017) + ( 26.498993 + 0.821991 * pTemp[playerid][inventorySize][1] ) * (i - (i > 1 ? 2 : 0)) + (td >= 10 ? 4.661957 : 6.039978) * pTemp[playerid][inventorySize][1], "LD_SPAC:white");
				PlayerTextDrawLetterSize(playerid, CarInvSlot[playerid][td], 0.480000, 1.120000);
				PlayerTextDrawTextSize(playerid, CarInvSlot[playerid][td], 23.727299 + 1.09132 * pTemp[playerid][inventorySize][0], 25.439032 + 0.789106 * pTemp[playerid][inventorySize][1]);
				PlayerTextDrawAlignment(playerid, CarInvSlot[playerid][td], 1);
				PlayerTextDrawColor(playerid, CarInvSlot[playerid][td], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, CarInvSlot[playerid][td], 0);
				PlayerTextDrawBoxColor(playerid, CarInvSlot[playerid][td], 0x80808080);
				PlayerTextDrawSetShadow(playerid, CarInvSlot[playerid][td], 2);
				PlayerTextDrawSetOutline(playerid, CarInvSlot[playerid][td], 0);
				PlayerTextDrawBackgroundColor(playerid, CarInvSlot[playerid][td], 0x333333FF);
				PlayerTextDrawFont(playerid, CarInvSlot[playerid][td], 5);
				PlayerTextDrawSetProportional(playerid, CarInvSlot[playerid][td], 1);
				PlayerTextDrawSetSelectable(playerid, CarInvSlot[playerid][td], 1);
			}
		}
		
		CarInvTextDraws[playerid][10] = CreatePlayerTextDraw(playerid, X - 61.198334, Y + 34.677917, "POWER");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][10], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][10], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][10], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][10], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][10], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][10], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][10], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][10], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][10], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][10], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][10], 0);

		CarInvTextDraws[playerid][11] = CreatePlayerTextDraw(playerid, X - 4.452545, Y + 34.677917, (str_f("%1.f", vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(GetPlayerVehicleID(playerid)))][vehicleHandlingData][11] + VehicleInfo[GetPlayerVehicleID(playerid)][vHandling][11])));
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][11], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][11], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][11], 3);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][11], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][11], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][11], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][11], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][11], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][11], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][11], 0);

		CarInvTextDraws[playerid][12] = CreatePlayerTextDraw(playerid, X - 3.152557, Y + 42.243195, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][12], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][12], X - 59.545777 - 3.152557, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][12], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][12], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][12], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][12], 0x555555FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][12], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][12], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][12], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][12], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][12], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][12], 0);

		CarInvTextDraws[playerid][13] = CreatePlayerTextDraw(playerid, X - 54.223755, Y + 42.243195, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][13], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][13], X - 8.474579 - 54.223755, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][13], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][13], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][13], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][13], 0x4287C0FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][13], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][13], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][13], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][13], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][13], 0);
		
		CarInvTextDraws[playerid][14] = CreatePlayerTextDraw(playerid, X - 61.198334, Y + 51.525925, "SUSTAINABILLITY");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][14], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][14], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][14], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][14], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][14], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][14], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][14], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][14], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][14], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][14], 0);

		CarInvTextDraws[playerid][15] = CreatePlayerTextDraw(playerid, X - 4.452545, Y + 51.525925, "250.0");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][15], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][15], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][15], 3);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][15], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][15], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][15], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][15], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][15], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][15], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][15], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][15], 0);

		CarInvTextDraws[playerid][16] = CreatePlayerTextDraw(playerid, X - 3.152557, Y + 59.091202, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][16], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][16], X - 59.545777 - 3.152557, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][16], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][16], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][16], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][16], 0x555555FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][16], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][16], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][16], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][16], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][16], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][16], 0);

		CarInvTextDraws[playerid][17] = CreatePlayerTextDraw(playerid, X - 14.50174, Y + 59.091202, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][17], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][17], X - 48.196594 - 14.50174, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][17], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][17], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][17], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][17], 0x4287C0FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][17], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][17], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][17], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][17], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][17], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][17], 0);

		CarInvTextDraws[playerid][18] = CreatePlayerTextDraw(playerid, X - 61.198334, Y + 68.373917, "VELOCITY");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][18], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][18], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][18], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][18], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][18], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][18], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][18], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][18], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][18], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][18], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][18], 0);

		CarInvTextDraws[playerid][19] = CreatePlayerTextDraw(playerid, X - 4.452545, Y + 68.373917, (str_f("%1.f", vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(GetPlayerVehicleID(playerid)))][vehicleHandlingData][10] + VehicleInfo[GetPlayerVehicleID(playerid)][vHandling][10])));
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][19], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][19], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][19], 3);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][19], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][19], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][19], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][19], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][19], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][19], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][19], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][19], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][19], 0);

		CarInvTextDraws[playerid][20] = CreatePlayerTextDraw(playerid, X - 3.152557, Y + 75.939194, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][20], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][20], X - 59.545777 - 3.152557, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][20], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][20], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][20], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][20], 0x555555FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][20], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][20], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][20], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][20], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][20], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][20], 0);

		CarInvTextDraws[playerid][21] = CreatePlayerTextDraw(playerid, X - 38.724548, Y + 75.939194, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][21], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][21], X - 23.973786 - 38.724548, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][21], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][21], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][21], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][21], 0x4287C0FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][21], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][21], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][21], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][21], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][21], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][21], 0);

		CarInvTextDraws[playerid][22] = CreatePlayerTextDraw(playerid, X - 61.198334, Y + 85.221924, "MAX SPEED");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][22], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][22], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][22], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][22], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][22], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][22], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][22], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][22], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][22], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][22], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][22], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][22], 0);

		CarInvTextDraws[playerid][23] = CreatePlayerTextDraw(playerid, X - 4.452545, Y + 85.221924, (str_f("%1.f", vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(GetPlayerVehicleID(playerid)))][vehicleHandlingData][9] + VehicleInfo[GetPlayerVehicleID(playerid)][vHandling][9])));
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][23], 0.089856, 0.539136);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][23], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][23], 3);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][23], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][23], 0);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][23], 0x80808080);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][23], 0);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][23], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][23], 0x00000000);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][23], 2);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][23], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][23], 0);

		CarInvTextDraws[playerid][24] = CreatePlayerTextDraw(playerid, X - 3.152557, Y + 92.787201, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][24], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][24], X - 59.545777 - 3.152557, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][24], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][24], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][24], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][24], 0x555555FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][24], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][24], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][24], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][24], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][24], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][24], 0);

		CarInvTextDraws[playerid][25] = CreatePlayerTextDraw(playerid, X - 40.892578, Y + 92.787201, "usebox");
		PlayerTextDrawLetterSize(playerid, CarInvTextDraws[playerid][25], 0.000000, 0.375350);
		PlayerTextDrawTextSize(playerid, CarInvTextDraws[playerid][25], X - 21.805756 - 40.892578, 0.000000);
		PlayerTextDrawAlignment(playerid, CarInvTextDraws[playerid][25], 1);
		PlayerTextDrawColor(playerid, CarInvTextDraws[playerid][25], 0xE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CarInvTextDraws[playerid][25], 1);
		PlayerTextDrawBoxColor(playerid, CarInvTextDraws[playerid][25], 0x4287C0FF);
		PlayerTextDrawSetShadow(playerid, CarInvTextDraws[playerid][25], 2);
		PlayerTextDrawSetOutline(playerid, CarInvTextDraws[playerid][25], 0);
		PlayerTextDrawBackgroundColor(playerid, CarInvTextDraws[playerid][25], 0x000000FF);
		PlayerTextDrawFont(playerid, CarInvTextDraws[playerid][25], 0);
		PlayerTextDrawSetProportional(playerid, CarInvTextDraws[playerid][25], 1);
		PlayerTextDrawSetSelectable(playerid, CarInvTextDraws[playerid][25], 0);

		for(new i; i < 28; i++) 
		{
			if(i < 20)
				UpdateCarSlotTD(playerid, CarInvSlot[playerid][i], i, CarInvText[playerid][i], CarInvLevel[playerid][i]);
			
			ShowPlayerTD(playerid, CarInvTextDraws[playerid][i]);
		}
	}
		
	SetInventorySkin(playerid);

	for(new i; i < 8; i++)
		UpdateInventoryAcessory(playerid, i);
	
	return true;
}

stock ShowInventoryPage(playerid, Float:X, Float:Y, type = E_INVENTORY_TYPE_PLAYER)
{ 
	if(!(InventoryPage[playerid] == E_INVENTORY_TYPE_NONE)) CancelSelectTextDraw(playerid);

	InventoryPage[playerid] = type;

	InvBorderTD[playerid][6] = CreatePlayerTextDraw(playerid, X, Y, "usebox");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][6], 0.000000, 27.343161);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][6], X - 166.799957, 0.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][6], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][6], 0x111111FF);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][6], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][6], 0);

	InvBorderTD[playerid][5] = CreatePlayerTextDraw(playerid, X - 159.299957, Y + 5.017044, SettingData[playerid][sdLanguage] ? (FixText("ИНВЕНТАРЬ")) : ("INVENTORY"));
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][5], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][5], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][5], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][5], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][5], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][5], 0);

	InvBorderTD[playerid][4] = CreatePlayerTextDraw(playerid, X, Y + 23.599998, "usebox");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][4], 0.000000, -0.214150);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][4], X - 166.799957, 0.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][4], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][4], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][4], 0);

	InvBorderTD[playerid][3] = CreatePlayerTextDraw(playerid, X - 46.799987, Y + 225.43335, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][3], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][3], 42.500000, 19.666666);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][3], 0xBF5656FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][3], 0);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][3], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][3], 1);

	InvBorderTD[playerid][2] = CreatePlayerTextDraw(playerid, X - 25.549987, Y + 229.983734, SettingData[playerid][sdLanguage] ? (FixText("ЗАКРЫТЬ")) : ("CLOSE"));
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][2], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][2], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][2], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][2], 0);

	InvBorderTD[playerid][1] = CreatePlayerTextDraw(playerid, X - 21.299987, Y + 0.966667, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][1], 17.000000, 19.666666);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][1], 0x111111FF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][1], 1);

	InvBorderTD[playerid][0] = CreatePlayerTextDraw(playerid, X - 12.799987, Y + 5.517044, "S");
	PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][0], 0.188333, 1.056592);
	PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, InvBorderTD[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][0], 0x00000000);
	PlayerTextDrawFont(playerid, InvBorderTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][0], 0);

	InvPageTD[playerid][0] = CreatePlayerTextDraw(playerid, X - 107.049987, Y + 212.600006, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvPageTD[playerid][0], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvPageTD[playerid][0], 9.000000, 10.333333);
	PlayerTextDrawAlignment(playerid, InvPageTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][0], 0x333333FF);
	PlayerTextDrawUseBox(playerid, InvPageTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, InvPageTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvPageTD[playerid][0], 2);
	PlayerTextDrawSetOutline(playerid, InvPageTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, InvPageTD[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, InvPageTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, InvPageTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][0], 0);

	InvPageTD[playerid][1] = CreatePlayerTextDraw(playerid, X - 97.549987, Y + 212.600006, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvPageTD[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvPageTD[playerid][1], 9.000000, 10.333333);
	PlayerTextDrawAlignment(playerid, InvPageTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][1], 0x333333FF);
	PlayerTextDrawUseBox(playerid, InvPageTD[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, InvPageTD[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvPageTD[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, InvPageTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, InvPageTD[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, InvPageTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, InvPageTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][1], 1);

	InvPageTD[playerid][2] = CreatePlayerTextDraw(playerid, X - 88.049987, Y + 212.600006, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvPageTD[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvPageTD[playerid][2], 9.000000, 10.333333);
	PlayerTextDrawAlignment(playerid, InvPageTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][2], PI[playerid][pInvCell] <= 72 ? 0x1A1A1AFF : 0x333333FF);
	PlayerTextDrawUseBox(playerid, InvPageTD[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, InvPageTD[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvPageTD[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, InvPageTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, InvPageTD[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, InvPageTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, InvPageTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][2], PI[playerid][pInvCell] <= 72 ? 0 : 1);

	InvPageTD[playerid][3] = CreatePlayerTextDraw(playerid, X - 78.549987, Y + 212.600006, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvPageTD[playerid][3], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvPageTD[playerid][3], 9.000000, 10.333333);
	PlayerTextDrawAlignment(playerid, InvPageTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][3], PI[playerid][pInvCell] <= 108 ? 0x1A1A1AFF : 0x333333FF);
	PlayerTextDrawUseBox(playerid, InvPageTD[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, InvPageTD[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvPageTD[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, InvPageTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, InvPageTD[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, InvPageTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, InvPageTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][3], PI[playerid][pInvCell] <= 108 ? 0 : 1);

	InvPageTD[playerid][4] = CreatePlayerTextDraw(playerid, X - 69.049987, Y + 212.600006, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, InvPageTD[playerid][4], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, InvPageTD[playerid][4], 9.000000, 10.333333);
	PlayerTextDrawAlignment(playerid, InvPageTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][4], PI[playerid][pInvCell] <= 144 ? 0x1A1A1AFF : 0x333333FF);
	PlayerTextDrawUseBox(playerid, InvPageTD[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, InvPageTD[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, InvPageTD[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, InvPageTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, InvPageTD[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, InvPageTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, InvPageTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][4], PI[playerid][pInvCell] <= 144 ? 0 : 1);
	
	if(type == E_INVENTORY_TYPE_PLAYER or type == E_INVENTORY_TYPE_SHOP) 
	{
		InvBorderTD[playerid][7] = CreatePlayerTextDraw(playerid, X - 162.299957, Y + 225.43335, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][7], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][7], 42.500000, 19.666666);
		PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][7], 1);
		PlayerTextDrawColor(playerid, InvBorderTD[playerid][7], InventColor[PI[playerid][pInvColors]][1]);
		PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][7], 0);
		PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][7], 0x80808080);
		PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][7], 2);
		PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][7], 0);
		PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][7], 0x000000FF);
		PlayerTextDrawFont(playerid, InvBorderTD[playerid][7], 4);
		PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][7], 1);

		InvBorderTD[playerid][8] = CreatePlayerTextDraw(playerid, X - 141.049957, Y + 231.040314, !(HouseEntered[playerid] == -1) ? SettingData[playerid][sdLanguage] ? (FixText("ШКАФ")) : ("WAREHOUSE") : SettingData[playerid][sdLanguage] ? (FixText("СКЛАДСКОЕ ПОМЕЩЕНИЕ")) : ("STORAGE ROOM"));
		PlayerTextDrawLetterSize(playerid, InvBorderTD[playerid][8], 0.150666, 0.845274);
		PlayerTextDrawTextSize(playerid, InvBorderTD[playerid][8], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, InvBorderTD[playerid][8], 2);
		PlayerTextDrawColor(playerid, InvBorderTD[playerid][8], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, InvBorderTD[playerid][8], 0);
		PlayerTextDrawBoxColor(playerid, InvBorderTD[playerid][8], 0x80808080);
		PlayerTextDrawSetShadow(playerid, InvBorderTD[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, InvBorderTD[playerid][8], 0);
		PlayerTextDrawBackgroundColor(playerid, InvBorderTD[playerid][8], 0x00000000);
		PlayerTextDrawFont(playerid, InvBorderTD[playerid][8], 2);
		PlayerTextDrawSetProportional(playerid, InvBorderTD[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, InvBorderTD[playerid][8], 0);

		if(!(HouseEntered[playerid] == -1) && HouseEntered[playerid] + 50 == GetPlayerVirtualWorld(playerid) && GetString(HouseInfo[HouseEntered[playerid]][hOwner], PN(playerid)))
			PlayerTextDrawSetString(playerid, InvBorderTD[playerid][8], SettingData[playerid][sdLanguage] ? (FixText("ШКАФ")) : ("WAREHOUSE"));

		else if(!(musorka[playerid] == -1))
			PlayerTextDrawSetString(playerid, InvBorderTD[playerid][8], SettingData[playerid][sdLanguage] ? (FixText("МУСОРКА")) : ("TRASH"));

        else if(!(pTemp[playerid][pCentralMarketId][1] == -1) && shopopen{playerid})
            PlayerTextDrawSetString(playerid, InvBorderTD[playerid][8], pTemp[playerid][pCentralMarketSelectId] ? (SettingData[playerid][sdLanguage] ? (FixText("СКУПКА")) : ("SALE")) : (SettingData[playerid][sdLanguage] ? (FixText("ПРОДАЖА")) : ("PURCHASE")));

		else
			PlayerTextDrawSetString(playerid, InvBorderTD[playerid][8], ( SettingData[playerid][sdLanguage] ? (FixText("ОХРАННИКИ")) : ("SECURITY") ) );
	}

	for(new i; i < 35; i ++) 
	{
		if(i < 5) ShowPlayerTD(playerid, InvPageTD[playerid][i]);
		if(i < 9) ShowPlayerTD(playerid, InvBorderTD[playerid][i]);
		ShowPlayerTD(playerid, InvTextDraws[playerid][i]);
	}
	
	switch type do
	{
		case E_INVENTORY_TYPE_PLAYER,E_INVENTORY_TYPE_ENCHANT_2: CreateSlotInvent(playerid, testErInv ? 315.294548 : 467.101715, testErInv ? 207.649399 : 127.599998, testErInv);
		default: CreateSlotInvent(playerid, 323.000000 + (5.799865 * - pTemp[playerid][inventorySize][0]), 164.742859);
	}

	return SelectPage(playerid, 0);
}

stock HideInventoryPage(playerid, bool:hide = true)
{
	for(new i; i < 36; i++)
	{
		DestroyPlayerTD(playerid, Kletka[playerid][i]);
		DestroyPlayerTD(playerid, KletkaText[playerid][i]);
		DestroyPlayerTD(playerid, KletkaText[playerid][36 + i]);
		DestroyPlayerTD(playerid, KletkaLevel[playerid][i]);

		if(i < 5) DestroyPlayerTD(playerid, InvPageTD[playerid][i]);

		if(i < 8) 
			DestroyPlayerTD(playerid, InvItemSlot[playerid][i]),
			DestroyPlayerTD(playerid, InvColorSlot[playerid][i]), 
			DestroyPlayerTD(playerid, InvLevelSlot[playerid][i]), 
			DestroyPlayerTD(playerid, InvLevelSlot[playerid][8 + i]);

		if(i < 9) DestroyPlayerTD(playerid, InvBorderTD[playerid][i]);
	}
	if(hide) SystemTextDrawHide(playerid);

	return InventoryPage[playerid] = E_INVENTORY_TYPE_NONE;
}

stock HidePage(playerid)
{
    PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][PI[playerid][pInvPage]], 1);
	PlayerTextDrawColor(playerid, InvPageTD[playerid][PI[playerid][pInvPage]], 0x333333FF);
	PlayerTextDrawHide(playerid, InvPageTD[playerid][PI[playerid][pInvPage]]);
	PlayerTextDrawShow(playerid, InvPageTD[playerid][PI[playerid][pInvPage]]);
    return PI[playerid][pInvPage] = 0;
}

stock SelectPage(playerid, id)
{
	new color = PI[playerid][pColorInv];
	HidePage(playerid);
	PI[playerid][pInvPage] = id;
	PlayerTextDrawSetSelectable(playerid, InvPageTD[playerid][id], 0);
    PlayerTextDrawColor(playerid, InvPageTD[playerid][id], color);
    PlayerTextDrawHide(playerid, InvPageTD[playerid][id]);
    PlayerTextDrawShow(playerid, InvPageTD[playerid][id]);
	return InventSlotUpdate(playerid, 0, 0, 1, id);
}

stock HideInvent(playerid)
{
	for(new i; i < 35; i++)
	{
		DestroyPlayerTD(playerid, InvTextDraws[playerid][i]);
		if(i < 18) DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
		if(i < 7) 
		{
			for(new j; j < 3; j++) DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][i][j]);
   			DestroyPlayerTD(playerid, TDinv[playerid][i]);
		}
		if(i < 8) DestroyPlayerTD(playerid, InvItemSlot[playerid][i]), DestroyPlayerTD(playerid, InvColorSlot[playerid][i]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][i]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][8 + i]);
		
		if(i < 28) DestroyPlayerTD(playerid, CarInvTextDraws[playerid][i]);
		if(i < 20) DestroyPlayerTD(playerid, CarInvSlot[playerid][i]);
        if(i < 23) DestroyPlayerTD(playerid, CarInvText[playerid][i]), DestroyPlayerTD(playerid, CarInvLevel[playerid][i]);

		if(i < 2) selectInventoryAccesUsed[playerid][i] = false;
	}
	
	if(!GetPlayerLauncher(playerid))
		for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, Logotype[i]);

	InventoryOpen{playerid} = false;

	PI[playerid][pInvPage] = PI[playerid][OpenGunMenu] = timeaks[playerid] = timeskin[playerid] = 0;

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		SpeedometrSetting(playerid, 1);
	
 	return HideInventoryPage(playerid);
}

stock UpdateUpgradeSlot(playerid, slot, item, status = 0)
{
	if(!status && !UpgradeSlot[playerid][slot]) 
		return true;

	if(status) 
	{
		if(UpgradeSlot[playerid][slot])
			AddItem(playerid, UpgradeSlot[playerid][slot], 1);
			
		if(5845 <= item <= 5852 or item == 6064 or item == 6089)
			updatePlayerAim(playerid, item == 6064 ? 1 : item == 6089 ? 2 : item - 5842);

		UpgradeSlot[playerid][slot] = item, DeleteItem(playerid, item, 1);
	}
	else 
	{
		if(5845 <= UpgradeSlot[playerid][slot] <= 5852 or UpgradeSlot[playerid][slot] == 6064 or UpgradeSlot[playerid][slot] == 6089)
			updatePlayerAim(playerid, 0);

		AddItem(playerid, UpgradeSlot[playerid][slot], 1), UpgradeSlot[playerid][slot] = 0;
	}
	
	if(PI[playerid][OpenGunMenu]) 
		PlayerTextDrawBackgroundColor(playerid, UpgradeMenuSlot[playerid][slot][0], ItemsInfo[UpgradeSlot[playerid][slot]][itemColor]),
		PlayerTextDrawSetPreviewModel(playerid, UpgradeMenuSlot[playerid][slot][0], ItemsInfo[UpgradeSlot[playerid][slot]][itemModel]),
		PlayerTextDrawSetPreviewRot(playerid, UpgradeMenuSlot[playerid][slot][0], ItemsInfo[UpgradeSlot[playerid][slot]][itemRotation][0], ItemsInfo[UpgradeSlot[playerid][slot]][itemRotation][1], ItemsInfo[UpgradeSlot[playerid][slot]][itemRotation][2], ItemsInfo[UpgradeSlot[playerid][slot]][itemRotation][3]),
		UpdateCellInventory(playerid, UpgradeSlot[playerid][slot], 4, 0, UpgradeMenuSlot[playerid][slot][0], UpgradeMenuSlot[playerid][slot][1], UpgradeMenuSlot[playerid][slot][2], true);
	
	global_str = "";
	for(new i; i < 6; i ++)
		f(global_str, 50, "%s%d,", global_str, UpgradeSlot[playerid][i]);
	
	f(mysql_string, 300, "UPDATE `accounts` SET `UpgradeInventSlots` = '%s' WHERE `ID` = '%d'", global_str, PI[playerid][pID]);
    mysql_tquery(mysql, mysql_string);

	return PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
}

cmd:invent(playerid) 
{
	if(Int_GetPlayerData(playerid, !"InvLastOpen") > Global_Time) return SCMF(playerid, COLOR_RED, "Нельзя так быстро открывать инвентарь, подождите еще %i сек.", Int_GetPlayerData(playerid, !"InvLastOpen") - Global_Time);
	return ShowInvent(playerid);
}

stock GetBoxArray(itemid)
{
	for(new i; i < sizeof(BoxInfo_data); i++)
		if(BoxInfo_data[i][data_ItemID] == itemid) return i;

	return -1;
}

stock GetChestArray(itemid)
{
	for(new i; i < sizeof(ChestInfo_data); i++)
	    if(ChestInfo_data[i][data_ItemID] == itemid) return i;
	    
	return -1;
}

stock SetInventoryTimer(playerid, slot, time)
	return Inventory[playerid][6][slot] = Global_Time + time;

stock UseItem(playerid, td, slot_id = -1)
{
	if CallLocalFunction("@UseItem", "ddd", playerid, td, slot_id) *then
		if(slot_id != -1) UpdateCellInventory(playerid, 0, 0, slot_id); else InventSlotUpdate(playerid, td, PickInvent[playerid]);
	
	return true;
}

public: @UseItem(playerid, td, slot_id)
{
	global_str = "";
		
	new slot = (slot_id == -1 ? PickInvent[playerid] : slot_id), itemid = Inventory[playerid][0][slot];

	if(IsAAks(itemid))
	{
		if(!IsPlayerInAnyVehicle(playerid)) 
			PutAcc(playerid, PickInventSlot[playerid], ItemsInfo[itemid][itemAccesotySlot], slot_id); 
		
		return (slot_id == -1 ? InventSlotUpdate(playerid, td, PickInvent[playerid]) : UpdateCellInventory(playerid, 0, 0, slot_id));
	}

	else if(IsASkinInv(itemid))
	{
		if(!(TeamDuty{playerid} or InJob[playerid] or PI[playerid][pDemorgan])) ChangeInventorySkin(playerid, slot_id);
		return false;
	}

	else if(IsPlayerInAnyVehicle(playerid))
	{
		if(itemid == 554 or (itemid >= 2354 && itemid <= 2370) or itemid == 5797 or itemid == 7034 or itemid == 7366 or itemid == 7367)
			return ChangeModificationCar(playerid);

		if(GetWheelDisks(ItemsInfo[itemid][itemModel]) != -1 or (itemid >= 7747 && itemid <= 7751) or IsALimitedKangaroo(itemid) or TextFind(ItemsInfo[itemid][itemName], "[деталь тюнинга]") or (itemid >= 2324 && itemid <= 2353) or TextFind(ItemsInfo[itemid][itemName], "Капот для ") or TextFind(ItemsInfo[itemid][itemName], "Спойлер для ") or TextFind(ItemsInfo[itemid][itemName], "Выхлоп для ") or itemid == 6518 or itemid == 4125)
			return PutVehAcc(playerid, GetPlayerVehicleID(playerid), PickInventSlot[playerid]);
	}
    
	else if(!ItemsInfo[itemid][itemUseable] && !TextFind(ItemsInfo[itemid][itemName], "Модифицированный прицел") && !TextFind(ItemsInfo[itemid][itemName], "Увеличенный магазин") && !TextFind(ItemsInfo[itemid][itemName], "Нашивка")) 
		return SCM(playerid, COLOR_RED, "[Ошибка]{ffffff} Данный предмет нельзя использовать!");

	switch itemid do
	{
	    case 510:
			return callcmd::usedrugs(playerid, "");
			
		case 512:
			return eatcheeps(playerid);

		case 513:
			callcmd::sprunk(playerid);

		case 514:
			callcmd::beer(playerid);

		case 515:
			callcmd::mask(playerid, "");

		case 516:
			callcmd::fillcar(playerid);

		case 518:
			callcmd::usemed(playerid, "");

		case 520:
			callcmd::repcar(playerid);

		case 521: 
			return fuction_UsePlayerItemArmour(playerid, false);

		case 555..557,1425,7778:
		{
			if(!GetPlayerLauncher(playerid))
				return SCM(playerid, COLOR_VALIK, "[Подсказка] {FFFFFF}Функция доступна играя с официального лаунчера ARIZONA GAMES или ARIZONA MOBILE.");

			cursorPlayer(playerid, GetPlayerLauncher(playerid) == 1 ? 0 : 76, true);

			switch(GetPlayerLauncher(playerid))
			{
				case 1:
					executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', `[\"CrateRoulette\"]`);"), executeEvent(playerid, 0, (str_f("window.executeEvent('event.crate.roulette.initialize', `[{\"name\":\"%s\",\"sysName\":\"%i\",\"items\":[]}]`);", ItemsInfo[itemid][itemName], itemid)));

				case 2: 
					eventMobile(playerid, {76, 0}, (str_f("{\"name\":\"%s\",\"sysName\":\"%i\",\"items\":[]}", ItemsInfo[itemid][itemName], itemid)));
			}

			for(new i; i < sizeof(PrizeInfo_Data); i++) 
			{
				if(PrizeInfo_Data[i][data_UseItemID] != itemid) continue;
				else
				{
					if(GetPlayerLauncher(playerid) == 1) executeEvent(playerid, 0, (str_f("window.executeEvent('event.crate.roulette.addPrizes', `[ {\"name\":\"%s\",\"data\":\"%s шт\",\"sysName\":\"crate\",\"rarity\":%i,\"url\":\"%i.png\",\"description\":\"%s\"}]`);", PrizeInfo_Data[i][data_Named], PrizeInfo_Data[i][data_Amount][1] == -1 ? IntToStr(PrizeInfo_Data[i][data_Amount][0]) : (str_f("%i-%i", PrizeInfo_Data[i][data_Amount][0], PrizeInfo_Data[i][data_Amount][1])), PrizeInfo_Data[i][data_Rarity], PrizeInfo_Data[i][data_Give] == -1 ? 50049 : PrizeInfo_Data[i][data_Give], PrizeInfo_Data[i][data_Named])));
					else eventMobile(playerid, {76, 2}, (str_f("[ {\"name\":\"%s\",\"data\":\"%s\",\"sysName\":\"crate\",\"rarity\":%i,\"url\":\"%i.png\",\"description\":\"%s\"} ]", PrizeInfo_Data[i][data_Named], PrizeInfo_Data[i][data_Amount][1] == -1 ? IntToStr(PrizeInfo_Data[i][data_Amount][0]) : (str_f("%i-%i", PrizeInfo_Data[i][data_Amount][0], PrizeInfo_Data[i][data_Amount][1])), PrizeInfo_Data[i][data_Rarity], PrizeInfo_Data[i][data_Give] == -1 ? 50049 : PrizeInfo_Data[i][data_Give], PrizeInfo_Data[i][data_Named])));
				}
			}

			if(GetPlayerLauncher(playerid) == 1) 
				executeEvent(playerid, 0, "window.executeEvent('event.crate.roulette.finishInitialize', '[ null ]');"), executeEvent(playerid, 0, "window.executeEvent('event.status.roulette.OpenAnimation', `[0]`);");

			else if(GetPlayerLauncher(playerid) == 2) 
				eventMobile(playerid, {76, 3}, "0");

			pTemp[playerid][tRouletteID] = itemid;
		}

		case 558: 
			callcmd::break(playerid, "");

		case 560:
			callcmd::killme(playerid, "");

		case 561:
			callcmd::smoke(playerid, "");

		case 563:
			return SPD(playerid, 2392, 1, !"", !"{FFFFFF}Введите ID {FBAD2F}игрока{FFFFFF}, у которого хотите узнать номер.", !"Принять", !"Отмена");

		case 565:
			return SPD(playerid, 2393, 1, !"Введите цвет", !"{FFFFFF}Введите цвет 1 и цвет 2 через запятую\n{9ACD32}- Пример: {0AD6FF}132,132", !"Далее", !"Отмена");

		case 569:
		{
			if(!GetPlayerLauncher(playerid))
				return SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"", "{ff0000}К сожалению сундук сейчас открыть не получится.\n\n{ffffff}Для того чтобы открывать сундук с {FFF473}Рулетками{FFFFFF}, необходимо\nскачать и зайти в игру через {FFF473}ЛАУНЧЕР ARIZONA GAMES или arizona-mobile{FFFFFF}!\nДля загрузки приложения перейдите на сайт: {5E6EFF}%s{ffffff}!\n\n\nОписание:\n{cccccc}Выдается при регистрации на сервере.\nНельзя продать, выкинуть, обменять.\nМожно открывать каждые 2 часа игры в онлайне. \nПри открытии вы можете получить золотую или серебряную\nили бронзовую рулетки, которые можно крутить прямо в игре.", !"Принять", !"", Setting_Server[3]);

			if(Inventory[playerid][6][slot])
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Время после прошлого использования ещё не прошло!");

			if(GetInvSet(playerid) >= PI[playerid][pInvCell])
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

			if(PI[playerid][pLevel] <= 2)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Открывать этот сундук можно только с 3 уровня!");

			SetInventoryTimer(playerid, slot, 7200);

			new
				roulette_one[] = {555, 556, 557, 1425},
				id = roulette_one[random(sizeof roulette_one)];

			SCMF(playerid, COLOR_VALIK, "[Информация] {ffffff}Вы использовали сундук с рулетками и получили %s рулетку!", id == 555 ? "бронзовую" : id == 556 ? "серебряную" : id == 557 ? "золотую" : "платиновую");
			AddItem(playerid, id);
			sendPlayerBattlepassAction(playerid, 80);

			return SaveInventory(playerid), InventSlotUpdate(playerid, PickInventSlot[playerid], PickInventSlot[playerid]);
		}

		case 603..626, 5845..5852, 5960..5969, 6064, 6089:
		{
			for(new i; i < 6; i++)
			{
				if((itemid >= 5845 && itemid <= 5852 or itemid == 6064 or itemid == 6089) && UpgradeSlot[playerid][i] == itemid)
					return SCM(playerid, COLOR_RED, !"[Ошибка]{ffffff} У вас уже установлен модифицированный прицел!");
			
				UpdateUpgradeSlot(playerid, i, itemid, 1);
				break;
			}
		}

		case 675..729: callcmd::phone(playerid);

		case 7317, 1077, 7323, 770..776, 6368, 5480, 1210, 5829, 5991, 731:
			return SPD(playerid, 12219, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество, которое хотите использовать", !"Принять", !"Отмена"), false;

		case 1073:
		{
			if(Int_GetPlayerData(playerid, !"itemtime") > Global_Time)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Между использованием предметов должно пройти 20 секунд!");

			else
			{
				SetPVarInt(playerid, !"itemtime", Global_Time + 20);
				new telephone = (1000000 + random(8999999));
				AddItem(playerid, 1724, 1, 0, telephone);
				DeleteItem(playerid, 1073, 1);
            }

			return false;
		}

		case 1421: 
			return fuction_UseItemJack(playerid);

		case 1810, 5995:
		{
			new hId = HouseEntered[playerid], type = -1;

			if(hId == -1 or !GetString(PlayerName[playerid], HouseInfo[hId][hOwner]))
				return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы должны находиться в собственном подвале для улучшения!");

			for(new i; i < sizeof(MiningBTCPos); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.5, MiningBTCPos[i][0], MiningBTCPos[i][1], MiningBTCPos[i][2]))
					type = i;
			}	

			spdList(playerid, 0, slot);
			spdList(playerid, 1, type);

			if(type == -1)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, -1652.9841,-249.7372,14.1484))
					return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы должны находиться у стола улучшения/стойки для установки видеокарт в подвале с вентиляцией!");
			
				return SPDF(playerid, 25031, DIALOG_STYLE_MSGBOX, !"Улучшение видеокарты", "{FFFF00}Сейчас уровень производительности видеокарты: %d из 10.\n{FFFF00}За один час работы майнит: %f AZ-RUB.\n\n{FFFFFF}Чем больше уровень производительности, тем больше криптовалюты может намайнить видеокарта.\nЧтобы её улучшить до следующего уровня, необходима смазка для видеокарты,\nеё можно скрафтить в подвале дома или купить на центральном рынке.\n\n{cccccc}Шанс вероятности улучшения видеокарты:\nНа 1-м уровне - 90%%\nНа 2-м уровне - 80%%\nНа 3-м уровне - 70%%\nНа 4-м уровне- 50%%\nНа 5-м уровне - 40%%\nНа 6-м уровне - 30%%\nНа 7-м уровне - 20%%\nНа 8-м уровне - 10%%\nНа 9-м уровне - 5%%\n\n{FFFFFF}Чтобы её улучшить до следующего уровня, необходима смазка для видеокарты,\nеё можно скрафтить в подвале дома или купить на центральном рынке.\n\nВы хотите улучшить выбранную видеокарту?", !"Улучшить", !"Закрыть", Inventory[playerid][3][PickInvent[playerid]], GetMiningBTC(Inventory[playerid][3][PickInvent[playerid]]));
			}
			else
			{
				global_str = "";

				for(new count = 0 + 4 * type; count < (0 + 4 * (type + 1)); count++)
					strcat(global_str, (str_f(!MiningBTC[hId][count][card_level] ? "{ffffff}Полка %d | Свободна\n":"{cccccc}Полка %d | Занята\n", count - 4 * type + 1)));
				
				return SPD(playerid, 25032, DIALOG_STYLE_LIST, !"На какую полку установить видеокарту?", global_str, !"Выбрать", !"Закрыть");
			}
		}

		case 2183..2186, 3621:
		{
    		selectInventoryAccesUsed[playerid][0] = true;
    		selectInventoryAccesSlot[playerid][0] = td;
			selectInventoryAccesType[playerid][0] = (itemid == 3621 ? 5 : itemid-2182); 
    		return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"Сейчас вам нужно выбрать аксессуар, на который вы хотите пришить нашивку.\n\n{cccccc}Обратите внимание, что пришив нашивку вы больше никогда не сможете снять её с аксессуара.\nЧтобы отменить установку нашивки, нажмите на предмет нашивки еще раз или закройте инвентарь.", !"Закрыть", !"");
    	}

		case 4746..4774:
		{
			if(PI[playerid][pCustomDance][itemid-4746]) 
				return SCM(playerid, COLOR_RED, "[Ошибка]{ffffff} У вас уже имеется данная анимация.");

			SCMF(playerid, COLOR_GREEN, "[Информация]{ffffff} Вам успешно была добавлена уникальная анимация '%s' сроком: Бессрочно", ItemsInfo[itemid][itemName]);
			PI[playerid][pCustomDance][itemid-4746] = true;
			return UpdatePlayerDataStr(playerid, "CustomDance", Int_PackMassive(0, PI[playerid][pCustomDance])), ClearItem(playerid, slot, 1);
		}

		case 1935, 5060, 5307, 5308, 5309, 6506, 7693:
		{
			if(PI[playerid][pAddVIP] == FOREVER) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}У вас уже есть вечный ADD VIP.");
			if(itemid == 5060) PI[playerid][pAddVIP] = FOREVER;
			else PI[playerid][pAddVIP] += Global_Time + 3600 * 24 * (itemid == 1935 or itemid == 7693 ? 30 : itemid == 5307 ? 5 : itemid == 5308 ? 10 : itemid == 5309 ? 15 : 3);
			UpdatePlayerDataInt(playerid, "AddVIP", PI[playerid][pAddVIP]);
			return DeleteItem(playerid, itemid), SCMF(playerid, 0x42B02CFF, "Вы активировали сертификат дополнения VIP %s.", itemid == 5060 ? "навсегда" : (str_f("на %i дней", itemid == 1935 or itemid == 7693 ? 30 : itemid == 5307 ? 5 : itemid == 5308 ? 10 : itemid == 5309 ? 15 : 3)));
		}

		case 1854, 3926, 5823/*, 7434*/, 1424, 799:
		{
			if(Inventory[playerid][6][PickInventSlot[playerid]])
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Время после прошлого использования ещё не прошло!");

			new array_id = GetChestArray(itemid), prizeid = ChestInfo_data[array_id][data_Items][random(ChestInfo_data[array_id][data_Random])], ultra = random(100);

			if(itemid == 3926 || itemid == 5823) {
				for(new i; i < 2; i++)
					AddItem(playerid, BoxInfo_data[random(sizeof(BoxInfo_data))][data_ItemID], 1);

				if(itemid == 5823 && ultra >= 1 && ultra <= 20) AddItem(playerid, prizeid, 1);
			}
			else AddItem(playerid, prizeid, 1);

            return SetInventoryTimer(playerid, PickInventSlot[playerid], ChestInfo_data[array_id][data_Timer]), InventSlotUpdate(playerid, PickInventSlot[playerid], PickInventSlot[playerid]);
		}
		case 5787..5789:
		{	
			if(!GetPlayerLauncher(playerid)) 
				return SCM(playerid, COLOR_VALIK, "[Подсказка] {FFFFFF}Функция доступна играя с официального лаунчера ARIZONA GAMES или ARIZONA MOBILE.");

			if(Inventory[playerid][6][slot] > Global_Time)
				return SCMF(playerid, COLOR_OLDRED, "[Ошибка] {ffffff}Открыть следующий NFT-Контейнер данной редкости вы сможете через %s", Convert(Inventory[playerid][6][slot] - Global_Time)); 

			HideInvent(playerid), global_str = "";

            for(new i; i < 6; i++)
            {
				pTemp[playerid][nftPrize][i] = random(sizeof(ItemsInfo));

                if(IsItemTimeDeleted(pTemp[playerid][nftPrize][i]) or pTemp[playerid][nftPrize][i] == 7034 or TextFind(ItemsInfo[pTemp[playerid][nftPrize][i]][itemName], "DELETED"))
                    pTemp[playerid][nftPrize][i] = random(sizeof(ItemsInfo));

				strcat(global_str, (str_f("{\"title\":\"%s\",\"sysName\":%i,\"count\":1}%s", ItemsInfo[pTemp[playerid][nftPrize][i]][itemName], pTemp[playerid][nftPrize][i], i == 5 ? "" : ",")));
            }

            cursorPlayer(playerid, GetPlayerLauncher(playerid) == 2 ? 82 : 0, true);

            if(GetPlayerLauncher(playerid) == 1)
                executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', `[\"ContainerContent\"]`);"),
                executeEvent(playerid, 0, (str_f("window.executeEvent('containerContent.initialize', `[{\"mainColor\":\"#%s\",\"logo\":\"container_%s.png\",\"items\":[%s]}]`);", itemid == 5789 ? "FFD700" : "86CD7F", itemid == 5789 ? "premium" : "middle", global_str)));

            else 
                eventMobile(playerid, {82, 0}, (str_f("{\"mainColor\":\"#%s\",\"logo\":\"mobile_container_%s.png\",\"items\":[%s]}", itemid == 5789 ? "FFD700" : "86CD7F", itemid == 5789 ? "premium" : "middle", global_str)));

			return SetInventoryTimer(playerid, slot, 432000);
		}

		case 6451:
		{
			AddItem(playerid, randomF(6266, 6271), 1);
			return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы получили случайный чемодан весны."), DeleteItem(playerid, 6451, 1);
		}

		case 6685:
		{
			AddItem(playerid, randomF(6556, 6568), 1);
			return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Вы получили случайный культовый бронежилет."), DeleteItem(playerid, 6685, 1);
		}

		case 7139: 
			return SCM(playerid, COLOR_VALIK, "Вы успешно активировали улучшение на призыв 2 охранников!"), SetImprovementsData(playerid, idCallTwoBodyguard, !ImprovementsData[playerid][idCallTwoBodyguard]), ClearItem(playerid, slot, 1);

		case 7699, 7701:
		{
			battlePassPlayer_data[playerid][1] += itemid == 7699 ? 5 : 10;
			DeleteItem(playerid, itemid == 7699 ? 7699 : 7701, 1);
			sendPlayerNotification(playerid, 1, "BattlePass", "Вы успешно активировали EXP в BattlePass!", 3);
		}

		case 7758:
			showCustomBannerDialogs(playerid);

		default:
		{
			for(new i; i < sizeof(BodyGuardInfo); i++)
				if(BodyGuardInfo[i][0] == itemid)
					return spdList(playerid, 0, itemid), SPD(playerid, 25756, DIALOG_STYLE_INPUT, !"{AAAAAA}Имя спутника", !"{FFFFFF}Введите имя вашего будущего спутника", !"Выбрать", !"Отмена");

			if(IsACarInv(ItemsInfo[itemid][itemModel]) or itemid == 4581)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 250, -2123.6548,-854.3079,32.0939))
					return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Активировать сертификат можно только на автобазаре!");

				else if(!IsValidPassport(playerid))
					return SCM(playerid,COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет паспорта, получить его можно в мэрии");

				else if(!IsValidNumberCars(playerid))
					return SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш уровень VIP недостаточно высок чтобы иметь столько авто!");

				else if(CountVehicles() > 1998)
					return SCM(playerid, -1, !"Сейчас это сделать невозможно, на сервере слишком много машин!");

				new ID = slot,
					IDS = Inventory[playerid][0][ID],
					car_model = (itemid == 4581) ? vehicleModelInfo[random(sizeof(vehicleModelInfo))][vehicleModel] : ItemsInfo[IDS][itemModel],
					car = AddOwnableCar(playerid, car_model, PN(playerid));

				if(!(car == -1))
					CarInfo[car][cKeyIN] = 1,
					Inventory[playerid][0][ID] = Inventory[playerid][1][ID] = 0,
					PutPlayerInVehicle(playerid, OwnableCar[car], 0),
					SPDF(playerid, 0, 0, !"", (TextFind(ItemsInfo[IDS][itemName], "(Launch)") && itemid != 4581) ? "\n\n{FFFFFF}Поздравляем с получением:{73B461} автомобиля %s в комплектации Launch.{FFFFFF}\n{FFFFFF}Приятной игры на %s":"\n\n{FFFFFF}Поздравляем с получением: {98FF98}автомобиля %s.\n{FFFFFF}Приятной игры на %s", !"Спасибо", !"", ItemsInfo[IDS][itemName], Setting_Server[3]);

				if(itemid == 4581)
					SCMALLF(COLOR_GREEN, "%s испытал удачу при использовании \'Запечатанный сертификат на транспорт\' и выиграл транспорт: %s", PN(playerid), GetVehicleName(car_model, true));

				SCM(playerid, COLOR_VALIK, "[Подсказка]{ffffff} Транспорт создан, не забывайте о /park для парковки транспорта.");
				amlf("<a href=../data/logsaccount.php?name=%s>%s</a> активировал %s", 3, PN(playerid), "", PN(playerid), PN(playerid), itemid == 4581 ? "запечатанный сертификат на авто" : (str_f("сертификат на автомобиль <a href=../pages/carlog.php?id=%d>%s(%d)</a>", ItemsInfo[IDS][itemModel], ItemsInfo[IDS][itemName], ItemsInfo[IDS][itemModel])));
			}

			else if(TextFind(ItemsInfo[itemid][itemName], "Объект:") or itemid == 5821)
				return CreateEditBH_object(playerid, itemid, GetPlayerInterior(playerid) + GetPlayerVirtualWorld(playerid) );

			else if(IsABoxInv(itemid))
			{
				new amount = 1, prizeid, array_id = GetBoxArray(itemid);

				if(itemid == 4584 || itemid == 6994) {
					return AddItem(playerid, BoxInfo_data[random(sizeof(BoxInfo_data))][data_ItemID], 1), sendPlayerBattlepassAction(playerid, 32), DeleteItem(playerid, itemid); }
					
				if(ServerBoxOpen_count[array_id] == (200 + random(30)))
				{
					prizeid = BoxInfo_data[array_id][data_Items][random(BoxInfo_data[array_id][data_CountPrize])];
					SCMALLF(COLOR_GREEN, "%s испытал удачу при открытии \'%s\' и выиграл %s: %s", PN(playerid), ItemsInfo[itemid][itemName], IsAAks(prizeid) ? "аксессуар" : IsASkinInv(prizeid) ? "скин" : "автомобиль", ItemsInfo[prizeid][itemName]);
					ServerBoxOpen_count[array_id] = 0;
					if(BoxInfo_data[array_id][data_Type] == 1) BoxInfo_data[array_id][data_AmountRareFalls]--;
				}
				else
				{
					switch random(1000) do
					{
						case 1..200: prizeid = -1, amount = 1 + random(200000);
						case 201..400: prizeid = -2, amount = 1 + random ( 30 );
						case 401..450: prizeid = 522, amount = 1 + random ( 25 );
						case 551..600: prizeid = 556, amount = 1 + random ( 3 );
						case 601..650: prizeid = 555, amount = 1 + random ( 5 );
						case 751..800: prizeid = 1425, amount = 1 + random ( 7 ); 
						case 801..851: prizeid = 1186, amount = 1 + random ( 9 );
						case 900..951: prizeid = 1187, amount = 1 + random ( 6 );
						case 952..971: prizeid = 1420, amount = 1 + random ( 8 );
						case 972..981: prizeid = 1513, amount = 1 + random ( 100 );
						case 982..986: prizeid = 1146, amount = 1 + random ( 100 );
						case 987..990: prizeid = skins_data[random(344)][skinItemID];
						default:
						{	
							switch random(10) do
							{
								case 0..1: if(itemid == 3623 or itemid == 3992) prizeid = (itemid == 3623 ? 5839 : 5840);
								case 2..3: if(itemid == 3623) prizeid = 5840;
								case 4..10: prizeid = 5991, amount = 1 + random ( 3 );
							}
						}
					}
				}

				if(prizeid == -1)
					GiveMoney(playerid, amount, "приз с бокса."),
					SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вам начислено $%d", amount);

				else if(prizeid == -2)
					PI[playerid][pExp] += amount, CheckNextLevel(playerid),
					SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вам начислено %d очков опыта.", amount);
				else if(prizeid > 0)
					AddItem(playerid, prizeid, amount),
					SCMF(playerid, COLOR_GOLD, "Вы использовали {cccccc}\'%s\'{FFD700}! Ваш приз: {cccccc}%s (количество: %d шт.)", ItemsInfo[itemid][itemName], ItemsInfo[prizeid][itemName], amount);

				if(BoxInfo_data[array_id][data_BPID] != -1)
					sendPlayerBattlepassAction(playerid, BoxInfo_data[array_id][data_BPID]);

				return DeleteItem(playerid, itemid), ServerBoxOpen_count[array_id]++, false;
			}
		}
	}

	PI[playerid][OpenGunMenu] = 0;
	closeuse(playerid);
	
	return false;
}

stock GetItemInfo(playerid, cell_type, slot, bool:other = false, id = -1)
{
    new item, enchant, mending, stripe, ending, color_item, color[8] = "FFFF00", accessoryUpgrade_name[][] = {"защиту", "восстанавливает здоровье (если сытость больше 50%)", "урон", "шанс критического урона", "максимальное кол-во Брони"}, accessoryStripe_name[][] = {"защите", "регенерации", "урону", "удачи на урон", "макс.хп", "Бег Си Джея", "Бесконечный Бег", "Защитная пластина", "Огненные пули", "Опыт Battle Pass", "Мастер рыболовли", "Снижение урона противника", "Защита от оглушения (+20%)"};

    switch(cell_type)
    {
        case 0: item = Inventory[id != -1 ? id : playerid][0][slot], stripe = Inventory[id != -1 ? id : playerid][3][slot], color_item = Inventory[id != -1 ? id : playerid][2][slot], enchant = Inventory[id != -1 ? id : playerid][4][slot], mending = Inventory[id != -1 ? id : playerid][5][slot], ending = Inventory[id != -1 ? id : playerid][6][slot];
        case 1: item = AksSlot[playerid][0][slot], color_item = AksSlot[playerid][3][slot], enchant = AksSlot[playerid][1][slot], mending = AksSlot[playerid][2][slot], stripe = AksSlot[playerid][4][slot];
        case 6: item = CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][1][slot], stripe = Inventory[CentralMarket[id][crOwnedId]][3][CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot]], color_item = Inventory[CentralMarket[id][crOwnedId]][2][CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot]], enchant = Inventory[CentralMarket[id][crOwnedId]][4][CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot]], mending = Inventory[CentralMarket[id][crOwnedId]][5][CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot]], ending = Inventory[CentralMarket[id][crOwnedId]][6][CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot]];
        default: item = id;
    }

	ColorSlotReset(playerid);
	global_str[0] = EOS, mysql_string[0] = EOS;
	f(mysql_string, sizeof(mysql_string), "%s", GetItemStory(playerid, item));

	if(item == 7034)
		f(color, 8, "FDCF28"), f(mysql_string, sizeof(mysql_string), mysql_string, InventoryNumber[playerid][0][cell_type == 6 ? CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot] : slot], countryNumber[stripe], InventoryNumber[playerid][stripe == 4 ? 2 : 1][cell_type == 6 ? CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot] : slot]);

	if(IsLegendAccessory(item))
		f(color, 8, "FF0000");

	strcat(global_str, (str_f("{%s}%s{%s}%s", IsASkinInv(item) ? "FFFF00" : "FFFFFF", IsASkinInv(item) ? "" : IsLegendAccessory(item) ? "Легендарный аксессуар: " : IsAAks(item) ? "Аксессуар: " : IsACarInv(item) ? "Сертификат " : "Предмет: ", color, ItemsInfo[item][itemName])));
	strcat(global_str, (str_f("\n%s", mysql_string)));

	if(IsAAks(item))
	{
		strcat(global_str, (str_f("\n\n{FFFFFF}Слот аксессуара: {FFFF00}%i", ItemsInfo[item][itemAccesotySlot] + 1))),
		strcat(global_str, (str_f("\n{FFFFFF}Можно ли красить: {FFFF00}%s", ItemsInfo[item][itemColored] ? "Да" : "Нет")));

		for(new i, count, accessoryBuff_name[][] = {"Защита: -%i%% урона", "Регенерация: %i HP в мин.", "Урон: +%i урона", "Удача: шанс %i%% крит.урона", "Макс. HP: +%i макс. HP", "Макс. Брони: +%i макс. Брони", "Шанс оглушения: %i%%", "Шанс избежать оглушения: +%i%%", "Шанс опьянения: %i"}; i < 9; i++)
		{
			if(FindAccessoryBuff(item, i) != -1)
			{
				if(count == 0)
					strcat(global_str, "\n\n{ff6666}Данный предмет имеет следующие характеристики по-умолчанию:");

				strcat(global_str, (str_f("\n{ffffff}— %s", (str_f(accessoryBuff_name[i], FindAccessoryBuff(item, i)))))), count++;
			}
		}
	}

	if(IsOsnovatel(playerid))
		strcat(global_str, (str_f("\n\n{7d7274}[DEBUG] eng_name: %s\n{7d7274}[DEBUG] itemid: %i\n[DEBUG] modelid: %i\n[DEBUG] UNIC_ID: -1\n[DEBUG] END_DATE: %s\n[DEBUG] attach_slot: %i", ItemsInfo[item][itemEng_name], item, ItemsInfo[item][itemModel], ending ? UNIX_TO_DATE(ending) : "0", ItemsInfo[item][itemAccesotySlot])));

	if(item == 1810)
		strcat(global_str, (str_f("\n\n{FFFF00}Уровень производительности: %d из 10\nЗа один час работы майнит: %f BTC.", Inventory[playerid][3][slot], GetMiningBTC(Inventory[playerid][3][slot]))));
		
	strcat(global_str, (str_f("\n\n{FFFFFF}Количество данного предмета на сервере: {FFFF00}%i%s", ItemsInfo[item][itemServerCount] >= 10000 ? 10000 : ItemsInfo[item][itemServerCount], ItemsInfo[item][itemServerCount] >= 10000 ? "+ (нередкий)" : "")));
	strcat(global_str, (str_f("\n\n{FFFFFF}Можно хранить в одной ячейке: {cccccc}%d ед. предмета.", ItemsInfo[item][itemStack])));

	if(IsAAks(item) || IsASkinInv(item))
	{
		if(ItemsInfo[item][itemModel] < 311 && IsASkinInv(item))
			strcat(global_str, "\n\n{FF0000}Этот скин может изнашиваться."),
			strcat(global_str, (str_f("\n - Прочность: {8CBD86}%i/100", mending)));

		else 
		{
			if(stripe > 0 && stripe < 16)
				strcat(global_str, (str_f("\n\n{ffa500}Встроена нашивка {ffffff}%d-го{ffa500} уровня{ffffff} (+%d к %s){ffa500}.{ffffff}", GetStripeInfo(stripe, 0), GetStripeInfo(stripe, 0), accessoryStripe_name[GetStripeInfo(stripe, 1)])));

			strcat(global_str, "\n\n{FFFFFF}Характеристики:");
			strcat(global_str, (str_f("\n - Цвет: %s{FFFFFF}", !color_item ? ("{ffffff}Отсутствует") : (str_f("%s", AksMassive[color_item][AksColorName])))));
			strcat(global_str, (str_f("\n - Улучшения: {FDCF28}%d/%d{FFFFFF}", enchant, IsASkinInv(item) ? 12 : 13)));

            if(IsAAks(item))
                strcat(global_str, (str_f("\n - Прочность: {8CBD86}%d/100", mending)));
            
			for(new i, count, accessoryBuff_name[][] = {"-%i%% от урона", "+%i HP в мин.", "+%i урона", "шанс %i%% на крит. урон", "+%i Макс. HP", "+%i Макс. Брони", "шанс %i%% на оглушение", "шанс %i%% избежать оглушения", "шанс %i%% на опьянение"}; i < 9; i++)
			{
				if(FindAccessoryBuffUsed(item, i, enchant) > 0)
					strcat(global_str, (str_f("%s%s{BD8686}[%s]{FFFFFF}", count % 2 ? " " : "\n", !count ? "{FFFFFF} - Бонус от улучшения: " : "", (str_f(accessoryBuff_name[i], FindAccessoryBuffUsed(item, i, enchant)))))), count++;
			}

			if(IsAAks(item))
			{
				if(ItemsInfo[item][itemAccesotySlot] < 7)
					strcat(global_str, (str_f("\n\n{FFFFFF}* При улучшении увеличивает %s", accessoryUpgrade_name[GetAccessoryUpgradeBuff(item)])));
			
				if(enchant == 13)
					strcat(global_str, "\n{cccccc}* При улучшении заточки на +13, даёт +9 к Макс. Брони и +4 к Макс. HP");
			}
			else	
				strcat(global_str, "\n\n{FFFFFF}* При улучшении увеличивает защиту"),
				strcat(global_str, "\n{FFFFFF}* При улучшении восстанавливает здоровье (если сытость больше 50%)"),
				strcat(global_str, "\n{FFFFFF}* При улучшении увеличивает урон"),
				strcat(global_str, "\n{FFFFFF}* При улучшении увеличивает шанс критического урона"),
				strcat(global_str, "\n{FFFFFF}* При улучшении увеличивает максимальное кол-во HP"),
				strcat(global_str, "\n\n\n{00FF00}Этот скин имеет специальное свойство: не изнашиваться.");

			if(stripe > 15)
				strcat(global_str, (str_f("\n\n{FFFFFF}- Встроена нашивка: {BD8686}%s", accessoryStripe_name[GetStripeInfo(stripe, 1)])));
		}
	}

    return (other ? SetPVarString(playerid, "GetItemInfo_func", global_str) : SPD(playerid, 8236, 0, !"Информация о предмете", global_str, !"Выход", !""));
}

stock SetPlayerAccessoryWeapon(playerid, item, count = 1)
{
	switch item do
	{
		case 7317: _GiveGun(playerid, 1, count);
		case 7321: _GiveGun(playerid, 5, count);
		case 1077: _GiveGun(playerid, 6, count);
		case 7323: _GiveGun(playerid, 8, count);
		case 770: _GiveGun(playerid, 24, count);
		case 771: _GiveGun(playerid, 22, count);
		case 772: _GiveGun(playerid, 25, count);
		case 773: _GiveGun(playerid, 29, count);
		case 774: _GiveGun(playerid, 30, count);
		case 775: _GiveGun(playerid, 31, count);
		case 776: _GiveGun(playerid, 33, count);
		case 6368: _GiveGun(playerid, 32, count);
		case 5480: _GiveGun(playerid, 34, count);
		case 1210: _GiveGun(playerid, 28, count);
		case 5829: _GiveGun(playerid, 26, count);
	}

	ApplyAnimationEx(playerid, "RIFLE", "RIFLE_load", 4.0, 0, 0, 0, 0, 0, 1);
	f(global_str, 125, "%s[%d] достал оружие из кармана.", PN(playerid), playerid);
    ProxDetector(25.0, playerid, global_str, COLOR_PURPLE);
	SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы достали из кармана '%s' с боеприпасами %d", ItemsInfo[item][itemName], count);
	DeleteItem(playerid, item, count);

	return closeuse(playerid);
}

stock AddItem(playerid, itemid, amount = 1, color = 0, id = -1, enchant = 0, mending = -1, ending = 0, const numberData[] = "")
{
	if(GetInvSet(playerid) >= PI[playerid][pInvCell])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

	if(!(InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen")))
   		SCMF(playerid, COLOR_YELLOW, "Вам был добавлен предмет '%s'%s. Откройте инвентарь, используйте %s", ItemsInfo[itemid][itemName], amount >= 2 ? (str_f(" (%d шт)", amount)) : ending ? (str_f(" на %i %s", UNIX_GET_TIME(ending), UNIX_GET_TIME_NAME(ending, true))) : "", GetPlayerLauncher(playerid) == 2 ? "МЕНЮ" : "клавишу 'Y' или /invent");

	if(GetString(ItemsInfo[itemid][itemName], "DELETED"))
		return false;

	for(new i; i < PI[playerid][pInvCell]; i++)
    {
        if(Inventory[playerid][0][i] != itemid) continue;

		if(ItemsInfo[itemid][itemStack] > Inventory[playerid][1][i])
		{
			if(amount < ItemsInfo[itemid][itemStack])
			{
				if(amount+Inventory[playerid][1][i] < ItemsInfo[itemid][itemStack])
				{
					Inventory[playerid][1][i] += amount;
					amount = 0;
				}
				else
				{
					amount = Inventory[playerid][1][i]+amount-ItemsInfo[itemid][itemStack];
					Inventory[playerid][1][i] = ItemsInfo[itemid][itemStack];
				}
			}
			else
			{
				amount -= ItemsInfo[itemid][itemStack]-Inventory[playerid][1][i];
				Inventory[playerid][1][i] = ItemsInfo[itemid][itemStack];
			}
			if(shopopen{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") || (PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)) 
				InventSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
		}

        if(amount <= 0)
			return SaveInventory(playerid);
   }

    for(new i; i < PI[playerid][pInvCell]; i++)
    {
        if(Inventory[playerid][0][i]) continue;
		
		Inventory[playerid][0][i] = itemid;

		if(itemid == 7034)
			sscanf(numberData, "P<|>s[10]s[10]s[10]", InventoryNumber[playerid][0][i], InventoryNumber[playerid][1][i], InventoryNumber[playerid][2][i]), sendPlayerBattlepassAction(playerid, 82), SaveNumbers(playerid);

		Inventory[playerid][1][i] = (ItemsInfo[itemid][itemStack] > amount ? amount : ItemsInfo[itemid][itemStack]);
		Inventory[playerid][2][i] = color;
		Inventory[playerid][3][i] = id;
		Inventory[playerid][4][i] = enchant;
		Inventory[playerid][5][i] = mending;
		Inventory[playerid][6][i] = ending;
        
		if(ItemsInfo[itemid][itemStack] > amount)
		{
			Inventory[playerid][1][i] = amount;
			amount = 0;

			if(shopopen{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") || (PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)) 
				InventSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
			
			return SaveInventory(playerid);
		}
		else 
		{
			Inventory[playerid][1][i] = ItemsInfo[itemid][itemStack];
			amount -= ItemsInfo[itemid][itemStack];

			if(shopopen{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") || (PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1))
				InventSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
		}

        if(amount <= 0)
			return SaveInventory(playerid);
    }

	return true;
}

stock DeleteItem(playerid, itemid, amount = 1)
{
	for(new i,j; i < PI[playerid][pInvCell]; i++)
	{
		if(Inventory[playerid][0][i] != itemid || InventSlotUse[playerid][i]) continue;
		j = Inventory[playerid][1][i];
		Inventory[playerid][1][i] -= amount;
		amount -= j;
		if(Inventory[playerid][1][i] < 1) Inventory[playerid][1][i] = Inventory[playerid][0][i] = 0; 
		if(shopopen{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") || (PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)) InventSlotUpdate(playerid, GetInvID(playerid, i, 1), i);
		if(amount <= 0)
			return SaveInventory(playerid);
	}

	return false;
}

stock ClearItem(playerid, slot, count)
{
	if(count < Inventory[playerid][1][slot])
		Inventory[playerid][1][slot] -= count;

	else
	{
		for(new i; i < 8; i++)
		{
			if(i < 3) InventoryNumber[playerid][i][slot] = "";
			Inventory[playerid][i][slot] = 0;
		}
	}
	
	if(shopopen{playerid} || EnchantWork{playerid} || InventoryOpen{playerid} || Int_GetPlayerData(playerid, "OtherInventOpen") || (PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1))
		InventSlotUpdate(playerid, GetInvID(playerid, slot, 1), slot);

	return false;
}

cmd:giveazruball(playerid, params[]) {

	if(!IsOsnovatel(playerid))
		return false;

	extract params -> new count; else
		 return SCM(playerid, COLOR_OLDRED, "Используйте: /giveazruball [кол-во]");
	
	if(!(1 <= count <= 100))
		return false;

	foreach(Player, i)
	{
		if(pTemp[i][tAuthorized])
			PI[i][pRoubles] += count;
	}

	f(global_str, 125,"Основатель %s выдал всем игрокам %d AZ-RUB.", PN(playerid), count);
	SCMALL(COLOR_RED, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам %d AZ-RUB!", 5, "", "", PN(playerid), PN(playerid), count);

	return true;
}

cmd:setpaydaybonus(playerid, params[]) {

	if(!IsOsnovatel(playerid))
		return false;

	extract params -> new int; else
		return SCM(playerid, COLOR_VALIK, !"/setpaydaybonus [количество часов которое будет даваться в 1 PayDay]");

	PayDayXBonus = int;

	format(global_str, 128, "Создатель %s[%d] установил начисление часов в /arz, как 1 PayDay = %d часов.", PN(playerid), playerid, PayDayXBonus);

	SCMALL(COLOR_ORANGE, global_str);
	
	return SaveInformation();
}

cmd:setdonatex(playerid, params[]) {

	if(!IsOsnovatel(playerid))
		return false;

	extract params -> new int; else
		return SCM(playerid, COLOR_VALIK, !"/setdonatex [1 рубль = 1 * params]");

	if(int < 0)
		return false;

	XDonate = int;

	format(global_str, 128, "Создатель %s[%d] установил новый множитель пополнения счета. 1 РУБЛЬ = {FF0000}%d{FFFFFF} AZ-RUB.", PN(playerid), playerid, XDonate);
	SCMALL(COLOR_ORANGE, global_str);

	return SaveInformation();
}

cmd:slet(playerid)
	return SletMenu(playerid);

cmd:sletmenu(playerid)
	return SletMenu(playerid, 8886);

stock SletMenu(playerid, dId = 0)
{
	global_str = "{FFFF00}ID\t{FFFF00}Тип\t{FFFF00}Время\t{ae433d}Поставил на слет";

	for(new i; i < sizeof(AutoSlet); i++) {

		if(AutoSlet[i][as_Status] == false)
			strcat(global_str, "\n{ae433d}-\t{ae433d}-\t{ae433d}-\t{ae433d}-");
		else
			strcat(global_str, (str_f("\n№%d\t%s\t%d:%d\t%s\t%s", AutoSlet[i][as_ID], AutoSlet[i][as_Type] ? "Бизнес":"Дом", AutoSlet[i][as_Hour], AutoSlet[i][as_Min], AutoSlet[i][as_Owner])));
	}

	return SPD(playerid, dId, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Автоматический слет | {ae433d}Arizona RP Supreme", global_str, dId ? !"Параметры":!"Выйти", dId ? !"Выйти":!"");
}

cmd:givedonateall(playerid, params[])
{
	extract params -> new count; else
		 return SCM(playerid,COLOR_OLDRED, "Используйте: /givedonateall [кол-во]");
	
	if(!(1 <= count <= 1000000))
		return false;

	foreach(Player, i)
	{
		if(pTemp[i][tAuthorized])
			GiveDonate(i, count);
	}

	f(global_str, 125,"Основатель %s выдал всем игрокам %d AZ-Coins.", PN(playerid), count);
	SCMALL(COLOR_ORANGE, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам %d Az-Coins.", 5, "", "", PN(playerid), PN(playerid), count);
	
	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:additemall(playerid, params[])
{
	if(sscanf(params,"dd",params[0],params[1])) return SCM(playerid,COLOR_OLDRED, "Используйте: /additemall [id предмета] [кол-во]");
	if(ItemsInfo[params[0]][itemStack] < params[1] or params[0] > sizeof(ItemsInfo)) return 1;
	
	foreach(Player, i)
		if(pTemp[i][tAuthorized]) AddItem(i, params[0], params[1]);

	f(global_str, 125,"Основатель %s выдал всем игрокам предмет %s в количестве %d", PN(playerid), ItemsInfo[params[0]][itemName], params[1]);
	SCMALL(COLOR_ORANGE, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам предмет %s. Кол-во: %d", 5, "", "", PN(playerid), PN(playerid), ItemsInfo[params[0]][itemName], params[1]);

	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

cmd:giveitem(playerid, params[])
{
	if(!IsOsnovatel(playerid))
		return false;

	new targetid, item, count, enchant, identificator, color, ending;

	if(sscanf(params, "ddddddd", targetid, item, count, enchant, identificator, color, ending))
		return SCM(playerid, COLOR_OLDRED, !"Используй: /giveitem [id player] [id item] [count] [заточка] [identificator] [color] [ending]");

	if(!(1 <= item <= sizeof(ItemsInfo)-1)) 
		return SCM(playerid, COLOR_OLDRED, !"Неверный ид предмета!");
	
	else if(enchant < 0 or enchant > 13 or targetid == INVALID_PLAYER_ID or GetString(ItemsInfo[item][itemName], "DELETED"))
		return false;
	
	if(GetInvSet(targetid) >= PI[targetid][pInvCell]) 
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У него не хватает места в инвентаре!");

	AddItem(targetid, item, count, color, identificator, enchant, 100, ending);
	SCMF(playerid, -1, "[/giveitem] Выдано игроку %s[ID: %d], предмет: %s[itemid: %d], количество: %dшт (ending: %s)", PN(targetid), targetid, ItemsInfo[item][itemName], item, count, UNIX_TO_DATE(ending));
	SAMF(COLOR_GREY, "A: %s[%d] выдал игроку %s ( %s | %d шт. | ending: %s )", PN(playerid), playerid, PN(targetid), ItemsInfo[item][itemName], count, UNIX_TO_DATE(ending));

	return Int_SetPlayerData(playerid, "NakazLastTime", Global_Time);
}

stock onboard(playerid)
{
	if(!addboard[playerid])
	{
	    RemovePlayerAttachedObject(playerid, 5);
		SetPlayerAttachedObject(playerid,6,2406,6,0.0000,0.037000,0.000000,1.299999,8.300021,-0.899996,0.583000,1.000000,0.685999);
		SCM(playerid, COLOR_GREEN, !"Вы взяли доску в руку, чтобы его использовать зажмите 'КЛАВИШУ ДЛЯ БЕГА'");
		return addboard[playerid] = 1;
	}
	
	return RemovePlayerAttachedObject(playerid, 6), SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5), addboard[playerid] = 0;
}

stock OnPlayerCloseInventMenu(playerid)
{
	ColorSlotReset(playerid);
	AksVidStatus[playerid][5] = 0;
	if(PickInvent[playerid] != InventoryMaxSlot+1) HideInventMenuTD(playerid), InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]);
	PickInvent[playerid] = InventoryMaxSlot+1;
	return true;
}

stock HideInventMenuTD(playerid)
{
	for(new i; i < 13; i++) 
		DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
		
	return true;
}

stock ShowInventMenuTD(playerid, item, item_stack, type, &PlayerText:td_cell, slot)
{
	HideInventMenuTD(playerid);

	new Float:cell_position[2], count, Float:button_position[][] = { {14.0, 16.572998}, {28.583344, 31.156342}, {43.166657, 45.739655}, {57.75, 60.322998}, {72.333343, 74.906341} };
	GetPosTD(playerid, td_cell, cell_position[0], cell_position[1]);

	pTemp[playerid][tItemId] = item;
	pTemp[playerid][tType] = type;
	pTemp[playerid][tSlot] = slot;

	InventMenuTD[playerid][10] = CreatePlayerTextDraw(playerid, cell_position[0]-13.8125, cell_position[1]+12.75, "particle:shad_bike");
	InventMenuTD[playerid][11] = CreatePlayerTextDraw(playerid, cell_position[0]+28.6875, cell_position[1]+12.75, "particle:shad_bike");
	InventMenuTD[playerid][12] = CreatePlayerTextDraw(playerid, cell_position[0]+35.299987, cell_position[1]+14.25, "usebox");

	switch(type)
	{
		case 0:
		{
			if(ItemsInfo[item][itemUseable] or IsAAks(item) or IsASkinInv(item) or IsPlayerInAnyVehicle(playerid) && IsAOwnableCar(GetPlayerVehicleID(playerid)) or (item >= 5845 && item <= 5852 or item == 6064 or item == 6089) or (item >= 2183 && item <= 3621))
				InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
				InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], ItemsInfo[item][itemUseable] ? (SettingData[playerid][sdLanguage] ? FixText("ИСПОЛЬЗОВАТЬ") : "USE") : (SettingData[playerid][sdLanguage] ? FixText("НАДЕТЬ") : "PUT")), count++;

			if(item_stack > 1 or IsAAks(item))
				InventMenuTD[playerid][2] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
				InventMenuTD[playerid][3] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], IsAAks(item) ? (SettingData[playerid][sdLanguage] ? FixText("АРЕНДА") : "RENT") : (SettingData[playerid][sdLanguage] ? FixText("РАЗДЕЛИТЬ") : "SPLIT")), count++;

			if(ItemsInfo[item][itemDroppable])
				InventMenuTD[playerid][4] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
				InventMenuTD[playerid][5] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], SettingData[playerid][sdLanguage] ? FixText("ВЫБРОСИТЬ") : "DROP"), count++;

			InventMenuTD[playerid][6] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
			InventMenuTD[playerid][7] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], SettingData[playerid][sdLanguage] ? FixText("ИНФОРМАЦИЯ") : "INFO"), count++;

			InventMenuTD[playerid][8] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
			InventMenuTD[playerid][9] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], SettingData[playerid][sdLanguage] ? FixText("ЗАКРЫТЬ") : "CLOSE"), count++;
		}
		case 1, 2:
		{
			if(IsAAks(item) && ItemsInfo[item][itemUseable] || type == 2)
				InventMenuTD[playerid][0] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
				InventMenuTD[playerid][1] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], type == 2 ? (item == 6518 ? (SettingData[playerid][sdLanguage] ? FixText("ЦВЕТ") : "COLOR") : (SettingData[playerid][sdLanguage] ? FixText("EDIT") : "ИЗМЕНИТЬ")) : (SettingData[playerid][sdLanguage] ? FixText("ИСПОЛЬЗОВАТЬ") : "USE")), count++;

			InventMenuTD[playerid][2] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
			InventMenuTD[playerid][3] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], (SettingData[playerid][sdLanguage] ? FixText("СНЯТЬ") : "TAKE")), count++;

			if(IsAAks(item))
				InventMenuTD[playerid][4] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
				InventMenuTD[playerid][5] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], SettingData[playerid][sdLanguage] ? FixText("ИЗМЕНИТЬ") : "EDIT"), count++;

			InventMenuTD[playerid][6] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
			InventMenuTD[playerid][7] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], SettingData[playerid][sdLanguage] ? FixText("ИНФОРМАЦИЯ") : "INFO"), count++;

			InventMenuTD[playerid][8] = CreatePlayerTextDraw(playerid, cell_position[0]-7.25, cell_position[1]+button_position[count][0], "LD_SPAC:WHITE"),
			InventMenuTD[playerid][9] = CreatePlayerTextDraw(playerid, cell_position[0]+12.75, cell_position[1]+button_position[count][1], SettingData[playerid][sdLanguage] ? FixText("ЗАКРЫТЬ") : "CLOSE"), count++;
		}
	}

	for(new i; i < 13; i++)
	{
		if(i <= 9) 
		{
			if(i % 2)
				PlayerTextDrawAlignment(playerid, InventMenuTD[playerid][i], 2),
				PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], 0xCCCCCCFF),
				PlayerTextDrawUseBox(playerid, InventMenuTD[playerid][i], 0),
				PlayerTextDrawBoxColor(playerid, InventMenuTD[playerid][i], 0x80808080),
				PlayerTextDrawSetShadow(playerid, InventMenuTD[playerid][i], 0),
				PlayerTextDrawSetOutline(playerid, InventMenuTD[playerid][i], 1),
				PlayerTextDrawBackgroundColor(playerid, InventMenuTD[playerid][i], 0x00000000),
				PlayerTextDrawFont(playerid, InventMenuTD[playerid][i], 1),
				PlayerTextDrawSetProportional(playerid, InventMenuTD[playerid][i], 1),
				PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][i], 7.368598, 0.375000),
				PlayerTextDrawLetterSize(playerid, InventMenuTD[playerid][i], 0.159033, 0.818733);
			
			else 
				PlayerTextDrawLetterSize(playerid, InventMenuTD[playerid][i], 0.480000, 1.120000),
				PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][i], 40.000000, 13.333334),
				PlayerTextDrawAlignment(playerid, InventMenuTD[playerid][i], 1),
				PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], i != 8 ? 0x333333FF : 0xA43E3EFF),
				PlayerTextDrawUseBox(playerid, InventMenuTD[playerid][i], 0),
				PlayerTextDrawBoxColor(playerid, InventMenuTD[playerid][i], 0x80808080),
				PlayerTextDrawSetShadow(playerid, InventMenuTD[playerid][i], 2),
				PlayerTextDrawSetOutline(playerid, InventMenuTD[playerid][i], 0),
				PlayerTextDrawBackgroundColor(playerid, InventMenuTD[playerid][i], 0x000000FF),
				PlayerTextDrawFont(playerid, InventMenuTD[playerid][i], 4),
				PlayerTextDrawSetProportional(playerid, InventMenuTD[playerid][i], 1),
				PlayerTextDrawSetSelectable(playerid, InventMenuTD[playerid][i], 1);
		}

		else if(i >= 10 && i < 12)
			PlayerTextDrawAlignment(playerid, InventMenuTD[playerid][i], 0),
			PlayerTextDrawLetterSize(playerid, InventMenuTD[playerid][i], 0.480000, 1.120000),
			PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][i], 10.625000, 15.0*count),
			PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], 0x00000070),
			PlayerTextDrawUseBox(playerid, InventMenuTD[playerid][i], 0),
			PlayerTextDrawBoxColor(playerid, InventMenuTD[playerid][i], 0x80808080),
			PlayerTextDrawSetShadow(playerid, InventMenuTD[playerid][i], 2),
			PlayerTextDrawSetOutline(playerid, InventMenuTD[playerid][i], 0),
			PlayerTextDrawBackgroundColor(playerid, InventMenuTD[playerid][i], 0x000000FF),
			PlayerTextDrawFont(playerid, InventMenuTD[playerid][i], 4),
			PlayerTextDrawSetProportional(playerid, InventMenuTD[playerid][i], 1),
			PlayerTextDrawSetSelectable(playerid, InventMenuTD[playerid][i], 0);

		else if(i == 12)
			PlayerTextDrawTextSize(playerid, InventMenuTD[playerid][i], cell_position[0]-10.0, 0.0),
			PlayerTextDrawLetterSize(playerid, InventMenuTD[playerid][i], 0.000000, 1.56995325*count),
			PlayerTextDrawAlignment(playerid, InventMenuTD[playerid][i], 1),
			PlayerTextDrawColor(playerid, InventMenuTD[playerid][i], 0xE1E1E1FF),
			PlayerTextDrawUseBox(playerid, InventMenuTD[playerid][i], 1),
			PlayerTextDrawBoxColor(playerid, InventMenuTD[playerid][i], 0x000000AA),
			PlayerTextDrawSetShadow(playerid, InventMenuTD[playerid][i], 2),
			PlayerTextDrawSetOutline(playerid, InventMenuTD[playerid][i], 0),
			PlayerTextDrawBackgroundColor(playerid, InventMenuTD[playerid][i], 0x000000FF),
			PlayerTextDrawFont(playerid, InventMenuTD[playerid][i], 0),
			PlayerTextDrawSetProportional(playerid, InventMenuTD[playerid][i], 1),
			PlayerTextDrawSetSelectable(playerid, InventMenuTD[playerid][i], 0);

		ShowPlayerTD(playerid, InventMenuTD[playerid][i]);
	}
	
	return true;
}

stock OnPlayerClickSlot(playerid, slot)
{
	GiveColorCell(playerid);
	
	for(new i; i < 18; i++)
	{
		if(i < 8) 
			AksVidStatus[playerid][i] = AksVid[playerid][i] = 0;

		DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
	}
	
	new sloT = slot+(36*PI[playerid][pInvPage]);

	PlayerTextDrawSetSelectable(playerid, Kletka[playerid][slot], 0);
	PlayerTextDrawColor(playerid, Kletka[playerid][slot], 0x777777FF);
	ShowPlayerTD(playerid, Kletka[playerid][slot]), PlayerTextDrawHide(playerid, KletkaText[playerid][slot]);

	return ShowInventMenuTD(playerid, Inventory[playerid][0][sloT], Inventory[playerid][1][sloT], 0, Kletka[playerid][slot], sloT);
}

stock OtherInstallTun(vehicleid, item, slotId = -1, deleted = 0, color = 0)
{
	if(vehicleid == INVALID_VEHICLE_ID) return false;

	if(IsAOwnableCar(vehicleid))
	{
		if(slotId > 0)
		{
			if(item >= 2354 && item <= 2370 or item == 7366 or item == 7367)
				SetVehicleWadPainting(vehicleid, vehicleTuning[vehicleid][6] = deleted ? 0 : item-2353, VehicleInfo[vehicleid][vColor_1]);

			if(item == 7034 && deleted)
				SetString(VehicleInfo[vehicleid][vNumber], "Arizona ST"), SetVehicleNumberPlates(vehicleid, 0, "", "");
		}
		else
		{
            for(new i; i < sizeof(kangarooVehicleInfo); i++)
            {
                if(GetVehicleModelEx(vehicleid) == kangarooVehicleInfo[i][kVehModel] && item == kangarooVehicleInfo[i][kItemId])
                {
                    new slot = GetMassiveArray(TunInvCar[vehicleid][deleted], deleted ? ItemsInfo[item][itemModel] : 0);

                    if(slot == -1)
                        return false;

                    if(!deleted)
                    {
                        TunInvCar[vehicleid][0][slot] = CreateDynamicObject(ItemsInfo[item][itemModel], 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, -1, STREAMER_OBJECT_SD, 200.0), 
                        TunInvCar[vehicleid][1][slot] = ItemsInfo[item][itemModel];
                        AttachDynamicObjectToVehicle(TunInvCar[vehicleid][0][slot], vehicleid, CarInfo[GetVehicleID(vehicleid)][TunPosX][slot] = kangarooVehicleInfo[i][kVehAttach][0], CarInfo[GetVehicleID(vehicleid)][TunPosY][slot] = kangarooVehicleInfo[i][kVehAttach][1], CarInfo[GetVehicleID(vehicleid)][TunPosZ][slot] = kangarooVehicleInfo[i][kVehAttach][2], 0.000000, 0.000000, 0.000000);
                    }
                    else DestroyDynamicObjectModel(vehicleid, TunInvCar[vehicleid][0][slot], TunInvCar[vehicleid][1][slot]), TunInvCar[vehicleid][0][slot] = TunInvCar[vehicleid][1][slot] = 0, CarInfo[GetVehicleID(vehicleid)][TunPosX][slot] = CarInfo[GetVehicleID(vehicleid)][TunPosY][slot] = CarInfo[GetVehicleID(vehicleid)][TunPosZ][slot] = 0.0;

                    SaveTunInv(vehicleid);
                    break;
                } 
            }

            if(item == 554 or item == 5797 or 2324 <= item <= 2353)
            {
                for(new i; i < sizeof(HandlingDetail_data); i++)
                {
                    if(HandlingDetail_data[i][data_ItemID] != item) 
						continue;

					for(new s; s < 24; s++)
                    {
						if(!deleted) VehicleInfo[vehicleid][vHandling][s] += HandlingDetail_data[i][data_Parametrs][s];
                        else if(deleted) VehicleInfo[vehicleid][vHandling][s] -= HandlingDetail_data[i][data_Parametrs][s];
                    }

					changeVehicleHandlingParametrs(vehicleid, INVALID_PLAYER_ID, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
					SQL("UPDATE `ownable` SET `HandlingData` = '%s' WHERE ID = '%d'", Float_PackMassive(0, VehicleInfo[vehicleid][vHandling]), CarInfo[GetVehicleID(vehicleid)][cID]);
                    break;
                }
			}

			if(GetWheelDisks(ItemsInfo[item][itemModel]) != -1)
				vehicleTuning[vehicleid][7] = GetWheelDisks(ItemsInfo[item][itemModel]), vehicleTuning[vehicleid][8] = (deleted ? color > 0 ? (color - 1) : 0 : 0), SetVehicleWheelDisks(vehicleid, (deleted ? 0 : vehicleTuning[vehicleid][7]), vehicleTuning[vehicleid][8]);

			if(item == 6518)
				vehicleTuning[vehicleid][5] = 1, SetVehicleBottomColor(vehicleid, vehicleTuning[vehicleid][5]);

			if(TextFind(ItemsInfo[item][itemName], "Капот для ") or TextFind(ItemsInfo[item][itemName], "Спойлер для ") or TextFind(ItemsInfo[item][itemName], "Выхлоп для "))
			{
				if(GetVehicleModelEx(vehicleid) < 612)
					return false;

				vehicleTuning[vehicleid][TextFind(ItemsInfo[item][itemName], "Капот для ") ? 0 : TextFind(ItemsInfo[item][itemName], "Спойлер для ") ? 1 : 2] = findComponentID(item, TextFind(ItemsInfo[item][itemName], "Капот для ") ? 1 : TextFind(ItemsInfo[item][itemName], "Спойлер для ") ? 0 : 2);
				AddVehicleComponentEx(vehicleid, vehicleTuning[vehicleid][TextFind(ItemsInfo[item][itemName], "Капот для ") ? 0 : TextFind(ItemsInfo[item][itemName], "Спойлер для ") ? 1 : 2], bool:deleted);

				if(TextFind(ItemsInfo[item][itemName], "Капот для ") && deleted && vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(vehicleid))][vehicleBonnetData][0] > 0) 
					vehicleTuning[vehicleid][0] = vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(vehicleid))][vehicleBonnetData][0], 
					AddVehicleComponentEx(vehicleid, vehicleTuning[vehicleid][0]);
			}
		}
		SaveOwnableCar(GetVehicleID(vehicleid));
	}
	return true;
}

stock UploadAntiCheatSettings()
{
    new
        Cache:cache = mysql_query(mysql, "SELECT * FROM "AC_TABLE_SETTINGS" ORDER BY "AC_TABLE_FIELD_CODE"");

    if(cache_num_rows() > 0)
        for(new i; i < AC_MAX_TRIGGERS; i++)
    		cache_get_value_name_int(i, ""AC_TABLE_FIELD_TRIGGER"", AC_CODE_TRIGGER_TYPE[i]);

   	else
   	{
   	    print("[MySQL]: Настройки анти-чита не найдены в базе данных. Загрузка мода остановлена - настройте анти-чит.");
   	    return SendRconCommand("exit");
   	}

    return cache_delete(cache);
}

stock OnCheatDetected(playerid, code)
{
	AC_CODE_TRIGGERED_COUNT[code] ++;
	
    switch AC_CODE_TRIGGER_TYPE[code] do
    {
        case AC_CODE_TRIGGER_TYPE_WARNING:
        {
            f(global_str, 256, "[KANTI-CHEAT] %s[%d] [%d LVL] подозревается в использовании читов (%s) [Код: %03d].", PN(playerid), playerid, PI[playerid][pLevel], AC_CODE_NAME[code], code);
            SendAdminsMessage(0xD2B88FFF, global_str);
        }
        case AC_CODE_TRIGGER_TYPE_KICK: 
		{
			if(code == 15 or code == 47 && 71 <= GetPlayerWeaponEx(playerid) <= 91)
				return false;

			ToCheat(code, playerid);
		}
        default: return false;
    }
    return 1;
}

stock ToCheat(type, playerid)
{
	new string[20], days,year,month,hour,minutes;
    
	getdate(year, month, days);
    gettime(hour,minutes);
	
	f(string, sizeof(string), "%d:%s%d %d.%d.%d", hour, minutes <= 9 ? "0" : "", minutes, days, month, year);
	
	f(global_str, 500, "{FF6347}Вы были кикнуты за подозрение в читерстве\n\
		Чтобы избежать подобных ситуаций в будущем\n\
		удалите все клео и другие модификации для игры.\n\n\
		{FFFFFF}Аккаунт: %s\n\
		Игровой сервер: %s\n\
		Код причины: %s(%d / %d)\n\
		NetStat: %d(%.2f)\n\
		Version: 3fe977f\n\n\
		Если вы считаете, что произошла ошибка, то \n\
		{FF6347}сделайте скриншот{FFFFFF} данного окна и {FF6347}сообщите нам{FFFFFF}\n\n\
		{FF6347}Ссылка на форум: %s{FFFFFF}\n\
		Форум -> Технический раздел -> Античит: Ложное реагирование\n", PN(playerid), Setting_Server[7], AC_CODE_NAME[type], type, GetPlayerState(playerid), NetStats_BytesReceived(playerid), NetStats_PacketLossPercent(playerid), Setting_Server[4]);

    SPD(playerid, 19999, DIALOG_STYLE_MSGBOX, string, global_str, !"x", !"");
	f(global_str, 250, "[KANTI-CHEAT] %s[%d] [%d LVL] был кикнут за использовании читов: %s [Код: %03d].", PN(playerid), playerid, PI[playerid][pLevel], AC_CODE_NAME[type], type);
 	SendAdminsMessage(0xD2B88FFF, global_str);
	
	return J_Kick(playerid);
}

stock GetCarPrice(model)
{
	new cost;
	switch model do
	{
		case 541: cost = 13600000;
		case 411: cost = 18200000;
		case 560: cost = 5400000;
		case 451: cost = 12000000;
		case 415: cost = 6400000;
		case 562: cost = 3600000;
		case 559: cost = 4800000;
		case 429: cost = 6000000;
		case 603: cost = 200000;
		case 402: cost = 3000000;
		case 579: cost = 200000;
		case 602: cost = 200000;
		case 554: cost = 200000;
		case 490: cost = 200000;
		case 400: cost = 200000;
		case 540: cost = 200000;
		case 445: cost = 200000;
		case 489: cost = 200000;
		case 506: cost = 5600000;
		case 482: cost = 200000;
		case 483: cost = 200000;
		case 600: cost = 200000;
		case 474: cost = 200000;
		case 549: cost = 200000;
		case 575: cost = 200000;
		case 487: cost = 200000;
		case 488: cost = 200000;
		case 469: cost = 200000;
		case 556,557,444: cost = 24000000;
		case 522: cost = 8000000;
		case 521: cost = 200000;
		case 461: cost = 200000;
		case 468: cost = 200000;
		case 586: cost = 200000;
		case 581: cost = 200000;
		case 463: cost = 200000;
		case 534: cost = 200000;
		case 419: cost = 200000;
		case 412: cost = 200000;
		case 405: cost = 200000;
		case 580: cost = 200000;
		case 426: cost = 200000;
		case 421: cost = 200000;
		case 491: cost = 200000;
		case 535: cost = 200000;
		case 462: cost = 15000;
		case 510: cost = 15000;
		case 481: cost = 200000;
		case 509: cost = 15000;
		case 496: cost = 100000;
		case 565: cost = 2600000;
		case 589: cost = 215000;
		case 480: cost = 200000;
		case 475: cost = 220000;
		case 542: cost = 70000;
		case 439: cost = 265000;
		case 576: cost = 95000;
		case 566: cost = 200000;
		case 558: cost = 790000;
		case 551: cost = 130000;
		case 567: cost = 160000;
		case 500: cost = 100000;
		case 533: cost = 200000;
		case 536: cost = 200000;
		case 477: cost = 200000;
		case 587: cost = 200000;
		case 492: cost = 110000;
		case 495: cost = 2800000;
		case 473: cost = 150000;
		case 454: cost = 120000;
		case 452: cost = 500000;
		case 446: cost = 650000;
		case 434: cost = 350000;
		case 458: cost = 280000;
		case 401: cost = 90000;
		case 404: cost = 80000;
		case 410: cost = 65000;
		case 422: cost = 90000;
		case 436: cost = 78000;
		case 466: cost = 95000;
		case 478: cost = 85000;
		case 479: cost = 105000;
		case 507: cost = 115000;
		case 516: cost = 98000;
		case 517: cost = 79000;
		case 518: cost = 120000;
		case 526: cost = 80000;
		case 527: cost = 49000;
		case 529: cost = 97000;
		case 543: cost = 58000;
		case 545: cost = 210000;
		case 546: cost = 76000;
		case 547: cost = 81000;
		case 555: cost = 175000;
		case 561: cost = 510000;
		case 604: cost = 20000;
		case 605: cost = 20000;
		case 484: cost = 10000;
		case 471: cost = 70000;
		case 494: cost = 24000000;
		case 502: cost = 24000000;
		case 503: cost = 24000000;
		case 416: cost = 200000;
		case 431,437: cost = 200000;
		case 438: cost = 200000;
		case 523: cost = 200000;
		case 427: cost = 200000;
		case 528: cost = 200000;
		case 598,597,596: cost = 200000;
		case 514: cost = 200000;
		case 612..614,662,663,665,666,667,668,699,793,794,909,965,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,3155,3156,3157,3158,3194,3195,3196,3197,3198,3199: cost = 30000000;
		default: cost = 30000000;
	}
	return cost;
}

public: TrashTimer(playerid) 
	DeletePVar(playerid, "pTimeInv3");
	
stock CheckCraftItems(playerid)
{
	new s,c,ids = Int_GetPlayerData(playerid, "CraftSelect");
	for(new i; i < 5; i++)
	{
		if(!CraftInfo[ids][craftNeedKolvo][i]) { c++; continue; }
		if(CraftInfo[ids][craftNeedKolvo][i]*Int_GetPlayerData(playerid, "CraftScore") <= GetCount(playerid, CraftInfo[ids][craftNeed][i])) s++;
    }
	if(s >= 5-c && s) return 1;
	return 0; //CraftScore
}

stock ShowCraft(playerid)
{
	SetPVarString(playerid, "CraftType", "Accessory");
	SetPVarInt(playerid, "CraftPage",1);
	SetPVarInt(playerid, "CraftMaxPage",7);
	DeletePVar(playerid, "CraftSelect");
	DeletePVar(playerid, "CraftScore");
	DeletePVar(playerid, "CraftColor");
	for(new i = 0; i < 37; i++)
	{
		DestroyPlayerTD(playerid, CraftSuper[playerid][i]);
		if( i < 5) DestroyPlayerTD(playerid, CraftNeedText[playerid][i]), DestroyPlayerTD(playerid, CraftNeedTD[playerid][i]);
		if( i < 10) DestroyPlayerTD(playerid, CraftMenuBox[playerid][i]), DestroyPlayerTD(playerid, CraftMenuText[playerid][i]);
		if( i < 12) DestroyPlayerTD(playerid, CraftColor[playerid][i]);
	}
	CraftTextDraws(playerid);
	for(new i = 0; i < 37; i++) ShowPlayerTD(playerid, CraftSuper[playerid][i]);
	SetInfoCraftPlayer(playerid);
	UpdateMenuCraft(playerid);
	craftopen{playerid} = true;
	SelectTextDraw(playerid, PI[playerid][pSelectTD]);
	return 1;
}

stock HideCraft(playerid)
{
	for(new i = 0; i < 37; i++)
	{
		DestroyPlayerTD(playerid, CraftSuper[playerid][i]);
		if( i < 5) DestroyPlayerTD(playerid, CraftNeedText[playerid][i]),DestroyPlayerTD(playerid, CraftNeedTD[playerid][i]);
		if( i < 10) DestroyPlayerTD(playerid, CraftMenuBox[playerid][i]), DestroyPlayerTD(playerid, CraftMenuText[playerid][i]);
		if( i < 12) DestroyPlayerTD(playerid, CraftColor[playerid][i]);
	}
	DeletePVar(playerid, "CraftType");
	DeletePVar(playerid, "CraftPage");
	DeletePVar(playerid, "CraftMaxPage");
	craftopen{playerid} = false;
	CancelSelectTextDraw(playerid);
}

stock CraftTextDraws(playerid) { 
	#include textdraws/craft 
}

stock SetInfoCraftPlayer(playerid)
{
	new ids = Int_GetPlayerData(playerid, "CraftSelect");
	for(new i; i < 5; i++)
	{
		DestroyPlayerTD(playerid, CraftNeedText[playerid][i]);
		DestroyPlayerTD(playerid, CraftNeedTD[playerid][i]);

		if(!CraftInfo[ids][craftNeed][i]) continue;
			
		CraftNeedTD[playerid][i] = CreatePlayerTextDraw(playerid, 260.000000+(22.200012*i), 271.160461, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, CraftNeedTD[playerid][i], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, CraftNeedTD[playerid][i], 19.200001, 22.211765);
		PlayerTextDrawAlignment(playerid, CraftNeedTD[playerid][i], 1);
		PlayerTextDrawColor(playerid, CraftNeedTD[playerid][i], 0xFFFFFFFF999999FF);
		PlayerTextDrawUseBox(playerid, CraftNeedTD[playerid][i], 0);
		PlayerTextDrawBoxColor(playerid, CraftNeedTD[playerid][i], 0xFFFFFFFF80808080);
		PlayerTextDrawSetShadow(playerid, CraftNeedTD[playerid][i], 2);
		PlayerTextDrawSetOutline(playerid, CraftNeedTD[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, CraftNeedTD[playerid][i], 0x333333FF);
		PlayerTextDrawFont(playerid, CraftNeedTD[playerid][i], 5);
		PlayerTextDrawSetProportional(playerid, CraftNeedTD[playerid][i], 1);
		PlayerTextDrawSetSelectable(playerid, CraftNeedTD[playerid][i], 1);
		PlayerTextDrawSetPreviewModel(playerid, CraftNeedTD[playerid][i], ItemsInfo[CraftInfo[ids][craftNeed][i]][itemModel]);
		PlayerTextDrawSetPreviewRot(playerid, CraftNeedTD[playerid][i], ItemsInfo[CraftInfo[ids][craftNeed][i]][itemRotation][0], ItemsInfo[CraftInfo[ids][craftNeed][i]][itemRotation][1], ItemsInfo[CraftInfo[ids][craftNeed][i]][itemRotation][2],
		ItemsInfo[CraftInfo[ids][craftNeed][i]][itemRotation][3]);
			
		f(global_str,35, "%s %d/%d",(CraftInfo[ids][craftNeedKolvo][i]*Int_GetPlayerData(playerid, "CraftScore") <= GetCount(playerid, CraftInfo[ids][craftNeed][i]))
		? ("~g~"):("~r~"), GetCount(playerid, CraftInfo[ids][craftNeed][i]), CraftInfo[ids][craftNeedKolvo][i]*Int_GetPlayerData(playerid, "CraftScore"));
		CraftNeedText[playerid][i] = CreatePlayerTextDraw(playerid, 269.600006+(22.200012*i), 287.081940, global_str);
		PlayerTextDrawLetterSize(playerid, CraftNeedText[playerid][i], 0.089958, 0.529030);
		PlayerTextDrawTextSize(playerid, CraftNeedText[playerid][i], 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, CraftNeedText[playerid][i], 2);
		PlayerTextDrawColor(playerid, CraftNeedText[playerid][i], 0xFFFFFFFFFFFFFFFF);
		PlayerTextDrawUseBox(playerid, CraftNeedText[playerid][i], 0);
		PlayerTextDrawBoxColor(playerid, CraftNeedText[playerid][i], 0xFFFFFFFF80808080);
		PlayerTextDrawSetShadow(playerid, CraftNeedText[playerid][i], 0);
		PlayerTextDrawSetOutline(playerid, CraftNeedText[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, CraftNeedText[playerid][i], 0x00000000);
		PlayerTextDrawFont(playerid, CraftNeedText[playerid][i], 2);
		PlayerTextDrawSetProportional(playerid, CraftNeedText[playerid][i], 1);
		PlayerTextDrawSetSelectable(playerid, CraftNeedText[playerid][i], 0);

		ShowPlayerTD(playerid, CraftNeedTD[playerid][i]);
		ShowPlayerTD(playerid, CraftNeedText[playerid][i]);
		
		if(strlen(ItemsInfo[CraftInfo[ids][craftNeed][i]][itemTxd_name]))
		{
			if(ItemsInfo[CraftInfo[ids][craftNeed][i]][itemModel] && GetPlayerLauncher(playerid))
				PlayerTextDrawSetPreviewModel(playerid, CraftNeedTD[playerid][i], 0),
				PlayerTextDrawSetPreviewRot(playerid, CraftNeedTD[playerid][i], 0.000000, 0.000000, 0.000000, 100.000000);

            CreateCustomCellInventory(playerid, CraftNeedTD[playerid][i], CraftNeedTD[playerid][i], ItemsInfo[CraftInfo[ids][craftNeed][i]][itemTxd_name], 0.0, 0.0, Float:{19.200001, 22.211765}, true);
		}
	}
	//
	DestroyPlayerTD(playerid, CraftSuper[playerid][6]);
	f(global_str, 35 , "~g~$%d", 1000*Int_GetPlayerData(playerid, "CraftScore"));
	CraftSuper[playerid][6] = CreatePlayerTextDraw(playerid, 368.000000, 302.372223, global_str);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][6], 0.107949, 0.634835);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][6], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][6], 3);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][6], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][6], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][6], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][6], 0);

	DestroyPlayerTD(playerid, CraftSuper[playerid][5]);
	
	if(PI[playerid][pAddVIP]) f(global_str,35, "SUCCESS CHANCE: %d% ~g~(+%d%)", CraftInfo[ids][craftChance], CraftInfo[ids][craftChance]);
	else f(global_str,35, "SUCCESS CHANCE: %d%", CraftInfo[ids][craftChance]);
	CraftSuper[playerid][5] = CreatePlayerTextDraw(playerid, 314.000000, 312.073669, global_str);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][5], 0.134937, 0.793544);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][5], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][5], 2);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][5], 0xFFFFFFFFDA9949FF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][5], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][5], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][5], 0);

	DestroyPlayerTD(playerid, CraftSuper[playerid][23]);
	f(global_str,35, "%s",ItemsInfo[CraftInfo[ids][craftAksID]][itemEng_name]);
	CraftSuper[playerid][23] = CreatePlayerTextDraw(playerid, 331.437500, 204.350006, global_str);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][23], 0.107949, 0.634835);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][23], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][23], 2);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][23], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][23], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][23], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][23], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][23], 0);

	DestroyPlayerTD(playerid, CraftSuper[playerid][2]);
	CraftSuper[playerid][2] = CreatePlayerTextDraw(playerid, 257.000000, 201.350006, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][2], 31.875000, 36.875000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][2], 1);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][2], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][2], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][2], ItemsInfo[CraftInfo[ids][craftAksID]][itemColor]);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][2], ItemsInfo[CraftInfo[ids][craftAksID]][itemCustom] == 2 ? 100 : 5);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][2], 1);
	PlayerTextDrawSetPreviewModel(playerid, CraftSuper[playerid][2], (IsASkinInv(CraftInfo[ids][craftAksID]) ? GetSkinInfo(ItemsInfo[CraftInfo[ids][craftAksID]][itemModel]) : ItemsInfo[CraftInfo[ids][craftAksID]][itemModel]));
	PlayerTextDrawSetPreviewRot(playerid, CraftSuper[playerid][2], ItemsInfo[CraftInfo[ids][craftAksID]][itemRotation][0], ItemsInfo[CraftInfo[ids][craftAksID]][itemRotation][1], ItemsInfo[CraftInfo[ids][craftAksID]][itemRotation][2],
	ItemsInfo[CraftInfo[ids][craftAksID]][itemRotation][3]);
    
	ShowPlayerTD(playerid, CraftSuper[playerid][2]);
	
	if(strlen(ItemsInfo[CraftInfo[ids][craftAksID]][itemTxd_name]))
	{
		if(ItemsInfo[CraftInfo[ids][craftAksID]][itemModel] && GetPlayerLauncher(playerid))
			PlayerTextDrawSetPreviewModel(playerid, CraftSuper[playerid][2], 0),
			PlayerTextDrawSetPreviewRot(playerid, CraftSuper[playerid][2], 0.000000, 0.000000, 0.000000, 100.000000);

        CreateCustomCellInventory(playerid, CraftSuper[playerid][2], CraftSuper[playerid][2], ItemsInfo[CraftInfo[ids][craftAksID]][itemTxd_name], 0.0, 0.0, Float:{31.875000, 36.875000}, true);
	}
		
	ShowPlayerTD(playerid, CraftSuper[playerid][23]);
	ShowPlayerTD(playerid, CraftSuper[playerid][5]);
	ShowPlayerTD(playerid, CraftSuper[playerid][6]);
	PlayerTextDrawHide(playerid, CraftSuper[playerid][3]);
	if(CheckCraftItems(playerid)) PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][3], 1);
	else PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][3], 0);
	ShowPlayerTD(playerid, CraftSuper[playerid][3]);
	//
}
stock UpdateMenuCraft(playerid)
{
	for(new i; i < 10; i++)
	{
		DestroyPlayerTD(playerid, CraftMenuText[playerid][i]);
		DestroyPlayerTD(playerid, CraftMenuBox[playerid][i]);
		CraftMenuBox[playerid][i] = CreatePlayerTextDraw(playerid, 249.300003, 199.850006+(13.111115*i), "usebox");
		PlayerTextDrawLetterSize(playerid, CraftMenuBox[playerid][i], 0.000000, 1.128367);
		PlayerTextDrawTextSize(playerid, CraftMenuBox[playerid][i], 154.500000, 0.000000);
		PlayerTextDrawAlignment(playerid, CraftMenuBox[playerid][i], 1);
		PlayerTextDrawColor(playerid, CraftMenuBox[playerid][i], 0xFFFFFFFFE1E1E1FF);
		PlayerTextDrawUseBox(playerid, CraftMenuBox[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, CraftMenuBox[playerid][i], 0x050505FF);
		PlayerTextDrawSetShadow(playerid, CraftMenuBox[playerid][i], 2);
		PlayerTextDrawSetOutline(playerid, CraftMenuBox[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, CraftMenuBox[playerid][i], 0x000000FF);
		PlayerTextDrawFont(playerid, CraftMenuBox[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid, CraftMenuBox[playerid][i], 1);
		PlayerTextDrawSetSelectable(playerid, CraftMenuBox[playerid][i], 0);
		ShowPlayerTD(playerid, CraftMenuBox[playerid][i]);
	}
	
	new i, block = (Int_GetPlayerData(playerid, "CraftPage")-1)*10, ids = Int_GetPlayerData(playerid, "CraftSelect"), type[10], string[30];
	GetPVarString(playerid, "CraftType", type, sizeof(type));
	
	for(new z; z < MAX_CRAFTS; z++)
	{
		if(!CraftInfo[z][craftAksID]) continue;
		if(GetString(CraftInfo[z][craftType],type))
		{
			if(block){ block--; continue; }
			f(string, sizeof(string), "%s", ItemsInfo[CraftInfo[z][craftAksID]][itemEng_name]);
			CraftMenuText[playerid][i] = CreatePlayerTextDraw(playerid, 162.000000, 201.731384+(13.111115*i), string);
			PlayerTextDrawLetterSize(playerid, CraftMenuText[playerid][i], 0.107949, 0.634835);
			PlayerTextDrawTextSize(playerid, CraftMenuText[playerid][i], 254.000000, 6.348354);
			PlayerTextDrawAlignment(playerid, CraftMenuText[playerid][i], 1);
			PlayerTextDrawColor(playerid, CraftMenuText[playerid][i], 0xFFFFFFFFFFFFFFFF);
			PlayerTextDrawUseBox(playerid, CraftMenuText[playerid][i], 0);
			PlayerTextDrawBoxColor(playerid, CraftMenuText[playerid][i], 0xFFFFFFFF80808080);
			PlayerTextDrawSetShadow(playerid, CraftMenuText[playerid][i], 0);
			PlayerTextDrawSetOutline(playerid, CraftMenuText[playerid][i], 0);
			PlayerTextDrawBackgroundColor(playerid, CraftMenuText[playerid][i], 0x00000000);
			PlayerTextDrawFont(playerid, CraftMenuText[playerid][i], 2);
			PlayerTextDrawSetProportional(playerid, CraftMenuText[playerid][i], 1);
			if(z == ids){
				PlayerTextDrawSetSelectable(playerid, CraftMenuText[playerid][i], 0);
				PlayerTextDrawHide(playerid, CraftMenuBox[playerid][i]);
				PlayerTextDrawBoxColor(playerid, CraftMenuBox[playerid][i], 0x1C1F21FF);
				ShowPlayerTD(playerid, CraftMenuBox[playerid][i]);
			}
			else PlayerTextDrawSetSelectable(playerid, CraftMenuText[playerid][i], 1);
			ShowPlayerTD(playerid, CraftMenuText[playerid][i]);
			CraftMassive[playerid][i] = z;
			i++;
			if(i == 10) break;
		}
	}
	for(new q; q < 5; q++)
	{
		new id = 33-q;
		switch(id)
		{
			case 33: string = "Accessory";
			case 32: string = "Clothes";
			case 31: string = "Chemistry";
			case 30: string = "Working";
			case 29: string = "Tuning";
		}
		PlayerTextDrawHide(playerid, CraftSuper[playerid][id]);
		if(GetString(type, string))
		{
			PlayerTextDrawColor(playerid, CraftSuper[playerid][id], 0xFFFFFFFFDA9949FF);
			PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][id], 0);
		}
		else
		{
			PlayerTextDrawColor(playerid, CraftSuper[playerid][id], 0x777777FF);
			PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][id], 1);
		}
		ShowPlayerTD(playerid, CraftSuper[playerid][id]);
	}
	
	if(Int_GetPlayerData(playerid, "CraftColor")) DeletePVar(playerid, "CraftColor"), DestroyPlayerTD(playerid, CraftColor[playerid][11]);
	DestroyPlayerTD(playerid, CraftSuper[playerid][26]);
	f(string,sizeof(string),"%d / %d", Int_GetPlayerData(playerid, "CraftPage"), Int_GetPlayerData(playerid, "CraftMaxPage"));
	CraftSuper[playerid][26] = CreatePlayerTextDraw(playerid, 202.000000, 332.842499, string);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][26], 0.107949, 0.634835);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][26], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][26], 2);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][26], 0xFFFFFFFFDA9949FF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][26], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][26], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][26], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][26], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][26], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][26], 0);
	ShowPlayerTD(playerid, CraftSuper[playerid][26]);
}

stock UpdateCraftCounts(playerid)
{
	new string[10];
	DestroyPlayerTD(playerid, CraftSuper[playerid][9]);
	f(string, sizeof(string), "%d", Int_GetPlayerData(playerid, "CraftScore"));
	CraftSuper[playerid][9] = CreatePlayerTextDraw(playerid, 288.885254, 329.710571, string);
	PlayerTextDrawLetterSize(playerid, CraftSuper[playerid][9], 0.107949, 0.634835);
	PlayerTextDrawTextSize(playerid, CraftSuper[playerid][9], 312.885254, 6.348354);
	PlayerTextDrawAlignment(playerid, CraftSuper[playerid][9], 1);
	PlayerTextDrawColor(playerid, CraftSuper[playerid][9], 0x777777FF);
	PlayerTextDrawUseBox(playerid, CraftSuper[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, CraftSuper[playerid][9], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftSuper[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, CraftSuper[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftSuper[playerid][9], 0x00000000);
	PlayerTextDrawFont(playerid, CraftSuper[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, CraftSuper[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, CraftSuper[playerid][9], 1);
	ShowPlayerTD(playerid, CraftSuper[playerid][9]);
}

public: CraftProcess(playerid)
{
	KillTimer(besttimer[playerid]);
	GiveMoney(playerid, -1000);
	new ids = Int_GetPlayerData(playerid, "CraftSelect"), itemid = CraftInfo[ids][craftAksID],chance;
	if(!PI[playerid][pAddVIP]) chance = CraftInfo[ids][craftChance];
	else chance = CraftInfo[ids][craftChance]*2;
	if(random(100) <= chance)
	{
		if(Int_GetPlayerData(playerid, "CraftColor")) AddItem(playerid, CraftInfo[ids][craftColor][Int_GetPlayerData(playerid, "CraftColor")], 1);
		else AddItem(playerid, itemid, 1);
		f(global_str, 150, "Вы успешно создали предмет '%s' (шанс изготовления %d процент(ов))",ItemsInfo[itemid][itemName],chance);
		SCM(playerid, COLOR_VALIK, global_str);
		GameTextForPlayer(playerid, "~g~Successfully", 1000, 1);
	}
	else
	{
		f(global_str, 150, "Создание предмета '%s' не удалось (шанс изготовления %d процент(ов))",ItemsInfo[itemid][itemName],chance);
		SCM(playerid, COLOR_GREY, global_str);
		GameTextForPlayer(playerid, "~r~Failing", 1000, 1);
	}
	for(new i; i < 5; i++)
	{
		if(!CraftInfo[ids][craftNeedKolvo][i]) continue;
		DeleteItem(playerid, CraftInfo[ids][craftNeed][i], CraftInfo[ids][craftNeedKolvo][i]);
    }
	DeletePVar(playerid, "CraftStatus");
	ClearAnimationsEx(playerid);
	if(Int_GetPlayerData(playerid, "CraftScore") > 1)
	{
		SetPVarInt(playerid, "CraftStatus",1);
		SetPVarInt(playerid, "CraftScore", Int_GetPlayerData(playerid, "CraftScore")-1);
		switch(random(3))
		{
			case 0: ApplyAnimationEx(playerid, !"SCRATCHING", !"SCMID_L", 4.1, 1, 1, 1, 1, 0, 1);
			case 1: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_REACT_MISS", 4.1, 1, 1, 1, 1, 0, 1);
			case 2: ApplyAnimationEx(playerid, !"CASINO", !"DEALONE", 4.1, 1, 1, 1, 1, 0, 1);
		}
		besttimer[playerid] = CallTimeOutFunction("CraftProcess",5000+random(5000),0,"d",playerid);
	}
	else TogglePlayerControllable(playerid, true);
	return 1;
}

stock DelCraft(playerid)
{
	TogglePlayerControllable(playerid, false);
	CancelSelectTextDraw(playerid);
	SetPVarInt(playerid, "CraftStatus",1);
	for(new i = 0; i < 37; i++)  DestroyPlayerTD(playerid, CraftSuper[playerid][i]);
	switch(random(3))
    {
	    case 0: ApplyAnimationEx(playerid, !"SCRATCHING", !"SCMID_L", 4.1, 1, 1, 1, 1, 0, 1);
	    case 1: ApplyAnimationEx(playerid, !"BSKTBALL", !"BBALL_REACT_MISS", 4.1, 1, 1, 1, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, !"CASINO", !"DEALONE", 4.1, 1, 1, 1, 1, 0, 1);
    }
	besttimer[playerid] = CallTimeOutFunction("CraftProcess",5000+random(5000),0,"d",playerid);
	return 1;
}

stock AddOwnableCar(playerid, modelId, Owner_data[])
{
	new ID = FindFreeCarSlot();
	
	if(ID == -1)
		return -1;
		
	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid,X,Y,Z);
	GetPlayerFacingAngle(playerid, A);
	
	CarInfo[ID][cModel] = modelId;
	CarInfo[ID][cPos][0] = X;
	CarInfo[ID][cPos][1] = Y;
	CarInfo[ID][cPos][2] = Z;
	CarInfo[ID][cPos][3] = A;
	CarInfo[ID][cColor_1] =
	CarInfo[ID][cColor_2] = 
	CarInfo[ID][cParkedInPark] = 1;
	CarInfo[ID][cKeyIN] =
	CarInfo[ID][cLock] = 0;
	CarInfo[ID][cCost]= GetCarPrice(modelId);
	CarInfo[ID][cInterior] = GetPlayerInterior(playerid);
	CarInfo[ID][cVirtualWorld] = GetPlayerVirtualWorld(playerid);
	SetString(CarInfo[ID][cOwner], Owner_data);
	SetString(CarInfo[ID][cKeyer], "The State");
	
	OwnableCar[ID] = J_AddStaticVehicleEx(CarInfo[ID][cModel], CarInfo[ID][cPos][0], CarInfo[ID][cPos][1],CarInfo[ID][cPos][2],CarInfo[ID][cPos][3],CarInfo[ID][cColor_1],CarInfo[ID][cColor_2], 60000, CarInfo[ID][cInterior], CarInfo[ID][cVirtualWorld], ID);
	CarText[OwnableCar[ID]] = CreateDynamic3DTextLabel(!"-", -1,0,0,0.5,5.0, INVALID_PLAYER_ID, OwnableCar[ID]);
	UpdateCarInfo(OwnableCar[ID]);
	
	f(global_str, 2000, "INSERT INTO `ownable` (`Model`, `Position`, `Owner`,`Cost`,`Keyer`, `Milage`, `Shtraf`, `VirtualWorld`, `Interior`, `ParkedInGarage`, `ParkedInParking`, `Color_1`, `Color_2`) VALUES ('%d','%s','%s','%d','%s', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d')",
	modelId,
	Float_PackMassive(0, CarInfo[ID][cPos]),
	Owner_data,
	CarInfo[ID][cCost],
	CarInfo[ID][cKeyer],
	CarInfo[ID][cMilage],
	CarInfo[ID][cShtraf],
	CarInfo[ID][cVirtualWorld],
	CarInfo[ID][cInterior],
	CarInfo[ID][cParkedInGarage],
	CarInfo[ID][cParkedInParking],
	CarInfo[ID][cColor_1],
	CarInfo[ID][cColor_2]);
	
	new Cache:result = mysql_query(mysql, global_str);
	
	CarInfo[ID][cID] = cache_insert_id();
	
	cache_delete(result); 

	return ID;
}

stock CreateMenuTD(playerid)
{
	pokazmenu[playerid][8] = CreatePlayerTextDraw(playerid, 321.100006, 211.570297, "");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][8], 0.131300, 0.973599);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][8], 10.100000, 30.100000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][8], 2);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][8], 0x000000CE);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][8], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][8], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][8], 0);

	pokazmenu[playerid][7] = CreatePlayerTextDraw(playerid, 372.000000, 7.722222, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][7], 0.000000, 1.434773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][7], 272.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][7], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][7], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][7], 0x00000050);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][7], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][7], 0);

	pokazmenu[playerid][6] = CreatePlayerTextDraw(playerid, 321.999939, 11.199998, "Andrey_Wokreez - 76");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][6], 0.136997, 0.687404);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][6], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][6], 2);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][6], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][6], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][6], 0);

	pokazmenu[playerid][5] = CreatePlayerTextDraw(playerid, 274.666504, 25.729628, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][5], 0.000000, 0.134773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][5], 272.000061, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][5], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][5], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][5], 0xAC0D0DFF);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][5], 0);

	pokazmenu[playerid][4] = CreatePlayerTextDraw(playerid, 274.666504, 31.707405, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][4], 0.000000, 0.134773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][4], 272.000061, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][4], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][4], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][4], 0x2F5499FF);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][4], 0);

	pokazmenu[playerid][3] = CreatePlayerTextDraw(playerid, 371.999847, 25.729628, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][3], 0.000000, 0.134773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][3], 272.000061, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][3], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][3], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][3], 0x00000050);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][3], 0);

	pokazmenu[playerid][2] = CreatePlayerTextDraw(playerid, 371.999847, 31.707405, "_");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][2], 0.000000, 0.134773);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][2], 272.000061, 0.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][2], 1);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][2], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][2], 0x00000050);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][2], 0);

	pokazmenu[playerid][1] = CreatePlayerTextDraw(playerid, 322.333710, 23.229647, "85.15");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][1], 0.097666, 0.596148);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][1], 2);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][1], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][1], 0);

	pokazmenu[playerid][0] = CreatePlayerTextDraw(playerid, 322.333710, 29.207420, "0.00");
	PlayerTextDrawLetterSize(playerid, pokazmenu[playerid][0], 0.097666, 0.596148);
	PlayerTextDrawTextSize(playerid, pokazmenu[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, pokazmenu[playerid][0], 2);
	PlayerTextDrawColor(playerid, pokazmenu[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, pokazmenu[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, pokazmenu[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pokazmenu[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, pokazmenu[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, pokazmenu[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, pokazmenu[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, pokazmenu[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, pokazmenu[playerid][0], 0);
	return 1;
}

stock deltarget(playerid)
{
	for(new i; i < 8; i++) PlayerTextDrawHide(playerid, pokazmenu[playerid][i]);
	return true;
}

stock DestroyInv(playerid)
{
	if(!InventoryOpen{playerid})
		return false;

	for(new i = 0; i < 35; i++)
	{
		DestroyPlayerTD(playerid,InvTextDraws[playerid][i]);
		if(i < 18) DestroyPlayerTD(playerid, InventMenuTD[playerid][i]);
		if(i < 7) 
		{
		    for(new j; j < 3; j++) DestroyPlayerTD(playerid, UpgradeMenuSlot[playerid][i][j]);
		    DestroyPlayerTD(playerid, TDinv[playerid][i]);
		}
		if(i < 8) DestroyPlayerTD(playerid, InvItemSlot[playerid][i]),DestroyPlayerTD(playerid, InvColorSlot[playerid][i]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][i]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][8 + i]);
	}
	
	InventoryOpen{playerid} = false;
	PI[playerid][pInvPage] = PI[playerid][OpenGunMenu] = timeskin[playerid] = 0;
	timeaks[playerid] = -1;

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		SpeedometrSetting(playerid, 1);
	
	HideInventoryPage(playerid);
	
	return true;
}

stock IsPlayerHouse(playerid, houseid)
	return (houseid >= 0 ? GetString(HouseInfo[houseid][hOwner], PN(playerid)) : 0);

stock GetPlayerHouses(playerid, check = 0)
{
    new num;

    for(new i;i<OWNABLEHOUSES; i++)
    {
        if(GetString(HouseInfo[i][hOwner], PN(playerid)))
			num++;
    }

	if(check) return num;
	
	if(PI[playerid][pVIP][0] == 8 && num < 25) return true;
	else if(PI[playerid][pVIP][0] == 7 && num < 15) return true;
	else if(PI[playerid][pVIP][0]== 6 && num <=6) return true;
	else if(ImprovementsData[playerid][idMoreHouses] == 0 && num <=0) return true;
	else if(ImprovementsData[playerid][idMoreHouses] > 0 && num <=2) return true;
    
	return false;
}

stock CreateSlotInvent(playerid, Float:x, Float:y, mobile = false)
{
	for(new i, td; i < 6; i++)
	{
		for(new s; s < 6; s++)
		{
			td = s + i * 6;

			Kletka[playerid][td] = CreatePlayerTextDraw(playerid, x + 26.5 * s + ( 5.79657 * pTemp[playerid][inventorySize][0] + pTemp[playerid][inventorySize][0] * s), y + 30.5 * i + ( 0.799988 * pTemp[playerid][inventorySize][1] + pTemp[playerid][inventorySize][1] * i), "LD_SPAC:white");
			PlayerTextDrawLetterSize(playerid, Kletka[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, Kletka[playerid][td], (mobile ? 30.012203 : 25.500000) + pTemp[playerid][inventorySize][0], (mobile ? 34.720002 : 29.500000) + pTemp[playerid][inventorySize][1]);
			PlayerTextDrawAlignment(playerid, Kletka[playerid][td], 1);
			PlayerTextDrawColor(playerid, Kletka[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, Kletka[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, Kletka[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, Kletka[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, Kletka[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, Kletka[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, Kletka[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, Kletka[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, Kletka[playerid][td], true);
		}
	}

	return true;
}

cmd:oillist(playerid)
{
	global_str = "Бизнес\tЗапас нефти\tВладелец\n";
	for(new i; i < 8; i++)
		f(global_str, 1250, "%s[%d] Номер бизнеса: %d\t{AEF7A6}%d/1000000 литров{FFFFFF}\t[%s]\n",
			global_str, i, NeftBizID[0][i], BizData[NeftBizID[0][i]][bProducts], BizData[NeftBizID[0][i]][bOwner]);
			
	return SPD(playerid, 1727, DIALOG_STYLE_TABLIST_HEADERS, !"Всего вышек: 8 | Работают: 8", global_str, !"Выбрать", !"Отмена");
}

cmd:addbiz(playerid)
{
	if(!IsOsnovatel(playerid)) return 0;
    return SPD(playerid, 9321, DIALOG_STYLE_LIST, "Выберите тип бизнеса", "\
    Магазин 24/7\n\
    Закусочная \n\
    Магазин 'АЗС' \n\
    Аренда автомобилей \n\
    Бар \nАмуниция \n\
    Магазин одежды \n\
    Предприятие \n\
    Тюнинг салон\n\
    Автобазар\n\
    Ларек с уличной едой\n\
    Шахта\n\
    Автосалон эконом класса\n\
    Автосалон среднего класса\n\
    Автосалон элитного класса\n\
    Магазин тюнинга LS\n\
    Магазин тюнинга LV\n\
    Нефтевышка\n\
    Мастерская одежды\n\
	Отель\n\
	Сельскохозяйственный магазин\n\
	Аренда сельхоз техники\n\
	Магазин аксессуаров\n\
	Магазин видеокарт\n\
	Секнод хенд\n\
	Авто Сервис", !"Выбрать", !"Отмена");
}

cmd:addcar(playerid, data[])
{
    if(!IsOsnovatel(playerid))
		return false;
	
	extract data -> new car; else 
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /addcar [carid]");
	
	new id = AddOwnableCar(playerid, car, "The State");
	
	if(!(id == -1))
		SCMF(playerid, COLOR_ORANGE, "The car successfully added | %d", CarInfo[id][cID]),
		amlf("Администратор <a href=../pages/user?id=%d>%s</a> создал автомобиль <a href=../pages/carlog.php?id=%d>№%d</a>.", 5, "","", PI[playerid][pID], PN(playerid), CarInfo[id][cID], CarInfo[id][cID]);
	
	return true;
}

cmd:carhp(playerid, params[])
{
	new id, Float:hp;
	if(sscanf(params,"df",id,hp)) return SCM(playerid,COLOR_GREEN, !"Используйте: /carhp [id] [ammount]");
	J_SetVehicleHealth(id,hp);
	
	return SCMF(playerid,COLOR_GREY,"Вы установили транспорту [%d] %.0f ХП",id,hp);
}

cmd:flip(playerid, params[])
{
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Используйте: /flip [ID]");
	if(!IsPlayerInAnyVehicle(id)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игрок не находится в транспорте!");
	
	new car = GetPlayerVehicleID(id), Float:X, Float:Y, Float:Z, Float:A;
    GetVehiclePos(car, X, Y,Z);
    GetVehicleZAngle(car, A);
    SetVehiclePos(car, X, Y, Z+1.0);
    SetVehicleZAngle(car, A);
    J_RepairVehicle(car);

	f(global_str, 150, "[A] %s[%d] флип'нул игрока %s[%d]", PN(playerid), playerid, PN(id), id);
	SendAdminsMessage(COLOR_YELLOW, global_str);
	return 1;
}

public: ServerRestart()
{
	return SCMALL(0xBE2D2DFF, !"Внимание!");
	
	/*switch Mode[RESTART_ETAPE] do
	{
		case 0:
		{
			SCMALL(0xBE2D2DFF, !"Технический рестарт через 02 минут. Советуем завершить текущую сессию");
			SetTimer("ServerRestart", 60000, false);
			
			SendRconCommand((str_f("password THIS_RESTART_UNICAL_ID_%d", random(9999999)+random(999999))));
			SendRconCommand("hostname ARIZONA RP | SUPREME | Технический рестарт!");
		}
		
		case 1:
		{
			SCMALL(0xBE2D2DFF, !"Технический рестарт через 01 минут. Сессия завершена принудительно");
			
			SaveServerData();
			
			foreach(Player,i) 
			{
				SaveInventory(i);
				Kick(i);
			}
			
			SetTimer("ServerRestart", 60000, false);
			
			if(getDayEx() == 1) 
				mysql_tquery(mysql, "UPDATE businesses SET monday = 0, tuesday = 0, wednesday = 0, thursday = 0, friday = 0, saturday = 0, sunday = 0"),
				mysql_tquery(mysql, "DELETE FROM onlineinfo");
		}
		
		case 2:
		{
			SendRconCommand("gmx");
		}
		
		case 3:
		{
			SendRconCommand("password 0");
			
			Mode[RESTART_ETAPE] =
			Mode[CFG_PASS_SERVER] = 0;
			
			return SaveInformation();
		}
	}*/
	
	//return Mode[RESTART_ETAPE]++;
}

stock DeleteOpisanie(playerid)
{
	if(IsValidDynamic3DTextLabel(PlayerOpisanie[playerid])) 
		DestroyDynamic3DTextLabel(PlayerOpisanie[playerid]);
	
	PlayerOpisanie[playerid] = Text3D:-1;

	return true;
}

stock CreateOpisanie(playerid)
{
	if(strlen(PI[playerid][pOpisanie]) < 3) 
		return false;

	DeleteOpisanie(playerid);
	
	PlayerOpisanie[playerid] = CreateDynamic3DTextLabel(PI[playerid][pOpisanie], 0xAFAFAFFF, 0.0, 0.0, -1.0, 5, playerid, -1, 0, -1, -1, -1);

	return 1;
}

stock IsACarInv(id)
	return SearchVehicleMassiveID(id) ? true : false;

stock IsASkinInv(itemid)
	return TextFind(ItemsInfo[itemid][itemName], "Скин:");

stock IsABoxInv(itemid)
{
	for(new i; i < sizeof(BoxInfo_data); i++)
		if(BoxInfo_data[i][data_ItemID] == itemid) return true;

	return false;
}

cmd:plgmadmin(playerid, params[])
{
	
	if(sscanf(params, "u", params[0])) return SCM(playerid, COLOR_OLDRED, "Используй: /plgmadmin [id/name]");
	if(params[0] == INVALID_PLAYER_ID) return 0;
	if(PI[params[0]][pAdmin] <= 0) return 0;
	if(agm[params[0]] == 0.0000) 
	{
		GetPlayerHealth(params[0], agm[params[0]]);
		UpdatePlayerHealth(params[0], 0x7F800000);
		SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы успешно активировали бессмертие");
	}
	else {
	    UpdatePlayerHealth(params[0], agm[params[0]]);
		SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы успешно выключили бессмертие");
		agm[params[0]] = 0.0000;
	}
	return 1;
}

stock GetGangName(capture)
{
    static string[30];
	switch(capture)
	{
	    case 11: f(string, sizeof(string), "GROVE");
	    case 12: f(string, sizeof(string), "VAGOS");
	    case 13: f(string, sizeof(string), "BALLAS");
	    case 14: f(string, sizeof(string), "AZTECAS");
	    case 15: f(string, sizeof(string), "RIFA");
	    case 25: f(string, sizeof(string), "WOLFS");
	}
	return string;
}

cmd:sobes(playerid)
{
	global_str = "Организация\tЗапланировано\tМесто\n";
	for(new i = 1; i < MAX_ORGS; i++)
	{
		switch(i)
		{
			case TEAM_LSPD,TEAM_LVPD,TEAM_RCPD,TEAM_FBI,TEAM_ARMY,TEAM_ARMYLV,TEAM_LICENSERS,TEAM_SFPD,TEAM_M4C,TEAM_MEDICLV,TEAM_MERIALS,TEAM_BANK,TEAM_RADIO,TEAM_RADIOSF,TEAM_RADIOLV,TEAM_ARMYSF:
			{
				f(global_str, 1500,"%s{FFFFFF}- %s\t{CBEC39}%s\t%s\n", global_str, OrgInfo[i][oName], SobesStatus[i] ? (SobesTime[i]):("{D2D0C9}Не запланировано"), SobesStatus[i] ? (SobesMesto[i]):("{D2D0C9}Не назначено!"));
			}
		}
	}
	SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "{E4DB5E}Собеседования", global_str, "Понял", "");
	return true;
}

cmd:gnews(playerid)
{
    if(!IsAtFrakcia(playerid)) return false;
    if(PI[playerid][pRank] < 9 && PI[playerid][pMember][1] == 0) return SCM(playerid,COLOR_RED,!"Вы не лидер или 9-ый ранг");

    if(PI[playerid][pMuteTime] > 0) return SCM(playerid, 0xAFAFAFFF, !"[Ошибка] У Вас бан чата!");

	SPD(playerid,3443,1,"","{FFFFFF}Укажите {A5F253}время{FFFFFF} на которое хотите назначить собеседование!\n\nНапишите {A5F253}часы, минуты и местоположение{FFFFFF} через запятую!\n\nПример:[ {F2DF53}19,20,Военкомат{FFFFFF} ]\n\n", !"Принять", !"Отмена");
    return 1;
}

cmd:orel(playerid, params[])
{
	new biz = BizEntered[playerid];
	f(mysql_string, sizeof(mysql_string), "[Ошибка] {FFFFFF}Минимальная ставка 1000 BTC, максимальная %d BTC.", GetCostUpgradeBar(BizData[biz][bUpgrade][0]));
		
	if(biz == -1 or !(BizData[biz][bState] == 1))
		return SCM(playerid, COLOR_GREY, !"Вы должны находится в баре!");
	
	else if(sscanf(params, "ud", params[0], params[1]))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте /orel [id игрока] [ставка]");
   	
	else if(!(1000 <= params[1] <= (GetCostUpgradeBar(BizData[biz][bUpgrade][0]))))
		return SCM(playerid, COLOR_RED, mysql_string);
	
	else if(GetCount(playerid, 1811) < params[1] or GetCount(params[0], 1811) < params[1])
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У кого-то из вас не хватает денег!");
	
	else if(params[0] == playerid) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя кинуть самому себе предложение!");

	else if(!ProxDetectorS(7.0, playerid, params[0])) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF}Вы далеко от игрока!");
	
	else if (OrelName[playerid] != INVALID_PLAYER_ID) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF}Вы уже кинули предложение!");
	
	else if(OrelName[params[0]] != INVALID_PLAYER_ID)  
		return false;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 506.1710,-69.5010,999.6721) || IsPlayerInRangeOfPoint(playerid, 5.0, 493.8653,-17.5930,1001.1519) || IsPlayerInRangeOfPoint(playerid, 5.0, -2652.9382,1410.2617,906.2734))
	{
		ZapretOrel[playerid] = 1;
		ZapretOrel[params[0]] = 1;
		OrelName[playerid] = params[0];
		OrelName[params[0]] = playerid;
		OrelMoney[params[0]] = params[1];
		OrelMoney[playerid] = params[1];
		StatusMoneta[playerid] = "Орёл";
		StatusMoneta[params[0]] = "Решка";
		
		SCMF(playerid, COLOR_VALIK,"[Оповещание]{FFFFFF} Вы предложили игроку {FFFF00}%s{FFFFFF} сыграть в игру 'Орёл и Решка', ставка: {FFFF00}%d BTC{FFFFFF}.", PN(params[0]), params[1]);
		SCM(playerid, COLOR_VALIK, !"[Подсказка]{AFAFAF} (/or_cancel - отозвать приглошение)");
		
		f(global_str, 300,"{FFFF00}%s{FFFFFF} предлагает сыграть в игру ''Орёл и Решка''.\nСтавка: {FFFF00}%d BTC{FFFFFF}\nИгрок выбрал сторону: {FFFF00}Орёл{FFFFFF}",PN(playerid),params[1]);
	 	SPD(OrelName[playerid], 3724, DIALOG_STYLE_MSGBOX, !"Орёл и Решка", global_str, !"Играть", !"Отказать");
	}
	else 
		SCM(playerid,COLOR_GREY, !"Вы должны находится в баре!");
	
	return true;
}

cmd:reshka(playerid, params[])
{
	new biz = BizEntered[playerid];
	f(mysql_string, sizeof(mysql_string), "[Ошибка] {FFFFFF}Минимальная ставка 1000 BTC, максимальная %d BTC.", GetCostUpgradeBar(BizData[biz][bUpgrade][0]));
		
	if(biz == -1 or !(BizData[biz][bState] == 1))
		return SCM(playerid, COLOR_GREY, !"Вы должны находится в баре!");
	
	else if(sscanf(params, "ud", params[0], params[1]))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте /reshka [id игрока] [ставка]");
   	
	else if(!(1000 <= params[1] <= (GetCostUpgradeBar(BizData[biz][bUpgrade][0]))))
		return SCM(playerid, COLOR_RED, mysql_string);
	
	else if(GetCount(playerid, 1811) < params[1] or GetCount(params[0], 1811) < params[1])
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У кого-то из вас не хватает денег!");
	
	else if(params[0] == playerid) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя кинуть самому себе предложение!");

	else if(!ProxDetectorS(7.0, playerid, params[0])) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF}Вы далеко от игрока!");
	
	else if (OrelName[playerid] != INVALID_PLAYER_ID) 
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF}Вы уже кинули предложение!");
	
	else if(OrelName[params[0]] != INVALID_PLAYER_ID)  
		return false;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 506.1710,-69.5010,999.6721) || IsPlayerInRangeOfPoint(playerid, 5.0, 493.8653,-17.5930,1001.1519) || IsPlayerInRangeOfPoint(playerid, 5.0, -2652.9382,1410.2617,906.2734))
	{
		ZapretOrel[playerid] = 1;
		ZapretOrel[params[0]] = 1;
		OrelName[playerid] = params[0];
		OrelName[params[0]] = playerid;
		OrelMoney[params[0]] = params[1];
		OrelMoney[playerid] = params[1];
		StatusMoneta[playerid] = "Решка";
		StatusMoneta[params[0]] = "Орёл";
	
		SCMF(playerid, COLOR_VALIK, "[Оповещание]{FFFFFF} Вы предложили игроку {FFFF00}%s{FFFFFF} сыграть в игру 'Орёл и Решка', ставка: {FFFF00}%d BTC{FFFFFF}.", PN(params[0]), params[1]);
		SCM(playerid, COLOR_VALIK, !"[Подсказка]{AFAFAF}(/or_cancel - отозвать приглошение)");
		
		f(global_str, 300, "{FFFF00}%s{FFFFFF} предлагает сыграть в игру ''Орёл и Решка''.\nСтавка: {FFFF00}%d BTC{FFFFFF}\nИгрок выбрал сторону: {FFFF00}Решка{FFFFFF}", PN(playerid), params[1]);
	 	SPD(OrelName[playerid], 3724, DIALOG_STYLE_MSGBOX, "Орёл и Решка" ,global_str, !"Играть", !"Отказать");
	}
	else 
		SCM(playerid,COLOR_GREY, !"Вы должны находится в баре!");
		
	return true;
}

cmd:or_cancel(playerid)
{
	if(OrelName[playerid] == INVALID_PLAYER_ID) return 1;
	OrelMoney[playerid] = 0;
	ZapretOrel[playerid] = 0;
	ZapretOrel[OrelName[playerid]] = 0;
	StatusMoneta[playerid] = "0";
	StatusMoneta[OrelName[playerid]] = "0";
	
	SCM(OrelName[playerid], COLOR_VALIK, !"[Информация] {FFFFFF}Игрок отказался от ставки!");
	
	SCMF(playerid, COLOR_VALIK, "[Оповещение]{FFFFFF} Приглашение на игру в \"Орёл и Решка\" с {FFFF00}%s{FFFFFF} отклонено.", OrelName[playerid]);
	
	OrelName[OrelName[playerid]]= INVALID_PLAYER_ID;
	OrelName[playerid] = INVALID_PLAYER_ID;
	return 1;
}

stock GetShopCost(id, type, business, bool:ItIsDialog = false, playerid = INVALID_PLAYER_ID)
{
	if(type == 100)
		format(mysql_string, 50, "%d BTC", CentralMarketItems[business][pTemp[playerid][pCentralMarketSelectId]][2][id]);

	else if(!ShopData[type][shopType] or ShopData[type][shopType] == 2)
		format(mysql_string, 50, "$%d", !ShopData[type][shopType] ? BizData[business][bItem][id] : ShopData[type][shopCost][id]);

	else if(ShopData[type][shopType] == 1)
		format(mysql_string, 50, (ItIsDialog ? "%d семейных талонов" : "%d"), ShopData[type][shopCost][id]);

	else if(ShopData[type][shopType] == 3)
		format(mysql_string, 50, (ItIsDialog ? "%d бандитских респектов" : "%d EXP"), ShopData[type][shopCost][id]);

	return mysql_string;
}

stock CreateSlotShop(playerid, value, page, Float:X = 184.500000, Float:Y = 164.742859, Float:rX = 0.0, Float:rY = 0.0)
{
	X += 10.796553 * - rX;
	
	new td, count, num, id = pTemp[playerid][pCentralMarketId][1], Float:Position[2];
	
	count = (value == 100 ? 300 : GetShopItemCount(value));

	for(new i; i < 6; i++)
	{
		for(new s; s < 5; s++)
		{
			td = s + i * 5, num = td + (30*page);

            new item = (value == 100 ? CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][1][num] : ShopData[value][shopItem][num]);

			DestroyPlayerTD(playerid, OtherKletka[playerid][td]), DestroyPlayerTD(playerid, OtherKletkaText[playerid][td]), DestroyPlayerTD(playerid, OtherKletkaText[playerid][30 + td]), DestroyPlayerTD(playerid, OtherKletkaLevel[playerid][td]);
			OtherKletka[playerid][td] = CreatePlayerTextDraw(playerid, X + 26.5 * s + ( 5.79657 * rX + rX * s), Y + 30.5 * i + ( 0.799988 * rY + rY * i), "LD_SPAC:white");
			
			PlayerTextDrawLetterSize(playerid, OtherKletka[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, OtherKletka[playerid][td], 25.500000 + rX, 29.500000 + rY);
			PlayerTextDrawAlignment(playerid, OtherKletka[playerid][td], 1);
            PlayerTextDrawColor(playerid, OtherKletka[playerid][td], value != 100 && num >= count ? 0x999999FF : 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, OtherKletka[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, OtherKletka[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, OtherKletka[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, OtherKletka[playerid][td], 0);
            PlayerTextDrawBackgroundColor(playerid, OtherKletka[playerid][td], ItemsInfo[item][itemColor]);
            PlayerTextDrawFont(playerid, OtherKletka[playerid][td], ItemsInfo[item][itemCustom] == 2 ? 100 : 5);
			PlayerTextDrawSetProportional(playerid, OtherKletka[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, OtherKletka[playerid][td], value != 100 && num >= count ? 0 : 1);
            PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][td], IsASkinInv(item) && ItemsInfo[item][itemModel] > 311 ? GetSkinInfo(ItemsInfo[item][itemModel]) : ItemsInfo[item][itemModel]);
            PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][td], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][1], ItemsInfo[item][itemRotation][2], ItemsInfo[item][itemRotation][3]);
			ShowPlayerTD(playerid, OtherKletka[playerid][td]);
			
			if(num >= count or (value == 100 && !CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][1][num]))
                continue;
			
			GetPosTD(playerid, OtherKletka[playerid][td], Position[0], Position[1]);
			OtherKletkaText[playerid][td] = CreatePlayerTextDraw(playerid, Position[0] + 24.5 + (0.960785 * rX), Position[1] + 23.5 + (0.754242 * rY), GetShopCost(num, value, value == 100 ? id : BizEntered[playerid], false, playerid));
			
			PlayerTextDrawLetterSize(playerid, OtherKletkaText[playerid][td], 0.101199 + (0.003969 * rX), 0.500000 + (0.016949 * rY));
			PlayerTextDrawTextSize(playerid, OtherKletkaText[playerid][td], 1280.000000, 1280.000000);
			PlayerTextDrawAlignment(playerid, OtherKletkaText[playerid][td], 3);
			PlayerTextDrawColor(playerid, OtherKletkaText[playerid][td], value == 5 ? 0xEBB95EAA:0x76EB5EAA);
			PlayerTextDrawUseBox(playerid, OtherKletkaText[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, OtherKletkaText[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, OtherKletkaText[playerid][td], 0);
			PlayerTextDrawSetOutline(playerid, OtherKletkaText[playerid][td], 1);
			PlayerTextDrawBackgroundColor(playerid, OtherKletkaText[playerid][td], 0x00000000);
			PlayerTextDrawFont(playerid, OtherKletkaText[playerid][td], 2);
			PlayerTextDrawSetProportional(playerid, OtherKletkaText[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, OtherKletkaText[playerid][td], 0);

			ShowPlayerTD(playerid, OtherKletkaText[playerid][td]);
		}
	}
	return 1;
}
#include ../library/data
stock CreateBoxShop(playerid, Float:Pos[])
{
	ShopTD[playerid][9] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1], "usebox");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][9], 0.000000, 27.343161 + 0.864624 * pTemp[playerid][inventorySize][1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][9], 180.000000 - 5 * pTemp[playerid][inventorySize][0], 0.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][9], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][9], 0x111111FF);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][9], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][9], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][9], 0);
	
	ShopTD[playerid][8] = CreatePlayerTextDraw(playerid, Pos[0] - 132.799988 - 5 * pTemp[playerid][inventorySize][0], Pos[1] + 5.017044 + 0.220917 * pTemp[playerid][inventorySize][1], SettingData[playerid][sdLanguage] ? (FixText("МАГАЗИН")) : ("SHOP"));
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][8], 0.188333 + 0.007386 * pTemp[playerid][inventorySize][0], 1.056592 + 0.035817 * pTemp[playerid][inventorySize][1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][8], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][8], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][8], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][8], 0x00000000);
	PlayerTextDrawFont(playerid, ShopTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][8], 0);

	ShopTD[playerid][7] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + 23.600006 + 0.799988 * pTemp[playerid][inventorySize][1], "usebox");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][7], 0.000000, -0.214150);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][7], 180.000000 - 5 * pTemp[playerid][inventorySize][0], 0.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][7], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][7], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][7], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][7], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][7], 0);

	ShopTD[playerid][6] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + 213.600006 + 6.799988 * pTemp[playerid][inventorySize][1], "usebox");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][6], 0.000000, 3.665600 + 0.110847 * pTemp[playerid][inventorySize][1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][6], 180.000000 - 5.0 * pTemp[playerid][inventorySize][0], 0.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][6], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][6], 0x1A1A1AFF);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][6], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][6], 0);

	ShopTD[playerid][5] = CreatePlayerTextDraw(playerid, Pos[0] - 34.044129 - 1.718475 * pTemp[playerid][inventorySize][0], Pos[1] + 219.600006 + 6.966675 * pTemp[playerid][inventorySize][1], "usebox");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][5], 0.000000, 2.335400 + 0.073898 * pTemp[playerid][inventorySize][0]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][5], 214.044113 - 3.281509 * pTemp[playerid][inventorySize][0], 0.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][5], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][5], 0x050505FF);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][5], 0);

	ShopTD[playerid][4] = CreatePlayerTextDraw(playerid, Pos[0] - 103.755875 - 3.281509 * pTemp[playerid][inventorySize][0], Pos[1] + 219.100006 + 6.966675 * pTemp[playerid][inventorySize][1], "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][4], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][4], 19.831934 + 0.446575 * pTemp[playerid][inventorySize][0], 22.000000 + 0.666647 * pTemp[playerid][inventorySize][1]);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][4], 0x1A1A1AFF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][4], 1);

	ShopTD[playerid][3] = CreatePlayerTextDraw(playerid, Pos[0] - 94.467682 - 3.08284 * pTemp[playerid][inventorySize][0], Pos[1] + 226.578033 + 7.180603 * pTemp[playerid][inventorySize][1], "<");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][3], 0.125555 + 0.004924 * pTemp[playerid][inventorySize][0], 0.704395 + 0.023877 * pTemp[playerid][inventorySize][1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][3], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, ShopTD[playerid][3], 0x777777FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][3], 0x00000000);
	PlayerTextDrawFont(playerid, ShopTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][3], 0);

	ShopTD[playerid][2] = CreatePlayerTextDraw(playerid, Pos[0] - 56.176026 - 2.1651 * pTemp[playerid][inventorySize][0], Pos[1] + 219.100006 + 6.966675 * pTemp[playerid][inventorySize][1], "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][2], 19.831934 + 0.446575 * pTemp[playerid][inventorySize][0], 22.000000 + 0.666647 * pTemp[playerid][inventorySize][1]);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, ShopTD[playerid][2], 0x1A1A1AFF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, ShopTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][2], 1);

	ShopTD[playerid][1] = CreatePlayerTextDraw(playerid, Pos[0] - 46.887848 - 1.966431 * pTemp[playerid][inventorySize][0], Pos[1] + 226.578033 + 7.180603 * pTemp[playerid][inventorySize][1], ">");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][1], 0.125555 + 0.004924 * pTemp[playerid][inventorySize][0], 0.704395 + 0.023877 * pTemp[playerid][inventorySize][1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, ShopTD[playerid][1], 0x777777FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][1], 0x00000000);
	PlayerTextDrawFont(playerid, ShopTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][1], 0);

	ShopTD[playerid][0] = CreatePlayerTextDraw(playerid, Pos[0] - 70.049988 - 2.5 * pTemp[playerid][inventorySize][0], Pos[1] + 226.578033 + 7.180603 * pTemp[playerid][inventorySize][1], "1");
	PlayerTextDrawLetterSize(playerid, ShopTD[playerid][0], 0.125555 + 0.004924 * pTemp[playerid][inventorySize][0], 0.704395 + 0.023877 * pTemp[playerid][inventorySize][1]);
	PlayerTextDrawTextSize(playerid, ShopTD[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, ShopTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, ShopTD[playerid][0], 0x777777FF);
	PlayerTextDrawUseBox(playerid, ShopTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, ShopTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, ShopTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, ShopTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, ShopTD[playerid][0], 0x00000000);
	PlayerTextDrawFont(playerid, ShopTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, ShopTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, ShopTD[playerid][0], 0);

	return true;
}

stock CreateShopTD(playerid, value)
{
	if(shopopen{playerid} or (BizEntered[playerid] == -1 && value < 5))
		return false;

	for(new i; i < 30; i ++)
		DestroyPlayerTD(playerid, OtherKletka[playerid][i]), DestroyPlayerTD(playerid, OtherKletkaText[playerid][i]), DestroyPlayerTD(playerid, OtherKletkaText[playerid][30 + i]), DestroyPlayerTD(playerid, OtherKletkaLevel[playerid][i]);

	shopopen{playerid} = true;

	CreateBoxShop(playerid, Float:{320.299988, 138.642853, 0.0});
	CreateSlotShop(playerid, value, 0);

	ShowInventoryPage(playerid, 485.299988 - 5.799865 * pTemp[playerid][inventorySize][0], 138.642853, E_INVENTORY_TYPE_SHOP);

	for(new i; i < 10; i++) ShowPlayerTD(playerid, ShopTD[playerid][i]);
	SetPVarInt(playerid, "ShopAntiDeBug", BizEntered[playerid]);
	SetPVarInt(playerid, "ShopMas",value);
	DeletePVar(playerid, "ShopPage");

	return SelectTextDraw(playerid, PI[playerid][pSelectTD]);
}

stock DestroyShopTD(playerid, bool:hide = true)
{
	for(new i; i < 30; i++)
	{
		DestroyPlayerTD(playerid, OtherKletka[playerid][i]);
		DestroyPlayerTD(playerid, OtherKletkaText[playerid][i]);
		DestroyPlayerTD(playerid, OtherKletkaText[playerid][30 + i]);
		DestroyPlayerTD(playerid, OtherKletkaLevel[playerid][i]);
		if(i < 10) DestroyPlayerTD(playerid, ShopTD[playerid][i]);
	}
	shopopen{playerid} = false;
	DeletePVar(playerid, "LavkaINF");
	DeletePVar(playerid, "ShopAntiDeBug");
	DeletePVar(playerid, "ShopMas");
	DeletePVar(playerid, "ShopPage");
	CancelSelectTextDraw(playerid);

	return HideInventoryPage(playerid, hide);
}

stock showitemscontainer(playerid)
{
	for(new i; i < 33; i++) DestroyPlayerTD(playerid, contd[playerid][i]);
    contd[playerid][32] = CreatePlayerTextDraw(playerid, 496.500092, 127.622200, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, contd[playerid][32], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][32], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][32], 1);
	PlayerTextDrawColor(playerid, contd[playerid][32], 0xA52A2AFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][32], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][32], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][32], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][32], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][32], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][32], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][32], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][32], 0);

	contd[playerid][31] = CreatePlayerTextDraw(playerid, 608.333374, 127.666603, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, contd[playerid][31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][31], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][31], 1);
	PlayerTextDrawColor(playerid, contd[playerid][31], 0xA52A2AFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][31], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][31], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][31], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][31], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][31], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][31], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][31], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][31], 0);

	contd[playerid][30] = CreatePlayerTextDraw(playerid, 504.799988, 130.711105, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, contd[playerid][30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][30], 111.000000, 12.779899);
	PlayerTextDrawAlignment(playerid, contd[playerid][30], 1);
	PlayerTextDrawColor(playerid, contd[playerid][30], 0xA52A2AFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][30], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][30], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][30], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][30], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][30], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][30], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][30], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][30], 0);

	contd[playerid][29] = CreatePlayerTextDraw(playerid, 498.799988, 137.348099, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, contd[playerid][29], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][29], 123.000000, 203.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][29], 1);
	PlayerTextDrawColor(playerid, contd[playerid][29], 0x141414FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][29], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][29], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][29], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][29], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][29], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][29], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][29], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][29], 0);

	contd[playerid][28] = CreatePlayerTextDraw(playerid, 525.066711, 347.455414, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, contd[playerid][28], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][28], 73.000000, 1.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][28], 1);
	PlayerTextDrawColor(playerid, contd[playerid][28], 0xA52A2AFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][28], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][28], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][28], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][28], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][28], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][28], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][28], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][28], 0);

	contd[playerid][27] = CreatePlayerTextDraw(playerid, 496.200195, 332.092102, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, contd[playerid][27], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][27], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][27], 1);
	PlayerTextDrawColor(playerid, contd[playerid][27], 0x141414FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][27], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][27], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][27], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][27], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][27], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][27], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][27], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][27], 0);

	contd[playerid][26] = CreatePlayerTextDraw(playerid, 608.566772, 332.136505, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, contd[playerid][26], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][26], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][26], 1);
	PlayerTextDrawColor(playerid, contd[playerid][26], 0x141414FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][26], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][26], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][26], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][26], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][26], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][26], 0);

	contd[playerid][25] = CreatePlayerTextDraw(playerid, 503.999908, 336.714905, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, contd[playerid][25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][25], 111.880402, 11.119999);
	PlayerTextDrawAlignment(playerid, contd[playerid][25], 1);
	PlayerTextDrawColor(playerid, contd[playerid][25], 0x141414FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][25], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][25], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][25], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][25], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][25], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][25], 0);

	contd[playerid][24] = CreatePlayerTextDraw(playerid, 561.299927, 333.585114, "1/1");
	PlayerTextDrawLetterSize(playerid, contd[playerid][24], 0.226300, 1.056499);
	PlayerTextDrawTextSize(playerid, contd[playerid][24], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][24], 2);
	PlayerTextDrawColor(playerid, contd[playerid][24], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][24], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][24], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][24], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][24], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][24], 0);

	contd[playerid][23] = CreatePlayerTextDraw(playerid, 573.166504, 333.385101, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][23], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][23], 10.000000, 11.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][23], 1);
	PlayerTextDrawColor(playerid, contd[playerid][23], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][23], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][23], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][23], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][23], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][23], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][23], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][23], 19177);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][23], 90.000000, 284.000000, 0.000000, 0.192900);

	contd[playerid][22] = CreatePlayerTextDraw(playerid, 538.533020, 333.170410, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][22], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][22], 10.000000, 11.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][22], 1);
	PlayerTextDrawColor(playerid, contd[playerid][22], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][22], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][22], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][22], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][22], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][22], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][22], 19177);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][22], 90.000000, 74.000000, 0.000000, 0.192900);

	contd[playerid][21] = CreatePlayerTextDraw(playerid, 504.666595, 142.255493, "particle:lamp_shad_64");
	PlayerTextDrawLetterSize(playerid, contd[playerid][21], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][21], 116.000000, -5.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][21], 1);
	PlayerTextDrawColor(playerid, contd[playerid][21], 0x0000007C);
	PlayerTextDrawUseBox(playerid, contd[playerid][21], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][21], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][21], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][21], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][21], 4);
	PlayerTextDrawSetProportional(playerid, contd[playerid][21], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][21], 0);

	contd[playerid][20] = CreatePlayerTextDraw(playerid, 616.267700, 137.129807, "x");
	PlayerTextDrawLetterSize(playerid, contd[playerid][20], 0.191599, 0.836700);
	PlayerTextDrawTextSize(playerid, contd[playerid][20], 10.100000, 10.100000);
	PlayerTextDrawAlignment(playerid, contd[playerid][20], 2);
	PlayerTextDrawColor(playerid, contd[playerid][20], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][20], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][20], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][20], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, contd[playerid][20], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][20], 1);

	contd[playerid][19] = CreatePlayerTextDraw(playerid, 506.199890, 128.266693, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][19], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][19], 1);
	PlayerTextDrawColor(playerid, contd[playerid][19], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][19], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][19], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][19], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][19], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][19], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][19], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][19], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][19], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][18] = CreatePlayerTextDraw(playerid, 513.966492, 147.274094, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][18], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][18], 1);
	PlayerTextDrawColor(playerid, contd[playerid][18], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][18], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][18], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][18], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][18], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][18], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][18], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], 1277);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], 0.000000, 0.000000, 0.000000, 0.783628);

	contd[playerid][17] = CreatePlayerTextDraw(playerid, 549.833191, 150.603607, "+1 EXP");
	PlayerTextDrawLetterSize(playerid, contd[playerid][17], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][17], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][17], 1);
	PlayerTextDrawColor(playerid, contd[playerid][17], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][17], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][17], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][17], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][17], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][17], 0);

	contd[playerid][16] = CreatePlayerTextDraw(playerid, 549.833191, 160.803604, "VALUE:10 - 200");
	PlayerTextDrawLetterSize(playerid, contd[playerid][16], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][16], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][16], 1);
	PlayerTextDrawColor(playerid, contd[playerid][16], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][16], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][16], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][16], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][16], 0);

	contd[playerid][15] = CreatePlayerTextDraw(playerid, 506.199890, 165.817841, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][15], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][15], 1);
	PlayerTextDrawColor(playerid, contd[playerid][15], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][15], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][15], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][15], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][15], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][15], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][15], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][15], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][14] = CreatePlayerTextDraw(playerid, 513.966492, 184.825958, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][14], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][14], 1);
	PlayerTextDrawColor(playerid, contd[playerid][14], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][14], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][14], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][14], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][14], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][14], 1);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], 1550);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], 0.000000, 0.000000, 0.000000, 0.897810);

	contd[playerid][13] = CreatePlayerTextDraw(playerid, 549.833191, 188.155609, "Money");
	PlayerTextDrawLetterSize(playerid, contd[playerid][13], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][13], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][13], 1);
	PlayerTextDrawColor(playerid, contd[playerid][13], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][13], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][13], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][13], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][13], 0);

	contd[playerid][12] = CreatePlayerTextDraw(playerid, 549.833191, 198.355896, "VALUE:_1000000 - 200000000");
	PlayerTextDrawLetterSize(playerid, contd[playerid][12], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][12], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][12], 1);
	PlayerTextDrawColor(playerid, contd[playerid][12], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][12], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][12], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][12], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][12], 0);

	contd[playerid][11] = CreatePlayerTextDraw(playerid, 506.199890, 203.369003, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][11], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][11], 1);
	PlayerTextDrawColor(playerid, contd[playerid][11], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][11], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][11], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][11], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][11], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][11], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][11], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][11], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][10] = CreatePlayerTextDraw(playerid, 513.966492, 222.377808, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][10], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][10], 1);
	PlayerTextDrawColor(playerid, contd[playerid][10], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][10], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][10], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][10], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][10], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][10], 1);
	//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][10], ItemsInfo[538][ItemModel]);
//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][10], ItemsInfo[538][POSTDx], ItemsInfo[538][POSTDy], ItemsInfo[538][POSTDz], ItemsInfo[538][POSTDc]);

	contd[playerid][9] = CreatePlayerTextDraw(playerid, 549.833191, 225.707596, "Talon: +1 AZ Coin");
	PlayerTextDrawLetterSize(playerid, contd[playerid][9], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][9], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][9], 1);
	PlayerTextDrawColor(playerid, contd[playerid][9], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][9], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][9], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][9], 0);

	contd[playerid][8] = CreatePlayerTextDraw(playerid, 549.833191, 235.908203, "VALUE:_1000 - 25000");
	PlayerTextDrawLetterSize(playerid, contd[playerid][8], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][8], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][8], 1);
	PlayerTextDrawColor(playerid, contd[playerid][8], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][8], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][8], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][8], 0);

	contd[playerid][7] = CreatePlayerTextDraw(playerid, 506.199890, 240.920166, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][7], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][7], 1);
	PlayerTextDrawColor(playerid, contd[playerid][7], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][7], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][7], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][7], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][7], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][7], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][7], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][7], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][6] = CreatePlayerTextDraw(playerid, 513.966492, 259.929657, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][6], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][6], 1);
	PlayerTextDrawColor(playerid, contd[playerid][6], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][6], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][6], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][6], 1);
	//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][6], ItemsInfo[542][ItemModel]);
	//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][6], ItemsInfo[542][POSTDx], ItemsInfo[542][POSTDy], ItemsInfo[542][POSTDz], ItemsInfo[542][POSTDc]);

	contd[playerid][5] = CreatePlayerTextDraw(playerid, 549.833191, 263.259583, "Accessory: Wings");
	PlayerTextDrawLetterSize(playerid, contd[playerid][5], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][5], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][5], 1);
	PlayerTextDrawColor(playerid, contd[playerid][5], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][5], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][5], 0);

	contd[playerid][4] = CreatePlayerTextDraw(playerid, 549.833191, 273.460510, "VALUE:_1");
	PlayerTextDrawLetterSize(playerid, contd[playerid][4], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][4], 1);
	PlayerTextDrawColor(playerid, contd[playerid][4], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][4], 0);

	contd[playerid][3] = CreatePlayerTextDraw(playerid, 506.199890, 278.471313, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][3], 108.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][3], 1);
	PlayerTextDrawColor(playerid, contd[playerid][3], 0x00000070);
	PlayerTextDrawUseBox(playerid, contd[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][3], 0x00000000);
	PlayerTextDrawFont(playerid, contd[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][3], 1581);
	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][3], 0.000000, 0.000000, 0.000000, 0.761200);

	contd[playerid][2] = CreatePlayerTextDraw(playerid, 513.966492, 297.481506, "");
	PlayerTextDrawLetterSize(playerid, contd[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, contd[playerid][2], 30.000000, 30.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][2], 1);
	PlayerTextDrawColor(playerid, contd[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][2], 0xFFFFFF05);
	PlayerTextDrawFont(playerid, contd[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, contd[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][2], 1);
	//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][2], ItemsInfo[541][ItemModel]);
	//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][2], ItemsInfo[541][POSTDx], ItemsInfo[541][POSTDy], ItemsInfo[541][POSTDz], ItemsInfo[541][POSTDc]);

	contd[playerid][1] = CreatePlayerTextDraw(playerid, 549.833191, 300.811584, "Accessory: Parrot");
	PlayerTextDrawLetterSize(playerid, contd[playerid][1], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][1], 1);
	PlayerTextDrawColor(playerid, contd[playerid][1], 0xFF0000FF);
	PlayerTextDrawUseBox(playerid, contd[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][1], 0);

	contd[playerid][0] = CreatePlayerTextDraw(playerid, 549.833191, 311.012817, "VALUE:_1");
	PlayerTextDrawLetterSize(playerid, contd[playerid][0], 0.109999, 0.527999);
	PlayerTextDrawTextSize(playerid, contd[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, contd[playerid][0], 1);
	PlayerTextDrawColor(playerid, contd[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, contd[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, contd[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, contd[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, contd[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, contd[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, contd[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, contd[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, contd[playerid][0], 0);
	for(new i; i < 33; i++) ShowPlayerTD(playerid, contd[playerid][i]);
	SwitchContainer(playerid, Int_GetPlayerData(playerid,"typecontainer"), 0);
	pagecontainer[playerid] = 0;
	SelectTextDraw(playerid, 0xFF0000FF);
	containeropen{playerid} = true;
	return 1;
}

stock SwitchContainer(playerid, type, page)
{
	if(type == 0)
	{
	    if(page == 0)
	    {
	        PlayerTextDrawSetString(playerid, contd[playerid][24], "1/2");
	    	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], 1277);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], 0.000000, 0.000000, 0.000000, 0.783628);
			PlayerTextDrawSetString(playerid, contd[playerid][17], "+1 EXP");
			PlayerTextDrawSetString(playerid, contd[playerid][16], "VALUE:_10 - 200");
			PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], 1550);
			PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], 0.000000, 0.000000, 0.000000, 0.897810);
			PlayerTextDrawSetString(playerid, contd[playerid][13], "Money");
			PlayerTextDrawSetString(playerid, contd[playerid][12], "VALUE:1000000 - 200000000");
			//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][10], ItemsInfo[538][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][10], ItemsInfo[538][POSTDx], ItemsInfo[538][POSTDy], ItemsInfo[538][POSTDz], ItemsInfo[538][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][8], "VALUE:_1000 - 25000");
			//PlayerTextDrawSetString(playerid, contd[playerid][9], ItemsInfo[538][ItemNameLavka]);
			//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][6], ItemsInfo[542][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][6], ItemsInfo[542][POSTDx], ItemsInfo[547][POSTDy], ItemsInfo[547][POSTDz], ItemsInfo[547][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][4], "VALUE:_1 - 2");
			//PlayerTextDrawSetString(playerid, contd[playerid][5], ItemsInfo[542][ItemNameLavka]);
			//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][2], ItemsInfo[541][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][2], ItemsInfo[541][POSTDx], ItemsInfo[418][POSTDy], ItemsInfo[418][POSTDz], ItemsInfo[418][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][0], "VALUE:_1 - 2");
			//PlayerTextDrawSetString(playerid, contd[playerid][1], ItemsInfo[541][ItemNameLavka]);
			pagecontainer[playerid] = 0;
			ShowPlayerTD(playerid, contd[playerid][24]);
			for(new i; i < 19; i++) ShowPlayerTD(playerid, contd[playerid][i]);
		}
		if(page == 1)
	    {
	        PlayerTextDrawSetString(playerid, contd[playerid][24], "2/2");
	    	//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], ItemsInfo[382][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], ItemsInfo[382][POSTDx], ItemsInfo[382][POSTDy], ItemsInfo[382][POSTDz], ItemsInfo[382][POSTDc]);
			//PlayerTextDrawSetString(playerid, contd[playerid][17], ItemsInfo[382][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][16], "VALUE:_1 - 2");
			//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], ItemsInfo[398][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], ItemsInfo[398][POSTDx], ItemsInfo[398][POSTDy], ItemsInfo[398][POSTDz], ItemsInfo[398][POSTDc]);
			//PlayerTextDrawSetString(playerid, contd[playerid][13], ItemsInfo[398][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][12], "VALUE:1 - 2");
			//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][10], ItemsInfo[381][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][10], ItemsInfo[381][POSTDx], ItemsInfo[381][POSTDy], ItemsInfo[381][POSTDz], ItemsInfo[381][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][8], "VALUE:_1 - 2");
			//PlayerTextDrawSetString(playerid, contd[playerid][9], ItemsInfo[381][ItemNameLavka]);
			//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][6], ItemsInfo[391][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][6], ItemsInfo[391][POSTDx], ItemsInfo[391][POSTDy], ItemsInfo[391][POSTDz], ItemsInfo[391][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][4], "VALUE:_1 - 2");
			//P//layerTextDrawSetString(playerid, contd[playerid][5], ItemsInfo[391][ItemNameLavka]);
			//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][2], ItemsInfo[424][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][2], ItemsInfo[424][POSTDx], ItemsInfo[424][POSTDy], ItemsInfo[424][POSTDz], ItemsInfo[424][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][0], "VALUE:_1 - 2");
			//PlayerTextDrawSetString(playerid, contd[playerid][1], ItemsInfo[424][ItemNameLavka]);
			ShowPlayerTD(playerid, contd[playerid][24]);
			for(new i; i < 19; i++) ShowPlayerTD(playerid, contd[playerid][i]);
			pagecontainer[playerid] = 1;
		}
	}
	if(type == 1)
	{
	    if(page == 0)
	    {
	      	PlayerTextDrawSetString(playerid, contd[playerid][24], "1/2");
	   // 	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], ItemsInfo[548][ItemModel]);
	//		PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], ItemsInfo[548][POSTDx], ItemsInfo[548][POSTDy], ItemsInfo[548][POSTDz], ItemsInfo[548][POSTDc]);
		//	PlayerTextDrawSetString(playerid, contd[playerid][17], ItemsInfo[548][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][16], "VALUE:_1 - 5");
		//	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], ItemsInfo[570][ItemModel]);
		//	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], ItemsInfo[570][POSTDx], ItemsInfo[570][POSTDy], ItemsInfo[570][POSTDz], ItemsInfo[570][POSTDc]);
		//	PlayerTextDrawSetString(playerid, contd[playerid][13], ItemsInfo[570][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][12], "VALUE:_1 - 5");
		//	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][10], ItemsInfo[537][ItemModel]);
		//	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][10], ItemsInfo[537][POSTDx], ItemsInfo[537][POSTDy], ItemsInfo[537][POSTDz], ItemsInfo[537][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][8], "VALUE:_1 - 5");
		//	PlayerTextDrawSetString(playerid, contd[playerid][9], ItemsInfo[537][ItemNameLavka]);
		//	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][6], ItemsInfo[547][ItemModel]);
		//	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][6], ItemsInfo[547][POSTDx], ItemsInfo[547][POSTDy], ItemsInfo[547][POSTDz], ItemsInfo[547][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][4], "VALUE:_1 - 5");
			//PlayerTextDrawSetString(playerid, contd[playerid][5], ItemsInfo[547][ItemNameLavka]);
			//P//layerTextDrawSetPreviewModel(playerid, contd[playerid][2], ItemsInfo[418][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][2], ItemsInfo[418][POSTDx], ItemsInfo[418][POSTDy], ItemsInfo[418][POSTDz], ItemsInfo[418][POSTDc]);
			PlayerTextDrawSetString(playerid, contd[playerid][0], "VALUE:_1 - 5");
			//PlayerTextDrawSetString(playerid, contd[playerid][1], ItemsInfo[418][ItemNameLavka]);
			pagecontainer[playerid] = 0;
			ShowPlayerTD(playerid, contd[playerid][24]);
			for(new i; i < 19; i++) ShowPlayerTD(playerid, contd[playerid][i]);
		}
		if(page == 1)
	    {
	        PlayerTextDrawSetString(playerid, contd[playerid][24], "2/2");
	    	//PlayerTextDrawSetPreviewModel(playerid, contd[playerid][18], ItemsInfo[538][ItemModel]);
			//PlayerTextDrawSetPreviewRot(playerid, contd[playerid][18], ItemsInfo[538][POSTDx], ItemsInfo[538][POSTDy], ItemsInfo[538][POSTDz], ItemsInfo[538][POSTDc]);
		//	PlayerTextDrawSetString(playerid, contd[playerid][17], ItemsInfo[538][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][16], "VALUE:_25000 - 50000");
		//	PlayerTextDrawSetPreviewModel(playerid, contd[playerid][14], ItemsInfo[369][ItemModel]);
	//	PlayerTextDrawSetPreviewRot(playerid, contd[playerid][14], ItemsInfo[369][POSTDx], ItemsInfo[369][POSTDy], ItemsInfo[369][POSTDz], ItemsInfo[369][POSTDc]);
		//	PlayerTextDrawSetString(playerid, contd[playerid][13], ItemsInfo[369][ItemNameLavka]);
			PlayerTextDrawSetString(playerid, contd[playerid][12], "VALUE:_1 - 5");
			PlayerTextDrawSetString(playerid, contd[playerid][8], "");
			PlayerTextDrawSetString(playerid, contd[playerid][9], "");
			PlayerTextDrawSetString(playerid, contd[playerid][4], "");
			PlayerTextDrawSetString(playerid, contd[playerid][5], "");
			PlayerTextDrawSetString(playerid, contd[playerid][0], "");
			PlayerTextDrawSetString(playerid, contd[playerid][1], "");
			ShowPlayerTD(playerid, contd[playerid][24]);
			for(new i; i < 19; i++) ShowPlayerTD(playerid, contd[playerid][i]);
			PlayerTextDrawHide(playerid, contd[playerid][2]);
			PlayerTextDrawHide(playerid, contd[playerid][6]);
			PlayerTextDrawHide(playerid, contd[playerid][10]);
			PlayerTextDrawHide(playerid, contd[playerid][11]);
			PlayerTextDrawHide(playerid, contd[playerid][7]);
			PlayerTextDrawHide(playerid, contd[playerid][3]);
			pagecontainer[playerid] = 1;
		}
	}
	return true;
}

cmd:settag(playerid, params[])
{
	if(!PI[playerid][pMember][0]) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Вы не состоите в организации.");
	if(PI[playerid][pRank] < 9 && !PI[playerid][pMember][1]) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Доступно только лидеру/заместителю организации");
	if(sscanf(params,"us[32]",params[0],params[1])) return SCM(playerid, COLOR_VALIK,"Используйте:{FFFFFF} /settag [ид игрока/часть ника] [новый тэг(до 15 символов)]");
	if(!pTemp[params[0]][tAuthorized]) return 1;
	if(PI[playerid][pAdmin]) return 0;
	if(IsADomen(params[1]) || IsAIP(params[1])) return 0;
	if(PI[playerid][pMember][0] != PI[params[0]][pMember][0]) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Вы находитесь в разных организациях.");
	if(strlen(params[1]) < 3) return SCM(playerid, COLOR_RED,"[Ошибка]{FFFFFF} Длина тэга должна быть больше 3х символов.");
	f(global_str, sizeof(global_str), "[Информация]{FFFFFF} %s установил вам новый тэг: %s",PN(playerid),params[1]);
	SCM(params[0], COLOR_VALIK, global_str);
	f(global_str, sizeof(global_str), "[Информация]{FFFFFF} Вы установили игроку %s новый тэг: %s",PN(params[0]),params[1]);
	SCM(playerid, COLOR_VALIK, global_str);
	SetString(PI[params[0]][pTag],params[1]);
	UpdatePlayerDataStr(params[0], "Tag", PI[params[0]][pTag]);
	return 1;
}

cmd:setadmtag(playerid, params[])
{
    if(!IsOsnovatel(playerid, 1))
		return false;
		
	new tagname[64];

	if(sscanf(params, "us[32]s[64]", params[0], params[1], tagname))
		return SCM(playerid, COLOR_YELLOW, !"Используй: /setadmtag [id] [color] [tag]"), SCM(playerid, COLOR_YELLOW, !"Чтобы выдать стандартный тэг впишите 1 в [tag] и [color]."), SCM(playerid, COLOR_YELLOW, !"Или используйте команду /deladmtag [ id ]");

	if(!IsPlayerConnected(params[0]))
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Игрок не в сети!");

	if(PI[params[0]][pAdmin] < 0)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Этот игрок не администратор!");

    if(strlen(tagname) < 1)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Длина тэга должна быть больше 1-го символов.");

    SetString(AdminInfo[params[0]][admTag], GetString(tagname, "1") ? "None" : (str_f("%s", tagname)));
   	SetString(AdminInfo[params[0]][admTagColor], GetString(params[1], "1") ? "FFFFFF" : (str_f("%s", params[1])));
    
   	SCMF(playerid, COLOR_LIGHTBLUE, "[A] Вы выдали тег администратору %s[%d]: {%s}%s", PN(params[0]), params[0], AdminInfo[params[0]][admTagColor], AdminInfo[params[0]][admTag]);
	SAMF(COLOR_LIGHTBLUE, "[A] A: %s[%d] установил тег администратору %s[%d]: {%s}%s", PN(playerid), playerid, PN(params[0]), params[0], AdminInfo[params[0]][admTagColor], AdminInfo[params[0]][admTag]);

	return UpdatePlayerDataStr(params[0], "AdminTag", AdminInfo[params[0]][admTag]), UpdatePlayerDataStr(params[0], "AdminTagColor", AdminInfo[params[0]][admTagColor]);
}

cmd:deladmtag(playerid, params[])
{
   	if(!IsOsnovatel(playerid, 1))
		return false;
		
	if(sscanf(params, "u", params[0]))
		return SCM(playerid, COLOR_OLDRED, "Используй: /deladmtag [id]");
		
	if(!IsPlayerConnected(params[0]))
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Игрок не в сети!");

	if(PI[params[0]][pAdmin] < 0)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Этот игрок не администратор!");

	SetString(AdminInfo[params[0]][admTag], "None");
	SetString(AdminInfo[params[0]][admTagColor], "FFFFFF");
	
	SCMF(playerid, COLOR_OLDRED, "[AdminTag] Вы удалили тег администратору: %s[%d]", PN(params[0]), params[0]);
	SAMF(COLOR_OLDRED, "[AdminTag] A: %s[%d] удалил тег администратору %s[%d]", PN(playerid), playerid, PN(params[0]), params[0]);

	return UpdatePlayerDataStr(params[0], "AdminTag", AdminInfo[params[0]][admTag]), UpdatePlayerDataStr(params[0], "AdminTagColor", AdminInfo[params[0]][admTagColor]);
}

cmd:restartreport(playerid)
{
	if(TotalReport <= 0) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Репорт пуст!");

	TotalReport = 0;
	foreach(new i: Player)
	{
		if(ReportON{i})
		{
			ReportON{i} = ReportSlot{i} = false;
			if(ReportID[i] != -1) 
			{
				ReportID[ReportID[i]] =
				ReportID[i] = -1;
			}
		}
	}
	f(global_str, 150, "[A] %s[%d] перезапустил репорт!", PN(playerid), playerid);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}

cmd:clearbiz(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SCM(playerid, COLOR_OLDRED, "Используйте: /clearbiz [bizid]");
	if(params[0] < 0 || params[0] > OWNABLEBIZES) return 0;
	SetString(BizData[params[0]][bZam], "none");
	f (global_str, 80, "[Информация]{FFFFFF} Вы успешно очистили заместителей бизнеса №%d",params[0]);
	SCM(playerid, COLOR_VALIK, global_str);
	return 1;
}

cmd:clearhouse(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SCM(playerid, COLOR_OLDRED, "Используйте: /clearhouse [houseid]");
	if(params[0] < 0 || params[0] > OWNABLEHOUSES) return 0;
	for(new i; i < 5; i++) SetString(HRoomOwner[params[0]][i], "The State");
	f(global_str, 80, "[Информация]{FFFFFF} Вы успешно очистили список жильцов дома №%d",params[0]);
	return SCM(playerid, COLOR_VALIK, global_str);
}

cmd:notif(playerid, params[])
{
	if(sscanf(params, "us[64]", params[0], params[1])) return SCM(playerid, COLOR_OLDRED, "Используйте: /notif [id] [msg]");
	if(params[0] == INVALID_PLAYER_ID) return 0;
	
	f(global_str, 256, "\
	{FFFF00}Ник:{FFFFFF} %s\n\
	{FFFF00}UID в базе:{FFFFFF} %d\n\n\
	{FFFF00}Сообщение:{FFFFFF}\n\
	%s\n\n\n\
	{AFAFAF}Игрок получит уведомление при входе в игру.", PN(params[0]), PI[params[0]][pID], params[1]);
	
	SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Уведомление создано", global_str, "Закрыть", "");
	//
	return CreateNotifPlayer(params[0], params[1]);
}

cmd:bizopen(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SCM(playerid, COLOR_OLDRED, "Используйте: /bizopen [bizid]");
	if(params[0] < 0 || params[0] >= OWNABLEBIZES) return 0;
	BizData[params[0]][bLock] = 0;
	f(global_str, 80, "[A] Администратор %s открыл бизнес №%d", PN(playerid), params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}

cmd:bizlock(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SCM(playerid, COLOR_OLDRED, "Используйте: /bizlock [bizid]");
	if(params[0] < 0 || params[0] >= OWNABLEBIZES) return 0;
	BizData[params[0]][bLock] = 1;
	f(global_str, 80, "[A] Администратор %s закрыл бизнес №%d", PN(playerid), params[0]);
	SendAdminsMessage(COLOR_GREY, global_str);
	return 1;
}

cmd:makefamilyleader(playerid, params[])
{
	if(sscanf(params, "s[15]s[25]", global_str, params[1])) return SCM(playerid, COLOR_OLDRED, "Используйте: /makefamilyleader [family name] [name]");
		
	format(mysql_string, 128, "SELECT `ownername` FROM family WHERE name = '%s'", global_str);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if(cache_num_rows())
	{
		cache_get_value_index(0, 0, mysql_string);
		
		f(mysql_string, 150, "[A] Администратор %s[%d] переписал семью '%s' с владельца '%s' на игрока '%s'", PN(playerid), playerid, global_str, mysql_string, params[1]);
		SendAdminsMessage(COLOR_OLDRED, mysql_string);
		
		format(mysql_string, 128, "UPDATE family SET ownername = '%s' WHERE name = BINARY('%s')", params[1], global_str);
		mysql_query(mysql, mysql_string);
	}
	else SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Такой семьи не существует!");
	cache_delete(result);
	return false;
}

public: OrelTimer(playerid)
{
	if(!(!IsPlayerOnline(OrelName[playerid])) && GetCount(OrelName[playerid], 1811) >= OrelMoney[OrelName[playerid]] && GetCount(playerid, 1811) >= OrelMoney[OrelName[playerid]])
	{
		new bool:shans;
		if(PI[playerid][pVIP][0] == 10) shans = true;
		if(!shans)
   		{
			switch random(100) do
			{
				case 0..49:
					{
						f(global_str, 100,"%s поймал(а) монетку, выпал: Орёл.",PN(playerid));
						ProxDetector(25,playerid,global_str,COLOR_ME);
						if(!strcmp("Орёл", StatusMoneta[playerid], true))
						{
							f(global_str, 100,"Победил %s - %s.",PN(playerid),StatusMoneta[playerid]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(playerid, 1811, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(OrelName[playerid], 1811, OrelMoney[playerid]);

							GameTextForPlayer(playerid, "~g~YOU WIN!", 4200, 1);
						}
						else
						{
							f(global_str, 100,"Победил %s - %s.",PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(OrelName[playerid], 1811, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(playerid, 1811, OrelMoney[playerid]);

							GameTextForPlayer(OrelName[playerid], "~g~YOU WIN!", 4200, 1);
						}
					}
				case 50..99:
					{
						f(global_str, 125,"%s поймал(а) монетку, выпал: Решка.",PN(playerid));
						ProxDetector(25,playerid,global_str,COLOR_ME);
						if(!strcmp("Решка", StatusMoneta[playerid], true))
						{
							f(global_str, 100,"Победил %s - %s.",PN(playerid),StatusMoneta[playerid]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(playerid, 1811, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(OrelName[playerid], 1811, OrelMoney[playerid]);

							GameTextForPlayer(playerid, "~g~YOU WIN!", 4200, 1);
						}
						else
						{
							f(global_str, 100,"Победил %s - %s.",PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);


							AddItem(OrelName[playerid], 1811, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(playerid, 1811, OrelMoney[playerid]);

							GameTextForPlayer(OrelName[playerid], "~g~YOU WIN!", 4200, 1);
						}
					}
			}

			GiveBizMoney(BizEntered[playerid], OrelMoney[playerid]);
		}
		else
		{
			switch random(100) do
			{
				case 0..59:
					{
						f(global_str, 100,"%s поймал(а) монетку, выпал: Орёл.",PN(playerid));
						ProxDetector(25,playerid,global_str,COLOR_ME);
						if(!strcmp("Орёл", StatusMoneta[playerid], true))
						{
							f(global_str, 100,"Победил %s - %s.",PN(playerid),StatusMoneta[playerid]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(playerid, 1811, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(OrelName[playerid], 1811, OrelMoney[playerid]);

							GameTextForPlayer(playerid, "~g~YOU WIN!", 4200, 1);
						}
						else
						{
							f(global_str, 100,"Победил %s - %s.",PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(OrelName[playerid], 1811, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(playerid, 1811, OrelMoney[playerid]);

							GameTextForPlayer(OrelName[playerid], "~g~YOU WIN!", 4200, 1);
						}
					}
				case 60..99:
					{
						f(global_str, 125,"%s поймал(а) монетку, выпал: Решка.",PN(playerid));
						ProxDetector(25,playerid,global_str,COLOR_ME);
						if(!strcmp("Решка", StatusMoneta[playerid], true))
						{
							f(global_str, 100,"Победил %s - %s.",PN(playerid),StatusMoneta[playerid]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);

							AddItem(playerid, 1811, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(OrelName[playerid], 1811, OrelMoney[playerid]);

							GameTextForPlayer(playerid, "~g~YOU WIN!", 4200, 1);
						}
						else
						{
							f(global_str, 100,"Победил %s - %s.",PN(OrelName[playerid]),StatusMoneta[OrelName[playerid]]);
							ProxDetector(25,playerid,global_str,COLOR_DOCHAT);


							AddItem(OrelName[playerid], 1811, OrelMoney[OrelName[playerid]]-OrelMoney[OrelName[playerid]]/50);
							DeleteItem(playerid, 1811, OrelMoney[playerid]);

							GameTextForPlayer(OrelName[playerid], "~g~YOU WIN!", 4200, 1);
						}
					}
			}

			GiveBizMoney(BizEntered[playerid], OrelMoney[playerid]);
		}
	}
	OrelMoney[playerid] =
	ZapretOrel[playerid] = 0;
	ZapretOrel[OrelName[playerid]] = 0;
	StatusMoneta[playerid] = "0";
	StatusMoneta[OrelName[playerid]] = "0";
	OrelName[OrelName[playerid]]= INVALID_PLAYER_ID;
	return OrelName[playerid] = INVALID_PLAYER_ID;

}

cmd:trunk(playerid, params[])
{
	new vehicleid;
	if(sscanf(params, "d", vehicleid)) return SCM(playerid, COLOR_OLDRED, !"Используй: /trunk [id]");
	if(!IsAOwnableCar(vehicleid) || !IsValidVehicle(vehicleid)) return false;
	if(!TrunkInfo[vehicleid][tOpen]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Багажник сейчас закрыт!");
	new Float:X,Float:Y,Float:Z;
	GetVehiclePos(vehicleid, X,Y,Z); 
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z)) return false;
	trunk[playerid] = vehicleid;
	return OtherInvOpen(playerid, 3, 0.0, 0.0, vehicleid);
}

cmd:getworld(playerid,params[])
{
	if(!IsOsnovatel(playerid)) return true;
	return SCMF(playerid, COLOR_GREEN, "int - %d, wolrd - %d", GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
}

cmd:adeldesc(playerid, data[])
{
	extract data -> new player:id; else 
		return SCM(playerid, COLOR_OLDRED, "Используйте: /adeldesc [id/name]");

	DeleteOpisanie(id);
	SetString(PI[id][pOpisanie],"");
	UpdatePlayerDataStr(id, "Opisanie", PI[id][pOpisanie]);
	f(global_str, 100, "[Информация]{FFFFFF} Вы удалили описание персонажа %s[ID: %d]", PN(id), id);
	SCM(playerid, COLOR_VALIK, global_str);
	f(global_str, 100, "[A]{FFFFFF} Администратор %s удалил описание персонажа у %s[ID: %d]", PN(playerid),PN(id),id);
	SendAdminsMessage(COLOR_YELLOW, global_str);
	return 1;
}

cmd:rewards(playerid)
{
	SPD(playerid, 5060, 2, "Все достижения","\
	{FFFFFF}Посмотреть все {5afad5}ежедневные бонусы\n\
	{FFFFFF}Посмотреть все {88a862}глобальные достижения\n\
	{FFFFFF}Посмотреть все достижения на работах\n\
	Посмотреть все достижения для фракций\n\
	Посмотреть лог выполненных достижений","Выбрать","Отмена");
	return 1;
}

cmd:rcveh(playerid)
{
	if(!IsACarInv( ItemsInfo[AksSlot[playerid][0][2]][itemModel] ))
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вас нет надетого на вас транспорта на радиоуправлении!");
	
	else if(GetPlayerState(playerid) == 2 or !(GetPlayerVirtualWorld(playerid) == 0) or !(GetPlayerInterior(playerid) == 0) or AnimPlayed{playerid}) 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Использовать транспорт можно только стоя на ногах");
	
	else if(PlayerTimerItem[playerid][1] > Global_Time) 
		return SCMF(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вам запрещено использовать транспорт на радио управлении. Осталось %s", Convert(PlayerTimerItem[playerid][1] - Global_Time));

	new Float:A;

	GetPlayerPos(playerid, DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2]);
	GetPlayerFacingAngle(playerid, A);
	PI[playerid][plveh] = J_AddStaticVehicleEx(ItemsInfo[AksSlot[playerid][0][2]][itemModel], DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2], A);
 	VehicleInfo[PI[playerid][plveh]][vEngine] = true;
 	Fuel[PI[playerid][plveh]] = 100.0;
 	SetVehicleParamsEx(PI[playerid][plveh], 1, 0,0,0,0,0,0);
 	PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);
 	RCzone[playerid] = GangZoneCreate(DeathPos[playerid][0]+150,  DeathPos[playerid][1]+150, DeathPos[playerid][0]-150, DeathPos[playerid][1]-150);
 	GangZoneShowForPlayer(playerid, RCzone[playerid], 0x96f78d99);
 	RCzoneTimer[playerid] = 10;
 	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "", "{FFFFFF}Правила использования радиоуправляемой техники:\n{BE5555}- Запрещено наносить урон игрокам (любыми способами)\n- Запрещено покидать размеченные границы (на карте)\n\n{DAD858}Для выхода используйте 'F' или 'ENTER'", "Выход", "");
}

cmd:setcarskill(playerid, params[])
{
	if(PI[playerid][pAdmin] != 7) return 1;
	if(sscanf(params, "ud", params[0], params[1])) return 0;
	if(params[0] > 100 || params[0] < 1) return 1;
	PI[params[0]][pCarSkill] = params[1];
	return 0;
}

stock CreateSpawnTextDraws(playerid)
{
	HungerProgres[playerid] = CreatePlayerTextDraw(playerid,549.500000, 60.000000, "____");
	PlayerTextDrawBackgroundColor(playerid,HungerProgres[playerid], 255);
	PlayerTextDrawFont(playerid,HungerProgres[playerid], 1);
	PlayerTextDrawLetterSize(playerid,HungerProgres[playerid], 0.490000, -0.000000);
	PlayerTextDrawColor(playerid,HungerProgres[playerid], -1);
	PlayerTextDrawSetOutline(playerid,HungerProgres[playerid], 0);
	PlayerTextDrawSetProportional(playerid,HungerProgres[playerid], 1);
	PlayerTextDrawSetShadow(playerid,HungerProgres[playerid], 1);
	PlayerTextDrawUseBox(playerid,HungerProgres[playerid], 1);
	PlayerTextDrawBoxColor(playerid,HungerProgres[playerid], 0x7CAC5AAA);
	PlayerTextDrawTextSize(playerid,HungerProgres[playerid], 604.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid,HungerProgres[playerid], 0);

	fstd_p[playerid][6] = CreatePlayerTextDraw(playerid, 451.289215, 140.350006, "particle:shad_bike");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][6], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][6], 10.625000, 52.000000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][6], 0);
	PlayerTextDrawColor(playerid, fstd_p[playerid][6], 0x00000070);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][6], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][6], 2);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, fstd_p[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][6], 0);

	fstd_p[playerid][5] = CreatePlayerTextDraw(playerid, 493.789215, 140.350006, "particle:shad_bike");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][5], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][5], 10.625000, 52.000000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][5], 0);
	PlayerTextDrawColor(playerid, fstd_p[playerid][5], 0x00000070);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][5], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, fstd_p[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][5], 0);

	fstd_p[playerid][4] = CreatePlayerTextDraw(playerid, 500.351715, 141.850006, "usebox");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][4], 0.000000, 5.439200);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][4], 455.101715, 0.000000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][4], 1);
	PlayerTextDrawColor(playerid, fstd_p[playerid][4], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][4], 0x000000AA);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, fstd_p[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][4], 0);

	fstd_p[playerid][3] = CreatePlayerTextDraw(playerid, 477.851715, 142.516678, "USE");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][3], 0.159033, 0.818733);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][3], 7.368598, 40.375000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][3], 2);
	PlayerTextDrawColor(playerid, fstd_p[playerid][3], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][3], 0x00000000);
	PlayerTextDrawFont(playerid, fstd_p[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][3], 1);

	fstd_p[playerid][2] = CreatePlayerTextDraw(playerid, 477.851715, 155.516678, "DROP");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][2], 0.154033, 0.818733);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][2], 7.368598, 40.375000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][2], 2);
	PlayerTextDrawColor(playerid, fstd_p[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][2], 0x00000000);
	PlayerTextDrawFont(playerid, fstd_p[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][2], 1);

	fstd_p[playerid][1] = CreatePlayerTextDraw(playerid, 477.851715, 168.516678, "INFO");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][1], 0.154033, 0.818733);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][1], 7.368598, 40.375000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][1], 2);
	PlayerTextDrawColor(playerid, fstd_p[playerid][1], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][1], 0x00000000);
	PlayerTextDrawFont(playerid, fstd_p[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][1], 1);

	fstd_p[playerid][0] = CreatePlayerTextDraw(playerid, 477.851715, 181.516678, "CLOSE");
	PlayerTextDrawLetterSize(playerid, fstd_p[playerid][0], 0.149033, 0.818733);
	PlayerTextDrawTextSize(playerid, fstd_p[playerid][0], 7.368598, 40.375000);
	PlayerTextDrawAlignment(playerid, fstd_p[playerid][0], 2);
	PlayerTextDrawColor(playerid, fstd_p[playerid][0], 0xBE5555FF);
	PlayerTextDrawUseBox(playerid, fstd_p[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, fstd_p[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, fstd_p[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, fstd_p[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, fstd_p[playerid][0], 0x00000000);
	PlayerTextDrawFont(playerid, fstd_p[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, fstd_p[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, fstd_p[playerid][0], 1);
	CreateMenuTD(playerid);
	for(new i; i < 9; i++) DestroyPlayerTD(playerid, pokazmenu[playerid][i]);
 	CreateMenuTD(playerid);
 	PI[playerid][pColorInv] = InventColor[PI[playerid][pInvColors]][1];
	PI[playerid][pSelectTD] = InventColor[PI[playerid][pInvColors]][2];
	HideInvent(playerid);
 	return 0;
}

stock SendErrorMessage(playerid)
	return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Неизвестная ошибка");

stock DeleteTuningCar(vehicleid, id)
{
	if(id) 
		VehicleInfo[vehicleid][vModification] = false;

	for(new i; i < 14; i++)
	{
		switch id do
		{
			case 0: { DestroyDynamicObjectModel(vehicleid, supreme[vehicleid], 19476); break; }
			case 1:
			{
				if(i > 1) break;
				DestroyDynamicObjectModel(vehicleid, TwinTubroStick[vehicleid][i], 19327);
			}
			case 2: 
			{
				switch GetVehicleModelEx(vehicleid) do
				{
					case 411:
					{
						switch i do
						{
							case 0,1,3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18663);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 541:
					{
						switch i do
						{
							case 0,2,3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19477);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 451:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19477);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19917);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2422);
							case 4,5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 6,7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 603:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19482);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1023);
							case 3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 480:
					{
						switch i do
						{
							case 0..3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1049);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 415:
					{
						switch i do
						{
							case 0..4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 5,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
							case 7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1003);
						}
					}
					case 402:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18663);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
					case 579:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1071);
							case 1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1069);
							case 2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1049);
							case 3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1037);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
					case 429:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
							case 2..7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
					case 560:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 506:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
							case 2..5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
					case 559:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 1..3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
					case 562:
					{
						switch i do
						{
							case 0,1,2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1112);
						}
					}
				}
			}
			case 3:
			{
				if(i > 9) break; //DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], );
				switch GetVehicleModelEx(vehicleid) do
				{
					case 495:
					{
						switch i do
						{	
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19917);
							case 1,2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1114);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19601);
							case 5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2985);
							case 6,7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18702);
						}
					}
					case 411:
					{
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19917); 
							case 1,2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1114); 
							case 3,4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18702); 
							case 5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327); 
							case 6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19477); 
							case 7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19846); 
							case 8: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1003); 
							case 9: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 362); 
						}
					}
					case 415:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1114);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 362);
							case 4,5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18702);
							case 6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 7,8: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1582);
						}
					}
					case 579:
					{
						switch i do
						{
							case 0,1: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1640);
							case 4: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2597);
							case 5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2985);
							case 6,7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2842);
							case 8,9: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2260);
						}
					}
					case 462:
					{
						if(!VehicleInfo[vehicleid][vFree]) break;
						switch i do
						{
							case 0: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 18644);
							case 1,2: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 2685);
							case 3,4,6: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19475);
							case 5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 11740);
						}
					}
				}
			}
			case 4:
			{
				switch GetVehicleModelEx(vehicleid) do
				{
					case 487:
					{
						switch i do
						{
							case 0,1,6,7: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1444);
							case 2,3: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 1554);
							case 4,5: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19344);
							case 8,9: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19846);
							case 10..13: DestroyDynamicObjectModel(vehicleid, tuningcar[vehicleid][i], 19327);
						}
					}
				}
			}
			case 5:
			{
				if(i < 1)
					DestroyDynamicObjectModel ( vehicleid, OilFocusObject[vehicleid], 19135);
			
				if(i < 6)
				{
					DestroyDynamicObjectModel ( vehicleid, OilObjects[vehicleid][i], 3632),
						OilObjectStatus[vehicleid][i] = false,
							SetString(OilOwner[vehicleid][i],"The State");
				
					if(IsValidDynamic3DTextLabel(OilTextObj[vehicleid][i]) && vehicleid == Streamer_GetIntData(STREAMER_TYPE_3D_TEXT_LABEL, OilTextObj[vehicleid][i], E_STREAMER_ATTACHED_VEHICLE))
						DestroyDynamic3DTextLabel ( OilTextObj[vehicleid][i] );
				}
			}
			case 6:
			{
				switch i do
				{
					case 0,4..6,8: DestroyDynamicObjectModel( vehicleid, tuningcar[vehicleid][i], 19197);
					case 1..3,7: DestroyDynamicObjectModel( vehicleid, tuningcar[vehicleid][i], 19476);
					case 9: DestroyDynamicObjectModel( vehicleid, tuningcar[vehicleid][i], 1976);
					case 10..13: DestroyDynamicObjectModel( vehicleid, tuningcar[vehicleid][i], 19294);
				}
			}
		}
	}
	return 0;
}

stock SaveServerData()
{		
	for(new i; i < 2000; i++)
		CallLocalFunction("UpdateDataServer", "d", i);
	
    SaveOrgs();
	SaveInformation();
	
	return true;
}

public: UpdateDataServer(i)
{
	if(i < OWNABLEHOUSES) SaveHouse(i);
	if(i < OWNABLEBIZES) SaveBusiness(i);
	if(i < OWNABLETRAILERS && IsValidTrailer(i) ) SaveTrailer(i);
		
	if(Iter_Contains(Vehicle, i))
		SaveOwnableCar(i);
		
	if(Iter_Contains(Player, i) && pTemp[i][tAuthorized])
		SaveAccount(i), SaveInventory(i);

	return true;
}

stock CreateFreeVehicle(model,Float:X, Float:Y, Float:Z, Float:A, c1,c2, spt)
{
	new veh = J_AddStaticVehicleEx(model, X, Y, Z, A, c1, c2, spt);
	VehicleInfo[veh][vFree] = 1;
	return veh;
}

stock GetBizWeek(bizid, day)
{
	f(global_str, 200, "SELECT * FROM `businesses` WHERE `ID` = '%d'", BizData[bizid][bID]);
	new Cache:result = mysql_query(mysql, global_str), days[7];
	cache_get_value_name_int(0, "monday", days[0]),
	cache_get_value_name_int(0, "saturday", days[1]),
	cache_get_value_name_int(0, "tuesday", days[2]),
	cache_get_value_name_int(0, "sunday", days[3]),
	cache_get_value_name_int(0, "thursday", days[4]),
	cache_get_value_name_int(0, "wednesday", days[5]),
	cache_get_value_name_int(0, "friday", days[6]);
	cache_delete(result);
	return days[day];
}

stock ShowWeekBiz(playerid, id)
{
	global_str = "";

	f(global_str, 600, "\
		День\tПрибыль\n\
		{FFFFFF}Понедельник\t{9ACD32}%d$\n\
		{FFFFFF}Вторник\t{9ACD32}%d$\n\
		{FFFFFF}Среда\t{9ACD32}%d$\n\
		{FFFFFF}Четверг\t{9ACD32}%d$\n\
		{FFFFFF}Пятница\t{9ACD32}%d$\n\
		{FFFFFF}Суббота\t{9ACD32}%d$\n\
		{FFFFFF}Воскресенье\t{9ACD32}%d$", GetBizWeek(id, 0), GetBizWeek(id, 1), GetBizWeek(id, 2), GetBizWeek(id, 3), GetBizWeek(id, 4), GetBizWeek(id, 5), GetBizWeek(id, 6));
	SPD(playerid, 9992, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Окей", !"");

 	return true;
}

cmd:setfuel(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new Float:dd;
	    if(sscanf(params, "f", dd)) return 0;
	    Fuel[GetPlayerVehicleID(playerid)] = dd;
	}
	else SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Вы не в транспорте!");
	return 1;
}

stock ClearPlayerData(playerid)
{
	for(new id; id < 100; id++)
		battlepassReward[playerid][0][id] = battlepassReward[playerid][1][id] = 0;
	
	for(new id; id < 64; id++)
	{
		for(new type; type < 3; type++)
		{
			if(id < 5 && type < 2)
				portalGun[playerid][type][id] = 0.0;

			BonusTime[playerid][type] = 0;
		}
	}

	pTemp[playerid][pMoroz] = 
	pTemp[playerid][tSalonCategory] = 
	pTemp[playerid][tSalonSelect] = 
	pTemp[playerid][tSalonCartMoney] =
	pTemp[playerid][tBodyguardSpawnCount] = 
	PI[playerid][pScreenBrowserInit] = false;

	pTemp[playerid][cefAuth] = false;

	pTemp[playerid][tSalonCart][0] = EOS;
	pTemp[playerid][tSalonColor][0] =
	pTemp[playerid][tSalonColor][1] = 1;

	pTemp[playerid][tSelectionData][0] = 1;
	pTemp[playerid][tSalonBox] = 
	pTemp[playerid][pCentralMarketId][0] = 
    pTemp[playerid][pCentralMarketId][1] = 
	pTemp[playerid][tSelectionData][1] = INVALID_DATA_ID;
	
	pTemp[playerid][onlineData][0] = 
	pTemp[playerid][onlineData][1] = 
	pTemp[playerid][SPECTPLAYER] =
	InventoryOpen{playerid} =
	pTemp[playerid][tAuthorized] =
	craftopen{playerid} =
	NeedDell[playerid] =
	AcceptFam{playerid} =
	InNZone{playerid} =
	MinusGun{playerid} =
	GoogleOpen{playerid} =
	ReportSend{playerid} =
	ReportSlot{playerid} =
	ReportON{playerid} =
	pSvon{playerid} =
	Proviziya{playerid} =
	AnimPlayed{playerid} =
	selfi{playerid} =
	EnterCasino{playerid} =
	ShowMap[playerid] =
	TeamDuty{playerid} =
	ADuty{playerid} =
	containeropen{playerid} =
	PlayerPlayed{playerid} =
	PlayerGlass[playerid] =
	Fishing{playerid} =
	Cuffed[playerid] =
	PlayerLie{playerid} =
	Phonestat{playerid} =
	UsingShield{playerid} =
	tradeopen{playerid} =
	AcceptAdm{playerid} =
	shopopen{playerid} = 
	SecondHand_Open{playerid} = 
	bodyguardTDOpen{playerid} =
	bodyguardInventoryOpen{playerid} = 
	EnchantWork{playerid} = false;

	//PEREMEN
	PI[playerid][pArmour] =
	PI[playerid][pHealth] = 0;
	ferma[playerid] =
	TrailerTime{playerid} =
	PI[playerid][pTrailer] =
	iluxatime[playerid] =
	PI[playerid][pInvPage] =
	TimerShaxta[playerid] =
	boombox[playerid] =
	addskate[playerid] =
    crselect[playerid] =
	pEngine{playerid} =
	crselect2[playerid] =
	PI[playerid][pVirMoney] =
	PI[playerid][pLevel] =
	questman[playerid] =
	OBJECT_SLEGAN[playerid] =
	buygunid[playerid] = 0;
	PI[playerid][pAdmin] =
    PI[playerid][pBeg][3] =
    OBJECT_RAKE[playerid] =
    OBJECT_SLEGAN[playerid] =
 	Gambling[playerid] =
 	pTemp[playerid][pDM] =
 	pTemp[playerid][pLimit] =
	pMusicOn[playerid] =
	PI[playerid][pVipTime] =
	ReReport[playerid] = 0;
	cardop[playerid] =
	PI[playerid][pHospital] =
	DialogListID[playerid] = 
	addchet[playerid] =
	Timerak[playerid] =
	CanUse[playerid] =
	PI[playerid][pVID] =
	Vnedren[playerid] =
    TimetoReturn[playerid] =
	PI[playerid][pKlogin] =
	captp[playerid] =
	Vehs[playerid][vReis] = 0;
	CenaRaboti[playerid] =
	KostiMoney[playerid]						=
	ZapretDice[playerid] 						=
	Smokes[playerid] 							=
	Smoke[playerid] 							=
	SmokeTime[playerid] 						=
	TransferPlayer[playerid] 					=
	PlayerJob[playerid] 						=
	RadioID[playerid]							=
	PlayerModification[playerid]				=
	AdminInfo[playerid][admGoto] 				= 
	AdminInfo[playerid][admGethere] 			= 
	AdminInfo[playerid][admSpectate]			= 
	AdminInfo[playerid][admInfoNewPlayer] 		= 
	AdminInfo[playerid][admKillList] 			= 
	AdminInfo[playerid][admIP] 					= 
	InventoryPage[playerid]						=
	PI[playerid][pCarsLoad]						=
	pTemp[playerid][kladPercent]				=
	server_fix_two[playerid]					=
	server_fix_one[playerid] 					= 
	TelNumber[playerid] 						= 0;

	PI[playerid][pMember] 						=
    	
	PassInfo[playerid][psDateBirth][0] 			=
 	PassInfo[playerid][psDateBirth][1] 			=
 	PassInfo[playerid][psDateBirth][2] 			=
 	PassInfo[playerid][psDate][0] 				=
 	PassInfo[playerid][psDate][1] 				=
 	PassInfo[playerid][psDate][2] 				=
 	TaxiTarif[playerid] 						=
	TaxiPrice[playerid] 						=
	TaxiDistance[playerid] 						=
	PI[playerid][pONPhoneTalk]					=
	Ring[playerid]                    			=
	PI[playerid][pBankPass]               		=
	MLeader[playerid] 							=
	PI[playerid][pDCTime] 						=
	TheftKey[playerid] 							=
	TheftCount[playerid] 						=
	TheftCarID[playerid] 						=
	TheftTime[playerid] 						=
	pTemp[playerid][BreakKey] 					=
	pTemp[playerid][BreakCount] 				=
	pTemp[playerid][BreakTime] 					=
	SGunMats[playerid] 							=
	timeaks[playerid] 							=
	SGunID[playerid] 							=
	SGunPrice[playerid] 						=
	musorka[playerid] 							=
	SGunAmmo[playerid] 							=
	OGReset[playerid]                          	=
	CarPrice[playerid] 							=
	auto_drive_select[playerid]					=
	SkinPrice[playerid]                         =
    SkinIDSell[playerid]                        =
	PI[playerid][pTir]                          =
	PI[playerid][pTirUp]                        =
	pEngine{playerid}                           =
	pTemp[playerid][kladKey]					=
	ShowPBiz[playerid] 							= 
	pTemp[playerid][kladID] 					= INVALID_DATA_ID;
    PI[playerid][pBeg][0] 						=
  	SlotTimer[playerid] 						=
	PI[playerid][pZall] 						=
	ReportID[playerid] 							=
	PI[playerid][pBuildType] 					=
    cartrade[playerid] 							=
	dBiz[playerid] 								=
	PI[playerid][pType] 						=
	PI[playerid][pScutes] 						=
	PI[playerid][pMScutes] 						=
	PI[playerid][pHSpectr] 						=
	setcheck[playerid] 							=
    Ingatre[playerid] 							=
	PI[playerid][pCalling] 						=
	BreakBomb[playerid]                         =
	PlayerGoPost[playerid]                      =
	PlayerBed[playerid] 						=
	PI[playerid][pFrom] 						=
	PutState[playerid]                          =
    NumInc_CP[playerid] 						=
	HouseEntered[playerid] 						=
	GarageEntered[playerid] 					=
	ParkingEntered[playerid] 					=
	BizEntered[playerid] 						=
	BuyGuns[playerid]                           =
	BuyInt[playerid] 							=
	CarTest[playerid] 							=
	MotoTest[playerid]                          =
	FarmJob[playerid] 							=
	PI[playerid][pHouseKey] 					=
	Buyitem[playerid]                           =
	PlayerSeat[playerid] 						=
	pTemp[playerid][pArendaCar] 				=
	PI[playerid][plveh]                         =
	InfoHouse[playerid]							=
	InfoBiz[playerid]                           =
	InfoOtel[playerid]							=
	PanelPlayerID[playerid] 					=
 	MedCardInfo[playerid][mcState] 				=
	NoStrip[playerid]                           =
 	pTemp[playerid][pSellCar] 					=
	pAntiCheatSettingsEditCodeId[playerid] = INVALID_DATA_ID; // Присваиваем переменной, хранящей идентификатор (ID) кода анти-чита, который редактирует игрок, значение -1
 
	FP_Data[playerid][F_FAMILY_ID]              = 
	FP_Data[playerid][F_FAMILY_PICK_KV]			= -1;
	FP_Data[playerid][F_FAMILY_MUTE] 			=
	FP_Data[playerid][F_FAMILY_PERCENT_DEPOSIT] =
	FP_Data[playerid][F_FAMILY_RANG] 			= 0;
	
	SpectatePlayer[playerid]					=
	LiveOfferID[playerid]						=
	LiveOffer[playerid]							=
	MLPlayer[playerid] 							=
	SGunOffer[playerid] 						=
	CarOffer[playerid] 							=
	InviteOffer[playerid] 						=
	HouseOffer[playerid] 						=
	BizOffer[playerid] 							=
	RHouseOffer[playerid]						=
	LawyerOffer[playerid] 						=
	ArrestID[playerid]                        	=
	TazerPlayer[playerid]                       =
	PlayerOfCuff[playerid]                      =
	OldFreePlayer[playerid]                     =
	GotoInfo[playerid][gtID]                    =
	GotoInfo[playerid][gtGoID] 					=
	Recuffer[playerid]                          =
	SetPlayerAccessoryID[playerid] 				=
	KostiName[playerid] 						=
	SERIU[playerid][sID] 						= INVALID_PLAYER_ID;

	PlayerCar[playerid] 						=
	pTemp[playerid][pcarid] 					=
	pTemp[playerid][pDeathCar] 					=
	ArendKey[playerid]                          = INVALID_VEHICLE_ID;

	GotoInfo[playerid][gtX]                     =
	GotoInfo[playerid][gtY]                     =
	GotoInfo[playerid][gtZ]                     =
	GotoInfo[playerid][gtTPX]                   =
	GotoInfo[playerid][gtTPY]                   =
	GotoInfo[playerid][gtTPZ]                   =
	PI[playerid][pShield] = 0.0;
	TrailerEnter[playerid] =
	PI[playerid][pTrailerKey] = -1;
	OrelName[playerid] = INVALID_PLAYER_ID;
	TrailerVeh[playerid] = INVALID_VEHICLE_ID;
	gunmute[playerid] = Global_Time + 5;
	PI[playerid][pCarSkill] = 80;
	SetPass[playerid]                           = "\0";
	ReMail[playerid]                           	= "-";
 	Fullness[playerid]                     		= 55;
	PI[playerid][pVIP][0] 							= STATUS_NONE;
	PI[playerid][pHealth] 						= 30;
	idiotad[playerid] = -1;
	IDDialog[playerid] = -1;
	PlayerAFKTime[playerid][0] = 0;
	GolodTime[playerid] = 60;
	agm[playerid] = 0.0000;

	PI[playerid][pSkin][0] = 0;

	pTemp[playerid][tRegisterStage] =
	pTemp[playerid][tAuthorized] = false;
	pTemp[playerid][tPasswordAttemp] = 3;
	pTemp[playerid][tSkinSelectedId] = -1;
	pTemp[playerid][tAuthTime] = 240;

	SetPVarInt(playerid,"UsePlatSto",INVALID_PLAYER_ID);
	SetPVarInt(playerid,"StolCard",-1);
	DeletePVar(playerid, "tuningStationCameraID");

	//OTHER
	for(new i; i < InventoryMaxSlot; i++)
	{
		if(i < 9) RemovePlayerAttachedObject(playerid, i);	
		if(i < 10) CashBack[playerid][i] = 0;
		if(i < 8) AksSlot[playerid][0][i] = AksSlot[playerid][1][i] = AksSlot[playerid][2][i] = 0, AksVidStatus[playerid][i] = AksVid[playerid][i] = 0;
		if(i < 5) PlayerFish[playerid][i] 	= 0, pTemp[playerid][tSalonSlider][i] = 0.0;
		if(i < 7) pTemp[playerid][tSalonWindowColor] = 0;
		if(i < 25) RewardProgress[playerid][i] = 0, RewardDone[playerid][i] = 0;
		if(i < 53) EnableAntiCheatForPlayer(playerid, i, 1);
		if(i < 32) PlayerDialogList[playerid][i] = 0;
		if(i < 22) pTemp[playerid][tSalonCartCheck][i] = 0;
		if(i < 4) Bodyguard_npcData[playerid][i][bgnpc_NPC] = INVALID_PLAYER_ID;
		if(i < 2) pTemp[playerid][inventoryPosition][i] = pTemp[playerid][inventorySize][i] = 0.0;
		if(i < AC_MAX_TRIGGERS) pAntiCheatLastCodeTriggerTime[playerid][i] = -1;

		Inventory[playerid][0][i] = Inventory[playerid][1][i] = Inventory[playerid][2][i] = Inventory[playerid][3][i] = Inventory[playerid][4][i] = Inventory[playerid][5][i] = Inventory[playerid][6][i] = Inventory[playerid][7][i] = GlobalMassive[playerid][i] = 0;
	}
	
	KillAllTimers(playerid);
	UpdatePlayerArmour(playerid, 0);
	UpdatePlayerHealth(playerid, 0);
	
    CreateAllTextDraws(playerid);

	DisablePlayerRaceCheckpoint(playerid);
	DeleteOpisanie(playerid);
	GangZoneDestroy(RCzone[playerid]);
	RCzone[playerid] = -1;
	NullMasiveTimer(playerid);
	DisableAllRaceCPs(playerid);
	ResetDynamicCPs(playerid);

	return ShowGangZone(playerid);
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:speed = 4.0, ab = 0, abc = 0, abcd = 0, abcde = 0, abcdef = 0, abcdefg = 1)
{
	if(!(PlayerBed[playerid] == -1) || Int_GetPlayerData(playerid, "P_SEAT_STATUS")) return false;
	return ApplyAnimation(playerid, animlib, animname, speed, ab, abc, abcd, abcde, abcdef, abcdefg);
}

stock IsPlayerInAir(playerid)
{
	new Float:X, Float:Y, Float:Z, Float:CZ;
	GetPlayerPos(playerid, X, Y, Z);
	MapAndreas_FindZ_For2DCoord(X, Y, CZ);
	if(Z-1.2 > CZ) return 1;
	return 0;
}

stock SetPlayerPosAirX(playerid, Float:X, Float:Y)
{
    new Float:Z;
	MapAndreas_FindZ_For2DCoord(X, Y, Z);
	return UpdatePlayerPos(playerid, X, Y, Z + 1);
}

stock DestroySkate(playerid, rand)
{
	if(addskate[playerid] == 2)
	{
	    RemovePlayerAttachedObject(playerid, 7);
	    SetPlayerAttachedObject(playerid,6,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
		addskate[playerid] = 1;
		if(rand == 1) ApplyAnimationEx(playerid, !"PED", "FALL_collapse", 4.1, 0, 1, 0, 0, 0, 1);
		else ClearAnimationsEx(playerid);
		new daun = random(3)+1;
		SetPVarInt(playerid, !"skatewait", Global_Time+daun);
	}
	return 1;
}

cmd:freeleaders(playerid)
{
	global_str = "";
	new str[35];
	for(new i = 1; i < MAX_ORGS; i++)
	{
	    if(GetString(OrgInfo[i][oLeader], "Свободна"))
	    {
	        f(str, sizeof(str), "{FFFFFF}%s\n", OrgInfo[i][oName]);
	        strcat(global_str, str);
		}
	}
	SPD(playerid, 0, DIALOG_STYLE_LIST, "{FFFF00}Свободные организации", global_str, "Закрыть", "");
	return 1;
}

stock PayDayAccs()
{
    foreach(Player, i)
	{
	    if(pTemp[i][tAuthorized])
	    {
		   	PI[i][pExp] += GLS[23] + 1 * XPayDay;
			PI[i][pVirMoney] += (PI[i][pVIP][0] == 5 ? 2 : PI[i][pVIP][0] == 6 ? 4 : 0) * XPayDay;

			new money;
			SCM(i, COLOR_VALIK, !"______________________________Банковский чек______________________________");

			if(PI[i][pPlayedTime] < (GetPlayerADDVIP(i) ? 180 : 900))
				SCMF(i, COLOR_RED, "Для получения заработной платы, необходимо отыграть %i минут перед PayDay.", GetPlayerADDVIP(i) ? 3 : 15);

			if(GetTeamID(i) > 0)
			{
				if(IsAtGang(i))
					money += OrgMoney[GetTeamID(i)]/4 * XPayDay;
				else
					money += OrgSalary[GetTeamID(i)][PI[i][pRank]] * XPayDay;

				if(PI[i][pPlayedTime] < (GetPlayerADDVIP(i) ? 180 : 900))
					money = 0;

       			BonusTime[i][1]++;
			}
	        new deposit;
	        
			deposit += PI[i][pVIP][0] >= 5 ? PI[i][pDepositInfo][0]/992:PI[i][pDepositInfo][0]/1000 * XPayDay;
			
			if(FP_Data[i][F_FAMILY_PERCENT_DEPOSIT])
				deposit -= (deposit/100 * FP_Data[i][F_FAMILY_PERCENT_DEPOSIT]) * XPayDay;
			
			SCMF(i, -1, "Текущая сумма в банке: $%i {33AA33}(+$%i)", PI[i][pBank] += money, money);
			SCMF(i, -1, "Текущая сумма на депозите: $%i {33AA33}(+$%i)", PI[i][pDepositInfo][0] += deposit, deposit);
			SCMF(i, -1, "В данный момент у вас %i-й уровень и %i/%i респектов {33AA33}(+%i EXP)", PI[i][pLevel], PI[i][pExp], (PI[i][pLevel] + 1) * 4, !XPayDay ? 1 : (GLS[23] + 1 * XPayDay));
			
			if(PI[i][pWanted] > 0)
			{
				PI[i][pWanted] -= !XPayDay ? 1 : 1 * XPayDay;
				SetPlayerWantedLevel(i, PI[i][pWanted]);
				SCMF(i, -1, "Уровень розыска: -%i (%d)", !XPayDay ? 1 : 1 * XPayDay, PI[i][pWanted]);
			}
			else
			{
				if(PI[i][pZKP] < 100)
				{
					PI[i][pZKP] += !XPayDay ? 1 : 1 * XPayDay;
					SCMF(i, -1, "Законопослушность: +%i (%d)", !XPayDay ? 1 : 1 * XPayDay, PI[i][pZKP]);
				}
				if(PI[i][pZKP] >= 50 && PI[i][pBL] == 1)
				{
					PI[i][pBL] = 0;
					SCM(i, -1, !"Вы набрали 50 очков законопослушности и были автоматически удалены из ЧС");
				}
			}

			SCMF(i, -1, "Общая заработная плата: $%i", money);
			CheckNextLevel(i);

			SCMF(i, -1, "Баланс на донат-счет: %i AZ {ff6666}(+%i AZ)", PI[i][pVirMoney], PI[i][pVIP][0] == 5 ? 2 : 4 * XPayDay); 

			SCM(i, COLOR_VALIK, !"__________________________________________________________________________");
			
			GameTextForPlayer(i, !"~y~PAYDAY", 3000, 1);
			
			if(PI[i][pCredit] && PI[i][pVIP][0])
				SCM(i, COLOR_RED, !"Приемущества VIP не действуют, так как вы имеете долг в центральном банке!");
			
			PI[i][pPlayedTime] = false;
			PI[i][pRoubles] += 2;
			BonusTime[i][0]++;
			BonusTime[i][2]++;
			
			if(GetPlayerLauncher(i))
				AddItem(i, 1146, (PI[i][pVIP][0] >= 6 ? 5:1) * XPayDay);
		}
		else SCM(i, -1, !"Вы не авторизированы для получения зарплаты");
	}
	return 1;
}

stock PayDayTrailers()
{
	for(new i; i < OWNABLETRAILERS; i++)
	{
	    if(!IsValidTrailer(i)) continue;
		TrailerInfo[i][tNalog] += GLS[68];
		if(TrailerInfo[i][tNalog] >= 104000)
		{
		    DestroyDynamicObject(TrailerInfo[i][tObjPark]);
		    DestroyDynamicPickup(TrailerInfo[i][tPickup]);
		    DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
		    new id = GetPlayerID(TrailerInfo[i][tOwner]);
		    SetString(TrailerInfo[i][tOwner], "The State");
		    if(id != INVALID_PLAYER_ID)
		    {
			    if(pTemp[id][tAuthorized]) SCM(id, COLOR_RED, "( Оповещение ){FFFFFF} Ваш трейлер был изъят за неуплату налогов.");
			}
		}
	}
	return 1;
}

stock PayDayBizes()
{
    for(new bizid; bizid < OWNABLEBIZES; bizid++)
	{
	    if(BizData[bizid][bLevel] + GLS[3] >= 250000)
	    {
			SetString(BizData[bizid][bOwner], "The State");
			SetString(BizData[bizid][bZam], "none");
		    BizData[bizid][bLevel] = 0;
		    UpdateBusinessText(bizid, 1);
	    }
		else if(!GetString(BizData[bizid][bOwner], "The State"))
		{
			if(BizData[bizid][bState] == 32)
				if(BizData[bizid][bUpgrade][2] + 10 <= 1000)
					BizData[bizid][bUpgrade][2] += 10, UpdateNeftText(bizid);

			BizData[bizid][bLevel] += GLS[3];
		}
	}

	return true;
}

stock PayDayHouses()
{
	new Cache:result;

	for(new houseid; houseid < OWNABLEHOUSES; houseid++)
	{		 
		for(new s; s < HouseInfo[houseid][hObjectCount][0]; s++)
		{
			f(mysql_string, 150, "SELECT * FROM `bh_objects` WHERE `HouseID` = '%d' AND Interior = 0;", houseid);
    		result = mysql_query(mysql, mysql_string);
			new objectid;
			cache_get_value_name_int(s, "ItemID", objectid);

			if(cache_num_rows() && objectid == 5821) 
				HouseInfo[houseid][hEstate] = 1;
		}

		if(TextFind(HouseInfo[houseid][hOwner], "The State") or HouseInfo[houseid][hEstate]) continue;
		
		HouseInfo[houseid][hNalog] += GLS[2];
		HouseInfo[houseid][hNalog2] = GLS[2];
		
		if(HouseInfo[houseid][hNalog] >= 104000)
		{
            for(new i; i < 5; i++)
			{
				SetString(HRoomOwner[houseid][i], "The State");
				HRoomNalog[houseid][i] = HRoomPay[houseid][i] = 0;
			}
			
			SetString(HouseInfo[houseid][hOwner], "The State");
		    HouseInfo[houseid][hNalog] =
			HouseInfo[houseid][hNalog2] = 0;
			
		    UpdateHouse(houseid);
     	}

		if(HouseInfo[houseid][hMainingInstalling_time] > 0)
		{
			new playerId = GetPlayerID(HouseInfo[houseid][hOwner]);

			if(!(playerId == INVALID_PLAYER_ID) && IsPlayerOnline(playerId))
				HouseInfo[houseid][hMainingInstalling_time] --;
		}
	}

	return cache_delete(result);
}

stock PayDayCars()
{
    foreach(Vehicle, vehid)
	{
	    if(OwnableCar[vehid] == INVALID_VEHICLE_ID) continue;
	    new number = OwnableCar[vehid];
	    new playerid = GetPlayerID(CarInfo[vehid][cOwner]);
	    if(playerid == INVALID_PLAYER_ID) continue;
        if(IsPlayerRegCar(playerid, number))
        {
			if(!CarInfo[vehid][cParkedInGarage] && !CarInfo[vehid][cParkedInParking])
			{
				if(!CarInfo[vehid][cShtraf]) {
					if(GetString(VehicleInfo[OwnableCar[vehid]][vNumber], "Arizona ST")) CarInfo[vehid][cShtrafer] += GLS[1]*2;
					else CarInfo[vehid][cShtrafer] += GLS[1];
				}
				else CarInfo[vehid][cShtraf] += GLS[1];
			}
			if(CarInfo[vehid][cShtraf] > 60000 || CarInfo[vehid][cShtrafer] > 35000)
			{
				SCM(playerid, COLOR_BLUE, !"За неоплату счетов у вас отобрали личный автомобиль!");
				GiveMoney(playerid, CarInfo[vehid][cCost]);
				SellCar(number);
				global_str = "";
				f(global_str, 100, "< Штраф Стоянка > Машина %d была продана в гос.", vehid);
				SendAdminsMessage(COLOR_RED, global_str);
			}
		}
	}
	return 1;
}

stock PayDayOther()
{
    for(new i; i < MAX_ORGS; i++) RecoveryTime[i] = 0;
	
	for(new i; i < GANGZONES; i++)
	{
	    if(GangZoneInfo[i][gangOwnerId] > 0) OrgInfo[GangZoneInfo[i][gangOwnerId]][oBank] += OrgMoney[GangZoneInfo[i][gangOwnerId]];
	}
	
	for(new i; i < 30 - Iter_Count(Klad); i++)
	{
		new klad_pos = random(sizeof position_klad);
				
		CreateKlad(Iter_Free(Klad), position_klad[klad_pos][0], position_klad[klad_pos][1], position_klad[klad_pos][2]);
	}
	
	for(new i, fam; i < sizeof(FKV_Data); i++)
	{
		fam = FKV_Data[i][kvFamilyId]; 
		
		if(!fam) continue;
		
		FKV_Data[i][kvNalog] += 25000;
		
		if(FKV_Data[i][kvNalog] >= 1200000)
		{
			foreach(Player, playerId)
			{
				if(FP_Data[playerId][F_FAMILY_SPAWN_DATA] == i && !FP_Data[playerId][F_FAMILY_SPAWN_TYPE])
				{
					FP_Data[playerId][F_FAMILY_SPAWN_DATA] = -1;
				}
			}
			
			SendFamilyMessage(FKV_Data[i][kvFamilyId], !"[Семья (Новости)]:{FFFFFF} семейная квартира была продана государству за неоплату!");
			
			UpdateFamilyData(FKV_Data[i][kvFamilyId], "`spawn_type` = %d, `spawn_data` = -1, kv_id = -1", 0);
			
			FKV_Data[i][kvStatus] =
			FKV_Data[i][kvNalog] =
			FKV_Data[i][kvHealths] =
			FKV_Data[i][kvArmours] =
			FKV_Data[i][kvMoney] =
			FKV_Data[i][kvMonets] =
			FKV_Data[i][kvFamilyId] =
			FKV_Data[i][kvMonets] = 0;
			
			for(new q; q < sizeof(FamilyLevel); q++)
				FKV_Data[i][kvLevel][q] = false;
				
			SQL("UPDATE family_kv SET status = 0, family_id = 0, `family_level` = '', healths = 0, armours = 0, nalog = 0, money = 0, monets = 0 WHERE ID = %d", FKV_Data[i][kvSqlId]);
			
			UpdateFamilyKV(i);
		}
	}

	return 1;
}

stock AddCar(i)
{
    OwnableCar[i] = J_AddStaticVehicleEx(CarInfo[i][cModel],CarInfo[i][cPos][0],CarInfo[i][cPos][1],CarInfo[i][cPos][2],CarInfo[i][cPos][3],CarInfo[i][cColor_1],CarInfo[i][cColor_2],1000000,CarInfo[i][cInterior],CarInfo[i][cVirtualWorld], i);
	CarText[OwnableCar[i]] = CreateDynamic3DTextLabel("",-1,0,0,0.5,5.0,INVALID_PLAYER_ID,OwnableCar[i]);
	ModCar(OwnableCar[i]);
	return 1;
}

stock SuspectPlayer(playerid, id)
{
	if(!suspect) return 0;
	PlayCrimeReportForPlayer(playerid, playerid, id);
	return 1;
}

stock ShowSettingsServer(playerid)
{
	global_str = "";
	f(global_str, 500, "{FAAC58}[4]{FFFFFF} Античит на джетпак [%s]\n\
	{FAAC58}[5]{FFFFFF} Античит на получение оружия [%s]\n\
	{FAAC58}[-]{FFFFFF} Отсортировать личный транспорт\n\
	{FAAC58}[7]{FFFFFF} Разговоры в рации при получении розыска [%s]\n\
	{FAAC58}[-]{FFFFFF} X2 Донат [%s]\n\
	{FAAC58}[-]{FFFFFF} Подарки [%s]",
	Jetpackanticheat ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"),
	weaponhack ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"),
	suspect ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"),
	x2don ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"),
	GLS[22] ? ("{9ACD32}Вкл{FFFFFF}") : ("{B83434}Выкл{FFFFFF}"));
	SPD(playerid, 8799, DIALOG_STYLE_LIST, "Настройки сервера", global_str, "Принять", "Отмена");
	return 1;
}
stock RestartCar(vehid)
{
	new number = GetVehicleID(vehid);
	DestroyVehicleEx(vehid, true);
	AddCar(number);
	return 1;
}
public: DeletePickup(playerid) DestroyDynamicPickup(Adrenaline[playerid]);

stock GetProcent(Float:ints, Float:ints2) return floatround((ints/ints2)*100);
stock SetPlayerSpeed(playerid, speed, Float:zet)
{
	new Float:x, Float:y, Float:z, Float:speed2, Float:pp;
	GetPlayerVelocity(playerid, x, y, z);
	speed2 = floatsqroot(x*x + y*y + z*z);
	if(speed2 > 0)
	{
		pp = (speed / (speed2 * 250));
		SetPlayerVelocity(playerid, x*pp, y*pp, zet);
		return 1;
	}
	return 0;
}

stock with(playerid, slot, new_slot, j = 0, i = 0)
{
	new stack_slot = ItemsInfo[Inventory[playerid][0][j]][itemStack],
		stack_new_slot = Inventory[playerid][1][new_slot]+Inventory[playerid][1][slot];
	
	if(stack_new_slot >= stack_slot)
	{
		if(stack_new_slot == stack_slot) Inventory[playerid][1][new_slot] += Inventory[playerid][1][slot], Inventory[playerid][0][slot] = Inventory[playerid][1][slot] = 0;
		else Inventory[playerid][1][slot] = stack_new_slot - stack_slot, Inventory[playerid][1][new_slot] = stack_slot;

		InventSlotUpdate(playerid, j, slot), InventSlotUpdate(playerid, i, new_slot),
		PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);

		return true;
	}

	return true;
}

stock split(playerid, slot_id = -1)
{
    if(GetInvSet(playerid) >= PI[playerid][pInvCell]) 
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас нет места или ваш инвентарь заблокирован!");

	SCM(playerid, COLOR_YELLOW, !"Вы успешно разделили предмет.");
	PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);

	for(new i, slot; i < PI[playerid][pInvCell]; i++)
	{
	    if(Inventory[playerid][0][i]) continue;
	    Inventory[playerid][0][i] = Inventory[playerid][0][PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1 ? slot_id : PickInvent[playerid]];
	    Inventory[playerid][1][i] = floatround(Inventory[playerid][1][PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1 ? slot_id : PickInvent[playerid]]/2);
	    Inventory[playerid][1][PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1 ? slot_id : PickInvent[playerid]] = floatround(Inventory[playerid][1][PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1 ? slot_id : PickInvent[playerid]]/2)+Inventory[playerid][1][PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1 ? slot_id : PickInvent[playerid]] % 2;

		if(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)
			UpdateCellInventory(playerid, 0, 0, slot_id), UpdateCellInventory(playerid, 0, 0, i);

		else 
			slot = GetInvID(playerid, i, 1), InventSlotUpdate(playerid, PickInventSlot[playerid], PickInvent[playerid]), InventSlotUpdate(playerid, slot, i), ColorSlotReset(playerid);

		break;
	}
	return 1;
}

stock MAX_UP_BIZ(State)
{
	switch State do
	{
		case 1: return 9;
		case 23: return 100;
	}
	
	return false;
}

stock IS_UP_BIZ(State)
{
	switch State do 
	{
		case 1, 23: 
			return true;
		
		default: 
			return false;
	}
	
	return false;
}

stock ShowBizSettings(playerid, id)
{
	//zams, bb ? ("\n{FFFFFF}4. {A43232}Покинуть пост заместителя") : (""), Text);
	if(GetString(BizData[id][bZam], "none")) global_str = "{9ACD32}Назначить заместителя";
	else f(global_str, 100, "Заместитель: {FF6347}%s", BizData[id][bZam]);

	f(global_str, 400, "\
	{FFFFFF}1. %s\n\
	{FFFFFF}2. %s\n\
	{FFFFFF}3.{FF6347} Статистика за неделю\n\
	{FFFFFF}4. Реклама в телефоне/GPS:[{73B461} Заказать {FFFFFF}]\n\
	{FFFFFF}5. Изменить название бизнеса\n\
	{FFFFFF}6. Предметы недвижимости\n", 
	BizData[id][bLock] ? ("{A43232}Открыть бизнес") : ("{9ACD32}Закрыть бизнес"), 
	global_str);

	if(IS_UP_BIZ(BizData[id][bState]))
	{
		switch BizData[id][bState] do
		{
			case 1: mysql_string = "{FFFFFF}7. Купить улучшение \"Орёл и Решка\" {FFFF00}(%d из %d)";
			case 23: mysql_string = "{FFFFFF}7. Купить улучшение для нефтевышки {FFFF00}(%d из %d)";
		}
		
		format(mysql_string, 100, mysql_string, BizData[id][bUpgrade][0], MAX_UP_BIZ(BizData[id][bState]));	
		
		strcat(global_str, mysql_string);
	}
	
	return SPD(playerid, 6939, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
}


stock IsHisBiz(playerid, biz)
{
	if(GetString(BizData[biz][bZam], PN(playerid)) || GetString(BizData[biz][bOwner], PN(playerid))) return 1;
	return 0;
}

stock DeletePlayerAccessoryVeh(playerid, vehicleid, Id)
{
	new vehId = GetVehicleID(vehicleid);
	
	if(!CarInfo[vehId][cInvCell][Id])
		return false;
	
	if(GetInvSet(playerid) >= PI[playerid][pInvCell])
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
	
	PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
	AddItem(playerid, CarInfo[vehId][cInvCell][Id], 1, CarInfo[vehId][cInvCellColor][Id]);
	OtherInstallTun(vehicleid, CarInfo[vehId][cInvCell][Id], -1, 1, CarInfo[vehId][cInvCellColor][Id]);

	CarInfo[vehId][cInvCell][Id] = CarInfo[vehId][cInvCellColor][Id] = 0;
	SaveOwnableCar(vehId);

	return (!(PI[playerid][pCustomInterface][4] == 1 && GetPlayerLauncher(playerid) == 1) ? UpdateCarSlotTD(playerid, CarInvSlot[playerid][Id], Id, CarInvText[playerid][Id], CarInvLevel[playerid][Id]) : 1);
}

stock DeletePlayerAccessory(playerid, id)
{
    if(GetInvSet(playerid) >= PI[playerid][pInvCell]) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");
    PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
    
    AddItem(playerid, AksSlot[playerid][0][id], 1, AksSlot[playerid][3][id], AksSlot[playerid][4][id], AksSlot[playerid][1][id], AksSlot[playerid][2][id], 0);
	
	if(!PlayerModification[playerid]) 
	{
		if(GetPlayerLauncher(playerid) && ItemsInfo[AksSlot[playerid][0][id]][itemCustom] == 2) createPlayerAccessory(INVALID_PLAYER_ID, playerid, id, false); 
		else RemovePlayerAttachedObject(playerid, id);
	}
	
	if(addskate[playerid])
    {
		if(IsPlayerAttachedSlotUsedEx(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
        addskate[playerid] = false;
	}
	
	AksSlot[playerid][0][id] = 
	AksSlot[playerid][1][id] = 
	AksSlot[playerid][2][id] = 
	AksSlot[playerid][3][id] = 
    AksSlot[playerid][4][id] = 0;
	AksDel[playerid][id] = 0;
    UpdateInventoryAcessory(playerid, id);
	
    ApplyAnimationEx(playerid,"goggles","goggles_put_on",4.1,0,0,0,0,0,1);
    GetPlayerAura(playerid);
    return SavePlayerAccessory(playerid);
}

stock GetTrailer(playerid)
{
	for(new i; i < OWNABLETRAILERS; i++)
	{
		if(!IsValidTrailer(i)) continue;
	    if(GetString(TrailerInfo[i][tOwner], PN(playerid))) return i;
	}
	return -1;
}
cmd:trmenu(playerid)
{
	if(GetTrailer(playerid) == -1 && PI[playerid][pTrailerKey] == -1) return SCM(playerid, COLOR_ORANGE, !"Ошибка: {FFFFFF}У Вас нет трейлера!");
	new pric[15];
	new ID = PI[playerid][pTrailerKey];
	if(TrailerVeh[playerid] != INVALID_VEHICLE_ID)
	{
	    if(IsTrailerAttachedToVehicle(TrailerVeh[playerid])) pric = "Припарковать";
		else pric = "Прицепить";
	}
	new trnal[50];
    if(TrailerInfo[ID][tLocks]) trnal = "{9ACD32}Открыть {FFFFFF}дверь";
    else trnal = "{FF6347}Закрыть {FFFFFF}дверь";
    if(!TrailerInfo[ID][tParked]) trnal = "{FFFFFF}Отцепить трейлер";
	if(TrailerInfo[ID][tParked] && !IsTrailerAttachedToVehicle(TrailerInfo[ID][tIDcar])) pric = "Прицепить";
	if(TrailerInfo[ID][tObj] == INVALID_STREAMER_ID && TrailerInfo[ID][tObjPark] == INVALID_STREAMER_ID) pric = "Прицепить";
	f(global_str, 259, "%s трейлер\n\
	%s\n\
	Продать трейлер диллеру\n\
	Продать трейлер игроку\n\
	{FAAC58}Найти трейлер\n\
	{FFFFFF}Оплатить налоги (сумма: %d$ / 48000$)", pric, trnal, TrailerInfo[ID][tNalog]);
	SPD(playerid, 4343, DIALOG_STYLE_LIST, !"{FAAC58}Трейлер Меню", global_str, !"Выбрать", !"Закрыть");
	return true;
}

stock TrailerInstall(playerid)
{
	if(GetTrailer(playerid) == -1)
	{
		TrailerInfo[OWNABLETRAILERS][tID] = OWNABLETRAILERS;
		SetString(TrailerInfo[OWNABLETRAILERS][tOwner], PN(playerid));
		PI[playerid][pTrailerKey] = OWNABLETRAILERS;
		TrailerInfo[OWNABLETRAILERS][tType] = PI[playerid][pTrailer];
		PI[playerid][pTrailer] = 0;
		f(global_str, 400, "INSERT INTO `trailers` (`ID`,`Owner`, `Type`) VALUES ('%d','%s','%d')",
		TrailerInfo[OWNABLETRAILERS][tID],
		PN(playerid),
		TrailerInfo[OWNABLETRAILERS][tType]);
		mysql_tquery(mysql, global_str);
		OWNABLETRAILERS ++;
	}
	if(InventoryOpen{playerid}) HideInvent(playerid);
	StartBlack(playerid, 1);
	TrailerTime{playerid} = 40;
    return 1;
}

stock StartBlack(playerid, type)
{
    DestroyPlayerTD(playerid, TrTD[playerid]);
	TrTD[playerid] = CreatePlayerTextDraw(playerid, 1034.000488, -31.685209, "usebox");
	PlayerTextDrawLetterSize(playerid, TrTD[playerid], 0.000000, 57.200016);
	PlayerTextDrawTextSize(playerid, TrTD[playerid], -11.000041, 0.000000);
	PlayerTextDrawAlignment(playerid, TrTD[playerid], 1);
	PlayerTextDrawColor(playerid, TrTD[playerid], 255);
	PlayerTextDrawUseBox(playerid, TrTD[playerid], true);
	PlayerTextDrawBoxColor(playerid, TrTD[playerid], 255);
	PlayerTextDrawSetShadow(playerid, TrTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TrTD[playerid], 8);
	PlayerTextDrawBackgroundColor(playerid, TrTD[playerid], 255);
	PlayerTextDrawFont(playerid, TrTD[playerid], 0);
	TDColor[playerid] = 0;
	TDTimer[playerid] = CallTimeOutFunction("TimerTD", 3, 1, "dd", playerid, type);
}
public: TimerTD(playerid, type)
{
	if(type == 1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
	     	if(TrailerInfo[GetTrailer(playerid)][tObj] == INVALID_STREAMER_ID)
			{
			    SCM(playerid, COLOR_RED, !"( Оповощение ){FFFFFF}Вы потеряли свой трейлер, он был эвакуирован работниками салона трейлеров.");
				SCM(playerid, COLOR_RED, !"( Оповощение ){FFFFFF}Забрать его можно там же.");
				TrailerInfo[GetTrailer(playerid)][tShtraf] = 5000000;
				DestroyPlayerTD(playerid, TrTD[playerid]);
		        KillTimer(TDTimer[playerid]);
		        SetPVarInt(playerid, "dells", 0);
				return 1;
			}
		}
	    if(Int_GetPlayerData(playerid, "dells") == 1)
	    {
	        TDColor[playerid]--;
		    PlayerTextDrawBoxColor(playerid, TrTD[playerid], TDColor[playerid]);
		    ShowPlayerTD(playerid, TrTD[playerid]);
		    if(!TDColor[playerid])
		    {
		        DestroyPlayerTD(playerid, TrTD[playerid]);
		        KillTimer(TDTimer[playerid]);
		        SetPVarInt(playerid, "dells", 0);
			}
			return 1;
		}
	    TDColor[playerid]++;
	    PlayerTextDrawBoxColor(playerid, TrTD[playerid], TDColor[playerid]);
	    ShowPlayerTD(playerid, TrTD[playerid]);
	    if(TDColor[playerid] == 255) {
			new i = PI[playerid][pTrailerKey];
			new Float:tx;
			switch(TrailerInfo[i][tType])
			{
			    case 1: tx = 0.3;
			    case 2: tx = 1.6;
			    case 3: tx = 2;
			}
			TrailerInfo[i][tObj] = CreateDynamicObject(GetObjectTrailer(TrailerInfo[i][tType]), 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000);
			TrailerInfo[i][tIDcar] = J_AddStaticVehicleEx(607,-2139.5718,-2463.2014,30.6250,319.8435,1,1);
			SetVehiclePos(GetPlayerVehicleID(playerid), -2136.3281,-2459.3721+1,30.2695);
			SetVehicleZAngle(GetPlayerVehicleID(playerid),321.0650);
			AttachDynamicObjectToVehicle(TrailerInfo[i][tObj], TrailerInfo[i][tIDcar], -0.227439, -1.792068-tx, -1.119750+0.1, 0.000000, 0.000000, -182.568710);
		    DisableRemoteVehicleCollisions(TrailerInfo[i][tIDcar], 1);
		    LinkVehicleToInterior(TrailerInfo[i][tIDcar],100);
		    TrailerVeh[playerid] = GetPlayerVehicleID(playerid);
		    CallTimeOutFunction("AttachTR", 300, 0, "dd", TrailerVeh[playerid],TrailerInfo[i][tIDcar]);
		    SCM(playerid, COLOR_WHITE, !"Вы забрали Ваш трейлер (меню трейлера: {FAAC58}/trmenu{FFFFFF})");
      		SCM(playerid, COLOR_ORANGE, !"[ Подсказка ] {FFFFFF}Обязательно припаркуйте трейлер через меню! Иначе прийдется снова забирать его у нас, оплатив штраф.");
			SetPVarInt(playerid, "dells", 1);
			Streamer_Update(playerid);
		}
	}
	else
	{
	    if(!IsPlayerInAnyVehicle(playerid))
		{
	     	if(TrailerInfo[GetTrailer(playerid)][tObj] == INVALID_STREAMER_ID)
			{
				DestroyPlayerTD(playerid, TrTD[playerid]);
		        KillTimer(TDTimer[playerid]);
		        SetPVarInt(playerid, "dells", 0);
				return 1;
			}
		}
	    if(Int_GetPlayerData(playerid, "dells") == 1)
	    {
	        TDColor[playerid]--;
		    PlayerTextDrawBoxColor(playerid, TrTD[playerid], TDColor[playerid]);
		    ShowPlayerTD(playerid, TrTD[playerid]);
		    if(!TDColor[playerid])
		    {
		        DestroyPlayerTD(playerid, TrTD[playerid]);
		        KillTimer(TDTimer[playerid]);
		        SetPVarInt(playerid, "dells", 0);
			}
			return 1;
		}
	    TDColor[playerid]++;
	    PlayerTextDrawBoxColor(playerid, TrTD[playerid], TDColor[playerid]);
	    ShowPlayerTD(playerid, TrTD[playerid]);
	    if(TDColor[playerid] == 255) {
			new i = GetTrailer(playerid);
			new Float:X, Float:Y, Float:Z, Float:A;
			GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
			TrailerVeh[playerid] = GetPlayerVehicleID(playerid);
			DestroyDynamicObject(TrailerInfo[i][tObjPark]);
			DestroyDynamicPickup(TrailerInfo[i][tPickup]);
			DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
			TrailerInfo[i][tParked] = 0;
			TrailerInfo[i][tObjPark] = INVALID_STREAMER_ID;
			TrailerInfo[i][tPos_X] = 0;
			TrailerInfo[i][tPos_Y] = 0;
			TrailerInfo[i][tPos_Z] = 0;
			TrailerInfo[i][tPos_rX] = 0;
			TrailerInfo[i][tPos_rY] = 0;
			new Float:tx;
			switch(TrailerInfo[i][tType])
			{
			    case 1: tx = 0.3;
			    case 2: tx = 1.6;
			    case 3: tx = 2;
			}
			TrailerInfo[i][tPos_rZ] = 0;
			TrailerInfo[i][tPickup] = INVALID_STREAMER_ID;
			TrailerInfo[i][tObj] = CreateDynamicObject(GetObjectTrailer(TrailerInfo[i][tType]), 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000);
			GetCoordBonnetVehicle(TrailerVeh[playerid], X, Y, Z, -5.0);
			TrailerInfo[i][tIDcar] = J_AddStaticVehicleEx(607,X,Y,Z,A,1,1);
			AttachDynamicObjectToVehicle(TrailerInfo[i][tObj], TrailerInfo[i][tIDcar], -0.227439, -1.792068-tx, -1.119750+0.2, 0.000000, 0.000000, -182.568710);
		    DisableRemoteVehicleCollisions(TrailerInfo[i][tIDcar], 1);
		    LinkVehicleToInterior(TrailerInfo[i][tIDcar],100);
		    CallTimeOutFunction("AttachTR", 900, 0, "dd", TrailerVeh[playerid],TrailerInfo[i][tIDcar]);
		    SaveTrailer(i);
		    SCM(playerid, COLOR_WHITE, !"Вы прицепили трейлер.");
      		SCM(playerid, COLOR_ORANGE, !"[ Подсказка ] {FFFFFF}Не забудьте припарковать Ваш трейлер, иначе его эвакуируют в салон трейлеров и прийдется платить штраф.");
            SetPVarInt(playerid, "dells", 1);
            Streamer_Update(playerid);
		}
	}
	return 1;
}
public: AttachTR(vehicleid, vehicleid2) AttachTrailerToVehicle(vehicleid2,vehicleid);
stock LoadTrailers()
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `trailers`");
    for(new i; i < (OWNABLETRAILERS = cache_num_rows()); i++)
    {
		cache_get_value_name_int(i, "ID", TrailerInfo[i][tID]);
        cache_get_value_name(i, "Owner", TrailerInfo[i][tOwner], 24);
		cache_get_value_name_float(i, "Pos_X", TrailerInfo[i][tPos_X]);
		cache_get_value_name_float(i, "Pos_Y", TrailerInfo[i][tPos_Y]);
		cache_get_value_name_float(i, "Pos_Z", TrailerInfo[i][tPos_Z]);
		cache_get_value_name_float(i, "Pos_rX", TrailerInfo[i][tPos_rX]);
		cache_get_value_name_float(i, "Pos_rY", TrailerInfo[i][tPos_rY]);
		cache_get_value_name_float(i, "Pos_rZ", TrailerInfo[i][tPos_rZ]);
		cache_get_value_name_int(i, "Lock", TrailerInfo[i][tLocks]);
		cache_get_value_name_int(i, "Shtraf", TrailerInfo[i][tShtraf]);
		cache_get_value_name_int(i, "Parked", TrailerInfo[i][tParked]);
		cache_get_value_name_int(i, "Nalog", TrailerInfo[i][tNalog]);
		cache_get_value_name_int(i, "Type", TrailerInfo[i][tType]);
		CreateTrailer(i);
    }
    return cache_delete(result);
}
stock SaveTrailer(id)
{
	global_str = "";
	f(global_str, 600, "UPDATE `trailers` SET `Owner` = '%s', `Pos_X` = '%.4f', `Pos_Y` = '%.4f', `Pos_Z` = '%.4f', `Pos_rX` = '%.4f', `Pos_rY` = '%.4f', `Pos_rZ` = '%.4f', `Lock` = '%d', `Shtraf` = '%d', `Parked` = '%d', `Nalog` = '%d' WHERE `ID` = '%i'",
    TrailerInfo[id][tOwner],
    TrailerInfo[id][tPos_X],
    TrailerInfo[id][tPos_Y],
    TrailerInfo[id][tPos_Z],
    TrailerInfo[id][tPos_rX],
    TrailerInfo[id][tPos_rY],
    TrailerInfo[id][tPos_rZ],
    TrailerInfo[id][tLocks],
    TrailerInfo[id][tShtraf],
    TrailerInfo[id][tParked],
    TrailerInfo[id][tNalog],
	TrailerInfo[id][tID]);
    mysql_tquery(mysql, global_str);
    return 1;
}
stock UpdateTrailer(id)
{
	f(global_str, 300, "{FAAC58}Трейлер {FFFFFF}№%d\n{FAAC58}Владелец: {FFFFFF}%s\n{FAAC58}Дверь %s\n\n{FAAC58}[ {FFFFFF}ALT{FAAC58} ]", id, TrailerInfo[id][tOwner], TrailerInfo[id][tLocks] ? ("{FF6347}закрыта") : ("{9ACD32}открыта"));
	UpdateDynamic3DTextLabelText(TrailerInfo[id][tLabel], -1, global_str);
	return 1;
}
stock CreateTrailer(i)
{
	if(GetString(TrailerInfo[i][tOwner], "The State")) return 0;
	new Float:X, Float:Y, Float:Z, Float:fX, Float:fY, Float:fZ;
	X = TrailerInfo[i][tPos_X];
	Y = TrailerInfo[i][tPos_Y];
	Z = TrailerInfo[i][tPos_Z];
	fX = TrailerInfo[i][tPos_rX];
	fY = TrailerInfo[i][tPos_rY];
	fZ = TrailerInfo[i][tPos_rZ];
	if(X == 0 && Y == 0 && Z == 0) return 0;
	if(TrailerInfo[i][tObj] != INVALID_STREAMER_ID) DestroyDynamicObject(TrailerInfo[i][tObj]);
	new tt, Float:tt2;
	switch(TrailerInfo[i][tType])
	{
	    case 1: tt2 = 0.1;
	    case 2:
	    {
	        tt = 2;
			tt2 = 0.3;
		}
	    case 3:
	    {
			tt = 14;
			tt2 = 0.48;
		}
	}
    TrailerInfo[i][tObj] = INVALID_STREAMER_ID;
	TrailerInfo[i][tIDcar] = INVALID_VEHICLE_ID;
	TrailerInfo[i][tObjPark] = CreateDynamicObject(GetObjectTrailer(TrailerInfo[i][tType]), X, Y, Z, fX, fY, fZ);
	GetXYInFrontOfObject(TrailerInfo[i][tObjPark], X, Y, fZ+109+tt, 1.6+tt2);
    TrailerInfo[i][tLabel] = CreateDynamic3DTextLabel("-", -1, X, Y, Z+1.1, 7.0);
    TrailerInfo[i][tPickup] = CreateDynamicPickup(19523, 1, X,Y,Z+1.1, -1);
    UpdateTrailer(i);
	return 1;
}
stock EnterTrailer(playerid, id, type)
{
	switch(TrailerInfo[id][tType])
	{
	    case 1:
	    {
	        if(type == 0) UpdatePlayerPos(playerid, 1334.1860,1261.1288,1501.0850);
	        else SetSpawnInfoEx(playerid, GetSkinOfPlayer(playerid), 1334.1860,1261.1288,1501.0850, 90.8997);
			SetPlayerFacingAngle(playerid,90.8997);
			SetPlayerInterior(playerid, id+20);
			SetPlayerVirtualWorld(playerid, id+20);
			TrailerEnter[playerid] = id;
		}
		case 2:
	    {
	        if(type == 0) UpdatePlayerPos(playerid, 1313.6605,1262.3265,1501.0850);
	        else SetSpawnInfoEx(playerid, GetSkinOfPlayer(playerid), 1313.6605,1262.3265,1501.0850, 88.7765);
			SetPlayerFacingAngle(playerid,88.7765);
			SetPlayerInterior(playerid, id+20);
			SetPlayerVirtualWorld(playerid, id+20);
			TrailerEnter[playerid] = id;
		}
		case 3:
	    {
	        if(type == 0) UpdatePlayerPos(playerid, 1290.3165,1260.6007,1501.4446);
	        else SetSpawnInfoEx(playerid, GetSkinOfPlayer(playerid), 1290.3165,1260.6007,1501.4446, 86.2930);
			SetPlayerFacingAngle(playerid,86.2930);
			SetPlayerInterior(playerid, id+20);
			SetPlayerVirtualWorld(playerid, id+20);
			TrailerEnter[playerid] = id;
		}
	}
	return 1;
}
stock GetVehicleRot(vehicleid,&Float:rx,&Float:ry,&Float:rz)
{
	new Float:qw,Float:qx,Float:qy,Float:qz;
	GetVehicleRotationQuat(vehicleid,qw,qx,qy,qz);
	rx = asin(2*qy*qz-2*qx*qw);
	ry = -atan2(qx*qz+qy*qw,0.5-qx*qx-qy*qy);
	rz = -atan2(qx*qy+qz*qw,0.5-qx*qx-qz*qz);
}
/*stock GetVehicleRot(vehicleid,&Float:x,&Float:y,&Float:z)
{
    new Float:quat_w,Float:quat_x,Float:quat_y,Float:quat_z;
    GetVehicleRotationQuat(vehicleid,quat_w,quat_x,quat_y,quat_z);
    x = atan2(2*((quat_x*quat_y)+(quat_w+quat_z)),(quat_w*quat_w)+(quat_x*quat_x)-(quat_y*quat_y)-(quat_z*quat_z));
    y = atan2(2*((quat_y*quat_z)+(quat_w*quat_x)),(quat_w*quat_w)-(quat_x*quat_x)-(quat_y*quat_y)+(quat_z*quat_z));
    z = asin(-2*((quat_x*quat_z)+(quat_w*quat_y)));
    return 1;
}*/
stock IsPlayerInFbArea(playerid)
{
    if(IsPlayerInCube(playerid, 222.65625,2941.40625,-2777.34375,-925.78125) ||
	IsPlayerInCube(playerid, 46.875,281.25,-1898.4375,-1417.96875) ||
	IsPlayerInCube(playerid, -1816.40625,-1042.96875,-708.984375,521.484375) ||
	IsPlayerInCube(playerid, 568.359375,849.609375,-691.40625,-404.296875) ||
	IsPlayerInCube(playerid, 1177.734375,1453.125,99.609375,486.328125) ||
	IsPlayerInCube(playerid, 859.375,2945.3125,859.375,2851.5625) ||
	IsPlayerInCube(playerid, 1343.75,2710.9375,593.75,851.5625) ||
	IsPlayerInCube(playerid, -2992.1875,-1906.25,-507.8125,2117.1875) ||
	IsPlayerInCube(playerid, -1992.1875,-1031.25,-320.3125,1578.125) ||
	IsPlayerInCube(playerid, -1742.1875,-976.5625,-773.4375,-234.375) ||
	IsPlayerInCube(playerid, -325.1953125,-155.2734375,-1429.6875,-1309.5703125) ||
	IsPlayerInCube(playerid, -386.71875,169.921875,925.78125,1330.078125)) return 1;
	return 0;
}
stock IsPlayerInCube(playerid,Float:min_x,Float:max_x,Float:min_y,Float:max_y)
{
    new Float:xxp,Float:yyp,Float:zzp;
    GetPlayerPos(playerid, xxp, yyp, zzp);
    if((xxp <= max_x && xxp >= min_x) && (yyp <= max_y && yyp >= min_y)) return 1;
    return 0;
}

stock GetDynamicPickupPos(pickupid, &Float:x, &Float:y, &Float:z)
{
	if(!IsValidDynamicPickup(pickupid)) return 1;
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_X, x);
    Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_Y, y);
    return Streamer_GetFloatData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_Z, z);
}

stock IsValidTrailer(id)
{
    if(id < OWNABLETRAILERS && id > 0 && !GetString(TrailerInfo[id][tOwner], "The State")) return 1;
	return 0;
}
cmd:trremove(playerid, params[])
{
	new i;
	if(sscanf(params, "d", i)) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Используйте: /trremove [№]");
	if(!IsValidTrailer(i)) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Такого трейлера не существует!");
	if(!TrailerInfo[i][tParked]) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Трейлер не припаркован!");
	DestroyDynamicObject(TrailerInfo[i][tObjPark]);
    DestroyDynamicPickup(TrailerInfo[i][tPickup]);
    DestroyDynamic3DTextLabel(TrailerInfo[i][tLabel]);
    new id = GetPlayerID(TrailerInfo[i][tOwner]);
    SetString(TrailerInfo[i][tOwner], "The State");
    SaveTrailer(i);
    if(id != INVALID_PLAYER_ID) SCM(playerid, COLOR_RED, !"( Оповещение ){FFFFFF}Ваш трейлер был эвакуирован работниками салона трейлеров.");
    return 1;
}
stock CheckPlayers(trailerid)
{
	foreach(Player, playerid)
	{
	    if(TrailerEnter[playerid] == trailerid)
	    {
	        new Float:X, Float:Y, Float:Z, Float:fZ;
	        GetVehicleZAngle(TrailerInfo[trailerid][tIDcar], fZ);
	        GetVehiclePos(TrailerInfo[trailerid][tIDcar], X, Y, Z);
	        new tt, Float:tt2;
			switch(TrailerInfo[trailerid][tType])
			{
			    case 2:
			    {
			        tt = 2;
					tt2 = 0.2;
				}
			    case 3:
			    {
					tt = 13;
					tt2 = 0.45;
				}
			}
	        GetXYInFrontOfVehicle(TrailerInfo[trailerid][tIDcar], X, Y, fZ+109+tt, 1.6+tt2);
			UpdatePlayerPos(playerid, X, Y, Z+0.2);
		}
	}
}

stock GetObjectTrailer(type)
{
    switch(type)
	{
	    case 1: return 3171;
	    case 2: return 3168;
	    case 3: return 3172;
	}
	return -1;
}

cmd:mpwin(playerid, params[])
{
	if(PI[playerid][pAdmin] < 5) return 1;
	if(sscanf(params, "ud", params[0], params[1])) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Используйте: /mpwin [ID] [donate 1-5000]");
	if(params[1] < 1 || params[1] > 5000) return SCM(playerid, COLOR_RED, "[Информация] {FFFFFF}Используйте: /mpwin [ID] [donate 1-5000]");
	f(global_str, 150 , "Игрок %s выиграл в мероприятии и получает %d АЗ-монет. Огласил победителя: %s[%d].", PN(params[0]), params[1], PN(playerid), playerid);
	SCMALL(COLOR_YELLOW, global_str);
	GiveDonate(params[0], params[1]);
	return 1;
}

stock IsAAks(itemid)
{
	if(ItemsInfo[itemid][itemAccesotySlot] != -1) return 1;
	return 0;
}

cmd:modellimit(playerid)
	return SPD(playerid, 3728, DIALOG_STYLE_LIST, "{B83434}Колличество доступных тачек", "{FFFFFF}Бюджетный класс\nСредний класс\nЭлитный класс\nЛюкс класс\nНелегальный класс", "Выбрать", "Закрыть");

cmd:modellimitadd(playerid, data[])
{
	extract data -> new type, count; else 
		return SCM(playerid, -1, !"/modellimitadd [0 - до 180000; 1 - до 1 млн; 2 - остальные; 3 - особый транспорт 4 - премиум; 5 - кастомные] [количество]"),
		SCM(playerid, -1, "Если указать ноль то все лимиты обнулятся.");

	if(!(0 <= type <= 5) or !(0 <= count <= 20))
		return false;

	switch type do
	{
		case 5: type = 4;
		case 4: type = 3;
		case 3: type = 5;
		case 0,1: type = 1;
	}

	for(new i; i < MAX_SELLCARS; i++)
	{
		if(!(SellInfo[i][scType] == type) or !SellInfo[i][scModel]) continue;

		SellInfo[i][scCount] = count;
	}
	return true;
}
/*cmd:addmodellimit(playerid)
{
	if(!CheckAdm(playerid, 8)) return false;
	return SPD(playerid, 3731, DIALOG_STYLE_LIST, "{B83434}Выберите тип машины", "{FFFFFF}Бюджетный класс\nСредний класс\nЭлитный класс\nЛюкс класс\nНелегальный класс", "Выбрать", "Закрыть");
}*/

stock AddSellCarSQL(id)
{
	global_str = "";
    f(global_str, 700 , "INSERT INTO `modellimit` (`Model`, `Count`, `PosX`, `PosY`, `PosZ`, `PosA`, `Type`) VALUES ('%d', '%d', '%.2f','%.2f','%.2f','%.2f','%d')",
	SellInfo[id][scModel],
	SellInfo[id][scCount],
	SellInfo[id][sc_PosX],
	SellInfo[id][sc_PosY],
	SellInfo[id][sc_PosZ],
	SellInfo[id][sc_PosA],
	SellInfo[id][scType]);
	mysql_tquery(mysql, global_str);
	return 1;
}
stock SaveSellCar(id)
{
	f(global_str, 200, "UPDATE `modellimit` SET `Count` = '%d' WHERE `Model` = '%i'",SellInfo[id][scCount],SellInfo[id][scModel]);
    mysql_tquery(mysql, global_str);
    return 1;
}
stock LoadModellimit()
{
   	new Cache:result = mysql_query(mysql, "SELECT * FROM `modellimit`");
   	for(new idx = 0; idx < (SELLCARS = cache_num_rows()); idx++)
   	{
		cache_get_value_name_int(idx, "Model", SellInfo[idx][scModel]);
		cache_get_value_name_int(idx, "Type", SellInfo[idx][scType]);
		cache_get_value_name_float(idx, "PosX", SellInfo[idx][sc_PosX]);
		cache_get_value_name_float(idx, "PosY", SellInfo[idx][sc_PosY]);
		cache_get_value_name_float(idx, "PosZ", SellInfo[idx][sc_PosZ]);
		cache_get_value_name_float(idx, "PosA", SellInfo[idx][sc_PosA]);
		cache_get_value_name_int(idx, "Count", SellInfo[idx][scCount]);
   	}
    return cache_delete(result);
}
stock SetNull(model)
{
	for(new i; i < SELLCARS; i++)
	{
	    if(SellInfo[i][scModel] == model) {
			SellInfo[i][scSpawn] = false;
			SellInfo[i][scCount] --;
			SaveSellCar(i);
		}
	}
}
stock IsASert(id)
{
    if(TextFind(ItemsInfo[id][itemName], "Сертификат")) return 1;
	return 0;
}

stock IsAChange(biz)
{
	switch BizData[biz][bState] do
	{
	    case 7,1,B_BUY,0,13,B_GAS,B_RENTCAR,26,24: return true;
	}
	return false;
}

stock GetMaxCost(Bstate)
{
    switch Bstate do
    {
		case 26: return 30000;
		case B_BAR: return 10000;
		case B_BUY: return 30000;
		case 13: return 30000;
		case B_RENTCAR: return 50000;
		case B_GAS: return 30000;
		case B_CL_BELL: return 15000;
		case 0: return 30000;
		case 24: return 999999;
    }
    return 0;
}
stock GetNameItem(Bstate, bitem)
{
	static Name[32]; Name[0] = EOS;
	switch Bstate do
	{
		case 0:
		{
		    if (bitem == 0) Name = "Кастет";
	        else if(bitem == 1) Name = "Бита";
	        else if(bitem == 2) Name = "Катана";
	        else if(bitem == 3) Name = "Парашют";
	        else if(bitem == 4) Name = "Дымовая шашка";
	        else if(bitem == 5) Name = "Desert Eagle";
	        else if(bitem == 6) Name = "Shotgun";
	        else if(bitem == 7) Name = "MP5";
	        else if(bitem == 8) Name = "AK-47";
	        else if(bitem == 9) Name = "M4";
	        else if(bitem == 10) Name = "Country Rifle";
		}
		case 1:
	    {
			if (bitem == 0) Name = "Спранк";
	        else if(bitem == 1) Name = "Виски";
	        else if(bitem == 2) Name = "Пиво";
	        else if(bitem == 3) Name = "Пицца";
	        else if(bitem == 4) Name = "Ланч";
		}
	    case 2:
	    {
	        if (bitem == 0) Name = "Чипсы";
	        else if(bitem == 1) Name = "Спранк";
	        else if(bitem == 2) Name = "Пиво";
	        else if(bitem == 3) Name = "Телефонная книга";
	        else if(bitem == 4) Name = "Скрепка";
	        else if(bitem == 5) Name = "Маска";
	        else if(bitem == 6) Name = "Радио";
	        else if(bitem == 7) Name = "Фотоаппарат";
	        else if(bitem == 8) Name = "Телефон Xiaomi Mi 8";
	        else if(bitem == 9) Name = "SIM-Карта";
	        else if(bitem == 10) Name = "Сигареты";
	        else if(bitem == 11) Name = "Зажигалка";
	        else if(bitem == 12) Name = "Удочка";
	        else if(bitem == 13) Name = "Черви";
	        else if(bitem == 14) Name = "Бронежилет";
	        else if(bitem == 15) Name = "Яд";
	        else if(bitem == 16) Name = "Аптечка";
	        else if(bitem == 17) Name = "Таблетки от наркозависимости";
	        else if(bitem == 18) Name = "Цветы";
		}
		case 5:
	    {
	        if (bitem == 0) Name = "Tropic";
	        else if(bitem == 1) Name = "Marquis";
	        else if(bitem == 2) Name = "Uranus";
	        else if(bitem == 3) Name = "Bullet";
	        else if(bitem == 4) Name = "Sultan";
	        else if(bitem == 5) Name = "Stretch";
	        else if(bitem == 6) Name = "Faggio";
	        else if(bitem == 7) Name = "Sparrow";
	        else if(bitem == 8) Name = "Maverick";
	        else if(bitem == 9) Name = "Для других автомобилей";
		}
		case 6:
	    {
			switch bitem do {	
				case 0: Name = "Лопата";
				case 1: Name = "Набор для починки";
				case 2: Name = "Канистра";
				case 3: Name = "Баллончик с краской";
				case 4: Name = "Бензопила";
				case 5: Name = "Дрова";
				case 6: Name = "Скрепка";
				case 7: Name = "Домкрат";
			}
		}
		case 7:
	    {
	        if (bitem == 0) Name = "Картофель-Фри";
	        else if(bitem == 1) Name = "Сэндвич";
	        else if(bitem == 2) Name = "Баскет";
	        else if(bitem == 3) Name = "Крылышки";
	        else if(bitem == 4) Name = "Салат";
	        else if(bitem == 5) Name = "Курица";
	        else if(bitem == 6) Name = "Комплексный Обед";
		}
		case 13: Name = !bitem ? "Хот-Дог":"Пицца";
		case 26:
		{
			switch bitem do
			{
				case 0: Name = "Рожь";
				case 1: Name = "Морковь";
				case 2: Name = "Картофель";
				case 3: Name = "Лён";
				case 4: Name = "Хлопок";
				case 5: Name = "Пшеница";
				case 6: Name = "Огурцы";
				case 7: Name = "Помидоры";
				case 8: Name = "Белый виноград";
				case 9: Name = "Чай";
				case 10: Name = "Пряные травы";
				case 11: Name = "Канабис";
				case 12: Name = "Кукуруза";
				case 13: Name = "Фиолетовый виноград";
				case 14: Name = "Лечебная трава";
				case 15: Name = "Подсолнух";
				case 16: Name = "Лопата";
				case 17: Name = "Грабли";
				case 18: Name = "Ведро";
			}
		}
		case 24:
		{
			if(!bitem)
				Name = "улучшение предмета";
			else
				Name = "ремонт одежды";
		}
	}
	return Name;
}

stock GetMaxItems(stated)
{
	switch stated do
	{
	    case B_BUY, 26: return 19;
	    case 0: return 11;
	    case 13: return 2;
		case 24: return 6;
	    case B_GAS: return 8;
	    case B_CL_BELL: return 7;
	    case B_RENTCAR: return 10;
	    case B_BAR: return 5;
	}
	return 0;
}

cmd:givemydonate(playerid, params[])
{
   	extract params -> new player:id, money; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /givemydonate [id] [сумма]");

	if(playerid == id)
		return SCM(playerid,COLOR_GREY, !"Нельзя передавать AZ-coins самому себе");

	else  if(!(1 <= money <= PI[playerid][pVirMoney])) 
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У вас недостаточно AZ-coins.");
	
	else if(money > 1000000)
		return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя передавать больше 1000000 AZ-coins !");

	GiveDonate(playerid, -money);
	GiveDonate(id, money);

	SCMF(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы успешно передали %d доната, игроку %s[%d]!", money,PN(id), id);

	return SAMF(COLOR_VALIK, "[A] %s[%d] передал %d доната, игроку %s[%d]",PN(playerid), playerid, money, PN(id), id);
}

cmd:ungivedonate(playerid, params[])
{
   	extract params -> new player:targetid, money; else
		return SCM(playerid, COLOR_OLDRED, !"Используйте: /ungivedonate [targetid] [количество]");

	if(!ProxDetectorS(10.0, playerid, targetid))
		return SCM(playerid,COLOR_GREY, !"Вы далеко от игрока");

	else if(playerid == targetid)
		return SCM(playerid,COLOR_GREY, !"Нельзя забрать AZ-coins у самого себя");

	else  if(!(1 <= money <= PI[targetid][pVirMoney])) 
		return SCM(playerid, COLOR_RED,!"[Ошибка]{FFFFFF} У игрока недостаточно AZ-coins.");
	
	else if(money > 50000)
		return SCM(playerid,COLOR_RED, !"[Ошибка]{FFFFFF} Нельзя забрать больше 50000 AZ-coins за раз!");

	GiveDonate(targetid, -money);
	GiveDonate(playerid, money);

	SCMF(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Вы успешно забрали %d доната у игрока %s[%d]!", money, PN(targetid), targetid);

	return SAMF(COLOR_VALIK, "[A] %s[%d] забрал %d доната у игрока %s[%d]", PN(playerid), playerid, money, PN(targetid), targetid);
}

new const captchatop_type[][] = {"Undef", "Дома", "Бизнесы", "Свободный ввод"};

public: @captchatop(playerid)
{
	global_str = "{FFFF00}№записи | Ник (uID)\t{FFFF00}Тип\t{FFFF00}Капча | timeMS\t{FFFF00}~= Время записи в память";

	for(new i, intData[4]; i < cache_num_rows(); i++)
	{
		cache_get_value_index_int(i, 0, intData[0]);
		cache_get_value_name(i, "captcha", SQL_GET_ROW_STR[0]);
		cache_get_value_index_int(i, 2, intData[1]);
		cache_get_value_name(i, "data", SQL_GET_ROW_STR[1]);
		cache_get_value_name(i, "ownerName", SQL_GET_ROW_STR[2]);
		cache_get_value_index_int(i, 4, intData[2]);
		cache_get_value_index_int(i, 6, intData[3]);

		strcat(global_str, (str_f("\n#%d | {FFFF00}%s (%d)\t%s\t%s | {FFFF00}%.2f ms\t%s", intData[0], SQL_GET_ROW_STR[2], intData[2], captchatop_type[intData[3]], SQL_GET_ROW_STR[0], float(intData[1])/1000, SQL_GET_ROW_STR[1])));
	}

	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"»", !"«");
}

cmd:captchatop(playerid)
	return SPD(playerid, 9929, DIALOG_STYLE_LIST, !"Выберите какой формат", !"{D08D94}»{FFFFFF} Топ 30 за последний час\n{D08D94}»{FFFFFF} Топ 30 за день\n{D08D94}»{FFFFFF} Топ 30 за неделю\n{D08D94}»{FFFFFF} Топ 50 за месяц\n{D08D94}»{FFFFFF} Личный топ ( список вашего лучшего времени )", !"Выбрать", !"Отмена");

cmd:captcha(playerid)
	return CreateCaptcha_BOT(playerid, 3);

MoveContainerDoor(id)
{
	switch(id)
	{
	    case 0:
	        {
				MoveDynamicObject(gPremiumContDor[0], -1735.343383, 157.219314, 5.192698, 0.5, -0.000050, 540.000000, -139.899749);
 				MoveDynamicObject(gPremiumContDor[1], -1731.078857, 157.257598, 5.162696, 0.5, 0.000059, 0.000000, -37.400039);
	        }
		case 1:
		    {
  				MoveDynamicObject(gPremiumContDor[2], -1724.800659, 186.824172, 5.178198, 0.5, -0.000051, 540.000000, 45.100139);
				MoveDynamicObject(gPremiumContDor[3], -1720.311035, 186.730163, 5.178198, 0.5, 0.000059, 0.000000, -51.300193);
		    }
		case 2:
		    {
		        MoveDynamicObject(gPremiumContDor[4], -1735.381835, 189.348114, 5.192698, 0.5, -0.000051, 540.000000, 49.300167);
		        MoveDynamicObject(gPremiumContDor[5], -1730.947753, 189.430877, 5.192698, 0.5, 0.000059, 0.000000, -41.100231);
		    }
		case 3:
		    {
      			MoveDynamicObject(gPremiumContDor[6], -1741.556030, 192.010284, 5.178198, 0.5, -0.000051, 540.000000, 41.700172);
		        MoveDynamicObject(gPremiumContDor[7], -1737.169067, 191.948364, 5.178198, 0.5, 0.000059, 0.000000, -46.300163);
		    }
		case 4:
		    {
  				MoveDynamicObject(gPremiumContDor[8], -1724.801513, 154.121734, 5.178198, 0.5, -0.000051, 540.000000, 51.600170);
				MoveDynamicObject(gPremiumContDor[9], -1720.290771, 154.132751, 5.178198, 0.5, 0.000059, 0.000000, -49.100173);
		    }
  		case 5:
		    {
				MoveDynamicObject(gPremiumContDor[10], -1724.732666, 123.837814, 5.178197, 0.5, -0.000050, 540.000000, 38.500148);//, -0.000050, 540.000000, -139.899749, 5.00);
    			MoveDynamicObject(gPremiumContDor[11], -1720.449462, 123.952171, 5.178197, 0.5, 0.000059, 0.000000, -35.000194);
		    }
		case 6:
		    {
				MoveDynamicObject(gPremiumContDor[12], -1731.254150, 137.620819, 5.192698, 0.5, -0.000050, 540.000000, 28.800180);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[13], -1727.163330, 137.705215, 5.192698, 0.5, 0.000059, 0.000000, -27.600156);
		    }
  		case 7:
		    {
  				MoveDynamicObject(gPremiumContDor[14], -1741.670166, 139.482131, 5.178198, 0.5, -0.000051, 540.000000, 41.800144);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[15], -1737.295898, 139.538467, 5.178198, 0.5, 0.000059, 0.000000, -38.700160);
		    }
  		case 8:
		    {
				MoveDynamicObject(gPremiumContDor[16], -1735.316894, 121.345283, 5.192698, 0.5, -0.000050, 540.000000, 41.200130);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[17], -1730.946899, 121.304931, 5.192698, 0.5, 0.000059, 0.000000, -44.400180);
		    }
	 }
	return 1;
}
CloseContainerDoor(id)
{
	switch(id)
	{
	    case 0:
	        {
      			MoveDynamicObject(gPremiumContDor[0], -1733.967407, 156.626068, 5.192699, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[1], -1732.376587, 156.626068, 5.192699, 5.0, 0.000059, 0.000000, 89.999817);
	        }
		case 1:
		    {
   				MoveDynamicObject(gPremiumContDor[2], -1723.385864, 186.246567, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[3], -1721.795044, 186.246567, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 2:
		    {
  				MoveDynamicObject(gPremiumContDor[4], -1733.945435, 188.811066, 5.192699, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[5], -1732.354614, 188.811066, 5.192699, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 3:
		    {
  				MoveDynamicObject(gPremiumContDor[6], -1740.197998, 191.400772, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[7], -1738.607178, 191.400772, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 4:
		    {
  				MoveDynamicObject(gPremiumContDor[8], -1723.345703, 153.606674, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);
				MoveDynamicObject(gPremiumContDor[9], -1721.754883, 153.606674, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 5:
		    {
				MoveDynamicObject(gPremiumContDor[10], -1723.379028, 123.278084, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);//, -0.000050, 540.000000, -139.899749, 5.00);
    			MoveDynamicObject(gPremiumContDor[11], -1721.788208, 123.278084, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 6:
			{
				MoveDynamicObject(gPremiumContDor[12], -1729.997070, 137.012177, 5.192699, 5.0, -0.000052, 540.000000, -89.999847);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[13], -1728.406250, 137.012177, 5.192699, 5.0, 0.000059, 0.000000, 89.999817);
			}
		case 7:
		    {
  				MoveDynamicObject(gPremiumContDor[14], -1740.278564, 138.887177, 5.178199, 5.0, -0.000052, 540.000000, -89.999847);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[15], -1738.687744, 138.887177, 5.178199, 5.0, 0.000059, 0.000000, 89.999817);
		    }
		case 8:
		    {
				MoveDynamicObject(gPremiumContDor[16], -1733.967896, 120.745483, 5.192699, 5.0, -0.000052, 540.000000, -89.999847);//, -0.000050, 540.000000, -139.899749, 5.00);
				MoveDynamicObject(gPremiumContDor[17], -1732.377075, 120.745483, 5.192699, 5.0, 0.000059, 0.000000, 89.999817);
		    }
	 }
	return 1;
}
RandomPrize(id)
{
	//new id = id;
	global_str = "";
	static str[120]; new idprize,kolprize;
	for(new i; i < 6; i++)
	{
		idprize = random(101);
		if(RoulettePrizes[idprize][MaxValue] > 1) kolprize = random(RoulettePrizes[idprize][MaxValue]);
		else kolprize = 1;
		ContMas[id][i] = RoulettePrizes[idprize][PrizeID];
		ContainerInfo[id][cPrizeCol][i] = kolprize;
		f(str, sizeof(str), "{FFFFFF}-%s({E98E52}%d{FFFFFF})\n",ItemsInfo[RoulettePrizes[idprize][PrizeID]][itemName],kolprize);
		strcat(global_str,str);
	}
	SetString(ContainerInfo[id][cPrizes],global_str);
	return 1;
}
public: ProgressFerma(playerid)
{
	new value = 1;

	if(AksSlot[playerid][0][5] == 3529)
	{
		value = 2;
		if(IsPlayerAttachedSlotUsedEx(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
	}

	GameTextForPlayer(playerid, (str_f("%s + %i", Int_GetPlayerData(playerid, "ProgressFerma") == 595 ? "Linen" : "Cotton", value)), 0, 1);

	if(AksSlot[playerid][0][5] == 3529)
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);

	return AddItem(playerid, Int_GetPlayerData(playerid, !"ProgressFerma"), value), DeletePVar(playerid, !"ProgressFerma");
}

public: ProgressWaxta(playerid)
{
    TimerShaxta[playerid] = 0;

    for(new i, value = 1; i < MAX_MINE_OBJECT; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.2, MineInfo[i][minePosX], MineInfo[i][minePosY], MineInfo[i][minePosZ]))
        {
			if(AksSlot[playerid][0][5] == 3528)
			{
				value = 2;
				if(IsPlayerAttachedSlotUsedEx(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
			}

			GameTextForPlayer(playerid, (str_f("%s + %i", MineInfo[i][minePoroda] == 1 ? "Stone" : MineInfo[i][minePoroda] == 2 ? "Metal" : MineInfo[i][minePoroda] == 3 ? "Bronze" : MineInfo[i][minePoroda] == 4 ? "Silver" : "Gold", value)), 4200, 1);
			AddItem(playerid, 595 + MineInfo[i][minePoroda], value);

			if(AksSlot[playerid][0][5] == 3528)
				SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);

			MineInfo[i][mineStatus] = false;
		    DestroyDynamic3DTextLabel(MineInfo[i][mineLabel]);
		    DestroyDynamicObject(MineInfo[i][mineObject]);
		    PlayerPlaySound(playerid, 36400, 0.0, 0.0, 0.0);
		    MineInfo[i][mineTimer] = CallTimeOutFunction("@__MineProgressGrow", 180000, false, "i", i);
		    ClearAnimationsEx(playerid);
		    PlayerPlaySound(playerid, 36400, 0.0, 0.0, 0.0);
		}
	}
}

public: CheckHistoryName(playerid)
{
	static str[100];
	//
	new value = cache_num_rows();

	global_str = "";
	for(new i; i < value; i++)
	{
		cache_get_value_index(i, 1, str, 100);
		f(str, sizeof(str), "%s\n",str);
		strcat(global_str,str);
	}
	//
	SPD(playerid, 0,0, "История смены ника", value ? global_str:"{FFFFFF}Истории смены ника не обнаружено","Выход","");
	return 1;
}

stock ANL(const Name[], const MSG[]) //7514496
	SQL("INSERT INTO history (`Name`, `Date`, `msg`, `type`) VALUES ('%s', CURRENT_TIMESTAMP(), '%s', '0')", Name, MSG);

public: show_ANL(playerid) //FF6347 //ANL
{
	global_str = "{FF6347}";
	
	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_index(i, 0, SQL_GET_ROW_STR[0]);
		cache_get_value_index(i, 1, SQL_GET_ROW_STR[1]);
		
		format(global_str, 1536, "%s%s %s\n", global_str, SQL_GET_ROW_STR[0], SQL_GET_ROW_STR[1]);
	}
	
	if(strlen(global_str) < 10)
		global_str = !"{FFFFFF}Истории наказаний не обнаружено";
	
	return SPD(playerid, 0,0, !"История наказания", global_str, !"Выход", !"");
}

public: DeathRP(playerid, value)
{
	if(pTemp[playerid][tReturnDeath])
	{
		pTemp[playerid][tReturnDeath] = pTemp[playerid][tReturnDeath]-1;
		new timer = pTemp[playerid][tReturnDeath];
		switch(value)
		{
			case 0:
			{
				if(timer > 0)
				{
					f(global_str, 60 ,"~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%d SEC", timer);
					GameTextForPlayer(playerid, global_str, 500, 3);
				}
				else
				{
					SPD(playerid, 3766, DIALOG_STYLE_LIST, "Вы на грани смерти!","Сразу отправиться в больницу\nДождаться врачей ({9ACD32}40 000${FFFFFF})","Выбор","");
					pTemp[playerid][tReturnDeath] = 0;
				}
			}
			case 1:
			{
				if(timer > 0)
				{
					f(global_str, 60 ,"~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~DOCTORS WAITING: %d SEC", timer);
					GameTextForPlayer(playerid, global_str, 500, 3);
				}
				else
				{
					BackToBolka(playerid);
					pTemp[playerid][tReturnDeath] = 0;
				}
			}
		}
	}
	else KillTimer(DeathTimer[playerid]);
}
stock BackToBolka(playerid)
{
	if(!IsAArmy(playerid))
	{
		if(IsPlayerToKvadrat(playerid, -891.3302, -2950.0190, 2915.9917, 560.3257)) PI[playerid][pHospCity] = 1;
		else if(IsPlayerToKvadrat(playerid, -2929.6589, -2889.1660, -1326.9077, 1493.1770)) PI[playerid][pHospCity] = 3;
		else PI[playerid][pHospCity] = 2;
	}
	else
	{
		SetPlayerVirtualWorld(playerid, 1);
		SetPlayerInterior(playerid, 2);
	}
	if(PI[playerid][pHospital] > 0) PI[playerid][pHospital] --;
	PI[playerid][pHeal] = 1;
	PI[playerid][pHealTime] = 0;
	PlayerLie{playerid} = false;
	TogglePlayerControllable(playerid, true);
	PlayerSpawn(playerid);
	if(IsValidDynamic3DTextLabel(DeathText[playerid])) DestroyDynamic3DTextLabel(DeathText[playerid]);
	return Streamer_Update(playerid), true;
}
stock CreateDanceTD(playerid)
{
	DanceTD[playerid][6] = CreatePlayerTextDraw(playerid, 297.136658, 364.174530, "LD_BEAT:cring");
	PlayerTextDrawLetterSize(playerid, DanceTD[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, DanceTD[playerid][6], 45.915085, 49.583370);
	PlayerTextDrawAlignment(playerid, DanceTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, DanceTD[playerid][6], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, DanceTD[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, DanceTD[playerid][6], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, DanceTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, DanceTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, DanceTD[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, DanceTD[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, DanceTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, DanceTD[playerid][6], 0);

	DanceTD[playerid][5] = CreatePlayerTextDraw(playerid, 320.299957, 413.699860, Convert(Int_GetPlayerData(playerid, "TimerDance")));
	PlayerTextDrawLetterSize(playerid, DanceTD[playerid][5], 0.365833, 1.708889);
	PlayerTextDrawTextSize(playerid, DanceTD[playerid][5], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, DanceTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, DanceTD[playerid][5], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, DanceTD[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, DanceTD[playerid][5], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, DanceTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, DanceTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, DanceTD[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, DanceTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, DanceTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, DanceTD[playerid][5], 0);

	f(global_str, 50, "Score: %d", Int_GetPlayerData(playerid, "ScoreDance"));
	DanceTD[playerid][4] = CreatePlayerTextDraw(playerid, 320.299957, 347.200409, global_str);
	PlayerTextDrawLetterSize(playerid, DanceTD[playerid][4], 0.365833, 1.708889);
	PlayerTextDrawTextSize(playerid, DanceTD[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, DanceTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, DanceTD[playerid][4], 0xFFFFFFFFFFFFFFFF);
	PlayerTextDrawUseBox(playerid, DanceTD[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, DanceTD[playerid][4], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, DanceTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, DanceTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, DanceTD[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, DanceTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, DanceTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, DanceTD[playerid][4], 0);
	for(new i = 4; i < 6; i++) ShowPlayerTD(playerid, DanceTD[playerid][i]);
	return true;
}
public: SchoolDance(playerid)
{
	static str[3][32];
	str[0] = "LD_BEAT:left";
	str[1] = "LD_BEAT:up";
	str[2] = "LD_BEAT:down";
	for(new i; i < 7; i++) DestroyPlayerTD(playerid, DanceTD[playerid][i]);
	CreateDanceTD(playerid);
	for(new i; i < 7; i++)
	{
		if( i < 4)
		{
			DanceFloat[playerid][i] = 383.845581+(i*40.0)-2.50*DanceCount[playerid][i];
			DanceTD[playerid][i] = CreatePlayerTextDraw(playerid, DanceFloat[playerid][i], 380.450134, str[DanceKey[playerid][i]]);
			PlayerTextDrawLetterSize(playerid, DanceTD[playerid][i], 0.000000, 0.000000);
			PlayerTextDrawTextSize(playerid, DanceTD[playerid][i], 15.367477, 17.558315);
			PlayerTextDrawAlignment(playerid, DanceTD[playerid][i], 2);
			PlayerTextDrawColor(playerid, DanceTD[playerid][i], 0xFFFFFFFFFFFFFF18);
			PlayerTextDrawUseBox(playerid, DanceTD[playerid][i], 0);
			PlayerTextDrawBoxColor(playerid, DanceTD[playerid][i], 0xFFFFFFFF80808080);
			PlayerTextDrawSetShadow(playerid, DanceTD[playerid][i], 0);
			PlayerTextDrawSetOutline(playerid, DanceTD[playerid][i], 0);
			PlayerTextDrawBackgroundColor(playerid, DanceTD[playerid][i], 0x000000FF);
			PlayerTextDrawFont(playerid, DanceTD[playerid][i], 4);
			PlayerTextDrawSetProportional(playerid, DanceTD[playerid][i], 1);
			PlayerTextDrawSetSelectable(playerid, DanceTD[playerid][i], 0);
			if(DanceFloat[playerid][i] < 385.0) ShowPlayerTD(playerid, DanceTD[playerid][i]);
			if(DanceFloat[playerid][i] < 250.0) DestroyPlayerTD(playerid, DanceTD[playerid][i]);
			DanceCount[playerid][i]++;
		}
		if( i > 3) ShowPlayerTD(playerid, DanceTD[playerid][i]);
	}
	return 1;
}
public: CheckDance(playerid)
{
	 SetPVarInt(playerid, "TimerDance",Int_GetPlayerData(playerid, "TimerDance")-1);
	 if(!Int_GetPlayerData(playerid, "TimerDance")) return ResetDanceForPlayer(playerid);
	 for(new i; i < 4; i++) // on ce clik 310.0 //DanceCount[playerid]
	 {
		 if(DanceFloat[playerid][i] < 250.0)
		 {
			 DanceCount[playerid][i] = 0;
			 DanceFloat[playerid][i] = 383.845581+(i*40.0)-2.50*DanceCount[playerid][i];
			 DanceKey[playerid][i] = random(3);
		 }
	 }
	 if(UseDanceKey[playerid]) UseDanceKey[playerid] = 0;
	 return 1;
}
stock CheckDanceKey(playerid, value)
{
	UseDanceKey[playerid] = 1;
	for(new i; i < 4; i++)
	{
		if(300.0 < DanceFloat[playerid][i] < 320.0)
		{
			if(value == DanceKey[playerid][i])
			{
				SetPVarInt(playerid, "ScoreDance", Int_GetPlayerData(playerid, "ScoreDance")+1);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~GOOD", 500, 3);
			}
			else GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~BAD", 500, 3);
			TogglePlayerControllable(playerid, false);
			switch(random(13))
			{
				case 0: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,0,0,0,0,0,1);
				case 1: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,0,0,0,0,0,1);
				case 2: ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,0,0,0,0,0,1);
				case 3: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,0,0,0,0,0,1);
				case 4: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,0,0,0,0,0,1);
				case 5: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,0,0,0,0,0,1);
				case 6: ApplyAnimation(playerid,"DANCING","dance_loop",4.1,0,0,0,0,0,1);
				case 7: ApplyAnimation(playerid,"DANCING","bd_clap",4.1,0,0,0,0,0,1);
				case 8: ApplyAnimation(playerid,"DANCING","dance_loop",4.1,0,0,0,0,0,1);
				case 9: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,0,0,0,0,0,1);
				case 10: ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,0,0,0,0,0,1);
				case 11: ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,0,0,0,0,0,1);
				case 12: ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,0,0,0,0,0,1);
			}
		}
	}
	return true;
}

stock ResetDanceForPlayer(playerid)
{
	if(pTemp[playerid][tAuthorized])
	{
		f(global_str,80, "[Информация]{FFFFFF} Тренировка завершена. К навыку добавлено очков: %d.",Int_GetPlayerData(playerid, "ScoreDance"));
		SCM(playerid, COLOR_VALIK, global_str);
		PI[playerid][pWalkingInfo][1] += Int_GetPlayerData(playerid, "ScoreDance");
		UpdatePlayerDataStr(playerid, "WalkingInfo", Int_PackMassive(0, PI[playerid][pWalkingInfo]));
		for(new i; i < 7; i++) DestroyPlayerTD(playerid, DanceTD[playerid][i]);
		TogglePlayerControllable(playerid, true);
	}
	KillTimer(DanceTimer[playerid]);
	KillTimer(CheckDanceTimer[playerid]);
	for(new i; i < 4; i++)
	{
		DanceFloat[playerid][i] = 0.0;
		DanceKey[playerid][i] =
		DanceCount[playerid][i] = 0;

	}
	UseDanceKey[playerid] = 0;
	DeletePVar(playerid, "TimerDance");
	DeletePVar(playerid, "ScoreDance");
	return true;
}

stock GetRaion(Float:x, Float:y, permission = 0)
{
    static location[28];
    location = "Unknown";

	switch permission do
	{
    	case 0:
    		for(new i; i < MAX_ZONESg; i++)
	   			if(x >= gSAZones[i][zPos][0] && x <= gSAZones[i][zPos][3] && y >= gSAZones[i][zPos][1] && y <= gSAZones[i][zPos][4])
					SetString(location, gSAZones[i][zName]);
	   	case 1:
			if ((x <= 2954.50 && x >= 105.10) && (y <= -432.08 && y >= -2907.79)) location = "Los Santos";
				else if ((x <= -937.6698 && x >= -2987.1565) && (y <= 1592.4857 && y >= -1067.9495)) location = "San Fierro";
					else if ((x <= 2977.85 && x >= -525.50) && (y <= 3024.57 && y >= 560.53)) location = "Las Venturas"; 
	} 

    return location;
}
stock AddSelectCraftColor(playerid)
{
	CraftColor[playerid][10] = CreatePlayerTextDraw(playerid, 372.299988, 215.198364, "usebox");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][10], 0.000000, 3.058878);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][10], 290.375000, 0.000000);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][10], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][10], 0xFFFFFFFFE1E1E1FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][10], 0x222222FF);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][10], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][10], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][10], 0);

	CraftColor[playerid][0] = CreatePlayerTextDraw(playerid, 294.875000, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][0], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][0], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][0], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][0], 0xFFFFFFFFCCCCCCFF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][0], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][0], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][0], 1);

	CraftColor[playerid][1] = CreatePlayerTextDraw(playerid, 310.100006, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][1], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][1], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][1], 0xFFFFFFFFCC2426FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][1], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][1], 1);

	CraftColor[playerid][2] = CreatePlayerTextDraw(playerid, 325.325012, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][2], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][2], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][2], 0xFFFFFFFFCC7824FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][2], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][2], 1);

	CraftColor[playerid][3] = CreatePlayerTextDraw(playerid, 340.549988, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][3], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][3], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][3], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][3], 0xFFFFFFFFE6BC1EFF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][3], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][3], 1);

	CraftColor[playerid][4] = CreatePlayerTextDraw(playerid, 355.774994, 216.698364, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][4], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][4], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][4], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][4], 0xFFFFFFFFD5D73CFF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][4], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][4], 1);

	CraftColor[playerid][5] = CreatePlayerTextDraw(playerid, 294.875000, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][5], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][5], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][5], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][5], 0x3CD740FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][5], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][5], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][5], 1);

	CraftColor[playerid][6] = CreatePlayerTextDraw(playerid, 310.100006, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][6], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][6], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][6], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][6], 0x3CD7D7FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][6], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][6], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][6], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][6], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][6], 1);

	CraftColor[playerid][7] = CreatePlayerTextDraw(playerid, 325.325012, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][7], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][7], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][7], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][7], 0x3C3ED7FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][7], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][7], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][7], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][7], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][7], 1);

	CraftColor[playerid][8] = CreatePlayerTextDraw(playerid, 340.549988, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][8], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][8], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][8], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][8], 0xFFFFFFFFD73CD4FF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][8], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][8], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][8], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][8], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][8], 1);

	CraftColor[playerid][9] = CreatePlayerTextDraw(playerid, 355.774994, 230.461685, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, CraftColor[playerid][9], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, CraftColor[playerid][9], 12.225000, 10.763321);
	PlayerTextDrawAlignment(playerid, CraftColor[playerid][9], 1);
	PlayerTextDrawColor(playerid, CraftColor[playerid][9], 0xFFFFFFFFD73C7EFF);
	PlayerTextDrawUseBox(playerid, CraftColor[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, CraftColor[playerid][9], 0xFFFFFFFF80808080);
	PlayerTextDrawSetShadow(playerid, CraftColor[playerid][9], 2);
	PlayerTextDrawSetOutline(playerid, CraftColor[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, CraftColor[playerid][9], 0x000000FF);
	PlayerTextDrawFont(playerid, CraftColor[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, CraftColor[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][9], 1);

	PlayerTextDrawSetSelectable(playerid, CraftColor[playerid][Int_GetPlayerData(playerid, "CraftColor")], 0);

	for(new z; z < 11; z++) ShowPlayerTD(playerid, CraftColor[playerid][z]);

	DestroyPlayerTD(playerid, CraftSuper[playerid][0]);
	DestroyPlayerTD(playerid, CraftSuper[playerid][1]);
}
public: FermaJob(playerid, id)
{
	if(!Int_GetPlayerData(playerid, "FermaJob")) return 1;
	DeletePVar(playerid, "FermaJob");
	ClearAnimationsEx(playerid);
	if(FermaInfo[id][farmStatus])
	{
		FermaInfo[id][farmStatus] = false;
		FermaInfo[id][farmTimer] = 180;
		if(IsValidDynamic3DTextLabel(FermaInfo[id][farmText])) DestroyDynamic3DTextLabel(FermaInfo[id][farmText]);
		DestroyDynamicObject(FermaInfo[id][farmObject]);
		if(!IsPlayerInAnyVehicle(playerid))
	    {
		    if(!IsANotControllable(playerid))
		    {
				if(PlayerJob[playerid] == 17)
				{
					if(InJob[playerid] == 1)
					{
			            InJob[playerid] = 3;
			            CarryAnim(playerid);
                        if(!IsPlayerAttachedSlotUsedEx(playerid, 7)) SetPlayerAttachedObject(playerid, 7 , 2901, 1,0.11,0.36,0.0,0.0,90.0);

                        for(new i; i < sizeof(MinPos); i ++) TogglePlayerDynamicCP(playerid, MinerCP[i], true);
					}
				}
			}
		}
	}
	return true;
}

stock FindFreeCarSlot(bool:family = false)
{
	for(new i; i < MAX_VEHICLES; i++)
		if(CarInfo[i][cID] == -1 or (!family && OwnableCar[i] == INVALID_VEHICLE_ID)) return i;
		
	return -1;
}

stock SaveTunInv(vehicleid)
{
	f(global_str, 800, "UPDATE `ownable` SET `TunPosX` = '%s',`TunPosY` = '%s',`TunPosZ` = '%s', `TunRotX` = '%s', `TunRotY` = '%s', `TunRotZ` = '%s' WHERE ID = '%d'", Float_PackMassive(0, CarInfo[GetVehicleID(vehicleid)][TunPosX]), Float_PackMassive(1, CarInfo[GetVehicleID(vehicleid)][TunPosY]), Float_PackMassive(2, CarInfo[GetVehicleID(vehicleid)][TunPosZ]), Float_PackMassive(3, CarInfo[GetVehicleID(vehicleid)][TunRotX]), Float_PackMassive(4, CarInfo[GetVehicleID(vehicleid)][TunRotY]), Float_PackMassive(5, CarInfo[GetVehicleID(vehicleid)][TunRotZ]), CarInfo[GetVehicleID(vehicleid)][cID]);
	return mysql_pquery(mysql, global_str);
}

stock GetCarCount(vehicleid, id)
{
	new car = GetVehicleID(vehicleid);
	if  ( CarInfo[car][cInvCell][0] == id || CarInfo[car][cInvCell][1] == id || CarInfo[car][cInvCell][2] == id ||
		CarInfo[car][cInvCell][3] == id || CarInfo[car][cInvCell][4] == id || CarInfo[car][cInvCell][5] == id || 
		CarInfo[car][cInvCell][6] == id || CarInfo[car][cInvCell][7] == id || CarInfo[car][cInvCell][8] == id || CarInfo[car][cInvCell][9] == id  ) return 1;

	return 0;
}

stock UpdateAttachedVehicleObject(objectid, Float:X,Float:Y,Float:Z,Float:rX,Float:rY,Float:rZ)
{
	if(!IsValidDynamicObject(objectid) || !Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACHED_VEHICLE)) return 0;

	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_OFFSET_X, X);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_OFFSET_Y, Y);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_OFFSET_Z, Z);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_R_X, rX);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_R_Y, rY);
	Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACH_R_Z, rZ);
	return 1;
}

stock KillAllTimers(playerid)
{
	KillTimer(DanceTimer[playerid]);
	KillTimer(CheckDanceTimer[playerid]);
	KillTimer(DeathTimer[playerid]);
	KillTimer(PlayerDMZZ[playerid]);
	KillTimer(besttimer[playerid]);
 	KillTimer(TDTimer[playerid]);
 	KillTimer(besttime[playerid]);
	KillTimer(iluxatime[playerid]);
	return true;
}

stock GetHouseCost(playerid, id)
{
	switch(HouseInfo[id][hType])
	{
		case 0,2: if(PI[playerid][pMoney] >= HouseInfo[id][hCost]) return 1;
		case 1: if(PI[playerid][pVirMoney] >= HouseInfo[id][hCost]) return 1;
	}
	return 0;
}

stock GetInvID(playerid, td, value)
{
	if(value)
	{
		if(td < 36) return td;
		else if(td >= 36 && td < 72) return td-36;
		else if(td >= 72 && td <= 108) return td-72;
		else if(td >= 108 && td <= 144) return td-108;
		else if(td >= 144 && td <= 180) return td-144;
	}
	else return td + ( 36 * PI[playerid][pInvPage] );
	
	return 0;
}

stock DestroyPlayerTD(playerid, &PlayerText:td)
{
    if(td != PlayerText:-1)
	{
		PlayerTextDrawDestroy(playerid, td);
		td = PlayerText:-1;
	}
    return false;
}

stock SetPosTD(playerid, PlayerText:td, Float:X, Float:Y)
{
	if(IsValidPlayerTextDraw(playerid, td) && !(_:td == -1))
		PlayerTextDrawSetPos(playerid, td, X,Y);
	
	return false;
}

stock GetPosTD(playerid, PlayerText:td, &Float:X, &Float:Y)
{
	if(IsValidPlayerTextDraw(playerid, td) && !(_:td == -1))
		PlayerTextDrawGetPos(playerid, td, X,Y);

	return false;
}

stock IntToStr(value)
{
  	new tmp[11];
  	valstr(tmp, value);
  	return tmp;
}

stock GetPageInv(td, value)
{
	if(value)
	{
		if(td < 36) return 0;
			else if(td >= 36 && td < 72) return 1;
				else if(td >= 72 && td <= 108) return 2;
					else if(td >= 108 && td <= 144) return 3;
						else if(td >= 144 && td <= 180) return 4;
	}
	else 
	{
		if(td < 30) return 0;
			else if(td >= 30 && td < 60) return 1;
				else if(td >= 60 && td < 90) return 2;
					else if(td >= 90 && td < 120) return 3;
						else if(td >= 120 && td < 150) return 4;
	}
	return -1;
}
stock UpdateLiftText(id, count, oldpos, comp)
{
	new val = LiftInfo[id][liftID];

	if(comp != val && comp != -1) return 0; 

	if(IsValidDynamic3DTextLabel(LiftText[id])) DestroyDynamic3DTextLabel(LiftText[id]);
	f(global_str, 345, "{ffff00}[ %s ]\n{ffffff}%s: {ffff00}%s\n\n{cccccc}H - для вызова",
	LiftInfo[id][liftName], (count) ? ("Лифт следует на"):("Лифт на"), LiftInfo[LiftPosition[val]][liftName]);
	LiftText[id] = CreateDynamic3DTextLabel(global_str, -1, LiftInfo[id][liftTextPosX],LiftInfo[id][liftTextPosY],LiftInfo[id][liftTextPosZ], 5.0000,
		INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LiftInfo[id][liftWorld], LiftInfo[id][liftInterior]);

	if(IsValidDynamic3DTextLabel(LiftSelectText[oldpos])) DestroyDynamic3DTextLabel(LiftSelectText[oldpos]);
	LiftSelectText[LiftPosition[val]] = CreateDynamic3DTextLabel("{ffff00}[Выбор этажа]{AFAFAF}\nНажмите H", -1, 
		LiftInfo[LiftPosition[val]][liftPosX],LiftInfo[LiftPosition[val]][liftPosY],LiftInfo[LiftPosition[val]][liftPosZ], 2.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LiftInfo[LiftPosition[val]][liftWorld], LiftInfo[LiftPosition[val]][liftInterior]);
	return 1;
}
public: MoveDoorLift(id)
{
	new one = LiftInfo[id][liftDoorOne], two = LiftInfo[id][liftDoorTwo], val = LiftInfo[id][liftID];
	if(!LiftInfo[id][liftDoor])
	{
		MoveDynamicObject(DoorLift[one], DoorLiftInfo[one][doorPos][6], DoorLiftInfo[one][doorPos][7], DoorLiftInfo[one][doorPos][8],  0.5, DoorLiftInfo[one][doorPos][9],DoorLiftInfo[one][doorPos][10],DoorLiftInfo[one][doorPos][11]);
		MoveDynamicObject(DoorLift[two], DoorLiftInfo[two][doorPos][6], DoorLiftInfo[two][doorPos][7], DoorLiftInfo[two][doorPos][8], 0.5, DoorLiftInfo[two][doorPos][9],DoorLiftInfo[two][doorPos][10],DoorLiftInfo[two][doorPos][11]);
	}
	else
	{
		MoveDynamicObject(DoorLift[one], DoorLiftInfo[one][doorPos][0], DoorLiftInfo[one][doorPos][1], DoorLiftInfo[one][doorPos][2],  0.5, DoorLiftInfo[one][doorPos][3],DoorLiftInfo[one][doorPos][4],DoorLiftInfo[one][doorPos][5]);
		MoveDynamicObject(DoorLift[two], DoorLiftInfo[two][doorPos][0], DoorLiftInfo[two][doorPos][1], DoorLiftInfo[two][doorPos][2],  0.5, DoorLiftInfo[two][doorPos][3],DoorLiftInfo[two][doorPos][4],DoorLiftInfo[two][doorPos][5]);
	}
	if(!LiftInfo[id][liftDoor]) 
	{
		for(new i; i < sizeof(LiftInfo); i++) UpdateLiftText(i, 0, LiftPosition[val], val);
		LiftMoving[val] = Global_Time+10;
		CallTimeOutFunction("MoveDoorLift",10000+random(1500),0,"d",id);
	}
	else 
	{
		LiftMoving[val] = 0;
		if(LiftNext[val] != -1)
		{
			LiftPosition[LiftInfo[id][liftID]] = LiftNext[LiftInfo[id][liftID]];
			for(new i; i < sizeof(LiftInfo); i++) UpdateLiftText(i, 1, id, val);
			CallTimeOutFunction("LiftToEtap",10000+random(1500),0,"d", LiftNext[val]); 
			LiftPosition[LiftInfo[id][liftID]] = id;
		}
	}
	LiftInfo[id][liftDoor] = !LiftInfo[id][liftDoor];
	return 1;
}
public: LiftToEtap(id)
{
	new Float:X,Float:Y,Float:Z;
	foreach(Player,i)
	{
		switch(id)
		{
			case 0:
			{
				if(IsPlayerInRangeOfPoint(i, 2.5, 1786.6938,-1303.3004, LiftInfo[LiftPosition[LiftInfo[id][liftID]]][liftTextPosZ]))
				{
					SetPlayerVirtualWorld(i, 1);
					SetPlayerInterior(i, 2);
					switch(random(4))
					{
						case 0: UpdatePlayerPos(i, 1391.5061,0.7203,1001.0623); // 1
						case 1: UpdatePlayerPos(i, 1391.7375,2.7113,1001.0623); // 2
						case 2: UpdatePlayerPos(i, 1389.4672,2.8927,1001.0623); // 3
						case 3: UpdatePlayerPos(i, 1389.2006,0.6390,1001.0623); // 4
					}
					ParkingEntered[i] = 39;
				}
			}
			case 1..8:
			{
				if(IsPlayerInRangeOfPoint(i, 2.5, 1786.6938,-1303.3004, LiftInfo[LiftPosition[LiftInfo[id][liftID]]][liftTextPosZ]))
				{
					GetPlayerPos(i, X, Y, Z);
					SetPlayerVirtualWorld(i, LiftInfo[id][liftWorld]);
					SetPlayerInterior(i, LiftInfo[id][liftInterior]);
					UpdatePlayerPos(i, X, Y, LiftInfo[id][liftTextPosZ]+0.15);
					ParkingEntered[i] = -1;
				}
				else if(IsPlayerInRangeOfPoint(i, 2.5, 1390.5018,1.8186,1001.0623))
				{
					if(id != 1) SetPlayerVirtualWorld(i, 1);
					else SetPlayerVirtualWorld(i, 0);
					SetPlayerInterior(i, 0);
					UpdatePlayerPos(i, 1786.6938,-1303.3004, LiftInfo[id][liftTextPosZ]+0.15);
					ParkingEntered[i] = -1;
				} 
			}
			case 9:
			{
				if(IsPlayerInRangeOfPoint(i, 2.5, 287.9352, -1609.0881, LiftInfo[LiftPosition[LiftInfo[id][liftID]]][liftTextPosZ]))
				{
					SetPlayerVirtualWorld(i, LiftInfo[id][liftWorld]);
					SetPlayerInterior(i, LiftInfo[id][liftInterior]);
					switch(random(4))
					{
						case 0: UpdatePlayerPos(i, 1414.0288,-24.9893,1001.0623); // 1
						case 1: UpdatePlayerPos(i, 1413.9562,-22.4047,1001.0623); // 2
						case 2: UpdatePlayerPos(i, 1416.0542,-24.8801,1001.0623); // 3
						case 3: UpdatePlayerPos(i, 1416.0157,-22.7166,1001.0623); // 4
					}
					ParkingEntered[i] = 40;
				}
			}
			case 10..18:
			{
				if(IsPlayerInRangeOfPoint(i, 2.5, 287.9352,-1609.0881, LiftInfo[LiftPosition[LiftInfo[id][liftID]]][liftTextPosZ]))
				{
					GetPlayerPos(i, X, Y, Z);
					SetPlayerVirtualWorld(i, LiftInfo[id][liftWorld]);
					SetPlayerInterior(i, LiftInfo[id][liftInterior]);
					UpdatePlayerPos(i, X, Y, LiftInfo[id][liftTextPosZ]+0.15);
					ParkingEntered[i] = -1;
				}
				else if(IsPlayerInRangeOfPoint(i, 2.5, 1415.0291,-23.8604,1001.0623))
				{
					SetPlayerVirtualWorld(i, LiftInfo[id][liftWorld]);
					SetPlayerInterior(i, LiftInfo[id][liftInterior]);
					UpdatePlayerPos(i, 287.9352,-1609.0881, LiftInfo[id][liftTextPosZ]+0.15);
					ParkingEntered[i] = -1;
				} 
			}
		}
	}
	LiftPosition[LiftInfo[id][liftID]] = id;
	LiftNext[LiftInfo[id][liftID]] = -1;
	CallTimeOutFunction("MoveDoorLift",1000+random(1500),0,"d",id);
	return 1;
}
stock UpdateAuctionHouse(house)
{
	static const dour_status[2][23 + 1] = {
		"{3D9829}Открыта{FFFFFF}",
		"{C22323}Закрыта{FFFFFF}"
	};
	static const hgarage_status[2][24 + 1] = {
		"[{fa736c} НЕТ {FFFFFF}]",
		"[{27c627} ЕСТЬ {FFFFFF}]"
	};

	if(GetString(HouseInfo[house][hOwner],"The State"))
	{
		switch(HouseInfo[house][hType])
		{
			case 0:
			{
				f(global_str, 300,
				"{FF9900}*** Дом продается ***\
				\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
				\n{FFFFFF}Класс дома: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}$%d\
				\n{FFFFFF}Гараж: {AFAFAF}%s",
				house,
				HouseInfo[house][hKlass],
				HouseInfo[house][hCost],
				hgarage_status[HouseInfo[house][hGarage]]);
			}
			case 1:
			{
				f(global_str, 300,
				"{FF9900}*** Дом продается ***\
				\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
				\n{FFFFFF}Класс дома: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}%d AZ coins\
				\n{FFFFFF}Гараж: {AFAFAF}%s",
				house,
				HouseInfo[house][hKlass],
				HouseInfo[house][hCost],
				hgarage_status[HouseInfo[house][hGarage]]);
			}
			case 2:
			{
				f(global_str, 300,
				"{FF9900}*** Квартира продается ***\
				\n\n{FFFFFF}Номер квартиры: {AFAFAF}%d\
				\n{FFFFFF}Стоимость: {AFAFAF}$%d", house,HouseInfo[house][hCost]);
			}
		}
		if(HouseInfo[house][hType] != 2) HouseIcon[house] = CreateDynamicMapIcon(HouseInfo[house][hEnter_X], HouseInfo[house][hEnter_Y], HouseInfo[house][hEnter_Z], 31, 0);
	}
	else
	{
		switch(HouseInfo[house][hType])
		{
			case 0,1:
			{
				f(global_str, 300,
					"{FF9900}*** Дом занят ***\
					\n\n{FFFFFF}Номер дома: {AFAFAF}%d\
					\n{FFFFFF}Класс дома: {AFAFAF}%d\
					\n{FFFFFF}Дверь: %s\
					\n{FFFFFF}Гараж: {AFAFAF}%s",
					house,
					HouseInfo[house][hKlass],
					dour_status[HouseInfo[house][hLock]],
					hgarage_status[HouseInfo[house][hGarage]]
				);
			}
			case 2:{
				f(global_str, 300,
				"{FF9900}*** Квартира занята ***\
				\n\n{FFFFFF}Номер квартиры: {AFAFAF}%d\
				\n{FFFFFF}Владелец: {AFAFAF}%s\
				\n{FFFFFF}Дверь: %s",house,HouseInfo[house][hOwner], dour_status[HouseInfo[house][hLock]]);
			}
		}
	}

	if(strlen(HouseInfo[house][hAuctionName]) < 2) 
	{
		f(global_str, 450, "%s\n\n\
		{ffff00}[ Проходит аукцион ]\n\
		{FFFFFF}Стартовая цена: {AFAFAF}$%d\n\
		{FFFFFF}Минимальная ставка: {AFAFAF}$%d\n\n\
		{ff0000}- ставок еще не было -\n\n\
		{FFFFFF}Завершение аукциона через: {AFAFAF}%s", 
		global_str, 
		HouseInfo[house][hAuctionCost][0],
		HouseInfo[house][hAuctionCost][1],
		Convert(HouseInfo[house][hAuctionTime]));
	}
	else
	{
		f(global_str, 450, "%s\n\n\
		{ffff00}[ Проходит аукцион ]\n\
		{FFFFFF}Стартовая цена: {AFAFAF}$%d\n\
		{FFFFFF}Минимальная ставка: {AFAFAF}$%d\n\n\
		{ff0000}- %s - $%d -\n\n\
		{FFFFFF}Завершение аукциона через: {AFAFAF}%s", 
		global_str, 
		HouseInfo[house][hAuctionCost][0],
		HouseInfo[house][hAuctionCost][1],
		HouseInfo[house][hAuctionName],
		HouseInfo[house][hAuctionMoney],
		Convert(HouseInfo[house][hAuctionTime]));
	}
	UpdateDynamic3DTextLabelText(House3DText[house],COLOR_WHITE,global_str);
	return 1;
}

stock ResetAuctionHouse(houseid)
{
	HouseInfo[houseid][hAuction] = 
	HouseInfo[houseid][hAuctionTime] = 
	HouseInfo[houseid][hAuctionCost][0] =
	HouseInfo[houseid][hAuctionCost][1] = 0;
	SetString(HouseInfo[houseid][hAuctionName], "");
	UpdateHouse(houseid);
	return 1;
}

stock CreateOtherInventory(playerid, Float:X, Float:Y, Float:rX, Float:rY)
{
	OtherInvBox[playerid][5] = CreatePlayerTextDraw(playerid, X, Y, "usebox");
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][5], 0.000000, 27.343161 + 0.864624 * rY);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][5], 180.000000 - 5 * rX, 0.000000);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][5], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][5], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][5], 0x111111FF);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][5], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][5], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][5], 0);

	OtherInvBox[playerid][4] = CreatePlayerTextDraw(playerid, 187.500000 - 5 * rX, 143.659897 + 0.220917 * rY, SettingData[playerid][sdLanguage] ? (FixText("ШКАФ")) : ("WAREHOUSE"));
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][4], 0.188333 + 0.007386 * rX, 1.056592 + 0.035817 * rY);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][4], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][4], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][4], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][4], 0x00000000);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][4], 0);

	OtherInvBox[playerid][3] = CreatePlayerTextDraw(playerid, 320.299988, 162.242859 + 0.799988 * rY, "usebox");
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][3], 0.000000, -0.214150);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][3], 180.000000 - 5 * rX, 0.000000);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][3], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][3], 0xE1E1E1FF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][3], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][3], 0);

	OtherInvBox[playerid][2] = CreatePlayerTextDraw(playerid, 185.677078 - 4.953842 * rX, 368.626587 + 7.287537 * rY, "$00000000");
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][2], 0.235416 + 0.009232 * rX, 1.320740 + 0.044771 * rY);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][2], 185.677078 - 4.953842 * rX, 13.207399 + 0.447709 * rY);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][2], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][2], 0x67B355FF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][2], 0x00000000);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][2], 1);

	OtherInvBox[playerid][1] = CreatePlayerTextDraw(playerid, 323.000000, 364.076202 + 7.133301 * rY, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][1], 42.500000 + 1.666664 * rX, 19.666666 + 0.666668 * rY);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][1], 1);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][1], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][1], 1);

	OtherInvBox[playerid][0] = CreatePlayerTextDraw(playerid, 344.250000 + 0.833344 * rX, 369.683167 + 7.323364 * rY, SettingData[playerid][sdLanguage] ? (FixText("ИНВЕНТАРЬ")) : ("INVENTORY"));
	PlayerTextDrawLetterSize(playerid, OtherInvBox[playerid][0], 0.150666 + 0.005909 * rX, 0.845274 + 0.028653 * rY);
	PlayerTextDrawTextSize(playerid, OtherInvBox[playerid][0], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, OtherInvBox[playerid][0], 2);
	PlayerTextDrawColor(playerid, OtherInvBox[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, OtherInvBox[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvBox[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvBox[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OtherInvBox[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvBox[playerid][0], 0x00000000);
	PlayerTextDrawFont(playerid, OtherInvBox[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, OtherInvBox[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvBox[playerid][0], 0);
			
	OtherInvPageTD[playerid][0] = CreatePlayerTextDraw(playerid, 231.250000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][0], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][0], 8.500000 + 0.333333 * rX, 9.833333 + 0.333334 * rY);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][0], InventColor[PI[playerid][pInvColors]][1]);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][0], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][0], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][0], 0);

	OtherInvPageTD[playerid][1] = CreatePlayerTextDraw(playerid, 240.750000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][1], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][1], 8.500000 + 0.333333 * rX, 9.833333 + 0.333334 * rY);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][1], 0x333333FF);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][1], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][1], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][1], 1);
	
	OtherInvPageTD[playerid][2] = CreatePlayerTextDraw(playerid, 250.250000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][2], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][2], 8.500000 + 0.333333 * rX, 9.833333 + 0.333334 * rY);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][2], 0x333333FF);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][2], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][2], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][2], 1);

	OtherInvPageTD[playerid][3] = CreatePlayerTextDraw(playerid, 259.750000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][3], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][3], 8.500000 + 0.333333 * rX, 9.833333 + 0.333334 * rY);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][3], 0x333333FF);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][3], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][3], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][3], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][3], 1);

	OtherInvPageTD[playerid][4] = CreatePlayerTextDraw(playerid, 269.250000, 351.242859, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][4], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][4], 8.500000 + 0.333333 * rX, 9.833333 + 0.333334 * rY);
	PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][4], 0x333333FF);
	PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][4], 0x80808080);
	PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][4], 2);
	PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][4], 0x000000FF);
	PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][4], 1);
	
	return true;
}

stock OtherInvOpen(playerid, page, Float:rX, Float:rY, dataId = -1)
{
	if(Int_GetPlayerData(playerid, "OtherInventOpen") || HouseEntered[playerid] == -1 && page == 1 || musorka[playerid] == -1 && page == 2 || trunk[playerid] == -1 && page == 3 || pTemp[playerid][pCentralMarketId][0] == -1 && page == 4 || InfoBiz[playerid] == -1 && page == 5) 
		return false;

	if(!(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1))
	{
		OtherInvClose(playerid);
		ShowInventoryPage(playerid, 485.299988 - 5.799865 * pTemp[playerid][inventorySize][0], 138.642853, E_INVENTORY_TYPE_OTHER_INV);
		CreateOtherInventory(playerid, 320.299988, 138.642853, rX, rY);
	}
	else
	{
		executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"Inventory\"]');"), 
		executeEvent(playerid, 0, "window.executeEvent('event.inventory.setPlayerInventoryVisible', '[\"true\"]');");
		cursorPlayer(playerid, 0, true);
	}

	Int_SetPlayerData(playerid, "OtherInventOpen", page);
	OtherInventoryDataId[playerid] = dataId;

	switch page do
	{
		case 1: 
		{
			if(!(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1))
			{
				f(global_str, 25, "$%08d", HouseInfo[HouseEntered[playerid]][hMoney]);
				PlayerTextDrawSetString(playerid, OtherInvBox[playerid][2], global_str);
				DestroyPlayerTD(playerid, OtherInvPageTD[playerid][3]), DestroyPlayerTD(playerid, OtherInvPageTD[playerid][4]);
				
				SetPosTD(playerid, OtherInvPageTD[playerid][0], 231.250000 - 3.166672 * rX, 351.242859 + 6.799988 * rY);
				SetPosTD(playerid, OtherInvPageTD[playerid][1], 240.750000 - 3.166672 * rX, 351.242859 + 6.799988 * rY);
				SetPosTD(playerid, OtherInvPageTD[playerid][2], 250.250000 - 3.166672 * rX, 351.242859 + 6.799988 * rY);
			}
		}
		default:
		{
			if(!(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1))
			{
				if(page == 3) 
					SetPosTD(playerid, OtherInvPageTD[playerid][0], 250.250000 - 3.166672 * rX, 351.242859 + 6.799988 * rY);

				else if(page == 4 or page == 5)
				{
					OtherInvPageTD[playerid][0] = CreatePlayerTextDraw(playerid, 286.255859, 358.242859, "usebox");
					PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][0], 0.000000, 2.335400);
					PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][0], 214.044113, 0.000000);
					PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][0], 1);
					PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][0], 0xE1E1E1FF);
					PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][0], 1);
					PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][0], 0x050505FF);
					PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][0], 2);
					PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][0], 0);
					PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][0], 0x000000FF);
					PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][0], 0);
					PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][0], 1);
					PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][0], 0);

					OtherInvPageTD[playerid][1] = CreatePlayerTextDraw(playerid, 216.544113, 357.742859, "LD_SPAC:white");
					PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][1], 0.480000, 1.120000);
					PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][1], 19.831934, 22.000000);
					PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][1], 1);
					PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][1], 0x1A1A1AFF);
					PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][1], 0);
					PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][1], 0x80808080);
					PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][1], 2);
					PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][1], 0);
					PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][1], 0x000000FF);
					PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][1], 4);
					PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][1], 1);
					PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][1], 1);

					OtherInvPageTD[playerid][2] = CreatePlayerTextDraw(playerid, 225.832306, 365.220886, "<");
					PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][2], 0.125555, 0.704395);
					PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][2], 1280.000000, 1280.000000);
					PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][2], 2);
					PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][2], 0x777777FF);
					PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][2], 0);
					PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][2], 0x80808080);
					PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][2], 0);
					PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][2], 0);
					PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][2], 0x00000000);
					PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][2], 2);
					PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][2], 1);
					PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][2], 0);

					OtherInvPageTD[playerid][3] = CreatePlayerTextDraw(playerid, 264.123962, 357.742859, "LD_SPAC:white");
					PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][3], 0.480000, 1.120000);
					PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][3], 19.831934, 22.000000);
					PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][3], 1);
					PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][3], 0x1A1A1AFF);
					PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][3], 0);
					PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][3], 0x80808080);
					PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][3], 2);
					PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][3], 0);
					PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][3], 0x000000FF);
					PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][3], 4);
					PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][3], 1);
					PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][3], 1);

					OtherInvPageTD[playerid][4] = CreatePlayerTextDraw(playerid, 273.412140, 365.220886, ">");
					PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][4], 0.125555, 0.704395);
					PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][4], 1280.000000, 1280.000000);
					PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][4], 2);
					PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][4], 0x777777FF);
					PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][4], 0);
					PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][4], 0x80808080);
					PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][4], 0);
					PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][4], 0);
					PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][4], 0x00000000);
					PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][4], 2);
					PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][4], 1);
					PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][4], 0);

					OtherInvPageTD[playerid][5] = CreatePlayerTextDraw(playerid, 250.250000, 365.220886, "1");
					PlayerTextDrawLetterSize(playerid, OtherInvPageTD[playerid][5], 0.125555, 0.704395);
					PlayerTextDrawTextSize(playerid, OtherInvPageTD[playerid][5], 1280.000000, 1280.000000);
					PlayerTextDrawAlignment(playerid, OtherInvPageTD[playerid][5], 2);
					PlayerTextDrawColor(playerid, OtherInvPageTD[playerid][5], 0x777777FF);
					PlayerTextDrawUseBox(playerid, OtherInvPageTD[playerid][5], 0);
					PlayerTextDrawBoxColor(playerid, OtherInvPageTD[playerid][5], 0x80808080);
					PlayerTextDrawSetShadow(playerid, OtherInvPageTD[playerid][5], 0);
					PlayerTextDrawSetOutline(playerid, OtherInvPageTD[playerid][5], 0);
					PlayerTextDrawBackgroundColor(playerid, OtherInvPageTD[playerid][5], 0x00000000);
					PlayerTextDrawFont(playerid, OtherInvPageTD[playerid][5], 2);
					PlayerTextDrawSetProportional(playerid, OtherInvPageTD[playerid][5], 1);
					PlayerTextDrawSetSelectable(playerid, OtherInvPageTD[playerid][5], 0);

					DestroyPlayerTD(playerid, OtherInvBox[playerid][0]);
					DestroyPlayerTD(playerid, OtherInvBox[playerid][1]);
				}
				else 
				{
					SetPosTD(playerid, OtherInvPageTD[playerid][0], 231.250000 - 3.166672 * rX, 351.242859 + 6.799988 * rY),
					SetPosTD(playerid, OtherInvPageTD[playerid][1], 240.750000 - 3.166672 * rX, 351.242859 + 6.799988 * rY),
					SetPosTD(playerid, OtherInvPageTD[playerid][2], 250.250000 - 3.166672 * rX, 351.242859 + 6.799988 * rY),
					SetPosTD(playerid, OtherInvPageTD[playerid][3], 259.750000 - 3.166672 * rX, 351.242859 + 6.799988 * rY),
					SetPosTD(playerid, OtherInvPageTD[playerid][4], 269.250000 - 3.166672 * rX, 351.242859 + 6.799988 * rY);
				}
			
				PlayerTextDrawSetString(playerid, OtherInvBox[playerid][4], page == 2 ? SettingData[playerid][sdLanguage] ? (FixText("МУСОРКА")) : ("TRASH"): page == 3 ? SettingData[playerid][sdLanguage] ? (FixText("БАГАЖНИК")) : ("TRUNK") : page == 4 ? SettingData[playerid][sdLanguage] ? (FixText("НА ПРОДАЖЕ")) : ("SELL") : SettingData[playerid][sdLanguage] ? (FixText("КИОСК")) : ("KIOSK"));
				DestroyPlayerTD(playerid, OtherInvBox[playerid][2]);
			}
		}
	}

	if(!(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1))
	{
		for(new i; i < 6; i++)
		{
			ShowPlayerTD(playerid, OtherInvBox[playerid][i]);
			if(page == 1 && i < 3) ShowPlayerTD(playerid, OtherInvPageTD[playerid][i]);
			else if(page == 2 && i < 5) ShowPlayerTD(playerid, OtherInvPageTD[playerid][i]);
			else if(page == 3 && !i) ShowPlayerTD(playerid, OtherInvPageTD[playerid][i]);
			else if(page == 4 or page == 5) ShowPlayerTD(playerid, OtherInvPageTD[playerid][i]);
		}
		
		OtherCellCreate(playerid, 0.0, 0.0), SelectTextDraw(playerid, PI[playerid][pSelectTD]);
	}

	InventSlotOtherUpdate(playerid, 0, -1, 1, 0, -1);
	return true;
}

stock OtherInvClose(playerid)
{
	for(new i; i < 30; i++)
	{		
		DestroyPlayerTD(playerid, OtherKletka[playerid][i]), 
		DestroyPlayerTD(playerid, OtherKletkaText[playerid][i]),
		DestroyPlayerTD(playerid, OtherKletkaText[playerid][30 + i]),
		DestroyPlayerTD(playerid, OtherKletkaLevel[playerid][i]);

		if(i < 6) 
			DestroyPlayerTD(playerid, OtherInvBox[playerid][i]), 
			DestroyPlayerTD(playerid, OtherInvPageTD[playerid][i]);
	}
	
	DPlayerData(playerid, "OtherInventOpen");
	OtherInventoryDataId[playerid] = -1;

	return HideInventoryPage(playerid);
}

stock OtherCellCreate(playerid, Float:rX, Float:rY, Float:X = 184.500000)
{
	new td;
	
	X += 10.796553 * -rX;
	
	for(new i; i < 6; i++)
	{
		for(new s; s < 5; s++)
		{
			td = s + i * 5;
			
			OtherKletka[playerid][td] = CreatePlayerTextDraw(playerid, X + 26.5 * s + ( 5.79657 * rX + rX * s), 164.742859 + 30.5 * i + ( 0.799988 * rY + rY * i), "LD_SPAC:white");
			PlayerTextDrawLetterSize(playerid, OtherKletka[playerid][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, OtherKletka[playerid][td], 25.500000 + rX , 29.500000 + rY);
			PlayerTextDrawAlignment(playerid, OtherKletka[playerid][td], 1);
			PlayerTextDrawColor(playerid, OtherKletka[playerid][td], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, OtherKletka[playerid][td], 0);
			PlayerTextDrawBoxColor(playerid, OtherKletka[playerid][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, OtherKletka[playerid][td], 2);
			PlayerTextDrawSetOutline(playerid, OtherKletka[playerid][td], 0);
			PlayerTextDrawBackgroundColor(playerid, OtherKletka[playerid][td], 0x333333FF);
			PlayerTextDrawFont(playerid, OtherKletka[playerid][td], 5);
			PlayerTextDrawSetProportional(playerid, OtherKletka[playerid][td], 1);
			PlayerTextDrawSetSelectable(playerid, OtherKletka[playerid][td], 1);
		}
	}
	return 1;
}

stock InventSlotOtherUpdate(playerid, td = 0, slot = -1, nextpage = 0, page = 0, item = -1)
{
	new entered_id;

	if(!nextpage && Int_GetPlayerData(playerid, "OtherInventPage") != GetPageInv(slot, 0))
		return false;

	global_str = "";

	for(new i; i < (nextpage ? 30 : 1); i++)
	{
		if(nextpage) 
        {
            slot = i+(30*page);
            switch Int_GetPlayerData(playerid, "OtherInventOpen") do
            {
                case 1: 
                {
                    if(nextpage && page > 2) return false; 
                    entered_id = HouseEntered[playerid], item = HouseInfo[entered_id][hItem][slot];
                    if(entered_id == -1 || !GetString(PN(playerid), HouseInfo[entered_id][hOwner])) return OtherInvClose(playerid);
                }
                case 2:
                {
                    entered_id = musorka[playerid], item = MusorInfo[entered_id][mItem][slot];
                    if(entered_id == -1) return OtherInvClose(playerid);
                }
                case 3: entered_id = trunk[playerid], item = TrunkInfo[entered_id][tItem][slot];
                case 4: entered_id = pTemp[playerid][pCentralMarketId][0], item = CentralMarketItems[entered_id][pTemp[playerid][pCentralMarketSelectId]][1][slot];
				case 5: entered_id = GetKioskBussinesID(InfoBiz[playerid]), item = AccessoryKioskData[entered_id][acsKioskAccessory];
                default: { }
            }

			if(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1 && Int_GetPlayerData(playerid, "OtherInventOpen") < 4)
				return sendInventoryCefOtherItems(playerid, entered_id, Int_GetPlayerData(playerid, "OtherInventOpen") == 4 ? 6 : Int_GetPlayerData(playerid, "OtherInventOpen"));
		}

        else if(!nextpage)
		{
			if(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1 && Int_GetPlayerData(playerid, "OtherInventOpen") < 4)
				return sendInventoryCefSlotUpdate(playerid, item, Int_GetPlayerData(playerid, "OtherInventOpen") == 1 ? HouseInfo[entered_id][hItemCount][slot] : Int_GetPlayerData(playerid, "OtherInventOpen") == 2 ? MusorInfo[entered_id][mItemCount][slot] : Int_GetPlayerData(playerid, "OtherInventOpen") == 3 ? TrunkInfo[entered_id][tItemCount][slot] : 0, Int_GetPlayerData(playerid, "OtherInventOpen") == 4 ? 6 : Int_GetPlayerData(playerid, "OtherInventOpen"), slot, "", OtherInventoryDataId[playerid]);

			else if(Int_GetPlayerData(playerid, "OtherInventOpen") == 4)
            	{ entered_id = pTemp[playerid][pCentralMarketId][0]; if(item == -1 && slot >= 0) item = CentralMarketItems[entered_id][pTemp[playerid][pCentralMarketSelectId]][1][slot]; }
		}

        if(item == -1)
            item = 0;

		PlayerTextDrawHide(playerid, OtherKletka[playerid][nextpage ? i : td]);
		PlayerTextDrawFont(playerid, OtherKletka[playerid][nextpage ? i : td], ItemsInfo[item][itemCustom] == 2 ? 100 : 5);

		if(ItemsInfo[item][itemModel] != -1) 
			PlayerTextDrawSetPreviewModel(playerid, OtherKletka[playerid][nextpage ? i : td], IsASkinInv(item) && ItemsInfo[item][itemModel] > 311 ? GetSkinInfo(ItemsInfo[item][itemModel]) : ItemsInfo[item][itemModel]),
			PlayerTextDrawSetPreviewRot(playerid, OtherKletka[playerid][nextpage ? i : td], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][1], ItemsInfo[item][itemRotation][2], ItemsInfo[item][itemRotation][3]);

		PlayerTextDrawBackgroundColor(playerid, OtherKletka[playerid][nextpage ? i : td], ItemsInfo[item][itemColor]);
		PlayerTextDrawSetSelectable(playerid, OtherKletka[playerid][nextpage ? i : td], 1);

		if(IsACarInv(ItemsInfo[item][itemModel])) 
			PlayerTextDrawSetPreviewVehCol(playerid, OtherKletka[playerid][nextpage ? i : td], 0, 0);

		UpdateCellInventory(playerid, Int_GetPlayerData(playerid, "OtherInventOpen") == 4 ? 6 : Int_GetPlayerData(playerid, "OtherInventOpen") == 5 ? 7 : Int_GetPlayerData(playerid, "OtherInventOpen"), entered_id, slot, OtherKletka[playerid][nextpage ? i : td], OtherKletkaLevel[playerid][nextpage ? i : td], OtherKletkaText[playerid][nextpage ? i : td], false, OtherKletkaText[playerid][30 + (nextpage ? i : td)]);
		ShowPlayerTD(playerid, OtherKletka[playerid][nextpage ? i : td]);
	}

	if(nextpage) 
    {
        if(Int_GetPlayerData(playerid, "OtherInventOpen") == 4)
            PlayerTextDrawSetString(playerid, OtherInvPageTD[playerid][5], IntToStr(page + 1));

        SetPVarInt(playerid, "OtherInventPage", page);
    }

	return true;
}

stock InventSlotOtherUpdateAll(dataId, type, item, td, slot)
{
	foreach(Player, i)
	{
		if(Int_GetPlayerData(i, "OtherInventOpen") == type && OtherInventoryDataId[i] == dataId)
			InventSlotOtherUpdate(i, td, slot, 0, 0, item);
	}

	return true;
}

stock AddItemTrunk(playerid, trunkid, itetrunkid, amount = 1, color = 0, id = -1, level = 0, procent = -1)
{
	amlf("Игрок <a href=../pages/user?id=%d>%s</a> положил в багажник %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), trunkid, ItemsInfo[itetrunkid][itemName], itetrunkid, amount);
	SAMF(COLOR_RED, "Игрок %s[%i] положил в багажник №%i предмет инвентаря %s [ %i, %i ]", PN(playerid), playerid, trunkid, ItemsInfo[itetrunkid][itemName], itetrunkid, amount);
	
	for(new i; i < 30; i++)
    {
    	if(TrunkInfo[trunkid][tItem][i] != itetrunkid) continue;

		if(ItemsInfo[itetrunkid][itemStack] > TrunkInfo[trunkid][tItemCount][i])
		{
			if(amount < ItemsInfo[itetrunkid][itemStack])
			{
				if(amount+TrunkInfo[trunkid][tItemCount][i] < ItemsInfo[itetrunkid][itemStack])
				{
					TrunkInfo[trunkid][tItemCount][i] += amount;
					amount = 0;
				}
				else
				{
					amount = TrunkInfo[trunkid][tItemCount][i]+amount-ItemsInfo[itetrunkid][itemStack];
					TrunkInfo[trunkid][tItemCount][i] = ItemsInfo[itetrunkid][itemStack];
				}
			}
			else
			{
				amount -= ItemsInfo[itetrunkid][itemStack]-TrunkInfo[trunkid][tItemCount][i];
				TrunkInfo[trunkid][tItemCount][i] = ItemsInfo[itetrunkid][itemStack];
			}
			InventSlotOtherUpdateAll(trunkid, 3, itetrunkid, i, i);
		}
        if(amount <= 0) return 1;
    }
	
    for(new i; i < 30; i++)
    {
        if(TrunkInfo[trunkid][tItem][i]) continue;

		TrunkInfo[trunkid][tItem][i] = itetrunkid;
		
		TrunkInfo[trunkid][tItemColor][i] = color;
		TrunkInfo[trunkid][tItemIdentificator][i] = id;
	
		TrunkInfo[trunkid][tItemLevel][i] = level;
		TrunkInfo[trunkid][tItemProc][i] = procent;
		
		if(ItemsInfo[itetrunkid][itemStack] > amount)
		{
			TrunkInfo[trunkid][tItemCount][i] = amount;
			amount = 0;
			InventSlotOtherUpdateAll(trunkid, 3, itetrunkid, i, i);
			return 1;
		}
		else 
		{
			TrunkInfo[trunkid][tItemCount][i] = ItemsInfo[itetrunkid][itemStack];
			amount -= ItemsInfo[itetrunkid][itemStack];
			InventSlotOtherUpdateAll(trunkid, 3, itetrunkid, i, i);
		}
        if(amount <= 0) return 1;
    }
	
    return 1;
}

stock AddItemMusor(playerid, mid, itemid, amount = 1, color = 0, id = -1, level = 0, procent = -1, timer = 0)
{
	amlf("Игрок <a href=../pages/user?id=%d>%s</a> положил в мусорку %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), mid, ItemsInfo[itemid][itemName], itemid, amount);
	SAMF(COLOR_RED, "Игрок %s[%i] положил в мусорку №%i предмет инвентаря %s [ %i, %i, %i, %i ]", PN(playerid), playerid, mid, ItemsInfo[itemid][itemName], itemid, amount, level, procent);
	sendPlayerBattlepassAction(playerid, 60);
	
	for(new i; i < 150; i++)
    {
    	if(MusorInfo[mid][mItem][i] != itemid) continue;
		if(ItemsInfo[itemid][itemStack] > MusorInfo[mid][mItemCount][i] && !MusorInfo[mid][mItemTimer][i])
		{
			if(amount < ItemsInfo[itemid][itemStack])
			{
				if(amount+MusorInfo[mid][mItemCount][i] < ItemsInfo[itemid][itemStack])
				{
					MusorInfo[mid][mItemCount][i] += amount;
					amount = 0;
				}
				else
				{
					amount = MusorInfo[mid][mItemCount][i]+amount-ItemsInfo[itemid][itemStack];
					MusorInfo[mid][mItemCount][i] = ItemsInfo[itemid][itemStack];
				}
			}
			else
			{
				amount -= ItemsInfo[itemid][itemStack]-MusorInfo[mid][mItemCount][i];
				MusorInfo[mid][mItemCount][i] = ItemsInfo[itemid][itemStack];
			}
			InventSlotOtherUpdateAll(mid, 2, itemid, GetInvOtherID(i), i);
		}
        if(amount <= 0) return 1;
    }
    for(new i; i < 150; i++)
    {
        if(MusorInfo[mid][mItem][i]) continue;
        
		MusorInfo[mid][mItem][i] = itemid;
		
		MusorInfo[mid][mItemColor][i] = color;
	    MusorInfo[mid][mItemIdentificator][i] = id;
	    
		MusorInfo[mid][mItemLevel][i] = level;
		MusorInfo[mid][mItemProc][i] = procent;
		
 		MusorInfo[mid][mItemTimer][i] = Global_Time + timer;
		     	
		if(ItemsInfo[itemid][itemStack] > amount)
		{
			MusorInfo[mid][mItemCount][i] = amount;
			amount = 0;
			InventSlotOtherUpdateAll(mid, 2, itemid, GetInvOtherID(i), i);
			return 1;
		}
		else 
		{
			MusorInfo[mid][mItemCount][i] = ItemsInfo[itemid][itemStack];
			amount -= ItemsInfo[itemid][itemStack];
			InventSlotOtherUpdateAll(mid, 2, itemid, GetInvOtherID(i), i);
		}
        if(amount <= 0) return 1;
    }
    return 1;
}

stock AddItemHouse(playerid, houseid, itemid, amount = 1, color = 0, id = -1, level = 0, procent = -1)
{
	amlf("Игрок <a href=../pages/user?id=%d>%s</a> положил в шкаф %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), houseid, ItemsInfo[itemid][itemName], itemid, amount);
	
	for(new i; i < 90; i++)
    {
    	if(HouseInfo[houseid][hItem][i] != itemid) continue;

		if(ItemsInfo[itemid][itemStack] > HouseInfo[houseid][hItemCount][i])
		{
			if(amount < ItemsInfo[itemid][itemStack])
			{
				if(amount+HouseInfo[houseid][hItemCount][i] < ItemsInfo[itemid][itemStack])
				{
					HouseInfo[houseid][hItemCount][i] += amount;
					amount = 0;
				}
				else
				{
					amount = HouseInfo[houseid][hItemCount][i]+amount-ItemsInfo[itemid][itemStack];
					HouseInfo[houseid][hItemCount][i] = ItemsInfo[itemid][itemStack];
				}
			}
			else
			{
				amount -= ItemsInfo[itemid][itemStack]-HouseInfo[houseid][hItemCount][i];
				HouseInfo[houseid][hItemCount][i] = ItemsInfo[itemid][itemStack];
			}
			InventSlotOtherUpdateAll(houseid, 1, itemid, GetInvOtherID(i), i);
		}
        if(amount <= 0) return 1;
    }
    for(new i; i < 90; i++)
    {
        if(HouseInfo[houseid][hItem][i]) continue;

		HouseInfo[houseid][hItem][i] = itemid;
		HouseInfo[houseid][hItemLevel][i] = level;
		HouseInfo[houseid][hItemProc][i] = procent;
		
		HouseInfo[houseid][hItemColor][i] = color;
		HouseInfo[houseid][hItemIdentificator][i] = id;
			
		if(ItemsInfo[itemid][itemStack] > amount)
		{
			HouseInfo[houseid][hItemCount][i] = amount;
			amount = 0;
			InventSlotOtherUpdateAll(houseid, 1, itemid, GetInvOtherID(i), i);
			return 1;
		}
		else 
		{
			HouseInfo[houseid][hItemCount][i] = ItemsInfo[itemid][itemStack];
			amount -= ItemsInfo[itemid][itemStack];
			InventSlotOtherUpdateAll(houseid, 1, itemid, GetInvOtherID(i), i);
		}
        if(amount <= 0) return 1;
    }
	
    return true;
}

stock GetInvOtherID(td)
{
	if(td < 30) return td;
    else if(td >= 30 && td < 60) return td-30;
    else if(td >= 60 && td < 90) return td-60;
    else if(td >= 90 && td < 120) return td-90;
    else if(td >= 120 && td < 150) return td-120;
    else if(td >= 150 && td < 180) return td-150;
    else if(td >= 180 && td < 210) return td-180;
    else if(td >= 210 && td < 240) return td-210;
    else if(td >= 240 && td < 270) return td-240;
    else if(td >= 270 && td < 300) return td-270;
	
	return 0;
}

stock IsPlayerTenant(playerid, houseid)
{
	if(houseid == -1) return false;

	for(new i; i < 5; i++)
	{
		if(GetString(HRoomOwner[houseid][i], PN(playerid)))
			return true;
	}

	return false;
}

stock ValidIntNum(MinInt, MaxInt, inputInt[], Int, CheckInt = 0)
{
	if(strlen(inputInt) > 10) return 1;
		else if(Int > MaxInt || Int < MinInt || CheckInt+Int < 0) return 1;

	return 0;
}

stock DestroyDynamicObjectModel(vehicleid, objectid, modelid = -1)
{
	if(modelid != -1)
	{
		if(objectid == INVALID_STREAMER_ID || !IsValidDynamicObject(objectid) || GetDynamicObjectModel(objectid) == 0 || ( vehicleid != -1 && vehicleid != Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACHED_VEHICLE) )) 
			return false;

		else if(IsValidDynamicObject(objectid) && GetDynamicObjectModel(objectid) == modelid) 
			return DestroyDynamicObject(objectid), objectid = INVALID_STREAMER_ID;
	}
	return 1;
}

stock CreateInfoText(playerid)
{
	#include <textdraws/cataloges/InfoText>
	return 1;
}

stock CheckNalog(playerid, count, showid = 0)
{
	new ir; global_str = "{FFFFFF}\n";

	switch count do
	{
		case 0:
		{
			for(new i; i < OWNABLEBIZES;i ++)
			{
				if(ir<40)
				{
					if(BizData[i][bLevel] >= 190000) 
						f(global_str,sizeof(global_str),"%s%d. Бизнес\t\tСлетит через: {C9B931}%d{FFFFFF} Payday. Тип: {C9B931}Скрыто{FFFFFF}\n",global_str,showid ? i:ir+1,floatround(float(250000-BizData[i][bLevel])/GLS[3], floatround_ceil)+1),
							ir++;

					else if(GetString(BizData[i][bOwner], "The State"))
					{
						if(i < 10) f(global_str,sizeof(global_str),"%s%d. Бизнес\t\tID: {C9B931}%d{FFFFFF} [{9ACD32}Слетел{FFFFFF}] \t\tТип: {C9B931}%s{FFFFFF}\n",global_str,ir+1,i,BizData[i][bName]);
						else f(global_str,sizeof(global_str),"%s%d. Бизнес\t\tID: {C9B931}%d{FFFFFF} [{9ACD32}Слетел{FFFFFF}] \tТип: {C9B931}%s{FFFFFF}\n",global_str,ir+1,i,BizData[i][bName]);
						ir++;
					}
				}
			}
			if(!ir) SPD(playerid,0,0,!"","На данный момент доступной информации нет.", !"Принять","");
			else
			{
				f(global_str,sizeof(global_str),"%s\n\nИспользуйте {1EA3CC}/findibiz ID{FFFFFF}, чтобы найти нужный вам бизнес. Стоимость {1EA3CC}1500$.\
				\n{f57002}ID{FFFFFF} бизнеса отображается  только у {f57002}слетевших{FFFFFF} бизнесов!",global_str);
				SPD(playerid,0,0,!"",global_str, !"Принять","");
			}
		}	
		case 1:
		{
      		for(new i; i < OWNABLEHOUSES; i ++)
			{
				if(ir < 40)
				{
					if(!GetString(HouseInfo[i][hOwner], "The State") && HouseInfo[i][hNalog] >= 80000)
					{
						f(global_str,sizeof(global_str),"%s%d. Дом\t\tСлетит через: {C9B931}%d{FFFFFF} Payday.\n",global_str,ir+1,floatround(float(104000-HouseInfo[i][hNalog])/GLS[2], floatround_ceil)+1);
						ir++;
					}
					else if(GetString(HouseInfo[i][hOwner], "The State"))
					{
						f(global_str,sizeof(global_str),"%s%d. Дом\t\tID: {C9B931}%d\t{FFFFFF}[{9ACD32}Слетел{FFFFFF}]\n",global_str,ir+1, i);
						ir++;
					}
				}
			}
			if(strlen(global_str)<2) SPD(playerid,0,0,!"",!"На данный момент доступной информации нету.", !"Принять","");
			else
			{
				f(global_str,sizeof(global_str),"%s\n\nИспользуйте {1EA3CC}/findihouse ID{FFFFFF}, чтобы найти нужный вам дом. Стоимость {1EA3CC}1500$.{FFFFFF}",global_str);
				SPD(playerid,0,0,"{FF6347}Слетевшие дома появляются только после PayDay!",global_str, !"Принять","");
			}
		}
	}
	return 0;
}

stock SpeedometrSetting(playerid, speed = false)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(VehicleState[vehicleid] == 8 or VehicleState[vehicleid] == 7)
		return false;

	if(GetPlayerLauncher(playerid))
		sendPlayerCustom_packet(playerid, 40, !speed or GetVehicleModelEx(vehicleid) < 612 ? 0 : 1);

	switch speed do
	{
		case 0:
		{
			switch PI[playerid][pCustomInterface][1] do
 			{
				case 1,2: sendPlayerCustom_packet(playerid, 4, 0);
				case 3,4: executeEvent(playerid, 0, "window.executeEvent('event.arizonahud.speedometerType', `[\"null\"]`);");
			}
		}

		case 1:
		{
			switch PI[playerid][pCustomInterface][1] do
 			{
				case 1,2: 
				{
					sendPlayerCustom_packet(playerid, 4, PI[playerid][pCustomInterface][1]);

					new BitStream:bs = BS_New();

					for(new i; i < 2; i++)
					{
						BS_WriteValue(bs, 
							PR_UINT8, 220, 
							PR_UINT8, i ? 7 : 5, 
							PR_FLOAT, i ? Fuel[vehicleid] : IsAOwnableCar(vehicleid) ? CarInfo[GetVehicleID(vehicleid)][cMilage] : 0.0), 
						PR_SendPacketEx(bs, playerid), BS_Reset(bs);
					}

					BS_Delete(bs);
				}
				case 3,4:
				{
					executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.speedometerType', '[\"%s\"]');", PI[playerid][pCustomInterface][1] == 4 ? "simplified" : "advanced")));
					executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.vehicleUpdateSpeedTime', '[%i]');", PI[playerid][pCustomInterface][1] == 4 ? 100 : 500)));

					if(IsAOwnableCar(vehicleid))
						executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.vehicleMileage', '[%d]');", floatround(CarInfo[GetVehicleID(vehicleid)][cMilage]))));

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.vehicleLiters', '[%i]');", floatround(Fuel[vehicleid]))));
					executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.vehicleFuelType', '[\"%s\"]');", IsVehicleElectroCar(vehicleid) ? "electro" : "petrol")));
				}
			}
		}
	}
	return true;
}

stock GetCarSalon (model)
{
	switch model do
	{
		case 401,404,409,410,413,416,418,419,422,424,428,431,436,438,442,455,457,466,478,479,496,
		504,505,516,517,526,527,528,529,539,540,542,543,546,547,552,555,566,568,573,575,576,609: return 1;
		case 400,402,421,434,447,474,477,482,487,491,492,495,500,507,513,518,533,534,535,545,554,561,562,567,579,580,587,589,600,602,603: return 2; 
		case 411,415,420,429,451,461,463,468,471,480,481,490,494,502,503,506,509,510,521,522,541,559,560,581,586,598: return 3;
		default: return 4;
	}
	return -1;
}

stock UpdateDataInt(id, basename[], fieldss[], data)
{
	f(global_str, 200, "UPDATE `%s` SET `%s` = '%d' WHERE `ID` = '%d'", basename, fieldss, data, id);
	mysql_tquery(mysql, global_str);
	return 1;
}

stock GetNeftSecond(level)
{
	switch level do
	{
		case 20..39: return 39;
		case 40..59: return 38;
		case 60..79: return 37;
		case 80..99: return 36;
		case 100: return 32;
	}
	return 40;
}

stock GetOilrig(bizid, type)
{
	for(new i; i < (type ? 17 : 8); i++)
		if(NeftBizID[type][i] == bizid)
			return i;

	return -1;
}

stock UpdateNeftText(bizid)
{
	new i;

	switch BizData[bizid][bState] do 
	{
		case 23:
		{
			i = GetOilrig(bizid, 0);

			f(global_str, 300, "\
				{F3ED8E}Добыча за %d секунд(ы): от %.01f до %.01f литров\n\
				В наличии: %.02f литров\n\n\
				{9AF38E}Стоимость за 200.0 литров (бочка): %.00f$\n\
				Чтобы купить бочку нажмите 'H'",
				GetNeftSecond(BizData[bizid][bUpgrade][0]), 
				68.0 + (1.13 * (BizData[bizid][bUpgrade][0] - 1)), 82.0 + (1.13 * (BizData[bizid][bUpgrade][0] - 1)),
				float(BizData[bizid][bProducts]),
				BizData[bizid][bEnterPrice] * 200);

			UpdateDynamic3DTextLabelText(NeftText[0][i], 0x4CD10FF, global_str);
			NeftTimer[0][i] = GetNeftSecond(BizData[bizid][bUpgrade][0]);
		}

		case 32:
		{
			f(global_str, 330, "\
				{ECDC3A}Уровень улучшения добычи нефти: %i / 40 уровень\n\
				{ECDC3A}Уровень улучшения хранилища нефти: %i / 40 уровень\n\n\n\
				{ffffff}Нефтевышка {31B404}№%i{ffffff}\n\
				{ffffff}Запас нефти:{31B404} %i / %i\n\
				{ffffff}Запас бочек:{31B404} %i / 1000\n\n\
				{cccccc}Стоимость за 500 литров (бочка): 100000 BTC",
				BizData[bizid][bUpgrade][1], BizData[bizid][bUpgrade][0], bizid, BizData[bizid][bProducts], BizData[bizid][bUpgrade][0] * 1000 + 24000, BizData[bizid][bUpgrade][2]);

			UpdateDynamic3DTextLabelText(NeftText[1][GetOilrig(bizid, 1)], COLOR_WHITE, global_str);
			NeftTimer[1][GetOilrig(bizid, 1)] = 60;
		}
	}

	return true;
}

enum barrel_info
{
	barrel_vehicleModel,
	barrle_maxCount,
	Float:barrel_vehicleAttach[114]
}
new vehicleBarrelPosition[][barrel_info] = 
{
	{484, 6, {-0.462200, 5.558200, 2.458000, 180.000000, 90.000000, -273.899902, 0.573400, 4.109200, 2.419500, 180.000000, 90.000000, 2.700000, 0.663900, 2.632400, 2.419500, 180.000000, 90.000000, 0.000000, 0.634000, 3.354500, 2.419500, 180.000000, 90.000000, 1.380000, 0.306000, 5.542400, 2.445200, 180.000000, 90.000000, -265.919891, -0.559510, 2.675740, 2.419500, 180.000000, 90.000000, -183.059906}},
	{578, 11, {-1.000, 1.871, 0.210, 0.000, 0.000, 0.000, 0.000, 1.871, 0.210, 0.000, 0.000, 0.000, 1.010, 1.871, 0.210, 0.000, 0.000, 0.000, -1.010, -0.530, 0.200, 0.000, 0.000, 0.000, 0.000, -0.490, 0.220, 0.000, 0.000, 0.000, 0.990, -0.480, 0.230, 0.000, 0.000, 0.000, -1.010, -2.381, 0.190, 0.000, 0.000, 0.000, -0.010, -2.401, 0.190, 0.000, 0.000, 0.000, 0.990, -2.421, 0.210, 0.000, 0.000, 0.000, -1.020, -3.620, 0.210, 0.000, 0.000, 0.000, 0.000, -3.610, 0.200, 0.000, 0.000, 0.000}},
	{14242, 18, {-0.750000, -2.340000, 0.460000, 0.000000, 0.000000, 0.000000, 0.000000, -2.352000, 0.470000, 0.000000, 0.000000, 0.000000, 0.750000, -2.362000, 0.470000, 0.000000, 0.000000, 0.000000, -0.740000, -3.310000, 0.480000, 0.000000, 0.000000, 0.000000, 0.720000, -4.261000, 0.470000, 0.000000, 0.000000, 0.000000, 0.740000, -1.411000, 0.450000, 0.000000, 0.000000, 0.000000, 0.760000, -0.400000, 0.440000, 0.000000, 0.000000, 0.000000, -0.740000, -0.430000, 0.450000, 0.000000, 0.000000, 0.000000, -0.740000, -1.401000, 0.460000, 0.000000, 0.000000, 0.000000, 0.000000, -1.411000, 0.450000, 0.000000, 0.000000, 0.000000, -0.730000, -4.252000, 0.470000, 0.000000, 0.000000, 0.000000, 0.010000, -4.270000, 0.470000, 0.000000, 0.000000, 0.000000, 0.000000, -0.400000, 0.430000, 0.000000, 0.000000, 0.000000, 0.730000, -3.312000, 0.460000, 0.000000, 0.000000, 0.000000, 0.000000, -3.311000, 0.460000, 0.000000, 0.000000, 0.000000, -0.760000, -5.231000, 0.470000, 0.000000, 0.000000, 0.000000, 0.000000, -5.260000, 0.460000, 0.000000, 0.000000, 0.000000, 0.730000, -5.281000, 0.460000, 0.000000, 0.000000, 0.000000}}
};

stock SetFocusOilBarrelForPlayer(playerid, vehicleid, focus = -1)
{
	if(vehicleid == INVALID_VEHICLE_ID || focus == -1 || focus == Int_GetPlayerData(playerid, "FocusOilBarrel")-1) 
		return false;
	
	new Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ;
	
	DestroyDynamicObjectModel(vehicleid, OilFocusObject[vehicleid], 19135);
	OilFocusObject[vehicleid] = CreateDynamicObject(19135, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, playerid, STREAMER_OBJECT_SD, 50.0); // 0	
	GetOilAttachObjPos(vehicleid, focus, X, Y, Z, rX, rY, rZ);
	
	if(!OilObjectStatus[vehicleid][focus]) 
	{
		SetPlayerOilBarrelTargetID(playerid, vehicleid);
		OilObjects[vehicleid][focus] = CreateDynamicObject(3632, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000, 0, 0, playerid, STREAMER_OBJECT_SD, 50.0);
		DestroyDynamicObjectModel(vehicleid, OilObjects[vehicleid][focus], 3632);
		SetDynamicObjectMaterial(OilObjects[vehicleid][focus], 1, 65535, "none", "none", 0x8032CD32);
		SetDynamicObjectMaterial(OilObjects[vehicleid][focus], 0, 65535, "none", "none", 0x8032CD32);
		AttachDynamicObjectToVehicle(OilObjects[vehicleid][focus], vehicleid, X, Y, Z, rX, rY, rZ);
	}
	
	AttachDynamicObjectToVehicle(OilFocusObject[vehicleid], vehicleid, X, Y, Z+1.0, 0.000000, 0.000000, 0.000000);
	SetPVarInt(playerid, "FocusOilBarrel", focus+1);

	return false;
}

stock FindVehicleForBarrels(vehicle_model)
{
	for(new i; i < sizeof(vehicleBarrelPosition); i++)
		if(vehicleBarrelPosition[i][barrel_vehicleModel] == vehicle_model)
			return i;

	return -1;
}

stock SetPlayerOilBarrelTargetID(playerid, vehicleid, delete = 0)
{
	if(vehicleid == INVALID_VEHICLE_ID)
		return false;

	new id = FindVehicleForBarrels(GetVehicleModelEx(vehicleid));

	if(id == -1) 
		return false;
	
	if(!delete)
		SetPVarInt(playerid, "ShowPlayerNeft", vehicleid);
	
	for(new i, Float:oil_pos[6]; i < vehicleBarrelPosition[id][barrle_maxCount]; i++)
	{
		if(OilObjectStatus[vehicleid][i]) continue;
		DestroyDynamicObjectModel(vehicleid, OilObjects[vehicleid][i], 3632);

		if(delete)
		{
			DestroyDynamicObjectModel(vehicleid, OilFocusObject[vehicleid], 19135);
			DeletePVar(playerid, "FocusOilBarrel");
			DeletePVar(playerid, "ShowPlayerNeft");
		}
		else
		{
			OilObjects[vehicleid][i] = CreateDynamicObject(3632, 0.000000, 0.000000, -1000.000000, 0.000000, 0.000000, 0.000000);
			SetDynamicObjectMaterial(OilObjects[vehicleid][i], 1, 65535, "none", "none", 0x80D3D3D3);
			SetDynamicObjectMaterial(OilObjects[vehicleid][i], 0, 65535, "none", "none", 0x80D3D3D3);

			for(new j; j < 6; j++)
				oil_pos[j] = vehicleBarrelPosition[id][barrel_vehicleAttach][i * 6 + j];

			AttachDynamicObjectToVehicle(OilObjects[vehicleid][i], vehicleid, oil_pos[0], oil_pos[1], oil_pos[2], oil_pos[3], oil_pos[4], oil_pos[5]);
		}
	}
	
	return false;
}

stock GetNeftObjectFirst(playerid, vehicleid, status = 0)
{
	new 
		Float:point, Float:point_2, bochka = -1,
		Float:pX, Float:pY, Float:pZ,
		Float:X, Float:Y, Float:Z;
	
	for(new i; i < vehicleBarrelPosition[FindVehicleForBarrels(GetVehicleModelEx(vehicleid))][barrle_maxCount]; i++)
	{
		if(OilObjectStatus[vehicleid][i] && !status) continue;
		else if(status && !OilObjectStatus[vehicleid][i]) continue;
		
		GetOilAttachObjPos(vehicleid, i, X, Y, Z);
		GetVehiclePos(vehicleid, pX, pY, pZ);
		X += pX, Y += pY , Z += pZ;

		GetPlayerPos(playerid, pX, pY, pZ);	
		
		point_2 = PointToPoint(pX, pY, pZ, X, Y, Z);

		if(point == 0.0) 
			point = PointToPoint(pX, pY, pZ, X, Y, Z);

		if(point_2 <= point)
			point = point_2,
				bochka = i;
	}

	if(bochka != -1) 
		GameTextForPlayer(playerid, !"~b~Press:~w~ N", 1500, 3);

	return bochka;
}

stock GetOilAttachObjPos(vehicleid, count, &Float:x, &Float:y, &Float:z, &Float:rx = 0.0, &Float:ry = 0.0, &Float:rz = 0.0)
{
	if(!IsValidDynamicObject(OilObjects[vehicleid][count]))
		return false;

	return GetDynamicObjectPos(OilObjects[vehicleid][count], x, y, z), GetDynamicObjectRot(OilObjects[vehicleid][count], rx, ry, rz);
}

stock WarpToInterior(targetid, int = 0)
{
	if(int >= sizeof(InteriorInfo)) int = 0;
	SetPlayerVirtualWorld(targetid, !int ? 1:int), SetPlayerInterior(targetid, InteriorInfo[int][worldInt]);
	return UpdatePlayerPos(targetid, InteriorInfo[int][PosInt][0], InteriorInfo[int][PosInt][1], InteriorInfo[int][PosInt][2], InteriorInfo[int][PosInt][3]);
}

stock OpenReferalMenu(targetid)
{
	f(global_str, 150, "SELECT `ReferalMoneyBack` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", PN(targetid));
	new Cache:result = mysql_query(mysql, global_str), ReferalBackMoney;
	cache_get_value_name_int(0, "ReferalMoneyBack", ReferalBackMoney);
	cache_delete(result);
	f(global_str, 256, "{85bb65}[0]{FFFFFF} Проверить реферала\n{85bb65}[1]{FFFFFF} Мои рефералы\n{85bb65}[2]{FFFFFF} Возвращать рефералам: {85bb65}${FFFFFF}%d", ReferalBackMoney);
	return SPD(targetid, 13300, DIALOG_STYLE_LIST, "{FFFFFF}Перечень | {ae433d}Рефералы", global_str, "»", "x");
}

stock ResetRC(playerid)
{
	UpdatePlayerPos(playerid, DeathPos[playerid][0], DeathPos[playerid][1], DeathPos[playerid][2]);
	GangZoneDestroy(RCzone[playerid]);
	return RCzone[playerid] = -1;
}

stock DestroyVehicleIter(veh)
	Iter_Remove(Vehicle, veh),
		DestroyVehicle(veh);

stock ChangeItemPos(playerid, ID, j)
{
	for(new i, id[8], text[3][10]; i < 8; i++)	
	{
		if(i < 3)
		{
			f(text[i], 10, InventoryNumber[playerid][i][ID]);
			f(InventoryNumber[playerid][i][ID], 10, InventoryNumber[playerid][i][j]);
			f(InventoryNumber[playerid][i][j], 10, text[i]);
		}
		id[i] = Inventory[playerid][i][ID];
		Inventory[playerid][i][ID] = Inventory[playerid][i][j];
		Inventory[playerid][i][j] = id[i];
	}
	return false;
}

stock ShowBusinessDialog(playerid, list = 0, dialog = 9761)
{
	if(GetPlayerBiz(playerid) == -1)
		return SCM(playerid, COLOR_GREY, !"У вас нет бизнеса");

    new show_biz, until, num = 1;

	global_str = "";

	if(GetPlayerLauncher(playerid) == 1 && dialog == 9761)
		executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', `[\"BusinessesList\"]`);"),
		hidePlayerHud(playerid);

	for(new i = 0; i < OWNABLEBIZES; i++)
	{
		if(GetString(BizData[i][bOwner], PN(playerid)) || GetString(BizData[i][bZam], PN(playerid)))
		{
			if(GetPlayerLauncher(playerid) == 1 && dialog == 9761)
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.business.list.pushItems', `[\
					[\
						{\"id\":%d,\"type\":\"%s\",\"title\":\"%s\",\"opened\":%d,\"stats\":[{\"title\":\"Крышует\",\"value\":\"none\"},\
							{\"title\":\"Налог к оплате\",\"value\":\"$%i / $250000\"},{\"title\":\"Банк бизнеса\",\"value\":\"$ %i\"}]}]]`);", BizData[i][bID], GetBussinesText(0, i), BizData[i][bName], BizData[i][bLock], BizData[i][bLevel], BizData[i][bMoney])));
			else
			{
				if(until >= 29 * list)
				{
					ShowBiz[playerid][show_biz] = i;

					f(global_str, 1500, "%s\n{FFFFFF}%d. %s %s\n", global_str, num, BizData[i][bName], BizData[i][bLock] ? ("{FF6347}[Закрыт]") : ("{9ACD32}[Открыт]"));
					show_biz ++;

					num ++;
				}

				else until ++;

				if(num == 30)
				{
					strcat(global_str, "\n>>> Следующая страница");
					break;
				}
			}
		}
	}


	if(GetPlayerLauncher(playerid) == 1 && dialog == 9761)
		cursorPlayer(playerid, 0, true);

	else
		SPD(playerid, dialog, DIALOG_STYLE_LIST, !"Мои бизнесы", global_str, !"Выбор", !"Отмена");

	return true;
}

stock ShowHouseDialog(playerid, listid = 0, dialog = 7238)
{
	mysql_string = "";

	new home, type = GetPlayerVirtualWorld(playerid), Float:distance,  Float:position_x,  Float:position_y,  Float:position_z;
	global_str = !type ? "{FFFFFF}Номер дома\t{FFFFFF}Город\t{FFFFFF}Округ\t{FFFFFF}Дистанция\n":"{FFFFFF}Номер дома\t{FFFFFF}Город\t{FFFFFF}Налог\t{FFFFFF}Комуналка\n";

	for(new i; i < OWNABLEHOUSES; i++)
	{
	    if(!IsValidHouse(i)) continue;

		if(GetString(HouseInfo[i][hOwner],PN(playerid)))
		{
			ShowHouse[playerid][home] = i;

			home ++;
			if(!type)
				GetPlayerPos(playerid, position_x, position_y, position_z),
					distance = PointToPoint(position_x, position_y, position_z, HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z]),
						f(mysql_string, 100 , "{FFFFFF}[%d] Дом №%d\t%s\t%s\t%.00f\n",home,i,GetRaion(HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], 1),GetRaion(HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y]),distance);

			else f(mysql_string, 100,  "[%d] Дом №%d\t%s\t{f5515e}%d{FFFFFF}\t0\n",home, i ,GetRaion(HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], 1),HouseInfo[i][hNalog]);
			strcat(global_str, mysql_string);
		}
	}
	if(!home) return SCM(playerid, -1, ">> {BE2D2D} Вы не проживаете в доме!");

	if(listid) SetPVarInt(playerid, "typeHouseDialog", listid);

	if(!SPD(playerid, dialog, DIALOG_STYLE_TABLIST_HEADERS, !"Выбор дома", global_str, !"Выбрать", !"Отмена")) SCM(playerid, COLOR_RED, !"Недоступно в данный момент");

	return false;
}

stock GetMysqlData(table[], basename[], mysql_data_id)
{	
	f(mysql_string, 150, "SELECT `%s` FROM `%s` WHERE `ID` = '%d' LIMIT 1", basename, table, mysql_data_id);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if(cache_num_rows())
		cache_get_value_index(0, 0, mysql_string, 799);
	else
		mysql_string = "-1";

	cache_delete(result);	
	return false;
}

stock ShowDialogEditName(playerid, caseid = 0)
{
	GetMysqlData(!caseid ? "houses":"businesses",!caseid ? "Name":"opisanie", !caseid ? PI[playerid][pHouseOpen]:BizData[ShowPBiz[playerid]][bID]);
	
	if(!caseid)
		f(global_str, 256, "{FFFFFF}Текущее название: %s\n\nУкажите название для вашего дома: (от 3 до 32 символов)", mysql_string);
	else 
		f(global_str, 256, "{FFFFFF}Текущее название: %s\n\nУкажите название для вашего бизнеса: (от 3 до 32 символов)", mysql_string);
	
	SPD(playerid, caseid ? 2433:2432, DIALOG_STYLE_INPUT, "", global_str, "Изменить", "Отмена");
	return false;
}

public: MysqlRefreshMS(system_switch_code, system_cool_element_id)
{
	switch system_switch_code do 
	{ 
		case 982: UpdateHouse(system_cool_element_id); 
		case 583: UpdateBusinessText(system_cool_element_id);
	}
}

stock getMeToDoor(playerid, i)
{
	new callback;
	//
	if(DoorInfo[i][dPos][3] == 90.0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, DoorInfo[i][dPos][0]-0.7400, DoorInfo[i][dPos][1]+0.7400, DoorInfo[i][dPos][2]+1.017587))
			callback = -45;
		else callback = 45;
	}
	else if(DoorInfo[i][dPos][3] == 180.0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, DoorInfo[i][dPos][0]-0.7400, DoorInfo[i][dPos][1]-0.7400, DoorInfo[i][dPos][2]+1.017587))
			callback = -45;
		else callback = 45;
	}
	else
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, DoorInfo[i][dPos][0]+0.7400, DoorInfo[i][dPos][1]+0.7400, DoorInfo[i][dPos][2]+1.017587))
			callback = -45;
		else callback = 45;
	}
	//
	return callback;
}
//
stock OnRalliyARZUpdate(playerid)
{
	new id = PlayerTrainState[playerid], Float:dist, Float:size_dist, Float:plus;
	//
	dist = GetPlayerDistanceFromPoint(playerid, TrainLocationPos[id][0],TrainLocationPos[id][1],TrainLocationPos[id][2]);
	size_dist = PointToPoint(TrainLocationPos[id-1][0],TrainLocationPos[id-1][1],TrainLocationPos[id-1][2], TrainLocationPos[id][0],TrainLocationPos[id][1],TrainLocationPos[id][2]);
	//
	PlayerTextDrawHide(playerid, DepoPoezdTD[playerid][12]);
	PlayerTextDrawTextSize(playerid, DepoPoezdTD[playerid][12], -(dist/(size_dist/161.633331)) < -162.0 ? -161.633331:-(dist/(size_dist/161.633331)), 12.029629);
	ShowPlayerTD(playerid, DepoPoezdTD[playerid][12]);
	//
	PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][4], TrainLocationName[id]);
    PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][3], id + 1 >= max_trains ? "":TrainLocationName[id + 1]);
	f(global_str, 15, "0%d", id);
	PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][5], global_str);        
	f(global_str, 16, "%0.2f", dist);
    PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][8], global_str);

	switch id do { case 2: plus = 3500.0; case 3: plus = 5500.0; case 4: plus = 7525.0; case 5: plus = 9695.0; }

	PlayerTrainMilage[playerid] = plus + size_dist - dist;

	if(PlayerTrainMilage[playerid] < 0) PlayerTrainMilage[playerid] = 0.0;
		
	f(global_str, 16, "%0.2f", PlayerTrainMilage[playerid]);
	PlayerTextDrawSetString(playerid, DepoPoezdTD[playerid][9], global_str);
		
	if(GetPlayerSpeed(playerid) <= 10 && dist < 40.0)
	{
		PlayerTrainState[playerid] ++;
		if(sizeof(TrainLocationName) == PlayerTrainState[playerid])
			SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Рейс успешно завершен! Заработано за рейс: 5000 AZ Coins"),
			GiveDonate(playerid, 5000),
			TrainDepoBack(playerid);

		else EnableGPSForPlayer(playerid, TrainLocationPos[PlayerTrainState[playerid]][0],  TrainLocationPos[PlayerTrainState[playerid]][1],  TrainLocationPos[PlayerTrainState[playerid]][2]);
	}
}
//
stock UpdateDepoList()
{
	new objectid, showid, count; global_str = "";
	foreach(TrainList, i)
	{
		SetString(mysql_string, PN(i));

		f(global_str, 300, "%s{999999}%d.%s\n", global_str, count+1, mysql_string);

		switch i do { case 11: objectid = 0; case 22: objectid = 1; case 35: objectid = 2; case 47: objectid = 3; }

		if(count == 11 || count == 23 || count == 35 || count == 47) 
			SetDynamicObjectMaterialText(ObjectDepo[objectid], 0, global_str, 140, "Arial", 24, 1, 0xFFFFFFFF, 0, 0), global_str = "";
		
		if(!count) showid = i;
		count++;
	}
	for(new i = count; i < 48; i++)
	{
		f(global_str, 300, "%s{999999}%d.\n", global_str, i+1);

		switch i do { case 11: objectid = 0; case 22: objectid = 1; case 35: objectid = 2; case 47: objectid = 3; }

		if(i == 11 || i == 23 || i == 35 || i == 47) 
			SetDynamicObjectMaterialText(ObjectDepo[objectid], 0, global_str, 140, "Arial", 24, 1, 0xFFFFFFFF, 0, 0), global_str = "";
	}
	if(Iter_Count(TrainList)) return SPD(showid, 4291, DIALOG_STYLE_MSGBOX, "Регистрация на рейс", !"{FFFFFF}Ваша очередь подошла, завершить регистрацию рейса?", !"Выбрать", !"Отмена");
	return false;
}

stock TrainDepoBack(playerid)
{
	PLVEH_destroy(playerid);
	RemovePlayerFromVehicle(playerid);
	DeletePVar(playerid, "ShowTrainTable");
	for(new i; i < 18; i++) DestroyPlayerTD(playerid, DepoPoezdTD[playerid][i]);
	//
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 1);
	UpdatePlayerPos(playerid, -2093.0500,515.1851,1487.6927);
	SetPlayerFacingAngle(playerid, 90.0);
	//
	return false;
}

stock GetPlayerInHouseID(player)
{
	new house = -1;

	if(!GetPlayerVirtualWorld(player))
	{
		new Float:min_dist = 2.0, Float:dist_player = 3.0;
		for(new i; i < OWNABLEHOUSES; i ++)
		{
			dist_player = GetPlayerDistanceFromPoint(player, HouseInfo[i][hEnter_X], HouseInfo[i][hEnter_Y], HouseInfo[i][hEnter_Z]);
			if(min_dist >= dist_player)
				min_dist = dist_player, house = i;
		}
	}
	else house = HouseEntered[player];

	return house;
}

stock SendDonateLink(playerid)
	return SCMF(playerid, COLOR_OLDRED, ">>>{FFFFFF} Пополнить донат счет можно на сайте: %s", Setting_Server[3]);

cmd:faminvite(playerid, params[])
{
	new id = FP_Data[playerid][F_FAMILY_ID], player;
	if(id == -1) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");
	else if(!GetFamilyAcces(PN(playerid), id)) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Эта команда доступна только лидеру и заместителю!");
	else if(strlen(GetFamilyDataString(id, "slogan")) < 3) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Семья еще не настроена! Используйте /fammenu");
	else if(sscanf(params, "u", player)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /faminvite [id]");
	
	if(player == INVALID_PLAYER_ID) return false;
	
	if(!ProxDetectorS(5.0, playerid, player))
		return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, игрок слишком далеко от вас!");

	else if(!(FP_Data[player][F_FAMILY_ID] == -1))
		return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, игрок состоит в другой семьи!");

	else if(PI[player][pLevel] < 2)
	    return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, игрок должен иметь уровень выше 2-го!");

	else if(Int_GetPlayerData(player, !"FamInvited") > Global_Time)
        return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, вы уже приглашали этого игрока!");

	SCMF(player, COLOR_ORANGE, "[Информация] {FFFFFF}Игрок %s[%d] приглашает вас в семью: {c8ec36}%s.", PN(playerid), playerid, GetFamilyDataString(id, "name"));
	SCM(player, -1, !"Введите {c8ec36}/acceptfam{FFFFFF} для того чтобы принять предложение, или {ec4636}/cancelfam{FFFFFF}, чтобы отклонить.");
	SCMF(playerid, COLOR_ORANGE, "[Информация] {FFFFFF}Вы успешно предложили %s[%d] вступить в вашу семью!", PN(player), player);
	
	SetPVarInt(player, !"FamInvitedIDInvite", playerid);
	SetPVarInt(player, !"FamInvited", Global_Time + 120);
	return false;
}

cmd:famuninvite(playerid, params[])
{
	new id = FP_Data[playerid][F_FAMILY_ID];
	if(id == -1)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");

	else if(!GetFamilyAcces(PN(playerid), id))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эта команда доступна только лидеру и заместителю!");

	extract params -> new player:target; else
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используйте: /famuninvite [id]");

	if(target == INVALID_PLAYER_ID)
		return false;

	if(GetFamilyAcces(PN(target), id)) return false;

	if(!(FP_Data[target][F_FAMILY_ID] == FP_Data[playerid][F_FAMILY_ID]))
		return callcmd::fammenu(playerid), SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Произошла ошибка, игрок не состоит в вашей семье!");
		
	format(global_str, 128, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}выгнал из семьи: %s[%d]!", FamilyColor[GetFamilyDataInt(id, "color")][0], PN(playerid), playerid, PN(target), target);
	SendFamilyMessage(id, global_str);
	
	SPDF(target, 0, DIALOG_STYLE_MSGBOX, !"Информация", "{FFFFFF}%s[%d] выгнал вас из семьи: %s.", !"Принять", !"", PN(playerid), playerid, GetFamilyDataString(id, "name"));
	UpdatePlayerDataInt(target, "Family", FP_Data[target][F_FAMILY_ID] = -1);
	
	if(FamilyText[target])
	    DestroyDynamic3DTextLabel(FamilyText[target]),
	    FamilyText[target] = Text3D:false;

	return 1;
}

cmd:setfrank(playerid, data[])
{
	new id = FP_Data[playerid][F_FAMILY_ID];
	
	if(id == -1)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");

	else if(!GetFamilyAcces(PN(playerid), id))
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Эта команда доступна только лидеру и заместителю!");
		
	extract data -> new player:target, rang; else
		return SCM(playerid, COLOR_VALIK, !"Используйте: {FFFFFF}/setfrank [ид игрока/часть ника] [новый ранг: от 1 до 10]");
		
	if(!IsPlayerOnline(target))
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Игрок оффлайн или не авторизовался.");
	
	else if(!(1 <= rang <= 10))
		return SCM(playerid, COLOR_VALIK, !"Используйте: {FFFFFF}/setfrank [ид игрока/часть ника] [новый ранг: от 1 до 10]");
	
	else if(!(FP_Data[playerid][F_FAMILY_ID] == FP_Data[target][F_FAMILY_ID]))
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Этот игрок не из вашей семьи.");
	
	SCMF(playerid, COLOR_LIGHTBLUE, "[Family Rank]{FFFFFF} Вы изменили ранг игроку %s на %s (Был: %s)", PN(target), GetFamilyDataArrayString(id, "rank", rang), GetFamilyDataArrayString(id, "rank", FP_Data[target][F_FAMILY_RANG]));
	SCMF(target, COLOR_LIGHTBLUE, "[Family Rank]{FFFFFF} Лидер семьи %s изменил ваш ранг на %s (Был: %s)", PN(playerid), GetFamilyDataArrayString(id, "rank", rang), GetFamilyDataArrayString(id, "rank", FP_Data[target][F_FAMILY_RANG]));

	return UpdatePlayerDataInt(target, "FamilyRang", FP_Data[target][F_FAMILY_RANG] = rang);
}

cmd:acceptfam(playerid)
{
	if(Int_GetPlayerData(playerid, !"FamInvited") < Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам никто не отправлял предложения вступить в семью!");

	new player = Int_GetPlayerData(playerid, !"FamInvitedIDInvite");
	
	if(!ProxDetectorS(5.0, playerid, player))
		return SCM(player, COLOR_RED, !"[Ошибка] {FFFFFF}Вы слишком далеко от игрока, которого пригласили в семью!"),
 	  		   SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы слишком далеко от игрока, который пригласил вас в семью!"),
			   DeletePVar(playerid, !"FamInvited");
	
	SQL("UPDATE accounts SET Family = %d, FamilyRang = 1 WHERE ID = %d;", FP_Data[playerid][F_FAMILY_ID] = FP_Data[player][F_FAMILY_ID], PI[playerid][pID]);
	
	new id = FP_Data[playerid][F_FAMILY_ID];
	format(global_str, 256, "{%s}[Семья (Новости)] %s[%d]: {B9C1B8}пригласил в семью нового члена: %s[%d]!", FamilyColor[GetFamilyDataInt(id, "color")][0], PN(player), player, PN(playerid), playerid);
	SendFamilyMessage(id, global_str);

	SCMF(player, COLOR_ORANGE, "[Информация] {FFFFFF}%s[%d] принял ваше предложение вступить в семью!", PN(playerid), playerid);
	SCMF(playerid, COLOR_ORANGE, "[Информация] {FFFFFF}Вы успешно принял предложение вступить в семью: {e39f20}%s", GetFamilyDataString(id, "name"));

	SCM(playerid, -1, !"Используйте команду /fammenu для подробной информации.");

	DeletePVar(playerid, !"FamInvitedIDInvite"), DeletePVar(playerid, !"FamInvited");
	return UpdateFamilyText(playerid, id);
}

cmd:cancelfam(playerid)
{
	if(Int_GetPlayerData(playerid, !"FamInvited") < Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вам никто не отправлял предложения вступить в семью!");
		
	SCMF(Int_GetPlayerData(playerid, !"FamInvitedIDInvite"), COLOR_RED, "[Информация] {FFFFFF}Игрок %s[%d] отказался от вашего предложения на вступление в семью!", PN(playerid), playerid);
	SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно отказались от вступления в семью!");

	DeletePVar(playerid, !"FamInvited");
	return DeletePVar(playerid, !"FamInvitedIDInvite");
}

cmd:famdisband(playerid)
{
	if(FP_Data[playerid][F_FAMILY_ID] == -1) 
		return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");

	new id = FP_Data[playerid][F_FAMILY_ID];

	if(!GetString(GetFamilyDataString(id, "ownername"), PN(playerid)))
		return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Доступно только лидеру семьи!");

	return SPD(playerid, 8887, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы действительно хотите расформировать свою семью?\n\n{BE2D2D}В случае если вы ее расформируете, то все игроки состоявшие в ней будут выгнаны, а вы\nпотеряете лидерство в вашей семье и не сможете ею управлять!\n\n", !"Принять", !"Отмена");
}

cmd:fammenu(playerid)
{
	if(FP_Data[playerid][F_FAMILY_ID] == -1) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");
	return ShowFamilyDialog(playerid, 0, FP_Data[playerid][F_FAMILY_ID]);
}

cmd:fam(playerid, params[])
{
	new id = FP_Data[playerid][F_FAMILY_ID];
	
	if(FP_Data[playerid][F_FAMILY_ID] == -1) return SCM(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");
	else if(sscanf(params, "s[128]", global_str)) return SCM(playerid, COLOR_OLDRED, "Используйте: /fam [text]");
	else if(Int_GetPlayerData(playerid, "nakaztimer") > Global_Time) return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Не флуди!");
	Int_SetPlayerData(playerid, "nakaztimer", Global_Time + 5);
	
	format(global_str, 256, "{%s}[Семья] %s %s[%d]:{B9C1B8} %s", FamilyColor[GetFamilyDataInt(id, "color")][0], GetFamilyDataArrayString(id, "rank", FP_Data[playerid][F_FAMILY_RANG]), PN(playerid), playerid, global_str);
	return SendFamilyMessage(id, global_str);
}

stock GetFamilyAcces(name[], id)
{
	f(mysql_string, 128, "SELECT `ownername`, `zam_1`, `zam_2`, `zam_3` FROM family WHERE ID = %d", id);
	new access, Cache:result = mysql_query(mysql, mysql_string), string[24];
	
	for(new i; i < 4; i++)
	{
		if(cache_num_rows())
		{
			cache_get_value_index(0, i, string);
			if(GetString(name, string) && !isnull(string)) access = (!i ? 2 : 1);
		}
	}

	cache_delete(result);
	return access;
}

public: CreateFamilyBase(playerid)
	UpdatePlayerDataInt(playerid, "Family", FP_Data[playerid][F_FAMILY_ID] = cache_insert_id());

stock UpdateFamily_Data(id, update_string[])
{
	format(global_str, 512, "UPDATE family SET %s WHERE ID = %d", update_string, id);
	mysql_query(mysql, global_str);
	return false;
}

stock LoadFamilyDataPlayer(playerid, id)
{
	new Cache:result = mysql_query(mysql, (str_f("SELECT `percent_deposit`, `spawn_data`, `spawn_type` FROM family WHERE ID = %d", id)));
	cache_get_value_name_int(0, "percent_deposit", FP_Data[playerid][F_FAMILY_PERCENT_DEPOSIT]);
	cache_get_value_name_int(0, "spawn_data", FP_Data[playerid][F_FAMILY_SPAWN_DATA]);
	cache_get_value_name_int(0, "spawn_type", FP_Data[playerid][F_FAMILY_SPAWN_TYPE]);
	cache_delete(result);
	return UpdateFamilyText(playerid, id);
}

stock UpdateFamilyText(playerid, id)
{
	if(GetFamilyDataInt(id, "jackdaw")) global_str = "[$]";
	else if(GetFamilyDataInt(id, "brend")) global_str = "©";
	else global_str = "";
	
	format(global_str, 64, "%s {%s}%s {FFFFFF}%s", global_str, FamilyColor[GetFamilyDataInt(id, "color")][0], GetFamilyDataString(id, "name"), FamilyType_EN[GetFamilyDataInt(id, "type")]);
	if(!FamilyText[playerid])
		FamilyText[playerid] = CreateDynamic3DTextLabel(global_str, -1, 0.0, 0.0, 0.05, 10.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1);
	else
		UpdateDynamic3DTextLabelText(FamilyText[playerid], -1, global_str);
		
	return false;
}

stock GetFamilyDataInt(id, mysql_table[])
{
	f(mysql_string, 128, "SELECT `%s` FROM family WHERE ID = %d", mysql_table, id);
	new int, Cache:result = mysql_query(mysql, mysql_string);
 	
	if(cache_num_rows())
		cache_get_value_index_int(0, 0, int);
	
	cache_delete(result);
	return int;
}

stock GetFamilyDataString(id, mysql_table[])
{
	f(mysql_string, 128, "SELECT `%s` FROM family WHERE ID = %d", mysql_table, id);
	new str[40], Cache:result = mysql_query(mysql, mysql_string);
    
	if(cache_num_rows())
		cache_get_value_index(0, 0, str);
	
	cache_delete(result);
	return str;
}

stock GetFamilyDataArrayString(id, const mysql_table[], array_num)
{		
	f(mysql_string, 128, "SELECT `%s` FROM family WHERE ID = %d", mysql_table, id);
	
	new string[50], Cache:result = mysql_query(mysql, mysql_string);
	
	if(cache_num_rows())
		cache_get_value_index(0, 0, SQL_STRING),
		sscanf(SQL_STRING, "p<,>a<s[128]>[10]", SQL_GET_ROW_STR),
		SetString(string, SQL_GET_ROW_STR[array_num-1]);
		
	cache_delete(result);
	
	return string;
}

stock CheckFamilyLevel(playerid, list)
{
	new id = FP_Data[playerid][F_FAMILY_ID], kvId = GetFamilyDataInt(id, "kv_id");
						
	if(id == -1) 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!"), false;
						
	else if(kvId == -1 or !FKV_Data[kvId][kvLevel][list])
		return SCMF(playerid, COLOR_RED, "[Ошибка]{FFFFFF} У вашей семьи нет улучшения: \'%s\'", FamilyLevelName[list]), false;
							
	return true;
}

stock ShowFamilyDialog(playerid, dialog, id, listitem = 0)
{
	f(mysql_string, 128, "SELECT * FROM family WHERE ID = %d", id);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	static FamLeader[24], FamName[32], slogan[40], FamDiscord[64], FamZam[3][24], FamColor, FamType, FamRep, FamSpawnType, FamSpawnData,
 	FamLevel, FamExp, FamJackDaw, FamBrend, FamPercentDeposit, FamKV;

    cache_get_value_name(0, "name", FamName); // Имя Фамы
    cache_get_value_name(0, "slogan", slogan); // Слоган Фамы
	cache_get_value_name(0, "ownername", FamLeader); // Лидер семьи
	cache_get_value_name(0, "discord", FamDiscord); // Discord семьи
	cache_get_value_name(0, "zam_1", FamZam[0]); // Зам семьи
	cache_get_value_name(0, "zam_2", FamZam[1]); // Зам1 семьи
	cache_get_value_name(0, "zam_3", FamZam[2]); // Зам2 семьи
	cache_get_value_name(0, "rank", SQL_STRING), sscanf(SQL_STRING, "p<,>a<s[128]>[10]", SQL_GET_ROW_STR); // Названия рангов в фаме
	
    cache_get_value_name_int(0, "color", FamColor); // Цвет фамы || FamilyColor
    cache_get_value_name_int(0, "type", FamType);// Тип фамы
	cache_get_value_name_int(0, "reputation", FamRep);// Репка фамы
	cache_get_value_name_int(0, "level", FamLevel);// Уровень фамы
	cache_get_value_name_int(0, "exp", FamExp);// Опыт фамы
	cache_get_value_name_int(0, "jackdaw", FamJackDaw);// Галка фамы
	cache_get_value_name_int(0, "brend", FamBrend);// Бренд фамы
	cache_get_value_name_int(0, "percent_deposit", FamPercentDeposit); // Процент в казну с депозита
	cache_get_value_name_int(0, "kv_id", FamKV); // Семейная квартира
	cache_get_value_name_int(0, "spawn_data", FamSpawnData); // Ид для спавна
	cache_get_value_name_int(0, "spawn_type", FamSpawnType); // Тип спавна семьи
		
	new Access = GetFamilyAcces(PN(playerid), id); // Проверка доступа к фаме у игрока

	if(dialog) ShowFamilyMenu(playerid, false);

	switch dialog do
	{
		case 0: // fammenu
		{
		    if (isnull(FamName))
				SPD(playerid, 493, DIALOG_STYLE_LIST, !"Настройки семьи", !"Название семьи: {c0eb6b}[Нет названия]\nСлоган семьи: {eb6b6b}[Нет слогана]", !"Принять", !"Отмена");
			else if (isnull(slogan))
			    SPDF(playerid, 493, DIALOG_STYLE_LIST, !"Настройки семьи", "Название семьи: {c0eb6b}%s\nСлоган семьи: {eb6b6b}[Нет слогана]", !"Принять", !"Отмена", FamName);
            else
				ShowFamilyMenu(playerid, true);
			
		}
		case 1:
		{
			switch listitem do
	        {
				case 0: SPD(playerid, 494, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}Введите будущее название вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина названия от 5-ти до 15 символов.\n{FFFFFF}2. {dda64d}Название семьи должно быть в именительном падеже.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}При нарушении этих правил, ваша семья будет удалена!\n\n", !"Принять", !"Отмена");
				case 1:
				{
					if (isnull(FamName)) SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Сначала укажите название семьи!"), SPD(playerid, 494, DIALOG_STYLE_INPUT, "", "\n\n{FFFFFF}Введите будущее название вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина названия от 5-ти до 15 символов.\n{FFFFFF}2. {dda64d}Название семьи должно быть в именительном падеже.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}При нарушении этих правил, ваша семья будет удалена!\n\n", !"Принять", !"Отмена");
					else SPD(playerid, 495, DIALOG_STYLE_INPUT, !"", !"\n\n{FFFFFF}Введите слоган вашей семьи.\n\n{f2a425}Критерии:\n\n{FFFFFF}1. {dda64d}Длина слогана от 15 до 40 символов.\n{FFFFFF}2. {dda64d}Слоган (Девиз) нельзя нарушать.\n{FFFFFF}3. {dda64d}Не должно быть нормативной лексики\n\n{FFFFFF}Примеры: \n\n1. {dda64d}Семья, долг, честь\n{FFFFFF}2. {dda64d}Непресклонные, несгибаемые, несдающиеся\n{FFFFFF}3. {dda64d}Мудрость и сила\n\n", !"Принять", !"Отмена");
				}
			}
		}
		case 2:
		{
		    switch listitem do
		    {
		        case 0:
				{
				    if(!Access) SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только лидеру или заместителям семьи!");
					else
					{
					    format(global_str, 1024, "\
						{FFFFFF}1.{D4D4D4} Пригласить в семью.\n\
						{FFFFFF}2.{D4D4D4} Выгнать из семьи.\n\
						{FFFFFF}3.{D4D4D4} Заместитель: %s\n\
						{FFFFFF}4.{D4D4D4} Заместитель 2: %s\n\
						{FFFFFF}5.{D4D4D4} Изменить цвет семьи/рации.\n\
						{FFFFFF}6.{D4D4D4} Изменить описание/обьявление для семьи.\n\
						{FFFFFF}7.{D4D4D4} Изменить тип семьи.\n\
						{FFFFFF}8.{D4D4D4} Discord семьи [%s{D4D4D4}]\n\
						{FFFFFF}9.{D4D4D4} Передать права лидера семьи\n\
						{FFFFFF}10.{D4D4D4} Изменить название семьи\n\
						{FFFFFF}11.{D4D4D4} Изменить слоган семьи\n\
						{FFFFFF}12.{D4D4D4} Установить спавн семьи в своём доме\n\
						{FFFFFF}13.{D4D4D4} Процент списания в бюджет с депозитов состава: 0%\n\
						{FFFFFF}14.{D4D4D4} Настройка рангов\n\
						{D4D4D4}[{FD4C4C}X{D4D4D4}] Распустить семью(удалить)",
						isnull(FamZam[0]) ? "{B3DC52}[Выбрать заместителя]":(strins(FamZam[0], "{ED993F}", 0, 24), FamZam[0]),
						isnull(FamZam[1]) ? "{B3DC52}[Выбрать заместителя]":(strins(FamZam[1], "{ED993F}", 0, 24), FamZam[1]),
						isnull(FamDiscord) ? "{FD4D4D}Нет":(strins(FamDiscord, "{D1FD4D}", 0, 64), FamDiscord));
						
						SPD(playerid, 2921, DIALOG_STYLE_LIST, !"Панель управления", global_str, !"Принять", !"Назад");
					}
				}
				case 2:
				{
					format(global_str, 1024, "{FFFFFF}\n\n\
					Название семьи: {%s}%s{FFFFFF}\n\
					Тип семьи: {%s}%s{FFFFFF}\n\
					Репутация семьи: {%s}%d очк.{FFFFFF}\n\
					Зловещая репутация семьи: {%s}0 очк.{FFFFFF}\n\
					Уровень семьи: {%s}%d [%d/%d]{FFFFFF}\n\n\
					Идёт в казну с депозитов членов семьи: {%s}%d%%{FFFFFF}\n\
					Местоположение спавна: {%s}%s{FFFFFF}\n\
					Денег в бюджете семьи: {%s}0${FFFFFF}\n\
					Discord: {%s}[ %s ]{FFFFFF}\n\n\
					Лидер семьи: {%s}%s{FFFFFF}\n\
					Заместитель: {%s}%s{FFFFFF}\n\
					Заместитель 2: {%s}%s{FFFFFF}\n\
					Заместитель 3: {%s}%s{FFFFFF}\n\n\
					Слоган: {%s}%s{FFFFFF}\n\
					Содержание: {%s}0 репутации каждый PayDay{FFFFFF}\n\
					Квартира: {%s}0 репутации каждый PayDay\n\n\
					{FFFFFF}Альянсы:\n\
					{FFFFFF}--------\n\
					{FFFFFF}--------\n\
					{FFFFFF}--------\n\n\
					Обьявление: {FFFFFF}[{FF8859}Нет{FFFFFF}]\n\n \n \n \n",
					FamilyColor[FamColor][0], FamName,
					FamilyColor[FamColor][0], FamilyType_EN[FamType],
					FamilyColor[FamColor][0], FamRep,
					FamilyColor[FamColor][0],
					FamilyColor[FamColor][0], FamLevel, FamExp, FamLevel*10,
					FamilyColor[FamColor][0], FamPercentDeposit,
					FamilyColor[FamColor][0], !(FamSpawnData == -1) ? ( !FamSpawnType ? "Семейная квартира":(str_f("Дом №%d", FamSpawnData)) ):"Нет",
					FamilyColor[FamColor][0],
					FamilyColor[FamColor][0], isnull(FamDiscord) ? "Нет":FamDiscord,
					FamilyColor[FamColor][0], FamLeader,
					FamilyColor[FamColor][0], strlen(FamZam[0]) > 2 ? FamZam[0]:"{FFFFFF}[{FF8859}Нет{FFFFFF}]",
					FamilyColor[FamColor][0], strlen(FamZam[1]) > 2 ? FamZam[1]:"{FFFFFF}[{FF8859}Нет{FFFFFF}]",
					FamilyColor[FamColor][0], strlen(FamZam[2]) > 2 ? FamZam[2]:"{FFFFFF}[{FF8859}Нет{FFFFFF}]",
					FamilyColor[FamColor][0], slogan,
					FamilyColor[FamColor][0],
					FamilyColor[FamColor][0]);

					SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация о семье", global_str, !"Принять", !"");
				}
				case 3:
				{
					new count = 1;
					
					global_str = "(ранг) Ник\tУровень\tАФК\t{FFBE16}Семейный квест\n\n";
					
					foreach(Player, i)
					{
						if(FP_Data[i][F_FAMILY_ID] == FP_Data[playerid][F_FAMILY_ID])
							format(mysql_string, 128, "(%d) %s[%d]\t%d\t%d\t0/3\n", count, PN(i), i, PI[i][pLevel], PlayerAFKTime[i]),
							strcat(global_str, mysql_string),
							count++;
					}
					SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, !"", global_str, !"Принять", !"Отмена");
				}
				
				case 6: SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}\n\n1.{DDA64D} Чат семьи(рация) - /fam [text]\n{FFFFFF}2.{DDA64D} /phone - menu - настройки (Откл/Вкл рацию)\n{FFFFFF}3.{DDA64D} Выгнать из семьи(оффлайн) - /famoffkick\n{FFFFFF}4.{DDA64D} Выдать бан семейного чата - /fammute\n{FFFFFF}5.{DDA64D} Снять бан семейного чата - /famunmute\n{FFFFFF}6.{DDA64D} Быстрый инвайт в семью - /faminvite\n{FFFFFF}7.{DDA64D} Быстрое увольнение - /famuninvite\n{FFFFFF}8.{DDA64D} Члены семьи онлайн - /fmembers\n{FFFFFF}9.{DDA64D} Изменить ранг члену семьи - /setfrank\n{FFFFFF}10.{DDA64D} Чат альянса - (/al)liance\n\n{D1FD4D}Обратите Внимание! Семье необходимо платить за её содержание!\nПлата репутацией зависит от многих факторов, основным является\nколичество людей, которые состоят в семье.\n\nСемьи, которые занимают топ 1 позицию рейтинга по развитию,\nколичеству людей или влиятельности получают 10 репутации\nкаждый Payday. Посмотреть рейтинг можно у входа в любой ЖК.", !"Принять", !"");
				
				case 7: 
				{
					if(FamKV == -1)
						SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вашей семьи нету семейной квартиры!");
					else
					{
						format(global_str, 1024, "\
							{FFFFFF}[1]{D4D4D4} Информация о квартире.\n\
							{FFFFFF}[2]{D4D4D4} Открыть/закрыть квартиру.\n\
							{FFFFFF}[3]{D4D4D4} Закупить 50 аптечек {FFFFFF}[ 50 репутации ]\n\
							{FFFFFF}[4]{D4D4D4} Закупить 20 бронежилетов {FFFFFF}[ 100 репутации ]\n\
							{FFFFFF}[5]{D4D4D4} Положить деньги на склад семьи\n\
							{FFFFFF}[6]{D4D4D4} Взять деньги со склада семьи\n\
							{FFFFFF}[7]{D4D4D4} Положить семейные монеты на склад семьи\n\
							{FFFFFF}[8]{D4D4D4} Взять семейные монеты со склада семьи\n\
							{FFFFFF}[9]{D4D4D4} Улучшения для семьи\n\
							{ffffff}[10]{D4D4D4} Оплатить налог на квартиру [$%i / $1200000]\n\
							{ffffff}[11]{D4D4D4} Ранг сбора денег с территорий: 1 ранг\n\
							{ffffff}[12]{D4D4D4} Сделать личный автомобиль семейным\n\
							{ffffff}[13]{D4D4D4} Сделать семейный автомобиль личным\n\
							{D4D4D4}[{FD4C4C}X{D4D4D4}] Продать семейную квартиру\n\
							{D4D4D4}[{FD4C4C}X{D4D4D4}] Продать семейную квартиру другой семье",
							
							FKV_Data[FamKV][kvNalog]
						);
						
						SPD(playerid, 2763, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Назад");
					}
				}
				
				case 8:
				{
					if(!FamJackDaw)
						SPD(playerid, 8890, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}- Покупка галочки для семьи\n\nСемья, которая официально подтверждена имеет:\n\n{82cb43}- Специальный знак, подтверждающий запатентованность семьи.\n- Возможность влияния на расформ, семьи, которая копировала названия вашей.\n- Возможность терять в 2-а раза меньше репутации при наказании членов семьи.\n- Возможность пользоваться депозитом в любое время суток.\n{FFFFFF}Стоимость галочки: {f7d83f}50 000 000$\nНажмите Enter {FFFFFF}для подтверждения покупки!", !"Принять", !"Отмена");
					
					else SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас уже есть галочка!");
				}
				case 9:
				{
					if(!FamBrend)
						SPD(playerid, 8889, DIALOG_STYLE_MSGBOX, !"", !"{FFFFFF}Покупка бренда для семьи\n\nСемья, которая владеет брендом имеет:\n\n{82cb43}- Специальный знак, выделеляя вас от других семей.\n- Повышенные шансы получения рулеток в собирателях и дерби.\n- Семейный адвокат сможет с вероятностью 50 процентов освободить вас от TCP.\n- Доступ к информационному центру через телефон.\n- Возможность владения одним домом больше!\n{FFFFFF}Стоимость бренда: {f7d83f}80 000 000$\nНажмите Enter {FFFFFF}для подтверждения покупки!", !"Принять", !"Отмена");

					else SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас уже есть бренд!");
				}
				case 10:
				{
	   				if(Access == 2)
	 					SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Лидер не может покинуть семью!");
					else
						SPD(playerid, 8888, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы действительно хотите покинуть свою семью?\n\n{BE2D2D}В случае если вы ее покинете, вы потеряете все возможности, которые предоставляет система семей!\n\n", !"Принять", !"Отмена");
				}
				case 11: SPDF(playerid, 15208, DIALOG_STYLE_LIST, !"Война за территории", "{FFFFFF}Карта территорий\n{E65075}Предстоящие встречи\n{FFFFFF}Список всех встреч\nНаши территории\n{cccccc}Полезная информация\nРазрешено ходить на встречи с %i-го ранга", !"Выбрать", !"Назад", GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "rank_capture"));
		    }
		}
		case 3:
		{
		    switch listitem do
		    {
				case 0: SPD(playerid, 2928, DIALOG_STYLE_INPUT, !"Пригласить в семью", !"{FFFFFF}Введите в окошко {3667EC}id{FFFFFF} игрока, которого хотите пригласить к себе в семью!\n{3667EC}- Игрок должен находиться рядом с вами.", !"Принять", !"Отмена");
				case 1: SPD(playerid, 2930, DIALOG_STYLE_INPUT, !"Выгнать из семьи", !"{FFFFFF}Введите в окошко {ECBF36}id{FFFFFF} игрока, которого хотите уволить из семьи!\n{ECBF36}- Игрок должен находиться в вашей семье.", !"Принять", !"Отмена");
				
  				case 2: SPDF(playerid, 2924, DIALOG_STYLE_INPUT, !"Изменить заместителя", "{FFFFFF}\n\nТекущий заместитель: %s{FFFFFF}\n\nВведите в строку ид игрока, который состоит в вашей семье,\nдля того чтобы назначить его заместителем и дать ему панель управления.\nДля того чтобы убрать заместителя, введите свой id.\n\n\n", !"Принять", !"Назад", isnull(FamZam[0]) ? "{B3DC52}[Нет]":(strins(FamZam[0], "{ED993F}", 0, 24), FamZam[0]));
				case 3: SPDF(playerid, 2124, DIALOG_STYLE_INPUT, !"Изменить заместителя", "{FFFFFF}\n\nТекущий заместитель 2: %s{FFFFFF}\n\nВведите в строку ид игрока, который состоит в вашей семье,\nдля того чтобы назначить его заместителем и дать ему панель управления.\nДля того чтобы убрать заместителя, введите свой id.\n\n\n", !"Принять", !"Назад", isnull(FamZam[1]) ? "{B3DC52}[Нет]":(strins(FamZam[1], "{ED993F}", 0, 24), FamZam[1]));
				
		        case 4: SPD(playerid, 2922, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\n- Цвет семьи, функция которая даст вам возможность сделать небольшое отличие от других семей!\nЦвет семьи используется:\n\n{F58558}- В рации семьи.\n- В статистике семьи.\n- В названии семьи, над головой персонажа.\n- Система будет дополнятся в процессе обновлений.{FFFFFF}\n\nВведите в окошко цифру, цвет которой вам нравится больше всего:\n{FF5E5E}0, {FFFFFF}1, {E65075}2, {EFA4B7}3, {905B69}4, {D052CE}5, {FF00FC}6, {5D395D}7, {8E38EA}8, {6B21BB}9,{2F00FF}10, {7456F8}11, {5287F1}12, {1DBAF2}13, {308EB0}14, {30B061}15, {20F271}16, {107135}17, {47EB2A}18, {9EE991}19, {C2D95E}20, {D1FF00}21, {7B9022}22, {FFC900}23, {E8CA60}24, {6B5B1F}25, {FF8400}26, {C04312}27, {5C4C45}28, {373534}29, {351204}30.\n\n\n", !"Принять", !"Назад");
				
				case 5:
				{
					global_str = "";
					
					for(new i; i < sizeof(FamilyType_EN); i++)
					{
						format(mysql_string, 64, "{D4D4D4}[%s{D4D4D4}] %s%s\n", FamType == i ? "{8DFD4C}+":"{FD4C4C}-", FamilyType_EN[i], GetString(FamilyType_EN[i],FamilyType_RU[i]) ? "":(str_f(" (%s)", FamilyType_RU[i])) );
						
						strcat(global_str, mysql_string);
					}
					
					SPD(playerid, 7521, DIALOG_STYLE_LIST, !"", global_str, !"Принять", !"Отмена");
				}
				
				case 6:
				{
					if(FamKV == -1 or !FKV_Data[FamKV][kvLevel][9])
						SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вашей семьи нет улучшения: \'Трейтий заместитель\'");
					else
						SPDF(playerid, 2925, DIALOG_STYLE_INPUT, !"Изменить заместителя", "{FFFFFF}\n\nТекущий заместитель 3: %s{FFFFFF}\n\nВведите в строку ид игрока, который состоит в вашей семье,\nдля того чтобы назначить его заместителем и дать ему панель управления.\nДля того чтобы убрать заместителя, введите свой id.\n\n\n", !"Принять", !"Назад", isnull(FamZam[2]) ? "{B3DC52}[Нет]":(strins(FamZam[2], "{ED993F}", 0, 24), FamZam[2]));
				}
				
				case 7: SPD(playerid, 2994, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}\n\nВведите в окошко {ECBF36}номер{FFFFFF} вашего Discord, который хотите использовать для общения с семьей!\n\n\n{ECBF36}- Номер, будет отображаться в описании семьи!\nЕсли вы не знаете, что такое Discord, то рекомендуем\nне указывать его номер!\n\n", !"Принять", !"Отмена");
				case 10: SPD(playerid, 9425, DIALOG_STYLE_INPUT, !"", "\n\n{FFFFFF}Введите слоган вашей семьи.\n\n{F2A425}Критерии:\n\n{FFFFFF}1.{DDA64D} Длина слогана 15 до 40 символов.\n{FFFFFF}2.{DDA64D} Слоган(Девиз) нельзя нарушать.\n{FFFFFF}3.{DDA64D} Не должно быть ненормативной лексики\n\n{FFFFFF}Примеры:\n\n1.{DDA64D} Семья, долг, честь\n{FFFFFF}2.{DDA64D} Непреклонные, несгибаемые, несдающиеся\n{FFFFFF}3.{DDA64D} Мудрость и сила\n\n{FFFFFF}Стоимость: {FF6D33}500 AZ Coins ", !"Принять", !"Отмена");			
				case 12: SPDF(playerid, 15018, DIALOG_STYLE_INPUT, !"Установка процента на депозит состава", "{ffffff}Текущий процент: {d4d4d4}%d%%\n{ffffff}Укажите процент, сколько будет идти в бюджет семьи: (до 25%%)\n\n{cccccc}С каждого начисления на депозит игроков этот процент будет идти в бюджет семьи.", !"Изменить", !"Назад", FamPercentDeposit);
				case 11: ShowHouseDialog(playerid, 3);
				case 13:
				{
					global_str = "";
					
					for(new i; i < 10; i++)
						format(global_str, 1024, "%s[%d] %s\n", global_str, i + 1, SQL_GET_ROW_STR[i]),
						String_SetPlayerData(playerid, "listitem", i, SQL_GET_ROW_STR[i]);
					
					SPD(playerid, 15022, DIALOG_STYLE_LIST, !"Ранги семьи", global_str, !"Выбрать", !"Назад");
				}
				case 15: 
				{
					if(!GetString(PN(playerid), FamLeader)) 
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Передать лидерство семьи может только её владелец.");
						 
					SPD(playerid, 1924, DIALOG_STYLE_INPUT, !"Передать лидерство", !"{FFFFFF}Введите в строку ид игрока, который состоит в вашей семье,\nдля того чтобы назначить его лидером и передать ему всю панель управления.\nСтоимость: {FFB828}2000 AZ Coins", !"Принять", !"Назад");
				}
			}
		}
	}

	cache_delete(result);
	return false;
}

stock ShowFamilyMenu(playerid, bool:status = true, id = 0)
{
	if(!status)
	{
		if(FamilyOpen{playerid})
		{
			for(new i = 0; i < 93; i++)
			DestroyPlayerTD(playerid, FamMenu[playerid][i]);
		}

		CancelSelectTextDraw(playerid);
	}
	else
	{
		new count = 0;
		
		switch id do
		{
			case 0: count = 93;
			case 1: count = 83;
			case 2: count = 57;
		}
		
		if(FamilyOpen{playerid})
		{
			for(new i = 0; i < 93; i++)
			DestroyPlayerTD(playerid, FamMenu[playerid][i]);
		}
	
		#include "../library/fammenu"
		
		for(new i = 0; i < count; i++)
			ShowPlayerTD(playerid, FamMenu[playerid][i]);

		SelectTextDraw(playerid, 0xA52A2AFF);
	}

	FamilyOpenID[playerid] = id;
	return FamilyOpen{playerid} = status;
}

stock ApplyFamilyFunction(playerid, functionid)
{
	switch FamilyOpenID[playerid] do
	{
		case 0:
		{	
			switch functionid do
			{
				case 75: ShowFamilyMenu(playerid, false);
				case 88: 
				{
					if(!GetFamilyAcces(PN(playerid), FP_Data[playerid][F_FAMILY_ID])) 
				    	return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Доступно только лидеру или заместителям семьи!");
						
					ShowFamilyMenu(playerid, true, 1);
				}
				case 86: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 2);
				case 85: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 3);
				case 82: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 6);
				case 81: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 7);
				case 80: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 8);
				case 79: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 9);
				case 78: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 10);
				case 77: ShowFamilyDialog(playerid, 2, FP_Data[playerid][F_FAMILY_ID], 11);
				case 76: ShowFamilyMenu(playerid, true, 2);
			}
		}
		
		case 1:
		{
			switch functionid do
			{
				case 77: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 0);
				case 76: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 1);
				case 75: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 2);
				case 74: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 3);
				case 73: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 4);
				case 71: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 5);
				case 70: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 6);
				case 69: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 7);
				case 67: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 10);
				case 66: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 11);
				case 65: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 12);
				case 64: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 13);
				case 62: ShowFamilyDialog(playerid, 3, FP_Data[playerid][F_FAMILY_ID], 15);
			}
		}
		
		case 2:
		{
			switch functionid do
			{
				case 49:
					ShowFamilyMenu(playerid, false, 2), SPDF(playerid, 15232, DIALOG_STYLE_INPUT, !"Обмен семейных монет на деньги", "{ffffff}Укажите количество семейных монет, которые хотите обменять на деньги:\n\nКурс обмена: {ffff00}1 семейная монета = $2000\n{ffffff}У вас есть: {ffff00}%d семейных монет", !"Обмен", !"Назад", GetCount(playerid, 1722));
				
				case 3..47:
				{
					new id = (47 - functionid)/2, ItemId = FamilyShop[id][F_S_ItemId];
					
					if(ItemId)
					{
						spdList(playerid, 0, id);
						
						format(global_str, 1024, "\
							{FFFFFF}%s\n\
							%s\n\n\n\
							{ffffff}Стоимость: {ffff00}%d семейных монет\n\
							{ffffff}Вы действительно хотите купить это?",
							ItemsInfo[ItemId][itemName],
							GetItemStory(playerid, ItemId),
							FamilyShop[id][F_S_Cost]
						);
						
						SPD(playerid, 15234, DIALOG_STYLE_MSGBOX, !"Подтверждение покупки", global_str, !"Купить", !"Назад");
						
						ShowFamilyMenu(playerid, false, 2);
					}
					else
						SCMF(playerid, COLOR_VALIK, "Скоро появится в продаже по цене %d семейных монет!", FamilyShop[id][F_S_Cost]);
				}
			}
		}
	}

	return true;
}

stock SendFamilyMessage(id, msg[])
{
	foreach(Player, i)
	{
	    if(FP_Data[i][F_FAMILY_ID] == id)
	        SCM(i, 0xB9C1B8FF, msg);
	}
	return false;
}

cmd:buyfam(playerid)
{
	new id = FP_Data[playerid][F_FAMILY_ID];
	
	if(id == -1)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");
	
	else if(!GetFamilyAcces(PN(playerid), id)) 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Эта команда доступна только лидеру и заместителю!");
	
	else if(!(GetFamilyDataInt(id, "kv_id") == -1))
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У вашей семьи уже есть семейная квартира.");
	
	new kv = FP_Data[playerid][F_FAMILY_PICK_KV];
	
	if(kv == -1 or !GetPlayerDistanceFromPickup(2.0, playerid, FKV_Data[kv][kvPickup]))
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы должны находится возле семейной квартиры которую хотите купить.");
		
	else if(GetFamilyDataInt(id, "reputation") < 10000)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}На счету вашей семьи меньше 10000 очков репутации.");
	
	SQL("UPDATE family_kv SET family_id = %d WHERE ID = %d;", id, FKV_Data[kv][kvSqlId]);
	
	UpdateFamilyData(id, "kv_id = %d, reputation = `reputation` - 10000", kv);
	
	SendFamilyMessage(id, (str_f("{%s}[Семья (Новости)] %s[%d]: {FFFFFF}купил квартиру для семьи!", FamilyColor[GetFamilyDataInt(id, "color")][0], PN(playerid), playerid)));
	
	foreach(Player, i)
	{
		if(!(id == FP_Data[i][F_FAMILY_ID])) continue;
		
		FP_Data[i][F_FAMILY_SPAWN_DATA] = kv;
		FP_Data[i][F_FAMILY_SPAWN_TYPE] = 0;
	}
	
	UpdateFamilyData(id, "`spawn_type` = 0, `spawn_data` = %d", kv);
	
	FKV_Data[kv][kvFamilyId] = id;
	
	UpdateFamilyKV(kv);
	
	return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n \n{FFFFFF}Вы успешно купили квартиру для своей семьи.\n ", !"Закрыть", !"");
}

stock EnterFamilyKV(playerid, kv_id)
{
	FP_Data[playerid][F_FAMILY_PICK_KV] = kv_id;
	
	if(!FKV_Data[kv_id][kvFamilyId])
	{
		SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Семейная квартира продается, если вы лидер или заместитель");
		SCM(playerid, -1, !"одной из семей, то вы можете, приобрести эту квартиру за очки репутации.");
		return SCM(playerid, -1, !"Для покупки используйте команду: {D36782}/buyfam");
	}
	else if(FKV_Data[kv_id][kvStatus])
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Дверь закрыта, зайти невозможно.");
	
	new int_id = FKV_Data[kv_id][kvDataId];
		
	SetPlayerInterior(playerid, FKV_Data_Int[int_id][kvInterior]);
	SetPlayerVirtualWorld(playerid, FKV_Data[kv_id][kvSqlId] + 1);

	return UpdatePlayerPos(playerid, FKV_Data_Int[int_id][kvInt_X], FKV_Data_Int[int_id][kvInt_Y], FKV_Data_Int[int_id][kvInt_Z], FKV_Data_Int[int_id][kvInt_A]);
}

public: UpdateFamilyKV(kvId)
{
	format(global_str, 128, "\
		Семейная квартира\n\
		%s{FFFFFF}\n\
		Статус: %s{FFFFFF}",
		FKV_Data[kvId][kvFamilyId] ? (str_f("Владелец: {57A552}%s", GetFamilyDataString(FKV_Data[kvId][kvFamilyId], "name"))):"Стоимость: {87EB7F}10000 репутации",
		FKV_Data[kvId][kvStatus] ? "{D36782}[Закрыта]":"{87EB7F}[Открыта]");
	
	return UpdateDynamic3DTextLabelText(FKV_Data[kvId][kvTextLabel], 0xFFFFFFFF, global_str);
}

stock LoadFamilyKV()
{
	new 
		Cache:result = mysql_query(mysql, "SELECT * FROM family_kv ORDER BY data_id, ID;"),
		COUNT = cache_num_rows();
	
	for(new i, Float:floatData[3], intData[2]; i < COUNT; i++)
	{
		cache_get_value_index_int(i, 0, FKV_Data[i][kvSqlId]);
		cache_get_value_index_float(i, 1, floatData[0]);
		cache_get_value_index_float(i, 2, floatData[1]);
		cache_get_value_index_float(i, 3, floatData[2]);
		cache_get_value_index_int(i, 5, intData[0]);
		cache_get_value_index_int(i, 6, intData[1]);
		
		FKV_Data[i][kvPickup] = CreateDynamicPickup(
			19132, 
			23, 
			floatData[0], 
			floatData[1],
			floatData[2],
			intData[0],
			intData[1]
		);
		
		FKV_Data[i][kvTextLabel] = CreateDynamic3DTextLabel(
			IntToStr(i), 
			-1,
			floatData[0], 
			floatData[1],
			floatData[2],
			5.0,
			INVALID_PLAYER_ID, 
			INVALID_VEHICLE_ID,
			0,
			intData[0],
			intData[1]
		);

		cache_get_value_index_int(i, 4, FKV_Data[i][kvStatus]);
		cache_get_value_index_int(i, 7, FKV_Data[i][kvDataId]);
		cache_get_value_index_int(i, 8, FKV_Data[i][kvFamilyId]);
		cache_get_value_index_int(i, 10, FKV_Data[i][kvHealths]);
		cache_get_value_index_int(i, 11, FKV_Data[i][kvArmours]);
		cache_get_value_index_int(i, 12, FKV_Data[i][kvNalog]);
		cache_get_value_index_int(i, 13, FKV_Data[i][kvMoney]);
		cache_get_value_index_int(i, 14, FKV_Data[i][kvMonets]);
		cache_get_value_name(i, "family_level", global_str), sscanf(global_str, "p<,>a<i>[12]", FKV_Data[i][kvLevel]);
		
		CallTimeOutFunction("UpdateFamilyKV", 1000, false, "d", i);
	}
	
	cache_delete(result);

	FKV_Data_Int_Exit[0] = CreateDynamicPickup(19132, 23, -1515.8022,2722.2063,1500.9674, -1, 205);
	CreateDynamicPickup(19132, 23, -1205.1815,2382.4709,1500.9667, -1, 209);
	FKV_Data_Int_Exit[1] = CreateDynamicPickup(19132, 23, 1443.1824,-1067.3873,1601.9919, -1, 210);

	return true;
}

stock ShowAdminList(playerid, list = 0)
{
	format(mysql_string, 256, "SELECT `NickName`, `Admin`, `Online_status` FROM `accounts` WHERE `Admin` > 0 ORDER BY `Online_status` DESC LIMIT %d, %d", 15*list, 15*(list + 1));
	mysql_tquery(mysql, mysql_string, "@ShowAdminList", "dd", playerid, list);
	
	return true;
}

public: @ShowAdminList(playerid, list)
{
	FirstBL[playerid] = list;
	
	new countS = cache_num_rows();
	
	global_str = "{FFFFFF}Администратор\t{FFFFFF}Уровень\t{FFFFFF}Статус\n";
	
	for(new i, online_status, lvlAdmin; i < countS; i++)
	{
		cache_get_value_index(i, 0, mysql_string, 24), cache_get_value_index_int(i, 1, lvlAdmin), cache_get_value_index_int(i, 2, online_status);
		format(global_str, 2048, "%s%s\t[%d lvl]\t%s\n", global_str, mysql_string, lvlAdmin, online_status == 1001 ? "{7ADC66}online":"{FF6347}offline");
	}
	
	if(countS == 15 && list) strcat(global_str, ">>> Следующая страница\n<<< Предыдущая страница");
	else if(countS == 15) strcat(global_str, ">>> Следующая страница");
	else if(!countS) return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Администрация сервера", !"{FFFFFF}Список администрации пуст", !"", !"Назад");
	
	return SPD(playerid, 2263, DIALOG_STYLE_TABLIST_HEADERS, !"Администрация сервера", global_str, !"Выбрать", !"Назад");
}

stock GetPlayerUsePromo(playerid)
{
	new promo[24];
	f(global_str, 125, "SELECT `PromoUse` FROM accounts WHERE ID = '%d'", PI[playerid][pID]);
	new Cache:result = mysql_query(mysql, global_str);
	cache_get_value_index(0, 0, promo);
	cache_delete(result);
	return promo;
}

stock ShowPromoMenu(playerid)
	return CallTimeOutFunction("@ShowPromoMenu", 50, false, "d", playerid);
	
public: @ShowPromoMenu(playerid)
{
	f(global_str, 200, "SELECT `code`, `level`, `money`, `ludi` FROM `promo` WHERE `ownerid` = '%d' LIMIT 1", PI[playerid][pID]);
	new Cache:debil = mysql_query(mysql, global_str), codik[24], intData[3];

	cache_get_value_index(0, 0, codik);
	cache_get_value_index_int(0, 1, intData[0]);
	cache_get_value_index_int(0, 2, intData[1]);
	cache_get_value_index_int(0, 3, intData[2]);
	
	f(global_str, 512,"\
	{D2772C}[1]{FFFFFF} Ваш промо-код: {D2772C}%s\n\
	{D2772C}[2]{FFFFFF} Уровень промо-кода {D2772C}%d из 10\n\
	{D2772C}[3]{FFFFFF} Баланс: {D2772C}%d реферальных монет\n\
	{D2772C}[4]{FFFFFF} Список игроков {999999}всего %d использований\n\
	{D2772C}[5]{FFFFFF} Вывод реферальных монет на qiwi колешёк", 
	codik, intData[0], intData[1], intData[2]);
	SPD(playerid, 9464, DIALOG_STYLE_LIST, !"", global_str, !"Выбрать", !"Отмена");
	cache_delete(debil);
	return false;
}

stock PromoMenu(playerid, dId, listitem, response, inputtextsave[])
{	
	if(!response) return ( ( dId >= 9469 || dId == 9464) ? callcmd::menu(playerid):ShowPromoMenu(playerid) );	
	f(global_str, 200, "SELECT `code`, `level`, `money`, `ludi` FROM `promo` WHERE `ownerid` = '%d' LIMIT 1", PI[playerid][pID]);
    new Cache:promo_result = mysql_query(mysql, global_str);
	
	new PromoName[32], level, refs, active;
	cache_get_value_index(0, 0, PromoName);
	cache_get_value_index_int(0, 1, level);
	cache_get_value_index_int(0, 2, refs);
	cache_get_value_index_int(0, 3, active);

	static head[100];
    f(head, 100, "{FFFFFF}Промо-код: {d4793f}%s {FFFFFF} Уровень: {d4793f}%d из 10", PromoName, level);
	cache_delete(promo_result);
	
	for(new i; i < strlen(inputtextsave); i++)
	{
		if(inputtextsave[i] > 64 && inputtextsave[i] < 91) inputtextsave[i] += 32;
		else if(inputtextsave[i] > 191 && inputtextsave[i] < 224) inputtextsave[i] += 32;
		else if(inputtextsave[i] == ' ') 
		{
			strdel(inputtextsave, i , i + 1);
			if(i) i--;
		}
	}
	strins(inputtextsave, "#", 0, 32);
			
	switch dId do 
	{
		case 9464:
        {	
            switch listitem do
            {
				case 0: return SPD(playerid, 9465, DIALOG_STYLE_INPUT, head, !"{FFFFFF}Изменить промо-код\n{FFFFFF}Вы можете изменить свой промо-код за {FFD476}AZ Coins{FFFFFF}\nУсловия изменения:\n1. Количество букв\n\tот 3 до 5 - {FFD476}250 AZ Coins{FFFFFF}\n\tот 6 до 8 - {FFD476}100 AZ Coins{FFFFFF}\n\tот 9 до 24 - {FFD476}бесплатно{FFFFFF}\n2. Использование русской раскладки {FFD476}+ 50 AZ Coins{FFFFFF}\n3. Разрешено использование цифр (совместно с буквами)\n4. Запрещено использовать спец. символы (_ @ $ и т.д)\n5. Запрещено использовать пробел!\n\nВыбранный промо-код будет преобразован в хэштег:\n{C9BC8D}FRANZESCO  ->  #franzesco\n[SC]Mason  ->  #scmason\n#SCMason01  ->  #scmason01\nФермер  ->  #фермер", !"Выбрать", !"Назад");
                case 1:
                {
					f(global_str, 1536, "\
					{D2772C}1 Уровень\t{FFD476}Бонус: $100000, 2.00% от доната в реферальные монеты\n\t\t\t{C9BC8D}Стоимость: 1000 AZ Coins\n\n\
					{%s}2 Уровень\t%sБонус: $150000, 2.00% от доната в реферальные монеты\n\t\t\tТребования: 5 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}3 Уровень\t%sБонус: $200000, 3.00% от доната в реферальные монеты\n\t\t\tТребования: 10 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}4 Уровень\t%sБонус: $250000, 3.00% от доната в реферальные монеты\n\t\t\tТребования: 20 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}5 Уровень\t%sБонус: $300000, 4.00% от доната в реферальные монеты\n\t\t\tТребования: 40 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}6 Уровень\t%sБонус: $400000, 4.00% от доната в реферальные монеты\n\t\t\tТребования: 80 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}7 Уровень\t%sБонус: $450000, 5.00% от доната в реферальные монеты\n\t\t\tТребования: 100 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}8 Уровень\t%sБонус: $500000, 5.00% от доната в реферальные монеты\n\t\t\tТребования: 125 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}9 Уровень\t%sБонус: $550000, 6.00% от доната в реферальные монеты\n\t\t\tТребования: 150 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n\
					{%s}10 Уровень\t%sБонус: $600000, 6.00% от доната в реферальные монеты\n\t\t\tТребования: 200 использования промо-кода\n\t\t\t%sСтоимость: 1000 AZ Coins\n\n",
					level > 1 ? "D2772C":"74705D", level > 1 ? "{FFD476}":"", level > 1 ? "{C9BC8D}":"", 
					level > 2 ? "D2772C":"74705D", level > 2 ? "{FFD476}":"", level > 2 ? "{C9BC8D}":"", 
					level > 3 ? "D2772C":"74705D", level > 3 ? "{FFD476}":"", level > 3 ? "{C9BC8D}":"", 
					level > 4 ? "D2772C":"74705D", level > 4 ? "{FFD476}":"", level > 4 ? "{C9BC8D}":"", 
					level > 5 ? "D2772C":"74705D", level > 5 ? "{FFD476}":"", level > 5 ? "{C9BC8D}":"", 
					level > 6 ? "D2772C":"74705D", level > 6 ? "{FFD476}":"", level > 6 ? "{C9BC8D}":"", 
					level > 7 ? "D2772C":"74705D", level > 7 ? "{FFD476}":"", level > 7 ? "{C9BC8D}":"", 
					level > 8 ? "D2772C":"74705D", level > 8 ? "{FFD476}":"", level > 8 ? "{C9BC8D}":"", 
					level > 9 ? "D2772C":"74705D", level > 9 ? "{FFD476}":"", level > 9 ? "{C9BC8D}":"");
					
					return SPD(playerid, 9467, DIALOG_STYLE_MSGBOX, head, global_str, !"Повысить", !"Назад");
                }
				case 2:
				{
					f(head, 100, "{BFBBBA}Баланс: {D2772C}%d реферальных монет", refs);
					SPDF(playerid, 9471, DIALOG_STYLE_LIST, head, "[1] Пополнить {999999}в инвентаре %d шт{FFFFFF}\n[2] Снять {999999}на балансе %d шт{FFFFFF}", !"Выбрать", !"Назад", GetCount(playerid, 798), refs);
				}
				case 3:
				{
					f(global_str, 256, "SELECT `NickName` FROM `accounts` WHERE `PromoUse` = '%s'", PromoName);
					new Cache:idiot = mysql_query(mysql, global_str);
					
					static name[MAX_PLAYER_NAME];
					
					global_str = "{F5DEB3}Имя\n";
					if(!cache_num_rows()) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Игроков использовавших ваш промо-код не обнаружено!");
					else
					{
						for(new i; i < cache_num_rows(); i++)
						{
							cache_get_value_index(i, 0, name, 24);
							f(global_str, sizeof(global_str),"%s\n{FFFFFF}Имя: %s\n", global_str, name);
						}
						SPD(playerid,0,5,"",global_str, !"Принять","");
					}
					cache_delete(idiot);
				}
				case 4: return true;
            
			}
		}
		case 9465:
        {		
            if(TextFind(inputtextsave, " ") || !strlen(inputtextsave) || strlen(inputtextsave) < 3 || strlen(inputtextsave) > 20)
				return SCM(playerid,COLOR_RED,!"[Ошибка] {ffffff}Длина промокода должна быть от 3 до 20 символов!");
           
			f(global_str, 150, "SELECT * FROM `promo` WHERE code = '%s' LIMIT 1", inputtextsave);
            new Cache:result = mysql_query(mysql, global_str);
			
			if(cache_num_rows())
				SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Такой промо-код уже существует!");
			
			else
			{		
				new price;
			
				for(new i; i < strlen(inputtextsave); i++)
				{
					if(inputtextsave[i] > 223 && inputtextsave[i] < 256)
					{
						price += 50;
						break;
					}
				}
				
				switch strlen(inputtextsave) do { case 3..5: price += 250; case 6..8: price += 100; }
				SetPVarString(playerid, "PromoName", inputtextsave);
				SetPVarInt(playerid, "PromoPrice", price);
				
				f(global_str, 100, "{FFFFFF}Промо-код: {d4793f}%s {FFFFFF} Уровень: {d4793f}%d из 10", PromoName,  level);
				SPDF(playerid, 9466, DIALOG_STYLE_MSGBOX, head, "{FFFFFF}Вы хотите сменить ваш промо-код {FFD476}%s{FFFFFF} на {FFD476}%s{FFFFFF}\n\nСтоимость смены составляет: {FFD476}%s{FFFFFF}\n", !"Выбрать", !"Назад", PromoName, inputtextsave, !price ? "бесплатно":IntToStr(price));
			}
			
			cache_delete(result);
			return false;
		}
		
		case 9466:
		{
			GetPVarString(playerid, "PromoName", inputtextsave, 32);
			
			new price = Int_GetPlayerData(playerid, "PromoPrice");
			
			if(price > PI[playerid][pVirMoney]) return ShowPromoMenu(playerid);
			
			
			f(global_str, 156, "UPDATE `promo` SET `code` = '%s' WHERE ownerid = '%d'", inputtextsave, PI[playerid][pID]);
			mysql_tquery(mysql, global_str);
			
			f(global_str, 156, "UPDATE accounts SET `PromoUse` = '%s' WHERE `PromoUse` = '%s'", inputtextsave, PromoName);
			mysql_tquery(mysql, global_str);
			
			GiveDonate(playerid, -price);
			
			DeletePVar(playerid, "PromoName");
			DeletePVar(playerid, "PromoPrice");
			ShowPromoMenu(playerid);
			SCMF(playerid, COLOR_VALIK, "Поздравляю! Вы изменили ваш промо-код на %s", inputtextsave);
		}
		case 9467:
		{
			if(level > 9) return ShowPromoMenu(playerid);
			new active_upgrade[10] = {0, 5, 10, 20, 40, 80, 100, 125, 150, 200};	
			if(active < active_upgrade[ level ]) return SCMF(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Ваш промо-код никто ещё не использовал, для повышения уровня требуется %d использований", active_upgrade[ level ]);
            else if(PI[playerid][pVirMoney] < 1000) return SendDonateLink(playerid);
			GiveDonate(playerid, -1000);
			
			level++;
			SCMF(playerid, COLOR_VALIK, "Вы успешно повысили ваш промокод до %d уровня!", level);
			
			f(global_str, 156, " UPDATE `promo` SET `level` = '%d' WHERE code = '%s'", level, PromoName);
			mysql_tquery(mysql, global_str);
			return ShowPromoMenu(playerid);
		}
		
 		case 9469:
        {
            if(PI[playerid][pLevel] < 5) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Ваш уровень недостаточно высок для активации кода!");
			
			f(global_str, 150, "SELECT * FROM `promo` WHERE code = '%s' LIMIT 1", inputtextsave);
            new Cache:result = mysql_query(mysql, global_str);
			
			if(cache_num_rows())
			{
				f(global_str,156,"UPDATE `promo` SET `ludi` = `ludi` + '1' , `money` = `money` + '1' WHERE code = '%s'", inputtextsave);
				mysql_tquery(mysql, global_str);
				
				UpdatePlayerDataStr(playerid, "PromoUse", inputtextsave);
			}
			else SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Промо-код не найден!");
			
			cache_delete(result);
		}
		
		case 9471:
		{
			switch listitem do
			{
				case 0: SPD(playerid, 9472, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {D2772C}реферальных монет{FFFFFF}, которые хотите положить", !"Выбрать", !"Назад");
				case 1: SPD(playerid, 9473, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {D2772C}реферальных монет{FFFFFF}, которые хотите забрать", !"Выбрать", !"Назад");
			}
		}
		case 9472:
		{
			strdel(inputtextsave, 0 , 0 + 1);
			new count = strval(inputtextsave);
			if(GetCount(playerid, 798) < count || count <= 0) return SPD(playerid, 9472, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {D2772C}реферальных монет{FFFFFF}, которые хотите положить", !"Выбрать", !"Назад");
			
			DeleteItem(playerid, 798, count);
			refs += count;
			
			f(global_str, 156, "UPDATE `promo` set `money` = '%d' WHERE code = '%s'", refs, PromoName);
			mysql_tquery(mysql, global_str);
			
			ShowPromoMenu(playerid);
		}
		case 9473:
		{
			strdel(inputtextsave, 0 , 0 + 1);
			new count = strval(inputtextsave);
			if(refs < count || count <= 0) return SPD(playerid, 9473, DIALOG_STYLE_INPUT, !"", !"{FFFFFF}Введите количество {D2772C}реферальных монет{FFFFFF}, которые хотите забрать", !"Выбрать", !"Назад");
			
			AddItem(playerid, 798, count);
			refs -= count;
			
			f(global_str, 156, "UPDATE `promo` set `money` = '%d' WHERE code = '%s'", refs, PromoName);
			mysql_tquery(mysql, global_str);
			
			ShowPromoMenu(playerid);
		}
	}
	return false;
}

stock ExitOtelRoom(playerid, id)
{
	new ot = RoomOtel[id][otRoomOwnerOtel];
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, OtelInfo[ot][otBusiness]);
	InfoOtel[playerid] = ot;
	
	f ( mysql_string, 64, "SELECT * FROM `hotels_rooms` WHERE ID = %d", id);
	mysql_tquery(mysql, mysql_string, "@ExitOtelRoom", "d", playerid);
	
	return true;
}

public: @ExitOtelRoom(playerid)
{
	if(!cache_num_rows())
		return false;
		
	//UpdatePlayerPos(playerid, cache_get_row_float(0, 5, mysql), cache_get_row_float(0, 6, mysql), cache_get_row_float(0, 7, mysql));
	
	return true;
}

stock OtelRoomAction(playerid, id)
{
	f ( mysql_string, 64, "SELECT * FROM `hotels_rooms` WHERE ownerhotel = %d", id);
	mysql_tquery(mysql, mysql_string, "@OtelRoomAction", "d", playerid);
	
	return true;
}

public: @OtelRoomAction(playerid)
{
	if(!cache_num_rows())
		return false;
		
	for(new i, Float:otelPos[3], ID; i < cache_num_rows(); i++)
	{
		cache_get_value_index_float(i, 5, otelPos[0]), cache_get_value_index_float(i, 6, otelPos[1]), cache_get_value_index_float(i, 7, otelPos[2]);

		if(IsPlayerInRangeOfPoint(playerid, 1, otelPos[0], otelPos[1], otelPos[2]))
		{
			cache_get_value_index_int(i, 0, ID);
			
			if(!RoomOtel[ID][otRoomStatus])
			{			
				switch OtelInfo[RoomOtel[ID][otRoomOwnerOtel]][otLevel] do
				{
					case 5: UpdatePlayerPos(playerid, 2298.1599, 2678.7400, 1500.9688);
					case 4: UpdatePlayerPos(playerid, 2201.0801, 2737.7900, 1500.9659);
					case 3: UpdatePlayerPos(playerid, -1162.6600, -638.6580, 1500.9688);
				}
				SetPlayerVirtualWorld(playerid, 400 + ID);
				return InfoOtel[playerid] = ID;
			}
			else
			{
				SCM(playerid, COLOR_GREY, "[Ошибка]{FFFFFF} Дверь закрыта!");
				break;
			}
		}
	}
	
	return false;
}

stock EnterPlayerTakeGun(playerid, const message[])
{
	if(!ACTIVEpanel[0] && !IsACop(playerid))
    {
        for(new x; x < 13; x ++)
		{
			GetPlayerWeaponData(playerid, x, PI[playerid][pGuns][x], PI[playerid][pAmmos][x]);
			if(PI[playerid][pGuns][x])
			{
				MinusGun{playerid} = true;
				_ResetGun(playerid);
	            SCM(playerid, COLOR_GREY, message);
				_ResetGun(playerid);
			}
		}
	}
	return true;
}

stock EnterPlayerGiveGun(playerid)
{
	if(MinusGun{playerid} == false) return false;
    
    for(new x; x < 13; x++) 
    {
    	if(PI[playerid][pGuns][x] == 38 or PI[playerid][pGuns][x] == 35 or PI[playerid][pGuns][x] == 36) continue;
    	
    	_GiveGun(playerid, PI[playerid][pGuns][x], PI[playerid][pAmmos][x]);
   	}

   	return true;
}

stock CreateShopEat(bizid)
{
	new Float:X, Float:Y, Float:Z;

	for(new i = ShopEatObj[0]; i < ShopEatObj[1]; i ++)
	{
		GetDynamicObjectPos(i, X,Y,Z);
		if(PointToPoint(X,Y,Z, BizData[bizid][bEnter][0], BizData[bizid][bEnter][1], BizData[bizid][bEnter][2]) < 5.0)
		{
			SetBizData(bizid, B_TEXT_ID, CreateDynamic3DTextLabel(" Бизнес ", 0xFFFFFFFF, X,Y,Z + 0.5, 7.5));
			SetBizData(bizid, B_AREA_ID, CreateDynamicSphere(X,Y,Z, 2.0));
			break;
		}
	}

	for(new i = ShopEatPick[0]; i < ShopEatPick[1]; i ++)
	{
		GetDynamicPickupPos(i, X,Y,Z);
		if(PointToPoint(X,Y,Z, BizData[bizid][bEnter][0], BizData[bizid][bEnter][1], BizData[bizid][bEnter][2]) < 5.0)
		{
			EatInfo[i - ShopEatPick[0]] = bizid;
			return true;
		}
	}
	
	return false;
}

stock HideInfoMenu(playerid)
{
	switch(GetPlayerLauncher(playerid))
	{
		case 0:
		{
			if(IsTextDrawVisibleForPlayer(playerid, HInfoBG))
			{
				TextDrawHideForPlayer(playerid, HInfoBG);
				for(new i; i < 6; i ++) PlayerTextDrawHide(playerid, HInfoDraw[playerid][i]);
				TextDrawHideForPlayer(playerid, HInfoEnterDraw);
				TextDrawHideForPlayer(playerid, HInfoBuyDraw);
			}
		}
		case 1: executeEvent(playerid, 0, "window.executeEvent('cef.modals.closeModal', '[\"businessInfo\"]');");
		case 2: cursorPlayer(playerid, 17, false);
	}

	if(Int_GetPlayerData(playerid, "captchaOpen"))
		DestroyCaptcha_BOT(playerid);

	if(InfoHouse[playerid] != -1)
		InfoHouse[playerid] = -1;

	if(InfoBiz[playerid] != -1)
		InfoBiz[playerid] = -1;

	return true;
}

stock ShowInfoMenu(playerid, id, type) // 0 biz, 1 house
{
	new
		SELLING = !type ? GetString(BizData[id][bOwner], "The State"):GetString(HouseInfo[id][hOwner], "The State"),
		LOCK = (!type ? (!BizData[id][bLock] && !IsNoEnterBiz(id)):!HouseInfo[id][hLock]),
		s = GetHouseStyle(id);

	switch type do
	{
		case 0:
		{
			InfoBiz[playerid] = id;

			switch(GetPlayerLauncher(playerid))
			{
				case 0:
				{
					f(global_str, 70, "Businesses~g~ %i", id);
					PlayerTextDrawSetString(playerid, HInfoDraw[playerid][0], global_str);

					if(SELLING) PlayerTextDrawSetString(playerid, HInfoDraw[playerid][1], "~g~Bizz_for sell");
					else
						f(global_str, 70, "Owner~n~~g~%s", BizData[id][bOwner]),
						PlayerTextDrawSetString(playerid, HInfoDraw[playerid][1], global_str);
					
					f(global_str, 50, "Price:~g~ $%d", BizData[id][bCost]);
					PlayerTextDrawSetString(playerid, HInfoDraw[playerid][2], global_str);
					f(global_str, 70, "Status: %s", (BizData[id][bLock] || IsNoEnterBiz(id)) ? ("~r~Close") : ("~g~Open"));
					PlayerTextDrawSetString(playerid, HInfoDraw[playerid][3], global_str);
				}
				case 1: return executeEvent(playerid, 0, (str_f("window.executeEvent('cef.modals.showModal', '[\"businessInfo\", {\"businessInfo\":{\"title\": \"%s\",\"description\":\"%s\",\"img\":\"%i\",\"buttons\":[%s{\"title\": \"%s\",\"keyTitle\": \"%s\",\"keyCode\": 10}],\"info\":[{\"title\": \"Номер бизнеса\",\"value\": %i},{\"title\": \"Владелец\",\"value\": \"%s\"},{\"title\": \"Стоимость\",\"value\": \"$%i\"},{\"title\": \"Статус дверей\",\"value\": \"%s\"}]}}]');", BizData[id][bName], GetBussinesText(1, id), strval(GetBussinesText(2, id)), SELLING ? "{\"title\": \"Купить\",\"keyTitle\": \"N\",\"keyCode\": 10}, " : "", IsNoEnterBiz(id) ? ("") : ("Войти"), IsNoEnterBiz(id) ? ("Входа нет") : ("ALT"), id, SELLING ? "Отсутсвует" : (str_f("%s", BizData[id][bOwner])), BizData[id][bCost], (BizData[id][bLock] || IsNoEnterBiz(id)) ? ("Закрыто") : ("Открыто"))));
				case 2: return cursorPlayer(playerid, 17, true), eventMobile(playerid, {17, 0}, (str_f("{\"title\":\"%s\",\"description\":\"%s\",\"imageLink\":\"http://arizona.gtasounds.com/image_business_temp/%i.jpg\",\"details\":[{ \"title\": \"Номер бизнеса\", \"value\": \"%i\" }, { \"title\": \"Владелец\", \"value\": \"%s\" }, { \"title\": \"Стоимость\", \"value\": \"$%i\" }, { \"title\": \"Статус дверей\", \"value\": \"%s\" }],\"primaryButtonText\":\"%s\",\"secondaryButtonText\":\"%s\"}", BizData[id][bName], GetBussinesText(1, id), strval(GetBussinesText(2, id)), id, SELLING ? "Отсутсвует" : (str_f("%s", BizData[id][bOwner])), BizData[id][bCost], (BizData[id][bLock] || IsNoEnterBiz(id)) ? ("Закрыто") : ("Открыто"), IsNoEnterBiz(id) ? ("Входа нет") : ("Войти"), SELLING ? ("Купить") : (""))));
			}
		}
		case 1:
		{
			InfoHouse[playerid] = id;

			if(HouseNalogState2[playerid] == 1 && HouseNalog[playerid] == id)
			{
			    HouseNalogState2[playerid] = 2;
			    HouseInfo[id][hNalog] += HouseInfo[id][hNalog2];
			    HouseInfo[id][hNalog2] = 0;
				f(global_str, 128,"Вы оставили чек на оплату комунальных услуг.\nОтправляйтесь в офис для получения зарплаты.", HouseInfo[id][hCost]);
			    SPD(playerid,0,0,"Налоговая",global_str, !"Закрыть","");
			    EnableGPSForPlayer(playerid,1530.8496,-1072.0752,25.0625);
			}

			switch(GetPlayerLauncher(playerid))
			{
				case 0:
				{
					f(global_str, 80, "House~g~ %i", id);
					PlayerTextDrawSetString(playerid, HInfoDraw[playerid][0], global_str);
					if(SELLING) PlayerTextDrawSetString(playerid, HInfoDraw[playerid][1], "~g~House_for sell");
					else
						f(global_str, 70, "%s", (str_f("Owner~n~~g~%s", HouseInfo[id][hOwner]))),
						PlayerTextDrawSetString(playerid, HInfoDraw[playerid][1], global_str);
					
					f(global_str, 80, "Level: ~g~%d", HouseInfo[id][hKlass]);
					PlayerTextDrawSetString(playerid, HInfoDraw[playerid][2], global_str);
					
					f(global_str, 125, "Price:~g~ %s", HouseInfo[id][hType] == 1 ? (str_f("%d AZ", HouseInfo[id][hCost])) : HouseInfo[id][hType] == 3 ? (str_f("%d new year bags", HouseInfo[id][hCost])):(str_f("$%d", HouseInfo[id][hCost])));
					PlayerTextDrawSetString(playerid, HInfoDraw[playerid][3], global_str);
					f(global_str, 80, "Rooms:~g~ %d", HouseRooms[s]);
					PlayerTextDrawSetString(playerid, HInfoDraw[playerid][4], global_str);
					f(global_str, 100, "Status: %s", !HouseInfo[id][hLock] ? ("~g~Open") : ("~r~Close"));
					PlayerTextDrawSetString(playerid, HInfoDraw[playerid][5], global_str);
				}
				case 1: return executeEvent(playerid, 0, (str_f("window.executeEvent('cef.modals.showModal', '[\"businessInfo\",{\"businessInfo\":{\"title\": \"Частный дом\",\"description\":\"Частные дома обычно имеют большую площадь, чем квартиры, и могут иметь собственный участок земли.\",\"img\":\"26\",\"buttons\":[%s{\"title\": \"Войти\",\"keyTitle\": \"ALT\",\"keyCode\": 10}],\"info\":[{\"title\": \"Номер дома\",\"value\":%i},{\"title\": \"Владелец\",\"value\": \"%s\"},{\"title\": \"Стоимость\",\"value\": \"$%i\"},{\"title\": \"Статус дверей\",\"value\": \"%s\"},{\"title\": \"Комнат\",\"value\": %i}]}}]');", SELLING ? "{\"title\": \"Купить\",\"keyTitle\": \"N\",\"keyCode\": 10}, " : "", id, HouseInfo[id][hOwner], HouseInfo[id][hCost], !HouseInfo[id][hLock] ? ("Открыто") : ("Закрыто"), HouseRooms[s])));
				case 2: return cursorPlayer(playerid, 17, true), eventMobile(playerid, {17, 0}, (str_f("{\"title\":\"Частный дом\",\"description\":\"Частные дома обычно имеют большую площадь, чем квартиры, и могут иметь собственный участок земли.\",\"imageLink\":\"http://arizona.gtasounds.com/image_business_temp/26.jpg\",\"details\":[{ \"title\": \"Номер дома\", \"value\": \"%i\" }, { \"title\": \"Владелец\", \"value\": \"%s\" }, { \"title\": \"Стоимость\", \"value\": \"$%i\" }, { \"title\": \"Статус дверей\", \"value\": \"%s\" }, { \"title\": \"Комнат\", \"value\": \"%i\" }],\"primaryButtonText\":\"Войти\",\"secondaryButtonText\":\"%s\"}", id, HouseInfo[id][hOwner], HouseInfo[id][hCost], !HouseInfo[id][hLock] ? ("Открыто") : ("Закрыто"), HouseRooms[s], SELLING ? ("Купить") : (""))));
			}
		}
	}

	if(SELLING) TextDrawShowForPlayer(playerid, HInfoBuyDraw);
	else if(LOCK) TextDrawShowForPlayer(playerid, HInfoEnterDraw);
	TextDrawShowForPlayer(playerid, HInfoBG);
	
	for(new t; t < (!type ? 4:6); t++) ShowPlayerTD(playerid, HInfoDraw[playerid][t]);
	return false;
}

stock PreloadAllAnimLibs(playerid)
{
    PreloadAnimLib(playerid,"AIRPORT");     
    PreloadAnimLib(playerid,"Attractors");  
    PreloadAnimLib(playerid,"BAR"); 
    PreloadAnimLib(playerid,"BASEBALL");    
    PreloadAnimLib(playerid,"BD_FIRE");     
    PreloadAnimLib(playerid,"BEACH");       
    PreloadAnimLib(playerid,"benchpress");  
    PreloadAnimLib(playerid,"BF_injection");
    PreloadAnimLib(playerid,"BIKED");       
    PreloadAnimLib(playerid,"BIKEH"); 
    PreloadAnimLib(playerid,"BIKELEAP");      
    PreloadAnimLib(playerid,"BIKES"); 
    PreloadAnimLib(playerid,"BIKEV"); 
    PreloadAnimLib(playerid,"BIKE_DBZ");      
    PreloadAnimLib(playerid,"BLOWJOBZ");      
    PreloadAnimLib(playerid,"BMX");   
    PreloadAnimLib(playerid,"BOMBER");
    PreloadAnimLib(playerid,"BOX");   
    PreloadAnimLib(playerid,"BSKTBALL");      
    PreloadAnimLib(playerid,"BUDDY"); 
    PreloadAnimLib(playerid,"BUS");   
    PreloadAnimLib(playerid,"CAMERA");
    PreloadAnimLib(playerid,"CAR");   
    PreloadAnimLib(playerid,"CARRY"); 
    PreloadAnimLib(playerid,"CAR_CHAT");      
    PreloadAnimLib(playerid,"CASINO");
    PreloadAnimLib(playerid,"CHAINSAW");      
    PreloadAnimLib(playerid,"CHOPPA");
    PreloadAnimLib(playerid,"CLOTHES");       
    PreloadAnimLib(playerid,"COACH"); 
    PreloadAnimLib(playerid,"COLT45");
    PreloadAnimLib(playerid,"COP_AMBIENT");   
    PreloadAnimLib(playerid,"COP_DVBYZ");     
    PreloadAnimLib(playerid,"CRACK"); 
    PreloadAnimLib(playerid,"CRIB");  
    PreloadAnimLib(playerid,"DAM_JUMP");      
    PreloadAnimLib(playerid,"DANCING");       
    PreloadAnimLib(playerid,"DEALER");
    PreloadAnimLib(playerid,"DILDO"); 
    PreloadAnimLib(playerid,"DODGE"); 
    PreloadAnimLib(playerid,"DOZER"); 
    PreloadAnimLib(playerid,"DRIVEBYS");      
    PreloadAnimLib(playerid,"FAT");   
    PreloadAnimLib(playerid,"FIGHT_B");       
    PreloadAnimLib(playerid,"FIGHT_C");       
    PreloadAnimLib(playerid,"FIGHT_D");       
    PreloadAnimLib(playerid,"FIGHT_E");       
    PreloadAnimLib(playerid,"FINALE");
    PreloadAnimLib(playerid,"FINALE2");       
    PreloadAnimLib(playerid,"FLAME"); 
    PreloadAnimLib(playerid,"Flowers");       
    PreloadAnimLib(playerid,"FOOD");  
    PreloadAnimLib(playerid,"Freeweights");   
    PreloadAnimLib(playerid,"GANGS"); 
    PreloadAnimLib(playerid,"GHANDS");
    PreloadAnimLib(playerid,"GHETTO_DB");     
    PreloadAnimLib(playerid,"goggles");       
    PreloadAnimLib(playerid,"GRAFFITI");      
    PreloadAnimLib(playerid,"GRAVEYARD");     
    PreloadAnimLib(playerid,"GRENADE");       
    PreloadAnimLib(playerid,"GYMNASIUM");     
    PreloadAnimLib(playerid,"HAIRCUTS");      
    PreloadAnimLib(playerid,"HEIST9");
    PreloadAnimLib(playerid,"INT_HOUSE");     
    PreloadAnimLib(playerid,"INT_OFFICE");    
    PreloadAnimLib(playerid,"INT_SHOP");      
    PreloadAnimLib(playerid,"JST_BUISNESS");  
    PreloadAnimLib(playerid,"KART");  
    PreloadAnimLib(playerid,"KISSING");       
    PreloadAnimLib(playerid,"KNIFE"); 
    PreloadAnimLib(playerid,"LAPDAN1");       
    PreloadAnimLib(playerid,"LAPDAN2");       
    PreloadAnimLib(playerid,"LAPDAN3");       
    PreloadAnimLib(playerid,"LOWRIDER");      
    PreloadAnimLib(playerid,"MD_CHASE");      
    PreloadAnimLib(playerid,"MD_END");
    PreloadAnimLib(playerid,"MEDIC"); 
    PreloadAnimLib(playerid,"MISC");  
    PreloadAnimLib(playerid,"MTB");   
    PreloadAnimLib(playerid,"MUSCULAR");      
    PreloadAnimLib(playerid,"NEVADA");
    PreloadAnimLib(playerid,"ON_LOOKERS");    
    PreloadAnimLib(playerid,"OTB");   
    PreloadAnimLib(playerid,"PARACHUTE");     
    PreloadAnimLib(playerid,"PARK");  
    PreloadAnimLib(playerid,"PAULNMAC");      
    PreloadAnimLib(playerid,"ped");   
    PreloadAnimLib(playerid,"PLAYER_DVBYS");  
    PreloadAnimLib(playerid,"PLAYIDLES");     
    PreloadAnimLib(playerid,"POLICE");
    PreloadAnimLib(playerid,"POOL");  
    PreloadAnimLib(playerid,"POOR");  
    PreloadAnimLib(playerid,"PYTHON");
    PreloadAnimLib(playerid,"QUAD");  
    PreloadAnimLib(playerid,"QUAD_DBZ");      
    PreloadAnimLib(playerid,"RAPPING");       
    PreloadAnimLib(playerid,"RIFLE"); 
    PreloadAnimLib(playerid,"RIOT");  
    PreloadAnimLib(playerid,"ROB_BANK");      
    PreloadAnimLib(playerid,"ROCKET");
    PreloadAnimLib(playerid,"RUSTLER");       
    PreloadAnimLib(playerid,"RYDER"); 
    PreloadAnimLib(playerid,"SCRATCHING");    
    PreloadAnimLib(playerid,"SHAMAL");
    PreloadAnimLib(playerid,"SHOP");  
    PreloadAnimLib(playerid,"SHOTGUN");       
    PreloadAnimLib(playerid,"SILENCED");      
    PreloadAnimLib(playerid,"SKATE"); 
    PreloadAnimLib(playerid,"SMOKING");       
    PreloadAnimLib(playerid,"SNIPER");
    PreloadAnimLib(playerid,"SPRAYCAN");      
    PreloadAnimLib(playerid,"STRIP"); 
    PreloadAnimLib(playerid,"SUNBATHE");      
    PreloadAnimLib(playerid,"SWAT");  
    PreloadAnimLib(playerid,"SWEET"); 
    PreloadAnimLib(playerid,"SWIM");  
    PreloadAnimLib(playerid,"SWORD"); 
    PreloadAnimLib(playerid,"TANK");  
    PreloadAnimLib(playerid,"TATTOOS");       
    PreloadAnimLib(playerid,"TEC");   
    PreloadAnimLib(playerid,"TRAIN"); 
    PreloadAnimLib(playerid,"TRUCK"); 
    PreloadAnimLib(playerid,"UZI");   
    PreloadAnimLib(playerid,"VAN");   
    PreloadAnimLib(playerid,"VENDING");       
    PreloadAnimLib(playerid,"VORTEX");
    PreloadAnimLib(playerid,"WAYFARER");      
    PreloadAnimLib(playerid,"WEAPONS");       
    return PreloadAnimLib(playerid,"WUZI");
}

stock PreloadAnimLib(playerid, animlib[])
	return ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);

stock SearchVehicleMassiveID(model)
{
	for(new i; i < sizeof(vehicleModelInfo); i++)
		if(vehicleModelInfo[i][vehicleModel] == model) return i;

	return false;
}

stock GetVehicleName(vehicleid, bool:ItIsModel = false)
{
	new model = ItIsModel ? vehicleid : GetVehicleModelEx(vehicleid), carname[60]; 
	
    carname = "Unknown Car Name";

	for(new i; i < sizeof(vehicleModelInfo); i++)
	{
		if(!(model == vehicleModelInfo[i][vehicleModel]))
			continue;

		return format(carname, sizeof(carname), vehicleModelInfo[i][vehicleName]), carname;
	}

	return carname;
}

/*
	0 - модель по ид
	1 - итем ид по ид
	2 - ид по модели
	3 - модель самп по модели
*/
stock GetSkinInfo(item, type = 0)
{
	if(type > 3)
		return false;

	if(item < 312)
		return (type == 1 ? item + 191 : item);

	for(new i; i < sizeof(skins_data); i++)
		if(item == (type >= 2 ? skins_data[i][skinModel] : skins_data[i][skinID]))
			return (type == 1 ? skins_data[i][skinItemID] : type == 2 ? skins_data[i][skinID] : type == 3 ? skins_data[i][skinModelSAMP] : skins_data[i][skinModel]);

	return true;
}

alias:promocode("promo");
cmd:promocode(playerid)
{
	if(Int_GetPlayerData(playerid, "PromoCodeKD") > Global_Time)
		return SCMF(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Возможность ввести новый промокод появится через %d секунд!", Int_GetPlayerData(playerid, "PromoCodeKD") - Global_Time );
		
	return SPD(playerid, 2755, DIALOG_STYLE_INPUT, !"{FFFFFF}Промокоды | {ae433d}Активация", !"{FFFFFF}Для активации промокода введите его в поле ниже:\n\n ", !"Активировать", !"Отмена");
}

public: checkpromousage(playerid, promo[])
{
	if(!cache_num_rows()) { // продолжаем активацию промокода!
	
		format(mysql_string, 150, "SELECT * FROM nubopromo WHERE Name = '%s' AND Active > 0 LIMIT 1;", promo);
		mysql_tquery(mysql, mysql_string, "@promoactive", "ds", playerid, promo);
	
	}
	else SCM(playerid, COLOR_OLDRED, !"[Информация]{FFFFFF} Нельзя использовать данный промокод повторно!");
}

new prize_give[MAX_PLAYERS];

public: @promoactive(playerid, promo[])
{
	if(!cache_num_rows())
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Промокод не найден!");

	if(prize_give[playerid] > Global_Time)
		return false;

	new give; cache_get_value_index_int(0, 1, give);
		
	if(give <= 0)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Количество активаций данного промокода исчерпано!");
	
	new playerId, count, dataId, level, id, type;

	cache_get_value_index_int(0, 0, id);
	cache_get_value_index_int(0, 4, playerId);
	cache_get_value_index_int(0, 5, type);
	cache_get_value_index_int(0, 3, count);
	cache_get_value_index_int(0, 6, dataId);
	cache_get_value_index_int(0, 6, level);

	if(!(playerId == -1) && !(playerId == PI[playerid][pID]))
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Данный промокод уникальный, его может активировать только пользователь для которого он создан!");
	
	else if(PI[playerid][pLevel] < level)
		return SCM(playerid, COLOR_OLDRED, ">>>{FFFFFF} Ваш уровень недостаточный для активации данного промокода!");

	SQL("UPDATE nubopromo SET Active = `Active` - 1 WHERE Name = '%s';", promo);
	SQL("INSERT INTO nubopromo_usage (`promoId`, `promo`, `playerId`, `playerName`) VALUES ('%d', '%s', '%d', '%s')", id, promo, PI[playerid][pID], PlayerName[playerid]);

	switch type do
	{
		case 0: 
		{
			format(mysql_string, 100, "Аксессуар %s (+%d)", ItemsInfo[dataId][itemName], count);
		
			AddItem(playerid, dataId, 1, count);
		}

		case 1:
		{
			format(mysql_string, 100, "%d AZ-Рублей", count);
		
			UpdatePlayerDataInt(playerid, "Roubles", PI[playerid][pRoubles] += count);
		}

		case 2:
		{
			format(mysql_string, 100, "Предмет %s (%d шт.)", ItemsInfo[dataId][itemName], count);
		
			AddItem(playerid, dataId, count);
		}

		case 3:
		{
			format(mysql_string, 100, "Админ-Права %d LVL", count);
		
			if(PI[playerid][pAdmin] < count)
			{
				f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", PlayerName[playerid]);
				mysql_tquery(mysql, global_str, "BuyAdm", "id", playerid, count);
					
				amlf("<a href=../pages/user?id=%d>%s</a> получил админку %d LVL с промокода!", 5, "", "", PI[playerid][pID], PN(playerid), count);
			}
		}

		case 4:
		{
			format(mysql_string, 100, "Автомобиль %s", GetVehicleName(dataId, true));

			SQL("INSERT INTO `ownable` (`Model`, `Owner`, `Cost`, `Keyer`, `ParkedInPark`) VALUES ('%d', '%s', '10000', 'The State', '1')", dataId, PlayerName[playerid]);
		}
	}
	SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы успешно активировали промокод \'%s\' и получили %s.", promo, mysql_string);
	
	format(global_str, 250, "[PROMO-SYSTEM]{FFFFFF} Игрок %s[%d] активировал промокод %s - %s.", PlayerName[playerid], playerid, promo, mysql_string);
	return SCMALL(COLOR_OLDRED, global_str), prize_give[playerid] = Global_Time + 5;
}

alias:vipmenu("vip", "vip_menu");
CMD:vipmenu(playerid)
{
	if(PI[playerid][pVIP][0] < 7)
		return SCMF(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}Ваш статус вип меньше чем %s.", VipNames[7]);

	global_str = "";

	for(new i; i < sizeof(VipMenu_Data); i++)
		strcat(global_str, (str_f("{FFDB8B}%d. {FFFFFF}%s\t{FFDB8B}%s\n", i + 1, VipMenu_Data[i][vipmenu_Text], VipNames[VipMenu_Data[i][vipmenu_Vip]])));

	return SPD(playerid, 2760, DIALOG_STYLE_TABLIST, !"{FFFFFF}Выберите пункт | {F6AB2F}Вип-Меню", global_str, !"Выбрать", !"Закрыть");
}

alias:adonate("adm", "rub");

CMD:adonate(playerid)
	return ShowADonateMenu(playerid);

stock ShowADonateMenu(playerid)
{
    if(Int_GetPlayerData(playerid, "DonateWait") < Global_Time)
	{
		Int_SetPlayerData(playerid, "DonateWait", Global_Time + 5);
		
		f(global_str, 128, "SELECT `GetRoubles` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", PN(playerid));
		mysql_tquery(mysql, global_str, "UpdateDonatePlayer", "i", playerid);
	}

   	global_str = "";

	for(new i; i < sizeof(ADonateInfo); i++)
		strcat(global_str, (str_f("{FFFF00}%d. {ffffff}%s\t{FFFF00}%i AZ-Рублей\n", i + 1, ADonateInfo[i][adonateName], ADonateInfo[i][adonatePrice] * XDonate)));
	
	strcat(global_str, (str_f("\n \n{FF0000}НА САЙТЕ ДЕЙСВУЕТ X%i ПОПОЛНЕНИЕ СЧЕТА (1 руб. = %i AZ-RUB).", XDonate, 1 * XDonate)));
	return SPD(playerid, 9925, DIALOG_STYLE_TABLIST, (str_f("{FFFFFF}Ваш текущий баланс | {FFFF00}%i AZ-Рублей.", PI[playerid][pRoubles])), global_str, !"Далее", !"Отмена");
}

public: UpdateDonatePlayer(playerid)
{
	Int_SetPlayerData(playerid, "DonateWait", Global_Time + 5);
	
	new newdonate;
	cache_get_value_name_int(0, "GetRoubles", newdonate);

	if(!newdonate)
		return false;

	GiveRoubles(playerid, newdonate, "умножение доната с сайта");
	return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Ваш баланс успешно пополнен на %i RUB.", newdonate);
}

cmd:hotel(playerid)
{
	if(PI[playerid][pFrom] == -1) return SCM(playerid, -1, !">> {BE2D2D}Вы не проживаете в отеле");
	return SPDF(playerid, 342, DIALOG_STYLE_LIST, !"Меню", "1. Статус: %s{FFFFFF}\n2. Проплата за проживание.\n3. Отказаться от аренды.", !"Принять", !"Отмена", RoomOtel[PI[playerid][pFrom]][otRoomStatus] ? "{B22C2C}[Закрыт]":"{57B22C}[Открыт]");
}

stock AUTO_NALOG_GO()
{
	new Cache:result = mysql_query(mysql, "SELECT * FROM autonalog ORDER BY vkId"), vk_id = 0, check_vk_id;
	
	for(new i, type, id; i < cache_num_rows(); i++)
	{
		cache_get_value_name_int(i, "vkId", check_vk_id);
		cache_get_value_name_int(i, "Type", type);
		cache_get_value_name_int(i, "Id", id);

		if(!(check_vk_id == vk_id))
		{
			vk_id = check_vk_id;
			//f(mysql_string, 400, "vk_id=%d&list=9&msg=Property paid!", vk_id);
			//SendVK(0, mysql_string, 0);
		}
		
		if(!type)
			HouseInfo[id][hNalog] = 0;
		
		else
			BizData[id][bLevel] = 0;
		
	}
	cache_delete(result);
	
	return SQL("DELETE FROM autonalog", 0);
}

stock SystemTextDrawHide(playerid)
{
	if(InventoryOpen{playerid}) HideInvent(playerid);
	if(EnchantWork{playerid}) DestroyEnchantWork(playerid);
	if(ChangeColor{playerid}) DestroyColorsChange(playerid);
	if(shopopen{playerid}) DestroyShopTD(playerid);
	if(tradeopen{playerid}) HideTrade(playerid, 1);
	if(Int_GetPlayerData(playerid, "OtherInventOpen")) OtherInvClose(playerid);
	if(Int_GetPlayerData(playerid, "openGetGun")) CloseGetGunOrg(playerid);
	if(craftopen{playerid}) HideCraft(playerid);
	if(bodyguardTDOpen{playerid}) CloseBodyguardTD(playerid);
	if(containeropen{playerid})
    {
        for(new i; i < 33; i++) DestroyPlayerTD(playerid, contd[playerid][i]);
		containeropen{playerid} = false;
		pagecontainer[playerid] = 0;
	}
	return true;
}

stock SendFunctionLmenu(playerid, team, listitem)
{
	if(!IsAtMafia(playerid) && !IsAtGang(playerid))
	{
		new org = PI[playerid][pMember][0];
		f (mysql_string, 50, "{FFFFFF}Банк: {E1E948}%d$", OrgInfo[org][oBank]);
		
		if(!listitem)
			SPD(playerid, 1216, DIALOG_STYLE_INPUT, "PLAYERID", "Введите ид игрока которого хотите принять", "Далее", "Oтмена");
		
		
		else if(listitem == 2 && team == TEAM_FBI)
			return SPD(playerid, 1213, 1 , !"Информация", !"Введите ид игрока которого вы хотите перевести!\n\n{4682B4}1 возможен с :{FFFFFF}\n\n-ARMY {FFD700}(4 ранг){FFFFFF} - LSPD/RCPD/LVPD/SFPD\n-LSPD/RCPD/LVPD/SFPD {FFD700}(5 ранг){FFFFFF} - FBI\n", !"Принять", !"Отмена");

		else if(listitem == 3 && team == TEAM_FBI || listitem == 2 && !(team == TEAM_FBI))
			callcmd::gnews(playerid);

		else if(listitem == 4 && team == TEAM_FBI || listitem == 3 && !(team == TEAM_FBI))
		{
			global_str = "Ранг\tЗарплата\t\n\n";
			for(new i; i < OrgInfo[org][Max_Rang]; i++)
				f(global_str, 550, "%s{FFFFFF}%s\t{F0CB49}%d$\n", global_str, GetRankName(org, i+1), OrgSalary[org][i]);
							
			SPD(playerid, 3869, DIALOG_STYLE_TABLIST_HEADERS, mysql_string, global_str, "Изменить", "Отмена");
		}

		else if(listitem == 5 && team == TEAM_FBI || listitem == 4 && !(team == TEAM_FBI))
		{
			global_str = "{FFFFFF}";
			for(new i; i < OrgInfo[org][Max_Rang]; i++)
				f(global_str, 550, "%s[%d] %s\n", global_str, i+1, GetRankName(org, i+1));
					
			strcat(global_str, "{8a7c4d}Использовать названия рангов по умолчанию");
			SPD(playerid, 3871, DIALOG_STYLE_LIST, OrgInfo[org][oName], global_str, "Изменить", "Отмена");
		}
	}
	else
	{
		switch listitem do
		{
				case 0: {
					return SPD(playerid,1216,DIALOG_STYLE_INPUT,"PLAYERID","Введите ид игрока которого хотите принять","Далее","Oтмена");
				}
				case 1: {
					return callcmd::members(playerid,"");
				}
				case 2: 
				{
					if(!IsAtMafia(playerid) && !IsAtGang(playerid))
					{
						if(PI[playerid][pMember][0]!=TEAM_LSPD && PI[playerid][pMember][0]!=TEAM_RCPD && PI[playerid][pMember][0]!=TEAM_LVPD && PI[playerid][pMember][0]!=TEAM_FBI && PI[playerid][pMember][0]!=TEAM_SFPD)return SCM(playerid,COLOR_RED,!"Доступно только для Полиции и FBI!");
						SPD(playerid,1213,1,"Информация","Введите ид игрока которого вы хотите перевести!\n\n{4682B4}Перевод возможен с :{FFFFFF}\n\n-ARMY {FFD700}(4 ранг){FFFFFF} - LSPD/RCPD/LVPD/SFPD\n-LSPD/RCPD/LVPD/SFPD {FFD700}(5 ранг){FFFFFF} - FBI\n", !"Принять", !"Отмена");
					}
					else
					{
						if(OrgInfo[PI[playerid][pMember][0]][oOb4ak]>0)
						{
							OrgInfo[PI[playerid][pMember][0]][oOb4ak]=0;
							f(global_str,sizeof(global_str),"[F] %s[%d] Открыл общак!",PN(playerid),playerid);
							SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
							UpdateDorm(PI[playerid][pMember][0]);
						}
						else
						{
							OrgInfo[PI[playerid][pMember][0]][oOb4ak]=1;
							f(global_str,sizeof(global_str),"[F] %s[%d] Закрыл общак!",PN(playerid),playerid);
							SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
							UpdateDorm(PI[playerid][pMember][0]);
						}
						callcmd::lmenu(playerid,"");
					}
				}
				case 3: {
					if(OrgInfo[GetTeamID(playerid)][oBank] < 25000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}На счет вашей организации недостачно денег!");
					if(PI[playerid][pMember][0] == 11)
					{
						DestroyVehicleIter(GroveCar[0]);
						DestroyVehicleIter(GroveCar[1]);
						DestroyVehicleIter(GroveCar[2]);
						DestroyVehicleIter(GroveCar[3]);
						DestroyVehicleIter(GroveCar[4]);
						DestroyVehicleIter(GroveCar[5]);
						DestroyVehicleIter(GroveCar[6]);
						GroveCar[0] = CreateTeamVehicle(TEAM_GROOVE,1, 600, 2485.0903, -1680.8488, 13.2813, 19.7400, 86, 86,RES_CAR_TIME);
						GroveCar[1] = CreateTeamVehicle(TEAM_GROOVE,1, 600, 2488.3083, -1680.7385, 13.2813, 19.7400, 86, 86,RES_CAR_TIME);
						GroveCar[2] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2506.0962, -1676.6655, 13.2813, -35.0400, 86, 86,RES_CAR_TIME);
						GroveCar[3] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2508.0857, -1666.6547, 13.2813, 11.1000, 86, 86,RES_CAR_TIME);
						GroveCar[4] = CreateTeamVehicle(TEAM_GROOVE,1, 492, 2501.6204, -1657.3187, 13.2813, 54.4800, 86, 86,RES_CAR_TIME);
						GroveCar[5] = CreateTeamVehicle(TEAM_GROOVE,1, 478, 2498.6013, -1684.0957, 13.2813, 13.5600, 86, 86,RES_CAR_TIME);
						GroveCar[6] = CreateTeamVehicle(TEAM_GROOVE,1, 482, 2505.4092, -1694.1656, 14.2813, 0.0000, 86, 86,RES_CAR_TIME);
					}
					else if(PI[playerid][pMember][0] == 12)
					{
						DestroyVehicleIter(VagosCar[0]);
						DestroyVehicleIter(VagosCar[1]);
						DestroyVehicleIter(VagosCar[2]);
						DestroyVehicleIter(VagosCar[3]);
						DestroyVehicleIter(VagosCar[4]);
						DestroyVehicleIter(VagosCar[5]);
						DestroyVehicleIter(VagosCar[6]);
						VagosCar[0] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2771.5327, -1623.8390, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
						VagosCar[1] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2776.0544, -1623.9009, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
						VagosCar[2] = CreateTeamVehicle(TEAM_VAGOS,1, 467, 2780.4949, -1623.8438, 10.8047, -27.6000, 6, 1,RES_CAR_TIME);
						VagosCar[3] = CreateTeamVehicle(TEAM_VAGOS,1, 474, 2779.6228, -1603.3281, 10.8047, -125.0400, 6, 1,RES_CAR_TIME);
						VagosCar[4] = CreateTeamVehicle(TEAM_VAGOS,1, 474, 2785.9009, -1603.1583, 10.8047, -125.0400, 6, 1,RES_CAR_TIME);
						VagosCar[5] = CreateTeamVehicle(TEAM_VAGOS,1, 478, 2769.9705, -1615.0035, 10.8047, -90.0000, 6, 1,RES_CAR_TIME);
						VagosCar[6] = CreateTeamVehicle(TEAM_VAGOS,1, 482, 2769.9705, -1606.8324, 10.8047, -90.0000, 6, 1,RES_CAR_TIME);
					}
					else if(PI[playerid][pMember][0] == 13)
					{
						DestroyVehicleIter(BallasCar[0]);
						DestroyVehicleIter(BallasCar[1]);
						DestroyVehicleIter(BallasCar[2]);
						DestroyVehicleIter(BallasCar[3]);
						DestroyVehicleIter(BallasCar[4]);
						DestroyVehicleIter(BallasCar[5]);
						DestroyVehicleIter(BallasCar[6]);
						DestroyVehicleIter(BallasCar[7]);
						DestroyVehicleIter(BallasCar[8]);
						DestroyVehicleIter(BallasCar[9]);
						BallasCar[0] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 2003.6793, -1120.1661, 26.4723, 181.2332, 179, 179,RES_CAR_TIME);
						BallasCar[1] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 2008.8434, -1129.2593, 25.0132, 90.0000, 179, 179,RES_CAR_TIME);
						BallasCar[2] = CreateTeamVehicle(TEAM_BALLAS,1, 566, 1985.5564, -1141.6482, 25.5184, 270.8255, 179, 179,RES_CAR_TIME);
						BallasCar[3] = CreateTeamVehicle(TEAM_BALLAS,1, 482, 1993.8208, -1141.5947, 25.3474, 270.0000, 179, 179,RES_CAR_TIME);
						BallasCar[4] = CreateTeamVehicle(TEAM_BALLAS,1, 419, 2001.6429, -1141.5061, 25.1574, 270.8112, 179, 179,RES_CAR_TIME);
						BallasCar[5] = CreateTeamVehicle(TEAM_BALLAS,1, 478, 1994.4465, -1095.7386, 24.9574, 344.2161, 179, 179,RES_CAR_TIME);
						BallasCar[6] = CreateTeamVehicle(TEAM_BALLAS,1, 478, 1998.7805, -1096.9128, 24.9574, 346.3077, 179, 179,RES_CAR_TIME);
						BallasCar[7] = CreateTeamVehicle(TEAM_BALLAS,1, 419, 2002.2770, -1097.8044, 24.9574, 345.6925, 179, 179,RES_CAR_TIME);
						BallasCar[8] = CreateTeamVehicle(TEAM_BALLAS,1, 468, 1988.2346, -1127.2072, 25.4664, 159.4789, 179, 179, RES_CAR_TIME);
						BallasCar[9] = CreateTeamVehicle(TEAM_BALLAS,1, 468, 1985.2548, -1127.1553, 25.5491, 161.5554, 179, 179, RES_CAR_TIME);						
					}
					else if(PI[playerid][pMember][0] == 14)
					{
						DestroyVehicleIter(CoronosCar[0]);
						DestroyVehicleIter(CoronosCar[1]);
						DestroyVehicleIter(CoronosCar[2]);
						DestroyVehicleIter(CoronosCar[3]);
						DestroyVehicleIter(CoronosCar[4]);
						DestroyVehicleIter(CoronosCar[5]);
						DestroyVehicleIter(CoronosCar[6]);
						CoronosCar[0] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2516.9424, -2005.0195, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
						CoronosCar[1] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2512.8218, -2004.6410, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
						CoronosCar[2] = CreateTeamVehicle(TEAM_CORONOS,1, 567, 2508.7004, -2004.2294, 13.2656, 140.4600, 2, 2,RES_CAR_TIME);
						CoronosCar[3] = CreateTeamVehicle(TEAM_CORONOS,1, 535, 2514.5210, -2014.6700, 13.2656, 90.0000, 2, 2,RES_CAR_TIME);
						CoronosCar[4] = CreateTeamVehicle(TEAM_CORONOS,1, 535, 2506.8916, -2014.6700, 13.2656, 90.0000, 2, 2,RES_CAR_TIME);
						CoronosCar[5] = CreateTeamVehicle(TEAM_CORONOS,1, 478, 2530.8352, -2007.6204, 13.6256, 89.5200, 2, 2,RES_CAR_TIME);
						CoronosCar[6] = CreateTeamVehicle(TEAM_CORONOS,1, 482, 2530.8257, -2011.7937, 13.6256, 89.5200, 2, 2,RES_CAR_TIME);
					}
					else if(PI[playerid][pMember][0] == 15)
					{
						DestroyVehicleIter(RifaCar[0]);
						DestroyVehicleIter(RifaCar[1]);
						DestroyVehicleIter(RifaCar[2]);
						DestroyVehicleIter(RifaCar[3]);
						DestroyVehicleIter(RifaCar[4]);
						DestroyVehicleIter(RifaCar[5]);
						DestroyVehicleIter(RifaCar[6]);
						RifaCar[0] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2177.5630, -1808.2943, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
						RifaCar[1] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2173.5139, -1808.3468, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
						RifaCar[2] = CreateTeamVehicle(TEAM_RIFA,1, 529, 2169.4451, -1808.4357, 13.3516, -27.4200, 135, 135,RES_CAR_TIME);
						RifaCar[3] = CreateTeamVehicle(TEAM_RIFA,1, 439, 2172.6543, -1790.9640, 13.3516, -90.0000, 135, 135,RES_CAR_TIME);
						RifaCar[4] = CreateTeamVehicle(TEAM_RIFA,1, 439, 2165.4509, -1790.9640, 13.3516, -90.0000, 135, 135,RES_CAR_TIME);
						RifaCar[5] = CreateTeamVehicle(TEAM_RIFA,1, 478, 2190.1111, -1796.2930, 13.3516, 0.0000, 135, 135,RES_CAR_TIME);
						RifaCar[6] = CreateTeamVehicle(TEAM_RIFA,1, 482, 2190.1111, -1804.5145, 13.3516, 0.0000, 135, 135,RES_CAR_TIME);
					}
					else if(PI[playerid][pMember][0] == 25)
					{
						DestroyVehicleIter(CarWolfs[0]);
						DestroyVehicleIter(CarWolfs[1]);
						DestroyVehicleIter(CarWolfs[2]);
						DestroyVehicleIter(CarWolfs[3]);
						DestroyVehicleIter(CarWolfs[4]);
						DestroyVehicleIter(CarWolfs[5]);
						DestroyVehicleIter(CarWolfs[6]);
						DestroyVehicleIter(CarWolfs[7]);
						DestroyVehicleIter(CarWolfs[8]);
						DestroyVehicleIter(CarWolfs[9]);
						DestroyVehicleIter(CarWolfs[10]);
						DestroyVehicleIter(CarWolfs[11]);
						CarWolfs[0] = CreateTeamVehicle(TEAM_WOLFS,1, 475, 2461.7173, -1424.3177, 23.5287, 90.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[1] = CreateTeamVehicle(TEAM_WOLFS,1, 475, 2461.7173, -1413.2618, 23.5287, 90.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[2] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.4966, -1424.3262, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[3] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.6265, -1416.9812, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[4] = CreateTeamVehicle(TEAM_WOLFS,1, 496, 2507.7156, -1409.9048, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[5] = CreateTeamVehicle(TEAM_WOLFS,1, 518, 2518.3918, -1419.1108, 28.1375, 360.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[6] = CreateTeamVehicle(TEAM_WOLFS,1, 518, 2518.4070, -1411.1537, 28.1175, 360.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[7] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6436, -1402.2551, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[8] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6597, -1400.8583, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[9] = CreateTeamVehicle(TEAM_WOLFS,1, 509, 2502.6648, -1399.6414, 28.0375, 279.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[10] = CreateTeamVehicle(TEAM_WOLFS,1, 478, 2458.3862, -1407.9395, 23.7760, 90.0000, 37, 0,RES_CAR_TIME);
						CarWolfs[11] = CreateTeamVehicle(TEAM_WOLFS,1, 478, 2458.3862, -1419.0396, 23.7760, 90.0000, 37, 0,RES_CAR_TIME);
					}
					else if(PI[playerid][pMember][0] == 16)
					{
						DestroyVehicleIter(RMCars[0]);
						DestroyVehicleIter(RMCars[1]);
						DestroyVehicleIter(RMCars[2]);
						DestroyVehicleIter(RMCars[3]);
						DestroyVehicleIter(RMCars[4]);
						DestroyVehicleIter(RMCars[5]);
						DestroyVehicleIter(RMCars[6]);
						DestroyVehicleIter(RMCars[7]);
						DestroyVehicleIter(RMCars[8]);
						DestroyVehicleIter(RMCars[9]);
						DestroyVehicleIter(RMCars[10]);
						DestroyVehicleIter(RMCars[11]);
						DestroyVehicleIter(RMCars[12]);
						RMCars[0] = CreateTeamVehicle(TEAM_RM,1,579, 984.4582, 1747.0344, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
						RMCars[1] = CreateTeamVehicle(TEAM_RM,1,579, 984.4969, 1742.9897, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
						RMCars[2] = CreateTeamVehicle(TEAM_RM,1,579, 984.4497, 1738.9713, 8.4832, 90.0000, 0,0,RES_CAR_TIME);
						RMCars[3] = CreateTeamVehicle(TEAM_RM,1,409, 950.2493, 1743.6547, 8.2832, 179.4013, 0,0,RES_CAR_TIME);
						RMCars[4] = CreateTeamVehicle(TEAM_RM,1,580, 984.4694, 1719.4099, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
						RMCars[5] = CreateTeamVehicle(TEAM_RM,1,580, 984.3997, 1723.1316, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
						RMCars[6] = CreateTeamVehicle(TEAM_RM,1,580, 984.5228, 1727.1056, 8.2822, 90.0000, 0,0,RES_CAR_TIME);
						RMCars[7] = CreateTeamVehicle(TEAM_RM,1,468, 947.9976, 1724.3361, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
						RMCars[8] = CreateTeamVehicle(TEAM_RM,1,468, 948.0338, 1725.7334, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
						RMCars[9] = CreateTeamVehicle(TEAM_RM,1,468, 947.8561, 1722.8571, 8.4332, 250.2157, 0,0,RES_CAR_TIME);
						RMCars[10] = CreateTeamVehicle(TEAM_RM,1,421, 971.9404, 1769.3865, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
						RMCars[11] = CreateTeamVehicle(TEAM_RM,1,421, 971.8877, 1778.1040, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
						RMCars[12] = CreateTeamVehicle(TEAM_RM,1,421, 971.9247, 1787.2513, 8.5141, 180.0000, 0,0,RES_CAR_TIME);
					}
					else if(PI[playerid][pMember][0] == 17)
					{
						DestroyVehicleIter(YakuzaCars[0]);
						DestroyVehicleIter(YakuzaCars[1]);
						DestroyVehicleIter(YakuzaCars[2]);
						DestroyVehicleIter(YakuzaCars[3]);
						DestroyVehicleIter(YakuzaCars[4]);
						DestroyVehicleIter(YakuzaCars[5]);
						DestroyVehicleIter(YakuzaCars[6]);
						DestroyVehicleIter(YakuzaCars[7]);
						DestroyVehicleIter(YakuzaCars[8]);
						DestroyVehicleIter(YakuzaCars[9]);
						YakuzaCars[0] = CreateTeamVehicle(TEAM_YAKUZA,1,409, -2446.0315,133.0861,34.7638,272.9593, 0,0,RES_CAR_TIME);
						YakuzaCars[1] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2442.7847,141.9793,34.8783,269.9984, 0,0,RES_CAR_TIME);
						YakuzaCars[2] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2434.5728,141.2890,34.8992,269.8872, 0,0,RES_CAR_TIME);
						YakuzaCars[3] = CreateTeamVehicle(TEAM_YAKUZA,1,405, -2452.3250,149.9029,34.9176,0.0004, 0,0,RES_CAR_TIME);
						YakuzaCars[4] = CreateTeamVehicle(TEAM_YAKUZA,1,505, -2462.1074,154.1508,35.0971,0.0017, 0,0,RES_CAR_TIME);
						YakuzaCars[5] = CreateTeamVehicle(TEAM_YAKUZA,1,505, -2461.9407,164.1662,35.1050,0.1147, 0,0,RES_CAR_TIME);
						YakuzaCars[6] = CreateTeamVehicle(TEAM_YAKUZA,1,550, -2452.7681,167.5494,34.8352,359.5991, 0,0,RES_CAR_TIME);
						YakuzaCars[7] = CreateTeamVehicle(TEAM_YAKUZA,1,550, -2452.8779,158.3322,34.8348,359.5431, 0,0,RES_CAR_TIME);
						YakuzaCars[8] = CreateTeamVehicle(TEAM_YAKUZA,1,530, -2465.9961,174.6347,34.8529,229.8133, 0,0,RES_CAR_TIME);
					}
					else if(PI[playerid][pMember][0] == 18)
					{
						DestroyVehicleIter(LCNCars[0]);
						DestroyVehicleIter(LCNCars[1]);
						DestroyVehicleIter(LCNCars[2]);
						DestroyVehicleIter(LCNCars[3]);
						DestroyVehicleIter(LCNCars[4]);
						DestroyVehicleIter(LCNCars[5]);
						DestroyVehicleIter(LCNCars[6]);
						DestroyVehicleIter(LCNCars[7]);
						DestroyVehicleIter(LCNCars[8]);
						DestroyVehicleIter(LCNCars[9]);
						DestroyVehicleIter(LCNCars[10]);
						DestroyVehicleIter(LCNCars[11]);
						DestroyVehicleIter(LCNCars[12]);
						DestroyVehicleIter(LCNCars[13]);
						DestroyVehicleIter(LCNCars[14]);
						DestroyVehicleIter(LCNCars[15]);
						DestroyVehicleIter(LCNCars[16]);
						DestroyVehicleIter(LCNCars[17]);
						DestroyVehicleIter(LCNCars[18]);
						LCNCars[0] = CreateTeamVehicle(TEAM_LCN,1,409, 1472.1443, 2778.5149, 10.2784, 0.7317, 72,0,RES_CAR_TIME);
						//LCNCars[0] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2813.7498, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
						LCNCars[1] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2818.3545, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
						LCNCars[2] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2822.7544, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
						LCNCars[3] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2827.2556, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
						LCNCars[4] = CreateTeamVehicle(TEAM_LCN,1,507, 1529.1272, 2831.7986, 10.5784, 90.0000, 72,0,RES_CAR_TIME);
						LCNCars[5] = CreateTeamVehicle(TEAM_LCN,1,445, 1495.9521, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
						LCNCars[6] = CreateTeamVehicle(TEAM_LCN,1,445, 1500.3752, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
						LCNCars[7] = CreateTeamVehicle(TEAM_LCN,1,445, 1504.7489, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
						LCNCars[8] = CreateTeamVehicle(TEAM_LCN,1,445, 1509.1300, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
						LCNCars[9] = CreateTeamVehicle(TEAM_LCN,1,445, 1513.6281, 2878.5740, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
						//LCNCars[10] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2826.1260, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
						LCNCars[10] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2830.3674, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
						LCNCars[11] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2834.5801, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
						LCNCars[12] = CreateTeamVehicle(TEAM_LCN,1,457, 1424.0525, 2838.8606, 10.5784, 270.0000, 72,0,RES_CAR_TIME);
						LCNCars[13] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.1582, 2761.9631, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
						LCNCars[14] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.3872, 2760.5962, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
						LCNCars[15] = CreateTeamVehicle(TEAM_LCN,1,468, 1459.5973, 2759.4551, 10.3589, 299.7231, 72,0,RES_CAR_TIME);
						LCNCars[16] = CreateTeamVehicle(TEAM_LCN,1,545, 1491.3921, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
						LCNCars[17] = CreateTeamVehicle(TEAM_LCN,1,545, 1486.9521, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
						LCNCars[18] = CreateTeamVehicle(TEAM_LCN,1,545, 1482.4321, 2878.7532, 10.5784, -180.0000, 72,0,RES_CAR_TIME);
					}
					OrgInfo[GetTeamID(playerid)][oBank] -= 25000;
					SaveOrg(GetTeamID(playerid));
					f(global_str,sizeof(global_str),"[F] %s[%d] Заспавнил транспорт организации!",PN(playerid),playerid);
					SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
				}
				case 4: {
					if(OrgInfo[GetTeamID(playerid)][oBank] < 35000) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}На счет вашей организации недостачно денег!");
					if(PI[playerid][pMember][0] == 11)
					{
						Fuel[GroveCar[0]] =
						Fuel[GroveCar[1]] =
						Fuel[GroveCar[2]] =
						Fuel[GroveCar[3]] =
						Fuel[GroveCar[4]] =
						Fuel[GroveCar[5]] =
						Fuel[GroveCar[6]] = 100.0;
					}
					else if(PI[playerid][pMember][0] == 12)
					{
						Fuel[VagosCar[0]] =
						Fuel[VagosCar[1]] =
						Fuel[VagosCar[2]] =
						Fuel[VagosCar[3]] =
						Fuel[VagosCar[4]] =
						Fuel[VagosCar[5]] =
						Fuel[VagosCar[6]] = 100.0;
					}
					else if(PI[playerid][pMember][0] == 13)
					{
						Fuel[BallasCar[0]] =
						Fuel[BallasCar[1]] =
						Fuel[BallasCar[2]] =
						Fuel[BallasCar[3]] =
						Fuel[BallasCar[4]] =
						Fuel[BallasCar[5]] =
						Fuel[BallasCar[6]] =
						Fuel[BallasCar[7]] =
						Fuel[BallasCar[8]] =
						Fuel[BallasCar[9]] = 100.0;
					}
					else if(PI[playerid][pMember][0] == 14)
					{
						Fuel[CoronosCar[0]] =
						Fuel[CoronosCar[1]] =
						Fuel[CoronosCar[2]] =
						Fuel[CoronosCar[3]] =
						Fuel[CoronosCar[4]] =
						Fuel[CoronosCar[5]] =
						Fuel[CoronosCar[6]] = 100.0;
					}
					else if(PI[playerid][pMember][0] == 15)
					{
						Fuel[RifaCar[0]] =
						Fuel[RifaCar[1]] =
						Fuel[RifaCar[2]] =
						Fuel[RifaCar[3]] =
						Fuel[RifaCar[4]] =
						Fuel[RifaCar[5]] =
						Fuel[RifaCar[6]] = 100.0;
					}
					else if(PI[playerid][pMember][0] == 25)
					{
						Fuel[CarWolfs[0]] =
						Fuel[CarWolfs[1]] =
						Fuel[CarWolfs[2]] =
						Fuel[CarWolfs[3]] =
						Fuel[CarWolfs[4]] =
						Fuel[CarWolfs[5]] =
						Fuel[CarWolfs[6]] =
						Fuel[CarWolfs[7]] =
						Fuel[CarWolfs[8]] =
						Fuel[CarWolfs[9]] =
						Fuel[CarWolfs[10]] =
						Fuel[CarWolfs[11]] = 100.0;
					}
					else if(PI[playerid][pMember][0] == 16)
					{
						Fuel[RMCars[0]] =
						Fuel[RMCars[1]] =
						Fuel[RMCars[2]] =
						Fuel[RMCars[3]] =
						Fuel[RMCars[4]] =
						Fuel[RMCars[5]] =
						Fuel[RMCars[6]] =
						Fuel[RMCars[7]] =
						Fuel[RMCars[8]] =
						Fuel[RMCars[9]] =
						Fuel[RMCars[10]] =
						Fuel[RMCars[11]] =
						Fuel[RMCars[12]] = 100.0;
					}
					else if(PI[playerid][pMember][0] == 17)
					{
						Fuel[YakuzaCars[0]] =
						Fuel[YakuzaCars[1]] =
						Fuel[YakuzaCars[2]] =
						Fuel[YakuzaCars[3]] =
						Fuel[YakuzaCars[4]] =
						Fuel[YakuzaCars[5]] =
						Fuel[YakuzaCars[6]] =
						Fuel[YakuzaCars[7]] =
						Fuel[YakuzaCars[8]] =
						Fuel[YakuzaCars[9]] = 100.0;
					}
					else if(PI[playerid][pMember][0] == 18)
					{
						Fuel[LCNCars[0]] =
						Fuel[LCNCars[1]] =
						Fuel[LCNCars[2]] =
						Fuel[LCNCars[3]] =
						Fuel[LCNCars[4]] =
						Fuel[LCNCars[5]] =
						Fuel[LCNCars[6]] =
						Fuel[LCNCars[7]] =
						Fuel[LCNCars[8]] =
						Fuel[LCNCars[9]] =
						Fuel[LCNCars[10]] =
						Fuel[LCNCars[11]] =
						Fuel[LCNCars[12]] =
						Fuel[LCNCars[13]] =
						Fuel[LCNCars[14]] =
						Fuel[LCNCars[15]] =
						Fuel[LCNCars[16]] =
						Fuel[LCNCars[17]] =
						Fuel[LCNCars[18]] = 100.0;
					}
					OrgInfo[GetTeamID(playerid)][oBank] -= 35000;
					SaveOrg(GetTeamID(playerid));
					f(global_str,sizeof(global_str),"[F] %s[%d] Заказал бензин для транспортов организации!",PN(playerid),playerid);
					SendTeamMessage(PI[playerid][pMember][0],COLOR_GREY,global_str);
				}
		}
	}
	return false;
}

stock UnInvite(playerid)
{
	if IsACop(playerid) *then
	{
		if UsingShield{playerid} *then RemovePlayerAttachedObject(playerid, 7);
		PI[playerid][pShield] = 0.0;
	}

	PI[playerid][pMember][1] =
	PI[playerid][pMember] =
	PI[playerid][pDCTime]=
	PI[playerid][pRank] =
	PlayerJob[playerid] =
	pSportZal[playerid] = 0;
	UpdatePlayerDataInt(playerid, "Leader", 0);
    UpdatePlayerDataInt(playerid, "DropCarTime", 0);
    UpdatePlayerDataInt(playerid, "Rank", 0);
    UpdatePlayerDataInt(playerid, "Member", 0);

	SCM(playerid, COLOR_WHITE, !">> {FF6347} Местом спавна автоматически назначен ЖД Вокзал. Изменить место спавна {FFFFFF}>> {FF6347}/setspawn!");
	TeamDuty{playerid} = false;

	SetPlayerColor(playerid, 0xFDFCFC15);
	ResetSpawnInfo(playerid, 0);
	_ResetGun(playerid);
	UpdatePlayerArmour(playerid, 0);
	return SetBumSkin(playerid);
}

stock BuyVIP(playerid, caseId, VIP = 0)
{
	if(PI[playerid][pVIP][0] >= VIP)	
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас уже есть этот уровень VIP!");

	if(PI[playerid][pVirMoney] < GetDonateCostAppliedDiscount(caseId == 8999 ? 10 : 9))
		return SCM(playerid, COLOR_OLDRED,!"[Ошибка] {FFFFFF}У вас не достаточно AZ COINS!");

	GiveDonate(playerid, -GetDonateCostAppliedDiscount(caseId == 8999 ? 10 : 9));
	PI[playerid][pVIP][0] = (caseId == 8999 ? 5 : 6);
	PI[playerid][pVipTime] = Global_Time+(1800*24*60*60);

	f(mysql_string, 12, "%s", caseId == 8999 ? "Titan VIP" : "PREMIUM VIP");

	if(caseId == 8997)
		AddItem(playerid, 5802, 1);

	SQL("UPDATE `accounts` SET `VIP` = '%d', `VipTime` = '%d' WHERE `ID` = '%d'", PI[playerid][pVIP][0], PI[playerid][pVipTime], PI[playerid][pID]);
	SPDF(playerid, 0, 0, !"", "{5FDA27}Поздравляем с покупкой %s!\n\n{FFFFFF}Посмотреть свои возможности вы можете в /help.", !"Принять", "", mysql_string);
	SCMALLF(COLOR_RED, "[Информация]{FFFFFF} Игрок %s приобрел %s.", PN(playerid), mysql_string);


	return true;
}

stock GivePlayerLic(playerid, licid, days = 30)
{
	PI[playerid][LicensesData][licid] = Global_Time + 86400 * days;

	if(!GetCount(playerid, licid < 7 ? 800 + licid : licid == 7 ? 1423 : licid == 8 ? 1934 : licid == 9 ? 6160 : licid == 10 ? 7363 : 7421))
		AddItem(playerid, licid < 7 ? 800 + licid : licid == 7 ? 1423 : licid == 8 ? 1934 : licid == 9 ? 6160 : licid == 10 ? 7363 : 7421, 1, 0, 100, 0, 0, PI[playerid][LicensesData][licid]);

	return true;
}

stock GetPlayerLicense(playerid, licid)
{
	if(PI[playerid][LicensesData][licid] < Global_Time)
		return false;

	return true;
}

stock SavePlayerLicense(playerid)
{
	global_str = "";

	for(new i; i < 12; i++)
		f(global_str, 128, "%s%d,", global_str, PI[playerid][LicensesData][i]);

	return SQL("UPDATE accounts SET LicenseData = '%s' WHERE ID = '%d'", global_str, PI[playerid][pID]);
}

stock ShowLicenses(playerid, targetid, dialogid = 0)
{
	global_str = "";

	static const LicensesName[][15] = {
		"на авто",
		"на мото",
		"на полеты",
		"на плавание",
		"на ловлю рыбы",
		"на оружие",
		"на охоту",
		"на раскопки",
		"таксиста",
		"механика",
		"адвоката",
		"налоговника"
	};

	for(new i; i < 12; i++)
		format(mysql_string, 256, "{FFFFFF}Лицензия %s:\t\t%s {AFAFAF}(%s: %s)\n\n", LicensesName[i], GetPlayerLicense(targetid, i) ? "{10F441}Есть" : "{FF6347}Нету", GetPlayerLicense(targetid, i) ? "действует до" : "просночена", UNIX_TO_DATE(PI[targetid][LicensesData][i])),
		strcat(global_str, mysql_string);

	return SPD(playerid, dialogid, 0, "Лицензии", global_str, !"Ок", !"");
}

stock EatBoxHide(playerid)
{
	for(new i; i < 12; i++)
		TextDrawHideForPlayer(playerid, BoxEat[i]);

	for(new i; i < 6; i++)
		DestroyPlayerTD(playerid, BoxEatPlayer[playerid][i]);
	
	return DeletePVar(playerid, "SelectBoxEat");
}

stock GetPlayerADDVIP(playerid)
	return (PI[playerid][pAddVIP] > Global_Time);

stock GetPlayerDistanceFromPickup(Float:radius, playerId, pickupId)
{
	new Float:X, Float:Y, Float:Z;
	
	GetDynamicPickupPos(pickupId, X,Y,Z);
	
	return ( GetPlayerDistanceFromPoint(playerId, X,Y,Z) < radius );
}

stock GetRandomBySetting(data[][RandomPrize_enum], len = sizeof(data), dostup = -1)
{
	new ID = -1, ms = GetTickCount();
	
	while ID == -1 do
	{
		for(new i; i < len; i++)
		{
			if ( ( dostup == data[i][E_DOSTUP] or data[i][E_DOSTUP] == -1 or dostup == -1 ) && floatrandom(0.0, 100.0) < data[i][E_CHANCE_WIN] )
			{
				ID = i;
				break;
			}
		}
	}
	
	printf("GetRandomBySettig() ms uptime: %d", ms - GetTickCount());

	return ID;
}

cmd:createcustomclad(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2] );
	
	if(Iter_Free(Klad) == -1)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Все слоты под клады заняты :(");
	
	return CreateKlad(Iter_Free(Klad), pos[0], pos[1], pos[2] - 1.3);
}

cmd:CheckOnline(playerid, data[])
{
	extract data -> new player:id, day; else
		return SCM(playerid, COLOR_OLDRED, "Используйте: /CheckOnline [playerid] [номер дня]"), SCM(playerid, -1, "0 - Суббота, 1 - Воскресенье, 2 - Понедельник, 3 - Вторник, 4 - Среда, 5 - Четверг, 6 - Пятница"), SCMF(playerid, COLOR_OLDRED, "Сегодня номер дня недели: %d", day_of_week);
	
	if(!IsPlayerOnline(id))
		return false;
	
	else if(day > 6 or day < 0)
		return false;
		
	return CheckOnline(playerid, id, day);
}

new const Day_Of_Week_Name[][] = {"saturday", "sunday", "monday", "tuesday", "wednesday", "thursday", "friday"};

stock CheckOnline(playerid, id, day)
{
	new DataOnline[2];
	
	f(mysql_string, 128, "SELECT * FROM onlineinfo WHERE id = %d LIMIT 1;", PI[id][pID]);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if(!cache_num_rows())
	{
		SQL("INSERT INTO `onlineinfo` (`id`, `NickName`) VALUES ('%d', '%s') ", PI[id][pID], PN(id));
		
		SCM(playerid, COLOR_RED, "Попробуйте снова!");
	}
	else
	{
		cache_get_value_index(0, day + 2, global_str);
		
		Int_UnPackMassive(global_str, DataOnline);
		
		if(day == day_of_week)
			DataOnline[0] += pTemp[id][onlineData][0], DataOnline[1] += pTemp[id][onlineData][1];
		
		SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Проверка онлайна", "{FFFFFF}Онлайн дня %s\n\nУ адмнистратора: %s[%d]\n\nВремя в афк: %s\nБез афк: %s", !"X", !"", Day_Of_Week_Name[day], PN(id), id, Convert(DataOnline[1]), Convert(DataOnline[0]));
	}
	
	cache_delete(result);
	
	return true;
}

stock SaveOnline(id)
{
	if(!PI[id][pAdmin])
		return false;
		
	f(mysql_string, 128, "SELECT * FROM onlineinfo WHERE id = %d LIMIT 1;", PI[id][pID]);
	new Cache:result = mysql_query(mysql, mysql_string);
	
	if(!cache_num_rows())
	{
		SQL("INSERT INTO `onlineinfo` (`id`, `NickName`, `%s`) VALUES ('%d', '%s', '%s') ", Day_Of_Week_Name[day_of_week], PI[id][pID], PN(id), Int_PackMassive(0, pTemp[id][onlineData]));
	}
	else
	{
		new DataOnline[2];
		
		cache_get_value_index(0, day_of_week + 2, global_str);
		
		Int_UnPackMassive(global_str, DataOnline);
		
		DataOnline[0] += pTemp[id][onlineData][0], DataOnline[1] += pTemp[id][onlineData][1];
			
		SQL("UPDATE onlineinfo SET `%s` = '%s' WHERE id = %d LIMIT 1;", Day_Of_Week_Name[day_of_week], Int_PackMassive(0, DataOnline), PI[id][pID]);
	}
	
	cache_delete(result);
	
	return true;
}

cmd:smug(playerid)
{
	if(!AirDrop[air_Status])
		return SCM(playerid, COLOR_OLDRED, !"[Информация]{FFFFFF} Контейнер контрабанды ещё не сброшен.");

	EnableGPSForPlayer(playerid, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap]);
	return SCM(playerid, COLOR_VALIK, !"[Информация]{FFFFFF} Координаты контейнера контрабанды отмечены у вас на GPS.");
}

cmd:airdropstart(playerid)
{
	if(AirDrop[air_Status])
	{
		UpdatePlayerPos(playerid, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap] + 1.5);
		return SCM(playerid, COLOR_OLDRED, !"AirDrop уже существует, телепортируем вас на место падения...");
	}

	AirDrop[air_Status] = true;
	AirDrop[air_Open] = false;

	AirDrop[air_PosX] = floatrandom(-3000.0, 3000.0);
	AirDrop[air_PosY] = floatrandom(-3000.0, 3000.0);
	AirDrop[air_PosZ] = floatrandom(100.0, 150.0);

	MapAndreas_FindZ_For2DCoord(AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap]);

	AirDrop[air_Object] = CreateDynamicObject(18849, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZ], 0.0, 0.0, 0.0);
	
	MoveDynamicObject(AirDrop[air_Object], AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap] + 7.5, 2.50, 0.0, 0.0, 0.0);

	SetTimer("@AirDropOpen", floatround((AirDrop[air_PosZ]-AirDrop[air_PosZmap])/2.5)*1000, false);

	AirDrop[air_Text] = CreateDynamic3DTextLabel("Груз контрабанды\nИспользуйте {9ACD32}ALT{FFFFFF} для\nпросмотра содержимого!", -1, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap] + 0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	SCMALL(-1, !"{BE2D2D}[Внимание]{FFFFFF} Ваши друзья из {E65075}Либерти Сити{FFFFFF} сбросили контейнер контрабанды!");
	SCMALL(-1, !"{BE2D2D}[Внимание]{FFFFFF} Быстрее отправляйтесь на разгрузку, дабы контейнер не забрали ваши конкуренты!");
	return SCMALL(-1, !"{BE2D2D}[Внимание]{FFFFFF} Подробная информация: {BE2D2D}/smug");
}

public: @AirDropOpen()
{
	DestroyDynamicObject(AirDrop[air_Object]);

	AirDrop[air_Object] = CreateDynamicObject(3014, AirDrop[air_PosX], AirDrop[air_PosY], AirDrop[air_PosZmap], 0.0, 0.0, 0.0);

	AirDrop[air_Open] = true;

	//
	for(new i; i < 5; i++)
	{
		AirDrop[air_InventoryReCount][i]  = 1;

		switch random(1000) do
		{
			case 0..698: AirDrop[air_Inventory][i] = 616 + random(300);
			case 699..959: AirDrop[air_Inventory][i] = 615, AirDrop[air_InventoryReCount][i] = 10000 + random(500000);
			case 960..999: AirDrop[air_Inventory][i] = 1464 + random(9);
		
		}

		AirDrop[air_InventoryCount][i] = random(10) + 1;
		AirDrop[air_InventoryLastTake][i] = Global_Time;
	}
	//

	AirDrop[air_Timer] = 300;
}

stock logwrite(string[]) {

	new File: opennedfile = fopen("/logs/csl_log.txt", io_append), year,month,day,minuite,second,hour;

   	getdate(year,month,day);
   	Global_Time = gettime(hour,minuite,second);

	format(global_str, 2048, "\n\n[%d:%d:%d %d-%d-%d] %s", hour, minuite, second, day, month, year, string);

	fwrite(opennedfile, global_str);

	return fclose(opennedfile);
}

cmd:antirakbot(playerid)
{
	if(!IsOsnovatel(playerid))
		return false;
		
	ANTI_RAK_BOT = !ANTI_RAK_BOT;

	return SAMF(COLOR_OLDRED, "[A] Администратор %s[%d] %s систему ANTI_RakBot.", PlayerName[playerid], playerid, ANTI_RAK_BOT ? "включил":"выключил");
}

stock PLVEH_destroy(playerid)
{
	if(!(PI[playerid][plveh] == -1))
		DestroyVehicleEx(PI[playerid][plveh]);

	if(AksSlot[playerid][0][5] == 1463)
		SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);
	
	return (true, PI[playerid][plveh] = INVALID_DATA_ID);
}

stock ShowLombardMenu(playerid)
{
	new data = GetDataPawnShopId(BizEntered[playerid]);

	if(data == INVALID_DATA_ID)
		return SendErrorMessage(playerid);

	return SPDF(playerid, 25340, DIALOG_STYLE_LIST, !"Управление ломбардом", "Изменить товары для выкупа\nСклад оставленных предметов\nКомиссия за 4 часа хранения:\t%d%%\nБаланс BTC для выкупа:\t\t%d BTC", !"Выбрать", !"Закрыть", LombardData[data][ld_commission], LombardData[data][ld_balance]);
}

stock ApplyLombardAction(playerid, listitem, dId, text[], biz, data)
{
	switch dId do
	{
		case 25340:
		{
			switch listitem do
			{
				case 2: 
					return SPDF(playerid, 25341, DIALOG_STYLE_INPUT, !"Изменение комиссии за хранение", "{ffffff}Текущий процент комиссии: {ffff00}%d%%\n{ffffff}Укажите новый процент комиссии (от 1 до 4%%)\n\n{AFAFAF}Процент будет начислен на сумму выкупа\nза каждые 4 часа хранение предмета в ломбарде.\n\nОбратите внимание, комиссия не изменяется для тех\nпредметов, которые уже находятся на хранении в ломбарде.", !"Изменить", !"Назад", LombardData[data][ld_commission]);
				
				case 3:
					return SPD(playerid, 25342, DIALOG_STYLE_LIST, (str_f("Баланс: %d BTC", LombardData[data][ld_balance])), !"Пополнить баланс BTC\nВывести с баланса BTC", !"Выбрать", !"Назад");
			}
		}

		case 25341:
		{
			new count = strval(text);

			if(!(1 <= count <= 4))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Комиссия не может быть меньше 1%% и больше 4%%.");
			
			SQL("update pawnshopdata SET commission = %d WHERE bizId = %d LIMIT 1;", LombardData[data][ld_commission] = count, biz);

			return SCMF(playerid, COLOR_VALIK, "[Информация]{FFFFFF} Вы установили комиссию %d%% в ломбарде №%d.", count, biz);
		}
		
		case 25342:
		{
			if(!listitem)
				format(global_str, 150, "{FFFFFF}Сейчас на балансе: {FFFF00}%d BTC\nНа вашем личном счету: %d BTC\n{FFFFFF}Укажите сколько BTC вы хотите пополнить?", LombardData[data][ld_balance], GetCount(playerid, 1811));
			else
				format(global_str, 150, "{FFFFFF}Сейчас на балансе: {FFFF00}%d BTC\n{FFFFFF}Укажите сколько BTC вы хотите вывести?", LombardData[data][ld_balance]);

			strcat(global_str, "\n\n{AFAFAF}Ваши клиенты не смогут сдавать свои предметы в залог,\nесли на вашем балансе BTC не будет хватать для этого средств.\nПоэтому не забывайте следить за балансом BTC.");
			return (!listitem ? SPD(playerid, 25343, DIALOG_STYLE_INPUT, !"Пополнение баланса BTC", global_str, !"Пополнить", !"Назад"):SPD(playerid, 25344, DIALOG_STYLE_INPUT, !"Вывод с баланса BTC", global_str, !"Вывод", !"Назад"));
		}

		case 25343:
		{
			new count = strval(text);

			if(!(1 <= count <= GetCount(playerid, 1811)))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас на счету нет столько BTC.");
			
			SCM(playerid, -1, "++");
		}

		case 25344:
		{
			new count = strval(text);

			if(!(1 <= count <= LombardData[data][ld_balance]))
				return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} На балансе ломбарда нет столько BTC.");
			
			SCM(playerid, -1, "++");
		}

	}

	return true;
}

stock CheckRepairSystem(playerid)
{	
	for(new i; i < sizeof(AutoService); i++) {

		if(IsPlayerInRangeOfPoint(playerid, 1.5, AutoService[i][asPosX], AutoService[i][asPosY], AutoService[i][asPosZ])) {

			if(!(AutoService[i][asStatus] == true))
				return SCM(playerid, COLOR_GREY, !"На данный момент уже кто-то ремонтируется в этом боксе.");

			int_TRANSIT_PLAYER_DATA = i;

			return SPD(playerid, 15424, DIALOG_STYLE_MSGBOX, !"Авто Сервис", !"{ffffff}Вы действительно хотите провести ремонтные работы с вашим автомобилем?\n{ffff00}Стоимость ремонта: $100000", !"Согласен", !"Отмена");
		}

	}

	return true;
}

stock CreateMechanicActorByVehicle(playerid, vehicleid, skinId, actor_nums, serviceId)
{
    new Float:y_dist, Float:X, Float:Y, Float:Z, Float:angle;

    GetVehicleModelInfo(GetVehicleModelEx(vehicleid), 1, X, y_dist, Z);
    GetVehiclePos(vehicleid, X, Y, Z);

	GetVehicleZAngle(vehicleid, angle);

	switch actor_nums do {
		
		case 0: { // Багажник
			
			y_dist = y_dist / 2 + 0.15;

			X += y_dist * floatsin(-angle + 180, degrees);
			Y += y_dist * floatcos(-angle + 180, degrees);
		}

		case 1: { // Капот

			y_dist = y_dist / 2 + 0.15;

			X -= y_dist * floatsin(-angle + 180, degrees);
			Y -= y_dist * floatcos(-angle + 180, degrees);
			angle -= 180.0;

		}

		case 2: { // Правое переднее колесо

			y_dist = y_dist / 2 - 0.90;

			X += y_dist * floatsin(-angle + 35.0, degrees);
			Y += y_dist * floatcos(-angle + 35.0, degrees);

			angle += 90;
		}

		case 3: { // Заднее левое колесо

			y_dist = y_dist / 2 - 0.90;

			X -= y_dist * floatsin(-angle + 35.0, degrees);
			Y -= y_dist * floatcos(-angle + 35.0, degrees);

			angle -= 90;
		}

	}

	AutoService[serviceId][asActorIds][actor_nums] = CreateDynamicActor(skinId, X, Y, Z, angle, 1, 100.0, -1, -1, playerid);

	ApplyDynamicActorAnimation(AutoService[serviceId][asActorIds][actor_nums], "casino", "roulette_bet", 4.1, true, true, true, true, true);

	return ApplyDynamicActorAnimation(AutoService[serviceId][asActorIds][actor_nums], "casino", "slot_bet_01", 4.1, true, true, true, true, true);
}

public: @RepairCallBackCar(serviceId, vehicleId, playerid, getMoney)
{
	for(new i; i < 4; i++) {

		DestroyDynamicActor(AutoService[serviceId][asActorIds][i]);

	}

	AutoService[serviceId][asStatus] = true;

	if(!IsPlayerOnline(playerid))
		return false;
	
	else if(getMoney > PI[playerid][pMoney])
		return SCM(playerid, COLOR_GREY, !"Работа механиков была прервана, похоже они заметили что вы не способны оплатить ремонт!");

	else if(!(GetPlayerVehicleID(playerid) == vehicleId))
		return SendErrorMessage(playerid);

	GiveMoney(playerid, -getMoney, (str_f("оплата ремонта автосервиса №%d", AutoService[serviceId][asBizId])));
	GiveBizMoney(AutoService[serviceId][asBizId], getMoney);

	J_RepairVehicle(vehicleId);

	TogglePlayerControllable(playerid, true);

	return SCMF(playerid, COLOR_GREEN, "Ремонт успешно выполнен! Механики взяли за работу: {FFFFFF}$%d", getMoney);
}

public: @show_main_shop_price(playerid, type)
{
	global_str = "{FFFF00}Предмет\t{FFFF00}За последние 30 дней\n{FF0000}Предыдущая страница\n{FF0000}Следующая страница";
	
	spdList(playerid, 1, type);

	for(new i, id, sumAll, Float:centre; i < cache_num_rows(); i++)
	{
		cache_get_value_name_int(i, "itemId", id), spdList(playerid, i + 2, id);
		cache_get_value_name_int(i, "sumAllCount", sumAll), cache_get_value_name_float(i, "sumCenter", centre);
		strcat(global_str, (str_f("\n%s\tBTC %d", ItemsInfo[gpdList(playerid, i + 2)][itemName], floatround(sumAll/centre * 10000, floatround_ceil))));
	}

	return SPD(playerid, 25020, DIALOG_STYLE_TABLIST_HEADERS, (str_f("Средняя цена товаров при %s", !type ? "продаже":"скупке")), global_str, !"Выбрать", !"Назад");
}

public: @show_main_shop_price_stats(playerid, type, itemId)
{
	global_str = "{FFFF00}Дата\t{FFFF00}Количество продаж\t{FFFF00}Средняя цена за день";

	for(new i, allCount, Float:center; i < cache_num_rows(); i++)
	{
		cache_get_value_name(i, "dateCreate", SQL_GET_ROW_STR[0]);
		cache_get_value_name_int(i, "sumAllCount", allCount);
		cache_get_value_name_float(i, "sumCenter", center);
		strcat(global_str, (str_f("\n%s\t%d\tBTC %d", SQL_GET_ROW_STR[0], allCount, floatround(center * 10000, floatround_ceil))));
	}

	return SPD(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, (str_f("%s товара \'%s\' за последние 30 дней", !type ? "Продажа":"Скупка", ItemsInfo[itemId][itemName])), global_str, !"Назад", !"Закрыть");
}

public: @update_main_shop_base(itemId, count, money, type)
{
	if(!cache_num_rows())
		SQL("INSERT INTO main_shop (`itemId`, `type`, `sumAll`, `sumAllCount`, `sumCenter`) VALUES ('%d', '%d', '%f', '%d', '%f')", itemId, type, float(money) / 10000, count, (float(money) / 10000) / count );
	
	else
	{
		new Int_Data, Float:Float_Data;

		cache_get_value_name_int(0, "sumAllCount", Int_Data), Int_Data += count;
		cache_get_value_name_float(0, "sumAll", Float_Data), Float_Data += float(money) / 10000;

		SQL("UPDATE main_shop SET sumAll = '%f', sumAllCount = '%d', sumCenter = '%f', sendCount = `sendCount` + 1 WHERE itemId = %d AND type = %d AND %s;", Float_Data, Int_Data, Float_Data / Int_Data, itemId, type, "`dateCreate` LIKE CONCAT('%', DATE_FORMAT(CURRENT_TIMESTAMP, '%Y-%m-%d'), '%')");
	}
}

enum demote_offline_type
{
	offline_demote_mute,
	offline_demote_jail,
	offline_demote_warn,
	offline_demote_ban
};

new demote_time, demote_name[MAX_PLAYER_NAME], demote_reason[144];

cmd:muteoff(playerid, params[])
{
	if(sscanf(params, "s[24]ds[144]", demote_name, demote_time, demote_reason))
		return SCM(playerid, COLOR_OLDRED, "Используй: /muteoff [name] [time] [reason]");

	format(global_str, 250, "SELECT `ID`, `MuteTime`, `Online_status`, `PlayerID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", demote_name);
    mysql_tquery(mysql, global_str, "@GiveOfflineDemote", "dds", playerid, offline_demote_mute, params);
	
	return true;
}

cmd:warnoff(playerid, params[])
{
	if(sscanf(params, "s[24]s[144]", demote_name, demote_reason)) 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /warnoff [nick] [reason]");

	format(global_str, 250, "SELECT `ID`, `Warns`, `Online_status`, `PlayerID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", demote_name);
    mysql_tquery(mysql, global_str, "@GiveOfflineDemote", "dds", playerid, offline_demote_warn, params);
	
	return true;
}

cmd:banoff(playerid, params[])
{
	if(sscanf(params, "s[24]ds[144]", demote_name, demote_time, demote_reason)) 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /banoff [name] [дней] [Причина]");

	format(global_str, 250, "SELECT `ID`, `LastIP`, `Online_status`, `PlayerID` FROM accounts WHERE NickName = BINARY('%s') LIMIT 1;", demote_name);
    mysql_tquery(mysql, global_str, "@GiveOfflineDemote", "dds", playerid, offline_demote_ban, params);
	
	return true;
}

cmd:unmuteoff(playerid, data[])
{

	new Name[MAX_PLAYER_NAME], Reason[48];

	if(sscanf(data, "s[24]s[48]", Name, Reason)) 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unmuteoff [name] [reason]");

	if(!(GetPlayerID(Name) == INVALID_PLAYER_ID)) 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Игрок находится в сети!");

	f(global_str, 200, "Администратор %s снял заглушку в оффлайне с игрока %s, причина: %s", PN(playerid), Name, Reason);
	SendAdminsMessage(COLOR_GREY, global_str);
	
	ANL(Name, global_str);

	mysql_escape_string(Name, mysql_string);
	SQL("UPDATE accounts SET MuteTime = 0 WHERE NickName = '%s'", mysql_string);
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> снял заглушку в оффлайне <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "","", PN(playerid), PN(playerid), Name, Name, Reason);
}

cmd:unjailoff(playerid, data[])
{

	new Name[MAX_PLAYER_NAME], Reason[48];

	if(sscanf(data, "s[24]s[48]", Name, Reason)) 
		return SCM(playerid, COLOR_OLDRED, !"Используй: /unjailoff [name] [reason]");

	if(!(GetPlayerID(Name) == INVALID_PLAYER_ID)) 
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Игрок находится в сети!");

	f(global_str, 200, " Администратор %s выпустил в оффлайне с деморгана %s, причина: %s", PN(playerid), Name, Reason);
	SendAdminsMessage(COLOR_GREY, global_str);
	ANL(Name, global_str);

	mysql_escape_string(Name, mysql_string);
	SQL("UPDATE accounts SET Demorgan = 0 WHERE NickName = '%s'", mysql_string);
	
	return amlf("Администратор <a href=../pages/user?name=%s>%s</a> выпустил игрока <a href=../pages/user?name=%s>%s</a> в оффлайне из деморгана. Причина: %s", 5, "","", PN(playerid), PN(playerid), Name, Name, Reason);
}

public: @GiveOfflineDemote(playerid, demote_type, params[])
{
	new id, data;

	if(!cache_num_rows())
		return SCM(playerid, COLOR_GREY, !"Данного игрока не существует.");

	cache_get_value_name_int(0, "Online_status", id);
	
	if(id == 1001)
		return SCM(playerid, COLOR_RED, !"Игрок онлайн!");

	switch demote_type do
	{
		case offline_demote_mute, offline_demote_jail, offline_demote_ban:
			sscanf(params, "s[24]ds[144]", demote_name, demote_time, demote_reason);
		
		case offline_demote_warn:
			sscanf(params, "s[24]s[144]", demote_name, demote_reason);
	}

	if(strlen(demote_reason) > 30)
		return SCM(playerid, COLOR_RED, !"Не больше 30 символов!");

	switch demote_type do
	{
		case offline_demote_mute:
		{
			if(!(1 <= demote_time <= 300))
				return SCM(playerid,COLOR_RED, !"Нельзя выдать БЧ больше чем на 300 минут!");

			SQL("UPDATE `accounts` SET `MuteTime`= %d WHERE `NickName`= BINARY('%s') LIMIT 1;", demote_time * 60, demote_name);
			
			f(global_str, 300, "Администратор %s установил в оффлайне %d минут молчанки игроку %s. Причина: %s", PlayerName[playerid], demote_time, demote_name, demote_reason);
			ASCMALL(COLOR_RED,global_str);

			ANL(demote_name, global_str);
			
			return amlf("Администратор <a href=../pages/user?name=%s>%s</a> установил в оффлайне %d минут молчанки игроку <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PlayerName[playerid], PlayerName[playerid], demote_time, demote_name, demote_name, demote_reason);
		}

		case offline_demote_jail:
		{
			if(!(1 <= demote_time <= 3000))
				return SCM(playerid, COLOR_RED, !"Нельзя посадить (0-3000)");
			
			SQL("UPDATE `accounts` SET `Demorgan` = '%d', `Pcix` = `Pcix` + 1 WHERE `NickName` = BINARY('%s') LIMIT 1;", demote_time * 60, demote_name);

			f(global_str, 200, "Администратор %s установил в оффлайне %d минут тюрьмы игроку %s. Причина: %s", PlayerName[playerid], demote_time, demote_name, demote_reason);
			ASCMALL(COLOR_RED, global_str);

			ANL(demote_name, global_str);
			
			return amlf("Администратор <a href=../pages/user?name=%s>%s</a> посадил в оффлайне игрока <a href=../pages/user?name=%s>%s</a> в деморган на %d минут. Причина: %s", 5, "", "", PlayerName[playerid], PlayerName[playerid], demote_name, demote_name, demote_time, demote_reason);

		}

		case offline_demote_warn:
		{
			cache_get_value_name_int(0, "Warns", id);

			if(data >= 3)
				return SCM(playerid, COLOR_OLDRED, !"У данного игрока уже 3 варна.");

			SQL("UPDATE `accounts` SET `Warns`= '%d', `TimeToLastWarn`= '%d' WHERE `NickName` = BINARY('%s') LIMIT 1;", data + 1, Global_Time, demote_name);
			
			f(global_str, 300, "Администратор %s в оффлайне выдал варн игроку %s (%d/3), причина: %s", PlayerName[playerid], demote_name, data + 1, demote_reason);
			ASCMALL(COLOR_RED, global_str);
		}

		case offline_demote_ban:
		{
			if(!(1 <= demote_time <= 2000))
				return SCM(playerid, COLOR_OLDRED, !"Используй: /banoff [name] [дней] [Причина]");

			f(global_str, 150 , "Администратор %s забанил в оффлайне игрока %s. Причина: %s", PlayerName[playerid], demote_name, demote_reason);
			ASCMALL(COLOR_RED, global_str);
			ANL(demote_name, global_str);
	
			BanName(demote_name, PlayerName[playerid], demote_time, demote_reason);

			return amlf("Администратор <a href=../pages/user?name=%s>%s</a> забанил в оффлайне игрока <a href=../pages/user?name=%s>%s</a>. Причина: %s", 5, "", "", PlayerName[playerid], PlayerName[playerid], demote_name, demote_name, demote_reason);
		}

		default:
			return false;
	}

	return true;
}

stock srlenchar(const Text[], const symbol)
{
	new Result;

	for(new i; i < strlen(Text); i++) {
		if(Text[i] == symbol)
			Result ++;
	}

	return Result;
}

CMD:finder(playerid)
	return SPD(playerid, 15300, 2, (str_f("{FFFFFF}Поиск | {ff6666}Arizona RP %s", Setting_Server[7])), !"{ff6666}[1] {FFFFFF}Полный список серверных предметов.\n{ff6666}[2] {FFFFFF}Поиск предмета по названию (Короткое название предмета)\n{ff6666}[3] {FFFFFF}Полный список серверных автомобилей.\n{ff6666}[4] {Ffffff}Поиск автомобиля по названию (Короткое название авто)", !"Далее", !"Закрыть");

stock ShowListItem(playerid, type, page = 0)
{
	new max_size = 30 * (page + 1);

	int_TRANSIT_PLAYER_DATA = page;

	global_str = "\
		%s\n\
		>>> Следующая страница\t \n\
		<<< Предыдущая страница\t";

	f(global_str, sizeof(global_str), global_str, !type ? "{cccccc}№ | {FFFFFF}Название\t{cccccc}Цвет предмета\t{cccccc}Количество в один слот" : "{cccccc}Massive ID\t{cccccc}(Ид модели) Название\t{cccccc}Поддежрка кастомного тюнинга (капоты, спойлера, выхлопа)");

	for(new i = 30 * page ; i < (max_size > (type ? sizeof(vehicleModelInfo) : sizeof(ItemsInfo)) ? (type ? sizeof(vehicleModelInfo) : sizeof(ItemsInfo)):max_size); i++)
	{
		if(!type)
		{
			if(GetString(ItemsInfo[i][itemName], "DELETED") && GetString(ItemsInfo[i][itemName], "Клетка")) continue;
			strcat(global_str, (str_f("\n{ff6666}(%d) {ffffff}%s\t%d шт.", i, ItemsInfo[i][itemName], ItemsInfo[i][itemStack])));
		}
		else if(type == 1)
			strcat(global_str, (str_f("\n{ff6666}[%i] (%d) {ffffff}%s\t\t{ff6666}%s", i, vehicleModelInfo[i][vehicleModel], vehicleModelInfo[i][vehicleName], vehicleModelInfo[i][vehicleBonnetData][0] == -1 ? "не поддерживает" : "поддерживает")));
	}

	return spdList(playerid, 1, type), SPD(playerid, 15302, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF} Поиск (список) | Finder", global_str, !"Далее", !"Закрыть"); 
}

stock ShowAFKSettingDialog(playerid)
{
	global_str = "\
	{FFFFFF}[1] 'отошел {73B461}(%s){FFFFFF}'\t{AAAAAA}default\n\
	{FFFFFF}[2] 'Кушает {69B1E4}(5:00+){FFFFFF}'\t{AAAAAA}default\n\
	{FFFFFF}[3] 'Вышел на улицу {EC7878}(50:00+){FFFFFF}'\t{AAAAAA}default\n\
	{ECC488}>>> Информация";

	return SPD(playerid, 25211, DIALOG_STYLE_TABLIST, !"Надпись над головой в AFK режиме", global_str, !"Выбрать", !"Назад");
}

stock createBrowser(playerid, browserid, url[], key[])
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220,
		PR_UINT8, 10,
		PR_UINT32, pTemp[playerid][cefResolution][0],
		PR_UINT32, pTemp[playerid][cefResolution][1],
		PR_UINT32, 0,
		PR_UINT32, 0,
		PR_STRING32, url,
		PR_STRING32, key,
		PR_UINT32, browserid);

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

stock destroyBrowser(playerid, browserid)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220,
		PR_UINT8, 14,
		PR_UINT32, browserid);

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

IPacket:204(playerid, BitStream:bs)
{
	new weaponUpdate[PR_WeaponsUpdate];

	BS_IgnoreBits(bs, 8);
	BS_ReadWeaponsUpdate(bs, weaponUpdate, playerid);

	return true;
}

IPacket:207(playerid, BitStream:bs)
{
	new onFootSync[PR_OnFootSync];

	BS_IgnoreBits(bs, 8);
	BS_ReadOnFootSync(bs, onFootSync);
	BS_ReadUint8(bs, pTemp[playerid][pWeapon]);

	return true;
}

IPacket:200(playerid, BitStream:bs)
{
	new onVehicleData[PR_InCarSync], Float:A;
	BS_IgnoreBits(bs, 8), BS_ReadInCarSync(bs, onVehicleData);

	if(IsAUniqueVehicle(onVehicleData[PR_vehicleId]))
	{
		if(IsVehicleUpsideDown(onVehicleData[PR_vehicleId]))
			GetVehicleZAngle(onVehicleData[PR_vehicleId], A),
			SetVehicleZAngle(onVehicleData[PR_vehicleId], A);

		if(onVehicleData[PR_vehicleHealth] < 5000) 
			RepairVehicle(onVehicleData[PR_vehicleId]), J_SetVehicleHealth(onVehicleData[PR_vehicleId], 5000);
	}

	return true;
}

IPacket:220(playerid, BitStream:bs)
{
	new custom, value[3], text[300], bool:toggle;
	BS_ReadValue(bs, PR_IGNORE_BITS, 8, PR_UINT8, custom);

	switch custom do
	{
		case 0:
		{
			BS_ReadValue(bs, PR_UINT8, value[0], PR_IGNORE_BITS, 32);

			//if(PI[playerid][pHotKeyInfo][0] == value[0]) SCM(playerid, COLOR_GREY, !"Голосовая рация огранизации");
			//else if(PI[playerid][pHotKeyInfo][1] == value[0]) SCM(playerid, COLOR_GREY, !"Голосовая рация семьи");
			//else if(PI[playerid][pHotKeyInfo][2] == value[0]) SCM(playerid, COLOR_GREY, !"Система предложений");
			//else if(PI[playerid][pHotKeyInfo][3] == value[0]) SCM(playerid, COLOR_GREY, !"Гидравлическая система");
			if(PI[playerid][pHotKeyInfo][4] == value[0]) callcmd::lock(playerid);
			else if(PI[playerid][pHotKeyInfo][5] == value[0]) callcmd::anims(playerid, "");
			else if(PI[playerid][pHotKeyInfo][6] == value[0]) callcmd::radio(playerid);
			else if(PI[playerid][pHotKeyInfo][7] == value[0]) callcmd::phone(playerid);
			//else if(PI[playerid][pHotKeyInfo][8] == value[0]) SCM(playerid, COLOR_GREY, !"Трудовая книжка");
			//else if(PI[playerid][pHotKeyInfo][9] == value[0]) SCM(playerid, COLOR_GREY, !"Меню взаимодействия (Пешком)"); */
			else if(value[0] == 66)
			{
				if(battlePassOpen{playerid})
					return false;

				global_str = "", RETURN_STRING[1] = "";

				executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', `[\"ArizonaPass\"]`);");

				if(battlePassPlayer_data[playerid][5] > Global_Time && battlePassPlayer_data[playerid][2] >= 10)
					SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"{faac58}Ограничение на задания", "{FAAC58}-{ffffff} У Вас присутствует ограничение на выполнение всех заданий в BattlePass!\n\n{FAAC58}-{ffffff} Ваше ограничение снимется: {FAAC58}%s\n\n{cccccc}Снять ограничение можно досрочно через кнопку 'Снять лимит'", !"Закрыть", !"", UNIX_TO_DATE(battlePassPlayer_data[playerid][5]));

				for(new i; i < sizeof(battlePassQuestInfo_data); i++)
				{
					if(i < 100)
						f(global_str, sizeof(global_str), "%s[%d,%i,%i,50,100]%s", global_str, i + 1, !battlepassReward[playerid][0][i] && (battlePassPlayer_data[playerid][1] / 2 / 10) - 1 >= i ? 1 : 0, !battlepassReward[playerid][1][i] && (battlePassPlayer_data[playerid][1] / 2 / 10) - 1 >= i && battlePassPlayer_data[playerid][0] ? 1 : 0, i == 99 ? "" : ",");

					if(battlePassQuests_data[playerid][i])
						f(RETURN_STRING[1], 2048, "%s{\"id\":%i,\"currentProgress\":%i},", RETURN_STRING[1], i, battlePassQuests_data[playerid][i]);
				}
				
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonapass.initializeBattlePass', '[ {\"purchased\":1,\"premiumPurchased\":%i,\"passPrice\":2690,\"premiumPassPrice\":499,\"currentExp\":%i,\"expPerLevel\":20,\"junior\":0,\"availableToReceive\":[ %s ]} ]');", battlePassPlayer_data[playerid][0], battlePassPlayer_data[playerid][1], global_str)));
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonapass.initializeStats', `[{\"level\":%i,\"dailyComplete\":%i,\"totalComplete\":%i,\"fact\": \"%s\"}]`);", battlePassPlayer_data[playerid][1] / 2 / 10, battlePassPlayer_data[playerid][2], battlePassPlayer_data[playerid][3], battlePassFact_data[random(sizeof(battlePassFact_data))])));
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonapass.initializeDailyQuest', '[{ \"until\":%i,\"title\":\"Сделка вслепую\",\"image\":46,\"description\":\"Никогда не знаешь, что может находится в закрытом контейнере на аукционе в Сан Фиерро, возможно ты станешь богатым, а возможно твои вложения не\",\"target\":\"Купите контейнер на мероприятии Аукцион контейнеров\",\"currentExp\":%i,\"totalExp\":1,\"active\":1,\"take_rewards\": %i,\"rewards\":[ { \"name\":\"\",\"image\":5067},  { \"name\":\"\",\"image\":5068},  { \"name\":\"\",\"image\":5165} ]}]');", battlePassQuestsDay_data[0], battlePassPlayer_data[playerid][4], 0)));
			
				if(strlen(RETURN_STRING[1]))
					strdel(RETURN_STRING[1], strlen(RETURN_STRING[1])-1, strlen(RETURN_STRING[1])),
					executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonapass.initializeRegularQuestsExp', '[[%s]]');", RETURN_STRING[1])));

				cursorPlayer(playerid, 0, true), battlePassOpen{playerid} = true;
			}
			else if(value[0] == 73) callcmd::invent(playerid);
            else if(value[0] == 2 && IsPlayerInAnyVehicle(playerid)) SendVehiclePacketData(GetPlayerVehicleID(playerid), 180, bool:pTemp[playerid][pBlinkLight] = !pTemp[playerid][pBlinkLight]);
		}

		case 1:
		{
			BS_ReadBool(bs, toggle);
			setPlayerCustomIcon(playerid, 0, toggle);
		}

		case 18, 63:
		{
			if(GetPlayerLauncher(playerid) == 2)
				BS_ReadValue(bs, PR_UINT8, value[0], PR_UINT32, value[1], PR_UINT32, value[2]);

			BS_ReadString32(bs, text);

			if(GetString(text, "onSvelteAppInit") && GetPlayerLauncher(playerid) == 1)
				executeEvent(playerid, 0, "window.executeEvent('event.donationshop.updateDonateJsonUrl', `[\"https://wh17179.web1.maze-host.ru/donate.json\"]`);");

			ShowCefPublic(playerid, text, Int_PackMassive(0, value));
		}

		case 20:
		{
			BS_ReadValue(bs, 
				PR_UINT32, pTemp[playerid][cefResolution][0], 
				PR_UINT32, pTemp[playerid][cefResolution][1]);
				
			new BitStream:bsn = BS_New(), icon_named[][] = { "icon_31", "icon_31", "icon_17", "icon_17", "icon_23", "icon_23", "icon_23", "icon_23", "icon_23", "icon_23", "icon_17", "icon_17", "icon_17", "icon_17", "icon_17", "icon_17", "icon_17", "icon_17"}, Float:icon_pos[][] = 
			{
				{100.0, 1137.417725, -1489.740845, 15.796900},
				{100.0, 2178.754395, -1715.853516, 13.511500},
				{60.0, 941.245483, -1544.019653, 34.909199},
				{60.0, 940.397705, -1520.055664, 34.909260},
				{55.0, 1243.437012, -1819.626465, 13.414200},
				{55.0, 2812.092529, 1288.687988, 10.750000},
				{55.0, -2180.164551, 292.662201, 35.117199},
				{55.0, 1364.546875, -1678.352539, 13.551200},
				{55.0, 2419.665771, 2341.062500, 10.820300},
				{55.0, -1753.001587, 820.851624, 24.890600},
				{75.0, 1219.012207, -1438.971191, 45.648602},
				{75.0, 1219.073730, -1460.033813, 45.648602},
				{75.0, 1533.058960, -1765.818604, 34.340302},
				{75.0, 1512.093018, -1765.772827, 34.340302},
				{75.0, 2238.752930, -1709.919434, 23.771799},
				{75.0, -2081.774658, -756.715210, 67.817299},
				{50.0, -2052.301514, 246.812103, 113.241997},
				{50.0, -2141.752197, 246.706894, 113.241997}
			};

			for(new i; i < 3; i++)
			{
				BS_WriteValue(bsn, 
					PR_UINT8, 220,
					PR_UINT8, i == 2 ? 182 : 165,
					PR_STRING8, i == 2 ? "data\\remove_building.dat" : i == 1 ? "data\\maps\\streamer_exteriors.bin" : "data\\maps\\streamer_interiors.bin");

				PR_SendPacketEx(bsn, playerid), BS_Reset(bsn);
			}

			createBrowser(playerid, 0, "file:///frontend/svelte_js/index.html", "or7lq8Q8heur");
			//createBrowser(playerid, 1, "about:blank", "");

			for(new i; i < sizeof(HotKey_data); i++)
			{
				BS_WriteValue(bsn, PR_UINT8, 220); 

				if(i < 18)
					createPlayerCustomMarker(playerid, i + 1, icon_pos[i][0], icon_pos[i][1], icon_pos[i][2], icon_pos[i][3], icon_named[i]);
				
				BS_WriteValue(bsn, 
					PR_UINT8, 0, 
					PR_UINT8, HotKey_data[i][data_KeyID], 
					PR_BOOL, true);
				
				PR_SendPacketEx(bsn, playerid), BS_Reset(bsn);
			}

			BS_Delete(bsn);
		}

		case 22:
		{
			BS_ReadValue(bs, PR_UINT32, value[0]);
			
			if(value[0] == 1 && IsPlayerInDynamicArea(playerid, ScreenAreaId[0]))
				PI[playerid][pScreenBrowserInit] = true;
		}

		case 24:
		{
			BS_ReadValue(bs, 
				PR_UINT32, value[0], 
				PR_BOOL, toggle);

			pTemp[playerid][cefFocus] = toggle;

			if(!pTemp[playerid][cefFocus])
				hidePlayerCefInterface(playerid, true);
		}

		/*case 41:
		{
			BS_ReadValue(bs, 
				PR_UINT8, value[0]);

			if(GetRadioZone(GetPlayerVehicleID(playerid)) != -1)
			{
				if(!value[0])
					destroyZoneAZVoice(GetRadioZone(GetPlayerVehicleID(playerid)), false, INVALID_PLAYER_ID);

				else 
					playZoneAZVoice(GetRadioZone(GetPlayerVehicleID(playerid)), "http://arizona.gtasounds.com/launchstart.mp3", 0, INVALID_PLAYER_ID);
			}
		} */

		case 140:
		{
			BS_ReadString32(bs, text);
			if(TextFind(text, "-auth_cef_enable")) pTemp[playerid][cefAuth] = true;
			else pTemp[playerid][cefAuth] = false;
    	}

		case 167: 
		{
			BS_ReadValue(bs,
				PR_UINT8, value[0]);

			GameTextForPlayer(playerid, value[0] == 1 ? "~g~‹XOѓ" : "~r~‹‘XOѓ", 2000, 4);
		}

		case 168:
		{
			BS_ReadValue(bs,
				PR_UINT8, value[0],
				PR_UINT16, value[1]);

			if(GetPVarInt(playerid, !"teleportPortalGun") < Global_Time)
			{
				UpdatePlayerPos(playerid, portalGun[value[1]][value[0] == 2 ? 0 : 1][0], portalGun[value[1]][value[0] == 2 ? 0 : 1][1], portalGun[value[1]][value[0] == 2 ? 0 : 1][2]);
				SetPlayerFacingAngle(playerid, portalGun[playerid][value[0] == 2 ? 0 : 1][3]);
			//	playZoneAZVoice(GetRadioZone(playerid, 2), "https://arizona.gtasounds.com/portal_gun/teleport.mp3", 0, playerid);
				SetPVarInt(playerid, !"teleportPortalGun", Global_Time + 15);
			}
		}

		case 169:
		{
			new Float:position[5];

			BS_ReadValue(bs,
				PR_UINT8, value[0],
				PR_FLOAT, position[0],
				PR_FLOAT, position[1],
				PR_FLOAT, position[2],
				PR_FLOAT, position[3],
				PR_UINT32, value[1],
				PR_FLOAT, position[4]);

			if(portalGun[playerid][value[0] - 1][0] != 0.0 && portalGun[playerid][value[0] - 1][1] != 0.0 && portalGun[playerid][value[0] - 1][2] != 0.0)
				DestroyPlayerPortal(playerid, value[0]);

			CreatePlayerPortal(playerid, value[0], value[1], portalGun[playerid][value[0] - 1][0] = position[0], portalGun[playerid][value[0] - 1][1] = position[1], portalGun[playerid][value[0] - 1][2] = position[2], portalGun[playerid][value[0] - 1][3] = position[3], portalGun[playerid][value[0] - 1][4] = position[4]);
		}
	}

	return true;
}

IPacket:221(playerid, BitStream:bs)
{
	new custom;
	BS_ReadValue(bs, PR_IGNORE_BITS, 8, PR_UINT16, custom);

	switch custom do
	{
		case 53:
		{
			new npcid, Float:npcData[3];

			BS_ReadValue(bs, 
				PR_UINT16, npcid,
				PR_FLOAT, npcData[0],
				PR_FLOAT, npcData[1],
				PR_FLOAT, npcData[2]);

			Custom_npcOptions[npcid][data_Float][0] = npcData[0];
			Custom_npcOptions[npcid][data_Float][1] = npcData[1];
			Custom_npcOptions[npcid][data_Float][2] = npcData[2];
		}

		case 73:
		{
			new 
				bool:takePedDamage, pedId, Float:damageAmount, weaponId, bodyId, damagerId;

			BS_ReadValue(bs, 
				PR_BOOL, takePedDamage,
				PR_UINT16, pedId,
				PR_FLOAT, damageAmount,
				PR_UINT32, weaponId,
				PR_UINT32, bodyId,
				PR_UINT16, damagerId);

			/*if(takePedDamage) 
			{
				if(damagerId == Bodyguard_actorData[playerid][bodyguard_OwnerID] && Bodyguard_actorData[playerid][bodyguard_Npcid] == pedId)
					return SendChatBubblePed(playerid, pedId, 0xFFFFFFFF, Bodyguard_phrasesData[playerid][Bodyguard_actorData[playerid][bodyguard_Slotid]][4], 15.0, 5000);

				else
				{
					if(Bodyguard_actorData[playerid][bodyguard_AttackTime] < Global_Time && !Bodyguard_actorData[playerid][bodyguard_AttackID])
						return Bodyguard_actorData[playerid][bodyguard_AttackTime] = Global_Time + 3, SendChatBubblePed(playerid, pedId, 0xFFFFFFFF, Bodyguard_phrasesData[playerid][Bodyguard_actorData[playerid][bodyguard_Slotid]][0], 15.0, 5000);

					SendChatBubblePed(playerid, pedId, 0xFFFFFFFF, Bodyguard_phrasesData[playerid][Bodyguard_actorData[playerid][bodyguard_Slotid]][1], 15.0, 5000);
					Bodyguard_actorData[playerid][bodyguard_AttackID] = damagerId;
					AgressivePedtoPlayer(playerid, pedId, damagerId);
				}

				for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
					Bodyguard_playerData[playerid][i][bodyguard_Health][Bodyguard_playerData[playerid][i][bodyguard_Health][1] > 0.0 ? 1 : 0] -= damageAmount,
					SQL("UPDATE `bodyguard` SET `Health` = '%s' WHERE Name = '%s'", Float_PackMassive(0, Bodyguard_playerData[playerid][i][bodyguard_Health]), Bodyguard_playerData[playerid][i][bodyguard_Name]);
			}

			else OnPlayerGiveDamage(INVALID_PLAYER_ID, damagerId, damageAmount, weaponId, bodyId);*/
		}
	}

	return true;
}

IRPC:116(playerid, BitStream:bs)
{
	new response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ;

	BS_ReadValue(bs,
		PR_UINT32, response,
		PR_UINT32, index,
		PR_UINT32, modelid,
		PR_UINT32, boneid,
		PR_FLOAT, fOffsetX,
		PR_FLOAT, fOffsetY,
		PR_FLOAT, fOffsetZ,
		PR_FLOAT, fRotX,
		PR_FLOAT, fRotY,
		PR_FLOAT, fRotZ,
		PR_FLOAT, fScaleX,
		PR_FLOAT, fScaleY,
		PR_FLOAT, fScaleZ);

	return OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
}

stock sendPlayerCustom_packet(playerid, ...)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220);

	for(new i = 1; i < numargs(); i++) 
		BS_WriteValue(bs, 
			PR_UINT8, getarg(i));

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

stock sendPlayerCustom_rpc(playerid, ...)
{
	new BitStream:bs = BS_New();

	for(new i = 1; i < numargs(); i++) 
		BS_WriteValue(bs, PR_UINT8, getarg(i));

	return PR_SendRPC(bs, playerid, 252);
}

stock hidePlayerHud(playerid)
{
	LogotypeManagement(playerid, false);
	executeEvent(playerid, 0, "window.executeEvent('event.hudSA.updateSanAndreasHudVisible', '[false]');");
	return executeEvent(playerid, 0, "window.executeEvent('event.hudViceCity.updateViceCityHudVisible', '[false]');");
}

stock showPlayerHotkeys(playerid)
{
	executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.hotkeysVisible', '[%s]');", !PI[playerid][pCustomInterface][8] ? "false" : "true")));

	if(PI[playerid][pCustomInterface][8])
	{
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.setFractionRadioKey', '[%s]');", PI[playerid][pMember] ? (str_f("\"%s\"", HotKey_data[GetHotKeyID(playerid, 0)][data_KeyName])) : "null"))),
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.setFamilyRadioKey', '[%s]');", FP_Data[playerid][F_FAMILY_ID] != -1 ? (str_f("\"%s\"", HotKey_data[GetHotKeyID(playerid, 1)][data_KeyName])) : "null"))),
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.setRadioKey', '[\"%s\"]');", HotKey_data[GetHotKeyID(playerid, 6)][data_KeyName]))),
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.setPhoneKey', '[\"%s\"]');", HotKey_data[GetHotKeyID(playerid, 7)][data_KeyName]))),
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.setWorkbookKey', '[%s]');", !PI[playerid][pMember] ? "\"\", \"\"" : (str_f("\"%s\", \"%s\"", IsAtGang(playerid) ? "Криминальный кодекс" : "Трудовая книжка", HotKey_data[GetHotKeyID(playerid, 8)][data_KeyName]))))),
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.setRadialKey', '[\"%s\"]');", HotKey_data[GetHotKeyID(playerid, 9)][data_KeyName])));
	}

	return true;
}

stock showPlayerHud(playerid)
{
	switch GetPlayerLauncher(playerid) do
	{
		case 1:
		{
			hidePlayerHud(playerid), LogotypeManagement(playerid, !PI[playerid][pCustomInterface][2] ? true : false);
			sendPlayerCustom_packet(playerid, 8, !PI[playerid][pCustomInterface][2] ? 0 : 2);

			if(PI[playerid][pCustomInterface][2])
			{
				switch PI[playerid][pCustomInterface][2] do
				{
					case 4: executeEvent(playerid, 0, (str_f("window.executeEvent('event.hudViceCity.updateViceCityHudVisible', '[%s]');", PI[playerid][pCustomInterface][2] == 4 ? "true" : "false"))), executeEvent(playerid, 0, (str_f("window.executeEvent('event.hudViceCity.updateDonateMultiplier', '[%i]');", XDonate)));
					case 5: executeEvent(playerid, 0, (str_f("window.executeEvent('event.hudSA.updateSanAndreasHudVisible', '[%s]');", PI[playerid][pCustomInterface][2] == 5 ? "true" : "false"))), executeEvent(playerid, 0, (str_f("window.executeEvent('event.arizonahud.serverInfo', '[{\"id\":1,\"title\":\"%s\",\"project\":\"Arizona\",\"type\":\"Role play\",\"onLine\":%d,\"flag\":0,\"logo\":10,\"multiplier\":%d}]');", Setting_Server[7], Iter_Count(Player), XDonate)));
				}
								
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.%sSatiety', '[%d]');", PI[playerid][pCustomInterface][2] == 4 ? "hudViceCity.update" : "arizonahud.player", Fullness[playerid])));
				executeEvent(playerid, 0, (str_f("window.executeEvent('event.%s', '[%i]');", PI[playerid][pCustomInterface][2] == 4 ? "hudViceCity.updateWantedLevel" : "arizonahud.playerWanted", PI[playerid][pWanted])));

				if(GetPlayerState(playerid) == 2)
					SpeedometrSetting(playerid), SpeedometrSetting(playerid, GetPlayerState(playerid) == 2 ? 1 : 0);
			}

			return true;
		}
		case 2: sendPlayerCustom_packet(playerid, 8, !PI[playerid][pCustomInterface][2] ? 0 : PI[playerid][pCustomInterface][2] <= 2 ? PI[playerid][pCustomInterface][2] : 3), sendPlayerCustom_packet(playerid, 3, Fullness[playerid]);
	}

	return true;
}

stock playerUpdateInterface(playerid, interface_type)
{
/* 0 - dialogs (cef / default), 1 - speed, 2 - hud, 3 - radars, 4 - inventory type [trilogy], 5 - chat type, 6 - dialog save, 7 - dialog type (0,1,2), 8 - hotkey interface*/
	switch interface_type do
	{
		case 1: SpeedometrSetting(playerid, GetPlayerState(playerid) == 2 ? 1 : 0);
		case 2: showPlayerHud(playerid);
		case 3: sendPlayerCustom_packet(playerid, 9, PI[playerid][pCustomInterface][3]);
		case 5: sendPlayerCustom_packet(playerid, 33, PI[playerid][pCustomInterface][6]);
		case 6: sendPlayerCustom_packet(playerid, 39, PI[playerid][pCustomInterface][7]);
		case 8: 
		{
			if(serverInterfaceSettings[0])
				return false;

			sendPlayerCustom_packet(playerid, 53, PI[playerid][pCustomInterface][5]);
		}
		case 9: sendPlayerCustom_packet(playerid, 71, !SettingData[playerid][sdDiscordPosition] ? 0 : 128);
		case 11: showPlayerHotkeys(playerid);
	}

	return true;
}

stock showPlayerInterfaceDialog(playerid, type)
{
	global_str = "{FFFFFF}Тип\t{FFFFFF}Статус\n";

	for(new i; i < sizeof(customPoint_name); i++) 
		if(customPoint_name[i][customId] == type) 
			f(global_str, sizeof(global_str), "%s%s\t%s\n", global_str, customPoint_name[i][customName], (customPoint_name[i][customType] == PI[playerid][pCustomInterface][type] ? "{9ACD32}Включен" : "{FF6347}Выключен"));

	static const interface_names[][] = {"Спидометр", "Худ", "Радар"};
	
	return SPD(playerid, 1610, DIALOG_STYLE_TABLIST_HEADERS, (str_f("{FFFFFF}Выбор | {ae433d}%s", interface_names[type - 1])), global_str, "»", "«");
}

stock hidePlayerCefInterface(playerid, bool:escape = false)
{
	static const closeEvent[][][] = 
	{
		{"0", "window.executeEvent('cef.modals.closeModal', `[\"carMenu\"]`);"},
		{"0", "window.executeEvent('cef.modals.closeModal', `[\"businessInfo\"]`);"},
		{"0", "window.executeEvent('cef.modals.closeModal', `[\"interactionSidebar\"]`);"},
		{"0", "window.executeEvent('cef.modals.closeModal', `[\"keyReaction\"]`);"},
		{"0", "window.executeEvent('cef.modals.closeModal', `[\"dialogTip\"]`);"},
		{"0", "window.executeEvent('event.setActiveView', '[\"null\"]');"}
	};

	for(new i; i < sizeof(closeEvent); i++)
		executeEvent(playerid, strval(closeEvent[i][0]), closeEvent[i][1]);

	if(donateOpen[playerid])
		showPlayerHotkeys(playerid),
		donateOpen[playerid] = false;
	
	if(battlePassOpen{playerid})
		battlePassOpen{playerid} = false;

	if(pTemp[playerid][tSalonBox] != -1)
		tuningStationClose(playerid);

	if(!escape)
		cursorPlayer(playerid, 0, false);

	if(PlayerFuel[playerid] != -1)
		PlayerFuel[playerid] = KindFuel[playerid] = -1; 

	if(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)
	{
		if(!GetInventoryType(playerid, E_INVENTORY_TYPE_NONE))
			InventoryPage[playerid] = E_INVENTORY_TYPE_NONE;

		if(Int_GetPlayerData(playerid, "OtherInventOpen"))
			Int_SetPlayerData(playerid, "OtherInventOpen", false);
	}

	if(ShowPBiz[playerid] != -1)
		return callcmd::bizinfo(playerid), ShowPBiz[playerid] = -1;

	return SetPlayer_interfaceVisible(playerid, true), showPlayerHud(playerid), pTemp[playerid][cefFocus] = false;
}

stock executeEvent(playerid, browserid, event[])
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220,
		PR_UINT8, 17,
		PR_UINT32, browserid,
		PR_STRING32, event,
		PR_UINT32, 255);

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

stock eventMobile(playerid, const browserid[], event[])
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220,
		PR_UINT8, 84,
		PR_UINT8, browserid[0],
		PR_UINT8, browserid[1],
		PR_STRING32, event);

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

stock cursorPlayer(playerid, browserid, bool:toggle)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
		PR_UINT8, 220,
		PR_UINT8, GetPlayerLauncher(playerid) == 2 ? 62:25,
		GetPlayerLauncher(playerid) == 2 ? PR_UINT8:PR_UINT32, browserid,
		PR_BOOL, toggle);

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

stock setPlayerTag(playerid, forplayerid, bool:set = false, tagName[] = "")
{
	new BitStream:bs = BS_New(), string[3][30];

	sscanf(tagName, "P<|>a<s[30]>[3]", string);

	BS_WriteValue(bs,
		PR_UINT8, 220,
		PR_UINT8, 120,
		PR_UINT16, playerid,
		PR_BOOL, bool:set);

	if(set)
		for(new i; i < 3; i++)
			if(!isnull(string[i]))
				BS_WriteValue(bs, 
					PR_STRING8, string[i]);

	return PR_SendPacketEx(bs, forplayerid), BS_Delete(bs);
}

cmd:test_admin(playerid)
{
	if(!IsOsnovatel(playerid))
		return SCM(playerid, COLOR_GREY, "[Ошибка] Вам не доступна данная команда!");

	if(PI[playerid][pAdmin])
		return SCM(playerid, COLOR_GREY, "[Ошибка] У вас уже есть админка!");

	f(global_str, 128, "SELECT * FROM admin WHERE name = '%s'", PN(playerid));
	mysql_tquery(mysql, global_str, "SetAdmin", "isi", playerid, PN(playerid), 8);

	return SCM(playerid, COLOR_GREY, "Вы получили админ права, т.к прописаны в моде!");
}

stock setBrowserWindowPicture(playerid, browserid, url[])
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220,
		PR_UINT8, 16,
		PR_UINT32, browserid,
		PR_STRING32, url);

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

stock GetBussinesText(type, i)
{
	static text[248] = "";

	switch BizData[i][bState] do
	{
		case 0: SetString(text, (!type ? "ammo" : type == 1 ? "Амуниция/Тир предлагает возможность попрактиковаться в стрельбе из различных видов оружия, а также обучение основам безопасного обращения с оружием." : "81"));
		case 1: SetString(text, (!type ? "bar" : type == 1 ? "Бар - это заведение, где подают алкогольные и безалкогольные напитки, а также закуски. Бары обычно имеют уютную атмосферу, живую музыку и развлекательные программы." : "82"));
		case 2: SetString(text, (!type ? "convenience-store" : type == 1 ? "Магазин 24/7 - это торговый объект, осуществляющий продажу товаров в режиме круглосуточного доступа для покупателей." : "83"));
		case 3: SetString(text, (!type ? "clothing-shop" : type == 1 ? "Магазин одежды предлагает широкий ассортимент модной и стильной одежды для мужчин, женщин и детей" : "84"));
		case 4: SetString(text, (!type ? "car-market" : type == 1 ? "Авто тест-драйв предоставляет возможность протестировать различные модели автомобилей перед покупкой. Мы предлагаем пробные поездки по городу и за его пределами" : "101"));
		case 5: SetString(text, (!type ? "tunning-shop-lv" : type == 1 ? "Магазин тюнинга предлагает товары и услуги для улучшения внешнего вида и производительности автомобилей." : "92"));
		case 6: SetString(text, (!type ? "fuel-station" : type == 1 ? "АЗС/Магазин механики - это автозаправочная станция, на территории которой находится магазин с широким ассортиментом товаров для автомобилей." : "85"));
		case 7: SetString(text, (!type ? "food-stall" : type == 1 ? "Закусочная предлагает широкий ассортимент блюд, приготовленных из качественных и свежих продуктов." : "86"));
		case 8: SetString(text, (!type ? "car-rent" : type == 1 ? "Аренда транспорта - это услуга по предоставлению транспортных средств (автомобилей, мотоциклов, велосипедов) в краткосрочную аренду для личного использования." : "88"));
		case 9: SetString(text, (!type ? "accessories-store" : type == 1 ? "Магазин аксессуаров предлагает широкий выбор аксессуаров. В нашем ассортименте вы найдете сумки, кошельки, ремни, очки, украшения и многое другое." : "89"));
		case 13: SetString(text, (!type ? "food-stall" : type == 1 ? "Предлагает широкий выбор блюд быстрого питания. Мы используем только свежие ингредиенты и готовим наши блюда на открытом огне." : "114"));
		case 19: SetString(text, (!type ? "econom-car-shop" : type == 1 ? "Автосалон продает новые и подержанные автомобили различных марок и моделей. Мы предлагаем широкий ассортимент автомобилей." : "91"));
		case 20: SetString(text, (!type ? "average-car-shop" : type == 1 ? "Автосалон продает новые и подержанные автомобили различных марок и моделей. Мы предлагаем широкий ассортимент автомобилей." : "91"));
		case 21: SetString(text, (!type ? "luxe-car-shop" : type == 1 ? "Автосалон продает новые и подержанные автомобили различных марок и моделей. Мы предлагаем широкий ассортимент автомобилей." : "91"));
		case 22: SetString(text, (!type ? "tunning-shop-ls" : type == 1 ? "Магазин тюнинга предлагает товары и услуги для улучшения внешнего вида и производительности автомобилей." : "92"));
		case 23: SetString(text, (!type ? "oil-rig" : type == 1 ? "Нефтевышка занимается добычей нефти и газа. Она имеет оборудование для бурения скважин и добычи ресурсов." : "23"));
		case 24: SetString(text, (!type ? "clothing-workshop" : type == 1 ? "Мастерская одежды предоставляет услуги по пошиву и ремонту одежды. Мы используем только качественные материалы и следим за модой" : "96"));
		case 31: SetString(text, (!type ? "pawn-shop" : type == 1 ? "Ломбард - это предприятие, которое принимает на хранение ценные вещи от населения и выдает их владельцам при предъявлении соответствующих документов и оплате процентов за хранение." : "108"));
		case 32: SetString(text, (!type ? "oil-rig" : type == 1 ? "Наземные нефтевышки занимаются добычей нефти на суше. Они используют оборудование для бурения скважин и извлечения нефти из-под земли." : "109"));
		case 33: SetString(text, (!type ? "sport-palace" : type == 1 ? "Тренажерный зал предлагает услуги по занятиям спортом и фитнесом. Мы имеем современное оборудование и профессиональных тренеров." : "93"));
		case 35: SetString(text, (!type ? "strip-club" : type == 1 ? "Стрип клуб - это место взрослых развлечений, где можно получить большой спектр желаемых услуг 18+, а также приятно провести время в компании друзей и товарищей." : "106"));
		default: SetString(text, (type < 2 ? ("") : "92"));
	}

	return text;
}

enum browserClicked_info { clickid[3], searchtext[150] }
new browserClicked[][browserClicked_info] = 
{
	{{0, 0}, "business.list.select"},
	{{0, 1}, "business.info.panelchangeStatus"},
	{{0, 2}, "business.list.changeOpenedStatus"},
	{{0, 3}, "business.info.selectTab"},
	{{0, 4}, "business.info.refill"},
	{{0, 5}, "business.info.widthdraw"},
	{{0, 6}, "business.info.edit"},
	{{0, 7}, "business.info.refill"},

	{{1, 0}, "vehicleMenu.loadVehicleInfo"},
	{{1, 1}, "vehicleMenu.backToList"},
	{{1, 2}, "vehicleMenu.buttonClick"},
	{{1, 3}, "vehicleMenu.switchToggle"},

	{{2, 0}, "clickMinigame"},

	{{7}, "playAnimation"},

	{{9, 0}, "authorization"},
	{{9, 1}, "registration"},
	{{9, 3, 1}, "updateCharacter"},
	{{9, 3, 0}, "createCharacter"},

	{{10, 0}, "clickOnBlock"},
	{{10, 1}, "inventory.moveItem"},
	{{10, 2}, "inventory.openMenu"},
	{{10, 3}, "inventory.openHouse"},
	{{10, 4}, "inventory.openVehicle"},
	{{10, 5}, "inventory.openBusiness"},
	{{10, 6}, "inventory.openFamily"},
	{{10, 7}, "inventory.openDonat"},
	{{10, 8}, "inventory.openQuests"},
	{{10, 9}, "inventory.openAchivments"},
	{{10, 10}, "inventory.openSettings"},
	{{10, 11}, "inventory.openHelp"},
	{{10, 12}, "inventory.report"},
	{{10, 13}, "inventory.openGPS"},
	{{10, 14}, "clickOnButton"},
	{{10, 15}, "openWarehouse"},
	{{10, 16}, "requestShowingInventory"},
	{{10, 17}, "clickOnMenu"},
	{{10, 18}, "requestShowingInfo"},
	{{10, 19}, "inventory.carInfo"},

	{{17}, "businessInfo.handleAction"},

	{{40, 0}, "arizona-pass.purchasePremium"},
	{{40, 1}, "arizona-pass.getDailyQuestRewards"},
	{{40, 2}, "arizona-pass.removeLimit"},
	{{40, 3}, "arizona-pass.getReward"},
	{{40, 3}, "arizona-pass.sellReward"},

	{{42}, "buyItemDonationButton"}, 

	{{47}, "launchedApp"},
	{{47, -1, 17}, "playTrack"},
	{{47, -1, 17}, "rewindTrack"},
	{{47, -1, 18}, "stopTrack"},

	{{48, -1, 0}, "purchaseFuel"},
	{{48, -1, 1}, "purchaseProduct"},
	{{48, -1, 2}, "closeGasStation"},

	{{51, -1, 0}, "carNumbers.close"},
	{{51, -1, 1}, "carNumbers.purchase"},
	{{51, -1, 2}, "carNumbers.onNumberInitialized"},

	{{55}, "streetFood.purchase"},

	{{74, -1, 0}, "updateCategory"},
	{{74, -1, 1}, "updateDashboard"},
	{{74, -1, 2}, "cartAdd"},
	{{74, -1, 3}, "cartRemove"},
	{{74, -1, 4}, "updateTintedWindowColor"},
	{{74, -1, 5}, "updateColor"},
	{{74, -1, 6}, "cartClear"},
	{{74, -1, 7}, "updateDashboardSlider"},
	{{74, -1, 9}, "purchase"},
	{{74, -1, 11}, "exit"},

	{{76, -1, 0}, "crate.roulette.open"},
	{{76, -1, 1}, "crate.roulette.takePrize"},
	{{76, -1, 2}, "crate.roulette.exit"},
	{{76, -1, 3}, "toggle.roulette.OpeningAnimation"},

    {{93}, "containerContent.closeMenu"}
};

stock GetMobileHideWebView(browserid, subid_1, subid_2)
{
	for(new i; i < sizeof(browserClicked); i++)
		if(browserClicked[i][clickid][0] == browserid && browserClicked[i][clickid][1] == subid_1 && browserClicked[i][clickid][2] == subid_2 && (TextFind(browserClicked[i][searchtext], "exit") or TextFind(browserClicked[i][searchtext], "hide") or TextFind(browserClicked[i][searchtext], "close")))
			return true;

	return false;
}

stock SearchClickID(const text[], searchid)
{
	for(new i; i < sizeof(browserClicked); i++)
		if(GetString(text, browserClicked[i][searchtext])) return browserClicked[i][clickid][searchid];

	return -1;
}

stock GetSizeToner(size)
{
	switch(size)
	{
		case 0, 5: return 245;
		case 10: return 235;
		case 15: return 225;
		case 20: return 216;
		case 25: return 206;
		case 30: return 196;
		case 35: return 186;
		case 40: return 176;
		case 45: return 166;
		case 50: return 157;
		case 55: return 147;
		case 60: return 137;
		case 65: return 127;
		case 70: return 117;
		case 75: return 107;
		case 80: return 97;
		case 85: return 88;
		case 90: return 78;
		case 95: return 68;
		case 100: return 58;
	}
	return 0;
}

stock ShowCefPublic(playerid, const text[], const mobileData[] = "0,0,0")
{
	new request[150], id_var[5];

	if(GetPlayerLauncher(playerid) != 2) sscanf(text, "P<|>s[150]ii", request, id_var[0], id_var[1]);
	else sscanf(mobileData, "P<,>a<i>[3]", id_var);

	if((GetPlayerLauncher(playerid) == 2 ? id_var[0] : SearchClickID(request, 0)) != 93 && (TextFind(request, "close") || TextFind(request, "hide") || TextFind(request, "exit") || (GetPlayerLauncher(playerid) == 2 && GetMobileHideWebView(id_var[0], id_var[1], id_var[2]))))
		return hidePlayerCefInterface(playerid);

	switch GetPlayerLauncher(playerid) == 2 ? id_var[0] : SearchClickID(request, 0) do
	{
		case 10:
		{
			sscanf(text, "P<|>s[150]s[150]", text, request);

			switch(SearchClickID(text, 1))
			{
				case 0:
				{
					id_var[0] = json_ReplaceInt(request, "slot"), id_var[1] = json_ReplaceInt(request, "type");

					switch id_var[1] do
					{
						case 1, 5, 7, 8:
						{
							new item = (id_var[1] == 1 ? Inventory[playerid][0][id_var[0]] : id_var[1] == 5 ? HouseInfo[HouseEntered[playerid]][hItem][id_var[0]] : id_var[1] == 7 ? MusorInfo[musorka[playerid]][mItem][id_var[0]] : TrunkInfo[trunk[playerid]][tItem][id_var[0]]),
								amount = (id_var[1] == 1 ? Inventory[playerid][1][id_var[0]] : id_var[1] == 5 ? HouseInfo[HouseEntered[playerid]][hItemCount][id_var[0]] : id_var[1] == 7 ? MusorInfo[musorka[playerid]][mItemCount][id_var[0]] : TrunkInfo[trunk[playerid]][tItemCount][id_var[0]]);

							if((IsAAks(item) or IsASkinInv(item)) && id_var[1] == 1) id_var[3] = sendInventoryCEFButtonBits((str_f("Put_on|Drop|Info|Close%s", IsAAks(item) ? "|Rent" : "")));
							else id_var[3] = sendInventoryCEFButtonBits((str_f("%s%s%sInfo|Close", ItemsInfo[item][itemUseable] && id_var[1] == 1 ? "Use|" : id_var[1] == 1 && Int_GetPlayerData(playerid, "OtherInventOpen") > 0 && Int_GetPlayerData(playerid, "OtherInventOpen") != 2 ? "Put|" : id_var[1] > 1 ? "Take|" : "", ItemsInfo[item][itemDroppable] && (id_var[1] == 1 && Int_GetPlayerData(playerid, "OtherInventOpen") == 2) ? "Drop|" : "", amount > 1 && id_var[1] == 1 ? "Split|" : "")));
						}
						case 2: id_var[3] = sendInventoryCEFButtonBits((str_f("%sTake_on|Edit|Info|Close", ItemsInfo[AksSlot[playerid][0][id_var[0]]][itemUseable] ? "Use|" : "")));
						case 12, 23:
						{
							if(id_var[1] == 12)
							{
								if(CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][10 + id_var[0]] == 6518)
									id_var[3] = sendInventoryCEFButtonBits("Color|Take_on|Info|Close");

								if(TextFind(ItemsInfo[CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][10 + id_var[0]]][itemName], "[деталь тюнинга]"))
									id_var[3] = sendInventoryCEFButtonBits("Edit|Take_on|Info|Close");
							}

							if(id_var[1] == 23)
								id_var[3] = sendInventoryCEFButtonBits("Take_on|Info|Close");
						}
					}

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":3,\"data\":{\"type\":%i,\"slot\":%i,\"bits\":%i}}]`);", id_var[0], id_var[1], id_var[3])));
				}

				case 1:
				{
					new slot[2], type[2], Node:node[2];

					JSON_Parse(request, node[0]);

					for(new i; i < 2; i++)
					{
						JSON_GetObject(node[0], !i ? "from" : "to", node[1]), JSON_GetInt(node[1], "slot", slot[i]);
						JSON_GetObject(node[0], !i ? "from" : "to", node[1]), JSON_GetInt(node[1], "type", type[i]);
					}

					if(type[0] == 1 && type[1] == 1)
					{
						ChangeItemPos(playerid, slot[1], slot[0]);

						if(Inventory[playerid][0][slot[1]] == Inventory[playerid][0][slot[0]])
							with(playerid, slot[1], slot[0]);

						UpdateCellInventory(playerid, 0, 0, slot[0]), UpdateCellInventory(playerid, 0, 0, slot[1]);
					}

					if(type[0] == 1 && (type[1] == 2 or type[1] == 17))
					{
						if(ItemsInfo[Inventory[playerid][0][slot[0]]][itemAccesotySlot] == (type[1] == 17 ? (!slot[1] ? 7 : 6) : slot[1]))
							PutAcc(playerid, 0, type[1] == 17 ? (!slot[1] ? 7 : 6) : slot[1], slot[0]);

						else SCM(playerid, COLOR_RED, "[Ошибка]{ffffff} Данный тип аксессуара не подходит в этот слот!");
					}

					if(type[0] == 1 && type[1] == 22)
						ChangeInventorySkin(playerid, slot[0]);

					if(type[1] == 1 && (type[0] == 2 or type[0] == 17))
						DeletePlayerAccessory(playerid, type[0] == 17 ? (!slot[0] ? 7 : 6) : slot[0]);

					if(type[1] == 1 && (type[0] == 12 or type[0] == 23))
						DeletePlayerAccessoryVeh(playerid, GetPlayerVehicleID(playerid), slot[0] + (type[0] == 12 ? 10 : 0));

					if(type[0] == 1 && type[1] == 7)
						dropItem(playerid, slot[0]);

					if(type[0] == 7 && type[1] == 1) 
					{
						new id = musorka[playerid];

						if(MusorInfo[id][mItemTimer][slot[0]] > Global_Time) 
							return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя забрать из мусорки, так как он недавно был выкинут и заблокирован на 1 час!");

						if(id == -1) 
							return OtherInvClose(playerid);

						else if(!MusorInfo[id][mItem][slot[0]] || !MusorInfo[id][mItemCount][slot[0]]) 
							return false;

						else if(MusorInfo[id][mItemCount][slot[0]] == 1)
						{
							AddItem(playerid, MusorInfo[id][mItem][slot[0]], 1, MusorInfo[id][mItemColor][slot[0]], MusorInfo[id][mItemIdentificator][slot[0]], MusorInfo[id][mItemLevel][slot[0]], MusorInfo[id][mItemProc][slot[0]]);
							amlf("Игрок <a href=../pages/user?id=%d>%s</a> взял из мусорки %d предмет инвентаря %s (id:%d) в кол-во %d", 0, "", "", PI[playerid][pID], PN(playerid), id, ItemsInfo[MusorInfo[id][mItem][slot[0]]][itemName], MusorInfo[id][mItem][slot[0]], 1);
							MusorInfo[id][mItem][slot[0]] = MusorInfo[id][mItemCount][slot[0]] = MusorInfo[id][mItemColor][slot[0]] = MusorInfo[id][mItemLevel][slot[0]] = MusorInfo[id][mItemProc][slot[0]] = MusorInfo[id][mItemTimer][slot[0]] = 0;
							InventSlotOtherUpdateAll(id, 2, MusorInfo[id][mItem][slot[0]], GetInvID(playerid, slot[0], 1), slot[0]);
						}
						else if(MusorInfo[id][mItemCount][slot[0]] > 1)
							return PickInvent[playerid] = slot[0], PickInventSlot[playerid] = GetInvID(playerid, slot[0], 1), SPD(playerid, 8251, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите забрать", "Выбрать", "Отмена");
					}
				}

				case 2: callcmd::menu(playerid);
				case 3: callcmd::house(playerid);
				case 4: callcmd::cars(playerid);
				case 5: callcmd::bizinfo(playerid);
				case 6: callcmd::fammenu(playerid);
				case 7: callcmd::donate(playerid);
				case 8: SCM(playerid, COLOR_RED, "[Ошибка]{ffffff} Система отключена администрацией!");
				case 9: callcmd::rewards(playerid);
				case 10: callcmd::settings(playerid);
				case 11: callcmd::help(playerid);
				case 12: callcmd::report(playerid);
				case 13: callcmd::gps(playerid);

				case 14:
				{
					id_var[0] = json_ReplaceInt(request, "slot"), id_var[1] = json_ReplaceInt(request, "type");

					switch json_ReplaceInt(request, "action") do
					{
						case 1, 2:
						{
							if(id_var[0] == 1)
								UseItem(playerid, 0, id_var[1]);

							if(json_ReplaceInt(request, "action") == 1 && id_var[0] == 2)
								useableAccessory(playerid, id_var[1]);
						}

						case 4: 
						{
							if(id_var[0] != 1) 
								return false;

							if musorka[playerid] == -1 *then
								return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не рядом с мусоркой");

							dropItem(playerid, id_var[1]);
						}

						case 8:
							if(id_var[0] == 1) split(playerid, id_var[1]);

						case 16:
						{
							switch(id_var[0])
							{
								case 1, 2, 17, 22:
									GetItemInfo(playerid, id_var[0] == 22 ? 0 : id_var[0] == 17 ? 1 : id_var[0] - 1, id_var[0] == 17 ? (!id_var[1] ? 7 : 6) : id_var[0] == 22 ? InventoryMaxSlot - 1 : id_var[1]);
							}
						}

						case 256:
						{
							if(id_var[0] == 2)
								DeletePlayerAccessory(playerid, id_var[1]);

							if(id_var[0] == 17)
								DeletePlayerAccessory(playerid, !id_var[1] ? 7 : 6);

							if(id_var[0] == 22)
							{
								if(GetSkinInfo(GetPlayerSkin(playerid), 2) != PI[playerid][pSkin])
									return SCM(playerid, -1, "[ERROR]: GetPlayerSkin != PI[playerid][pSkin]");

								AddItem(playerid, GetSkinInfo(GetSkinInfo(GetPlayerSkin(playerid), 2), 1));
								SetPlayerSkinEx(playerid, PI[playerid][pSkin] = 18);
								UpdatePlayerDataInt(playerid, "Skin", PI[playerid][pSkin]);

								executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory',`[{\"action\":1,\"data\":{\"skin\":{\"model\":%i,\"background\":%i},\"security\":1}}]`);", ItemsInfo[GetSkinInfo(GetSkinInfo(GetPlayerSkin(playerid), 2), 1)][itemModel], ItemsInfo[GetSkinInfo(GetSkinInfo(GetPlayerSkin(playerid), 2), 1)][itemColor])));
								executeEvent(playerid, 0, "window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":22,\"items\":[{\"slot\":0}]}}]`);");
							}
						}

						case 2048:
						{
							if(id_var[0] == 2)
							{
								if BizEntered[playerid] == -1 or BizData[BizEntered[playerid]][bState] != 9 *then
									SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}Доступно в магазине аксессуаров");

								else if(!AksSlot[playerid][5][id_var[1]]) SPD(playerid, 26020, DIALOG_STYLE_MSGBOX, !"Подшив аксессуаров", !"{FFFFFF}В магазине аксессуаров сотрудники магазина за небольшую плату помогут вам\nподшить любой аксессуар под ваш вкус! Вы можете изменить кость крепления (голова/нога/рука/плечо и т.д),\nпозиции и размеры. Это ещё больше поможет вам выделиться из толпы и показать свою уникальность.\n\n{FF6347}Позиции аксессуара сохраняются только на ту одежду, на которую он был подшит. Если вы захотите сменить\nсвой образ, вам будет необходимо выполнить подшив повторно на новую одежду!\n\n{33AA33}Стоимость услуги, установленая владельцем магазина: 100000 BTC.\n\n{FFFFFF}- Хотите приступить?", !"Выбрать", !"Отмена");
								else SPD(playerid, 26020, DIALOG_STYLE_LIST, !"Выберите действие", !"[1] Установить новые позиции{33AA33}\t100000 BTC\n{FFFFFF}[2] Установить стандартные позиции\t{33AA33}50000 BTC", !"Выбор", !"Отмена");
							}
						}

						case 8192:
							SPD(playerid, 25668, DIALOG_STYLE_INPUT, !"{FF6666}Аренда предметов", !"{FF6666}-{ffffff} Вы действительно хотите сдать в аренду предмет {FF6666} {ffffff}?\n\n{cccccc}Введите в строку ниже ID игрока, которому хотите сдать предмет в аренду.", !"Далее", !"Назад");	
					}
				}

				case 15:
				{
					switch json_ReplaceInt(request, "type") do
					{
						case 5, 7: 
						{
							if(Int_GetPlayerData(playerid, "OtherInventOpen"))
								Int_SetPlayerData(playerid, "OtherInventOpen", 0);

							OtherInvOpen(playerid, json_ReplaceInt(request, "type") == 5 ? 1 : 2, 0.0, 0.0, json_ReplaceInt(request, "type") == 5 ? HouseEntered[playerid] : musorka[playerid]);
						}
						case 8: callcmd::trunk(playerid, IntToStr(GetPlayerVehicleID(playerid)));
					}
				}

				case 16:
				{
					switch id_var[0] do
					{
						case 27: sendInventoryCEF(playerid);
						case 28:
						{
							executeEvent(playerid, 0, "window.executeEvent('event.inventory.playerInventory',`[{\"action\":0,\"data\":{\"type\":30,\"items\":[{\"slot\":0,\"id\":0},{\"slot\":1,\"id\":0},{\"slot\":2,\"id\":0},{\"slot\":3,\"id\":0},{\"slot\":0,\"id\":1},{\"slot\":1,\"id\":1},{\"slot\":2,\"id\":1},{\"slot\":3,\"id\":1},{\"slot\":0,\"id\":2},{\"slot\":1,\"id\":2},{\"slot\":2,\"id\":2},{\"slot\":3,\"id\":2},{\"slot\":0,\"id\":3},{\"slot\":1,\"id\":3},{\"slot\":2,\"id\":3},{\"slot\":3,\"id\":3}]}}]`);"); // acs
							executeEvent(playerid, 0, "window.executeEvent('event.inventory.playerInventory',`[{\"action\":0,\"data\":{\"type\":33,\"items\":[{\"slot\":0,\"id\":0},{\"slot\":1,\"id\":0},{\"slot\":2,\"id\":0},{\"slot\":3,\"id\":0},{\"slot\":4,\"id\":0},{\"slot\":5,\"id\":0},{\"slot\":6,\"id\":0},{\"slot\":7,\"id\":0},{\"slot\":8,\"id\":0},{\"slot\":9,\"id\":0},{\"slot\":10,\"id\":0},{\"slot\":11,\"id\":0},{\"slot\":0,\"id\":1},{\"slot\":1,\"id\":1},{\"slot\":2,\"id\":1},{\"slot\":3,\"id\":1},{\"slot\":4,\"id\":1},{\"slot\":5,\"id\":1},{\"slot\":6,\"id\":1},{\"slot\":7,\"id\":1},{\"slot\":8,\"id\":1},{\"slot\":9,\"id\":1},{\"slot\":10,\"id\":1},{\"slot\":11,\"id\":1},{\"slot\":0,\"id\":2},{\"slot\":1,\"id\":2},{\"slot\":2,\"id\":2},{\"slot\":3,\"id\":2},{\"slot\":4,\"id\":2},{\"slot\":5,\"id\":2},{\"slot\":6,\"id\":2},{\"slot\":7,\"id\":2},{\"slot\":8,\"id\":2},{\"slot\":9,\"id\":2},{\"slot\":10,\"id\":2},{\"slot\":11,\"id\":2},{\"slot\":0,\"id\":3},{\"slot\":1,\"id\":3},{\"slot\":2,\"id\":3},{\"slot\":3,\"id\":3},{\"slot\":4,\"id\":3},{\"slot\":5,\"id\":3},{\"slot\":6,\"id\":3},{\"slot\":7,\"id\":3},{\"slot\":8,\"id\":3},{\"slot\":9,\"id\":3},{\"slot\":10,\"id\":3},{\"slot\":11,\"id\":3}]}}]`);"); // inv
							executeEvent(playerid, 0, "window.executeEvent('event.inventory.playerInventory',`[{\"action\":0,\"data\":{\"type\":32,\"items\":[{\"slot\":0,\"id\":0},{\"slot\":0,\"id\":1},{\"slot\":0,\"id\":2},{\"slot\":0,\"id\":3}]}}]`);"); // gun
							global_str = "";

							for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
								strcat(global_str, (str_f("{\"slot\":%i,\"id\":%i,\"skin\":%i,\"skin_background\":%d,\"name\":\"%s\",\"health\":%i,\"damage\":%i,\"defence\":%i,\"satiety\":%i,\"level\":%i,\"exp\":%i,\"max_exp\":%i,\"quality\":\"%s\",\"spawned\":%i,\"died\":%i}%s", i, i, ItemsInfo[Bodyguard_playerData[playerid][i][bg_ItemId]][itemModel], BodyguardRarity_Colors[BodyGuardInfo[GetBodyGuardItem(playerid, i)][1] - 1], Bodyguard_playerData[playerid][i][bg_Name], BodyGuardInfo[GetBodyGuardItem(playerid, i)][4], BodyGuardInfo[GetBodyGuardItem(playerid, i)][3], BodyGuardInfo[GetBodyGuardItem(playerid, i)][2], Bodyguard_playerData[playerid][i][bg_Satiety], Bodyguard_playerData[playerid][i][bg_Level], Bodyguard_playerData[playerid][i][bg_Exp], (Bodyguard_playerData[playerid][i][bg_Level] + 1) * 4, BodyguardRarity_Names[BodyGuardInfo[GetBodyGuardItem(playerid, i)][1] - 1], Bodyguard_playerData[playerid][i][bg_Spawn], Bodyguard_playerData[playerid][i][bg_Died], i == IsPlayerHaveBodyguard(playerid)-1 ? "" : ",")));

							executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory',`[{\"action\":1,\"data\":{\"securities\":[%s]}}]`);", global_str)));
							executeEvent(playerid, 0, "window.executeEvent('event.inventory.updateCharacterTab',`[\"security\"]`);");
						}
					}
				}

				case 17:
				{
					id_var[0] = json_ReplaceInt(request, "id");

					spdList(playerid, 0, id_var[0]), SPDF(playerid, 25762, DIALOG_STYLE_LIST, (str_f("%s", Bodyguard_playerData[playerid][id_var[0]][bg_Name])), "{%s}[1] %s\n{%s}[2] Воспроизвести анимацию\n[3] Изменить имя спутника {FFD700}[500 AZ Coins]{FFFFFF}\n[4] Продать другому игроку\n[5] Изменить реплики\n{FFFFFF}[6] Сдать охранника в аренду\n{FFFFFF}[7] Распрощаться (выбросить)", !"Выбрать", !"Отмена", Bodyguard_playerData[playerid][id_var[0]][bg_Timer] > 0 ? "BFBBBA" : "FFFFFF", Bodyguard_playerData[playerid][id_var[0]][bg_Spawn] ? "Спрятать" : "Заспавнить рядом с собой", Bodyguard_playerData[playerid][id_var[0]][bg_Spawn] ? "FFFFFF" : "BFBBBA");
				}

				case 18:
				{
					id_var[0] = json_ReplaceInt(request, "id");

					SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация об охраннике", "\
						{FFFFFF}Имя охранника: {B83434}[%s]{FFFFFF}\n\
						Тип: %s{FFFFFF}\n\n\
						{FFFFFF}Происхождение: {B83434}[%s]{FFFFFF}\n\
						Уровень: {B83434}[%i]{FFFFFF}\n\
						Опыт: {B83434}[%i/%i]{FFFFFF}\n\
						Здоровье: {B83434}[%i/%i]{FFFFFF}\n\
						Броня: {B83434}[%i/1000]{FFFFFF}\n\
						Сытость: {B83434}[%0.1f/100.0]{FFFFFF}\n\n\
						Защита: {B83434}[-%i% урона]{FFFFFF}\n\
						Урон: {B83434}[+%i урона]{FFFFFF}\n\
						Макс. HP: {B83434}[+%i HP]{FFFFFF}\n\
						Шанс словить пулю: {B83434}[%i%%]{FFFFFF}\n\n\
						{ff6666}Открытые характеристики охранника (0/%i):", "Закрыть", "", Bodyguard_playerData[playerid][id_var[0]][bg_Name], BodyGuardType_Name[ BodyGuardInfo[GetBodyGuardItem(playerid, id_var[0])][1] - 1 ], ItemsInfo[Bodyguard_playerData[playerid][id_var[0]][bg_ItemId]][itemName], Bodyguard_playerData[playerid][id_var[0]][bg_Level], Bodyguard_playerData[playerid][id_var[0]][bg_Exp], (Bodyguard_playerData[playerid][id_var[0]][bg_Level] + 1) * 4, floatround(Bodyguard_playerData[playerid][id_var[0]][bg_Health]), BodyGuardInfo[GetBodyGuardItem(playerid, id_var[0])][4], floatround(Bodyguard_playerData[playerid][id_var[0]][bg_Armour]), float(Bodyguard_playerData[playerid][id_var[0]][bg_Satiety]), BodyGuardInfo[GetBodyGuardItem(playerid, id_var[0])][2], BodyGuardInfo[GetBodyGuardItem(playerid, id_var[0])][3], 5 * (Bodyguard_playerData[playerid][id_var[0]][bg_Level] - 1), BodyGuardInfo[GetBodyGuardItem(playerid, id_var[0])][5], BodyGuardInfo[GetBodyGuardItem(playerid, id_var[0])][1]-1);
				}

				case 19:
					UseableCMDCars(playerid, 5, GetPlayerVehicleID(playerid), GetVehicleID(GetPlayerVehicleID(playerid)));
			}
		}

		case 0:
		{
			if(GetPlayerBiz(playerid) == -1)
				return SCM(playerid, COLOR_GREY, !"У вас нет бизнеса");

			switch SearchClickID(request, 1) do
			{
				case 0:
				{
					ShowPBiz[playerid] = id_var[0];

					executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', `[\"BusinessInformation\"]`);");

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.business.info.initializeBusinessInformation', `[\
						{\"id\":%d,\"type\":\"%s\",\"title\":\"%s\",\"balance\": %d, \"opened\":%i,\"stats\":[\
							{\"title\":\"Крыша\", \"value\":\"Нет\"},\
							{\"title\":\"Налог к оплате\", \"value\":\"$%d\",\"maxValue\":\"$250000 (%d PayDay)\"},\
							{\"title\":\"Прибыль за сегодня\", \"label:\": \"24 часа\",\"value\":\"$ %i\"},\
							{\"title\":\"Оплата крыши\", \"label:\": \"none\",\"value\":\"$0\"}] \
						}]`);", BizData[id_var[0]][bID], GetBussinesText(0, id_var[0]), BizData[id_var[0]][bName], BizData[id_var[0]][bMoney], BizData[id_var[0]][bLock], BizData[id_var[0]][bLevel], floatround(float(250000-BizData[id_var[0]][bLevel])/GLS[3], floatround_ceil), BizData[id_var[0]][bWin])));

					new pastHour;
					gettime(pastHour);

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.business.info.setDetailsGroupData', `[\
						{\"id\":\"details\",\"title\":\"Основная информация\",\"editable\": 0, \"items\":[\
							{\"title\":\"Продуктов\",\"value\":\"%i шт\"},\
							{\"title\":\"Цена покупки с госа\",\"value\":\"$%i\"},\
							{\"title\":\"Страховка (на слёт)\",\"value\":\"Отсутствует\"},\
							{\"title\":\"Открытые заказы на продукты\",\"value\":\"Отсутствуют\"},\
							{\"title\":\"Посетителей\",\"value\":\"За %i ч. - %i чел.\"}]\
						}]`);", BizData[id_var[0]][bProducts], BizData[id_var[0]][bCost], pastHour-5, BizData[id_var[0]][bVisit])));

					if(IsAChange(id_var[0]))
					{
						mysql_string = "";

						for(new i; i < GetMaxItems(BizData[id_var[0]][bState]); i++)
							strcat(mysql_string, (str_f("{\"title\":\"%s\",\"value\":\"$%i\"}%s", GetNameItem(BizData[id_var[0]][bState], i), BizData[id_var[0]][bItem][i], i == GetMaxItems(BizData[id_var[0]][bState]) - 1 ? "" : ",")));

						executeEvent(playerid, 0, (str_f("window.executeEvent('event.business.info.setDetailsGroupData', `[\
							{\"id\":\"0\",\"title\":\"Ассортимент бизнеса\",\"editable\":1, \"items\":[%s]}]`);", mysql_string)));
					}

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.business.info.setDetailsGroupData', `[\
						{\"id\":\"1\",\"title\":\"Заместители\",\"editable\":1, \"items\":[\
							{\"title\":\"Заместитель №1\",\"value\":\"%s\"}]\
						}]`);", GetString(BizData[id_var[0]][bZam], "none") ? "Отсутствует" : (str_f("%s", BizData[id_var[0]][bZam])))));

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.business.info.setDetailsGroupData', `[\
						{\"id\":\"finance\",\"title\":\"Финансовая статистика\",\"editable\":0, \"items\":[\
							{\"title\":\"Понедельник\",\"value\":\"$ %i\"},\
							{\"title\":\"Вторник\",\"value\":\"$ %i\"},\
							{\"title\":\"Среда\",\"value\":\"$ %i\"},\
							{\"title\":\"Четверг\",\"value\":\"$ %i\"},\
							{\"title\":\"Пятница\",\"value\":\"$ %i\"},\
							{\"title\":\"Суббота\",\"value\":\"$ %i\"},\
							{\"title\":\"Воскресенье\",\"value\":\"$ %i\"},\
							{\"title\":\"Прибыль за неделю\",\"value\":\"$ %i\"}]\
						}]`);", GetBizWeek(id_var[0], 0), GetBizWeek(id_var[0], 1), GetBizWeek(id_var[0], 2), GetBizWeek(id_var[0], 3), GetBizWeek(id_var[0], 4), GetBizWeek(id_var[0], 5), GetBizWeek(id_var[0], 6), (GetBizWeek(id_var[0], 0) + GetBizWeek(id_var[0], 1) + GetBizWeek(id_var[0], 2) + GetBizWeek(id_var[0], 3) + GetBizWeek(id_var[0], 4) + GetBizWeek(id_var[0], 5) + GetBizWeek(id_var[0], 6)))));

					executeEvent(playerid, 0, "window.executeEvent('event.business.info.initializeMenuTabs', `[[\
						{\"id\":0,\"title\":\"Управление бизнесом\",\"items\":[\
							{\"id\":1,\"title\":\"Найти бизнес в GPS\"},\
							{\"id\":5,\"title\":\"Закупка продуктов в бизнес\"},\
							{\"id\":6,\"title\":\"Отказаться от закупки продуктов в бизнес\"},\
							{\"id\":15,\"title\":\"Финансовая статистика\"},\
							{\"id\":16,\"title\":\"Покинуть должность заместителя\"},\
							{\"id\":21,\"title\":\"Изменить наименование бизнеса\"}]\
						},\
						{\"id\":1,\"title\":\"Методы продажи бизнеса\",\"items\":[\
							{\"id\":2,\"title\":\"Продать бизнесу государству\"},\
							{\"id\":3,\"title\":\"Продать бизнес игроку\"}]\
						},\
						{\"id\":2,\"title\":\"Улучшения бизнеса\",\"items\":[\
							{\"id\":22,\"title\":\"Управление объектами бизнеса\"}]\
						}]]`);");
				}
				case 1,2:
				{
					sscanf(text, "P<|>s[150]s[6]i", text, request, id_var[0]);

					if(GetString(request, "true")) id_var[1] = 1;
					else id_var[1] = 0;

					BizData[id_var[2] == 2 ? id_var[0] : ShowPBiz[playerid]][bLock] = id_var[1];
				}
				case 3:
				{
					switch id_var[0] do
					{
						case 1: EnableGPSForPlayer(playerid, BizData[ShowPBiz[playerid]][bEnter][0], BizData[ShowPBiz[playerid]][bEnter][1], BizData[ShowPBiz[playerid]][bEnter][2]), SCM(playerid,COLOR_VALIK, !"[Подсказка] {FFFFFF}Вы успешно отметили ваш бизнес в GPS.");
						case 2: SPDF(playerid, 161, 0, "", "{FFFFFF}Вы точно хотите продать свой бизнес?\n\n{19A725}Обратите внимание что за продажу вашего бизнеса в\nгосударство вы получите полько половину от его гос. стоимости.\nБудете продавать ваш бизнес за {FFFFFF}%d${19A725} ?", !"Да", !"Отмена", BizData[ShowPBiz[playerid]][bCost]/2);
						case 3: SPD(playerid, 164, 1, "", "{FFFFFF}Введите ид игрока и цену через запятую, без пробела.\nПример: {9ACD32}6,1000000.", !"Далее", !"Отмена");
						case 5:
						{
							if(BizData[ShowPBiz[playerid]][bState] == 7 || BizData[ShowPBiz[playerid]][bState] == 1 || BizData[ShowPBiz[playerid]][bState] == 2 || BizData[ShowPBiz[playerid]][bState] == 3 || BizData[ShowPBiz[playerid]][bState] == 9 || IsAChange(ShowPBiz[playerid]))
							{
								if(BizData[ShowPBiz[playerid]][bBuyCost]>0 && BizData[ShowPBiz[playerid]][bNeedItem]>0)return  SCM(playerid,COLOR_RED,!"[Ошибка] {FFFFFF}Вы уже заказали продукты! Если хотите составить заказ заново, отозвите старый!");
								f(global_str,sizeof(global_str),"{FFFFFF}Обратите внимание на стоимость товара где скупают развозчики! Если\nоплата от вас будет ниже чем на складе, вам никто не привезет груз!\n\nДля магазинов/баров - {51C859}%d${FFFFFF}\nДля закусочных - {51C859}%d${FFFFFF}.",GLS[29],GLS[31]);
								f(global_str,sizeof(global_str),"{FFFFFF}В ваш бизнес необходимо закупать товар, который развозят развозчики продуктов!\nВам нужно указать количество товара и его стоимость чтобы они могли его доставить.\nНа балансе всегда должны быть деньги, ибо вы не сможете купить груз!\n\n{CAD715}Введите количество и цену за 1 товар через запятую, без пробела. Пример: 5000,35.\n\n%s",global_str);
								SPD(playerid, 182, 1, "", global_str, !"Далее", !"Отмена");
							}
						}
						case 6:
						{
							if(BizData[ShowPBiz[playerid]][bState] == 7 || BizData[ShowPBiz[playerid]][bState] == 1 || BizData[ShowPBiz[playerid]][bState] == 2 || BizData[ShowPBiz[playerid]][bState] == 3 || BizData[ShowPBiz[playerid]][bState] == 9 || BizData[ShowPBiz[playerid]][bState] == 0 || BizData[ShowPBiz[playerid]][bState] == 13 || BizData[ShowPBiz[playerid]][bState] == B_GAS || IsAChange(ShowPBiz[playerid]))
							{
								if(BizData[ShowPBiz[playerid]][bBuyCost]>0 && BizData[ShowPBiz[playerid]][bNeedItem]>0)
								{
									BizData[ShowPBiz[playerid]][bBuyCost]=0;
									BizData[ShowPBiz[playerid]][bNeedItem]=0;
									SCM(playerid,COLOR_GREEN, !"Вы успешно отказались от своего заказа на скупку продуктов!");
									callcmd::bizinfo(playerid);
									UpdateBusinessText(ShowPBiz[playerid],0);
								}
							}
						}
						case 15: callcmd::bizfin(playerid, IntToStr(ShowPBiz[playerid]));
						case 16: SPD(playerid, 6941, 0, !"Подтверждение", "{FF6347}Вы действительно хотите покинуть пост заместителя?", !"Принять", !"Отмена");
						case 21: return ShowDialogEditName(playerid, 1);
						case 22: return spdList(playerid, 0, 1), SPDF(playerid, 2434, DIALOG_STYLE_LIST, !"Предметы недвижимости", "{FFFFFF}Предметы на улице:\t\tустановлено %d из %d\nПредметы в интерьере:\tустановлено %d из %d\n", !"Выбрать", !"Назад", GetCountUsedObj(ShowPBiz[playerid], 1), BizData[ShowPBiz[playerid]][bObjectCount][0], GetCountUsedObj(ShowPBiz[playerid], 1, 1), BizData[ShowPBiz[playerid]][bObjectCount][1]);
					}
				}
				case 4,5:
				{
					if(BizData[ShowPBiz[playerid]][bState] == 32)
						return SCM(playerid, COLOR_OLDRED, "Недоступно для вашего бизнеса");

					if(PI[playerid][pLevel] < 2)
						return SCMF(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}%s деньги с баланса бизнеса можно со 2-го уровня!", id_var[2] == 5 ? "Брать" : "Ложить");

					SPDF(playerid, id_var[2] == 5 ? 159 : 173, 1, "", "\n\n{FFFFFF}Введите сумму, которую хотите %s.\n\n", !"Ок", !"Отмена", id_var[2] == 5 ? "снять" : "положить на баланс вашего бизнеса");
				}
				case 6:
				{
					switch id_var[0] do
					{
						case 0:
						{
							if(IsAChange(ShowPBiz[playerid]))
							{
								global_str = "";

								for(new i; i < GetMaxItems(BizData[ShowPBiz[playerid]][bState]); i++)
									f(global_str, 1050, "%s{FFFFFF}%s: %d$\n", global_str, GetNameItem(BizData[ShowPBiz[playerid]][bState], i), BizData[ShowPBiz[playerid]][bItem][i]);

								SPD(playerid, 1600, 2, "Название", global_str, !"Выбор", !"Закрыть");
							}
						}
						case 1:
						{
							if(!GetString(BizData[ShowPBiz[playerid]][bOwner], PN(playerid))) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Это не ваш бизнес!");
				    		SPD(playerid, 6940, DIALOG_STYLE_INPUT, "Подтверждение", "{FFFFFF}Введите ниже ID игрока, которого\nхотите назначить заместителем.\n{FF6347}Если вы хотите убрать заместителя\nто оставьте поле пустым.", "Принять", "Отмена");
						}
					}
				}
			}
		}
		case 1:
		{
			switch SearchClickID(request, 1) do
			{
				case 0:
				{
					new carid = OnPlayerCarLoad(ShowCar[playerid][ id_var[0] ][0]), number = GetVehicleID(carid), numberData[4][10];

					ShowVeh[playerid] = ShowCar[playerid][id_var[0]][0];

					if(!carid)
						return SPD(playerid, 26926, DIALOG_STYLE_LIST, (str_f("{ff6666}Управление {ffffff}%s", GetVehicleName(ShowCar[playerid][ id_var[0] ][1], true))), !"{ff6666}1.{ffffff} Загрузить транспортное средство\n{ff6666}2.{ffffff} Загружать транспортное средство при авторизации", !"Далее", !"Закрыть");

					if(carid > 0 && !GetString(VehicleInfo[carid][vNumber], "Arizona ST"))
						sscanf(VehicleInfo[carid][vNumber], "P<,>a<s[10]>[4]", numberData);

					executeEvent(playerid, 0, "window.executeEvent('event.vehicleMenu.setVehicleInfoList', '[ null ]');");
					executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.vehicleTitle', `[\"%s\"]`);", GetVehicleName(carid))));
					executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.pushLabels', `[[\
						{\"title\":\"%s\",\"icon\":\"icon-car-number\"},\
						{\"title\":\"%s\",\"icon\":\"icon-fuel\"},\
						{\"title\":%i,\"icon\":\"icon-id\"}]]`);", GetString(VehicleInfo[carid][vNumber], "Arizona ST") ? "Нет" : (str_f("[%s] %s (%s)", numberData[1], numberData[0], countryNumber[strval(numberData[3])])), !GetVehicleKindFuel(carid) ? "ДВЗ" : "Топливо", carid)));

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.pushToggles', `[[\
						{\"id\":\"0\",\"title\":\"Двери\",\"value\":%i},\
						{\"id\":\"1\",\"title\":\"Ключи\",\"value\":%i},\
						{\"id\":\"2\",\"title\":\"Сигнализация\",\"value\":%i},\
						{\"id\":\"3\",\"title\":\"Загружать при входе\",\"value\":%i}]]`);", CarInfo[number][cLock], CarInfo[number][cKeyIN], !CarInfo[number][cAlarmON], CarInfo[number][ConnectLoad])));

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.pushActions', `[[\
						{\"id\":\"0\",\"title\":\"Тех.паспорт\",\"icon\":\"icon-pass\"},\
						{\"id\":\"1\",\"title\":\"Найти\",\"icon\":\"icon-gps\"},\
						{\"id\":\"2\",\"title\":\"Припарковать\",\"icon\":\"icon-parking\"},\
						{\"id\":\"3\",\"title\":\"Очистка посредников\",\"icon\":\"icon-person\"},\
						{\"id\":\"4\",\"title\":\"Заспавнить\",\"icon\":\"icon-racing-car\"},\
						{\"id\":\"5\",\"title\":\"Выгрузить\",\"icon\":\"icon-racing-car\"},\
						{\"id\":\"6\",\"title\":\"Режим вождения\",\"icon\":\"icon-racing-car\"},\
						{\"id\":\"7\",\"title\":\"Сдать в аренду\",\"icon\":\"icon-key\"}%s]]`);", PI[playerid][pAdmin] ? ",{\"id\":\"8\",\"title\":\"Телепортировать к себе\",\"icon\":\"icon-person\"}" : "")));

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.pushRadials', `[[\
						{\"id\":\"0\",\"title\":\"Запас топлива\",\"icon\":\"icon-fuel\",\"value\":%i,\"maxValue\":100,\"postfix\":\"л\"},\
						{\"id\":\"1\",\"title\":\"Здоровье Т/С\",\"icon\":\"icon-heart-hp\",\"value\":%i,\"maxValue\":1500,\"postfix\":\"HP\"},\
						{\"id\":\"2\",\"title\":\"Уровень масла\",\"icon\":\"icon-oil-level\",\"value\":%i,\"maxValue\":100,\"postfix\":\"л\"}]]`);", floatround(Fuel[carid]), floatround(VehicleHealth[carid]), floatround(CarInfo[number][cMaslo]))));

					executeEvent(playerid, 0, (str_f("window.executeEvent('event.vehicleMenu.pushStats', `[[\
						{\"id\":\"0\",\"title\":\"Владелец\",\"value\":\"%s\"},\
						{\"id\":\"1\",\"title\":\"Посредник\",\"value\":\"%s\"},\
						{\"id\":\"2\",\"title\":\"Гос.номер\",\"value\":\"%s\"},\
						{\"id\":\"3\",\"title\":\"Пробег\",\"value\":\"%i км\"},\
						{\"id\":\"4\",\"title\":\"Налог\",\"value\":\"$%i / $150000\"},\
						{\"id\":\"5\",\"title\":\"Стоимость покупку гос-ву\",\"value\":\"$%i\"},\
						{\"id\":\"6\",\"title\":\"Стоимость продажи гос-ву\",\"value\":\"$%i\"}]]`);", CarInfo[number][cOwner], CarInfo[number][cKeyer], GetString(VehicleInfo[carid][vNumber], "Arizona ST") ? "Нет" : (str_f("[%s] %s (%s)", numberData[1], numberData[0], countryNumber[strval(numberData[3])])), floatround(CarInfo[number][cMilage]), CarInfo[number][cShtrafer], CarInfo[number][cCost], CarInfo[number][cCost]/2)));
				}

				case 1: callcmd::cars(playerid);

				case 2: UseableCMDCars(playerid, !id_var[0] ? 5 : id_var[0] == 1 ? 3 : id_var[0] == 3 ? 6 : id_var[0] == 4 ? 9 : id_var[0] == 5 ? 11 : id_var[0] == 6 ? 7 : id_var[0] == 7 ? 12 : id_var[0] == 8 ? 13 : id_var[0], OnPlayerCarLoad(ShowVeh[playerid]), GetVehicleID(OnPlayerCarLoad(ShowVeh[playerid])));

				case 3:
				{
					switch id_var[0] do
					{
						case 0: callcmd::lock(playerid);
						case 1: callcmd::key(playerid);
						case 2: callcmd::alarm(playerid, IntToStr(OnPlayerCarLoad(ShowVeh[playerid])) );
						case 3: UseableCMDCars(playerid, 10, OnPlayerCarLoad(ShowVeh[playerid]), GetVehicleID(OnPlayerCarLoad(ShowVeh[playerid])));
					}
				}
			}
		}

		case 7:
		{
			new animID = FindAnimIDForUID(id_var[0]);
			if(animID == -1) return SCM(playerid, COLOR_RED, "[Ошибка] {FFFFFF}Такой анимации нет!");
			ApplyAnimation(playerid, AnimInfo[animID][anim_Library], AnimInfo[animID][anim_Name], 4.1, 0, 0, 0, 0, AnimInfo[animID][anim_ExpireTime]);
			if(GetPlayerLauncher(playerid) == 2) SCM(playerid, COLOR_VALIK, !"[Подсказка]{FFFFFF} Для того чтобы остановить анимацию напишите - /stanim");
			else TextDrawShowForPlayer(playerid, StopAnimation);
			AnimPlayed{playerid} = true;
		}

		case 9:
		{
			new stringData[3][40];
			switch(GetPlayerLauncher(playerid) == 2 ? id_var[1] : SearchClickID(request, 1))
			{
				case 0:
				{
					if(GetPlayerLauncher(playerid) != 2)
						sscanf(text, "P<|>s[150]s[24]s[32]i", request, stringData[0], stringData[1], id_var[0]);

					else eventMobile(playerid, {9, 3}, !"loading"), SetPlayerNameEx(playerid, json_ReplaceStr(text, "username"));

					mysql_tquery(mysql, (str_f("SELECT `ID`, `Password` FROM `accounts` WHERE `NickName` = '%s' LIMIT 1", PN(playerid))), "LoginDialogMySQL", "ds", playerid, GetPlayerLauncher(playerid) == 2 ? json_ReplaceStr(text, "password") : stringData[1]);
				}
				case 1:
				{
					if(GetPlayerLauncher(playerid) != 2)
						sscanf(text, "P<|>s[150]s[24]s[32]s[24]", request, stringData[0], stringData[1], stringData[2]);

					/* Ник */
					SetPlayerNameEx(playerid, GetPlayerLauncher(playerid) == 2 ? json_ReplaceStr(text, "username") : stringData[0]);

					/* Пароль */
					mysql_escape_string(GetPlayerLauncher(playerid) == 2 ? json_ReplaceStr(text, "password") : stringData[1], PI[playerid][pRegistrationPass]);

					/* Реферал */
					if(strlen(stringData[2]) > 3)
						return CheckReferalMySQL(playerid, stringData[2]);

					ShowRegisterDialog(playerid, 5);
				}
				case 3:
				{
					switch(GetPlayerLauncher(playerid) == 2 ? id_var[2] : SearchClickID(request, 2))
					{
						case 0:
						{
							new Cache:result = mysql_query(mysql, (str_f("INSERT INTO `accounts` (`NickName`, `Password`, `Level`, `Sex`, `Race`, `Skin`, `ReferalID`, `Money`, `VirMoney`) VALUES ('%s', '%s', 1, %d, %d, %d, %d, 200000000, 200000)", PN(playerid), MD5_Hash(PI[playerid][pRegistrationPass]), PI[playerid][pSex], PI[playerid][pRace], PI[playerid][pSkin][0], PI[playerid][pReferalID])));
							SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Благодарим вас за регистрацию на нашем сервере");
							SCM(playerid, COLOR_VALIK, !"[Подсказка] {FFFFFF}Сейчас вам желательно добраться до мэрии и получить паспорт");
							PI[playerid][pID] = cache_insert_id();
							cache_delete(result);

							foreach(Player, i) {
								if(PI[i][pAdmin] && ADuty{i} && !AdminInfo[i][admInfoNewPlayer])
									SCMF(i, -1, "Приветствуем нового игрока нашего сервера: {FF9900}%s {FFFFFF}(ID: %i) {cccccc}IP: %s",PlayerName[playerid], playerid, AdminInfo[i][admIP] ? "Скрыто":PlayerIp[playerid]);
							}

							SetFullness(playerid, 30);
							UpdatePlayerHealth(playerid,100);

							if(GetPlayerLauncher(playerid) == 2 || pTemp[playerid][cefAuth])
								HideActor(playerid, pTemp[playerid][cefAuthActor]);

							OnPlayerLogin(playerid);
						}
						case 1:
						{
							new floor = PI[playerid][pSex], human = PI[playerid][pRace];

							if(GetPlayerLauncher(playerid) != 2)
								sscanf(text, "P<|>s[150]s[5]s[6]i", request, stringData[0], stringData[1], id_var[0]);

							if(GetPlayerLauncher(playerid) >= 1)
								floor = GetPlayerLauncher(playerid) != 2 ? (GetString(stringData[0], "man") ? 0 : 1 ) : json_ReplaceInt(text, "gender"),
								human = GetPlayerLauncher(playerid) != 2 ? (GetString(stringData[1], "white") ? 0 : 1 ) : json_ReplaceInt(text, "skin");

							if(GetPlayerLauncher(playerid) != 2 && !pTemp[playerid][cefAuth])
							{
								if(id_var[0] > (floor ? 2 : 5) && id_var[0] < sizeof(skinRegistration[][])) TextDrawShowForPlayer(playerid, clothChois[9]);
								if(id_var[0] > (floor ? 4 : 10) || id_var[0] < 0)
								{
									if(id_var[0] < 0) id_var[0] = pTemp[playerid][tSkinSelectedId] = pTemp[playerid][tSkinSelectedId]+(floor ? 5 : 11);
									else if(id_var[0] > (floor ? 2 : 5)) id_var[0] = pTemp[playerid][tSkinSelectedId] = 0;
								}
								if(id_var[0] >= sizeof(skinRegistration[][])-(floor ? 5 : 8) && !IsTextDrawVisibleForPlayer(playerid, clothChois[4])) TextDrawShowForPlayer(playerid, clothChois[4]);
								else if(id_var[0] == (floor ? 1 : 4)) TextDrawHideForPlayer(playerid, clothChois[4]);
								else if(id_var[0] == (floor ? 2 : 5)) TextDrawHideForPlayer(playerid, clothChois[9]), TextDrawShowForPlayer(playerid, clothChois[4]);
								return SetPlayerSkin(playerid, skinRegistration[floor][human][GetPlayerLauncher(playerid) != 2 ? id_var[0] : json_ReplaceInt(text, "clothes")]);
							}
							PI[playerid][pSkin][0] = GetSkinInfo(skinRegistration[floor][human][GetPlayerLauncher(playerid) != 2 ? id_var[0] : json_ReplaceInt(text, "clothes")], 2);
							HideActor(playerid, pTemp[playerid][cefAuthActor]), ShowActor(playerid, pTemp[playerid][cefAuthActor], skinRegistration[floor][human][GetPlayerLauncher(playerid) != 2 ? id_var[0] : json_ReplaceInt(text, "clothes")], 1773.3618, -1901.4326, 13.5511, 105.8005);
						}
					}
				}
			}
		}

		case 17:
		{
			if(id_var[1] == 2 && GetPlayerLauncher(playerid) == 2) return cursorPlayer(playerid, 17, false);
			function_InteractionProperty(playerid, id_var[GetPlayerLauncher(playerid)-1]);
		}

		case 40:
		{
			switch(GetPlayerLauncher(playerid) == 2 ? id_var[1] : SearchClickID(request, 1))
			{
				case 0:
				{
					if(battlePassPlayer_data[playerid][0])
						return false;

					if(PI[playerid][pRoubles] < 499)
						return SCM(playerid, COLOR_RED, !"[Ошибка] Для покупки улучшенного пропуска требуется 499 AZ-Rubles (/adonate)");

					executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"null\"]');"), cursorPlayer(playerid, 0, false);

					battlePassPlayer_data[playerid][0] = 1;
					UpdatePlayerDataStr(playerid, "BattlePassData", Int_PackMassive(0, battlePassPlayer_data[playerid]));
					SCM(playerid, COLOR_VALIK, "[Информация] {ffffff}Поздравляем с покупкой Arizona-Pass Premium");

					return GiveRoubles(playerid, -499);
				}

				//case 1: //ежедневка

				//case 2: //remove

				case 3: // получить награду
				{
					if(GetPlayerLauncher(playerid) == 1)
						id_var[4] = GetString(request, "arizona-pass.getReward") ? 0 : 1,
						sscanf(text, "P<|>s[150]is[6]", request, id_var[0], mysql_string);

					if(id_var[GetPlayerLauncher(playerid) == 1 ? 4 : 2] == 0 && GetInvSet(playerid) >= PI[playerid][pInvCell])
						return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}У вас не хватает места в инвентаре!");

					if(id_var[GetPlayerLauncher(playerid) == 1 ? 4 : 2] == 0)
					{
						AddItem(playerid, battlePassPrizeInfo_data[!GetString(mysql_string, "false")][id_var[0]][data_ItemID], battlePassPrizeInfo_data[!GetString(mysql_string, "false")][id_var[0]][data_Amount]);
						SCMF(playerid, COLOR_VALIK, "[Battle Pass] {ffffff}Вы успешно забрали предмет - '%s' в количестве %i шт.", ItemsInfo[battlePassPrizeInfo_data[!GetString(mysql_string, "false")][id_var[0]][data_ItemID]][itemName], battlePassPrizeInfo_data[!GetString(mysql_string, "false")][id_var[0]][data_Amount]);
						sendPlayerNotification(playerid, 1, "BattlePass", "Приз был успешно добавлен в инвентарь!", 3);
					}
					else if(id_var[GetPlayerLauncher(playerid) == 1 ? 4 : 2] == 1)
						SCMF(playerid, COLOR_VALIK, "[Информация] {ffffff}На баланс игрового аккаунта было зачислено $%i.000. Причина: Лимитированная коллекция Battlepass", GetString(mysql_string, "false") ? 50 : 100), GiveMoney(playerid, GetString(mysql_string, "false") ? 50000 : 100000);

					executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"null\"]');"),
					cursorPlayer(playerid, 0, false);
					battlepassReward[playerid][!GetString(mysql_string, "false")][id_var[0]] = 1;

					LoadPBAccess(playerid, false);
				}
			}
		}

		case 42:
		{
			for(new i; i < sizeof(DonateInfo_data); i++)
			{
				if(DonateInfo_data[i][data_Type] == id_var[1] && DonateInfo_data[i][data_ID] == id_var[GetPlayerLauncher(playerid) == 2 ? 2 : 0])
				{
					switch DonateInfo_data[i][data_Type] do
					{
						case 4:
						{
							if(!DonateInfo_data[i][data_ID])
								return ShowDonateDialog(playerid, 0);

							ShowDonateDialog(playerid, 1, i);
						}

						case 0:
							ShowDonateDialog(playerid, DonateInfo_data[i][data_ID] + 2);

						case 1:
							ShowDonateDialog(playerid, 8, i);

						case 2, 3, 5..10:
							ShowDonateDialog(playerid, 6, i);

						case 11:
							ShowDonateDialog(playerid, 7, i);
					}
				}
			}
		}

		case 47:
		{
			switch(GetPlayerLauncher(playerid) == 2 ? id_var[2] : SearchClickID(request, 1))
			{
				default:
				{
					switch(GetPlayerLauncher(playerid) == 2 ? id_var[1]+1 : id_var[0])
					{
						case 1: callcmd::menu(playerid);
						case 2: callcmd::help(playerid);
						case 3: { }
						case 4: callcmd::report(playerid);
						case 8: callcmd::gps(playerid);
						case 9: callcmd::settings(playerid);
						case 11: callcmd::sms(playerid);
						//case 12: MysqlChencheGroup(playerid);
						case 13: callcmd::rewards(playerid);
						case 14: callcmd::donate(playerid);
						case 15: { } // crypto
						case 16: callcmd::showmc(playerid, IntToStr(playerid));
						case 17: callcmd::showpass(playerid, IntToStr(playerid));
						case 18: callcmd::anims(playerid, "");
						case 19: callcmd::fammenu(playerid);
						case 20: { } // youtube
						case 21: callcmd::bizinfo(playerid);
						case 22: callcmd::cars(playerid);
						case 23: { } // dom auk
						case 24: ShowBankMenu(playerid);
						case 25..32: SCM(playerid, COLOR_RED, "[Ошибка]{ffffff} Временно не доступно!");
					}
				}
			}
		}

		case 48:
		{
			new fuelid = IsAtGasStation(playerid),
				vehicleid = GetPlayerVehicleID(playerid);

			if(fuelid != -1 && vehicleid > 0)
			{
				new
					biz = GoFuel[fuelid][gfBizzID],
					Float:cost = BizData[biz][bEnterPrice];

				sscanf(request, (str_f("P<%s>a<i>[2]", GetPlayerLauncher(playerid) == 2 ? "," : "|")), id_var);

				switch GetPlayerLauncher(playerid) == 2 ? id_var[2] : SearchClickID(request, 2) do
				{
					case 0:
					{
						if(Fuel[vehicleid] < 100.0)
						{
							if(PI[playerid][pMoney] >= floatround(cost) * id_var[1])
							{
								if(GetVehicleKindFuel(vehicleid) != id_var[0])
									return SCM(playerid, COLOR_GREY, "[Ошибка]{FFFFFF} Данный тип топлива не подходит для вашего транспорта!");

								if(Fuel[vehicleid] + id_var[1] > 100 && GetPlayerLauncher(playerid) == 2)
									return SCM(playerid, COLOR_GREY, "[Ошибка]{FFFFFF} Вы не выбрали кол-во топлива!");

								CountFuel[playerid] = id_var[1], CallTimeOutFunction("Fillup", 1000, false, "idf", playerid, vehicleid, CountFuel[playerid]);
								GiveMoney(playerid, -floatround(cost) * id_var[1], "Заправка");
								hidePlayerCefInterface(playerid);
							}
							else SCM(playerid, COLOR_GREY, !"[Ошибка]{FFFFFF} У вас не достаточно денег!");
						}
						else SCM(playerid,COLOR_GREY, !"[Ошибка] {FFFFFF}Ваш транспорт полностью заправлен");
					}

					case 1:
					{
						static const
							purchaseInfo[][][] = {{"Рем. комплект", "520"}, {"Канистра", "516"}, {"Повербанк для зарядки авто", "5321"}};

						spdList(playerid, 0, strval(purchaseInfo[id_var[GetPlayerLauncher(playerid) - 1]][1]));
						SPDF(playerid, 27111, DIALOG_STYLE_MSGBOX, "Покупка на АЗС", "{ffffff}Вы действительно хотите приобрести {73B461}%s{ffffff} за {73B461}%i{ffffff}?\n{cccccc}Для продолжение используйте клавишу 'Далее'", "Далее", "Закрыть", purchaseInfo[id_var[GetPlayerLauncher(playerid) - 1]][0], BizData[biz-1][bItem][id_var[GetPlayerLauncher(playerid) - 1]+1]);
					}

					case 2:
						hidePlayerCefInterface(playerid);
				}
			}

			return true;
		}

		case 51:
		{
			new country[5], region[24], number_name[8], number_country[][] = {"kz", "rus", "ua", "by", "usa"};

			switch GetPlayerLauncher(playerid) == 2 ? id_var[2] : SearchClickID(request, 2) do
			{
				case 1:
				{
					if(!GetCount(playerid, 7035))
						return executeEvent(playerid, 0, "window.executeEvent('event.carNumbers.setErrorMessage', '[\"У вас нет разрешения на получение номера\"]');");

					if(PI[playerid][pMoney] < 1000000)
						return executeEvent(playerid, 0, "window.executeEvent('event.carNumbers.setErrorMessage', '[\"У вас не хватает денег! (нужно 1.000.000)\"]');");

					new country_id;

					if(GetPlayerLauncher(playerid) == 1)
						sscanf(text, "P<|>s[150]s[5]s[24]", request, country, region);

					for(new i = 0, j = strlen(region); i < j; i++) region[i] = toupper(region[i]);
					for(new i; i < sizeof(number_country); i++) if(GetString(GetPlayerLauncher(playerid) == 2 ? json_ReplaceStr(text, "country") : country, number_country[i])) { country_id = i; break; }
					if(country_id == -1 or !CheckEnterRegionOnInterface(region, country_id)) return false;

					SetString(number_name, randomizeNumber(country_id));
					SetPVarString(playerid, "takeNumber_number", number_name);
					SetPVarString(playerid, "takeNumber_region", GetPlayerLauncher(playerid) == 2 ? json_ReplaceStr(text, "region") : region);
					SetPVarInt(playerid, "takeNumber_selectedID", country_id);

					if(GetPlayerLauncher(playerid) == 2)
						eventMobile(playerid, {51, 0}, number_name);

					else executeEvent(playerid, 0, (str_f("window.executeEvent('event.carNumbers.initializeCarNumber', '[\"%s\"]');", number_name)));
				}

				case 2:
				{
					GetPVarString(playerid, "takeNumber_region", region, 24);
					GetPVarString(playerid, "takeNumber_number", number_name, 8);
					if(strlen(region) < 0 or strlen(number_name) < 0) return false;

					DeleteItem(playerid, 7035, 1), GiveMoney(playerid, -1000000);
					AddItem(playerid, 7034, 1, -1, GetPVarInt(playerid, "takeNumber_selectedID"), 0, -1, 0, (str_f("%s|%s|%s", number_name, region, GetPVarInt(playerid, "takeNumber_selectedID") == 4 ? numberUSA_Data[strval(region)][0] : number_country[GetPVarInt(playerid, "takeNumber_selectedID")] )));

					SPDF(playerid, 0, DIALOG_STYLE_MSGBOX, "{BFBBBA}Оформление номерного знака", "\
						{ffffff}Вы успешно оформили номерной знак для личного транспорта!\n\n\
						Номерной знак: {FFFF00}%s{ffffff}\n\
						Страна: {FFFF00}%s{ffffff}\n\
						Регион: {FFFF00}%s{ffffff}\n\n\
						{ff6666}У Вас осталось %i разрешений на оформление номера.\n\n\
						{CCCCCC}Примечание: предмет был помещен в ваш инвентарь.\n\
						Вы также можете вернуть номерной знак за $100.000.", "Закрыть", "", number_name, countryNumber[GetPVarInt(playerid, "takeNumber_selectedID")], GetPVarInt(playerid, "takeNumber_selectedID") == 4 ? numberUSA_Data[strval(region)][0] : region, GetCount(playerid, 7035));

					DeletePVar(playerid, "takeNumber_number"), DeletePVar(playerid, "takeNumber_region"), DeletePVar(playerid, "takeNumber_selectedID");
				}
			}
		}

		case 55:
		{
			if(GetPlayerLauncher(playerid) == 1)
				sscanf(request, "P<|>s[150]s[6]", request, text);

			else sscanf(request, "P< >i", id_var[0]);

			if(PI[playerid][pMoney] < BizData[InfoBiz[playerid]][bItem][!id_var[0] or GetString(text, "hotdog") ? 0 : 1])
				return SendBotMessage(playerid, !"Извините, но у вас недостаточно денег!");

			else if(Fullness[playerid] > 90)
				return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Вы не голодны!");

			GiveMoney(playerid, -BizData[InfoBiz[playerid]][bItem][!id_var[0] or GetString(text, "hotdog") ? 0 : 1]);
			GiveBizMoney(InfoBiz[playerid], BizData[InfoBiz[playerid]][bItem][!id_var[0] or GetString(text, "hotdog") ? 0 : 1]);
			GiveFullness(playerid, !id_var[0] or GetString(text, "hotdog") ? 20 : 50);

			ApplyAnimationEx(playerid, !"FOOD", !"EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
			SCM(playerid, COLOR_VALIK, !"Вы немного перекусили. Посмотреть состояние голода можно {FFFFFF}/satiety");
			SCM(playerid, -1, !"Рекомендуем кушать в закусочных, там намного дешевле!");
			SendEatBot(playerid);
		}

		case 74:
		{
			new carid = GetPlayerVehicleID(playerid);

			if(GetPlayerLauncher(playerid) == 1)
				sscanf(text, "P<|>s[150]s[150]", request, text);

			switch SearchClickID(request, 2) do
			{
				case 0: pTemp[playerid][tSalonCategory] = json_ReplaceInt(text, "category"), tuningStationUpdateCamera(playerid, pTemp[playerid][tSalonCategory], pTemp[playerid][tSalonSelect], carid), tuningStationUpdateCar(playerid, carid);
				case 1: pTemp[playerid][tSalonSelect] = json_ReplaceInt(text, "component"), tuningStationUpdateCamera(playerid, pTemp[playerid][tSalonCategory], pTemp[playerid][tSalonSelect], carid), tuningStationUpdateCar(playerid, carid);

				case 2, 3:
				{
					id_var[0] = json_ReplaceInt(text, "component");

					if(SearchClickID(request, 2) == 2) strcat(pTemp[playerid][tSalonCart], (str_f("%s%d", pTemp[playerid][tSalonCartMoney] == 0 ? "" : ",", id_var[0]))), pTemp[playerid][tSalonCartMoney] += tuningComponents[id_var[0] > 88 ? id_var[0]-1 : id_var[0]][priceMoney];
					else if(strlen(pTemp[playerid][tSalonCart]) > 2) id_var[1] = strfind(pTemp[playerid][tSalonCart], id_var[0]), strdel(pTemp[playerid][tSalonCart], id_var[1], id_var[1]+strlen(id_var[0])), pTemp[playerid][tSalonCartMoney] -= tuningComponents[id_var[0] > 88 ? id_var[0]-1 : id_var[0]][priceMoney];

					pTemp[playerid][tSalonCartCheck][tuningComponents[id_var[0]][categoryID]] = (SearchClickID(request, 2) == 2 ? id_var[0] : 0);

					if(pTemp[playerid][tSalonCartCheck][tuningComponents[id_var[0]][categoryID]] == 18)
						pTemp[playerid][tSalonCartWindowCheck][id_var[0] == 87 ? 6 : id_var[0] - 67] = (SearchClickID(request, 2) == 2 ? id_var[0] : 0);

					tuningStationUpdateComponent(playerid, id_var[0], SearchClickID(request, 2));
					tuningStationUpdateClientData(playerid, carid);
					tuningStationUpdateCart(playerid);
				}

				case 4:
				{
					if(TextFind(text, "[object Object]")) return SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Выберите цвет вашего стекла.");

					id_var[0] = json_ReplaceInt(text, "id");
					id_var[1] = json_ReplaceInt(text, "color_id");
					id_var[2] = json_ReplaceInt(text, "opacity");

					static tint_colors[] = {10, 436797450, 437452810, 387579914, 236584970, 68812810, 1705226, 1707530, 1710090, 1186314, 530954, 16783882, 167778826, 335550986, 436213258};

					id_var[3] = tint_colors[id_var[1]] + GetSizeToner(id_var[2]);
					id_var[0] = (id_var[0] == 87 ? 6 : id_var[0]-67);

					pTemp[playerid][tSalonWindowColor][id_var[0]] = id_var[3];
					SetVehicleWindowTint(carid, id_var[0], id_var[3], playerid);
				}

				case 5:
				{
					pTemp[playerid][tSalonColor][0] = json_ReplaceInt(text, "color1");
					pTemp[playerid][tSalonColor][1] = json_ReplaceInt(text, "color2");
					tuningStationUpdateCar(playerid, carid);
				}

				case 6:
				{
					for(new i; i < 22; i++)
						pTemp[playerid][tSalonCartCheck][i] = 0;

					pTemp[playerid][tSalonCart][0] = EOS;
					pTemp[playerid][tSalonCartMoney] = 0;

					tuningStationUpdateClientData(playerid, carid);
					tuningStationUpdateCart(playerid);
				}

				case 7:
				{
					id_var[0] = json_ReplaceInt(text, "slider");
					pTemp[playerid][tSalonSlider][pTemp[playerid][tSalonSelect] == 48 ? id_var[0] : pTemp[playerid][tSalonSelect] == 49 ? id_var[0] + 3 : 2] = json_ReplaceFloat(text, "value");

					if(pTemp[playerid][tSalonSelect] <= 49)
						SetVehicleWheelSettings(carid, pTemp[playerid][tSalonSelect]-48, pTemp[playerid][tSalonSlider][pTemp[playerid][tSalonSelect] == 48 ? 0 : 3], pTemp[playerid][tSalonSlider][pTemp[playerid][tSalonSelect] == 48 ? 1 : 4], playerid);

					else SetVehicleWheelSize(carid, pTemp[playerid][tSalonSlider][2], playerid);
				}

				case 9: SPDF(playerid, 26695, DIALOG_STYLE_MSGBOX, "{BFBBBA}Подтверждение", "Вы хотите оплатить товары в вашей корзине на $%d?", "Купить", "Выйти", pTemp[playerid][tSalonCartMoney]);
				default: SCMF(playerid, -1, "TuningStation => 74 %i", SearchClickID(request, 2));
			}
		}

		case 76:
		{
			switch GetPlayerLauncher(playerid) == 2 ? id_var[2] : SearchClickID(request, 2) do
			{
				case 0:
				{
					for(new i; i < sizeof(PrizeInfo_Data); i++)
					{
						new prize = random(sizeof(PrizeInfo_Data));
						if(PrizeInfo_Data[prize][data_UseItemID] != pTemp[playerid][tRouletteID]) continue;

						pTemp[playerid][tRoulettePrize] = prize, pTemp[playerid][tRoulettePrizeID] = PrizeInfo_Data[prize][data_ID];

						if(GetPlayerLauncher(playerid) == 1)
							executeEvent(playerid, 0, (str_f("window.executeEvent('event.crate.roulette.onCrateOpen', `[%i]`);", pTemp[playerid][tRoulettePrizeID])));

						else
							eventMobile(playerid, {76, 1}, IntToStr(pTemp[playerid][tRoulettePrizeID]));

						if(pTemp[playerid][tRouletteID] == 555)
							sendPlayerBattlepassAction(playerid, 79);

						DeleteItem(playerid, pTemp[playerid][tRouletteID], 1);

						break;
					}
				}

				case 1:
				{
                    if(Int_GetPlayerData(playerid, "takePrizeRoulette") > Global_Time)
                        return false;

					if(GetPlayerLauncher(playerid) == 2)
						cursorPlayer(playerid, 76, false);

                    Int_SetPlayerData(playerid, "takePrizeRoulette", Global_Time + 3);
					return (PrizeInfo_Data[pTemp[playerid][tRoulettePrize]][data_Give] == -1 ? GiveMoney(playerid, randomF(PrizeInfo_Data[pTemp[playerid][tRoulettePrize]][data_Amount][0], PrizeInfo_Data[pTemp[playerid][tRoulettePrize]][data_Amount][1])) : AddItem(playerid, PrizeInfo_Data[pTemp[playerid][tRoulettePrize]][data_Give], PrizeInfo_Data[pTemp[playerid][tRoulettePrize]][data_Amount][1] == -1 ? 1 : randomF(PrizeInfo_Data[pTemp[playerid][tRoulettePrize]][data_Amount][0], PrizeInfo_Data[pTemp[playerid][tRoulettePrize]][data_Amount][1])));
				}

				case 2: hidePlayerCefInterface(playerid), pTemp[playerid][tRoulettePrize] = pTemp[playerid][tRoulettePrizeID] = pTemp[playerid][tRoulettePrizeID] = -1, pTemp[playerid][tRouletteFastOpen] = 0;

				case 3:
				{
					if(!GetCount(playerid, 3925) && pTemp[playerid][tRouletteID] != 7778)
						return sendPlayerNotification(playerid, 2, "Ошибка", "Для моментальной прокрутки нужен рулеточный компас!", 3);

					pTemp[playerid][tRouletteFastOpen] = !pTemp[playerid][tRouletteFastOpen];

					if(GetPlayerLauncher(playerid) == 1)
						executeEvent(playerid, 0, (str_f("window.executeEvent('event.status.roulette.OpenAnimation', `[%i]`);", pTemp[playerid][tRouletteFastOpen])));

					else
						eventMobile(playerid, {76, 3}, IntToStr(pTemp[playerid][tRouletteFastOpen]));
				}
			}
		}

        case 93:
        {
            for(new i; i < 6; i++)
                AddItem(playerid, pTemp[playerid][nftPrize][i], 1, 0, 0, 0, 100, 0, "");

            if(GetPlayerLauncher(playerid) == 1)
            	executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[ null ]');");

            cursorPlayer(playerid, GetPlayerLauncher(playerid) == 2 ? 82 : 0, false);
        }
	}
	if(PI[playerid][pAdmin] >= 8) SCMF(playerid, -1, "[IPacket: ShowCefPublic] => playerid %i & text %s & request %s & id_var [ %i, %i, %i ]", playerid, text, request, id_var[0], id_var[1], id_var[2]);
	return true;
}

stock randomizeNumber(number_type)
{
	new number_name[8], number_alph[] = {'A', 'B', 'E', 'K', 'M', 'H', 'P', 'C', 'T', 'X', 'Y'};

	for(new i; i < (number_type == 4 ? 7 : 6); i++)
	{
		switch(number_type)
		{
			case 1: number_name[i] = (!i ? number_alph[random(10)] : (i < 4 ? ('0' + random(9)) : number_alph[random(10)]));
			case 0, 2, 3: number_name[i] = (i < (!number_type ? 3 : 4) ? ('0' + random(9)) : ('A' + random(25)));
			case 4: number_name[i] = (!i ? ('0' + random(9)) : (i < 3 ? ('A' + random(25)) : ('0' + random(9))));
		}
	}

	return number_name;
}

stock destroyBrowser_object(id, playerid = INVALID_PLAYER_ID)
{
	ScreenInfo_data[id][data_Status] = false;
	ScreenInfo_data[id][data_VideoLink][0] = EOS;
	ScreenInfo_data[id][data_VideoTime][0] = ScreenInfo_data[id][data_VideoTime][1] = 0;

	if(playerid == INVALID_PLAYER_ID)
	{
		foreach(Player, i)
			if(IsPlayerInDynamicArea(i, ScreenAreaId[id]))
				destroyBrowser(i, 1);
    }
    else destroyBrowser(playerid, 1);
        
    return true;
}

stock createBrowser_object(objectid, object_model, link_video[], Float:drawdistance, id = 0, playerid = INVALID_PLAYER_ID, browserid = 1)
{
	new BitStream:bs = BS_New();

    BS_WriteValue(bs,
        PR_UINT8, 220,
        PR_UINT8, 12,
        PR_UINT32, 1440,
        PR_UINT32, 810,
        PR_UINT32, 0,
        PR_UINT32, 0,
        PR_STRING32, link_video,
        PR_STRING32, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36",
        PR_UINT16, objectid,
        PR_UINT16, object_model,
        PR_FLOAT, drawdistance,
        PR_UINT32, browserid);
        
	if(playerid == INVALID_PLAYER_ID)
	{
		foreach(Player, i)
			if(IsPlayerInDynamicArea(i, ScreenAreaId[id]))
            	PR_SendPacketEx(bs, i);
    }
    else PR_SendPacketEx(bs, playerid);
    
    return BS_Delete(bs);
}

cmd:screens(playerid)
	return ShowScreensDialog(playerid, 0);

stock ShowScreensDialog(playerid, type, listitem = 0)
{
	switch type do
	{
		case 0:
		{
			global_str = "{afafaf}Название экрана\t{afafaf}Текущий статус\t{afafaf}Последнее изменение\n";

			for(new i; i < sizeof(ScreenInfo_data); i++)
			    strcat(global_str, (str_f("{88373D}%i.{FFFFFF} %s\t[ %s {FFFFFF}]\t%s [%s]", i + 1, ScreenInfo_data[i][data_Name], ScreenInfo_data[i][data_Status] ? ("{A7C24D}включен") : ("{88373D}выключен"), ScreenInfo_data[i][data_LastEditName], UNIX_TO_DATE(ScreenInfo_data[i][data_LastEditTime]))));

			SPD(playerid, 25555, DIALOG_STYLE_TABLIST_HEADERS, "{BFBBBA}Управление экранами | Экраны", global_str, "Далее", "Отмена");
		}

		case 1:
		    SPDF(playerid, 25556, DIALOG_STYLE_LIST, "{BFBBBA}Редактирование экрана | Экраны", "{88373D}1. {cccccc}Название экрана: {88373D}%s\n{88373D}2. {cccccc}Последнее изменение: {88373D}%s [%s]\n{88373D}3. {ffffff}Изменить / отключить видео", "»", "«", ScreenInfo_data[listitem][data_Name], ScreenInfo_data[listitem][data_LastEditName], UNIX_TO_DATE(ScreenInfo_data[listitem][data_LastEditTime]));

		case 2:
		    SPD(playerid, 25557, DIALOG_STYLE_LIST, "{BFBBBA}Изменение видео на экране", "{88373D}1.{FFFFFF} Изменить ссылку / отключить видео\n{88373D}2.{FFFFFF} Включить / отключить систему воспроизведения из очереди {88373D}[отключено]\n{88373D}3.{FFFFFF} Изменить список видео в очереди", "»", "«");

		case 3:
			SPD(playerid, 25558, DIALOG_STYLE_INPUT, "{BFBBBA}Редактирование экрана | Экраны", "{ffffff}Введите ссылку на видео / трансляцию с {88373D}YouTube.com / Twitch.tv{FFFFFF}:\n\n{cccccc}Примечание: чтобы отключить воспроизведение ролика, оставьте поле пустым.", "»", "«");

		case 4:
		    SPD(playerid, 25559, DIALOG_STYLE_MSGBOX, "{BFBBBA}Загрузка данных | Экраны", "{ffffff}Подождите, идет загрузка данных о видео..\n\n{cccccc}Примечание: не закрывайте данное окно, дождитесь загрузки.", "«", "");
	}
	
	return true;
}

public: GetVideoDuration(index, response_code, data[])
{
    if(response_code == 200)
   		ScreenInfo_data[0][data_VideoTime][1] = strval(data), ShowScreensDialog(index, 1), SCM(index, COLOR_RED, "[Подсказка]{ffffff} Ссылка на видеоролик была обновлена."), createBrowser_object(CallRemoteFunction("GetScreenId", "i", 0), 7914, (str_f("https://api-samp.arizona-five.com/youtube_play_video.php?video_id=%s", ScreenInfo_data[0][data_VideoLink])), 50.0);
    
	return true;
}

stock fuction_UseItemJack(playerid)
{
	if(!(GetPlayerState(playerid) == 2))
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы должны быть на водительском месте.");

	else if(!(GetCount(playerid, 1422)))
		return false;
			
	else 
	{
		new car = GetPlayerVehicleID(playerid), Float:X, Float:Y, Float:Z, Float:A;
		GetVehiclePos(car, X, Y,Z);
		GetVehicleZAngle(car, A);
		SetVehiclePos(car, X, Y, Z+1.0);
		SetVehicleZAngle(car, A);
		SCM(playerid, COLOR_VALIK, !"Вы использовали домкрат.");
		DeleteItem(playerid, 1422);
		sendPlayerBattlepassAction(playerid, 15);
	}

	return true;
}

stock ShowQuest_tipDialog(playerid, text[], image[] = "quest_basic_background_1.png", position[] = "rightBottom")
{
	executeEvent(playerid, 0, (str_f("window.executeEvent('cef.modals.showModal', `[\"dialogTip\",{\"position\":\"%s\",\"backgroundImage\":\"%s\",\"icon\":\"icon-info\",\"iconColor\":\"#5FC6FF\",\"highlightColor\":\"#5FC6FF\",\"text\":\"%s\"}]`);", position, image, text)));
	return SetTimerEx("HideQuest_tipDialog", 5000, false, "i", playerid);
}

public: HideQuest_tipDialog(playerid) executeEvent(playerid, 0, "window.executeEvent('cef.modals.closeModal', `[\"dialogTip\"]`);");

stock showQuest_tip(playerid, text[])
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220, 
		PR_UINT8, 172, 
		PR_UINT16, strlen(text),
		PR_STRING, text);

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

public: ConnectionCallback(index, response_code, data[])
{
	if(response_code == 200)
	{
		switch(GlobalMassive[index][1])
		{
			case 0:
				print(data), ShowSecurity(index, 2, data);

			case 1:
			{
				if(TextFind(data, "true"))
				{
					SPD(index, 26905, DIALOG_STYLE_MSGBOX, !"Привязка | VK", !"{FFFFFF}{FFFFFF}Вы {aeFF3d}успешно {ffffff}привязали игровой аккаунт к {4c75a3}VK{ffffff}!\n\nТеперь при авторизации с {ae443d}ip-адреса {ffffff}отличного от того,\nс которого был произведен последний {ae443d}успешный {ffffff}вход\nВам будет отправлен {ae443d}код для подтверждения входа{ffffff}!", !"x", !"");
					sscanf(data, "P<|>s[4]i", data, PI[index][pSecurityID]);
					UpdatePlayerDataInt(index, "SecurityType", PI[index][pSecurityType] = 1);
					UpdatePlayerDataInt(index, "SecurityID", PI[index][pSecurityID]);
				}
				else SCM(index, COLOR_RED, !"[Ошибка] {ffffff} Введен неверный код!");
			}

			default: return false;
		}
	}
	else
		return SCMF(index, COLOR_OLDRED, "При получение данных произошла ошибка! (ConnectionCallback #response_code: %i)", response_code);

	return true;
}

stock ShowSecurity(playerid, type = 0, data[] = "")
{
	switch type do
	{
		case 0: executeEvent(playerid, 0, "window.executeEvent('cef.modals.showModal', `[\"securityBanner\"]`);"), cursorPlayer(playerid, 0, true);
		case 1, 2:
		{
			global_str = "{CCCCCC}Параметр\t{CCCCCC}Значение\n";

			f(global_str, sizeof(global_str), "%s{ff6666}[1] {ffffff}Аккаунт:\t%s\n", global_str, PI[playerid][pSecurityID] ? (str_f("{33AA33}[ привязан (%s) ]", data)) : "{ff6347}[ не привязан ]");
			f(global_str, sizeof(global_str), "%s%s", global_str, PI[playerid][pSecurityID] ? "{ff6666}[2] {FFFFFF}Привязка IP	{9ACD32}[ включено ]" : "{ff6666}[2] {CCCCCC}Привязать аккаунт");

			if(PI[playerid][pSecurityID])
			{
				f(global_str, sizeof(global_str), "%s\n{ff6666}[3] {FF6347}Отвязать аккаунт", global_str);

				if(!PI[playerid][pSecurityReward])
					f(global_str, sizeof(global_str), "%s\n{ff6666}[4] {FAAC58}Получить награду", global_str);
			}

			return SPD(playerid, type == 1 ? 26894 : 26900, DIALOG_STYLE_TABLIST_HEADERS, (str_f("Управление защитой | %s", type == 1 ? "Telegram" : "VK")), global_str, !"Выбрать", !"Назад");
		}
		case 3:
		{
			if(GlobalMassive[playerid][1] != 0)
				GlobalMassive[playerid][1] = 0;

			f(mysql_string, sizeof(mysql_string), "wh19394.web1.maze-tech.ru/getplayervk.php?vk_id=%i&token=%s&access_key=%s", PI[playerid][pSecurityID], connection_data[0], connection_data[1]);
			HTTP(playerid, HTTP_POST, mysql_string, "", "ConnectionCallback");
		}
	}
	return true;
}

cmd:bonus(playerid)
{
	static const bonusType_name[][] = {"Общедоступный", "Фракционный", "Ежедневный"};

	mysql_string[0] = EOS;

	for(new i; i < sizeof(bonusType_name); i++)
		strcat(mysql_string, (str_f("\n{F6AB2F}[%d]{ffffff} %s", i + 1, bonusType_name[i])));

	return SPD(playerid, 27135, DIALOG_STYLE_LIST, !"{F6AB2F}Выборочное бонусное меню", mysql_string, !"Выбор", !"Отмена");
}

stock ShowBonusMenu(playerid, type)
{
	global_str = "{FFDB8B}Награда\t{FFDB8B}Необходимо отыграть\t{FFDB8B}Статус";

	for(new i, s; i < sizeof(BonusInfo); i++)
	{
		if(BonusInfo[i][bonusType] != type) continue;
		if(type) s++;
		strcat(global_str, (str_f("\n{F6AB2F}[%d]{bfbbba} %s\t%i часов\t%s", !type ? i + 1 : s, BonusInfo[i][bonusName], BonusInfo[i][bonusTime], BonusInfo[i][bonusTime] > BonusTime[playerid][type] ? "{bfbbba}Недоступно" : BonusTake[playerid][type][i] ? "{FFDB8B}Награда уже получена" : "{A8E4A0}Награду можно получить")));
		spdList(playerid, !type ? i : s - 1, i);
	}

	return spdList(playerid, 0, type), SPD(playerid, 27136, DIALOG_STYLE_TABLIST_HEADERS, !"{F6AB2F}Бонусное меню", global_str, !"Далее", !"Отмена");
}

stock UpdateCellAccesory(playerid, slot, PlayerText:td_cell, &PlayerText:td_text, &PlayerText:td_text2, &PlayerText:td_text3, Float:rX, Float:rY)
{
	new Float:cell_position[2];

    if(IsPlayerTextDrawVisible(playerid, td_text)) DestroyPlayerTD(playerid, td_text);
    if(IsPlayerTextDrawVisible(playerid, td_text2)) DestroyPlayerTD(playerid, td_text2);
    if(IsPlayerTextDrawVisible(playerid, td_text3)) DestroyPlayerTD(playerid, td_text3);

    GetPosTD(playerid, td_cell, cell_position[0], cell_position[1]);

    if(AksSlot[playerid][1][slot] > 0)
    {
		f(global_str, 4, (AksSlot[playerid][0][slot] == 4128 ? "%d LVL" : "+%d"), AksSlot[playerid][1][slot]);
        td_text = CreatePlayerTextDraw(playerid, cell_position[0] + 20.818054 + 0.864425 * rX, cell_position[1] + 18.90622 + 0.653671 * rY, global_str);
		PlayerTextDrawLetterSize(playerid, td_text, 0.107488 + 0.004289 * rX, 0.531073 + 0.018362 * rY);
		PlayerTextDrawTextSize(playerid, td_text, 1280.000000, 1280.000000);
		PlayerTextDrawAlignment(playerid, td_text, 3);
		PlayerTextDrawColor(playerid, td_text, 0xAAAAAAFF);
		PlayerTextDrawUseBox(playerid, td_text, 0);
		PlayerTextDrawBoxColor(playerid, td_text, 0x80808080);
		PlayerTextDrawSetShadow(playerid, td_text, 0);
		PlayerTextDrawSetOutline(playerid, td_text, 0);
		PlayerTextDrawBackgroundColor(playerid, td_text, 0x00000000);
		PlayerTextDrawFont(playerid, td_text, 2);
		PlayerTextDrawSetProportional(playerid, td_text, 1);
		PlayerTextDrawSetSelectable(playerid, td_text, 0);
        PlayerTextDrawShow(playerid, td_text);
    }
    if(AksSlot[playerid][3][slot] > 0)
    {
        td_text2 = CreatePlayerTextDraw(playerid, cell_position[0] + 17.5, cell_position[1] + 3.5, "Box");
		PlayerTextDrawLetterSize(playerid, td_text2, 0.0000, 0.1079);
		PlayerTextDrawTextSize(playerid, td_text2, cell_position[0] + 18.5, 0.0000);
		PlayerTextDrawAlignment(playerid, td_text2, 1);
		PlayerTextDrawColor(playerid, td_text2, -1);
		PlayerTextDrawUseBox(playerid, td_text2, 1);
		PlayerTextDrawBoxColor(playerid, td_text2, AksMassive[AksSlot[playerid][3][slot]][AksColorDefault]);
		PlayerTextDrawBackgroundColor(playerid, td_text2, 255);
		PlayerTextDrawFont(playerid, td_text2, 1);
		PlayerTextDrawSetProportional(playerid, td_text2, 1);
		PlayerTextDrawSetShadow(playerid, td_text2, 0);
		PlayerTextDrawShow(playerid, td_text2);
    }
	if(strlen(ItemsInfo[AksSlot[playerid][0][slot]][itemTxd_name]))
		CreateCustomCellInventory(playerid, td_cell, td_text3, ItemsInfo[AksSlot[playerid][0][slot]][itemTxd_name], 0.0, 0.0, Float: {19.500, 23.500}, false, true);

    return true;
}

stock CreateCustomCellInventory(playerid, PlayerText:td_cell, &PlayerText:td_text, named[], Float:rX, Float:rY, const Float:size[] = {19.500, 23.500}, bool: craft = false, bool: acs = false)
{
	new Float:Pos[2];
	GetPosTD(playerid, td_cell, Pos[0], Pos[1]);
	
	if(IsPlayerTextDrawVisible(playerid, td_text)) 
		DestroyPlayerTD(playerid, td_text);

	td_text = CreatePlayerTextDraw(playerid, (!craft && !acs ? (Pos[0] + 3.0) : Pos[0]), (!craft && !acs ? (Pos[1] + 3.0) : Pos[1]), named);
	PlayerTextDrawLetterSize(playerid, td_text, 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, td_text, size[0] + (1.02 * rX), size[1] + (1.1800004 * rY));
	PlayerTextDrawAlignment(playerid, td_text, 1);
	PlayerTextDrawColor(playerid, td_text, (!craft ? 0xAAAAAAFF : 0xFFFFFFFF999999FF));
	PlayerTextDrawUseBox(playerid, td_text, 0);
	PlayerTextDrawBoxColor(playerid, td_text, (!craft ? 0x80808080 : 0xFFFFFFFF80808080));
	PlayerTextDrawSetShadow(playerid, td_text, 0);
	PlayerTextDrawSetOutline(playerid, td_text, 0); 
	PlayerTextDrawBackgroundColor(playerid, td_text, 0x00000000);
	PlayerTextDrawFont(playerid, td_text, 4);
	PlayerTextDrawSetProportional(playerid, td_text, (!craft ? 0 : 1));
	PlayerTextDrawSetSelectable(playerid, td_text, (!craft ? 0 : 1));

	return ShowPlayerTD(playerid, td_text);
}

stock GetInventoryItemText(playerid, cell_type, id, slot = 0, text[], upper_slot = false, time = false)
{
	new type = 0, itemid, amount, identificator, enchant, color, item_time;

	f(text, 30, "");

	switch cell_type do
	{
		case 0: itemid = Inventory[playerid][0][slot], amount = Inventory[playerid][1][slot], color = Inventory[playerid][2][slot], identificator = Inventory[playerid][3][slot], enchant = Inventory[playerid][4][slot], item_time = Inventory[playerid][6][slot]; /* player */
		case 1: itemid = HouseInfo[id][hItem][slot], amount = HouseInfo[id][hItemCount][slot], color = HouseInfo[id][hItemColor][slot], identificator = HouseInfo[id][hItemIdentificator][slot], enchant = HouseInfo[id][hItemLevel][slot]; /* warehouse */
		case 2: itemid = MusorInfo[id][mItem][slot], amount = MusorInfo[id][mItemCount][slot], color = MusorInfo[id][mItemColor][slot], identificator = MusorInfo[id][mItemIdentificator][slot], enchant = MusorInfo[id][mItemLevel][slot], item_time = MusorInfo[id][mItemTimer][slot]; /* trash */
		case 3: itemid = TrunkInfo[id][tItem][slot], amount = TrunkInfo[id][tItemCount][slot], color = TrunkInfo[id][tItemColor][slot], identificator = TrunkInfo[id][tItemIdentificator][slot], enchant = TrunkInfo[id][tItemLevel][slot]; /* trunk */
		case 4: itemid = CarInfo[id][cInvCell][slot], color = CarInfo[id][cInvCellColor][slot]; /* car */
		case 5: itemid = Inventory[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][0][slot], amount = TradeInfo[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][tradeItemCount][id >= 10 ? id - 10 : id], identificator = Inventory[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][3][slot], enchant = Inventory[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][4][slot]; /* trade */
		case 6: itemid = CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][1][slot], amount = CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][3][slot], identificator = Inventory[CentralMarket[id][crOwnedId]][3][CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot]];
        case 7: itemid = AccessoryKioskData[id][acsKioskAccessory], amount = 1, identificator = AccessoryKioskData[id][acsKioskAccessoryIdentificator], color = AccessoryKioskData[id][acsKioskAccessoryColor], enchant = AccessoryKioskData[id][acsKioskAccessoryEnchant], item_time = AccessoryKioskData[id][acsKioskAccessoryTime];
		default: itemid = id;
	}

	if(!(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1) && cell_type != 6 && item_time > 0 && cell_type == 0 or (cell_type == 2 && itemid && item_time > 0)) f(text, 30, "%s%d %s", (IsAAks(itemid) && cell_type == 0) ? "R:" : cell_type == 2 ? "B:" : "", UNIX_GET_TIME(item_time), UNIX_GET_TIME_NAME(item_time, false, bool:IsAAks(itemid)));
	else if(cell_type != 6 && ItemsInfo[itemid][itemAccesotySlot] != -1 && enchant) f(text, 30, "+%i", enchant);
	else if(cell_type != 6 && amount > 1) f(text, 30, "%i", amount);
	else if(cell_type != 6 && IsASkinInv(itemid)) f(text, 30, "ID:%i", ItemsInfo[itemid][itemModel]);
	else if(cell_type != 6 && TextFind(ItemsInfo[itemid][itemName], "[деталь тюнинга]")) f(text, 30, "TUNING"), type = 1;
	else if(cell_type != 6 && 603 <= itemid <= 626 && cell_type == 0) f(text, 30, "%i/100", Inventory[playerid][5][slot]);
	else if(cell_type != 6 && itemid >= 7345 && itemid <= 7349 or itemid == 7415) f(text, 30, "~w~SKIN ~n~STRIPE"), type = 2;
    else if(cell_type == 6 && CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][2][slot] > 0) f(text, 30, "%i BTC", CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][2][slot]), type = 3;
	else if(itemid == 7034)
	{
		new numberTypes[][] = {"clear_number_kz", "clear_number_ru", "clear_number_ua", "clear_number_by", "clear_number_usa"}, numberData[4][10];

		if(upper_slot)
			sscanf(VehicleInfo[GetPlayerVehicleID(playerid)][vNumber], "P<,>a<s[10]>[4]", numberData);

		else f(numberData[0], 10, InventoryNumber[playerid][0][cell_type == 6 ? CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot] : slot]), f(numberData[1], 10, InventoryNumber[playerid][1][cell_type == 6 ? CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot] : slot]), f(numberData[2], 10, InventoryNumber[playerid][2][cell_type == 6 ? CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot] : slot]), f(numberData[3], 10, IntToStr(identificator));

		if(!(PI[playerid][pCustomInterface][4] == 1 && GetPlayerLauncher(playerid) == 1))
			SetString(ItemsInfo[itemid][itemTxd_name], (str_f("item_number:%s", strval(numberData[3]) == 4 ? numberUSA_Data[strval(numberData[1])][0] : numberTypes[strval(numberData[3])])));
		
		f(text, 30, "%s(%s) %s%s", !(PI[playerid][pCustomInterface][4] == 1 && GetPlayerLauncher(playerid) == 1) ? "~r~" : "", strval(numberData[3]) == 4 ? numberUSA_Data[strval(numberData[1])][1] : numberData[1], !(PI[playerid][pCustomInterface][4] == 1 && GetPlayerLauncher(playerid) == 1) ? "~n~" : "", numberData[0]);
		type = 2;
	}
	else if(cell_type != 6 && identificator > 0) 
	{
		if(itemid == 1724) f(text, 30, "T. %i", identificator);
		else if(itemid == 1810 or itemid == 5995 or (itemid >= 2183 && itemid <= 3621)) f(text, 30, "LVL %i", GetStripeInfo(identificator, 0));
	}
	else f(text, 30, "");

	return (time ? item_time : type);
}

stock UpdateCellInventory(playerid, cell_type, id, slot, PlayerText:td_cell = PlayerText:INVALID_TEXT_DRAW, &PlayerText:td_text = PlayerText:INVALID_TEXT_DRAW, &PlayerText:td_text2 = PlayerText:INVALID_TEXT_DRAW, bool:upper_slot = false, &PlayerText:td_text4 = PlayerText:INVALID_TEXT_DRAW)
{
	new Float:cell_position[2], text[30], type = GetInventoryItemText(playerid, cell_type, id, slot, text, upper_slot), itemid, amount, identificator, enchant, color, item_time;

	switch cell_type do
	{
		case 0: itemid = Inventory[playerid][0][slot], amount = Inventory[playerid][1][slot], color = Inventory[playerid][2][slot], identificator = Inventory[playerid][3][slot], enchant = Inventory[playerid][4][slot], item_time = Inventory[playerid][6][slot]; /* player */
		case 1: itemid = HouseInfo[id][hItem][slot], amount = HouseInfo[id][hItemCount][slot], color = HouseInfo[id][hItemColor][slot], identificator = HouseInfo[id][hItemIdentificator][slot], enchant = HouseInfo[id][hItemLevel][slot]; /* warehouse */
		case 2: itemid = MusorInfo[id][mItem][slot], amount = MusorInfo[id][mItemCount][slot], color = MusorInfo[id][mItemColor][slot], identificator = MusorInfo[id][mItemIdentificator][slot], enchant = MusorInfo[id][mItemLevel][slot], item_time = MusorInfo[id][mItemTimer][slot]; /* trash */
		case 3: itemid = TrunkInfo[id][tItem][slot], amount = TrunkInfo[id][tItemCount][slot], color = TrunkInfo[id][tItemColor][slot], identificator = TrunkInfo[id][tItemIdentificator][slot], enchant = TrunkInfo[id][tItemLevel][slot]; /* trunk */
		case 4: itemid = CarInfo[id][cInvCell][slot], color = CarInfo[id][cInvCellColor][slot]; /* car */
		case 5: itemid = Inventory[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][0][slot], amount = TradeInfo[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][tradeItemCount][id >= 10 ? id - 10 : id], color = Inventory[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][2][slot], identificator = Inventory[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][3][slot], enchant = Inventory[id >= 10 ? GetDataTrade(playerid, tradePlayer) : playerid][4][slot]; /* trade */
		case 6: itemid = CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][1][slot], amount = CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][3][slot], identificator = Inventory[CentralMarket[id][crOwnedId]][3][CentralMarketItems[id][pTemp[playerid][pCentralMarketSelectId]][0][slot]];
		case 7: itemid = AccessoryKioskData[id][acsKioskAccessory], amount = 1, identificator = AccessoryKioskData[id][acsKioskAccessoryIdentificator], color = AccessoryKioskData[id][acsKioskAccessoryColor], enchant = AccessoryKioskData[id][acsKioskAccessoryEnchant], item_time = AccessoryKioskData[id][acsKioskAccessoryTime];
		default: itemid = id;
	}

	if(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)
		return sendInventoryCefSlotUpdate(playerid, itemid, amount, cell_type, slot, text);

	if(IsValidPlayerTextDraw(playerid, td_text) or IsPlayerTextDrawVisible(playerid, td_text)) 
		DestroyPlayerTD(playerid, td_text);

	if(IsValidPlayerTextDraw(playerid, td_text2) or IsPlayerTextDrawVisible(playerid, td_text2)) 
		DestroyPlayerTD(playerid, td_text2);

	if(IsValidPlayerTextDraw(playerid, td_text4) or IsPlayerTextDrawVisible(playerid, td_text4)) 
		DestroyPlayerTD(playerid, td_text4);

	if(td_cell != PlayerText:INVALID_TEXT_DRAW)
		GetPosTD(playerid, td_cell, cell_position[0], cell_position[1]);

	if(strlen(ItemsInfo[itemid][itemTxd_name]))
	{
		if(ItemsInfo[itemid][itemModel] && GetPlayerLauncher(playerid))
			PlayerTextDrawSetPreviewModel(playerid, td_cell, 0),
			PlayerTextDrawSetPreviewRot(playerid, td_cell, 0.000000, 0.000000, 0.000000, 100.000000),
			ShowPlayerTD(playerid, td_cell);

		if(!GetPlayerLauncher(playerid) && (itemid == 5797 or itemid == 554))
			SetString(ItemsInfo[itemid][itemTxd_name], (str_f("~r~Twin~n~Turbo%s", itemid == 5797 ? "~n~2" : "")));

		if(IsAAks(itemid))
			CreateCustomCellInventory(playerid, td_cell, td_text4, ItemsInfo[itemid][itemTxd_name], 0.0, 0.0, Float: (upper_slot ? {11.000, 13.667} : {19.500, 23.500}));
		else
			CreateCustomCellInventory(playerid, td_cell, td_text2, ItemsInfo[itemid][itemTxd_name], 0.0, 0.0, Float: (upper_slot ? {11.000, 13.667} : {19.500, 23.500}));
	}
	if(strlen(text))
	{
		td_text = CreatePlayerTextDraw(playerid, cell_position[0] + (type == 1 ? 12.75 : upper_slot ? 16.33 : 24.5), cell_position[1] + (type == 2 ? (upper_slot ? 9.833 : 17.25) : type == 3 ? 23.500001 : 21.983336), text);
		PlayerTextDrawLetterSize(playerid, td_text, type == 3 ? 0.101199 : upper_slot ? 0.08011 : 0.126499, type == 3 ? 0.500000 : upper_slot ? 0.416666 : 0.625000);
		PlayerTextDrawTextSize(playerid, td_text, upper_slot ? 640.000000 : 1280.000000, upper_slot ? 640.000000 : 1280.000000);
		PlayerTextDrawAlignment(playerid, td_text, type == 1 ? 2 : 3);
		PlayerTextDrawColor(playerid, td_text, type == 3 ? 0x76EB5EAA : IsASkinInv(itemid) ? 0xFFFFFFFF: type == 1 ? 0x000000FF : 0xAAAAAAFF);
		PlayerTextDrawUseBox(playerid, td_text, 0);
		PlayerTextDrawBoxColor(playerid, td_text, 0x80808080);
		PlayerTextDrawSetShadow(playerid, td_text, 0);
		PlayerTextDrawSetOutline(playerid, td_text, type == 3 ? 1 : 0);
		PlayerTextDrawBackgroundColor(playerid, td_text, 0x00000000);
		PlayerTextDrawFont(playerid, td_text, type == 1 ? 1 : 2);
		PlayerTextDrawSetProportional(playerid, td_text, 1);
		PlayerTextDrawSetSelectable(playerid, td_text, 0);
		ShowPlayerTD(playerid, td_text);
	}
	if(color > 0 && itemid != 7034)
	{
		td_text2 = CreatePlayerTextDraw(playerid, cell_position[0] + 21.0 + (1.0007876 * 0.0), cell_position[1] + 3.5, "Box");
		PlayerTextDrawLetterSize(playerid, td_text2, 0.0000, 0.1079 + (0.0163504 * 0.0));
		PlayerTextDrawTextSize(playerid, td_text2, cell_position[0] + 22.0 + (0.8732852 * 0.0), 0.0000);
		PlayerTextDrawAlignment(playerid, td_text2, 1);
		PlayerTextDrawColor(playerid, td_text2, -1);
		PlayerTextDrawUseBox(playerid, td_text2, 1);
		PlayerTextDrawBoxColor(playerid, td_text2, !IsAAks(itemid) ? getTuningColorsHex(color - 1) : AksMassive[color][AksColorDefault]);
		PlayerTextDrawBackgroundColor(playerid, td_text2, 255);
		PlayerTextDrawFont(playerid, td_text2, 1);
		PlayerTextDrawSetProportional(playerid, td_text2, 1);
		PlayerTextDrawSetShadow(playerid, td_text2, 0);
		ShowPlayerTD(playerid, td_text2);
	}

    return true;
}

stock InventSlotUpdate(playerid, td = 0, slot = 0, nextpage = 0, page = 0)
{
	if(PickInvent[playerid] != InventoryMaxSlot+1)
		HideInventMenuTD(playerid);

	if(!nextpage)
	{
		PickInvent[playerid] = InventoryMaxSlot+1;
		timeaks[playerid] = -1;		

		if(!(PI[playerid][pInvPage] == GetPageInv(slot, 1))) return false;
	}

	for(new i; i < (nextpage ? 36 : 1); i++)
	{
		if(nextpage) slot = i+(36*page);

		new item = Inventory[playerid][0][slot], color = 0xFFFFFFFF, bool:select = true;

		PlayerTextDrawFont(playerid, Kletka[playerid][nextpage ? i : td], ItemsInfo[item][itemCustom] == 2 ? 100 : 5);
		PlayerTextDrawSetPreviewModel(playerid, Kletka[playerid][nextpage ? i : td], IsASkinInv(item) && ItemsInfo[item][itemModel] > 311 ? GetSkinInfo(ItemsInfo[item][itemModel]) : ItemsInfo[item][itemModel]);
		PlayerTextDrawSetPreviewRot(playerid, Kletka[playerid][nextpage ? i : td], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][1], ItemsInfo[item][itemRotation][2], ItemsInfo[item][itemRotation][3]);
		PlayerTextDrawBackgroundColor(playerid, Kletka[playerid][nextpage ? i : td], ItemsInfo[item][itemColor]);
		
		if(EnchantWork{playerid} && item == 1420)
			PlayerTextDrawBackgroundColor(playerid, Kletka[playerid][nextpage ? i : td], 0x90750EFF);

		else if(GetInventoryType(playerid, E_INVENTORY_TYPE_OTHER_INV) && Int_GetPlayerData(playerid, "OtherInventOpen") == 4 && (!ItemsInfo[item][itemTradeable] or Inventory[playerid][6][slot] > Global_Time))
			select = false, color = 0x777777FF;

		else if(ChangeColor{playerid} && !GetInventoryType(playerid, E_INVENTORY_TYPE_COLOR) && (!IsAChangeColorItem(item) && !(item == 809)))
			select = false, color = 0x555555FF;

		else if(EnchantWork{playerid} && !GetInventoryType(playerid, E_INVENTORY_TYPE_ENCHANT_2) && (!IsAAks(item) && !(item == 1187) && (IsASkinInv(item) && ItemsInfo[item][itemModel] < 311)))
			select = false, color = 0x777777FF;

		else if(GetInventoryType(playerid, E_INVENTORY_TYPE_ENCHANT_2) && !IsAAks(item) || shopopen{playerid} || PI[playerid][pInvCell] <= slot || InventSlotUse[playerid][slot])
			select = false, color = 0x999999FF;

		else if(Inventory[playerid][5][slot] <= 10 && IsAAks(item))
			color = 0xde8787FF;

		if(IsACarInv(ItemsInfo[item][itemModel])) 
			PlayerTextDrawSetPreviewVehCol(playerid, Kletka[playerid][nextpage ? i : td], 0, 0);

		PlayerTextDrawSetSelectable(playerid, Kletka[playerid][nextpage ? i : td], select);
		PlayerTextDrawColor(playerid, Kletka[playerid][nextpage ? i : td], color);
		ShowPlayerTD(playerid, Kletka[playerid][nextpage ? i : td]);

		UpdateCellInventory(playerid, 0, 0, slot, Kletka[playerid][nextpage ? i : td], KletkaText[playerid][nextpage ? i : td], KletkaLevel[playerid][nextpage ? i : td], false, KletkaText[playerid][36 + (nextpage ? i : td)]);
	}	

	if(nextpage) PI[playerid][pInvPage] = page; 

	return true;
}

cmd:kid_prank(playerid, params[])
{
	if(!IsOsnovatel(playerid))
		return false;

	extract params -> new targetid, string:url[248], off; else
		return SCM(playerid, COLOR_OLDRED, !"Используй: /kid_prank [targetid] [url(video)] [off]");

	if(!IsPlayerOnline(targetid))
		return false;

	if(off)
		return destroyBrowser(targetid, 3), SCMF(playerid, COLOR_WHITE, "Пранк {ff6666}выключен, {ffffff}Жертва пранка: %s[%i]", PlayerName[targetid], targetid);

	return createBrowser(playerid, 3, url, ""), SCMF(playerid, COLOR_WHITE, "Пранк {ff6666}включен, {ffffff}Жертва пранка: %s[%i]", PlayerName[targetid], targetid);
}

stock LoadSklads()
{
	new Cache:result = mysql_query(mysql, "SELECT * FROM `sklads`");
	
	for(new i, id, virtual_world = 1, Float:position[2]; i < (OWNABLESKLADS = cache_num_rows()); i++)
	{
		cache_get_value_name_int(i, !"ID", id), SkladInfo[id][sklad_id] = id;
		cache_get_value_name(i, !"Owner", SkladInfo[id][sklad_Owner], 24);
		cache_get_value_name_int(i, !"Password", SkladInfo[id][sklad_Password]);
		cache_get_value_name(i, !"Items", global_str), Int_UnPackMassive(global_str, SkladInfo[id][sklad_item]);
		cache_get_value_name(i, !"ItemsAmount", global_str), Int_UnPackMassive(global_str, SkladInfo[id][sklad_item_amount]);
		cache_get_value_name(i, !"ItemsEnchant", global_str), Int_UnPackMassive(global_str, SkladInfo[id][sklad_item_enchant]);
		cache_get_value_name(i, !"ItemsMending", global_str), Int_UnPackMassive(global_str, SkladInfo[id][sklad_item_mending]);
		cache_get_value_name(i, !"ItemsColor", global_str), Int_UnPackMassive(global_str, SkladInfo[id][sklad_item_color]);

		if(i > (50 * virtual_world) - 1)
			virtual_world++;

		SkladInfo[i][sklad_door] = CreateDynamicObject(19796, sklad_door_position[i - 50 * (virtual_world - 1)][0], sklad_door_position[i - 50 * (virtual_world - 1)][1], sklad_door_position[i - 50 * (virtual_world - 1)][2], sklad_door_position[i - 50 * (virtual_world - 1)][3], sklad_door_position[i - 50 * (virtual_world - 1)][4], sklad_door_position[i - 50 * (virtual_world - 1)][5], virtual_world, 104, -1, STREAMER_OBJECT_SD, 70.0);
		SetDynamicObjectMaterial(SkladInfo[i][sklad_door], 2, 13065, "sw_fact02alt", "spandLoadingDoor", 0);
		SetDynamicObjectMaterial(SkladInfo[i][sklad_door], 1, 13065, "sw_fact02alt", "spandLoadingDoor", 0);
		SetDynamicObjectMaterial(SkladInfo[i][sklad_door], 0, 9515, "bigboxtemp1", "ws_garagedoor3_white", 0xFFCCCCCC);

		SkladInfo[id][sklad_pickup] = CreateDynamicPickup(GetString(SkladInfo[id][sklad_Owner], "The State") ? 1274 : 19135, 1, sklad_door_position[i - 50 * (virtual_world - 1)][6], sklad_door_position[i - 50 * (virtual_world - 1)][7], sklad_door_position[i - 50 * (virtual_world - 1)][8], virtual_world, 104),
	    f(global_str, 400, "Склад №%d (uid %d)\n\n{cccccc}%s", i - 50 * (virtual_world - 1) + 1, i, GetString(SkladInfo[id][sklad_Owner], "The State") ? "Стоимость: $50000000" : (str_f("Владелец: %s", SkladInfo[id][sklad_Owner]))),
        SkladInfo[id][sklad_3dtext] = CreateDynamic3DTextLabel(global_str, 0x338FAFFF, sklad_door_position[i - 50 * (virtual_world - 1)][6], sklad_door_position[i - 50 * (virtual_world - 1)][7], sklad_door_position[i - 50 * (virtual_world - 1)][8], 5.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virtual_world, 104, -1),
		SkladInfo[id][sklad_areaid] = CreateDynamicSphere(sklad_door_position[i - 50 * (virtual_world - 1)][6], sklad_door_position[i - 50 * (virtual_world - 1)][7], sklad_door_position[i - 50 * (virtual_world - 1)][8], 1, virtual_world, 104);

		switch i - 50 * (virtual_world - 1) + 1 do
		{
			case 1,2,4,6,8,10,12,14,16,18,20,22,31,33,35,37,39,41,43,45,47,49: position[0] = -5.2322, position[1] = 0.03119999999;
			case 23..28: position[0] = 0.0589, position[1] = 5.0568;
			default: position[0] = 5.0371, position[1] = -0.2311;
		}

		CreateDynamicPickup(1277, 1, sklad_door_position[i - 50 * (virtual_world - 1)][6] + position[0], sklad_door_position[i - 50 * (virtual_world - 1)][7] + position[1], sklad_door_position[i - 50 * (virtual_world - 1)][8], virtual_world, 104),
		CreateDynamic3DTextLabel("Меню склада", 0xFFFFFFFFCCCCCCFF, sklad_door_position[i - 50 * (virtual_world - 1)][6] + position[0], sklad_door_position[i - 50 * (virtual_world - 1)][7] + position[1], sklad_door_position[i - 50 * (virtual_world - 1)][8], 5.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virtual_world, 104, -1),
		SkladInfo[id][sklad_areaid_menu] = CreateDynamicSphere(sklad_door_position[i - 50 * (virtual_world - 1)][6] + position[0], sklad_door_position[i - 50 * (virtual_world - 1)][7] + position[1], sklad_door_position[i - 50 * (virtual_world - 1)][8], 1, virtual_world, 104);
	}

	return cache_delete(result);
}

stock UpdateSkladText(skladid, virtual_world)
{
	if(IsValidDynamicPickup(SkladInfo[skladid - 50 * (virtual_world - 1)][sklad_pickup]))
		DestroyDynamicPickup(SkladInfo[skladid - 50 * (virtual_world - 1)][sklad_pickup]);

	if(IsValidDynamic3DTextLabel(SkladInfo[skladid - 50 * (virtual_world - 1)][sklad_3dtext])) 
		DestroyDynamic3DTextLabel(SkladInfo[skladid - 50 * (virtual_world - 1)][sklad_3dtext]);

	SkladInfo[skladid][sklad_pickup] = CreateDynamicPickup(GetString(SkladInfo[skladid][sklad_Owner], "The State") ? 1274 : 19135, 1, sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][6], sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][7], sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][8], virtual_world, 104),
	f(global_str, 400, "Склад №%d (uid %d)\n\n{cccccc}%s", skladid - 50 * (virtual_world - 1), skladid - 1, GetString(SkladInfo[skladid][sklad_Owner], "The State") ? "Стоимость: $50000000" : (str_f("Владелец: %s", SkladInfo[skladid][sklad_Owner]))),
    SkladInfo[skladid][sklad_3dtext] = CreateDynamic3DTextLabel(global_str, 0x338FAFFF, sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][6], sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][7], sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][8], 5.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virtual_world, 104, -1),
	SkladInfo[skladid][sklad_areaid] = CreateDynamicSphere(sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][6], sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][7], sklad_door_position[skladid - 50 * (virtual_world - 1) - 1][8], 1, virtual_world, 104);
	
	return true;
}

stock GetPlayerAvailableSklad(playerid)
{
	if(PI[playerid][pSkladID][0] == -1) return 0;
	if(PI[playerid][pSkladID][0] != -1 && PI[playerid][pSkladID][1] == -1 && ImprovementsData[playerid][idStorageRoom]) return 1;
	return -1;
}

stock LoadTuningComponents(playerid, vehicleid, start = 0, end = 13)
{
	global_str = "";
	new bool:installed, bool:avaible, statusText[40], statusColor;
	if(end > sizeof(tuningComponents)) end = sizeof(tuningComponents);
	for(new i = start; i < end; i++)
	{
		switch(tuningComponents[i][componentID])
		{
			case 73..86:
			{
				if(tuningComponents[i][componentID] >= 73 || tuningComponents[i][componentID] <= 76) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(vehicleid))][vehicleBonnetData][1] == -1) continue;
				if(tuningComponents[i][componentID] >= 77 || tuningComponents[i][componentID] <= 81) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(vehicleid))][vehicleWingData][0] == -1) continue;
				if(tuningComponents[i][componentID] >= 82 || tuningComponents[i][componentID] <= 86) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(vehicleid))][vehicleExhaustData][0] == -1) continue;

				for(new j; j < sizeof(ItemsInfo); j++)
					if(GetString(ItemsInfo[j][itemName], (str_f("%s для %s (%s)", tuningComponents[i][nameText], vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(vehicleid))][vehicleName], tuningComponents[i][headerText]))) && tuningComponents[i][componentItemID] == -1) tuningComponents[i][componentItemID] = j;
			}
		}
		installed = avaible = false, statusColor = -1;

		if(tuningComponents[i][componentItemID] != -1 && tuningStationGetItemInstall(vehicleid, tuningComponents[i][categoryID], tuningComponents[i][componentItemID]))
			statusText = "установлено", statusColor = 1132970495, avaible = true;

		else if(!tuningComponents[i][componentAmount])
			statusText = "нет в наличии", statusColor = -1049410561;

		else 
			valstr(statusText, tuningComponents[i][priceMoney]), avaible = true;

		f(global_str, sizeof(global_str), "%s{\"id\":%i,\"categoryId\":%i,\"header\":\"%s\",\"color\":%i,\"name\":\"%s\",\"text\":\"\",\"icon\":\"%s\",\"price\":%i,\"installed\":%s,\"inCart\":false,\"available\":%s,\"statusText\":\"%s\",\"statusColor\":%d,\"hidePriceButton\":false,\"scale\":1.0}%s", global_str, tuningComponents[i][componentID], tuningComponents[i][categoryID], tuningComponents[i][headerText], tuningComponents[i][componentColor], tuningComponents[i][nameText], tuningComponents[i][iconText], tuningComponents[i][priceMoney], installed ? "true" : "false", avaible ? "true" : "false", statusText, statusColor, i == end - 1 ? "" : ",");
	}
	if(GetPlayerLauncher(playerid) == 1) executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.loadCategoryComponents', `[[%s]]`);", global_str)));
	if(end < sizeof(tuningComponents)) return LoadTuningComponents(playerid, vehicleid, end, end + 14);
	return false;
}

stock SetPlayer_interfaceVisible(playerid, bool:toggle)
{
	new BitStream:bs = BS_New();

	for(new i, ids[] = {52, 86, 73}; i < 3; i++)
		BS_WriteValue(bs, PR_UINT8, 220, PR_UINT8, ids[i], PR_UINT8, toggle ? (!i ? 2 : 0) : !i ? 0 : 128), PR_SendPacketEx(bs, playerid), BS_Reset(bs);

	return BS_Delete(bs);
}

stock tuningStationOpen(playerid, i)
{
	new carid = GetPlayerVehicleID(playerid);

	hidePlayerHud(playerid), SpeedometrSetting(playerid), SetPlayer_interfaceVisible(playerid, false);

	tuningBox_player[i] = playerid, pTemp[playerid][tSalonBox] = i, UpdateDynamic3DTextLabelText(tuningCenter3DText[i], 0xFFFFFFFF, "{EFBE51}Гараж занят");

	LinkVehicleToInterior(carid, 3), SetVehicleVirtualWorld(carid, i);
	SetVehiclePos(carid, tuningStation_boxInfo[i][1][0], tuningStation_boxInfo[i][1][1], tuningStation_boxInfo[i][1][2]), SetVehicleZAngle(carid, tuningStation_boxInfo[i][1][3]);
	TogglePlayerControllable(playerid, false);
	SetPlayerInterior(playerid, 3), SetPlayerVirtualWorld(playerid, i);

	SetPlayerCameraPos(playerid, 1536.8762, 962.1998, 11.4604);
	SetPlayerCameraLookAt(playerid, 1530.8762, 951.8074, 9.4604);

	RETURN_STRING[3][0] = EOS, RETURN_STRING[6][0] = EOS;

	RETURN_STRING[1] = "[\
		{\"id\":3,\"name\":\"Стайлинг\",\"icon\":\"bucket.svg\"},\
		{\"id\":13,\"parentId\":3,\"name\":\"Диски\",\"icon\":\"wheel.svg\",\"type\":\"colorList\"},\
		{\"id\":14,\"parentId\":3,\"name\":\"Капот\",\"icon\":\"hood.svg\",\"type\":\"componentList\"},\
		{\"id\":15,\"parentId\":3,\"name\":\"Спойлер\",\"icon\":\"spoiler.svg\",\"type\":\"componentList\"},\
		{\"id\":16,\"parentId\":3,\"name\":\"Выхлоп\",\"icon\":\"exhaust.svg\",\"type\":\"componentList\"},\
		{\"id\":17,\"parentId\":3,\"name\":\"Плёнка\",\"icon\":\"vinil.svg\",\"type\":\"colorList\"},\
		{\"id\":18,\"parentId\":3,\"name\":\"Тонировка\",\"icon\":\"glass.svg\",\"type\":\"tintedWindow\"},\
		{\"id\":19,\"parentId\":3,\"name\":\"Подвеска\",\"icon\":\"suspension.svg\",\"type\":\"sliderList\"},\
		{\"id\":20,\"parentId\":3,\"name\":\"Цвет фар\",\"icon\":\"lights.svg\",\"type\":\"colorList\"},\
		{\"id\":21,\"parentId\":3,\"name\":\"Цвет выхлопа\",\"icon\":\"exhaust_color.svg\",\"type\":\"colorList\"}]";

	RETURN_STRING[2] = "[255,436797695,437453055,387580159,236585215,68813055,1705471,1707775,1710335,1186559,531199,16784127,167779071,335551231,436213503]";
	RETURN_STRING[3] = "[1,1,2]";
	RETURN_STRING[6] = "[{\"id\":67,\"color\":0,\"opacity\":100},{\"id\":68,\"color\":0,\"opacity\":100},{\"id\":69,\"color\":0,\"opacity\":100},{\"id\":70,\"color\":0,\"opacity\":100},{\"id\":71,\"color\":0,\"opacity\":100},{\"id\":72,\"color\":0,\"opacity\":100},{\"id\":87,\"color\":0,\"opacity\":100}]";
	RETURN_STRING[4] = "[{\"type\":0,\"name\":\"Мощность\",\"value\":70,\"valueOffset\":0.0,\"valueMax\":245.0},{\"type\":1,\"name\":\"Устойчивость\",\"value\":150,\"valueOffset\":0.0,\"valueMax\":350.0},{\"type\":2,\"name\":\"Ускорение\",\"value\":200,\"valueOffset\":0.0,\"valueMax\":75.0},{\"type\":3,\"name\":\"Макс. Скорость\",\"value\":277,\"valueOffset\":0.0,\"valueMax\":800.0}]";

	switch GetPlayerLauncher(playerid) do
	{
		case 1:
		{
			executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', `[\"TuningStation\"]`);");

			LoadTuningComponents(playerid, carid);

			executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.loadCategories', `[%s]`);", RETURN_STRING[1])));
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.loadTintedWindowColors', '[%s]');", RETURN_STRING[2])));
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.setDashboardProperties', `[%s]`);", RETURN_STRING[4])));
			tuningStationUpdateClientData(playerid, carid);
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.loadTintedWindows', `[%s]`);", RETURN_STRING[6])));
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.setColorsSelected', `[%s]`);", RETURN_STRING[3])));
			cursorPlayer(playerid, 0, true);
		}

		case 2:
		{
			cursorPlayer(playerid, 74, true);

			LoadTuningComponents(playerid, carid);

			eventMobile(playerid, {74, 1}, RETURN_STRING[1]);
			eventMobile(playerid, {74, 8}, RETURN_STRING[4]);
			tuningStationUpdateClientData(playerid, carid);
			eventMobile(playerid, {74, 5}, RETURN_STRING[6]);
			eventMobile(playerid, {74, 3}, RETURN_STRING[2]);
			eventMobile(playerid, {74, 2}, RETURN_STRING[3]);
		}
	}

	return true;
}

cmd:set_tuning(playerid, data[])
{
	if(!IsOsnovatel(playerid)) return false;

	extract data -> new type, value, value_1; else
		return SCM(playerid, -1, !"/set_tuning type value color");

	new vehicleid = GetPlayerVehicleID(playerid);

	switch type do
	{
		case 0: SetVehicleFrontLight(vehicleid, value);
		case 1: SetVehicleExhaustColor(vehicleid, value);
		case 2: SetVehicleBottomColor(vehicleid, value);
		case 3: SetVehicleWindowTint(vehicleid, value, value_1);
		case 4: AddVehicleComponentEx(vehicleid, value);
		case 5: SetVehicleWadPainting(vehicleid, value, value_1);
		case 6: SetVehicleWheelDisks(vehicleid, value, value_1);
	}

	return SCMF(playerid, COLOR_VALIK, "/set_tuning -> successful [ vehicleid: %i, type: %i, value: %i, value_1: %i ]", vehicleid, type, value, value_1);
}

stock tuningStationUpdateCamera(playerid, category, component, carid)
{
	new id, Float:X[6], Float:tuningStation_camera[][6] = 
	{
		{1537.4742, 959.5036, 11.4604, 1532.2782, 956.5036, 9.4604},//Диски
		{1535.3762, 960.9677, 11.4604, 1531.3762, 954.0395, 9.4604},//Капот
		{1535.8762, 951.5395, 12.4604, 1531.8762, 958.4677, 8.4604},//Глушитель
		{1535.8762, 951.5395, 10.9604, 1531.8762, 958.4677, 9.9604},//Спойлер
		{1536.1262, 960.9007, 10.4604, 1531.6262, 953.1065, 10.4604},//Подвеска 1
		{1536.1262, 953.1065, 10.4604, 1531.6262, 960.9007, 10.4604},//Подвеска 2
		{1536.8762, 962.1998, 11.4604, 1530.8762, 951.8074, 9.4604},//Дефолт
		{1535.3762, 960.9677, 11.4604, 1531.3762, 954.0395, 9.4604},//лобовое стекло
		{1536.9073, 959.2536, 11.4604, 1530.8451, 955.7536, 9.4604},//боковое стекло 1
		{1536.9073, 955.7536, 11.4604, 1530.8451, 959.2536, 9.4604},//боковое стекло 2
		{1535.6262, 953.6065, 11.4604, 1531.1262, 961.4007, 9.4604},//Заднее стекло
		{1533.8762, 963.0036, 10.4604, 1533.8762, 952.0036, 10.4604},//Передние фары
		{1533.8762, 952.5036, 10.4604, 1533.8762, 962.5036, 10.4604},//Задние фары
		{1536.8762, 962.1998, 12.4604, 1530.8762, 951.8074, 8.4604}//Крыша
	};

	switch category do
	{
		case 13: id = 0;
		case 14: id = 1;
		case 15: id = 2;
		case 16: id = 3;
		case 18:
		{
			switch component do
			{
				case 67: id = 7;
				case 68: id = 8;
				case 69: id = 9;
				case 70: id = 10;
				case 71: id = 11;
				case 72: id = 12;
				case 87: id = 13;
			}
		}
		case 19: id = (component == 48 ? 4 : 5);
		case 21: id = 3;
		default: id = 6;
	}

	if(GetPVarInt(playerid, "tuningStationCameraID") == id) return false;

	ReturnTheCarTuning(playerid, carid, GetPVarInt(playerid, "tuningStationCameraID"));
	SetPVarInt(playerid, "tuningStationCameraID", id);

	GetPlayerCameraPos(playerid, X[0], X[1], X[2]);
	GetPlayerCameraFrontVector(playerid, X[3], X[4], X[5]);

	InterpolateCameraPos(playerid, X[0], X[1], X[2], tuningStation_camera[id][0], tuningStation_camera[id][1], tuningStation_camera[id][2], 1000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, X[3] + X[0], X[4] + X[1], X[5] + X[2], tuningStation_camera[id][3], tuningStation_camera[id][4], tuningStation_camera[id][5], 1000, CAMERA_MOVE);

	return true;
}

stock tuningStationUpdateCar(playerid, carid)
{
	new component = pTemp[playerid][tSalonSelect];

	switch pTemp[playerid][tSalonCategory] do
	{
		case 13: if(50 <= component <= 66) SetVehicleWheelDisks(carid, component-49, pTemp[playerid][tSalonColor][0], playerid);
		case 14: if(73 <= component <= 76) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleBonnetData][component - 72] > 0) AddVehicleComponentEx(carid, vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleBonnetData][component - 72], false, playerid);
		case 15: if(77 <= component <= 81) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleWingData][component - 77] > 0) AddVehicleComponentEx(carid, vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleWingData][component - 77], false, playerid);
		case 16: if(82 <= component <= 86) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleExhaustData][component - 82] > 0) AddVehicleComponentEx(carid, vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleExhaustData][component - 82], false, playerid);
		case 17: { SetVehicleWadPainting(carid, component - 30, pTemp[playerid][tSalonColor][0], playerid); if(component == 30) ChangeVehicleColor(carid, pTemp[playerid][tSalonColor][0], pTemp[playerid][tSalonColor][1]); }
		case 19: 
		{
			if(component <= 49)
				f(global_str, 720, "[{\"id\":0,\"title\":\"Угол %s колёс\",\"min\":-15.000000,\"step\":0.5,\"max\":15.000000,\"value\":%2.f},{\"id\":1,\"title\":\"Выпад %s колёс\",\"min\":-0.100000,\"step\":0.01,\"max\":0.100000,\"value\":%2.f}]", component == 48 ? "передних" : "задних", vehicleWheelSetting[carid][component == 48 ? 0 : 1][1], component == 48 ? "передних" : "задних", vehicleWheelSetting[carid][component == 48 ? 0 : 1][0]);

			else f(global_str, 720, "[{\"id\":0,\"title\":\"Диаметр всех колёс\",\"min\":0.75,\"step\":0.01,\"max\":1.05,\"value\":%2.f}]", vehicleWheelSize[carid]);

			if(GetPlayerLauncher(playerid) == 2) eventMobile(playerid, {74, 4}, global_str);
			else executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.setDashboardSliders', `[%s]`);", global_str)));
		}
		case 20: SetVehicleFrontLight(carid, pTemp[playerid][tSalonColor][0]);
		case 21: SetVehicleExhaustColor(carid, pTemp[playerid][tSalonColor][0]);
	}

	return true;
}

stock ReturnTheCarTuning(playerid, carid, id)
{
	//for(new i; i < 22; i++)
	//	if(pTemp[playerid][tSalonCartCheck][i] != pTemp[playerid][tSalonSelect])
	//		SetVehicleCustomTuning(playerid, carid, id);

	return true;
}

stock SaveVehicleCustomTuning(carid)
	return SQL("UPDATE `ownable` SET `Color_1` = '%d', `Number` = '%s', `VisualTuning`= '%s', `WheelSize` = '%f', `WheelSettingFront`= '%s', `WheelSettingBack`= '%s', `WindowColors`= '%s' WHERE `ID` = '%d' LIMIT 1;", VehicleInfo[carid][vColor_1], VehicleInfo[carid][vNumber], Int_PackMassive(0, vehicleTuning[carid]), vehicleWheelSize[carid], Float_PackMassive(1, vehicleWheelSetting[carid][0]), Float_PackMassive(2, vehicleWheelSetting[carid][1]), Int_PackMassive(3, vehicleWindowColors[carid]), CarInfo[GetVehicleID(carid)][cID]);

stock tuningStationUpdateComponent(playerid, component, type)
{
	global_str = "";
	f(global_str, 2048, "{\"id\":%i,\"categoryId\":%i,\"header\":\"%s\",\"color\":%i,\"name\":\"%s\",\"text\":\"\",\"icon\":\"%s\",\"price\":%i,\"installed\":%s,\"inCart\":%s,\"available\":true,\"statusText\":\"%s\",\"statusColor\":%i,\"hidePriceButton\":%s,\"scale\":1.0}", component, tuningComponents[component][categoryID], tuningComponents[component][headerText], tuningComponents[component][componentColor], tuningComponents[component][nameText], tuningComponents[component][iconText], tuningComponents[component][priceMoney], type == 1 ? "true" : "false", type == 2 ? "true" : "false", type == 2 ? ("в корзине") : type == 1 ? ("установлено") : (str_f("%i", tuningComponents[component][priceMoney])), type == 2 ? -1681832961 : type == 1 ? 1132970495 : -1, type == 2 ? "false" : "true");

	print(global_str);

	switch GetPlayerLauncher(playerid) do
	{
		case 1:
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.updateCategoryComponent', `[%s]`);", global_str)));
		
		case 2:
			eventMobile(playerid, {74, 10}, (str_f("[%s]", global_str)));
	}

	return true;
}

stock tuningStationUpdateClientData(playerid, carid)
{
	RETURN_STRING[1] = "";
	f(RETURN_STRING[1], 512, "{\"carName\":\"%s\",\"carNameScale\":1.0,\"playerMoney\":%i,\"cartCount\":%i,\"cartColor\":\"#FFFFFF\"}", GetVehicleName(carid), PI[playerid][pMoney], pTemp[playerid][tSalonCartMoney]);

	switch GetPlayerLauncher(playerid) do
	{
		case 1:
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.setClientVisualData', `[%s]`);", RETURN_STRING[1])));
		
		case 2:
			eventMobile(playerid, {74, 7}, RETURN_STRING[1]);
	}

	return true;
}

stock tuningStationUpdateCart(playerid)
{
	switch GetPlayerLauncher(playerid) do
	{
		case 1: executeEvent(playerid, 0, (str_f("window.executeEvent('event.tuning.updateCart', `[[%s]]`);", pTemp[playerid][tSalonCart])));
		case 2: eventMobile(playerid, {74, 14}, (str_f("[%s]", pTemp[playerid][tSalonCart])));
	}

	return true;
}

stock tuningStationGetItemInstall(carid, category, item)
{
	new bool:status = false, number = GetVehicleID(carid);

	switch(category)
	{
		case 4..12: for(new i; i < 10; i++) if(CarInfo[number][cInvCell][i + 10] == item) status = true;
		case 13..16: for(new i; i < 10; i++) if(CarInfo[number][cInvCell][i] == item) status = true;
		case 17: if(CarInfo[number][cInvCell][21] == item) status = true;
		case 18, 19:
		{
			for(new s; s < 7; s++)
			{
				if(category == 18) if(vehicleWindowColors[carid][s]) status = true;
				else if(s < 5)
				{
					if(s == 2) if(vehicleWheelSize[carid] != 0.85) status = true;
					else if(s < 2) if(vehicleWheelSetting[carid][0][s] != 0.0) status = true;
					else if(s > 2) if(vehicleWheelSetting[carid][1][s - 3] != 0.0) status = true;
				}
			}
		}
		case 20, 21: if(vehicleTuning[carid][category - 17] != 1) status = true;
	}

	return status;
}

stock tuningStationSetAndSave(playerid, carid)
{
	for(new i; i < 22; i++)
	{
		if(i < 9) vehicleTuning[carid][i] = 0;

		if(!pTemp[playerid][tSalonCartCheck][i]) continue;

		if(tuningComponents[pTemp[playerid][tSalonCartCheck][i]][componentItemID] > 0 && i != 17)
		{
			new slot = GetFreeSlotCarInv(GetVehicleID(carid), (4 <= i <= 12 ? 1 : 0));
			CarInfo[GetVehicleID(carid)][cInvCell][slot] = tuningComponents[pTemp[playerid][tSalonCartCheck][i]][componentItemID];
			if(i == 13) CarInfo[GetVehicleID(carid)][cInvCellColor][slot] = pTemp[playerid][tSalonColor][0] + 1;
		}

		switch(i)
		{
			case 13..16: 
			{
				if(i == 13) vehicleTuning[carid][7] = (!pTemp[playerid][tSalonCartCheck][i] ? 0 : pTemp[playerid][tSalonCartCheck][i]-49), vehicleTuning[carid][8] = pTemp[playerid][tSalonColor][0];
				if(i == 14) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleBonnetData][pTemp[playerid][tSalonCartCheck][i] - 72] > 0) vehicleTuning[carid][0] = vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleBonnetData][pTemp[playerid][tSalonCartCheck][i] - 72]; else vehicleTuning[carid][0] = 0;
				if(i == 15) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleWingData][pTemp[playerid][tSalonCartCheck][i] - 77] > 0) vehicleTuning[carid][1] = vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleWingData][pTemp[playerid][tSalonCartCheck][i] - 77]; else vehicleTuning[carid][1] = 0;
				if(i == 16) if(vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleExhaustData][pTemp[playerid][tSalonCartCheck][i] - 82] > 0) vehicleTuning[carid][2] = vehicleModelInfo[SearchVehicleMassiveID(GetVehicleModelEx(carid))][vehicleExhaustData][pTemp[playerid][tSalonCartCheck][i] - 82]; else vehicleTuning[carid][2] = 0;
			}
			case 17: 
				CarInfo[GetVehicleID(carid)][cInvCell][21] = tuningComponents[pTemp[playerid][tSalonCartCheck][i]][componentItemID], vehicleTuning[carid][6] = pTemp[playerid][tSalonCartCheck][i]-30, VehicleInfo[carid][vColor_1] = pTemp[playerid][tSalonColor][0];
			
			case 18: 
			{
				for(new s; s < 7; s++)
					if(pTemp[playerid][tSalonCartWindowCheck][s] > 0)
						vehicleWindowColors[carid][s] = pTemp[playerid][tSalonWindowColor][s], tuningStationUpdateComponent(playerid, pTemp[playerid][tSalonCartWindowCheck][s], 1), pTemp[playerid][tSalonCartWindowCheck][s] = 0;
			}
			case 19:
			{
				for(new s; s < 5; s++)
				{
					if(pTemp[playerid][tSalonSlider][s] == 0.0) continue;
					if(s == 2) vehicleWheelSize[carid] = pTemp[playerid][tSalonSlider][2];
					else if(s < 2) vehicleWheelSetting[carid][0][!s ? 1 : 0] = pTemp[playerid][tSalonSlider][s];
					else if(s > 2) vehicleWheelSetting[carid][1][s - 3 == 0 ? 1 : 0] = pTemp[playerid][tSalonSlider][s - 3];
				}
			}
			case 20, 21: 
				vehicleTuning[carid][i - 20] = pTemp[playerid][tSalonColor][0];
		}

		if(i != 18)
			tuningStationUpdateComponent(playerid, pTemp[playerid][tSalonCartCheck][i], 1);

		pTemp[playerid][tSalonCartCheck][i] = 0;
	}

	pTemp[playerid][tSalonCart][0] = EOS;
	pTemp[playerid][tSalonCartMoney] = 0;

	tuningStationUpdateClientData(playerid, carid);
	tuningStationUpdateCart(playerid);

	return SaveVehicleCustomTuning(carid);
}

stock GetFreeSlotCarInv(carid, type = 0)
{
	for(new i = type; i < 20; i++)
		if(CarInfo[carid][cInvCell][i] == 0) return i;

	return -1;
}

stock tuningStationClose(playerid)
{
	new carid = GetPlayerVehicleID(playerid);

	showPlayerHud(playerid), SpeedometrSetting(playerid, true), SetPlayer_interfaceVisible(playerid, true);

	tuningBox_player[pTemp[playerid][tSalonBox]] = INVALID_PLAYER_ID, UpdateDynamic3DTextLabelText(tuningCenter3DText[pTemp[playerid][tSalonBox]], 0xFFFFFFFF, "Для въезда в гараж\n{70CFFA}Посигнальте ( H )"), pTemp[playerid][tSalonBox] = -1;

	LinkVehicleToInterior(carid, 0), SetVehicleVirtualWorld(carid, 0);
	SetVehiclePos(carid, 2567.7468, 968.1774, 10.6322), SetVehicleZAngle(carid, 90.0000);
	TogglePlayerControllable(playerid, true);
	SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);

	if(GetPlayerLauncher(playerid) == 2)
		cursorPlayer(playerid, 74, false), eventMobile(playerid, {74, 14}, !"[]");

	pTemp[playerid][tSalonCategory] = 
	pTemp[playerid][tSalonSelect] =
	pTemp[playerid][tSalonCartMoney] = false;
	pTemp[playerid][tSalonCart][0] = EOS;
	for(new i; i < 22; i++)
	{
		if(i < 5) pTemp[playerid][tSalonSlider][i] = 0.0;
		if(i < 7) pTemp[playerid][tSalonWindowColor][i] = 0; 
		pTemp[playerid][tSalonCartCheck][i] = 0;
		ReturnTheCarTuning(playerid, carid, i);
	}
	return DeletePVar(playerid, "tuningStationCameraID");
	
	//return SetVehicleCustomTuning(playerid, carid);
}

stock tuningStationReplenishment()
{
	for(new i; i < 4; i++)
		tuningComponents[random(sizeof(tuningComponents))][componentAmount]++;

	return true;
}

stock ShowDonate(playerid)
{
	switch(GetPlayerLauncher(playerid))
	{
		case 0: 
		{
			global_str = "";

			static const 
				donateInfo[][][] = { {"VIP статус", 4}, {"Навыки персонажа", 15}, {"Редкие боксы", 19}, {"Аксессуары", 103}, {"Игровая валюта", 8}, {"Транспорт", 25}, {"Одежда", 40}, {"Охранники", 21}, {"Тюнинг", 66}, {"Рулетка", 8}, {"Танцы", 3}, {"Остальное", 38}};

			strcat(global_str, !"{CCCCCC}Категория\t{CCCCCC}Количество товаров\n{ffff00}Товары на акции\t{cccccc}17 шт");

			for(new i; i < sizeof(DonateInfo_data); i++)
				strcat(global_str, ( str_f("\n{FF6666}%i. {%s}%s\t{cccccc}%i шт", i+1, !i ? "FAAC58" : (i == 4 ? "73B461" : "FFFFFF"), donateInfo[i][0], donateInfo[i][1] )) );

			SPD(playerid, 26180, DIALOG_STYLE_TABLIST_HEADERS, !"{FF6666}Игровой магазин", global_str, !"Далее", !"Закрыть");
		}
		case 1: 
		{
			SCM(playerid, COLOR_VALIK, !"[Информация]{ffffff} Если у вас не открылось меню доната - у вас сломана игра, используйте официальный лаунчер Arizona Games");
			hidePlayerHud(playerid);
			SetPlayer_interfaceVisible(playerid, false);

			executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"DonationShop\"]');"),
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.donationshop.ShopCountDonate', '[[ %i ]]');", PI[playerid][pVirMoney]))),
			updateDonationPlayerData(playerid),
			cursorPlayer(playerid, 0, true);
		}
		case 2: cursorPlayer(playerid, 42, true), eventMobile(playerid, {42, 0}, IntToStr(PI[playerid][pVirMoney]));
	}

	return SystemTextDrawHide(playerid), donateOpen[playerid] = true;
}

stock ShowProdsDonateDialog(playerid, page, type)
{
	DonatePlayerPage[playerid] = page;
	global_str = "";

	strcat(global_str, !"{CCCCCC}Товар\t{CCCCCC}Стоимость\t{CCCCCC}Остальное");

	for(new i = (ShowProductsDonate(type) + (page * 25)), count; i < sizeof(DonateInfo_data); i++)
	{
		if(count == 25 && i < sizeof(DonateInfo_data) - 2 && DonateInfo_data[i+1][data_Type] == type)
		{
			strcat(global_str, !"\n{777777}[»] Следующая страница\n{999999}[«] Предыдущая страница");
			break;
		}

		if(DonateInfo_data[i][data_Type] == type or type == -1)
		{
			if(type == -1 && (!DonateInfo_data[i][data_Discount] or !DonateInfo_data[i][data_Exlusive])) continue;
			strcat(global_str, ( str_f("\n{FF6666}%i. {FFFFFF}%s\t{FF6666}%d {FFFFFF}AZ-%s\t%s", type == -1 ? count : DonateInfo_data[i][data_ID] + 1, DonateInfo_data[i][data_dName], GetDonateCostAppliedDiscount(i), DonateInfo_data[i][data_Rub] ? "Roubles" : "Coins", DonateInfo_data[i][data_Discount] ? (str_f("{cccccc}( Скидка: {FF6666}%i%%{ffffff} )", DonateInfo_data[i][data_Discount])) : "")) ),
			count++;
		}
	}

	SPD(playerid, 26181, DIALOG_STYLE_TABLIST_HEADERS, !"{FF6666}Игровой магазин", global_str, !"Выбрать", !"Назад");

	return true;
}

stock ShowProductsDonate(type)
{
	for(new i; i < sizeof(DonateInfo_data); i++)
		if(DonateInfo_data[i][data_Type] == type)
			return i;
	
	return false;
}

stock ShowDonateDialog(playerid, type, value = 0)
{
	if(DonateInfo_data[value][data_Give] == -1 && value < 301 && type != 1)
		return churikovfix(playerid);

	new donateCost = DonateInfo_data[value][data_Cost];
	
	switch type do
	{
		case 0:
			SPD(playerid, 900, DIALOG_STYLE_INPUT, !"", !"{FF6666}Внимание! {FFFFFF}Вы пытаетесь обменять {FF6666}AZ{FFFFFF} coin's\nна игровую валюту в доларах. Курс обмена зависит от\nсостояния экономики сервера и его акций. Курс обмена:\n{FF6666}1{FFFFFF} az coin = {FF6666}$20000{FFFFFF}.\n\n{FFFFFF}Введите в строчку сколько az coin's\nжелаете обменять!\n\n", !"Далее", !"Закрыть");
	
		case 1:
		{
			f(global_str, sizeof(global_str), "{FF6666}-{ffffff} Вы действительно хотите приобрести набор {FF6666}'%s'{ffffff}?\n\nСтоимость приобретения: {FF6666}%d{FFFFFF} AZ-Coins%sВы получите:{FF6666}", DonateInfo_data[value][data_ID] == 6 ? "Начинающий ловец" : (DonateInfo_data[value][data_ID] > 6 ? "Начинающий магнат" : (( f(mysql_string, sizeof(mysql_string), "%s", DonateInfo_data[value][data_dName]) ), mysql_string)), donateCost, value > 5 ? "\n\n" : "\n");

			mysql_string = "";

			static const 
				valueProds[][] = {{10500000, 10}, {21400000, 20}, {43600000, 45}, {89600000, 95}, {184000000, 175}, {24000000, -1}, {60000000, -1}},
				valuePumps[][] = {"Premium VIP", "AT-99", "Владение 4 домами и бизнесами"};

			value --;
			strcat(global_str, ( str_f("%s$%s", value > 4 ? "\n\n- " : " ", value > 4 ? ( value == 5 ? "24.000.000" : "60.000.000") : (( f(mysql_string, sizeof(mysql_string), "%d", valueProds[value][0]) ), mysql_string) )));

			mysql_string = "";

			if(5 <= value <= 6)
				for(new i; i < (value == 5 ? 2 : 3); i++)
					strcat(global_str, ( str_f("\n{FF6666}- {FFFFFF}%s", valuePumps[i])) );
			else
				strcat(global_str, ( str_f("{FFFFFF}%s {FF6666}%d случайных ларцов%s", 0 <= value <= 1 ? "," : " и", valueProds[value][1], 0 <= value <= 1 ? (( f(mysql_string, sizeof(mysql_string), "\n{FFFFFF}и ещё {FF6666}%d золотых рулеток", !value ? 5 : 10) ), mysql_string) : "" )) );

			strcat(global_str, !"\n\n{cccccc}Для продолжения нажмите клавишу 'Далее'");
			spdList(playerid, 0, value);
			return SPD(playerid, 25677, DIALOG_STYLE_MSGBOX, !"", global_str, !"Далее", !"Закрыть");
		}
		case 2:
			SPDF(playerid, 15331, DIALOG_STYLE_MSGBOX, !"Подтверждение покупки", "{FFFFFF}Дополнение к VIP-аккаунту.\nСтоимость на месяц: {FF6666}%d {FFFFFF}AZ-коинов.\n\n%s\n\n{00FF00}При активации дополнения вы получите 10 разных ящиков с автомобилями.", !"Купить", !"Закрыть", DonateInfo_data[8][data_Cost], GetItemStory(playerid, 1896) );
	
		case 3:
			SPDF(playerid, 8997, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Улучшение: {FF6666}PREMIUM VIP{FFFFFF}\n{ffffff}Стоимость: {FF6666}%d{FFFFFF} AZ-Coins\n\n\n{FF5252}Преимущества PREMIUM статуса{FFFFFF}\n1) Каждый payday вы будете получать 4 AZ-Coins (donat очки){FFFFFF}\n(если отсутствует задолженность в банке и не находитесь под арестом)\n2) Возможности всех VIP.\n3) PREMIUM Чат (Для всех владельцев этого VIP) (/vr)\n4) VIP статус не нужно продлевать\n5) Самый высокий процент депозита в банке.\n6) В банке можно хранить больше 40 миллионов.\n7) 4 очка репутации семьи каждый payday\n8) Шанс крафта в 2 раза выше \n9) Аренда любого транспорта для вас со скидкой 50\n10) Законопослушность всегда 100\n11) Стоимость рекламы на билбордах и в GPS в 2 раза ниже\n12) Возможность выбора точки спавна в любом месте карты\n{FF5252}13) Бесплатный уникальный вертолет \"AT-99 «Scorpion»\".{FFFFFF}\n14) Нахождение в списке топ игроков онлайн, а так-же в рейтинге\nТОП игроков на площади у БАНКА.\n{ff0000}15)Возможно иметь до 20 автомобилей", !"Далее", !"Закрыть", GetDonateCostAppliedDiscount(9));
	
		case 4:
			SPDF(playerid, 8999, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Улучшение: {FF6666}Titan VIP{FFFFFF}\n{ffffff}Стоимость: {FF6666}%d{FFFFFF} AZ-Coins\n\n{FFB252}Преимущества Titan статуса{FFFFFF}\n1) Каждый payday вы будете получать 2 AZ-Coins (donat очки){FFFFFF}\n(если отсутствует задолженность в банке и не находитесь под арестом)\n2)Возможности всех VIP [/help - преимущества VIP]\n3)VIP Чат (Для всех богачей сервера) (/vr)\n4)VIP статус не нужно продлевать\n5)Больше процент депозита в банке.\n6)В банке можно хранить больше 40 миллионов.\n7)3 очка репутации семьи каждый payday\n8)Возможность иметь 4 авто, 5 если есть дом или отель.\n9)Вы не теряете наркотики при попадании в больницу\n10)Доступ к команде /out (Уволиться с организации по с.ж.) \n\nНажмите {FF6666}Enter{FFFFFF} чтобы приобрести.", !"Далее", !"Закрыть", GetDonateCostAppliedDiscount(10));
	
		case 5:
			churikovfix(playerid);

		case 6:
		{
			new itemGive = DonateInfo_data[value][data_Give],
				itemCount = ItemsInfo[itemGive][itemStack];
			
			f(global_str, sizeof(global_str), "{FF6666}-{ffffff} Вы действительно хотите приобрести {FF6666}'%s'{ffffff}?\n\n%s\n%s\n\n{FFFFFF}Стоимость приобретения: {FF6666}%d {FFFFFF}AZ-%s\nДля продолжения используйте кнопку 'Далее'\n\n", DonateInfo_data[value][data_dName], ItemsInfo[itemGive][itemName], GetItemStory(playerid, itemGive), donateCost, DonateInfo_data[value][data_Rub] ? "Rubles" : "Coins");
		
			if(itemCount > 1)
				strcat(global_str, !"{cccccc}Вы так же можете ввести кол-во предмета, которое хотите приобрести.\nОт 1 до 100 штук за раз\n\n");
		
			spdList(playerid, 0, itemCount);
			spdList(playerid, 1, value);

			SPD(playerid, 25644, itemCount > 1 ? DIALOG_STYLE_INPUT : DIALOG_STYLE_MSGBOX, !"{FF6666}Приобретение", global_str, !"Далее", !"Закрыть");
		}
		case 7:
		{
			switch DonateInfo_data[value][data_ID] do
			{
				case 17:
					return SPD(playerid, 8753, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{ffffff}Вы действительно хотите купить улучшение \"2 складских помещений\" за 10000.0 BTC (Bitcoin)?\n\n{cccccc}Имея это улучшение, вы сможете владеть 2-мя складскими помещениями.", !"Купить", !"Отмена");
			
				case 21:
					return SPDF(playerid, 902, DIALOG_STYLE_INPUT, !"", "{f0d52a}Внимание! {FFFFFF}Вы пытаетесь обменять {f0d52a}AZ {FFFFFF}coins\nна игровой опыт. Курс обмена:\n{f0d52a}%i {FFFFFF}AZ-coins = {f0d52a}1 EXP{FFFFFF}.\n\nВведите в строчку сколько опыта\nжелаете получить!\n\n", !"Обмен", !"Отмена", donateCost);

				case 22:
					return SPDF(playerid, 9003, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Все доступные лицензии.\nСтоимость: {6BC02E}%i{FFFFFF} AZ Coins\n\nПосле покупки ваш персонаж будет владеть\nвсеми {F0D52A}лицензиями{FFFFFF}, доступными в игре.\nСрок годности лицензий: {F0D52A}2 года{FFFFFF}.\nНажмите {6BC02E}Enter{FFFFFF} чтобы приобрести.", !"Обмен", !"Отмена", donateCost);

				case 23:
					return SPDF(playerid, 8991, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Семейная репутация: {6BC02E}1000 очков{FFFFFF}\nСтоимость: {6BC02E}%i{FFFFFF} AZ Coins\n\nНеобходима для покупки улучшений и семейных квартир.\nНажмите {6BC02E}Enter{FFFFFF} чтобы приобрести.", !"Обмен", !"Отмена", donateCost);
			
				case 24:
					return SPDF(playerid, 903, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}2-3х значный номер для {6bc02e}телефона\n{FFFFFF}Стоимость: {6bc02e}%i {FFFFFF}AZ Coins\n\nДает возможность владеть рандомным 2-х или 3-х\nзначным номером для любых телефонов.\n\n{FFFF00}Осталось свободных номеров: %d шт.\n\n{FFFFFF}Нажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена", donateCost, 6);
			
				case 25:
					return SPDF(playerid, 8990, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Улучшение: {6BC02E}Дополнительные 6 ячеек{FFFFFF} инвентаря\nСтоимость: {6BC02E}%d{FFFFFF} AZ Coins\n\nПосле приобретения количество ячеек в вашем инвентере\nбудет увеличено на 6 пунктов, а так-же появится 3 страница.\nВсего можно увеличить инвентарь на 36 пунктов (6 улучшений)\nНажмите {6BC02E}Enter{FFFFFF} чтобы приобрести.", !"Обмен", !"Отмена", donateCost);
			
				case 26:
					SPDF(playerid, 25995, DIALOG_STYLE_MSGBOX, !"{FF6666}Покупка", "{FF6666}- {FFFFFF}Вы хотите купить 1 точильный амулет?\n{AFAFAF}(дает шанс улучшения аксессуара в 2 раза выше обычного)\n{FFFFFF}Стоимость: {FF6666}%i {FFFFFF}AZ-Coins", !"Далее", !"Закрыть", donateCost);
			
				case 27:
				{
					if(PI[playerid][pVirMoney] < donateCost)
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно az coins!");

					PI[playerid][pBL] = 0;
					SCM(playerid, COLOR_VALIK, !"[Информация] {FFFFFF}Вы успешно вышли из черного списка");
					
					return GiveDonate(playerid, -donateCost);
				}

				case 29:
				{
					if(PI[playerid][pVirMoney] < donateCost)
						return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} У вас недостаточно az coins!");

					if(GetCount(playerid, 1172))
						return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} У вас уже есть военный билет!");

					return AddItem(playerid, 1172, 1, 0, -1, 0, -1, Global_Time + 7776000), GiveDonate(playerid, -donateCost);
				}

				case 30:
					return SPDF(playerid, 1612, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Сменить пол\nСтоимость: {6bc02e}%i {FFFFFF}AZ Coins\n\nПосле приобретения, ваш {f0d52a}пол {FFFFFF}будет изменен.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена", donateCost);
			
				case 31:
					return SPDF(playerid, 909, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Пополнить навык вождения\n{FFFFFF}Стоимость: {6bc02e}%i {FFFFFF}AZ-coins\n\nПосле приобретения, ваш навык вождения будет\nполностью восстановлен до {f0d52a}100 {FFFFFF}единиц.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена", donateCost);
			
				case 32:
					return SPDF(playerid, 912, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Сменить {6bc02e}Ник\n{FFFFFF}Стоимость: {6bc02e}%i {FFFFFF}az coins\n\nДает возможность сменить Ник вашего персонажа.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена", donateCost);
			
				case 33:
					return SPDF(playerid, 913, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Снять {6bc02e}варн\n{FFFFFF}Стоимость: {6bc02e}%i {FFFFFF}AZ-coins\n\nПри покупке, снимает 1 варн с вашего персонажа.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена", donateCost);
			
				case 34:
					return SPDF(playerid, 232, DIALOG_STYLE_INPUT, !"Покупка", "{FFFFFF}Вы хотите купить законопослушность\nСтоимость: %i AZ-монеты за 1 законопослушность\nВведите кол-во очков законопослушности в окно\nЗатем нажмите \"Купить\"", !"Купить", !"Отмена", donateCost);
			
				case 36:
				{
					if(!IsPlayerInHisVehicle(playerid))
						return SCM(playerid, COLOR_RED, !"Вы не в своем авто!");
					
					CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cMilage] = 0;
					GameTextForPlayer(playerid, !"Successful", 0, 1);
					
					return SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"", !"\n\n{FFFFFF}Вы успешно убрали пробег с авто!\nТеперь его пробег равен нулю.\n\n", !"Окей", !"");
				}
				
				default:
				{
					if(DonateInfo_data[value][data_Give] != -1)
						SPDF(playerid, 25995, DIALOG_STYLE_MSGBOX, !"{FF6666}Покупка предмета", "{FF6666}-{ffffff} Вы действительно хотите приобрести предмет {FF6666}'%s?'{ffffff}?\n\nСтоимость приобретения: {FF6666}%i{FFFFFF} AZ-Coins\n\n{FFFFFF}Предмет: {FDCF28}%s%s{FFFFFF}\n\n%s\n\n{cccccc}Для продолжения нажмите клавишу 'Далее'", !"Далее", !"Закрыть", DonateInfo_data[value][data_dName], GetDonateCostAppliedDiscount(value), ItemsInfo[DonateInfo_data[value][data_Give]][itemName], value == 297 ? " (10 шт.)" : value == 307 ? " (1 ед)" : value == 308 ? " (10 ед)" : "", GetItemStory(playerid, DonateInfo_data[value][data_Give]));
						
					else 
						return churikovfix(playerid);
				}
			}

			spdList(playerid, 0, value);
		}

		case 8:
		{
			switch DonateInfo_data[value][data_ID] do
			{
				case 0:
					SPDF(playerid, 905, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Улучшение: {6bc02e}Вечный навык вождения\n{FFFFFF}Стоимость: {6bc02e}%d {FFFFFF}AZ-coins\n\nПосле приобретения ваш навык вождения никогда не будет падать.\nНе имеет срока годности, покупается навсегда.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена", DonateInfo_data[value][data_Cost]);
			
				case 3..10:
					spdList(playerid, 0, value),
					SPDF(playerid, 25996, DIALOG_STYLE_MSGBOX, ( str_f("{FF6666}%s", DonateInfo_data[value][data_dName])), "{FF6666}- {FFFFFF}Улучшение: {FF6666}%s\n\n{FFFFFF}Стоимость: {FF6666}%d {FFFFFF}AZ-Coins\n\n{cccccc}Нажмите 'Далее', чтобы приобрести.", !"Далее", !"Закрыть", DonateInfo_data[value][data_dName], DonateInfo_data[value][data_Cost]);

				case 14:
					SPDF(playerid, 906, DIALOG_STYLE_MSGBOX, !"", "{FFFFFF}Улучшение: {6bc02e}Навыки стрельбы\n{FFFFFF}Стоимость: {6bc02e}%i {FFFFFF}AZ coins\n\nПосле приобретения все навыки стрельбы будут улучшены\nдо максимального уровня.\nНажмите {6bc02e}Enter {FFFFFF}чтобы приобрести.", !"Обмен", !"Отмена", DonateInfo_data[value][data_Cost]);

				default:
					return churikovfix(playerid);
			}
		}
	}

	return true;
}

stock churikovfix(playerid)
	return SPD(playerid, 0, 0, !"{ff6666}Ошибка", !"{ff6666}Данный товар временно не доступен для покупки!", !"Окей", !"");

stock ShowDonateItems(playerid)
{
	for(new i; i < sizeof(DonateInfo_data); i++) 
		if(DonateInfo_data[i][data_Type] == DonatePlayerCat[playerid]) return i;

	return 0;
}

stock UseableCMDCars(playerid, id, carid, number, dialogid = 163)
{
	switch id do
	{
		case 0: 
		{
			if(number == -1)
			{
				if(PI[playerid][pCarsLoad] >= ValidNumberCars(playerid)) 
					return SCM(playerid, COLOR_GREY, "[Ошибка]{FFFFFF} Чтобы загрузить это авто, сначала выгрузите другое свое авто.");

				LoadPlayerCar(playerid, ShowVeh[playerid]);

				if(dialogid == 26926 && GetPlayerLauncher(playerid) == 1)
					executeEvent(playerid, 0, "window.executeEvent('cef.modals.closeModal', `[\"carMenu\"]`);");

				callcmd::cars(playerid);
			}
			else callcmd::lock(playerid);
		}
		case 1: 
		{
			if(!carid)
			{
				format(global_str, 128, "SELECT COUNT(1) FROM ownable WHERE Owner = BINARY('%s') AND ConnectLoad = 1", PN(playerid));
				new Cache:result = mysql_query(mysql, global_str), count; cache_get_value_index_int(0, 0, count);
				cache_delete(result);
					
				if(!CarInfo[number][ConnectLoad] && count == 1)
						return callcmd::cars(playerid), SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не можете поставить больше машин на загрузку!");

				CarInfo[GetVehicleID(ShowVeh[playerid])][ConnectLoad] = !CarInfo[GetVehicleID(ShowVeh[playerid])][ConnectLoad];
				if(GetPlayerLauncher(playerid) != 1) callcmd::cars(playerid);
			}
			else callcmd::key(playerid);
		}
		case 2: SPD(playerid, 6971, DIALOG_STYLE_LIST, !"", !"- Припарковать в этом месте\n- Вернуть на стандартную парковку", !"Принять", !"Отмена");
		case 3: 
		{
			if(ShowVeh[playerid] == -1) 
				return false;

			new Float:X, Float:Y, Float:Z, i = CarInfo[number][cVirtualWorld] - (CarInfo[number][cParkedInGarage] ? 50 : 1);
			GetVehiclePos(carid, X, Y, Z);

			if(IsAOwnableCar(carid) && (CarInfo[number][cParkedInGarage] || CarInfo[number][cParkedInParking]))
			{
				SCMF(playerid, COLOR_VALIK, "[Подсказка]{FFFFFF} Ваша машина в %s. На миникарте отмечен %s!", CarInfo[number][cParkedInGarage] ? "гараже" : "подземном паркинге", CarInfo[number][cParkedInGarage] ? "гараж" : "вход");
				SCMF(playerid, 0xCCCCCCFF, "Если %s, тогда: /cars - машина - припарковать - вернуть на стандартное..", CarInfo[number][cParkedInGarage] ? "этот гараж не принадлежит вам" : "вы не нашли там машины");
			}

			EnableGPSForPlayer(playerid, CarInfo[number][cParkedInGarage] ? HouseInfo[i][hGarage_X] : CarInfo[number][cParkedInParking] ? parking[i][pEnter_x] : X, CarInfo[number][cParkedInGarage] ? HouseInfo[i][hGarage_Y] : CarInfo[number][cParkedInParking] ? parking[i][pEnter_y] : Y, CarInfo[number][cParkedInGarage] ? HouseInfo[i][hGarage_Z] : CarInfo[number][cParkedInParking] ? parking[i][pEnter_z] : Z);
			
			if(!CarInfo[number][cParkedInGarage] && !CarInfo[number][cParkedInParking]) 
				SCM(playerid, COLOR_LIGHTBLUE, !"Ваш транспорт отмечен на карте");
		}
		case 4: callcmd::alarm(playerid, IntToStr(carid));
		case 5:
		{
			new numberData[4][10];

			global_str = "\
				{FFFFFF}Транспорт: {73B461}%s%s[%i]{FFFFFF}{FFFFFF}\n\
				Владелец: {73B461}%s{FFFFFF}\n\
				Посредник: {73B461}%s{FFFFFF}\n\
				Пробег: {73B461}%i км.{FFFFFF}\n\
				Налог: {73B461}%i{FFFFFF} / 150000\n\
				Штраф: {73B461}%i{FFFFFF} / 80 000\n\n\
				Штраф за восстановление: {73B461}$0{FFFFFF}\n\n\
				Цена покупки с госа: {73B461}$%i\n\
				Стоимость при продаже гос-ву: {73B461}$%i\n\
				Номер автомобиля: %s{FFFFFF}\n\
				Здоровье автомобиля: {F57449}%0.1f/1500.0{FFFFFF}\n\
				Состояние масла: {F57449}{56BF4D}хорошее{FFFFFF} (%0.3f%){FFFFFF}\n\n\
				Состояние авто: {F57449}100/100{FFFFFF}\n\
				Страховка (на повреждение): {73B461}просрочена 18:21 22.07.2024{FFFFFF}\n\
				Страховка (на слёт и автоугон): {73B461}действует до 18:19 20.09.2024{FFFFFF}\n\n\n\
				Тюнинг: {BFA44D}Минимальный{FFFFFF}\n\n\
				Количество данной модели на сервере: {FFFF00}%i ед.\n\n\
				Следите за состоянием вашего авто!\n\
				Если вы часто будете бить авто, тогда\n\
				будет понижаться ёе состояние, а чем ниже\n\
				состояние авто, тем чаще оно будет ломаться!\n\
				Если хотите отремонитировать авто, тогда вам надо\n\
				на станцию тех. обслуживания (GPS - Важные места).\n\
				{E1F549}У автомобилей у которых пробег выше\n\
				9 000 километров, будут ломаться чаще!\n\n\
				Система гоночных дуэлей! Нажмите Гудок,\n\
				2 раза подряд ({E1F549}очень быстро{FFFFFF}) в месте, где есть игроки в личных авто.";

			if(!GetString(VehicleInfo[carid][vNumber], "Arizona ST"))
				sscanf(VehicleInfo[carid][vNumber], "P<,>a<s[10]>[4]", numberData);

			f(global_str, sizeof(global_str), global_str, VehicleInfo[carid][vModification] == 554 ? "{EAD064}[TT]" : "", GetVehicleName(carid), carid, CarInfo[number][cOwner], CarInfo[number][cKeyer], floatround(CarInfo[number][cMilage]), CarInfo[number][cShtrafer], CarInfo[number][cShtraf], CarInfo[number][cCost], CarInfo[number][cCost]/2, carid > 0 && !GetString(VehicleInfo[carid][vNumber], "Arizona ST") ? (str_f("[%s] %s (%s)", numberData[1], numberData[0], countryNumber[strval(numberData[3])])) : "Нет", VehicleHealth[carid], CarInfo[number][cMaslo], vehicleModelInfo[SearchVehicleMassiveID(CarInfo[number][cModel])][vehicleServerCount]);
			SPD(playerid, 0, DIALOG_STYLE_MSGBOX, !"Информация", global_str, !"Принять", "");
		}
		case 6:
		{
			SetString(CarInfo[number][cKeyer], "The State");
			SCMF(playerid, COLOR_GREEN, "[Информация] {FFFFFF}Вы успешно %s.", IsPlayerRegCar(playerid, carid) ? "удалили всех посредников на ваш автомобиль" : "вернули ключи от автомобиля");
		}
		case 7: callcmd::style(playerid);
		//case 8: abs
		case 9: callcmd::fixmycar(playerid, IntToStr(carid));
		case 10: 
		{
			format(global_str, 128, "SELECT COUNT(1) FROM ownable WHERE Owner = BINARY('%s') AND ConnectLoad = 1", PN(playerid));
			new Cache:result = mysql_query(mysql, global_str), count; cache_get_value_index_int(0, 0, count);
			
			if(!CarInfo[number][ConnectLoad] && count == 1)
				return callcmd::cars(playerid), SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы не можете поставить больше машин на загрузку!");
			
			SQL("UPDATE ownable SET ConnectLoad = %d WHERE ID = %d LIMIT 1;", CarInfo[number][ConnectLoad] = !CarInfo[number][ConnectLoad], CarInfo[number][cID]);
			callcmd::cars(playerid), cache_delete(result);
		}
		case 11:
		{
			if(IsPlayerRegCar(playerid, carid))
				DestroyVehicleEx(OwnableCar[number]);

			PI[playerid][pCarsLoad]--;
			callcmd::cars(playerid);
		}
		case 12: SPD(playerid, 25315, DIALOG_STYLE_INPUT, !"Сдача в аренду", !"{ffffff}Укажите ID игрока, которому хотите сдать транспорт в аренду,\nа так же цену за один час аренды и количество часов аренды.\n\nФормат ввода: (через запятую)\n{ffff00}ID игрока, цена за 1 час аренды, количество часов аренды", !"Сдать", !"Назад");
		case 13: callcmd::getherecar(playerid, IntToStr(carid));
	}
	return true;
}

stock IsPlayerHaveBodyguard(playerid)
{
	new Cache:result = mysql_query(mysql, (str_f("SELECT * FROM bodyguard WHERE Owner = '%s' LIMIT 4;", PlayerName[playerid]))), 
		count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock ShowBodyguardTD(playerid, Float:X, Float:Y)
{	
	if(bodyguardTDOpen{playerid})
		CloseBodyguardTD(playerid);
	
	bodyguardTDOpen{playerid} = true;

	for(new i; i < 27; i++)
	{
		if(i < 8)
		{
			DestroyPlayerTD(playerid, InvItemSlot[playerid][i]);
			DestroyPlayerTD(playerid, InvLevelSlot[playerid][i]), DestroyPlayerTD(playerid, InvLevelSlot[playerid][8 + i]);
			DestroyPlayerTD(playerid, InvColorSlot[playerid][i]);
		}

		DestroyPlayerTD(playerid, InvTextDraws[playerid][i]);
	}

	for(new i, Float:Pos[2]; i < 4; i++)
	{
		Pos[0] = X - 125.401703, Pos[1] = Y + 58.600006, CreateBodyguardDecorationTD(playerid, Pos, i),
		Pos[0] = X - 124.401703, Pos[1] = Y + 26.100006, CreateBodyguardSkinsTD(playerid, Pos, i),
		Pos[0] = X - 37.288452, Pos[1] = Y + 39.975006, CreateBodyguardInventorySlots(playerid, Pos, i),
		Pos[0] = X - 85.071594, Pos[1] = Y + 62.550018, CreateBodyguardWeaponTD(playerid, Pos, i);

		if(i < IsPlayerHaveBodyguard(playerid))
		{
			Pos[0] = X - 26.049988, Pos[1] = Y + 27.100006, CreateBodyguardMenuButtons(playerid, Pos, i);

			for(new id; id < 5; id++)
				Pos[0] = X, Pos[1] = Y, CreateBodyguardTexts(playerid, Pos, i, id);

			Pos[0] = X - 68.61615, Pos[1] = Y + 70.575012, CreateBodyguardInventoryButtons(playerid, Pos, i);
		}
	}

	if(!IsPlayerTextDrawVisible(playerid, InvTextDraws[playerid][34]))
		ShowPlayerTD(playerid, InvTextDraws[playerid][34]);

	return true;
}

stock CreateBodyguardDecorationTD(playerid, Float:Pos[], type)
{
	static const Float:bodyguardDecorationPos[][] = { {17.565258, 21.000004}, {81.971199, 21.000004}, {80.971199, 38.625008} };

	for(new i; i < 3; i++)
	{
		BodyguardDecorationTD[playerid][type][i] = CreatePlayerTextDraw(playerid, Pos[0] + ( i ? 39.130524 : 0.0 ), Pos[1] - ( i ? 19.625 - ( 1.0 * i - 1 ) : 0.0 ) + 55.5 * type, !"LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BodyguardDecorationTD[playerid][type][i], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, BodyguardDecorationTD[playerid][type][i], bodyguardDecorationPos[i][0], bodyguardDecorationPos[i][1]);
		PlayerTextDrawAlignment(playerid, BodyguardDecorationTD[playerid][type][i], 1);
		PlayerTextDrawColor(playerid, BodyguardDecorationTD[playerid][type][i], i == 2 ? 0x111111FF : InventColor[PI[playerid][pInvColors]][1]);
		PlayerTextDrawUseBox(playerid, BodyguardDecorationTD[playerid][type][i], 0);
		PlayerTextDrawBoxColor(playerid, BodyguardDecorationTD[playerid][type][i], 0x80808080);
		PlayerTextDrawSetShadow(playerid, BodyguardDecorationTD[playerid][type][i], 2);
		PlayerTextDrawSetOutline(playerid, BodyguardDecorationTD[playerid][type][i], 0);
		PlayerTextDrawBackgroundColor(playerid, BodyguardDecorationTD[playerid][type][i], 0x000000FF);
		PlayerTextDrawFont(playerid, BodyguardDecorationTD[playerid][type][i], 4);
		PlayerTextDrawSetProportional(playerid, BodyguardDecorationTD[playerid][type][i], 1);
		PlayerTextDrawSetSelectable(playerid, BodyguardDecorationTD[playerid][type][i], false);
		PlayerTextDrawShow(playerid, BodyguardDecorationTD[playerid][type][i]);
	}
}

stock CreateBodyguardSkinsTD(playerid, Float:Pos[], type)
{
	for(new id; id < 2; id++)
	{
		BodyguardSkinsTextDraws[playerid][type][id] = CreatePlayerTextDraw(playerid, Pos[0] - 3.513062 * id, Pos[1] + 55.5 * type, id ? !"_" : !"LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BodyguardSkinsTextDraws[playerid][type][id], 0.48, 1.12);
		PlayerTextDrawTextSize(playerid, BodyguardSkinsTextDraws[playerid][type][id], 35.130516 + 7.026104 * id, 52.500008);
		PlayerTextDrawAlignment(playerid, BodyguardSkinsTextDraws[playerid][type][id], 1);
		PlayerTextDrawColor(playerid, BodyguardSkinsTextDraws[playerid][type][id], id ? 0xFFFFFFFF : 0x222222FF);
		PlayerTextDrawUseBox(playerid, BodyguardSkinsTextDraws[playerid][type][id], 0);
		PlayerTextDrawBoxColor(playerid, BodyguardSkinsTextDraws[playerid][type][id], 0x80808080);
		PlayerTextDrawSetShadow(playerid, BodyguardSkinsTextDraws[playerid][type][id], 2);
		PlayerTextDrawSetOutline(playerid, BodyguardSkinsTextDraws[playerid][type][id], 0);
		PlayerTextDrawBackgroundColor(playerid, BodyguardSkinsTextDraws[playerid][type][id], id ? 0x00000000 : 0x000000FF);
		PlayerTextDrawFont(playerid, BodyguardSkinsTextDraws[playerid][type][id], 4 + id);
		PlayerTextDrawSetProportional(playerid, BodyguardSkinsTextDraws[playerid][type][id], 1);
		PlayerTextDrawSetSelectable(playerid, BodyguardSkinsTextDraws[playerid][type][id], id ? true : false);

		if(!id)
			PlayerTextDrawShow(playerid, BodyguardSkinsTextDraws[playerid][type][id]);
	}
	UpdateBodyguardTextDraw(playerid, 3);
}

stock CreateBodyguardInventorySlots(playerid, Float:Position[], type)
{
	for(new id, Float:Pos[2]; id < 4; id++)
	{
		switch id do
		{
			case 1, 3: Pos[0] += 16.494232;
			case 2: Pos[0] -= 16.494232, Pos[1] += 19.8125;
		}

		BodyguardInventorySlots[playerid][type][id] = CreatePlayerTextDraw(playerid, Position[0] + Pos[0], Position[1] + ( Pos[1] + 55.5 * type ), !"LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BodyguardInventorySlots[playerid][type][id], 0.480000, 1.120000);
		PlayerTextDrawTextSize(playerid, BodyguardInventorySlots[playerid][type][id], 15.494240, 18.812504);
		PlayerTextDrawAlignment(playerid, BodyguardInventorySlots[playerid][type][id], 1);
		PlayerTextDrawColor(playerid, BodyguardInventorySlots[playerid][type][id], 0xFFFFFFFF);
		PlayerTextDrawUseBox(playerid, BodyguardInventorySlots[playerid][type][id], 0);
		PlayerTextDrawBoxColor(playerid, BodyguardInventorySlots[playerid][type][id], 0x80808080);
		PlayerTextDrawSetShadow(playerid, BodyguardInventorySlots[playerid][type][id], 2);
		PlayerTextDrawSetOutline(playerid, BodyguardInventorySlots[playerid][type][id], 0);
		PlayerTextDrawBackgroundColor(playerid, BodyguardInventorySlots[playerid][type][id], 0x333333FF);
		PlayerTextDrawFont(playerid, BodyguardInventorySlots[playerid][type][id], 5);
		PlayerTextDrawSetProportional(playerid, BodyguardInventorySlots[playerid][type][id], 1);
		PlayerTextDrawSetSelectable(playerid, BodyguardInventorySlots[playerid][type][id], true);
		PlayerTextDrawSetPreviewModel(playerid, BodyguardInventorySlots[playerid][type][id], 1649);
		PlayerTextDrawSetPreviewRot(playerid, BodyguardInventorySlots[playerid][type][id], 0.000000, 0.000000, 90.000000, 2.000000);
		PlayerTextDrawShow(playerid, BodyguardInventorySlots[playerid][type][id]);
	}
}

stock CreateBodyguardWeaponTD(playerid, Float:Pos[], type)
{
	/*Разница между клеткой и текстом = 6.609497*/

	for(new id; id < 2; id++)
	{
		BodyguardWeaponTextDraws[playerid][type][id] = CreatePlayerTextDraw(playerid, Pos[0] + 6.609497 * id, Pos[1] + ( 0.974793 * id + 55.5 * type ), id ? !"" : !"LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BodyguardWeaponTextDraws[playerid][type][id], 0.48 - 0.414424 * id, 1.12 - 0.779958 * id);
		PlayerTextDrawTextSize(playerid, BodyguardWeaponTextDraws[playerid][type][id], 13.218993 + 1266.781007 * id, 16.049988 + 1263.950012 * id);
		PlayerTextDrawAlignment(playerid, BodyguardWeaponTextDraws[playerid][type][id], 1 + id);
		PlayerTextDrawColor(playerid, BodyguardWeaponTextDraws[playerid][type][id], 0x999999FF);
		PlayerTextDrawUseBox(playerid, BodyguardWeaponTextDraws[playerid][type][id], 0);
		PlayerTextDrawBoxColor(playerid, BodyguardWeaponTextDraws[playerid][type][id], 0x80808080);
		PlayerTextDrawSetShadow(playerid, BodyguardWeaponTextDraws[playerid][type][id], 2 - 2 * id);
		PlayerTextDrawSetOutline(playerid, BodyguardWeaponTextDraws[playerid][type][id], 0);
		PlayerTextDrawBackgroundColor(playerid, BodyguardWeaponTextDraws[playerid][type][id], id ? 0x00000000 : 0x333333FF);
		PlayerTextDrawFont(playerid, BodyguardWeaponTextDraws[playerid][type][id], 5 - 3 * id);
		PlayerTextDrawSetProportional(playerid, BodyguardWeaponTextDraws[playerid][type][id], 1);
		PlayerTextDrawSetSelectable(playerid, BodyguardWeaponTextDraws[playerid][type][id], false);

		if(!id)
			PlayerTextDrawSetPreviewModel(playerid, BodyguardWeaponTextDraws[playerid][type][id], 1649),
			PlayerTextDrawSetPreviewRot(playerid, BodyguardWeaponTextDraws[playerid][type][id], 0.0, 0.0, 90.0, 2.0);

		PlayerTextDrawShow(playerid, BodyguardWeaponTextDraws[playerid][type][id]);
	}
	UpdateBodyguardTextDraw(playerid, 0);
}

stock CreateBodyguardMenuButtons(playerid, Float:Pos[], type)
{
	/*Разница между кнопкой и текстом = 2.71875*/

	for(new id; id < 2; id++)
	{
		BodyguardMenuButtons[playerid][type][id] = CreatePlayerTextDraw(playerid, Pos[0] + 10.875 * id, Pos[1] + ( 2.71875 * id + 55.5 * type ), id ? ( SettingData[playerid][sdLanguage] ? FixText("МЕНЮ") : !"MENU" ) : !"LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BodyguardMenuButtons[playerid][type][id], 0.480000 - 0.389375 * id, 1.120000 - 0.57625 * id);
		PlayerTextDrawTextSize(playerid, BodyguardMenuButtons[playerid][type][id], 21.750006 + 1258.249994 * id, 10.875003 + 1269.124997 * id);
		PlayerTextDrawAlignment(playerid, BodyguardMenuButtons[playerid][type][id], 1 + id);
		PlayerTextDrawColor(playerid, BodyguardMenuButtons[playerid][type][id], id ? 0xFFFFFFFF : InventColor[PI[playerid][pInvColors]][1]);
		PlayerTextDrawUseBox(playerid, BodyguardMenuButtons[playerid][type][id], 0);
		PlayerTextDrawBoxColor(playerid, BodyguardMenuButtons[playerid][type][id], 0x80808080);
		PlayerTextDrawSetShadow(playerid, BodyguardMenuButtons[playerid][type][id], 2 - 2 * id);
		PlayerTextDrawSetOutline(playerid, BodyguardMenuButtons[playerid][type][id], 0);
		PlayerTextDrawBackgroundColor(playerid, BodyguardMenuButtons[playerid][type][id], id ? 0x00000000 : 0x000000FF);
		PlayerTextDrawFont(playerid, BodyguardMenuButtons[playerid][type][id], 4 - 2 * id);
		PlayerTextDrawSetProportional(playerid, BodyguardMenuButtons[playerid][type][id], 1);
		PlayerTextDrawSetSelectable(playerid, BodyguardMenuButtons[playerid][type][id], id ? false : true);
		PlayerTextDrawShow(playerid, BodyguardMenuButtons[playerid][type][id]);
	}
}

stock CreateBodyguardInventoryButtons(playerid, Float:Pos[], type)
{
	/*Разница между кнопкой и текстом = 2.188629*/

	for(new id; id < 2; id++)
	{
		BodyguardInventoryButtons[playerid][type][id] = CreatePlayerTextDraw(playerid, Pos[0] + 12.945831 * id, Pos[1] + ( 2.188629 * id + 55.5 * type ), id ? ( SettingData[playerid][sdLanguage] ? FixText("ИНВЕНТАРЬ") : !"INVENTORY" ) : !"LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BodyguardInventoryButtons[playerid][type][id], 0.48 - 0.407046 * id, 1.12 - 0.755228 * id);
		PlayerTextDrawTextSize(playerid, BodyguardInventoryButtons[playerid][type][id], 25.891676 + 1254.108324 * id, 8.024994 + 1271.975006 * id);
		PlayerTextDrawAlignment(playerid, BodyguardInventoryButtons[playerid][type][id], 1 + id);
		PlayerTextDrawColor(playerid, BodyguardInventoryButtons[playerid][type][id], id ? 0xFFFFFFFF : InventColor[PI[playerid][pInvColors]][1]);
		PlayerTextDrawUseBox(playerid, BodyguardInventoryButtons[playerid][type][id], 0);
		PlayerTextDrawBoxColor(playerid, BodyguardInventoryButtons[playerid][type][id], 0x80808080);
		PlayerTextDrawSetShadow(playerid, BodyguardInventoryButtons[playerid][type][id], 2 - 2 * id);
		PlayerTextDrawSetOutline(playerid, BodyguardInventoryButtons[playerid][type][id], 0);
		PlayerTextDrawBackgroundColor(playerid, BodyguardInventoryButtons[playerid][type][id], id ? 0x00000000 : 0x000000FF);
		PlayerTextDrawFont(playerid, BodyguardInventoryButtons[playerid][type][id], 4 - 2 * id);
		PlayerTextDrawSetProportional(playerid, BodyguardInventoryButtons[playerid][type][id], 1);
		PlayerTextDrawSetSelectable(playerid, BodyguardInventoryButtons[playerid][type][id], id ? false : true);
	}
	UpdateBodyguardTextDraw(playerid, 1);
}

stock CreateBodyguardTexts(playerid, Float:Pos[], type, text)
{
	static const Float:positionCorrection[][] = { {86.271179, 29.318756}, {123.401703, 26.100006},
		{85.071594, 41.050003}, {55.670319, 63.887512}, {90.271179, 26.100006}
	};

	Pos[0] -= positionCorrection[text][0];
	Pos[1] += positionCorrection[text][1];

	switch text do
	{
		case 0:
		{
			BodyguardNameTextDraws[playerid][type] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + 55.5 * type, FixText(Bodyguard_playerData[playerid][type][bg_Name]));
			PlayerTextDrawLetterSize(playerid, BodyguardNameTextDraws[playerid][type], 0.107292, 0.643750);
			PlayerTextDrawTextSize(playerid, BodyguardNameTextDraws[playerid][type], 417.116119, 6.437501);
			PlayerTextDrawAlignment(playerid, BodyguardNameTextDraws[playerid][type], 1);
			PlayerTextDrawColor(playerid, BodyguardNameTextDraws[playerid][type], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, BodyguardNameTextDraws[playerid][type], 0);
			PlayerTextDrawBoxColor(playerid, BodyguardNameTextDraws[playerid][type], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BodyguardNameTextDraws[playerid][type], 0);
			PlayerTextDrawSetOutline(playerid, BodyguardNameTextDraws[playerid][type], 0);
			PlayerTextDrawBackgroundColor(playerid, BodyguardNameTextDraws[playerid][type], 0x00000000);
			PlayerTextDrawFont(playerid, BodyguardNameTextDraws[playerid][type], 2);
			PlayerTextDrawSetProportional(playerid, BodyguardNameTextDraws[playerid][type], 1);
			PlayerTextDrawSetSelectable(playerid, BodyguardNameTextDraws[playerid][type], false);
			PlayerTextDrawShow(playerid, BodyguardNameTextDraws[playerid][type]);
		}
		case 1:
		{
			for(new i; i < 2; i++)
			{
				BodyguardLevelTextDraws[playerid][type][i] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + ( 3.513046 * i + 55.5 * type ), i ? (str_f("%d/%d", Bodyguard_playerData[playerid][type][bg_Exp], (Bodyguard_playerData[playerid][type][bg_Level] + 1) * 4 )) : (str_f("lv. %d", Bodyguard_playerData[playerid][type][bg_Level])));
				PlayerTextDrawLetterSize(playerid, BodyguardLevelTextDraws[playerid][type][i], 0.093681, 0.562088);
				PlayerTextDrawTextSize(playerid, BodyguardLevelTextDraws[playerid][type][i], 1280.000000, 1280.000000);
				PlayerTextDrawAlignment(playerid, BodyguardLevelTextDraws[playerid][type][i], 1);
				PlayerTextDrawColor(playerid, BodyguardLevelTextDraws[playerid][type][i], i ? 0x999999FF : 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, BodyguardLevelTextDraws[playerid][type][i], 0);
				PlayerTextDrawBoxColor(playerid, BodyguardLevelTextDraws[playerid][type][i], 0x80808080);
				PlayerTextDrawSetShadow(playerid, BodyguardLevelTextDraws[playerid][type][i], 0);
				PlayerTextDrawSetOutline(playerid, BodyguardLevelTextDraws[playerid][type][i], 0);
				PlayerTextDrawBackgroundColor(playerid, BodyguardLevelTextDraws[playerid][type][i], 0x00000000);
				PlayerTextDrawFont(playerid, BodyguardLevelTextDraws[playerid][type][i], 2);
				PlayerTextDrawSetProportional(playerid, BodyguardLevelTextDraws[playerid][type][i], 1);
				PlayerTextDrawSetSelectable(playerid, BodyguardLevelTextDraws[playerid][type][i], false);
				PlayerTextDrawShow(playerid, BodyguardLevelTextDraws[playerid][type][i]);
			}
		}
		case 2:
		{
			static const bodyguardFeatureNames[][] = {"maxhp", "defence", "damage"};

			for(new i; i < 3; i++)
			{
				for(new id; id < 2; id++)
				{
					BodyguardFeatureTextDraws[playerid][type][i][id] = CreatePlayerTextDraw(playerid, Pos[0] + 45.583587 * id, ( ( Pos[1] + 55.5 * type ) - 0.206726 * id ) + 7.524994 * i, id ? (str_f("%d", BodyGuardInfo[GetBodyGuardItem(playerid, type)][i == 1 ? 2 : i == 2 ? 3 : 4] )) : (str_f("%s", bodyguardFeatureNames[i])));
					PlayerTextDrawLetterSize(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 0.107500 + 0.008269 * id, 0.537500 + 0.041346 * id);
					PlayerTextDrawTextSize(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 1280.000000, 1280.000000);
					PlayerTextDrawAlignment(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 1 + 2 * id);
					PlayerTextDrawColor(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 0xAAAAAAFF);
					PlayerTextDrawUseBox(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 0);
					PlayerTextDrawBoxColor(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 0x80808080);
					PlayerTextDrawSetShadow(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 0);
					PlayerTextDrawSetOutline(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 0);
					PlayerTextDrawBackgroundColor(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 0x00000000);
					PlayerTextDrawFont(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 2);
					PlayerTextDrawSetProportional(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], 1);
					PlayerTextDrawSetSelectable(playerid, BodyguardFeatureTextDraws[playerid][type][i][id], false);
					PlayerTextDrawShow(playerid, BodyguardFeatureTextDraws[playerid][type][i][id]);
				}
			}
		}
		case 3:
		{
			BodyguardRarityTextDraws[playerid][type] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + 55.5 * type, BodyguardRarity_Names[BodyGuardInfo[GetBodyGuardItem(playerid, type)][1] - 1]);
			PlayerTextDrawLetterSize(playerid, BodyguardRarityTextDraws[playerid][type], 0.107000, 0.535000);
			PlayerTextDrawTextSize(playerid, BodyguardRarityTextDraws[playerid][type], 1280.000000, 1280.000000);
			PlayerTextDrawAlignment(playerid, BodyguardRarityTextDraws[playerid][type], 2);
			PlayerTextDrawColor(playerid, BodyguardRarityTextDraws[playerid][type], BodyguardRarity_Colors[BodyGuardInfo[GetBodyGuardItem(playerid, type)][1] - 1]);
			PlayerTextDrawUseBox(playerid, BodyguardRarityTextDraws[playerid][type], 0);
			PlayerTextDrawBoxColor(playerid, BodyguardRarityTextDraws[playerid][type], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BodyguardRarityTextDraws[playerid][type], 0);
			PlayerTextDrawSetOutline(playerid, BodyguardRarityTextDraws[playerid][type], 0);
			PlayerTextDrawBackgroundColor(playerid, BodyguardRarityTextDraws[playerid][type], 0x00000000);
			PlayerTextDrawFont(playerid, BodyguardRarityTextDraws[playerid][type], 2);
			PlayerTextDrawSetProportional(playerid, BodyguardRarityTextDraws[playerid][type], 1);
			PlayerTextDrawSetSelectable(playerid, BodyguardRarityTextDraws[playerid][type], false);
			PlayerTextDrawShow(playerid, BodyguardRarityTextDraws[playerid][type]);
		}
		case 4:
		{
			static const bodyguardSpawnedColor[] = {0xFF0000FF, 0xFFC300FF, 0xAAAAAAFF};

			for(new i; i < 3; i++)
			{
				BodyguardSpawnedTextDraws[playerid][type][i] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + ( 3.513046 * i + 55.5 * type ), !"");
				PlayerTextDrawLetterSize(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 0.093681, 0.562088);
				PlayerTextDrawTextSize(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 1280.000000, 1280.000000);
				PlayerTextDrawAlignment(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 3);
				PlayerTextDrawColor(playerid, BodyguardSpawnedTextDraws[playerid][type][i], bodyguardSpawnedColor[i]);
				PlayerTextDrawUseBox(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 0);
				PlayerTextDrawBoxColor(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 0x80808080);
				PlayerTextDrawSetShadow(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 0);
				PlayerTextDrawSetOutline(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 0);
				PlayerTextDrawBackgroundColor(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 0x00000000);
				PlayerTextDrawFont(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 2);
				PlayerTextDrawSetProportional(playerid, BodyguardSpawnedTextDraws[playerid][type][i], 1);
				PlayerTextDrawSetSelectable(playerid, BodyguardSpawnedTextDraws[playerid][type][i], false);
			}
			UpdateBodyguardTextDraw(playerid, 2);
		}
	}
}

stock UpdateBodyguardTextDraw(playerid, textdrawId)
{
	switch textdrawId do
	{
		case 0:
		{
			for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
			{
				PlayerTextDrawSetSelectable(playerid, BodyguardWeaponTextDraws[playerid][i][0], Bodyguard_playerData[playerid][i][bg_Spawn] ? true : false);
				PlayerTextDrawColor(playerid, BodyguardWeaponTextDraws[playerid][i][0], Bodyguard_playerData[playerid][i][bg_Spawn] ? 0xFFFFFFFF : 0x999999FF);

				PlayerTextDrawSetString(playerid, BodyguardWeaponTextDraws[playerid][i][1], SettingData[playerid][sdLanguage] ? FixText("ОРУЖИЕ") : "WEAPON");

				for(new id; id < 2; id++)
					PlayerTextDrawHide(playerid, BodyguardWeaponTextDraws[playerid][i][id]),
					PlayerTextDrawShow(playerid, BodyguardWeaponTextDraws[playerid][i][id]);
			}
		}
		case 1:
		{
			for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
			{
				for(new id; id < 2; id++)
				{
					if(!Bodyguard_playerData[playerid][i][bg_Spawn])
						PlayerTextDrawHide(playerid, BodyguardInventoryButtons[playerid][i][id]);
					else
						PlayerTextDrawShow(playerid, BodyguardInventoryButtons[playerid][i][id]);
				}
			}
		}
		case 2:
		{
			for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
			{
				for(new id; id < 3; id++)
				{
					if(Bodyguard_playerData[playerid][i][bg_Spawn])
					{
						switch id do
						{
							case 0:
								PlayerTextDrawSetString(playerid, BodyguardSpawnedTextDraws[playerid][i][id], (str_f("hp. %0.1f", Bodyguard_playerData[playerid][i][bg_Health])));
						
							case 1:
								PlayerTextDrawSetString(playerid, BodyguardSpawnedTextDraws[playerid][i][id], (str_f("%0.1f", float(Bodyguard_playerData[playerid][i][bg_Satiety]))));

							case 2:
								PlayerTextDrawSetString(playerid, BodyguardSpawnedTextDraws[playerid][i][id], (str_f("%0.1f", Bodyguard_playerData[playerid][i][bg_Armour])));
						}

						PlayerTextDrawShow(playerid, BodyguardSpawnedTextDraws[playerid][i][id]);
					}
					else 
						PlayerTextDrawHide(playerid, BodyguardSpawnedTextDraws[playerid][i][id]);
				}
			}
		}
		case 3:
		{
			for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
			{
				for(new id; id < 2; id++)
				{
					if(id)
						PlayerTextDrawSetPreviewModel(playerid, BodyguardSkinsTextDraws[playerid][i][id], ItemsInfo[Bodyguard_playerData[playerid][i][bg_ItemId]][itemModel]),
						PlayerTextDrawSetPreviewRot(playerid, BodyguardSkinsTextDraws[playerid][i][id], 0.0, 0.0, 0.0, 1.0);
					else
						PlayerTextDrawColor(playerid, BodyguardSkinsTextDraws[playerid][i][id], (BodyGuardInfo[GetBodyGuardItem(playerid, i)][1] != 2) ? ItemsInfo[Bodyguard_playerData[playerid][i][bg_ItemId]][itemColor] : 0x386235FF),
						PlayerTextDrawHide(playerid, BodyguardSkinsTextDraws[playerid][i][id]);
						
					PlayerTextDrawShow(playerid, BodyguardSkinsTextDraws[playerid][i][id]);
				}
			}
		}
	}
}

stock CloseBodyguardTD(playerid)
{
    if(!bodyguardTDOpen{playerid})
		return false;

	for(new i; i < 4; i++)
	{
		for(new td; td < 12; td++)
			DestroyPlayerTD(playerid, BodyguardInventoryCells[playerid][i][td]);

		DestroyPlayerTD(playerid, BodyguardNameTextDraws[playerid][i]);
		DestroyPlayerTD(playerid, BodyguardRarityTextDraws[playerid][i]);

		for(new id; id < 4; id++)
		{
			if(id < 3)
			{
				DestroyPlayerTD(playerid, BodyguardDecorationTD[playerid][i][id]);
				DestroyPlayerTD(playerid, BodyguardSpawnedTextDraws[playerid][i][id]);

				for(new td; td < 2; td++)
					DestroyPlayerTD(playerid, BodyguardFeatureTextDraws[playerid][i][id][td]);
			}
			if(id < 2)
				DestroyPlayerTD(playerid, BodyguardMenuButtons[playerid][i][id]),
				DestroyPlayerTD(playerid, BodyguardInventoryButtons[playerid][i][id]),
				DestroyPlayerTD(playerid, BodyguardWeaponTextDraws[playerid][i][id]),
				DestroyPlayerTD(playerid, BodyguardSkinsTextDraws[playerid][i][id]),
				DestroyPlayerTD(playerid, BodyguardLevelTextDraws[playerid][i][id]);

			DestroyPlayerTD(playerid, BodyguardInventorySlots[playerid][i][id]);
		}
	}

	return bodyguardTDOpen{playerid} = false;
}

stock CreateBodyguardBackGround(playerid, Float:Pos[], type)
{
	BodyguardBackGround[playerid][type] = CreatePlayerTextDraw(playerid, Pos[0], Pos[1] + 55.5 * type, !"LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, BodyguardBackGround[playerid][type], 0.480000, 1.120000);
	PlayerTextDrawTextSize(playerid, BodyguardBackGround[playerid][type], 120.101715, 52.500008);
	PlayerTextDrawAlignment(playerid, BodyguardBackGround[playerid][type], 1);
	PlayerTextDrawColor(playerid, BodyguardBackGround[playerid][type], 0x11111190);
	PlayerTextDrawUseBox(playerid, BodyguardBackGround[playerid][type], 0);
	PlayerTextDrawBoxColor(playerid, BodyguardBackGround[playerid][type], 0x80808080);
	PlayerTextDrawSetShadow(playerid, BodyguardBackGround[playerid][type], 2);
	PlayerTextDrawSetOutline(playerid, BodyguardBackGround[playerid][type], 0);
	PlayerTextDrawBackgroundColor(playerid, BodyguardBackGround[playerid][type], 0x000000FF);
	PlayerTextDrawFont(playerid, BodyguardBackGround[playerid][type], 4);
	PlayerTextDrawSetProportional(playerid, BodyguardBackGround[playerid][type], 1);
	PlayerTextDrawSetSelectable(playerid, BodyguardBackGround[playerid][type], false);
	PlayerTextDrawShow(playerid, BodyguardBackGround[playerid][type]);
}

stock CreateBodyguardInventoryCells(playerid, Float:Pos[], type)
{
	for(new i, td; i < 2; i++)
	{
		for(new id; id < 6; id++)
		{
			td = id + i * 6;

			new item = 0;

			BodyguardInventoryCells[playerid][type][td] = CreatePlayerTextDraw(playerid, Pos[0] + 19.266968 * id, Pos[1] + ( 25.0 * i + 55.5 * (type == 3 ? 1 : type) ), !"LD_SPAC:white");
			PlayerTextDrawLetterSize(playerid, BodyguardInventoryCells[playerid][type][td], 0.480000, 1.120000);
			PlayerTextDrawTextSize(playerid, BodyguardInventoryCells[playerid][type][td], 18.266953, 24.000004);
			PlayerTextDrawAlignment(playerid, BodyguardInventoryCells[playerid][type][td], 1);
			PlayerTextDrawColor(playerid, BodyguardInventoryCells[playerid][type][td], 0xFFFFFFFF);
			PlayerTextDrawUseBox(playerid, BodyguardInventoryCells[playerid][type][td], 0);
			PlayerTextDrawBoxColor(playerid, BodyguardInventoryCells[playerid][type][td], 0x80808080);
			PlayerTextDrawSetShadow(playerid, BodyguardInventoryCells[playerid][type][td], 2);
			PlayerTextDrawSetOutline(playerid, BodyguardInventoryCells[playerid][type][td], 0);
			PlayerTextDrawBackgroundColor(playerid, BodyguardInventoryCells[playerid][type][td], 0x333333FF);
			PlayerTextDrawFont(playerid, BodyguardInventoryCells[playerid][type][td], 5);
			PlayerTextDrawSetProportional(playerid, BodyguardInventoryCells[playerid][type][td], 1);
			PlayerTextDrawSetSelectable(playerid, BodyguardInventoryCells[playerid][type][td], true);
			PlayerTextDrawSetPreviewModel(playerid, BodyguardInventoryCells[playerid][type][td], ItemsInfo[item][itemModel]);
			PlayerTextDrawSetPreviewRot(playerid, BodyguardInventoryCells[playerid][type][td], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][0], ItemsInfo[item][itemRotation][0]);

			PlayerTextDrawShow(playerid, BodyguardInventoryCells[playerid][type][td]);
		}
	}
}

stock BodyguardCreate(playerid, gId)
{
	new Float:X, Float:Y, Float:Z, Float:A, npcid = Iter_Free(CustomNPC);
	
	GetPlayerPos(playerid, X, Y, Z), GetPlayerFacingAngle(playerid, A);
	GetXYInFrontOfPoint(X, Y, A, 4.0);

	Iter_Add(CustomNPC, npcid);

	Custom_npcOptions[npcid][data_Float][5] = float(BodyGuardInfo[GetBodyGuardItem(playerid, gId)][4]);
	Custom_npcOptions[npcid][data_Float][6] = 1000.0;

	createPed(npcid, playerid, ItemsInfo[Bodyguard_playerData[playerid][gId][bg_ItemId]][itemModel], X, Y, Z, A, Bodyguard_playerData[playerid][gId][bg_Health], Bodyguard_playerData[playerid][gId][bg_Armour], Bodyguard_playerData[playerid][gId][bg_WeaponID], Bodyguard_playerData[playerid][gId][bg_WeaponRounds], 0xFFFFFF00, Bodyguard_playerData[playerid][gId][bg_Name], BodyguardRarity_Colors[BodyGuardInfo[GetBodyGuardItem(playerid, gId)][1] - 1], (str_f("Охранник %s", PN(playerid))));

	Bodyguard_npcData[playerid][gId][bgnpc_NPC] = npcid;
	Bodyguard_npcData[playerid][gId][bgnpc_SlotId] = gId;

	Custom_npcOptions[npcid][data_AttachedID] = playerid;
	Custom_npcOptions[npcid][data_AttackedID] = -1;
	pTemp[playerid][tCreateNPC][npcid] = true;

	if(bodyguardTDOpen{playerid})
		for(new i; i < 3; i++)
			UpdateBodyguardTextDraw(playerid, i);

	return setTalkPed(npcid, Bodyguard_phrasesData[playerid][gId][5], 0xFFFFFFFF, 15.0, 5000);
}

stock BodyguardDelete(playerid, slot)
{
	new npcid = Custom_npcOptions[Bodyguard_npcData[playerid][slot][bgnpc_NPC]][data_ID];
	deletePed(npcid);

	Bodyguard_npcData[playerid][slot][bgnpc_NPC] = INVALID_PLAYER_ID;
	Bodyguard_npcData[playerid][slot][bgnpc_SlotId] = INVALID_DATA_ID;

	if(bodyguardTDOpen{playerid})
		for(new i; i < 3; i++)
			UpdateBodyguardTextDraw(playerid, i);

	return Iter_Remove(CustomNPC, npcid);
}

stock LoadPlayerBodyguards(playerid)
{
	new Cache:result = mysql_query(mysql, (str_f("SELECT * FROM bodyguard WHERE Owner = '%s'", PlayerName[playerid])));

	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_name_int(i, !"ID", Bodyguard_playerData[playerid][i][bg_Id]);
		cache_get_value_name_int(i, !"ItemId", Bodyguard_playerData[playerid][i][bg_ItemId]);
		cache_get_value_name_int(i, !"Level", Bodyguard_playerData[playerid][i][bg_Level]);
		cache_get_value_name_int(i, !"Exp", Bodyguard_playerData[playerid][i][bg_Exp]);
		cache_get_value_name(i, !"Owner", Bodyguard_playerData[playerid][i][bg_Owner]);
		cache_get_value_name(i, !"Name", Bodyguard_playerData[playerid][i][bg_Name]);
		cache_get_value_name_float(i, !"Health", Bodyguard_playerData[playerid][i][bg_Health]);
		cache_get_value_name_float(i, !"Armour", Bodyguard_playerData[playerid][i][bg_Armour]);
		cache_get_value_name_int(i, !"Satiety", Bodyguard_playerData[playerid][i][bg_Satiety]);
		cache_get_value_name_int(i, !"WeaponID", Bodyguard_playerData[playerid][i][bg_WeaponID]);
		cache_get_value_name_int(i, !"WeaponRounds", Bodyguard_playerData[playerid][i][bg_WeaponRounds]);
		cache_get_value_name(i, !"Phrases", global_str), String_UnPackMassive(global_str, Bodyguard_phrasesData[playerid][i], "s[192]", "|");
	}

	return cache_delete(result);
}

public: @LoadPlayerBodyguards(playerid)
{
	if(!(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1)) 
		ShowBodyguardTD(playerid, 462.401703, 101.500000);

	return LoadPlayerBodyguards(playerid);
}

stock updatePedStatsDriver(npcid, vehicleid, seat, Float:hp, Float:arm, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 82,
		PR_UINT16, npcid,
		PR_UINT16, vehicleid,
		PR_UINT16, seat,
		PR_FLOAT, hp,
		PR_FLOAT, arm);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock updatePedStatsOnfoot(npcid, Float:hp, Float:arm, Float:max_hp, Float:max_arm, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 52,
		PR_UINT16, npcid,
		PR_BOOL, false, 
		PR_FLOAT, -0.7,
		PR_FLOAT, hp, 
		PR_FLOAT, max_hp, 
		PR_FLOAT, arm, 
		PR_FLOAT, max_arm);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock enterVehiclePed(npcid, vehicleid, seat, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();
	
	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 81, 
		PR_UINT16, npcid,
		PR_UINT16, vehicleid,
		PR_UINT16, seat,
		PR_UINT32, 1000);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs), Custom_npcOptions[npcid][data_EnteredVehicle] = true, Custom_npcOptions[npcid][data_SeatID][0] = vehicleid, Custom_npcOptions[npcid][data_SeatID][1] = seat;
}

stock exitVehiclePed(npcid, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();
	
	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 84, 
		PR_UINT16, npcid);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs), Custom_npcOptions[npcid][data_EnteredVehicle] = false, Custom_npcOptions[npcid][data_SeatID][0] = Custom_npcOptions[npcid][data_SeatID][1] = 0;
}

stock teleportPedtoCoords(npcid, Float:X, Float:Y, Float:Z, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 66, 
		PR_UINT16, npcid, 
		PR_FLOAT, X,
		PR_FLOAT, Y,
		PR_FLOAT, Z);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock agressivePedtoPlayer(npcid, playerid, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 80, 
		PR_UINT16, npcid, 
		PR_UINT16, playerid,
		PR_UINT32, 0xffffffFF);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock movePedtoCoords(npcid, Float:X, Float:Y, Float:Z, styletype = 7, updatetime = 10000, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 67, 
		PR_UINT16, npcid,
		PR_FLOAT, X, 
		PR_FLOAT, Y, 
		PR_FLOAT, Z,
		PR_UINT16, styletype, 
		PR_UINT32, updatetime);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock setAnimPed(npcid, animLib[], animName[], Float:fDelta, loop, lockx, locky, freeze, time, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221,
		PR_UINT16, 69,
		PR_UINT16, npcid,
		PR_STRING32, animLib,
		PR_STRING32, animName,
		PR_FLOAT, fDelta,
		PR_BOOL, loop,
		PR_BOOL, lockx,
		PR_BOOL, locky,
		PR_BOOL, freeze,
		PR_INT32, time);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock setTalkPed(npcid, text[], color, Float:drawdistance = 15.0, expiretime = 5000, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221,
		PR_UINT16, 85,
		PR_UINT16, npcid,
		PR_STRING32, text, 
		PR_UINT32, color,
		PR_FLOAT, drawdistance, 
		PR_UINT32, expiretime);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock shootAtPlayer(npcid, playerid, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 72, 
		PR_UINT16, npcid, 
		PR_UINT16, playerid);

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock removePedAccessory(forplayerid = INVALID_PLAYER_ID, npcid, index)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 87, 
		PR_UINT16, npcid,
		PR_UINT32, index), Custom_npcOptions[npcid][data_UsedSlotAttach][index] = false;

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock createPedAccessory(forplayerid = INVALID_PLAYER_ID, npcid, index, boneid, modelid, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 0.0, Float:fScaleY = 0.0, Float:fScaleZ = 0.0, materialcolor1 = 0, materialcolor2 = 0)
{
	if(Custom_npcOptions[npcid][data_UsedSlotAttach][index])
		removePedAccessory(forplayerid, npcid, index);

	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 86, 
		PR_UINT16, npcid,
		PR_UINT16, index,
		PR_UINT32, modelid,
		PR_UINT16, boneid,
		PR_FLOAT, fOffsetX,
		PR_FLOAT, fOffsetY,
		PR_FLOAT, fOffsetZ,
		PR_FLOAT, fRotX,
		PR_FLOAT, fRotY,
		PR_FLOAT, fRotZ,
		PR_FLOAT, fScaleX,
		PR_FLOAT, fScaleY,
		PR_FLOAT, fScaleZ,
		PR_UINT32, materialcolor1,
		PR_UINT32, materialcolor2), Custom_npcOptions[npcid][data_UsedSlotAttach][index] = true;

	if(forplayerid == INVALID_PLAYER_ID)
		SendStream(bs, npcid);
		
	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

public: updatePed(npcid, playerid)
{
	if(Custom_npcOptions[npcid][data_EnteredVehicle]) updatePedStatsDriver(npcid, Custom_npcOptions[npcid][data_SeatID][0], Custom_npcOptions[npcid][data_SeatID][1], Custom_npcOptions[npcid][data_Float][3], Custom_npcOptions[npcid][data_Float][4], playerid);
	else updatePedStatsOnfoot(npcid, Custom_npcOptions[npcid][data_Float][3], Custom_npcOptions[npcid][data_Float][4], Custom_npcOptions[npcid][data_Float][5], Custom_npcOptions[npcid][data_Float][6], playerid);
}

stock createPed(npcid, forplayerid = INVALID_PLAYER_ID, skinid, Float:X, Float:Y, Float:Z, Float:A, Float:Health, Float:Armour, Weapon, WeaponAmmo, color_text_1, text_1[], color_text_2, text_2[])
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
		PR_UINT8, 221, 
		PR_UINT16, 50,
		PR_UINT16, npcid,
		PR_UINT16, skinid,
		PR_FLOAT, X,
		PR_FLOAT, Y,
		PR_FLOAT, Z,
		PR_FLOAT, A,
		PR_BOOL, true,
		PR_FLOAT, Health,
		PR_FLOAT, Armour,
		PR_UINT16, Weapon,
		PR_UINT8, WeaponAmmo,
		PR_UINT32, color_text_1,
		PR_STRING32, text_1,
		PR_UINT8, 1,
		PR_UINT32, color_text_2,
		PR_STRING32, text_2);

	Custom_npcOptions[npcid][data_ID] = npcid,
	Custom_npcOptions[npcid][data_SkinID] = skinid,
	Custom_npcOptions[npcid][data_Float][0] = X,
	Custom_npcOptions[npcid][data_Float][1] = Y,
	Custom_npcOptions[npcid][data_Float][2] = Z,
	Custom_npcOptions[npcid][data_Float][3] = Health,
	Custom_npcOptions[npcid][data_Float][4] = Armour,
	Custom_npcOptions[npcid][data_Weapons][0] = Weapon,
	Custom_npcOptions[npcid][data_Weapons][1] = WeaponAmmo,
	Custom_npcOptions[npcid][data_ColorTexts][0] = color_text_1,
	SetString(Custom_npcOptions[npcid][data_LabelOne], text_1);

	if(strlen(text_2))
		Custom_npcOptions[npcid][data_ColorTexts][1] = color_text_2,
		SetString(Custom_npcOptions[npcid][data_LabelTwo], text_2);

	if(forplayerid != INVALID_PLAYER_ID)
		Custom_npcOptions[npcid][data_Timer] = SetTimerEx("updatePed", 500, true, "ii", npcid, forplayerid), PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock deletePed(npcid, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 221, 
		PR_UINT16, 51, 
		PR_UINT16, npcid);

	if(forplayerid != INVALID_PLAYER_ID)
		PR_SendPacketEx(bs, forplayerid);

	else 
		SendStream(bs, npcid, true);

	KillTimer(Custom_npcOptions[npcid][data_Timer]);

	return BS_Delete(bs);
}

stock GetBodyGuardItem(playerid, slot)
{
	for(new i; i < sizeof(BodyGuardInfo); i++)
	{
		if(BodyGuardInfo[i][0] == Bodyguard_playerData[playerid][slot][bg_ItemId])
			return i;
	}
	return -1;
}

stock Show_bodyguardDialog(playerid, dialog_type, slot)
{
	global_str = "";

	switch dialog_type do
	{
		case 1:
		{
			for(new i; i < 16; i++) 
				strcat(global_str, (str_f("{ffffff}- %s{73b461}\t{bfbbba}[ %s ]\n", Bodyguard_phrasesData[playerid][slot][i], Bodyguard_phrasesCondition[i])));

			return SPD(playerid, 25753, DIALOG_STYLE_TABLIST, !"Изменить реплики спутника", global_str, !"Выбрать", !"Отмена");
		}

		case 2:
		{
			for(new i, animCategories[][] = {"Общение", "Действия", "Жесты", "Стойки", "Реакции", "Отдых", "Развлечения", "Самочувствие"}; i < 8; i++)
				strcat(global_str, (str_f("{FFFFFF}%s	{%s}[в избранном %i]\n", animCategories[i], PI[playerid][pBodyguardFavoriteAnimCount][i] ? "FFE986" : "AA9B57", PI[playerid][pBodyguardFavoriteAnimCount][i])));

			strcat(global_str, "{AA9B57}- Посмотреть все анимации");

			return SPD(playerid, 25781, DIALOG_STYLE_TABLIST, !"Выберите категорию", global_str, !"Выбрать", !"Назад");
		}
	}
	return true;
}

stock StartBattles(type)
{
	foreach(Player, i)
	{
	    if(IsAtGang(i) or IsAtMafia(i))
	    {
			for(new j; j < sizeof(gangs_Id); j ++)
			{
				if(PI[i][pMember] == gangs_Id[j]) 
					if(GetPlayerGangZone(i) == 66 or GetPlayerGangZone(i) == 291) 
						OrgBattlesCountMember[gangs_Id[j]]++;
			}

	        ShowBattlesTD(i);
	        SCMF(i, COLOR_OLDRED, "[Битва за %s] Внимание! Началась битва за %s! Отправляйтесь на территорию %s.", type == 1 ? "притон" : "нефтевышки", type == 1 ? "притон" : "нефтевышки", type == 1 ? "притона" : "наземных нефтевышек");
	        SCMF(i, COLOR_OLDRED, "[Битва за %s] У вас есть 5 минут, чтобы добраться до %s.", type == 1 ? "притон" : "нефтевышки", type == 1 ? "притона" : "наземных нефтевышек");
			OrgBattlesTimer[0] = 1;
			OrgBattlesTimer[1] = OrgBattlesTimer[2] = 0;
			UpdateBattlesTD(i, true);
	        GangZoneFlashForAll(GangZone[type == 1 ? 66 : 291], 0xFF0000FF);
	        OrgBattlesState = type;
	        OrgBattlesTimeKick = 300;
	        CheckNeactiveOrgBattles = true;
		}
	}
	return 1;
}

stock UpdateBattlesText(type, bool:create = false)
{
	f(global_str, sizeof(global_str), "[ Битва за %s ]\n{ffffff}Контролируется %s: {FFFFFF}%s\n\n{CCCCCC}Битва за %s проходит каждую %s", type == 1 ? "притон" : "наземные нефтевышки", type == 1 ? "бандой" : "мафией", GangZoneInfo[type == 1 ? 66 : 291][gangOwnerId] ? (str_f("%s", OrgInfo[GangZoneInfo[type == 1 ? 66 : 291][gangOwnerId]][oName])) : "Никакой", type == 1 ? "притон" : "наземные нефтевышки", type == 1 ? "субботу в 18:20" : "пятницу в 19:10");
	
	if(create && type == 1)
		Create3DTextLabel(global_str, 0xFFFFFFFFFF6347FF, 2526.281982, -1475.125854, 26.248100, 15.000000, 0, 0);

	else Update3DTextLabelText(OrgBattlesLabel[type - 1], 0xFFFFFFFFFF6347FF, global_str);

	return true;
}

stock StopBattles()
{
	CheckBattlesWinner();

	GangZoneInfo[OrgBattlesState == 1 ? 66 : 291][gangOwnerId] = OrgBattlesWinner;
	UpdateBattlesText(OrgBattlesState);
	SaveGangZone(OrgBattlesState == 1 ? 66 : 291);

    GangZoneStopFlashForAll(GangZone[OrgBattlesState == 1 ? 66 : 291]);
    GangZoneHideForAll(GangZone[OrgBattlesState == 1 ? 66 : 291]);
	GangZoneShowForAll(GangZone[OrgBattlesState == 1 ? 66 : 291], TeamColors[OrgBattlesWinner][0]);

	for(new i; i < sizeof(gangs_Id); i++)
		OrgBattlesCountMember[gangs_Id[i]] = OrgBattlesGangKicked[gangs_Id[i]] = false;

	foreach(Player, i)
	{
		HideBattlesTD(i);

		if(OrgBattlesWinner > 1)
		{
			SCMF(i, COLOR_YELLOW, "[A] Банда %s выйграла битву за %s.", OrgInfo[OrgBattlesWinner][oName], OrgBattlesState == 1 ? "притон" : "нефтевышки");

			if(IsAtGang(i) or IsAtMafia(i))
		        SCMF(i, COLOR_OLDRED, "[Битва за %s] Внимание! Битва за %s окончена. Победила банда %s.", OrgBattlesState == 1 ? "притон" : "нефтевышки", OrgBattlesState == 1 ? "притон" : "нефтевышки", OrgInfo[OrgBattlesWinner][oName]);

			//SendTeamMessage(OrgBattlesWinner, COLOR_OLDRED, "[Битва за притон] Ваша банда победила в битве за притон и будет получать X3 получение часов в /mbonus каждый PayDay.");
		}
	}

	return OrgBattlesState = false;
}

stock GiveBattlesReward()
{
	//static PritonItems[] = {2714, 644, 2879, 2880, 2762, 2765, 2754};

	//if(PritonWinner > 1)
	//{
	//	new item[MAX_PLAYERS];
//
	//	foreach(Player, i)
	//	{
	//	    if(PI[i][pMember] == PritonWinner)
	//     	{
	//     	   // item[i] = PritonItems[random(sizeof(PritonItems))];
	//	    	//AddItem(i, item[i]);
	//	    	//f(global_str, sizeof(global_str), "[Битва за притон] Игрок %s[%d] получил предмет %s за участие в битве!", PN(i), i, ItemsInfo[item[i]][ItemName2]);
	//			//SendTeamMessage(PritonWinner, COLOR_OLDRED, global_str);
	//		}
	//	 }
	// }
}

public: UnloadKillsBattles()
{
	//static const PTColors[][] =
	//	{"FFFFFF", "0049FF", "0049FF", "FFFFFF", "004eff", "FF7E7E", "CCFF00", "996633", "FF7E7E", "FF6633", "FF8000", "009327", "D1DB1C", "cc00cc", "00FFE2", "6666FF", "336699", "960202", "993366", "BA541D", "996633", "298CB7", "FF7E7E", "0049FF", "FF8000", "7F6464", "FF8000", "996633", "996633", "336699"};
//
	//PritonKills[11] = PritonKills[12] = PritonKills[13] = PritonKills[14] = PritonKills[15] = PritonKills[25] = 0;
//
	//f(global_str, sizeof(global_str), "[ Притон ]\n{ffffff}Контролируется бандой: {A87878}%s\n{CCCCCC}Бонусы за владение притоном действуют до начала следующей битвы\n\n{CCCCCC}Битва за притон проходит каждый день в 18:20", GZInfo[66][gzFracID] > 0 ? (str_f("{%s}%s", PTColors[GZInfo[66][gzFracID]], OrgInfo[GZInfo[66][gzFracID]][oName])) : "{ffffff}Никакой");
	//Update3DTextLabelText(PritonLabel, 0xFFFFFFFFFF6347FF, global_str);
}
stock CheckBattlesWinner()
{
	for(new i; i < sizeof(gangs_Id); i ++)
		if(OrgBattlesKills[gangs_Id[i]] >= OrgBattlesKills[11] && OrgBattlesKills[12] && OrgBattlesKills[11] > OrgBattlesKills[13] && OrgBattlesKills[11] > OrgBattlesKills[14] && OrgBattlesKills[11] > OrgBattlesKills[15] && OrgBattlesKills[11] > OrgBattlesKills[25])
	    	OrgBattlesWinner = gangs_Id[i];

	return SCMF(0, -1, "winnerID => %i", OrgBattlesWinner);
}

stock UpdateBattlesTD(playerid, bool:start = false)
{
	if(!OrgBattlesState) return HideBattlesTD(playerid);
	if(!OrgBattlesTDOpen{playerid}) return ShowBattlesTD(playerid);

	static const Textdraw_Data[][] = { {19, 35, 11, 16}, {22, 36, 12, 17}, {25, 37, 13, 18}, {28, 38, 14, 19}, {31, 39, 15, 30}, {34, 40, 25, -1} };

	if(!start)
	{
		for(new i; i < sizeof(Textdraw_Data); i++)
		{
			if(OrgBattlesState == 2 && i == 5) continue;

			PlayerTextDrawSetString(playerid, OrgBattlesTD[playerid][Textdraw_Data[i][0]], IntToStr(OrgBattlesCountMember[Textdraw_Data[i][OrgBattlesState + 1]]));
	        PlayerTextDrawSetString(playerid, OrgBattlesTD[playerid][Textdraw_Data[i][1]], OrgBattlesGangKicked[Textdraw_Data[i][OrgBattlesState + 1]] ? "X" : Textdraw_Data[i][OrgBattlesState + 1] == -1 ? "NONE" : (str_f("%d", OrgBattlesKills[Textdraw_Data[i][OrgBattlesState + 1]])));

	        if(Textdraw_Data[i][OrgBattlesState] != -1 && OrgBattlesGangKicked[Textdraw_Data[i][OrgBattlesState + 1]])
	        {
				PlayerTextDrawColor(playerid, OrgBattlesTD[playerid][Textdraw_Data[i][OrgBattlesState + 1]], COLOR_OLDRED);
				PlayerTextDrawHide(playerid, OrgBattlesTD[playerid][Textdraw_Data[i][OrgBattlesState + 1]]),
				PlayerTextDrawShow(playerid, OrgBattlesTD[playerid][Textdraw_Data[i][OrgBattlesState + 1]]);
	        }
		}
	}

	return PlayerTextDrawSetString(playerid, OrgBattlesTD[playerid][16], (str_f("BATTLE_FOR_%s~n~%d:%d:%d", OrgBattlesState == 1 ? "DRUGDEN" : "OILRIGS", OrgBattlesTimer[0], OrgBattlesTimer[1], OrgBattlesTimer[2])));
}

stock ShowBattlesTD(playerid)
{
	if(OrgBattlesTDOpen{playerid}) return false;

	#include textdraws/orgbattles

    for(new i; i < 41; i++)
		ShowPlayerTD(playerid, OrgBattlesTD[playerid][i]);

	return OrgBattlesTDOpen{playerid} = true;
}

stock HideBattlesTD(playerid)
{
    if(!OrgBattlesTDOpen{playerid}) return false;

	for(new i; i < 41; i++) 
		PlayerTextDrawHide(playerid, OrgBattlesTD[playerid][i]);

	return OrgBattlesTDOpen{playerid} = false;
}

public: KickNeactiveGang()
{
	for(new i; i < 10; i ++)
	{
		for(new j; j < sizeof(gangs_Id); j ++)
			if(!OrgBattlesCountMember[gangs_Id[j]] && !OrgBattlesGangKicked[gangs_Id[j]])
		    	OrgBattlesGangKicked[gangs_Id[j]] = true, SendTeamMessage(gangs_Id[j], COLOR_OLDRED, "[Битва за притон] Ваша банда была исключена за отсутствие на зоне притоне [5 минут с начала битвы]");
	}

	foreach(Player, i)
	    if(IsPlayerConnected(i))
		    if(IsAtGang(i) or IsAtMafia(i))
			    if(OrgBattlesGangKicked[PI[i][pMember]])
			        HideBattlesTD(i);

	CheckNeactiveOrgBattles = false;
}

CMD:sharpening(playerid, params[])
{
    if(sscanf(params,"ddd", params[0], params[1], params[2])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /sharpening [id игрока] [slot] [amount]");
    if(params[0] == INVALID_PLAYER_ID || !Inventory[params[0]][0][params[1]] || params[1] > PI[playerid][pInvCell]-1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /sharpening [id игрока] [slot]");
    if(params[2] < 0 || params[2] > (IsOsnovatel(playerid) ? 13 : 12)) return false;
	Inventory[params[0]][4][params[1]] = params[2];
    SaveInventory(playerid);
    SAMF(COLOR_GREEN, "[Информация]{FFFFFF} Администратор %s[%i] выдал заточку игроку %s[%i] на предмет %s [+%i]", PN(playerid), playerid, PN(params[0]), params[0], ItemsInfo[Inventory[params[0]][0][params[1]]][itemName], params[2]);
    if(InventoryOpen{playerid}) InventSlotUpdate(params[0], GetInvID(playerid, params[1], 1), params[1]);
	return true;
}

CMD:setcolor(playerid, params[])
{
    if(sscanf(params,"ddd", params[0], params[1], params[2])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /setcolor [id игрока] [slot] [color]");
    if(params[0] == INVALID_PLAYER_ID || !Inventory[params[0]][0][params[1]] || params[1] > PI[playerid][pInvCell]-1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /setcolor [id игрока] [slot]");
    if(params[2] < 0) return false;
	Inventory[params[0]][2][params[1]] = params[2];
    SaveInventory(playerid);
    SAMF(COLOR_GREEN, "[Информация]{FFFFFF} Администратор %s[%i] перекрасил акссесуар игроку %s[%i] на предмет %s [Цвет: %s]", PN(playerid), playerid, PN(params[0]), params[0], ItemsInfo[Inventory[params[0]][0][params[1]]][itemName], IsAAks(Inventory[params[0]][0][params[1]]) ? (str_f("%s", AksMassive[params[2]][AksColorName])) : "customTuning_color");
    if(InventoryOpen{playerid}) InventSlotUpdate(params[0], GetInvID(playerid, params[1], 1), params[1]);
	return true;
}

CMD:mending(playerid, params[])
{
    if(sscanf(params,"ddd", params[0], params[1], params[2])) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /mending [id игрока] [slot] [amount]");
    if(params[0] == INVALID_PLAYER_ID || !Inventory[params[0]][0][params[1]] || params[1] > PI[playerid][pInvCell]-1) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Используй: /mending [id игрока] [slot] [amount]");
    if(params[2] < 0 || params[2] > 100) return false;
	Inventory[params[0]][5][params[1]] = params[2];
    SaveInventory(playerid);
    SAMF(COLOR_GREEN, "[Информация]{FFFFFF} Администратор %s[%i] выдал прочность игроку %s[%i] на предмет %s [%i]", PN(playerid), playerid, PN(params[0]), params[0], ItemsInfo[Inventory[params[0]][0][params[1]]][itemName], params[2]);
    if(InventoryOpen{playerid}) InventSlotUpdate(params[0], GetInvID(playerid, params[1], 1), params[1]);
	return true;
}

cmd:rainbow(playerid)
{
	if(!PI[playerid][pRainbowBuyed])
	    return SCM(playerid, COLOR_RED, "[Ошибка] {ffffff}У вас не куплен радужный ник [/adonate - переливающийся никнейм].");

	if(PI[playerid][pRainbowColor])
	{
		if(TeamDuty{playerid})
			SetPlayerColor(playerid, TeamColors[GetTeamID(playerid)][0]);
		else
			SetPlayerColor(playerid, 0xFDFCFC15);

        PI[playerid][pRainbowColor] = 0;

		KillTimer(Rainbow[playerid]);
	}
	else PI[playerid][pRainbowColor] = 1, Rainbow[playerid] = SetTimerEx("RainbowNickName", 1000, true, "i", playerid);

	SCMF(playerid, COLOR_VALIK, "[Информация] {ffffff}Вы успешно {ff0000}%s {ffffff}переливающийся никнейм", PI[playerid][pRainbowColor] == 1 ? "включили" : "выключили");
	SCMF(playerid, COLOR_VALIK, "[Информация] {ffffff}Чтобы %s его снова используйте {FF0000}/rainbow", PI[playerid][pRainbowColor] == 1 ? "выключить" : "включить");

	return SQL("UPDATE `accounts` SET `RainbowColor` = '%d' WHERE `ID` = '%i'", PI[playerid][pRainbowColor], PI[playerid][pID]);
}

public: RainbowNickName(playerid)
{
	static const Colors[] = {0xFF0000FF, 0xFFA500FF, 0xFFFF00FF, 0xFF00FFFF, 0x800080FF, 0x6A5ACDFF, 0xDAA520FF, 0x00FFFFFF, 0x696969FF, 0x00BFFFFF, 0x00FF00FF};

	if(PI[playerid][pRainbowColor])
		SetPlayerColor(playerid, Colors[random(sizeof(Colors))]);
}

cmd:givepass(playerid, data[])
{
    if(!CheckAdm(playerid, 1))
        return false;

    extract data -> new player:target; else
        return SCM(playerid, COLOR_OLDRED, !"Используй: /givepass [ID]");

    if(target == INVALID_PLAYER_ID)
        return 0;

    else if(!IsPlayerOnline(target))
        return SCM(playerid, COLOR_OLDRED, !"Данный игрок еще не авторизировался");

    if(!IsValidPassport(target))
        PassInfo[target][psDateBirth][0] = 7,
        PassInfo[target][psDateBirth][1] = 2,
        PassInfo[target][psDateBirth][2] = 1995,
        PassInfo[target][psDate][0] = 7,
        PassInfo[target][psDate][1] = 2,
        PassInfo[target][psDate][2] = 2022,
        PassInfo[target][psNumber] = 100000 + random(900000),
        PassInfo[target][psSeria] = 1000 + random(9000),
        OnRegPass(target);
    else
        return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}У игрока уже есть пасспорт");

    return SCMF(playerid, COLOR_VALIK, "[Информация] {FFFFFF}Вы успешно выдали паспорт игроку %s", PN(target));
}

stock CheckEnterRegionOnInterface(const region[], country_id)
{
	new 
		bool:num = false, 
		lennamber[] = {2, 3, 2, 1, 2}, 
		textnumber[][] = {"1234567890", "1234567890", "KABCEHIMOPTX", "123567", "0123456789"};

	if(strlen(region) > lennamber[country_id]) return false;

	for(new i = 0; i < strlen(region); i++)
		for(new j = 0; j < strlen(textnumber[country_id]); j++)
			if(region[i] == textnumber[country_id][j]) { num = true; break; }

	return num;
}

stock SendStream(BitStream:bs, npcid, bool:delete = false)
{
	foreach(Player, playerid)
	{
		if(!GetPlayerLauncher(playerid))
			continue;

		if(GetPlayerDistanceFromPoint(playerid, Custom_npcOptions[npcid][data_Float][0], Custom_npcOptions[npcid][data_Float][1], Custom_npcOptions[npcid][data_Float][2]) <= 80.0)
			PR_SendPacketEx(bs, playerid);
		
		if(delete)
		{
			if(pTemp[playerid][tCreateNPC][npcid])
				pTemp[playerid][tCreateNPC][npcid] = false;

			Custom_npcOptions[npcid][data_ID] = INVALID_DATA_ID;

			if(Custom_npcOptions[npcid][data_AttachedID] != -1) 
				Custom_npcOptions[npcid][data_AttachedID] = INVALID_DATA_ID;
		}
	}

	return true;
}

cmd:pedanims(playerid, data[])
{
	for(new i; i < IsPlayerHaveBodyguard(playerid); i++)
	{ 
		if(Bodyguard_npcData[playerid][i][bgnpc_NPC] != INVALID_PLAYER_ID)
		{
			extract data -> new animID;
			animID = FindAnimIDForUID(animID);
			if(animID < 0) return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {ffffff}ID анимации указан неверно!");
			setAnimPed(Bodyguard_npcData[playerid][i][bgnpc_NPC], AnimInfo[animID][anim_Library], AnimInfo[animID][anim_Name], 4.1, 0, 0, 0, 0, 0);
		}
		else SCM(playerid, COLOR_OLDRED, !"[Ошибка]{ffffff} У вас нет личных созданных охранников!");

		break;
	}
	return true;
}

cmd:pubg_tp(playerid)
{
	if(!IsOsnovatel(playerid)) return false;

	SetPlayerPos(playerid, -2188.7239,1278.9629,1142.9453);
	SetPlayerInterior(playerid, 3);
	SetPlayerVirtualWorld(playerid, 0);

	return true;
}

cmd:eventpc(playerid, data[])
{
	if(!IsOsnovatel(playerid)) return false;

	extract data -> new string:event[128]; else
		return SCM(playerid, -1, "event = null");

	return executeEvent(playerid, 0, event);
}

cmd:cursorPlayer(playerid, data[])
{
	if(!IsOsnovatel(playerid)) return false;
	
	extract data -> new browser, toggle; else
		return SCM(playerid, -1, "browser, toggle = null");

	return cursorPlayer(playerid, browser, bool:toggle);
}

cmd:show_pubg(playerid)
{
	if(!IsOsnovatel(playerid)) return false;

 	InterpolateCameraPos(playerid, 1995.8007, 2001.7140, 1502.5000, 1995.8007, 2001.7140, 1502.5000, 1000, CAMERA_CUT);
	InterpolateCameraLookAt(playerid, 2002.3838, 2001.7581, 1501.0000, 2002.3838, 2001.7581, 1501.0000, 1000, CAMERA_CUT);

	SetPlayerInterior(playerid, 2);
   	SetPlayerVirtualWorld(playerid, 2);

	SetPlayerPos(playerid, 1995.8007, 2001.7140, 1522.5000);
	SetPlayerFacingAngle(playerid, 260.5269);

	executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', `[\"BattleRoyale\"]`);");
	executeEvent(playerid, 0, (str_f("window.executeEvent('event.pubg.updateGameInformation', `[{ \"searchStarted\": false, \"mapTitle\": \"Каракин\", \"lobbyPlayers\": [ \"%s\",\"\",\"\",\"\" ], \"lobbyPlayersAcceptStatus\": [ false,false,false,false ], \"invite\": null, \"moneyBalance\": 0, \"matchStartingText\": \"\" } ]`);", PN(playerid))));
	executeEvent(playerid, 0, "window.executeEvent('event.pubg.initializeMapPositions', `[{ \"imageMinPos\": 0.000, \"imageMaxPos\": 1000.000, \"minMapPosX\": -2883.959, \"maxMapPosX\": -259.821, \"minMapPosY\": 547.810, \"maxMapPosY\": 3171.944, \"minMapPlanePosZ\": 1410.000  }]`);");
	
	hidePlayerHud(playerid);
	SetPlayer_interfaceVisible(playerid, false);

	return cursorPlayer(playerid, 0, true);
}

stock SetVehicleFrontLight(vehicleid, color, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

    BS_WriteValue(bs,
        PR_UINT8, 220,
        PR_UINT8, 132,
        PR_UINT16, vehicleid,
		PR_UINT32, getTuningColorsHex(color));

	if(forplayerid == INVALID_PLAYER_ID)
    	PR_SendPacketToVehicleStream(bs, vehicleid);

    else PR_SendPacketEx(bs, forplayerid);

    return BS_Delete(bs);
}

stock SetVehicleExhaustColor(vehicleid, color, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

    BS_WriteValue(bs,
        PR_UINT8, 220,
        PR_UINT8, 139,
        PR_UINT16, vehicleid,
		PR_UINT8, 205,
        PR_UINT8, 204,
        PR_UINT8, 204,
        PR_UINT8, 62,
		PR_UINT8, customTuning_color[color][2],
        PR_UINT8, customTuning_color[color][1],
        PR_UINT8, customTuning_color[color][0]);

	if(forplayerid == INVALID_PLAYER_ID)
    	PR_SendPacketToVehicleStream(bs, vehicleid);

    else PR_SendPacketEx(bs, forplayerid);

    return BS_Delete(bs);
}

stock SetVehicleBottomColor(vehicleid, color, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New(), bottom_color[][] = { {0, 0, 0, 0}, {255, 0, 0, 255}, {255, 128, 0, 255}, {255, 191, 0, 255}, {255, 255, 0, 255}, {0, 255, 0, 255}, {0, 255, 255, 255}, {0, 0, 255, 255}, {255, 0, 255, 255}, {255, 0, 119, 255}, {255, 255, 255, 255} };

    BS_WriteValue(bs,
        PR_UINT8, 220,
        PR_UINT8, 142,
        PR_UINT16, vehicleid,
		PR_UINT8, bottom_color[color][0],
		PR_UINT8, bottom_color[color][1],
		PR_UINT8, bottom_color[color][2],
		PR_UINT8, bottom_color[color][3]);

	if(forplayerid == INVALID_PLAYER_ID)
    	PR_SendPacketToVehicleStream(bs, vehicleid);

    else PR_SendPacketEx(bs, forplayerid);

    return BS_Delete(bs);
}

stock SetVehicleWindowTint(vehicleid, window_id, color, forplayerid = INVALID_PLAYER_ID)
{
	if(window_id > 6) return false;

	new BitStream:bs = BS_New(), place_window_id[][] = { {"wnd"}, {"wdor_f"}, {"wdor_r"},  {"wnd_rr"}, {"wndfrl"}, {"wndrrl"}, {"wndfloor"} };

	BS_WriteValue(bs,
        PR_UINT32, vehicleid,
        PR_UINT16, 260,
        PR_UINT16, strlen(place_window_id[window_id]),
        PR_STRING, place_window_id[window_id],
        PR_UINT32, color,
        PR_UINT16, strlen("white"),
        PR_STRING, "white");

	if(forplayerid == INVALID_PLAYER_ID)
    	PR_SendRPCToVehicleStream(bs, vehicleid, 161);

    else PR_SendRPC(bs, forplayerid, 161);

	return BS_Delete(bs);
}

stock SetVehicleWadPainting(vehicleid, wad, color, forplayerid = INVALID_PLAYER_ID)
{
	if(wad > 25) return false;

	new BitStream:bs = BS_New(), custom_wad_id[][] = { {"fire_8years"}, {"eagle_8years"}, {"blue_8years"}, {"wad_lveneno_rick"}, {"wad_chevrolet_shrek"} };

	BS_WriteValue(bs, 
		PR_UINT32, vehicleid, 
		PR_UINT16, 1 <= wad <= 25 ? 260 : 259,
		PR_UINT16, strlen("wad"),
		PR_STRING, "wad",
		PR_UINT32, getTuningColorsHex(color),
		PR_UINT16, strlen(wad < 20 ? (str_f("wad%i", wad)) : custom_wad_id[wad-20]),
		PR_STRING, wad < 20 ? (str_f("wad%i", wad)) : custom_wad_id[wad-20]);
	
	if(forplayerid == INVALID_PLAYER_ID)
    	PR_SendRPCToVehicleStream(bs, vehicleid, 161);

    else PR_SendRPC(bs, forplayerid, 161);

	return BS_Delete(bs);
}

stock SetVehicleNumberPlates(vehicleid, number_type, const number_text[], const number_region[], forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();
	
	BS_WriteValue(bs, 
		PR_UINT8, 220, 
		PR_UINT8, 153, 
		PR_UINT16, vehicleid, 
		PR_UINT8, number_type,
		PR_STRING32, number_text,
		PR_STRING32, number_region);

	if(forplayerid == INVALID_PLAYER_ID)
    	PR_SendPacketToVehicleStream(bs, vehicleid);

    else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock GetWheelDisks(wheeldisks_model)
{
	for(new i; i < sizeof(WheelDisks); i++)
		if(WheelDisks[i][0][0] == wheeldisks_model) return i + 1;

	return -1;
}

stock SetVehicleWheelDisks(vehicleid, disks, color, forplayerid = INVALID_PLAYER_ID)
{	
	if(disks > sizeof(WheelDisks)+1 or vehicleTuning[vehicleid][7] == 0) 
		return false;

	if(!disks) 
		return AddVehicleComponentEx(vehicleid, WheelDisks[vehicleTuning[vehicleid][7] - 1][0][0], true, forplayerid), vehicleTuning[vehicleid][7] = 0;

	AddVehicleComponentEx(vehicleid, WheelDisks[disks - 1][0][0], false, forplayerid);

	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
        PR_UINT32, vehicleid,
        PR_UINT16, 260,
        PR_UINT16, strlen(WheelDisks[disks - 1][1]),
        PR_STRING, WheelDisks[disks - 1][1],
        PR_UINT32, getTuningColorsHex(color),
        PR_UINT16, strlen("default"),
        PR_STRING, "default");

	if(forplayerid == INVALID_PLAYER_ID)
    	PR_SendRPCToVehicleStream(bs, vehicleid, 161);

    else PR_SendRPC(bs, forplayerid, 161);

	return BS_Delete(bs);
}

stock AddVehicleComponentEx(vehicleid, component, bool:remove = false, forplayerid = INVALID_PLAYER_ID)
{
	if(!component || component == -1) return false;

	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
        PR_UINT16, remove ? vehicleid : 0xFFFF,
        remove ? PR_UINT16: PR_UINT32, remove ? component : 2);

	if(!remove)
		BS_WriteValue(bs,
        	PR_UINT32, vehicleid,
        	PR_UINT32, component,
        	PR_UINT32, 0);

	if(forplayerid == INVALID_PLAYER_ID)
    	PR_SendRPCToVehicleStream(bs, vehicleid, remove ? 57 : 96);

    else PR_SendRPC(bs, forplayerid, remove ? 57 : 96);

	return BS_Delete(bs);
}

stock SetVehicleWheelSize(vehicleid, Float:wheel_size, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220, 
		PR_UINT8, 135, 
		PR_UINT16, vehicleid, 
		PR_FLOAT, wheel_size, 
		PR_UINT32, 0);

	if(forplayerid == INVALID_PLAYER_ID)
		PR_SendPacketToVehicleStream(bs, vehicleid);

	else PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock SetVehicleWheelSettings(vehicleid, type, Float:corner_wheel, Float:drop_wheel, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New(), wheel_position_id[][] = {"wheel_lf_dummy", "wheel_rf_dummy", "wheel_lb_dummy", "wheel_rb_dummy"};

 	for(new i; i < 2; i++) 
	{
		BS_WriteValue(bs, 
			PR_UINT32, vehicleid,
	    	PR_UINT16, 258,
	    	PR_UINT16, strlen(wheel_position_id[type == 1 ? i+2 : i]),
	    	PR_STRING, wheel_position_id[type == 1 ? i+2 : i],
	    	PR_FLOAT, i ? drop_wheel : -drop_wheel, 
			PR_FLOAT, 0.000000, 
			PR_FLOAT, 0.000000, 
			PR_FLOAT, i ? type == 1 ? corner_wheel : -corner_wheel : type == 1 ? -corner_wheel : corner_wheel);
	    
		if(forplayerid == INVALID_PLAYER_ID)
			PR_SendRPCToVehicleStream(bs, vehicleid, 161);

		else PR_SendRPC(bs, forplayerid, 161);

	    BS_Reset(bs);
	}
	return BS_Delete(bs);
}

stock showPlayerChatRoom(playerid, bool:toggle, const room_cmd[], room_color, const room_description[], const room_name[])
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220, 
		PR_UINT8, toggle ? 36 : 37,
		PR_STRING8, room_cmd);

	if(toggle)
		BS_WriteValue(bs, 
            PR_UINT32, room_color,
            PR_STRING8, room_description,
            PR_STRING8, room_name);

    return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

stock showPlayerChatRoomDialog(playerid)
{
	global_str = "{FFFFFF}Параметр\t{FFFFFF}Значение\t{FFFFFF}Тип\n";

	for(new i; i < 8; i++)
	{
		if(!i && PI[playerid][pVIP] < 5 or i == 1 && !(PI[playerid][pMember] && TeamDuty{playerid}) or i == 2 && !PI[playerid][pMember] or i == 3 && FP_Data[playerid][F_FAMILY_ID] == -1 or i == 7 && !PlayerJob[playerid]) continue;
		strcat(global_str, (str_f("%s\t%s\n", ChatRoom_data[i][data_Name], PI[playerid][pChatRoom][i] ? "{85bb65}Включено" : "{FF6347}Отключено")));
	}

	return SPD(playerid, 3984, DIALOG_STYLE_TABLIST_HEADERS, !"{FFFFFF}Настройки | {ae433d}Чат-мод", global_str, !"»", !"x");
}

stock GetHotKeyID(playerid, id)
{
	for(new i = 9; i < sizeof(HotKey_data) - 1; i++)
		if(HotKey_data[i][data_KeyID] == PI[playerid][pHotKeyInfo][id]) return i;

	return -1;
}

stock showHotKeyDialogMenu(playerid)
{
	global_str = "{CCCCCC}Тип действия\t{CCCCCC}Клавиша\n";

	static const 
		keyNames[][] = {"Голосовая рация организации", "Голосовая рация семьи", "Система предложений", "Гидравлическая система", "Закрытие дверей авто", "Меню анимации", "Радио в автомобиле", "Телефон", "Трудовая книжка/Криминальный кодекс", "Меню взаимодействия (Пешком)"};

	for(new i; i < sizeof(keyNames); i++)
		strcat(global_str, (str_f("{ae433d}[%i] {ffffff}%s\t[ %s ]\n", i + 1, keyNames[i], HotKey_data[GetHotKeyID(playerid, i)][data_KeyName])));

	return SPD(playerid, 25739, DIALOG_STYLE_TABLIST_HEADERS, !"Горячие клавиши", global_str, !"Выбрать", !"Назад");
}

stock showHotKeyDialogChange(playerid, key)
{
	global_str = "";

	for(new i = 9; i < sizeof(HotKey_data)-1; i++)
		strcat(global_str, (str_f("{ae433d}[%i] {%s}Клавиша %s%s\n", i - 8, TextFind(IntToStr(PI[playerid][pHotKeyInfo][key]), IntToStr(HotKey_data[i][data_KeyID])) ? "73B461" : "FFFFFF", HotKey_data[i][data_KeyName], key == HotKey_data[i][data_ID] ? " {888888}(по умолчанию)" : " ")));

	return SPD(playerid, 25740, DIALOG_STYLE_LIST, !"Выберите клавишу", global_str, !"Выбрать", !"Назад");
}

stock showSelectAuraDialog(playerid)
{
	global_str = "";

 	for(new i, auraNamed[][] = {"{37ffff}Стандартная", "{951715}9 лет"}; i < 2; i++)
		strcat(global_str, (str_f("{ff6666}[%i] %s\t%s\n", i + 1, auraNamed[i], SettingData[playerid][sdCustomAura] == i ? "{73B461}[ выбрано ]" : "")));

	return SPD(playerid, 26312, DIALOG_STYLE_TABLIST, !"Выбор типа ауры", global_str, !"Выбрать", !"Назад");
}

stock fuction_UsePlayerItemArmour(playerid, bool:auto = false)
{
	if(Int_GetPlayerData(playerid, !"armourtime") > Global_Time && !auto)
		return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Между использованием предметов должно пройти 60 секунд!");

	if(GetCount(playerid, 521) < 1 && PI[playerid][pArmour] == 0.0 && !auto)
		return SCM(playerid, COLOR_GREY, !"У вас нет бронежилета");

	SCMF(playerid, COLOR_LIGHTBLUE, "Вы %s", PI[playerid][pArmour] == 0.0 && !auto ? "надели бронежилет. Используйте /armour чтобы снять его или надеть ещё раз." : auto ? "автоматически надели бронежилет, поскольку у Вас меньше 50%% брони." : "сняли бронежилет!");
	ProxDetector(25.0, playerid, (str_f("%s[%d] %s бронежилет.", PN(playerid), playerid, PI[playerid][pArmour] == 0.0 && !auto ? "надел" : auto ? "автоматически надел" : "снял")), COLOR_PURPLE);

	if(PI[playerid][pArmour] == 0.0 && !auto)
		DeleteItem(playerid, 521, 1);

	SetPVarInt(playerid, auto ? !"updateArmourTime" : !"armourtime", auto ? (Global_Time + (25 + randomF(5, 10))) : (Global_Time + 60)); 
	return UpdatePlayerArmour(playerid, PI[playerid][pArmour] == 0.0 ? 100 + GetAccessoryPlayerBuff(playerid, 5) : 0);
}

stock showHydraulicDialog(playerid, carid)
{
	if(carid == INVALID_VEHICLE_ID)
		return false;

//	for(new i, typeName[][] = {"Подвеска выше", "Подвеска ниже", "Стандартное значение"}; i < 3; i++)

	return true;
}

stock setPlayerCustomIcon(playerid, type, bool:toggle)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220, 
		PR_UINT8, type ? 130 : 108, 
		type ? PR_UINT16:PR_UINT32, playerid, 
		PR_BOOL, toggle);

	pTemp[playerid][tCustomIcon][type] = toggle;

	PR_SendPacketToPlayerStream(bs, playerid);
	return BS_Delete(bs);
}

stock FindNearestBussines(playerid)
{
	for(new i; i < MAX_BIZ; i++)
		if(GetPlayerDistanceFromPoint(playerid, BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2]) < 25.0)
			return i;

	return -1;
}

stock sendPlayerActionBar(playerid, messageText[], delay)
{
	executeEvent(playerid, 0, !"window.executeEvent('event.setActiveView', '[\"ActionProgressBar\"]');");

	executeEvent(playerid, 0, (str_f("window.executeEvent('event.actionProgressBar.initializeActionName', '[\"%s\"]');", messageText)));
	executeEvent(playerid, 0, (str_f("window.executeEvent('event.actionProgressBar.initializeCountDown', '[%d]');", delay * 1000)));

	CallTimeOutFunction("hidePlayerActionBar", delay * 1000, false, "d", playerid);

	return TogglePlayerControllable(playerid, false);
}

public: hidePlayerActionBar(playerid)
{
	executeEvent(playerid, 0, !"window.executeEvent('event.setActiveView', '[ null ]');");

	if(!(GlobalMassive[playerid][29] == 0))
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK), GlobalMassive[playerid][29] = false, GlobalMassive[playerid][30] = true, setBrowserWindowPicture(playerid, 1, "about:blank"), SetPlayer_interfaceVisible(playerid, true);

	if(!(pTemp[playerid][tSelectionData][1] == INVALID_DATA_ID))
		function_AutoSelection(playerid, pTemp[playerid][tSelectionData][1]);

	return TogglePlayerControllable(playerid, true);
}


stock function_AutoSelection(playerid, autoSelectionType)
{
	new autoSelectionWin = random(100) <= pTemp[playerid][tSelectionData][0];

	SCMF(playerid, autoSelectionWin ? COLOR_GREEN : COLOR_RED, "Автоподборщику %sудалось подобрать вам новый транспорт%s! Оплачено: %i.", !autoSelectionWin ? "не " : "", autoSelectionWin ? (str_f(": %s", ItemsInfo[autoSelectionItems[autoSelectionType]][itemName])) : "", pTemp[playerid][tSelectionData][1] == 2 ? 7500000 : 5000000);

	if(autoSelectionWin)
	{
		autoSelectionData[0] = autoSelectionType, autoSelectionData[1] = Global_Time + 1800;

		SCMF(playerid, COLOR_GREY, "[Подсказка] {FFFFFF}Чтобы получить сертификат на новый %s, отправляйтесь к ангару с %sом.", autoSelectionName[autoSelectionType], autoSelectionName[autoSelectionType]);
		SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Местоположение ангара отмечено на карте красным маркером.");
		SCM(playerid, COLOR_GREY, !"[Подсказка] {FFFFFF}Если вы выйдите из игры, вы сможете снова зайти и забрать сертификат в течении 30 минут после автоподбора.");

		autoSelectionWinners_TextData[autoSelectionType] = CreateDynamic3DTextLabel(!"Используйте: 'Действие', чтобы забрать\nсертификат на подобранный у автоподборщика\nтранспорт", 0xFFFFFFFF, autoSelectionPosition_Pickup[autoSelectionType][0], autoSelectionPosition_Pickup[autoSelectionType][1], autoSelectionPosition_Pickup[autoSelectionType][2], 5.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
		autoSelectionWinners_Data[autoSelectionType][0] = CreateDynamicPickup(19134, 23, autoSelectionPosition_Pickup[autoSelectionType][0], autoSelectionPosition_Pickup[autoSelectionType][1], autoSelectionPosition_Pickup[autoSelectionType][2]);
		autoSelectionWinners_Data[autoSelectionType][1] = J_AddStaticVehicleEx(ItemsInfo[autoSelectionItems[autoSelectionType]][itemModel], autoSelectionPosition_Vehicle[autoSelectionType][0], autoSelectionPosition_Vehicle[autoSelectionType][1], autoSelectionPosition_Vehicle[autoSelectionType][2], autoSelectionPosition_Vehicle[autoSelectionType][3], 1, 1);

		EnableGPSForPlayer(playerid, autoSelectionPosition_Pickup[autoSelectionType][0], autoSelectionPosition_Pickup[autoSelectionType][1], autoSelectionPosition_Pickup[autoSelectionType][2]);
	}
	else
		SetString(autoSelectionWinnerName, "None"), UpdateDynamic3DTextLabelText(autoSelectionText, 0x31B404FF, !"[ Свободен ]");

	return GiveMoney(playerid, -(pTemp[playerid][tSelectionData][1] == 2 ? 7500000 : 5000000));
}
stock showStreetFood(playerid, bizid)
{
	switch(GetPlayerLauncher(playerid))
	{
		case 0:
		{
			if(!IsTextDrawVisibleForPlayer(playerid, BoxEat[0]))
			{
				for(new i; i < 6; i++)
					DestroyPlayerTD(playerid, BoxEatPlayer[playerid][i]);

				BoxEatPlayer[playerid][5] = CreatePlayerTextDraw(playerid, 233.499695, 194.822205, "LD_BEAT:chit");
				PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][5], 0.000000, 0.000000);
				PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][5], 52.000000, 62.000000);
				PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][5], 1);
				PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][5], 0xC0C0C018);
				PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][5], 0);
				PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][5], 0x80808080);
				PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][5], 0);
				PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][5], 0);
				PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][5], 0x000000FF);
				PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][5], 4);
				PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][5], 0);
				PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][5], 1);

				BoxEatPlayer[playerid][4] = CreatePlayerTextDraw(playerid, 229.166397, 183.622101, "");
				PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][4], 0.000000, 0.000000);
				PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][4], 63.000000, 77.000000);
				PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][4], 1);
				PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][4], 0xFFFFFFFF);
				PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][4], 0);
				PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][4], 0x80808080);
				PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][4], 0);
				PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][4], 0);
				PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][4], 0x00000000);
				PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][4], 5);
				PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][4], 0);
				PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][4], 0);
				PlayerTextDrawSetPreviewModel(playerid, BoxEatPlayer[playerid][4], 19346);
				PlayerTextDrawSetPreviewRot(playerid, BoxEatPlayer[playerid][4], 321.000000, 30.000000, 129.000000, 1.428500);

				BoxEatPlayer[playerid][3] = CreatePlayerTextDraw(playerid, 269.766510, 243.296295, (str_f("$%d", BizData[bizid][bItem][0])));
				PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][3], 0.185499, 1.222399);
				PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][3], 1280.000000, 1280.000000);
				PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][3], 1);
				PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][3], 0x008000FF);
				PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][3], 0);
				PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][3], 0x80808080);
				PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][3], 0);
				PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][3], 1);
				PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][3], 0x00000067);
				PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][3], 2);
				PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][3], 1);
				PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][3], 0);

				BoxEatPlayer[playerid][2] = CreatePlayerTextDraw(playerid, 349.166290, 194.822205, "LD_BEAT:chit");
				PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][2], 0.000000, 0.000000);
				PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][2], 52.000000, 62.000000);
				PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][2], 1);
				PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][2], 0xC0C0C018);
				PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][2], 0);
				PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][2], 0x80808080);
				PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][2], 0);
				PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][2], 0);
				PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][2], 0x000000FF);
				PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][2], 4);
				PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][2], 0);
				PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][2], 1);

				BoxEatPlayer[playerid][1] = CreatePlayerTextDraw(playerid, 342.932800, 183.622101, "");
				PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][1], 0.000000, 0.000000);
				PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][1], 63.000000, 77.000000);
				PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][1], 1);
				PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][1], 0xC0C0C0FF);
				PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][1], 0);
				PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][1], 0x80808080);
				PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][1], 0);
				PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][1], 0);
				PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][1], 0x00000000);
				PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][1], 5);
				PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][1], 0);
				PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][1], 0);
				PlayerTextDrawSetPreviewModel(playerid, BoxEatPlayer[playerid][1], 19580);
				PlayerTextDrawSetPreviewRot(playerid, BoxEatPlayer[playerid][1], 337.000000, 43.000000, 129.000000, 0.610000);

				BoxEatPlayer[playerid][0] = CreatePlayerTextDraw(playerid, 387.433105, 243.296295, (str_f("$%d", BizData[bizid][bItem][1])));
				PlayerTextDrawLetterSize(playerid, BoxEatPlayer[playerid][0], 0.185499, 1.222399);
				PlayerTextDrawTextSize(playerid, BoxEatPlayer[playerid][0], 1280.000000, 1280.000000);
				PlayerTextDrawAlignment(playerid, BoxEatPlayer[playerid][0], 1);
				PlayerTextDrawColor(playerid, BoxEatPlayer[playerid][0], 0x008000FF);
				PlayerTextDrawUseBox(playerid, BoxEatPlayer[playerid][0], 0);
				PlayerTextDrawBoxColor(playerid, BoxEatPlayer[playerid][0], 0x80808080);
				PlayerTextDrawSetShadow(playerid, BoxEatPlayer[playerid][0], 0);
				PlayerTextDrawSetOutline(playerid, BoxEatPlayer[playerid][0], 1);
				PlayerTextDrawBackgroundColor(playerid, BoxEatPlayer[playerid][0], 0x00000067);
				PlayerTextDrawFont(playerid, BoxEatPlayer[playerid][0], 2);
				PlayerTextDrawSetProportional(playerid, BoxEatPlayer[playerid][0], 1);
				PlayerTextDrawSetSelectable(playerid, BoxEatPlayer[playerid][0], 0);

				for(new i; i < 12; i++)
					TextDrawShowForPlayer(playerid, BoxEat[i]);

				for(new i; i < 6; i++)
					ShowPlayerTD(playerid, BoxEatPlayer[playerid][i]);

				SelectTextDraw(playerid, 0xFFFFFFAA);
			}
		}

		case 1:
		{
			executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"StreetFood\"]');");
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.streetFood.initializeHotdogPrice', '[[ %i ]]');", BizData[bizid][bItem][0])));
			executeEvent(playerid, 0, (str_f("window.executeEvent('event.streetFood.initializePizzaPrice', '[[ %i ]]');", BizData[bizid][bItem][1])));
			cursorPlayer(playerid, 0, true);
		}

		case 2:
		{
			eventMobile(playerid, {55, 0}, (str_f("{\"type\":\"hotdog\", \"price\":\"25000\"}", BizData[bizid][bItem][0])));
			eventMobile(playerid, {55, 0}, (str_f("{\"type\":\"pizza\", \"price\":\"30000\"}", BizData[bizid][bItem][1])));
			eventMobile(playerid, {55, 1}, "{\"type\":\"hotdog\", \"available\":\"true\"}");
			eventMobile(playerid, {55, 1}, "{\"type\":\"pizza\", \"available\":\"true\"}");
			eventMobile(playerid, {55, 2}, (str_f("{\"health\":\"%i\", \"armour\":\"%i\", \"satiety\":\"%i\"}", floatround(PI[playerid][pHealth]), floatround(PI[playerid][pArmour]), Fullness[playerid])));
			cursorPlayer(playerid, 55, true);
		}
	}

	return true;
}

stock function_InteractionProperty(playerid, type)
{
	switch(type)
	{
		case 0:
		{
			if(InfoHouse[playerid] != -1)
			{
				new i = InfoHouse[playerid];

				if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[i][hEnter_X],HouseInfo[i][hEnter_Y],HouseInfo[i][hEnter_Z]))
				{
					if(HouseInfo[i][hAuction] && !GetString(PN(playerid),HouseInfo[i][hOwner])) return SPD(playerid, 15037, DIALOG_STYLE_LIST, !"", !"Войти в дом\nСделать ставку", !"Выбрать", !"Закрыть");
					
					if(HouseInfo[i][hLock]>0 && !IsACop(playerid)) return SCM(playerid, COLOR_RED, !"[Ошибка] {FFFFFF}Дверь закрыта, невозможно зайти");
					InfoHouse[playerid] = -1;
					if(!GetPlayerLauncher(playerid)) HideInfoMenu(playerid);
					SetPlayerVirtualWorld(playerid, i+50), SetPlayerInterior(playerid, HouseInfo[i][hInt]);
					UpdatePlayerPos(playerid,HouseInfo[i][hExit_X],HouseInfo[i][hExit_Y],HouseInfo[i][hExit_Z], -1);
					return HouseEntered[playerid] = i;
				}
				else InfoHouse[playerid] = -1;
			}
			else if(InfoBiz[playerid] != -1)
			{
				new i = InfoBiz[playerid];
				if(IsPlayerInRangeOfPoint(playerid,2.0,BizData[i][bEnter][0],BizData[i][bEnter][1],BizData[i][bEnter][2]))
				{
					EnterBiz(playerid, i);

					if(!GetPlayerLauncher(playerid)) 
						HideInfoMenu(playerid);

					return true;
				}
				else InfoBiz[playerid] = -1;
			}
		}
		case 1: 
		{
			if(InfoHouse[playerid] != -1) CreateCaptcha_BOT(playerid, 1);
			else if(InfoBiz[playerid] != -1) CreateCaptcha_BOT(playerid, 2);
		}
	}
	return true;
}

stock showPlayerVisitBanner(playerid, color_id, sound_id, const title[], message[], weaponid)
{
	new color[][] = {"red", "black", "yellow", "purple"}, music_duration[] = {6, 5, 5, 5, 3, 8, 3, 2, 6, 8, 4};

	executeEvent(playerid, 0, "window.executeEvent('event.arizonahud.updatePubgBannerVisibility', `[true]`);");
	executeEvent(playerid, 0, (str_f("window.executeEvent('event.hud.pubgBanner.initialize', `[{\"backgroundId\":\"%s\",\"title\":\"%s\",\"text\":\"%s\",\"weaponId\":%i}]`);", color[color_id], title, message, weaponid)));
	//playZoneAZVoice(GetRadioZone(playerid, 2), (str_f("http://arizona.gtasounds.com/death_banner/sound_death_%i.mp3", sound_id + 1)), 0, playerid);

	return CallTimeOutFunction("hidePlayerVisitBanner", music_duration[sound_id] * 1000, false, "d", playerid);
}

public: hidePlayerVisitBanner(playerid)
	return executeEvent(playerid, 0, "window.executeEvent('event.arizonahud.updatePubgBannerVisibility', `[false]`);");

stock createPlayerCustomMarker(playerid, id, Float:drawdistance, Float:x, Float:y, Float:z, const marker_named[])
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220,
		PR_UINT8, 127, 
		PR_UINT32, id, 
		PR_UINT8, 1, 
		PR_UINT32, 0, 
		PR_UINT32, 0, 
		PR_FLOAT, drawdistance,
		PR_FLOAT, x,
		PR_FLOAT, y,
		PR_FLOAT, z,
		PR_STRING32, marker_named); 

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

stock showCustomBannerDialogs(playerid, dialog_id = -1)
{
	global_str = "";

	switch dialog_id do
	{
		case -1: 
		{
			global_str = "{cccccc}Тип\t{cccccc}Информация\n";

			for(new i, bannerPoint[][] = {"Тип баннера", "Текст баннера", "Звук баннера"}; i < 3; i++)
				strcat(global_str, (str_f("{73B461}-{ffffff} %s\t{cccccc}%s\n", bannerPoint[i], bannerNamed[i][PI[playerid][pBannerInfo][i]])));
			
			strcat(global_str, !"{666666}Остальное:\n{73B461}-{ffffff} Пример баннера");
			return SPD(playerid, 27023, DIALOG_STYLE_TABLIST_HEADERS, !"{73B461}Настройка баннера", global_str, !"Далее", !"Закрыть");
		}

		case 0: 
		{
			for(new i; i < 4; i++)
				strcat(global_str, (str_f("{73B461}%i.{ffffff} %s%s\n", i + 1, bannerNamed[0][i], i == PI[playerid][pBannerInfo][0] ? " {cccccc}[Текущий]" : " ")));

			return SPD(playerid, 27024, DIALOG_STYLE_LIST, !"{73B461}Выбор дизайна", global_str, !"Далее", !"Закрыть");
		}

		case 1, 2:
		{
			for(new i; i < (dialog_id == 1 ? 17 : 11); i++)
				strcat(global_str, (str_f("{73B461}%i.{ffffff} %s%s\n", i + 1, bannerNamed[dialog_id][i], i == PI[playerid][pBannerInfo][dialog_id] ? " {cccccc}[Текущий]" : " ")));

			return spdList(playerid, 0, dialog_id), SPD(playerid, 27075, DIALOG_STYLE_LIST, (str_f("{73B461}Выбор %s", dialog_id == 1 ? "текста" : "звука")), global_str, !"Далее", !"Закрыть");
		}

		case 3:
			return SPDF(playerid, 27129, DIALOG_STYLE_INPUT, !"{73B461}Ввод текста", "{73B461}—{ffffff} Изменение текста баннера:\n\n{73B461}—{ffffff} Текущий: {cccccc}%s\n\n{cccccc}Длина текста может быть от 3 и до 12 символов\nВведите новый текст в строку ниже:", !"Далее", !"Закрыть", PI[playerid][pBannerCustomText]);
	
		case 4: 
			return showCustomBannerDialogs(playerid), showPlayerVisitBanner(playerid, PI[playerid][pBannerInfo][0], PI[playerid][pBannerInfo][2], PN(playerid), PI[playerid][pBannerInfo][1] != 16 ? bannerNamed[1][PI[playerid][pBannerInfo][1]] : (str_f("%s", PI[playerid][pBannerCustomText])), 1);
	}

	return true;
}

stock getTuningColorsHex(color_id) 
	return (customTuning_color[color_id][2] << 24) | (customTuning_color[color_id][1] << 16) | (customTuning_color[color_id][0] << 8) | 255;

stock showFamilyCarsDialog(playerid)
{
	if(FP_Data[playerid][F_FAMILY_ID] == -1)
		return SCM(playerid, COLOR_OLDRED, !"[Ошибка] {FFFFFF}Вы не состоите в одной из семей!");

	if(Int_GetPlayerData(playerid, !"AntiFlood") > Global_Time)
		return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Не флуди!");

	new Cache:result = mysql_query(mysql, (str_f("SELECT * FROM ownable WHERE `family_id` = '%i' AND `Owner` = '%s' LIMIT 20;", FP_Data[playerid][F_FAMILY_ID], GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "name"))));

	global_str = "{CCCCCC}Транспорт	{CCCCCC}Состояние авто / масла / пробег	{CCCCCC}Статус	{CCCCCC}Оштрафован\n";

	for(new i, strafer_named[MAX_PLAYER_NAME], Float:milage; i < cache_num_rows(); i++)
	{
		cache_get_value_name_int(i, "ID", ShowCar[playerid][i][0]);
		cache_get_value_name_int(i, "Model", ShowCar[playerid][i][1]);
		cache_get_value_name(i, "ShtrafName", strafer_named);
		cache_get_value_name_float(i, "Milage", milage);

		f(mysql_string, 72, "%s%s", GetVehicleName(ShowCar[playerid][i][1], true), FP_Data[playerid][F_FAMILY_IDCAR_CARS][i] != INVALID_VEHICLE_ID ? (str_f("[carid: %i]", FP_Data[playerid][F_FAMILY_IDCAR_CARS][i])) : "");
		f(global_str, sizeof(global_str), "%s{%s}[%i] %s \t[ 100/100 | {56BF4D}хорошее{FFFFFF} | %0.2f м ]\t%s\n", global_str, FP_Data[playerid][F_FAMILY_IDCAR_CARS][i] != INVALID_VEHICLE_ID ? "D45B5B" : "FFFFFF", i + 1, mysql_string, milage, FP_Data[playerid][F_FAMILY_IDCAR_CARS][i] != INVALID_VEHICLE_ID && FP_Data[playerid][F_FAMILY_PLAYER_CARS][i] != INVALID_PLAYER_ID ? (str_f("{D45B5B}[ взял %s ]", PN(FP_Data[playerid][F_FAMILY_PLAYER_CARS][i]))) : (str_f("[ в наличии: с %i ранга ]\t[ %s ]", FP_Data[playerid][F_FAMILY_RANK_CARS][i], strafer_named)));
	}
	spdList(playerid, 0, cache_num_rows());

	if(GetFamilyAcces(PN(playerid), FP_Data[playerid][F_FAMILY_ID]))
		f(global_str, sizeof(global_str), "%s{ffff00}Всего доступно слотов: %i шт.	{cccccc}(%s)\n{ffff00}Заспавнить незанятый семейный транспорт", global_str, GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot"), GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot") < 19 ? "нажмите, чтобы докупить" : "максимум");
	
	SCM(playerid, COLOR_VALIK, !"ВАЖНО! Если Ваша семья проживает в Arizona Tower, то вертолет можно забрать на вертолетной площадке Arizona Tower на пикапе!");
	return SetPVarInt(playerid, !"AntiFlood", Global_Time + 2), SPD(playerid, 15219, DIALOG_STYLE_TABLIST_HEADERS, !"Автопарк семьи", global_str, !"Выбрать", !"Закрыть"), cache_delete(result);
}

stock GetFamilyVehicleCount(playerid)
{
	new count, familyCarOwnableIds[20];

	Int_UnPackMassive(GetFamilyDataString(FP_Data[playerid][F_FAMILY_ID], "autopark_car_ownable_id"), familyCarOwnableIds);

	for(new i; i < (GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot") == 20 ? 19 : GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot")); i++)
		if(familyCarOwnableIds[i] != -1 && FP_Data[playerid][F_FAMILY_IDCAR_CARS][i] == INVALID_VEHICLE_ID)
			count++;
	
	return count;
}

stock GetPlayerVehicleFamily(playerid)
{
	for(new i; i < (GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot") == 20 ? 19 : GetFamilyDataInt(FP_Data[playerid][F_FAMILY_ID], "autopark_slot")); i++)
		if(FP_Data[playerid][F_FAMILY_PLAYER_CARS][i] != INVALID_PLAYER_ID && FP_Data[playerid][F_FAMILY_PLAYER_CARS][i] == playerid) 
			return i;

	return -1;
}

stock destroyFamilyCar(playerid, slot_id)
{
	new carid = FP_Data[playerid][F_FAMILY_IDCAR_CARS][slot_id];

	if(carid == INVALID_VEHICLE_ID)
		return false;

	FP_Data[playerid][F_FAMILY_PLAYER_CARS][slot_id] = INVALID_PLAYER_ID;
	DestroyDynamic3DTextLabel(FP_Data[playerid][F_FAMILY_3DTEXT_CARS][slot_id]);
	DestroyVehicleEx(carid);
	VehicleInfo[carid][vFamily] = -1;
	FP_Data[playerid][F_FAMILY_IDCAR_CARS][slot_id] = INVALID_VEHICLE_ID;

	return true;
}

stock showPlayerBattlepassKey(playerid, const name[], const description[], const prize[] = "")
{
	if(strlen(prize))
		f(mysql_string, 256, ", %s", prize);

	executeEvent(playerid, 0, (str_f("window.executeEvent('event.battlepass.MenuPressKeyBattlePass', '[1, \"%s\",\"%s\", 1, 7%s]');", name, description, strlen(prize) ? mysql_string : "")));
	return CallTimeOutFunction("hidePlayerBattlepassKey", 6000, false, "d", playerid);
}

public: hidePlayerBattlepassKey(playerid)
	return executeEvent(playerid, 0, "window.executeEvent('event.battlepass.MenuPressKeyBattlePass', '[0, \"\", \"\", 0]');");

stock sendPlayerBattlepassAction(playerid, action_id = 0, count = 0)
{
	if(playerid == INVALID_PLAYER_ID)
		return false;

	if(battlePassQuests_data[playerid][action_id] < battlePassQuestInfo_data[action_id][data_Progress] && battlePassPlayer_data[playerid][2] < 10)
	{
		battlePassQuests_data[playerid][action_id] += count ? count : 1;

		if(battlePassQuests_data[playerid][action_id] >= battlePassQuestInfo_data[action_id][data_Progress])
		{
			SCMF(playerid, COLOR_YELLOW, "[Battle Pass] {ffffff}Вы успешно выполнили задание - '%s', поздравляем Вас!", battlePassQuestInfo_data[action_id][data_Name]);
			SCM(playerid, COLOR_YELLOW, !"[Battle Pass] {ffffff}Открыть меню можно с помощью кнопки 'B'");
			if(random(100) >= 60) AddItem(playerid, 7699, 1);
			SCM(playerid, COLOR_VALIK, !"");
			showPlayerBattlepassKey(playerid, "Награда за задание", (str_f("Вы успешно получили награду за задание %s", battlePassQuestInfo_data[action_id][data_Name])), "[{\"title\":\"PC-Coins\",\"sysName\":5067}]");

			battlePassPlayer_data[playerid][1] += battlePassQuestInfo_data[action_id][data_GiveExp];
			battlePassPlayer_data[playerid][2]++;

			if(battlePassPlayer_data[playerid][2] >= 10)
			{
				new hour, minute, day, month, year;
				gettime(hour, minute, _), getdate(year, month, day);
				battlePassPlayer_data[playerid][5] = Global_Time + ((year * month * day) / (hour * minute)) + 86400;
			}
		}
	}

	return true;
}

stock showDialogEditBottomColor(playerid, vehicleid)
{
	global_str = "";

	for(new i, colorName[][] = {"{000000}Отключить", "{FF0000}Красный", "{FF8000}Темно-Оранжевый", "{FFBF00}Оранжевый", "{FFFF00}Желтый", "{00FF00}Зеленый", "{00FFFF}Голубой", "{0000FF}Синий", "{FF00FF}Розовый", "{FF0077}Малиновый", "{FFFFFF}Белый"}; i < 11; i++)
		strcat(global_str, (str_f("{ff6666}[%i] %s%s\n", i + 1, vehicleTuning[vehicleid][5] == i ? "[»] " : "", colorName[i])));

	return SPD(playerid, 26208, 2, !"Цвет подсветки", global_str, !"Изменить", !"Отмена");
}

stock sendPlayerMenuKey(playerid, key_id, const text[], delay, bool:other = false)
{
	if(pTemp[playerid][showedKeyMenu])
		return false;

	new string[4][256];
	sscanf(text, "P<|>a<s[256]>[4]", string);

	if(GetString(string[1], "0"))
		string[1] = "";

	switch GetPlayerLauncher(playerid) do
	{
		case 0: 
			sendPlayerNotification(playerid, 0, string[0], string[3], delay);

		default: 
		{
			if(GetPlayerLauncher(playerid) == 1)
			{
				if(other) executeEvent(playerid, 0, (str_f("window.executeEvent('cef.modals.showModal', `[\"businessInfo\",{\"businessInfo\":{\"title\": \"%s\",\"description\":\"%s\",\"buttons\":[{\"title\": \"%s\",\"keyTitle\": \"%s\",\"keyCode\": 10}]}}]`);", string[0], string[1], string[2], string[3])));
				else executeEvent(playerid, 0, (str_f("window.executeEvent('cef.modals.showModal', `[\"interactionSidebar\",{\"title\": \"%s\",\"description\":\"%s\",\"timer\":%i,\"buttons\":[{\"title\": \"%s\",\"keyTitle\": \"%s\",\"buttonColor\": \"#ffffff\",\"backgroundColor\": \"rgba(171, 171, 171, 0.15)\"}]}]`);", string[0], string[1], delay, string[2], string[3])));
			}
			else 
			{
				new BitStream:bs = BS_New();

				BS_WriteValue(bs, 
					PR_UINT8, 220, 
					PR_UINT8, 68, 
					PR_UINT32, key_id,
					PR_STRING32, string[0]);

				PR_SendPacketEx(bs, playerid), BS_Delete(bs);
			}

			CallTimeOutFunction("closePlayerNotification", delay * 1000, false, "dd", playerid, other);
		}
	}

	return pTemp[playerid][showedKeyMenu] = true;
}

stock sendPlayerNotification(playerid, type, const title[], const body[], delay)
{
	switch GetPlayerLauncher(playerid) do
	{
		case 0:
		{
			#include textdraws/notification 

			for(new i; i < 17; i++)
				ShowPlayerTD(playerid, notificationTD[playerid][i]);

			return CallTimeOutFunction("closePlayerNotification", delay * 1000, false, "d", playerid);
		}	

		case 1: 
		{
			static const 
				cefNotificationName[][] = {"info", "success", "error", "halloween"};

			return executeEvent(playerid, 0, (str_f("window.executeEvent('event.notify.initialize', '[\"%s\",\"%s\",\"%s\",%i]');", cefNotificationName[type], title, body, delay * 1000)));
		}

		case 2: 
			return cursorPlayer(playerid, 6, true), eventMobile(playerid, {6, 0}, (str_f("{\"styleInt\":%i,\"title\":\"%s\",\"text\":\"%s\",\"duration\":%i}", type, title, body, delay * 1000)));
	}

	return true;
}

public: closePlayerNotification(playerid, other)
{
	if(!GetPlayerLauncher(playerid))
	{
		for(new i; i < 17; i++)
			if(IsPlayerTextDrawVisible(playerid, notificationTD[playerid][i]))
				DestroyPlayerTD(playerid, notificationTD[playerid][i]);
	}

	else if(GetPlayerLauncher(playerid) == 1)
		executeEvent(playerid, 0, (str_f("window.executeEvent('cef.modals.closeModal', `[\"%s\"]`);", other ? "businessInfo" : "interactionSidebar")));

	else 
		sendPlayerMenuKey(playerid, 0, "", 0);

	return pTemp[playerid][showedKeyMenu] = false;
}

stock IsItemTimeDeleted(itemid)
{
	for(new i, items[] = {800, 801, 802, 803, 804, 805, 806, 1423, 1934, 6160, 7363, 7421}; i < sizeof(items); i++)
		if(itemid == items[i]) return true;

	return false;
}

cmd:stanim(playerid)
	return ClearAnimationsEx(playerid);

cmd:givenumber(playerid, data[])
{
	if(!IsOsnovatel(playerid))
		return false;

	new number_Data[4][24];
	if(sscanf(data, "P<|>a<s[24]>[4]", number_Data)) 
		return SCM(playerid, COLOR_OLDRED, !"[Используйте по другому]: {ffffff}используй /givenumber тип номера|номер|регион|страна"), SCM(playerid, COLOR_OLDRED, !"[Типы]: {ffffff}0 - KZ, 1 - RUS, 2 - UA, 3 - BY"), SCM(playerid, COLOR_OLDRED, !"[Страны]: {ffffff}kz, rus, ua, by");

	if(strval(number_Data[0]) >= 4)
		return false;

	return AddItem(playerid, 7034, 1, 0, strval(number_Data[0]), 0, -1, 0, (str_f("%s|%s|%s", number_Data[1], number_Data[2], number_Data[3])));
}

stock GetMassiveArray(Data[], search_id, len = sizeof Data)
{
	for(new i; i < len; i++)
		if(Data[i] == search_id)
			return i;

	return -1;
}

stock findComponentID(itemid, type)
{
	new detal, model;

	static const findTypeNamed[][][] = 
	{
		{"STOCK", "DUCKTAIL", "REAPER", "DAYTONA", "CURSE"},
		{"DEBUG", "FOUR-SLOT", "SPEEDLINE", "TREMOR", "DOUBLE-V"},
		{"GRADIENT STOCK", "CARBON RING", "CARBON TWO", "GRADIENT TWO", "GRID"}
	};

	for(new i; i < 5; i++)
		if(TextFind(ItemsInfo[itemid][itemName], findTypeNamed[type][i]))
			detal = i;

	for(new i; i < sizeof(vehicleModelInfo); i++)
	{
		if(!TextFind(ItemsInfo[itemid][itemName], vehicleModelInfo[i][vehicleName]))
			continue;

		switch type do
		{
			case 0: model = vehicleModelInfo[i][vehicleWingData][detal];
			case 1: model = vehicleModelInfo[i][vehicleBonnetData][detal];
			case 2: model = vehicleModelInfo[i][vehicleExhaustData][detal];
		}
	}

	if(model <= 0)
		return false;

	return model;
}

stock IsAUniqueVehicle(vehicleid)
{
	new modelUnique[] = {14255, 6615, 6686, 14250, 14251, 14253, 14221, 6835, 12602, 14131, 6746, 14132, 14133, 6650, 16900, 16897, 16899, 16896, 16892, 16898, 16862, 15555};

	for(new i; i < sizeof(modelUnique); i++)
		if(GetVehicleModelEx(vehicleid) == modelUnique[i]) return true;

	return false;
}

stock IsVehicleUpsideDown(vehicleid)
{
    new Float:position[5];

    GetVehicleRotationQuat(vehicleid, position[0], position[1], position[2], position[3]);
    position[4] = atan2(2*((position[2]*position[3])+(position[0]*position[1])),(position[0]*position[0])-(position[1]*position[1])-(position[2]*position[2])+(position[3]*position[3]));

    return (position[4] > 90 || position[4] < -90);
}

stock BS_ReadWeaponsUpdate(BitStream:bs, data[PR_WeaponsUpdate], playerid)
{
	new numberOfBytes, numberOfSlots, slotId, weaponId, ammo;

	BS_GetNumberOfBytesUsed(bs, numberOfBytes);

	if (numberOfBytes > 5) {
		numberOfSlots = (numberOfBytes - 5) / 4;
	}

	BS_ReadValue(
		bs,
		PR_UINT16, data[PR_targetId],
		PR_UINT16, data[PR_targetActorId]
	);

	while (numberOfSlots--) {
		slotId = weaponId = ammo = 0;

		BS_ReadValue(
			bs,
			PR_UINT8, slotId,
			PR_UINT8, weaponId,
			PR_UINT16, ammo
		);

		if (slotId < PR_MAX_WEAPON_SLOTS) {
			data[PR_slotWeaponId][slotId] = weaponId;
			data[PR_slotWeaponAmmo][slotId] = ammo;
			data[PR_slotUpdated][slotId] = true;
		}
	}

	pTemp[playerid][pWeapon] = data[PR_slotWeaponId][slotId];
	pTemp[playerid][pAmmos] = data[PR_slotWeaponAmmo][slotId];
}

stock updatePlayerAim(playerid, aim_id)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, 220,
		PR_UINT8, 121,
		PR_STRING32, !aim_id ? !"siteM16" : (str_f("custom_crosshair_%i", aim_id)));

	return PR_SendPacketEx(bs, playerid), BS_Delete(bs);
}

IRawPacket:20(playerid, BitStream:bs)
{
    new
        PacketID,
        RPC_ID,
        NumberOfBitsOfData;

    BS_ReadValue(bs, PR_UINT8, PacketID, PR_UINT8, RPC_ID, PR_CUINT32, NumberOfBitsOfData);

    if (PacketID == 40 || (NumberOfBitsOfData >= 0x1FFFFF || NumberOfBitsOfData <= 0x80000000 || NumberOfBitsOfData < 0))
    {
        f(global_str, 80, " %s[%d] улыбается", PN(playerid), playerid);
		ProxDetector(25, playerid, global_str, COLOR_ME);
		f(global_str, sizeof(global_str), "[A] Хуесос %s[%d] пытался крашнуть сервер вьебите ему айпи!", PN(playerid), playerid);
		SendAdminsMessage(COLOR_RED, global_str);
        return false;
    }

    return true;
}

stock GetCostUpgradeBar(lvl)
	return (10000000 + lvl * 10000000);

stock GetStripeInfo(stripe_id, type)
{
	new stripe_return;

	switch stripe_id do
	{
		//acs stripe
		case 1..3: stripe_return = (type > 0 ? 0 : stripe_id);
		case 4..6: stripe_return = (type == 1 ? 1 : type == 2 ? 2 : stripe_id - 3);
		case 7..9: stripe_return = (type == 1 ? 2 : type == 2 ? 1 : stripe_id - 6);
		case 10..12: stripe_return = (type == 1 ? 3 : type == 2 ? 3 : stripe_id - 9);
		case 13..15: stripe_return = (type == 1 ? 4 : type == 2 ? 4 : stripe_id - 12);
		//skin stripe
		case 16: stripe_return = (type == 1 ? 5 : type == 2 ? 0 : stripe_id);
		case 17: stripe_return = (type == 1 ? 6 : type == 2 ? 11 : stripe_id);
		case 18: stripe_return = (type == 1 ? 7 : type == 2 ? 12 : stripe_id);
		case 19: stripe_return = (type == 1 ? 8 : type == 2 ? 13 : stripe_id);
		case 20: stripe_return = (type == 1 ? 9 : type == 2 ? 14 : stripe_id);
		case 21: stripe_return = (type == 1 ? 10 : type == 2 ? 15 : stripe_id);
		//other stripe
		case 22: stripe_return = (type == 1 ? 11 : type == 2 ? 16 : stripe_id);
		case 23: stripe_return = (type == 1 ? 12 : type == 2 ? 7 : 20);
	}

	return stripe_return;
}

stock GetAccessoryUpgradeBuff(itemid)
{
	switch(itemid)
	{
		case 7253: return 0;
		default:
		{
			if(ItemsInfo[itemid][itemAccesotySlot] == 1 or ItemsInfo[itemid][itemAccesotySlot] == 4) return 0;
			if(ItemsInfo[itemid][itemAccesotySlot] == 2 or ItemsInfo[itemid][itemAccesotySlot] == 3) return 2;
			if(ItemsInfo[itemid][itemAccesotySlot] == 0 or ItemsInfo[itemid][itemAccesotySlot] == 5) return 3;
		}
	}

	return 4;
}

stock GetAccessoryPlayerBuff(playerid, type)
{
	new amount_buff = 0;

	if(ItemsInfo[Inventory[playerid][0][InventoryMaxSlot - 1]][itemModel] > 311)
		amount_buff += FindAccessoryBuffUsed(Inventory[playerid][0][InventoryMaxSlot - 1], type, Inventory[playerid][4][InventoryMaxSlot - 1]);

	for(new i, max_buff_amount[] = {90, 0, 55, 82, 0, 160, 0, 0, 0}; i < 8; i++)
	{
		if(AksSlot[playerid][2][i] <= 10) 
			continue;

		amount_buff += FindAccessoryBuffUsed(AksSlot[playerid][0][i], type, AksSlot[playerid][1][i]);

		if(AksSlot[playerid][4][i] > 0 && type == GetStripeInfo(AksSlot[playerid][4][i], 2))
			amount_buff += GetStripeInfo(AksSlot[playerid][4][i], 0);

		if(type == 0)
			amount_buff += 3;

		if(AksSlot[playerid][1][i] == 13)
			amount_buff += (type == 4 ? 4 : type == 5 ? 9 : 0);

		if(max_buff_amount[type] != 0 && amount_buff > max_buff_amount[type])
			amount_buff = max_buff_amount[type];
	}

	return amount_buff;
}

stock FindAccessoryBuff(itemid, type)
{
	for(new i; i < sizeof(accesory_BuffData); i++)
		if(accesory_BuffData[i][accesoryItemId] == itemid && accesory_BuffData[i][accesoryBuffs][type] > 0)
			return accesory_BuffData[i][accesoryBuffs][type];

	return -1;
}

stock FindAccessoryBuffUsed(item, type, enchant)
{
	new buff[9];

	if(ItemsInfo[item][itemModel] > 311 && IsASkinInv(item))
	{	
		buff[4] += buff[5] += enchant;

		if(enchant == 3 or enchant == 5 or enchant == 8 or enchant >= 10)
			buff[0] += floatround(0.66666666666 * enchant, floatround_ceil), buff[1] += buff[2] += buff[3] += floatround(0.33333333333 * enchant, floatround_ceil);

		if(enchant >= 10 && buff[0] != 8)
			buff[0] = 8, buff[1] = buff[2] = buff[3] = 4;
	}

	if(FindAccessoryBuff(item, type) != -1) 
	{
		buff[type] += FindAccessoryBuff(item, type);

		if(type == 0)
			buff[0] += 1;
	}

	if(type == 5 && ItemsInfo[item][itemAccesotySlot] == 7)
		buff[5] += 5 * enchant;

	if(enchant >= 4)
	{
		if(GetAccessoryUpgradeBuff(item) == type)
		{
			switch type do
			{
				case 0: 
					buff[0] += floatround(2.222222 * (enchant - 4));

				case 2, 3: 
					buff[type] += 1 + (enchant - 4);
			}
		}
	}

	return buff[type];
}

stock UpdatePlayerMapIcon(playerid)
{
	for(new i; i < OWNABLEBIZES; i++) 
	{ 
		if(i < 68)
			if(IsValidDynamicMapIcon(OtherIcon[playerid][i]))
				DestroyDynamicMapIcon(OtherIcon[playerid][i]);

		if(i < MAX_OTELS)
			CreateDynamicMapIcon(OtelInfo[i][otEnter_X], OtelInfo[i][otEnter_Y], OtelInfo[i][otEnter_Z], !GetPlayerLauncher(playerid) ? 35:76, 0, -1, -1, playerid, 150.0);

		if(i < sizeof(parking))
			CreateDynamicMapIcon(parking[i][pEnter_x], parking[i][pEnter_y], parking[i][pEnter_z], !GetPlayerLauncher(playerid) ? 40:81, 0, -1, -1, playerid, 150.0);

		if(i < sizeof(GoFuel))
			CreateDynamicMapIcon(GoFuel[i][gfPos_X], GoFuel[i][gfPos_Y], GoFuel[i][gfPos_Z], !GetPlayerLauncher(playerid) ? 47:73, 0, -1, -1, playerid, 150.0);

		if(BizData[i][bEnter][0] == 0.0 && BizData[i][bEnter][1] == 0.0 && BizData[i][bEnter][2] == 0.0)
			continue;

		if(IsValidDynamicMapIcon(GetBizData(i, B_ICON_ID)))
			DestroyDynamicMapIcon(GetBizData(i, B_ICON_ID));

		if(GetString(BizData[i][bName], "Магазин 24/7")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 17:83, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Закусочная")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 14:97, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Магазин одежды")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 45:98, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Бар"))SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 48:49, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Нефтевышка")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 56:80, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Авто Сервис")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 27:120, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Мастерская одежды")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 46:109, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Склад Дальнобойщиков")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 35:95, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Стриптиз Клуб")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 38:88, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Магазин видеокарт")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 42:82, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Секонд-Хенд")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], !GetPlayerLauncher(playerid) ? 12:100, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Сельскохозяйственный магазин") && GetPlayerLauncher(playerid)) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], 71, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Амуниция/Тир")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], 6, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Аренда транспорта")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], 55, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Предприятие") && !GetPlayerLauncher(playerid)) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], 56, 0, -1, -1, playerid, 150.0));
		if(GetString(BizData[i][bName], "Магазин аксессуаров")) SetBizData(i, B_ICON_ID, CreateDynamicMapIcon(BizData[i][bEnter][0], BizData[i][bEnter][1], BizData[i][bEnter][2], 7, 0, -1, -1, playerid, 150.0));
	}

	OtherIcon[playerid][0] = CreateDynamicMapIcon(1742.9917,-1943.5721,13.5698, !GetPlayerLauncher(playerid) ? 56:118, -1, -1, -1, playerid);
	OtherIcon[playerid][1] = CreateDynamicMapIcon(1762.3525,-1898.5516,13.4879, !GetPlayerLauncher(playerid) ? 38:51, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][2] = CreateDynamicMapIcon(2861.2329,1279.8409,11.4040, !GetPlayerLauncher(playerid) ? 38:51, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][3] = CreateDynamicMapIcon(2229.3896,-1159.9827,25.8025, !GetPlayerLauncher(playerid) ? 38:51, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][4] = CreateDynamicMapIcon(-1971.0687,140.6956,27.6873, !GetPlayerLauncher(playerid) ? 38:51, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][5] = CreateDynamicMapIcon(-71.1408, 1223.8297, 19.6863, !GetPlayerLauncher(playerid) ? 38:51, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][6] = CreateDynamicMapIcon(-2040.3796,-114.5223,35.2579, !GetPlayerLauncher(playerid) ? 36:116, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][7] = CreateDynamicMapIcon(2169.4517,-1675.1003,15.0859, !GetPlayerLauncher(playerid) ? 23:45, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][8] = CreateDynamicMapIcon(1814.4722,-1995.8588,13.5544, !GetPlayerLauncher(playerid) ? 23:45, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][9] = CreateDynamicMapIcon(2286.6912,-2012.8440,13.5447, !GetPlayerLauncher(playerid) ? 23:45, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][10] = CreateDynamicMapIcon(2333.4478,-1922.6251,12.2991, !GetPlayerLauncher(playerid) ? 23:45, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][11] = CreateDynamicMapIcon(2175.9934,-1503.9364,23.9520, !GetPlayerLauncher(playerid) ? 23:45, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][12] = CreateDynamicMapIcon(1289.0641,-1271.5160,13.5400, !GetPlayerLauncher(playerid) ? 19:93, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][13] = CreateDynamicMapIcon(-1492.1329,920.0613,7.1875, !GetPlayerLauncher(playerid) ? 19:93, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][14] = CreateDynamicMapIcon(1879.1920,2290.5413,10.9799, !GetPlayerLauncher(playerid) ? 19:93, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][15] = CreateDynamicMapIcon(1495.4197,-1282.6329,14.5525, !GetPlayerLauncher(playerid) ? 19:74, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][16] = CreateDynamicMapIcon(1172.9362,-1328.2148,15.3986, !GetPlayerLauncher(playerid) ? 22:101, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][17] = CreateDynamicMapIcon(1607.4197,1815.2408,10.8203, !GetPlayerLauncher(playerid) ? 22:101, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][18] = CreateDynamicMapIcon(-2668.8684,640.1640,14.4531, !GetPlayerLauncher(playerid) ? 22:101, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][19] = CreateDynamicMapIcon(1481.1355,-1769.7352,18.7958, !GetPlayerLauncher(playerid) ? 52:91, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][20] = CreateDynamicMapIcon(-1703.9647,785.6906,25.7360, !GetPlayerLauncher(playerid) ? 52:91, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][21] = CreateDynamicMapIcon(2375.5674,2306.3022,8.1406, !GetPlayerLauncher(playerid) ? 52:92, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][22] = CreateDynamicMapIcon(2019.32,1007.7,10.8203, !GetPlayerLauncher(playerid) ? 44:66, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][23] = CreateDynamicMapIcon(1542.5132,-1675.6295,13.5546, !GetPlayerLauncher(playerid) ? 30:106, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][24] = CreateDynamicMapIcon(2287.0254,2432.3618,10.8203, !GetPlayerLauncher(playerid) ? 30:106, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][25] = CreateDynamicMapIcon(-1592.1372,715.8721,-5.2422, !GetPlayerLauncher(playerid) ? 30:106, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][26] = CreateDynamicMapIcon(1654.3445,-1657.2205,22.5156, !GetPlayerLauncher(playerid) ? 12:79, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][27] = CreateDynamicMapIcon(2637.8018,1185.2871,10.8203, !GetPlayerLauncher(playerid) ? 12:79, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][28] = CreateDynamicMapIcon(-1941.4008,459.7771,35.1719, !GetPlayerLauncher(playerid) ? 12:79, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][29] = CreateDynamicMapIcon(-35.9494, 1172.1107, 19.4280, !GetPlayerLauncher(playerid) ? 55:105, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][30] = CreateDynamicMapIcon(-25.4502, 1859.0801, 17.7132, !GetPlayerLauncher(playerid) ? 11:95, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][31] = CreateDynamicMapIcon(906.2801,-1221.0192,16.9766, !GetPlayerLauncher(playerid) ? 51:117, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][32] = CreateDynamicMapIcon(387.7626, 2539.7524, 16.9433, !GetPlayerLauncher(playerid) ? 36:116, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][33] = CreateDynamicMapIcon(-2071.5891,-2445.5686,30.7183, !GetPlayerLauncher(playerid) ? 51:108, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][34] = CreateDynamicMapIcon(2956.5833, -1971.8005, 3.5868, !GetPlayerLauncher(playerid) ? 9:127, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][35] = CreateDynamicMapIcon(-318.6733, 1048.2344, 20.3403, !GetPlayerLauncher(playerid) ? 37:101, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][36] = CreateDynamicMapIcon(649.3248,-1353.8834,13.5470, !GetPlayerLauncher(playerid) ? 11:67, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][37] = CreateDynamicMapIcon(1533.7008,-1014.1130,24.0538, !GetPlayerLauncher(playerid) ? 55:103, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][38] = CreateDynamicMapIcon(611.0340,-585.7634,17.2266, !GetPlayerLauncher(playerid) ? 30:106, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][39] = CreateDynamicMapIcon(-2456.1079,503.9311,30.0781, !GetPlayerLauncher(playerid) ? 30:72, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][40] = CreateDynamicMapIcon(1530.7826,-1074.1027,25.0625, !GetPlayerLauncher(playerid) ? 25:68, 0, -1, -1, playerid, 150.0);
    OtherIcon[playerid][41] = CreateDynamicMapIcon(1119.98, -1492.96, 15.80, !GetPlayerLauncher(playerid) ? 56:84, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][42] = CreateDynamicMapIcon(-1879.1533,-860.3239,32.0234, !GetPlayerLauncher(playerid) ? 55:106, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][43] = CreateDynamicMapIcon(-2143.0383, -930.0509, 32.0234, !GetPlayerLauncher(playerid) ? 55:104, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][44] = CreateDynamicMapIcon(-2487.1482,369.5434,35.1219, !GetPlayerLauncher(playerid) ? 16:87, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][45] = CreateDynamicMapIcon(-69.1524,92.9972,3.1172, !GetPlayerLauncher(playerid) ? 11:71, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][46] = CreateDynamicMapIcon(1976.6429,-2029.5635,13.5469, !GetPlayerLauncher(playerid) ? 51:117, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][47] = CreateDynamicMapIcon(1054.8196,2134.8713,10.8203, !GetPlayerLauncher(playerid) ? 51:117, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][48] = CreateDynamicMapIcon(1708.7831,1606.9760,9.8767, !GetPlayerLauncher(playerid) ? 55:103, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][49] = CreateDynamicMapIcon(2427.6968,1662.9028,10.8203, !GetPlayerLauncher(playerid) ? 36:116, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][50] = CreateDynamicMapIcon(2485.4040527344,2506.73046875,10.8203125, !GetPlayerLauncher(playerid) ? 55:103, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][51] = CreateDynamicMapIcon(2735.6653,-2448.3457,13.6432, !GetPlayerLauncher(playerid) ? 46:86, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][52] = CreateDynamicMapIcon(1168.6149,1364.8787,10.8125, !GetPlayerLauncher(playerid) ? 19:124, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][53] = CreateDynamicMapIcon(-1839.62, 138.98, 15.20, !GetPlayerLauncher(playerid) ? 19:34, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][54] = CreateDynamicMapIcon(178.4099,1101.4073,16.4498, !GetPlayerLauncher(playerid) ? 11:87, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][55] = CreateDynamicMapIcon(2258.0461,2765.0706,10.7141, !GetPlayerLauncher(playerid) ? 16:87, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][56] = CreateDynamicMapIcon(2201.7358,-2226.7476,13.4103, !GetPlayerLauncher(playerid) ? 16:87, 0, -1, -1, playerid, 150.0); 
	OtherIcon[playerid][57] = CreateDynamicMapIcon(321.3462,-29.1380,1.5781, !GetPlayerLauncher(playerid) ? 19:124, 0, -1, -1, playerid, 150.0);
  	OtherIcon[playerid][58] = CreateDynamicMapIcon(2180.7395,-1990.5044,13.5469, !GetPlayerLauncher(playerid) ? 11:87, 0, -1, -1, playerid, 150.0); 
    OtherIcon[playerid][59] = CreateDynamicMapIcon(-1864.7662,-1668.6857,21.7500, !GetPlayerLauncher(playerid) ? 11:87, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][60] = CreateDynamicMapIcon(-2136.0205,-77.7463,35.3203, !GetPlayerLauncher(playerid) ? 40:124, 0, -1, -1, playerid, 150.0); 
	OtherIcon[playerid][61] = CreateDynamicMapIcon(1988.3429,-1984.5186,13.6663, !GetPlayerLauncher(playerid) ? 11:95, 0, -1, -1, playerid, 150.0); 
	OtherIcon[playerid][62] = CreateDynamicMapIcon(1802.6573, 407.1559, 20.2294, !GetPlayerLauncher(playerid) ? 12:68, 0, -1, -1, playerid, 150.0); 
	OtherIcon[playerid][63] = CreateDynamicMapIcon(-256.7696, -1362.8536, 9.4421, !GetPlayerLauncher(playerid) ? 56:71, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][64] = CreateDynamicMapIcon(523.8312, 848.2282, -42.9189, !GetPlayerLauncher(playerid) ? 56:78, 0, -1, -1, playerid, 150.0); 
	OtherIcon[playerid][65] = CreateDynamicMapIcon(2154.7354, 1493.4109, 10.8203, !GetPlayerLauncher(playerid) ? 33:124, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][66] = CreateDynamicMapIcon(-2463.4805, 131.7678, 35.1719, !GetPlayerLauncher(playerid) ? 43:124, 0, -1, -1, playerid, 150.0);
	OtherIcon[playerid][67] = CreateDynamicMapIcon(562.1118, -1506.6832, 14.5493, !GetPlayerLauncher(playerid) ? 42:124, 0, -1, -1, playerid, 150.0);
}

stock playerEditAccessories_clear(playerid)
{
    new slot = pTemp[playerid][tSlot];

	if(AksSlot[playerid][5][slot])
	{
		AksSlot[playerid][5][slot] = false;

		SQL("DELETE FROM `edit_accessories` WHERE `ID` = '%d' AND `SkinId` = '%d' AND `Slot` = '%d' AND `ItemId` = '%d'", PI[playerid][pID], playerEditAccessories_data[playerid][slot][0], slot, playerEditAccessories_data[playerid][slot][1]);

		for(new i; i < 9; i++)
		{
			if(i < 3) playerEditAccessories_data[playerid][slot][i] = 0;
			playerEditAccessories_attach[playerid][slot][i] = 0.0;
		}
	}
	return SetAttachToSkin(playerid, ItemsInfo[pTemp[playerid][tItemId]][itemModel], pTemp[playerid][tItemId], slot);
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
		if(fScaleX > ItemsInfo[pTemp[playerid][tItemId]][itemAttachPosition][6]+0.4 || fScaleY > ItemsInfo[pTemp[playerid][tItemId]][itemAttachPosition][7]+0.6 || fScaleZ > ItemsInfo[pTemp[playerid][tItemId]][itemAttachPosition][8]+0.5)
		{
			SCM(playerid, COLOR_RED, !"[Ошибка] {ffffff}Размеры аксессуара слишком большие, сделайте объект меньше!");
			return playerEditAccessories_clear(playerid);
		}

		new slot = pTemp[playerid][tSlot];

		playerEditAccessories_data[playerid][slot][0] = GetPlayerSkin(playerid);
		playerEditAccessories_data[playerid][slot][1] = pTemp[playerid][tItemId];
		playerEditAccessories_data[playerid][slot][2] = boneid;
		playerEditAccessories_attach[playerid][slot][0] = fOffsetX;
		playerEditAccessories_attach[playerid][slot][1] = fOffsetY;
		playerEditAccessories_attach[playerid][slot][2] = fOffsetZ;
		playerEditAccessories_attach[playerid][slot][3] = fRotX;
		playerEditAccessories_attach[playerid][slot][4] = fRotY;
		playerEditAccessories_attach[playerid][slot][5] = fRotZ;
		playerEditAccessories_attach[playerid][slot][6] = fScaleX;
		playerEditAccessories_attach[playerid][slot][7] = fScaleY;
		playerEditAccessories_attach[playerid][slot][8] = fScaleZ;

		return SPD(playerid, 26023, DIALOG_STYLE_MSGBOX, !"Подтверждение", !"{FFFFFF}Мы фиксируем новые позиции вашего аксессуара, требуется ваше подтверждение.\n\nПосле подтверждения позиции будут сохранены и с ваш спишется {33AA33}100000 BTC!", !"Готово", !"Назад");
	}
	return true;
}

stock playerEditAccessories_load(playerid)
{
    new Cache:result = mysql_query(mysql, "SELECT * FROM `edit_accessories`");

	for(new i, slot; i < cache_num_rows(); i++)
	{
	    cache_get_value_name_int(i, "Slot", slot), AksSlot[playerid][5][slot] = true;
		cache_get_value_name_int(i, "ItemId", playerEditAccessories_data[playerid][slot][0]);
		cache_get_value_name_int(i, "SkinId", playerEditAccessories_data[playerid][slot][1]);
		cache_get_value_name_int(i, "BoneId", playerEditAccessories_data[playerid][slot][2]);
		cache_get_value_name(i, "Attach", global_str), Float_UnPackMassive(global_str, playerEditAccessories_attach[playerid][slot]);
	}

	return cache_delete(result);
}

stock SendVehiclePacketData(vehicleid, packet_id, bool:status, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
		PR_UINT8, 220,
		PR_UINT8, packet_id,
		PR_UINT16, vehicleid,
		PR_BOOL, status);

	if(forplayerid == INVALID_PLAYER_ID)
		PR_SendPacketToVehicleStream(bs, vehicleid);

	else
		PR_SendPacketEx(bs, forplayerid);

	return BS_Delete(bs);
}

stock DestroyPlayerPortal(playerid, type)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
		PR_UINT8, 220,
		PR_UINT8, 170,
		PR_UINT16, playerid,
		PR_UINT8, type);

	foreach(Player, i)
		PR_SendPacketEx(bs, i);

	return BS_Delete(bs);
}

stock CreatePlayerPortal(playerid, type, value, Float:X, Float:Y, Float:Z, Float:A, Float:F)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
		PR_UINT8, 220,
		PR_UINT8, 169,
		PR_UINT16, playerid,
		PR_UINT8, type,
		PR_FLOAT, X,
		PR_FLOAT, Y,
		PR_FLOAT, Z,
		PR_FLOAT, A,
		PR_UINT32, value,
		PR_FLOAT, F);

	foreach(Player, i)
		PR_SendPacketEx(bs, i);

	return BS_Delete(bs);
}
/*
cmd:test_cefcars_mobile(playerid)
{
	if(!GetString(PN(playerid), "Churikov") or GetPlayerLauncher(playerid) != 2)
		return false;

	format(global_str, 128, "SELECT * FROM ownable WHERE BINARY Owner = '%s'", PN(playerid));
	new Cache:result = mysql_query(mysql, global_str), count, carid, sqlid;

	count = cache_num_rows();

	if(!count)
		return SCMF(playerid, COLOR_OLDRED, "[Ошибка] {FFFFFF}У вас нет личного транспорта! {FFFF00}Доступно слотов для транспорта: {FFFFFF}%d", ValidNumberCars(playerid));

	cursorPlayer(playerid, 91, true);

	global_str = "";

	for(new idx, numberData[4][10]; idx < count; idx++)
	{
		if(cache_get_row_int(idx, 40, mysql) != -1)
			continue;

		ShowCar[playerid][idx][0] = cache_get_row_int(idx, 0, mysql), ShowCar[playerid][idx][1] = cache_get_row_int(idx, 1, mysql);

		carid = OnPlayerCarLoad( ShowCar[playerid][idx][0] ), sqlid = GetVehicleID( carid );

		if(carid > 0 && !(GetString(CarInfo[sqlid][cNumber], "Arizona ST")))
			sscanf(CarInfo[sqlid][cNumber], "P<,>a<s[10]>[4]", numberData);

		if(carid)
			f(mysql_string, sizeof(mysql_string), "{\"title\":\"%s\",\"icon\":\"icon-car-number\"},{\"title\":\"%s\",\"icon\":\"icon-fuel\"},", GetString(CarInfo[sqlid][cNumber], "Arizona ST") ? "Нет" : (str_f("[%s] %s (%s)", numberData[1], numberData[0], countryNumber[strval(numberData[3])])), !GetVehicleKindFuel(carid) ? "ДВЗ" : "Топливо");

		eventMobile(playerid, {91, 0}, (str_f("[{\"id\":%i,\"title\":\"%s\",\"sysName\":\"%i.png\",\"statusButton\":0,\"nameButton\":\"SPAWN\",\"status\":\"%s\",\"labels\":[%s{\"title\":\"%s\",\"icon\":\"icon-id\"}]}]", idx, GetVehicleName(cache_get_row_int(idx, 1, mysql), true), 400 + SearchVehicleMassiveID(cache_get_row_int(idx, 1, mysql)), carid ? "loaded" : "notLoaded", carid ? mysql_string : "", carid ? (str_f("%i", carid)) : "Не загружена")));
	}

	eventMobile(playerid, {91, 1}, IntToStr(count)),
	eventMobile(playerid, {91, 2}, IntToStr(ValidNumberCars(playerid)));

	return cache_delete(result);
}*/

stock ShowCentralMarketPurchaseItems(playerid, page = 0, delete = false)
{
    if(pTemp[playerid][pCentralMarketId][0] == -1)
        return false;

    new Pos[2];
    global_str = "{777777}Название	{B6B425}Скупаете{777777}	{37B625}Стоимость	\n{73B461}Избранное для скупки\n", Pos[0] = 1 + (20 * page), Pos[1] = 20 + (20 * page);

    if(Pos[1] >= sizeof(ItemsInfo))
        Pos[1] = sizeof(ItemsInfo);

    pTemp[playerid][pCentralMarketId][2] = delete;

    for(new i = Pos[0], crCheck, count; i < Pos[1]; i++)
    {
        if(!ItemsInfo[i][itemTradeable])
            continue;

        crCheck = GetMassiveArray(CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][1], i);

        if(crCheck != -1)
            f(mysql_string, 48, "%i BTC%s", CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][2][crCheck], CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][3][crCheck] > 1 ? (str_f(" / %i BTC", CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][2][crCheck] * CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][3][crCheck])) : "");
       
        f(global_str, sizeof(global_str), "%s{%s}%s	{%s}%s	{%s}%s\n", global_str, crCheck == -1 ? "777777" : "FFFFFF", ItemsInfo[i][itemName], crCheck == -1 ? "B6B425" : CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][3][crCheck] > 1 ? "FFFFFF" : "FFF557", crCheck == -1 ? "" : CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][3][crCheck] > 1 ? (str_f("%i шт.", CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][1][3][crCheck])) : "", crCheck == -1 ? "37B625" : "67BE55", crCheck == -1 ? "" : mysql_string);
        spdList(playerid, count, i), count++;
   }

    strcat(global_str, "{ffffff}<<< Предыдущая страница\nСледующая страница >>>\n");
    return spdList(playerid, 0, page), SPD(playerid, 3050, DIALOG_STYLE_TABLIST_HEADERS, (str_f("Страница %i/355", page + 1)), global_str, !"Выбрать", !"Назад"); 
}

stock CentralMarketReject(playerid)
{
	if(pTemp[playerid][pCentralMarketId][0] == -1 or CentralMarket[pTemp[playerid][pCentralMarketId][0]][crOwnedId] != playerid)
		return false;

	CentralMarket[pTemp[playerid][pCentralMarketId][0]][crStatusId] = 0;
	CentralMarket[pTemp[playerid][pCentralMarketId][0]][crOwnedId] = INVALID_PLAYER_ID;

	for(new i; i < 300; i++)
        CentralMarketItems[pTemp[playerid][pCentralMarketId][0]][pTemp[playerid][pCentralMarketSelectId]][1][i] = 0;
	
	SetObjectMaterialText(CentralMarket[pTemp[playerid][pCentralMarketId][0]][crObject], (str_f("Номер %i. {30A332}Свободная!", pTemp[playerid][pCentralMarketId][0] + 1)), 1, 120, "Comic Sans MS", 40, 0, 0xffffffff, 4278190080, 1);
	return pTemp[playerid][pCentralMarketId][0] = -1, SCM(playerid, COLOR_RED, !"[Информация] {FFFFFF}Вы отказались от аренды лавки!");
}

stock IsALimitedKangaroo(itemid)
{
	for(new i; i < sizeof(kangarooVehicleInfo); i++)
		if(kangarooVehicleInfo[i][kItemId] == itemid)
			return true;

	return false;
}

stock GetHandlingItemType(item)
{
	for(new i; i < sizeof(HandlingDetail_data); i++)
		if(HandlingDetail_data[i][data_ItemID] == item)
			return HandlingDetail_data[i][data_Type];

	return -1;
}

stock changeVehicleHandlingParametrs(vehicleid, forplayerid = INVALID_PLAYER_ID, ...)
{
	new carmassive_id = SearchVehicleMassiveID(GetVehicleModelEx(vehicleid)), BitStream:bs = BS_New();

	if(vehicleModelInfo[carmassive_id][vehicleHandlingData][0] == 0.0) 
		return false;

	BS_WriteValue(bs, 
		PR_UINT16, vehicleid, 
		PR_UINT16, 0, 
		PR_UINT8, 0,
		PR_UINT8, numargs() - 2);

	for(new i = 2; i < numargs(); i++)
	{
		if(vehicleModelInfo[carmassive_id][vehicleHandlingData][getarg(i)] == 0.0 or VehicleInfo[vehicleid][vHandling][getarg(i)] == 0.0) 
			continue;

		BS_WriteValue(bs, 
			PR_UINT8, getarg(i) + 1,
			PR_FLOAT, vehicleModelInfo[carmassive_id][vehicleHandlingData][getarg(i)] + VehicleInfo[vehicleid][vHandling][getarg(i)]);
	}
	
	if(forplayerid == INVALID_PLAYER_ID)
		PR_SendRPCToVehicleStream(bs, vehicleid, 161);

    else PR_SendRPC(bs, forplayerid, 161);

	return BS_Delete(bs);
}

cmd:plpos(playerid, params[])
{
    extract params -> new player:target, Float:coords[3]; else
        return SCM(playerid, COLOR_OLDRED, !"Используйте: /plpos [id] [x] [y] [z]");

    SCMF(target, COLOR_LIGHTBLUE, " Вы были телепортированы администратором %s[%d] в координаты %.3f, %.3f, %.3f.", PN(playerid), playerid, coords[0], coords[1], coords[2]);
    SAMF(COLOR_GREY, "[A] %s[%d] телепортировал игрока %s[%d] в координаты %.3f, %.3f, %.3f.", PN(playerid), playerid, PN(target), target, coords[0], coords[1], coords[2]);

    return UpdatePlayerPos(target, coords[0], coords[1], coords[2]);
}

stock IsLegendAccessory(itemid)
{
	for(new i, legend_item[] = {7410, 7846}; i < sizeof(legend_item); i++)
		if(itemid == legend_item[i])
			return true;

	return false;
}

public: SetVehicleServerCounts()
{
	new global_VehicleInfo;

	for(new i; i < sizeof(vehicleModelInfo); i++)
		vehicleModelInfo[i][vehicleServerCount] = 0;
	
	for(new s; s < cache_num_rows(); s++)
	{
		cache_get_value_name_int(s, !"Model", global_VehicleInfo);

		if(SearchVehicleMassiveID(global_VehicleInfo) != -1)
			vehicleModelInfo[SearchVehicleMassiveID(global_VehicleInfo)][vehicleServerCount]++;
	}

	return true;
}

public: SetItemsServerCounts()
{
	new global_ItemInfo[3][InventoryMaxSlot];

	for(new i; i < sizeof(ItemsInfo); i++)
		ItemsInfo[i][itemServerCount] = 0;

	for(new i; i < cache_num_rows(); i++)
	{
		cache_get_value_name(i, !"InventoryItem", global_str), Int_UnPackMassive(global_str, global_ItemInfo[0]);
		cache_get_value_name(i, !"InventoryCount", global_str), Int_UnPackMassive(global_str, global_ItemInfo[1]);
		cache_get_value_name(i, !"AccessoryItem", global_str), Int_UnPackMassive(global_str, global_ItemInfo[2]);
	
		for(new x; x < InventoryMaxSlot; x++)
		{
			if(!global_ItemInfo[0][x] or global_ItemInfo[0][x] >= sizeof(ItemsInfo))
				continue;

			ItemsInfo[global_ItemInfo[0][x]][itemServerCount] += global_ItemInfo[1][x];
		}

		for(new x; x < 8; x++)
		{
			if(!global_ItemInfo[2][x] or global_ItemInfo[2][x] >= sizeof(ItemsInfo))
				continue;
				
			ItemsInfo[global_ItemInfo[2][x]][itemServerCount]++;
		}
	}

	return true;
}

stock LoadServerConfig()
{
	if !fexist("server_config.ini") *then
		return print("file 'server_config.ini' not found");
	
	new GetFile = ini_openFile("server_config.ini");

	ini_getString(GetFile, "mysqlHost", mysql_data[0]);
	ini_getString(GetFile, "mysqlUser", mysql_data[1]);
	ini_getString(GetFile, "mysqlPassword", mysql_data[2]);
	ini_getString(GetFile, "mysqlTable", mysql_data[3]);
	ini_getString(GetFile, "serverSite", Setting_Server[3]);
	ini_getString(GetFile, "serverForum", Setting_Server[4]);
	ini_getString(GetFile, "serverVkontakte", Setting_Server[5]);
	ini_getString(GetFile, "serverTelegram", Setting_Server[6]);
	ini_getString(GetFile, "serverName", Setting_Server[7]);
	f(VipNames[7], 50, Setting_Server[7]);
	ini_getString(GetFile, "server8LvlVipName", VipNames[8]);
	ini_getString(GetFile, "vkApiToken", connection_data[0]);
	ini_getString(GetFile, "vkAccessKey", connection_data[1]);

	return ini_closeFile(GetFile);
}

cmd:gotopilot(playerid)
{
	SetPlayerPos(playerid, 1521.598755, 1299.286011, 10.912500);
	SetPlayerInterior(playerid, 139);
	SetPlayerVirtualWorld(playerid, 1);
}

cmd:sendpilot(playerid, data[])
{
	extract data -> new string:message[50], delay, Float:start_size, Float:add_size; else
		return SCM(playerid, -1, "arg null");

	return sendPlayerPilotAction(playerid, message, delay, start_size, add_size);
}

stock sendPlayerPilotAction(playerid, message[], delay, Float:start_size, Float:add_size)
{
	pilotMessageTextdraw[playerid][2] = CreatePlayerTextDraw(playerid, 319.141876, 314.400085, "usebox");
	PlayerTextDrawLetterSize(playerid, pilotMessageTextdraw[playerid][2], 0.053411, 0.962129);
	PlayerTextDrawTextSize(playerid, pilotMessageTextdraw[playerid][2], 217.267883, 104.416687);
	PlayerTextDrawAlignment(playerid, pilotMessageTextdraw[playerid][2], 2);
	PlayerTextDrawColor(playerid, pilotMessageTextdraw[playerid][2], 0x00000000);
	PlayerTextDrawUseBox(playerid, pilotMessageTextdraw[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, pilotMessageTextdraw[playerid][2], 0x00000066);
	PlayerTextDrawSetShadow(playerid, pilotMessageTextdraw[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, pilotMessageTextdraw[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, pilotMessageTextdraw[playerid][2], 0x000000FF);
	PlayerTextDrawFont(playerid, pilotMessageTextdraw[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, pilotMessageTextdraw[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, pilotMessageTextdraw[playerid][2], 0);	
	
	pilotMessageTextdraw[playerid][0] = CreatePlayerTextDraw(playerid, 267.464081, 315.566742, "usebox");
	PlayerTextDrawLetterSize(playerid, pilotMessageTextdraw[playerid][0], 0.000000, 0.685220);
	PlayerTextDrawTextSize(playerid, pilotMessageTextdraw[playerid][0], 263.651520, 0.000000);
	PlayerTextDrawAlignment(playerid, pilotMessageTextdraw[playerid][0], 1);
	PlayerTextDrawColor(playerid, pilotMessageTextdraw[playerid][0], 0x00000000);
	PlayerTextDrawUseBox(playerid, pilotMessageTextdraw[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, pilotMessageTextdraw[playerid][0], 0x1F9BECFF);
	PlayerTextDrawSetShadow(playerid, pilotMessageTextdraw[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, pilotMessageTextdraw[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, pilotMessageTextdraw[playerid][0], 0x000000FF);
	PlayerTextDrawFont(playerid, pilotMessageTextdraw[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, pilotMessageTextdraw[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, pilotMessageTextdraw[playerid][0], 0);

	pilotMessageTextdraw[playerid][1] = CreatePlayerTextDraw(playerid, 318.641174, 293.883209, message);
	PlayerTextDrawLetterSize(playerid, pilotMessageTextdraw[playerid][1], 0.445314, 1.600000);
	PlayerTextDrawTextSize(playerid, pilotMessageTextdraw[playerid][1], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, pilotMessageTextdraw[playerid][1], 2);
	PlayerTextDrawColor(playerid, pilotMessageTextdraw[playerid][1], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, pilotMessageTextdraw[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, pilotMessageTextdraw[playerid][1], 0x80808080);
	PlayerTextDrawSetShadow(playerid, pilotMessageTextdraw[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, pilotMessageTextdraw[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, pilotMessageTextdraw[playerid][1], 0x00000033);
	PlayerTextDrawFont(playerid, pilotMessageTextdraw[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, pilotMessageTextdraw[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, pilotMessageTextdraw[playerid][1], 0);

	for(new i; i < 3; i++) 
		PlayerTextDrawShow(playerid, pilotMessageTextdraw[playerid][i]);

	return pilotMessageTimer[playerid] = CallTimeOutFunction("updatePlayerPilotAction", 250, false, "iffi", playerid, start_size, add_size, delay);
}

public: updatePlayerPilotAction(playerid, Float:start_size, Float:add_size, delay)
{
	SCMF(playerid, -1, "start_size: %f, add_size: %f", start_size, add_size);

	if(start_size + add_size >= 370.151519)
		return KillTimer(pilotMessageTimer[playerid]);

	PlayerTextDrawTextSize(playerid, pilotMessageTextdraw[playerid][0], start_size + add_size, 0.000000);
	pilotMessageTimer[playerid] = CallTimeOutFunction("updatePlayerPilotAction", delay * 100, false, "iffi", playerid, start_size + add_size, add_size, delay);

	return PlayerTextDrawHide(playerid, pilotMessageTextdraw[playerid][0]), ShowPlayerTD(playerid, pilotMessageTextdraw[playerid][0]);	
}

stock sendInventoryCefSlotUpdate(playerid, item, amount, cell_type = 0, slot = 0, text[] = "", id = -1)
{
	if(!(PI[playerid][pCustomInterface][4] && GetPlayerLauncher(playerid) == 1))
		return false;

	new time;

	if(strlen(text) < 3)
		time = GetInventoryItemText(playerid, cell_type, id, slot, mysql_string, false, true);
	
	return executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":%i,\"items\":[{\"slot\":%i%s}]}}]`);", cell_type == 0 ? 1 : cell_type == 1 ? 5 : cell_type == 2 ? 7 : 8, slot, !item ? "" : (str_f(",\"item\":%i,\"amount\":%i,\"text\":\"%s\",\"background\":%i,\"available\":1,\"time\":%i", item, amount, strlen(text) < 3 ? mysql_string : text, ItemsInfo[item][itemColor], time)))));
}

stock sendInventoryCefOtherItems(playerid, entered_id, cell_type, text[] = "", number_1 = 0, number_2 = 14)
{
	global_str = "", mysql_string = "";

	new types[] = {5, 7, 8, 28, -1, -1, 13};

	if(number_2 > (cell_type == 1 ? 90 : cell_type == 2 ? 150: cell_type == 3 or cell_type == 7 ? 30 : 300)) 
		number_2 = (cell_type == 1 ? 90 : cell_type == 2 ? 150: cell_type == 3 or cell_type == 7 ? 30 : 300);

	for(new i = number_1; i < number_2; i++)
	{
		if(strlen(text) < 3)
			GetInventoryItemText(playerid, cell_type, 0, i, mysql_string);

		f(global_str, sizeof(global_str), "%s{\"slot\":%i%s%s", global_str, i, !(cell_type == 1 ? HouseInfo[entered_id][hItem][i] : cell_type == 2 ? MusorInfo[entered_id][mItem][i] : cell_type == 3 ? TrunkInfo[entered_id][tItem][i] : cell_type == 7 && i < 15 ? AccessoryKioskData[entered_id][acsKioskAccessory][i] : 0) ? "}" : (str_f(",\"item\":%i,\"amount\":%i,\"text\":\"%s\",\"background\":%i,\"available\":1,\"time\":0}", (cell_type == 1 ? HouseInfo[entered_id][hItem][i] : cell_type == 2 ? MusorInfo[entered_id][mItem][i] : cell_type == 3 ? TrunkInfo[entered_id][tItem][i] : cell_type == 7 && i < 15 ? AccessoryKioskData[entered_id][acsKioskAccessory][i] : 0), (cell_type == 1 ? HouseInfo[entered_id][hItemCount][i] : cell_type == 2 ? MusorInfo[entered_id][mItemCount][i] : cell_type == 3 ? TrunkInfo[entered_id][tItemCount][i] : 1), strlen(text) < 3 ? mysql_string : text, ItemsInfo[(cell_type == 1 ? HouseInfo[entered_id][hItem][i] : cell_type == 2 ? MusorInfo[entered_id][mItem][i] : cell_type == 3 ? TrunkInfo[entered_id][tItem][i] : cell_type == 7 && i < 15 ? AccessoryKioskData[entered_id][acsKioskAccessory][i] : 0)][itemColor])), i == number_2-1 ? ("") : (","));
	}

	executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":%i,\"items\":[%s]}}]`);", types[cell_type - 1], global_str)));

	if(number_2 < (cell_type == 1 ? 90 : cell_type == 2 ? 150: cell_type == 3 or cell_type == 7 ? 30 : 300)) 
		return sendInventoryCefOtherItems(playerid, entered_id, cell_type, text, number_2, number_2 + 14);

	else
	{
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":1,\"data\":{\"name\":\"%s\",\"type\":%i,\"buttons\":%i}}]`);", cell_type == 1 ? "Шкаф" : cell_type == 2 ? "Мусорка" : cell_type == 3 ? "Багажник" : cell_type == 7 ? "Магазин" : "На продаже", types[cell_type - 1], getInventoryPlayerButton(playerid))));

		if(cell_type > 3)
			executeEvent(playerid, 0, !"window.executeEvent('event.inventory.setLavkaVisible', '[true]');");

		else
			executeEvent(playerid, 0, "window.executeEvent('event.inventory.updateCharacterTab',`[\"warehouse\"]`);");
	}

	return true;
}

public: sendInventoryCefItems(playerid, number_1, number_2)
{
	global_str = "", mysql_string = "";

	if(number_2 > PI[playerid][pInvCell]) 
		number_2 = PI[playerid][pInvCell];

	for(new i = number_1; i < number_2; i++)
		GetInventoryItemText(playerid, 0, 0, i, mysql_string),
		f(global_str, sizeof(global_str), "%s{\"slot\":%i%s%s", global_str, i, !Inventory[playerid][0][i] ? "}" : (str_f(",\"item\":%i,\"amount\":%i,\"text\":\"%s\",\"background\":%i,\"available\":1,\"time\":%i}", Inventory[playerid][0][i], Inventory[playerid][1][i], mysql_string, ItemsInfo[Inventory[playerid][0][i]][itemColor], Inventory[playerid][6][i])), i == number_2-1 ? ("") : (","));

	executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":1,\"items\":[%s]}}]`);", global_str)));

	if(number_2 < PI[playerid][pInvCell]) 
		return sendInventoryCefItems(playerid, number_2, number_2 + 14);

	return true;
}

stock sendInventoryCEF(playerid)
{
	executeEvent(playerid, 0, "window.executeEvent('event.setActiveView', '[\"Inventory\"]');"), 
	executeEvent(playerid, 0, "window.executeEvent('event.inventory.setPlayerInventoryVisible', '[\"true\"]');");

	executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory',`[{\"action\":1,\"data\":{\"skin\":{\"model\":%i,\"background\":%i}%s,\"buttons\":%i}}]`);", IsPlayerInAnyVehicle(playerid) && IsAOwnableCar(GetPlayerVehicleID(playerid)) ? 400 + SearchVehicleMassiveID(GetVehicleModelEx(GetPlayerVehicleID(playerid))) : ItemsInfo[GetSkinInfo(GetSkinInfo(GetPlayerSkin(playerid), 2), 1)][itemModel], IsPlayerInAnyVehicle(playerid) && IsAOwnableCar(GetPlayerVehicleID(playerid)) ? -1 : ItemsInfo[GetSkinInfo(GetSkinInfo(GetPlayerSkin(playerid), 2), 1)][itemColor], IsPlayerInAnyVehicle(playerid) && IsAOwnableCar(GetPlayerVehicleID(playerid)) ? ",\"oil\":100,\"health\":100,\"max_health\":100" : (str_f(",\"security\":%i", IsPlayerHaveBodyguard(playerid) ? 1 : 0)), getInventoryPlayerButton(playerid))));

	if(IsPlayerInAnyVehicle(playerid) && IsAOwnableCar(GetPlayerVehicleID(playerid)))
	{
		new numberData[4][10];

		if(!GetString(VehicleInfo[GetPlayerVehicleID(playerid)][vNumber], "Arizona ST"))
			sscanf(VehicleInfo[GetPlayerVehicleID(playerid)][vNumber], "P<,>a<s[10]>[4]", numberData);
			
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":18,\"items\":[{\"slot\":0%s}]}}]`);", CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][21] ? (str_f(",\"item\":%i,\"amount\":1,\"text\":\"\",\"background\":%i,\"available\":1,\"time\":0", CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][21], ItemsInfo[CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][21]][itemColor])) : "")));
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":19,\"items\":[{\"slot\":0%s}]}}]`);", CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][20] ? (str_f(",\"item\":%i,\"amount\":1,\"text\":\"\",\"background\":%i,\"available\":1,\"time\":0", CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][20], ItemsInfo[CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][20]][itemColor])) : "")));
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":36,\"items\":[{\"slot\":0%s}]}}]`);", CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][22] ? (str_f(",\"item\":%i,\"amount\":1,\"text\":\"(%s) %s\",\"background\":%i,\"available\":1,\"time\":0", CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][22], numberData[1], numberData[0], ItemsInfo[CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][22]][itemColor])) : "")));
		
		global_str = "";

		for(new i; i < 10; i++)
			f(global_str, sizeof(global_str), "%s{\"slot\":%i%s%s", global_str, i, CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][i] == 0 ? "}" : (str_f(",\"item\":%i,\"amount\":1,\"text\":\"\",\"background\":%i,\"available\":1,\"time\":0}", CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][i], ItemsInfo[CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][i]][itemColor])), i == 9 ? ("") : (","));
		
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":12,\"items\":[%s]}}]`);", global_str)));
		
		global_str = "";

		for(new i; i < 10; i++)
			f(global_str, sizeof(global_str), "%s{\"slot\":%i%s%s", global_str, i, CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][i + 10] == 0 ? "}" : (str_f(",\"item\":%i,\"amount\":1,\"text\":\"\",\"background\":%i,\"available\":1,\"time\":0}", CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][i + 10], ItemsInfo[CarInfo[GetVehicleID(GetPlayerVehicleID(playerid))][cInvCell][i + 10]][itemColor])), i == 9 ? ("") : (","));
		
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":23,\"items\":[%s]}}]`);", global_str)));
		executeEvent(playerid, 0, "window.executeEvent('event.inventory.updateCharacterTab',`[\"vehicle\"]`);");
	}
	else
	{
		executeEvent(playerid, 0, "window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":10,\"items\":[{\"slot\":0},{\"slot\":1},{\"slot\":2},{\"slot\":3},{\"slot\":4},{\"slot\":5}]}}]`);");

		global_str[0] = EOS;

		for(new i; i < 6; i++)
			f(global_str, 1024, "%s{\"slot\":%i%s%s", global_str, i, !AksSlot[playerid][0][i] ? "}" : (str_f(",\"item\":%i,\"amount\":1,\"text\":\"%s\",\"background\":%i,\"available\":1,\"time\":0}", AksSlot[playerid][0][i], !AksSlot[playerid][1][i] ? "" : (str_f("+%i", AksSlot[playerid][1][i])), ItemsInfo[AksSlot[playerid][0][i]][itemColor])), i == 5 ? "" : ",");

		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":2,\"items\":[%s]}}]`);", global_str)));

		global_str[0] = EOS;

		for(new i; i < 2; i++)
			f(global_str, 1024, "%s{\"slot\":%i%s%s", global_str, i, !AksSlot[playerid][0][i] ? "}" : (str_f(",\"item\":%i,\"amount\":1,\"text\":\"%s\",\"background\":%i,\"available\":1,\"time\":0}", AksSlot[playerid][0][!i ? 7 : 6], !AksSlot[playerid][1][!i ? 7 : 6] ? "" : (str_f("+%i", AksSlot[playerid][1][!i ? 7 : 6])), ItemsInfo[AksSlot[playerid][0][!i ? 7 : 6]][itemColor])), i == 1 ? "" : ",");

		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":17,\"items\":[%s]}}]`);", global_str)));
		executeEvent(playerid, 0, (str_f("window.executeEvent('event.inventory.playerInventory', `[{\"action\":0,\"data\":{\"type\":22,\"items\":[{\"slot\":0%s}]}}]`);", GetPlayerSkin(playerid) == 18 ? "" : (str_f(",\"item\":%i,\"amount\":1,\"text\":\"ID:%i\",\"available\":1,\"time\":0", GetSkinInfo(GetSkinInfo(GetPlayerSkin(playerid), 2), 1), GetSkinInfo(GetPlayerSkin(playerid), 2))))));
		executeEvent(playerid, 0, "window.executeEvent('event.inventory.updateCharacterTab',`[\"character\"]`);");
	}

	return cursorPlayer(playerid, 0, true);
}

cmd:test_int(playerid)
	return sendInventoryCEF(playerid);

stock showServerInterfaceSettings(playerid)
{
	global_str = "";

	new serverInterfaceNamed[][] = {"Старые SAMP диалоги"};

	for(new i; i < sizeof(serverInterfaceNamed); i++)
		f(global_str, sizeof(global_str), "%s{cccccc}%s\t[ %s ]", global_str, serverInterfaceNamed[i], serverInterfaceSettings[i] ? "{AAE952}Активно{FFFFFF}" : "{E95252}Неактивно{FFFFFF}");

	return SPD(playerid, 26504, DIALOG_STYLE_LIST, !"Настройка интерфейсов", global_str, !"Изменить", !"Закрыть");
}

cmd:interface_settings(playerid)
{
	if(!IsOsnovatel(playerid))
		return false;

	return showServerInterfaceSettings(playerid);
}

stock sendInventoryCEFButtonBits(buttons[])
{
	new inventoryCefButtonsData[][][] = 
		{ {1, "Use"}, {32768, "Put"}, {2, "Put_on"}, {65536, "Take"}, {256, "Take_on"}, {64, "Item_open"}, {128, "Item_close"}, {4, "Drop"}, {8, "Split"}, {512, "Clear"}, {1024, "Install"}, {2048, "Edit"}, {4096, "Open"}, {8192, "Rent"}, {16384, "Color"}, {16, "Info"}, {32, "Close"}, {131072, "Sell"}, {262144, "PutInGift"} }, string_data[6][16], bits;

	sscanf(buttons, "P<|>a<s[16]>[6]", string_data);

	for(new id; id < 6; id++)
	{
		if(isnull(string_data[id]))
			continue;

		for(new i; i < sizeof(inventoryCefButtonsData); i++)
			if(GetString(string_data[id], inventoryCefButtonsData[i][1]))
				bits += inventoryCefButtonsData[i][0][0];
	}

	return bits;
}

stock useableAccessory(playerid, slot)
{
	if(AksVidStatus[playerid][slot])
	{
		if(bool:AksDel[playerid][slot] != true) return false;

		switch(AksSlot[playerid][0][slot])
		{
			case 168:
			{
				if(!GetPlayerLauncher(playerid))
					return SCM(playerid, COLOR_OLDRED, !"[Ошибка]{FFFFFF} Скейт доступен только с лаунчера!");
					
				if(!addskate[playerid])
				{
					RemovePlayerAttachedObject(playerid, 5);
					SetPlayerAttachedObject(playerid, 6, 19878, 6, -0.055999, 0.013000, 0.000000, -84.099983, 0.000000, -106.099998, 1.000000, 1.000000, 1.000000);
					SCM(playerid, COLOR_GREEN, !"Вы взяли скейт в руку, чтобы его использовать зажмите 'КЛАВИШУ ДЛЯ БЕГА'");
					addskate[playerid] = 1;
				}
				else
				{
					RemovePlayerAttachedObject(playerid, 6);
					SetPlayerAccessory(playerid, AksSlot[playerid][0][5], 5);
					addskate[playerid] = 0;
				}
			}
			
			case 2181:
			{
				if(CountVehicles() >= MAX_VEHICLES - 1 or AnimPlayed{playerid} or !(GetPlayerState(playerid) == 1)) return SendErrorMessage(playerid);

				new Float:X, Float:Y, Float:Z, Float:A;
				GetPlayerPos(playerid, X, Y, Z), GetPlayerFacingAngle(playerid, A);

				PLVEH_destroy(playerid);
				
				PI[playerid][plveh] = J_AddStaticVehicleEx(GetPlayerLauncher(playerid) ? 14916 : 510, X, Y, Z, A, 1, 1), PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);

				SetEngineStatus(PI[playerid][plveh], true, playerid);
				RemovePlayerAttachedObject(playerid, 5);
			}
			case 2182:
			{
				if(CountVehicles() >= MAX_VEHICLES - 1 or AnimPlayed{playerid} or !(GetPlayerState(playerid) == 1)) return SendErrorMessage(playerid);
				else if(!GetPlayerLauncher(playerid)) return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Дельтаплан доступен только с лаунчера!");

				new Float:X, Float:Y, Float:Z, Float:A;
				GetPlayerPos(playerid, X, Y, Z), GetPlayerFacingAngle(playerid, A);

				PLVEH_destroy(playerid);

				PI[playerid][plveh] = J_AddStaticVehicleEx(4800, X, Y, Z, A, 1, 1), PutPlayerInVehicle(playerid, PI[playerid][plveh], 0);

				SetEngineStatus(PI[playerid][plveh], true, playerid);
				RemovePlayerAttachedObject(playerid, 5);
			}
			
			case 181: callcmd::boom(playerid);
			case 182: _GiveGun(playerid, 2, 1);
			case 183: _GiveGun(playerid, 5, 1);
			case 184: _GiveGun(playerid, 6, 1);
			case 185: _GiveGun(playerid, 7, 1);
			case 186: _GiveGun(playerid, 8, 1);
			case 187: _GiveGun(playerid, 15, 1);
			case 188..190: onboard(playerid);
			case 743..747: callcmd::rcveh(playerid);

			case 1134..1140, 5780..5786, 7410:
			{
				if(SharInfo[playerid][sharStatus])
					return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} Вы уже используете воздушный шар.");

				else if(GetPlayerGZ(playerid))
					return SCM(playerid, COLOR_RED, !"[Ошибка]{FFFFFF} В зеленой зоне нельзя развернуть воздушный шар.");

				else if(CountVehicles() >= 1999)
					return SendErrorMessage(playerid);

				SharInfo[playerid][sharStatus] = true;
				CreateSharik(playerid, ItemsInfo[ AksSlot[playerid][0][slot] ][itemModel]);
			}

			case 1159: callcmd::remkey(playerid);
			case 1164: _GiveGun(playerid, 43, 20);

			case 7361:
			{
				if(!GetPlayerLauncher(playerid)) 
					return SCM(playerid, COLOR_OLDRED, "[Ошибка]{FFFFFF} Джетпак доступен только с лаунчера!");

				if(GlobalMassive[playerid][30])
					return GlobalMassive[playerid][30] = false, SetPlayerSpecialAction(playerid, 0);

				GlobalMassive[playerid][29] = true;
				hidePlayerHud(playerid),
				SystemTextDrawHide(playerid), CancelSelectTextDraw(playerid),
				SetPlayer_interfaceVisible(playerid, false), 

				setBrowserWindowPicture(playerid, 1, "file:///frontend/effects/jetpack/index.html"), 
				sendPlayerActionBar(playerid, "Развертывание джетпака", 7);
				//playZoneAZVoice(GetRadioZone(playerid, 2), "http://arizona.gtasounds.com/sound_effect/sound_jetpack_effect.mp3", 0, playerid);
			}
		}

		sendPlayerBattlepassAction(playerid, 100);
	}

	return true;
}

stock getInventoryPlayerButton(playerid)
{
	new button = 0;

	if(!IsPlayerInAnyVehicle(playerid) && !IsAOwnableCar(GetPlayerVehicleID(playerid)))
	{
		button = 1;
		if(IsPlayerHaveBodyguard(playerid)) button += 4;
		if(HouseEntered[playerid]+50 == GetPlayerVirtualWorld(playerid)) button += 64;
		if(musorka[playerid] != -1) button += 1024;
	}
	if(IsPlayerInAnyVehicle(playerid) && IsAOwnableCar(GetPlayerVehicleID(playerid))) 
	{
		button = 2;
		button += 16;
	}

	return button;
}

stock dropItem(playerid, slot, slot_id = -1)
{
	if(musorka[playerid] == -1) 
		return OtherInvClose(playerid);

	else if(!ItemsInfo[Inventory[playerid][0][slot]][itemTradeable]) 
		return SCM(playerid, COLOR_RED, "[Ошибка]{FFFFFF} Данный предмет нельзя передать!");

	else if(Inventory[playerid][1][slot] == 1)
		AddItemMusor(playerid, musorka[playerid], Inventory[playerid][0][slot], 1, Inventory[playerid][2][slot], Inventory[playerid][3][slot], Inventory[playerid][4][slot], Inventory[playerid][5][slot], 3540), ClearItem(playerid, slot, 1);
	
	else if(Inventory[playerid][1][slot] > 1)
		return PickInvent[playerid] = slot, PickInventSlot[playerid] = (slot_id == -1 ? GetInvID(playerid, slot, 1) : slot_id), SPD(playerid, 8248, DIALOG_STYLE_INPUT, "", "{FFFFFF}Введите количество, которое хотите положить", "Выбрать", "Отмена");

	return true;
}

stock updateDonationPlayerData(playerid)
{
	global_str = "";

	for(new i = 16, status[10], currency_type; i < 18; i++)
	{
		if(PI[playerid][pVIP][0] >= DonateInfo_data[i][data_Give])
			status = "purchased", currency_type = 1;

		else
			status = "available", currency_type = 0; // disabled

		f(global_str, sizeof(global_str), "%s{\"id\":%i,\"title\":\"%s\",\"status\":\"%s\",\"image\":%i,\"category\":\"%s\",\"category_id\":%i,\"discount\":%i,\"currency_type\":%i,\"unix\":0,\"price\":%i}%s", global_str, DonateInfo_data[i][data_ID], DonateInfo_data[i][data_dName], status, DonateInfo_data[i][data_ImageID], DonateInfo_data[i][data_tName], DonateInfo_data[i][data_Type], DonateInfo_data[i][data_Discount], currency_type, DonateInfo_data[i][data_Cost], i == 17 ? "" : ",");
	}

	return executeEvent(playerid, 0, (str_f("window.executeEvent('event.donationshop.InitializeStarterItems', `[[%s]]`);", global_str)));
}

stock LoadKiosks()
{
	new Cache:result = mysql_query(mysql, "SELECT * FROM `kioskdata`");

	for(new i, Float:accessoryKioskPosition_data[][] = { {2214.7620, -1692.8035, 13.7870} }; i < cache_num_rows(); i++)
	{
		cache_get_value_name_int(i, "bussinesId", AccessoryKioskData[i][acsKioskBussinesID]);
		cache_get_value_name(i, "accessories", AccessoryKioskData[i][acsKioskAccessory]);
		cache_get_value_name(i, "accessories_price", AccessoryKioskData[i][acsKioskAccessoryPrice]);
		cache_get_value_name(i, "accessories_id", AccessoryKioskData[i][acsKioskAccessoryIdentificator]);
		cache_get_value_name(i, "accessories_enchant", AccessoryKioskData[i][acsKioskAccessoryEnchant]);
		cache_get_value_name(i, "accessories_color", AccessoryKioskData[i][acsKioskAccessoryColor]);
		cache_get_value_name(i, "accessories_mending", AccessoryKioskData[i][acsKioskAccessoryMending]);
		cache_get_value_name(i, "accessories_time", AccessoryKioskData[i][acsKioskAccessoryTime]);
		cache_get_value_name(i, "accessories_rentId", AccessoryKioskData[i][acsKioskAccessoryRentID]);
		CreateDynamic3DTextLabel(!"Аренда аксессуаров", 0xFFFF00FF, accessoryKioskPosition_data[i][0], accessoryKioskPosition_data[i][1], accessoryKioskPosition_data[i][2], 5.0000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
		CreateDynamicPickup(1274, 1, accessoryKioskPosition_data[i][0], accessoryKioskPosition_data[i][1], accessoryKioskPosition_data[i][2]);
	}

	return cache_delete(result);
}

stock GetKioskBussinesID(bizid)
{
	for(new i; i < 9; i++)
		if(AccessoryKioskData[i][acsKioskBussinesID] == bizid)
			return i;

	return -1;
}

stock createZoneAZVoice(zoneTypeId, attachedId, const attachText[], textColor, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
		PR_UINT8, 10,
		PR_UINT16, 1,
		PR_UINT16, strlen(attachText),
		PR_STRING, attachText,
		PR_UINT32, textColor,
		PR_UINT8, zoneTypeId,
		PR_UINT16, attachedId,
		PR_UINT32, 0);

	return BS_Delete(bs);
}

stock playZoneAZVoice(zoneId, const audioLink[], audioPlayTime, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs,
		PR_UINT8, 17,
		PR_UINT16, zoneId,
		PR_BOOL, true,
		PR_UINT16, strlen(audioLink),
		PR_STRING, audioLink,
		PR_FLOAT, 0.0,
		PR_FLOAT, 0.7);

	if(audioPlayTime)
		BS_WriteValue(bs,
			PR_BOOL, true,
			PR_UINT32, audioPlayTime);
	
	return BS_Delete(bs);
}

stock destroyZoneAZVoice(zoneId, bool:destroy = false, forplayerid = INVALID_PLAYER_ID)
{
	new BitStream:bs = BS_New();

	BS_WriteValue(bs, 
		PR_UINT8, destroy ? 11 : 13, 
		PR_UINT16, zoneId);

    return BS_Delete(bs);
}

cmd:test(playerid)
{
	for(new i = 7820; i < sizeof(ItemsInfo); i++)
	{
		if(GetString(ItemsInfo[i][itemName], "DELETED"))
			continue;

		AddItem(playerid, i, 1, 0, 0, 0, 100, 0);
	}
}

stock separationInt(value) 
{
	new string[32];

    format(string, 32, "%i", value < 0 ? -value : value);

    for(new i = strlen(string); (i -= 3) > 0;)
        if(string[i] != '\0' && '0' <= string[i] <= '9')
            strins(string, ".", i, 32);

    if (value < 0)
        strins(string, "-", 0, 32);

    return string;
}

cmd:givechasall(playerid, params[]) {

	if !IsOsnovatel(playerid) *then
		return false;

	extract params -> new type, count; else
		 return SCM(playerid, COLOR_OLDRED, "Используйте: /givechasall [тип: 0 - обычные, 1 - организационые, 2 - ежедневные] [кол-во]");

	if !(1 <= count <= 100000) *then
		return false;

	foreach(Player, i)
	{
		if(pTemp[i][tAuthorized])
			BonusTime[i][type] += count;
	}

	f(global_str, 125,"Основатель %s выдал всем игрокам %d Часов в /bonus (%s).", PN(playerid), count, type == 1 ? "огранизационные" : type == 2 ? "ежедневные" : "обычные");
	SCMALL(COLOR_RED, global_str);

	amlf("Администратор <a href=../pages/user?name=%s>%s</a> выдал всем игрокам %d Часов в /bonus (%s)!", 5, "", "", PN(playerid), PN(playerid), count, type == 1 ? "огранизационные" : type == 2 ? "ежедневные" : "обычные");

	return true;
}
//	SetTimer("checkCefConnect", 10000, true);
//
//	adl();
//~=~=~=~=~=~=~=~=~=~=~=~=[ Pragma Disable ]=~=~=~=~=~=~=~=~=~=~=~=~//
#pragma warning disable (204)
//~=~=~=~=~=~=~=~=~=~=~=~=[ Include Functions ]=~=~=~=~=~=~=~=~=~=~=~=~//
#include ../library/GunPolice // Тд оружие полиция
#include ../library/remove_build // удаление зданий
#include ../library/pobject // объекты для домов
#include ../library/shar // шары
#include ../library/vkontakte // Вконтакте
#include ../library/Enchant // Мастерская одежды
#include ../library/drive_car // Тест драйв авто
#include ../library/captcha // Капча
#include ../library/SecondHand // SecondHand
#include ../library/map // Admin Mapping
#include ../library/klad // Система кладов
#include ../library/SQL // SQL Get/Set
//~=~=~=~=~=~=~=~=~=~=~=~=[ Include Functions End ]=~=~=~=~=~=~=~=~=~=~=~=~//